{"sha": "79515f17ed4661da864347c90c76c51f9bf86069", "node_id": "C_kwDOAAsO6NoAKDc5NTE1ZjE3ZWQ0NjYxZGE4NjQzNDdjOTBjNzZjNTFmOWJmODYwNjk", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-05-30T03:05:57Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-30T13:56:09Z"}, "message": "feat: remove license_template_path config option", "tree": {"sha": "3c5a2ecabb631162305f47314674f178f87409e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5a2ecabb631162305f47314674f178f87409e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79515f17ed4661da864347c90c76c51f9bf86069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79515f17ed4661da864347c90c76c51f9bf86069", "html_url": "https://github.com/rust-lang/rust/commit/79515f17ed4661da864347c90c76c51f9bf86069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79515f17ed4661da864347c90c76c51f9bf86069/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4296767fadf87cea31c22edaef1a924dfbad40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4296767fadf87cea31c22edaef1a924dfbad40", "html_url": "https://github.com/rust-lang/rust/commit/5e4296767fadf87cea31c22edaef1a924dfbad40"}], "stats": {"total": 394, "additions": 3, "deletions": 391}, "files": [{"sha": "8c84614352ca24f1764f87c9295122b868a1c38b", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -1473,26 +1473,6 @@ use core::slice;\n #[cfg(feature = \"alloc\")] use core::slice;\n ```\n \n-## `license_template_path`\n-\n-Check whether beginnings of files match a license template.\n-\n-- **Default value**: `\"\"`\n-- **Possible values**: path to a license template file\n-- **Stable**: No (tracking issue: [#3352](https://github.com/rust-lang/rustfmt/issues/3352))\n-\n-A license template is a plain text file which is matched literally against the\n-beginning of each source file, except for `{}`-delimited blocks, which are\n-matched as regular expressions. The following license template therefore\n-matches strings like `// Copyright 2017 The Rust Project Developers.`, `//\n-Copyright 2018 The Rust Project Developers.`, etc.:\n-\n-```\n-// Copyright {\\d+} The Rust Project Developers.\n-```\n-\n-`\\{`, `\\}` and `\\\\` match literal braces / backslashes.\n-\n ## `match_arm_blocks`\n \n Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the `=>` operator."}, {"sha": "e37ed798cb55985943b58dd1d6ec69a79e610801", "filename": "src/config/config_type.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -61,9 +61,6 @@ macro_rules! create_config {\n         #[derive(Clone)]\n         #[allow(unreachable_pub)]\n         pub struct Config {\n-            // if a license_template_path has been specified, successfully read, parsed and compiled\n-            // into a regex, it will be stored here\n-            pub license_template: Option<Regex>,\n             // For each config item, we store a bool indicating whether it has\n             // been accessed and the value, and a bool whether the option was\n             // manually initialised, or taken from the default,\n@@ -104,7 +101,6 @@ macro_rules! create_config {\n                     | \"struct_variant_width\"\n                     | \"array_width\"\n                     | \"chain_width\" => self.0.set_heuristics(),\n-                    \"license_template_path\" => self.0.set_license_template(),\n                     \"merge_imports\" => self.0.set_merge_imports(),\n                     &_ => (),\n                 }\n@@ -163,7 +159,6 @@ macro_rules! create_config {\n                 }\n             )+\n                 self.set_heuristics();\n-                self.set_license_template();\n                 self.set_ignore(dir);\n                 self.set_merge_imports();\n                 self\n@@ -247,7 +242,6 @@ macro_rules! create_config {\n                     | \"struct_variant_width\"\n                     | \"array_width\"\n                     | \"chain_width\" => self.set_heuristics(),\n-                    \"license_template_path\" => self.set_license_template(),\n                     \"merge_imports\" => self.set_merge_imports(),\n                     &_ => (),\n                 }\n@@ -386,21 +380,6 @@ macro_rules! create_config {\n                 };\n             }\n \n-            fn set_license_template(&mut self) {\n-                if self.was_set().license_template_path() {\n-                    let lt_path = self.license_template_path();\n-                    if lt_path.len() > 0 {\n-                        match license::load_and_compile_template(&lt_path) {\n-                            Ok(re) => self.license_template = Some(re),\n-                            Err(msg) => eprintln!(\"Warning for license template file {:?}: {}\",\n-                                                lt_path, msg),\n-                        }\n-                    } else {\n-                        self.license_template = None;\n-                    }\n-                }\n-            }\n-\n             fn set_ignore(&mut self, dir: &Path) {\n                 self.ignore.2.add_prefix(dir);\n             }\n@@ -437,7 +416,6 @@ macro_rules! create_config {\n         impl Default for Config {\n             fn default() -> Config {\n                 Config {\n-                    license_template: None,\n                     $(\n                         $i: (Cell::new(false), false, $def, $stb),\n                     )+"}, {"sha": "c7feb502ea91e5786790aaf0c2f46d12eabd0207", "filename": "src/config/license.rs", "status": "removed", "additions": 0, "deletions": 265, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fconfig%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fconfig%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flicense.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,265 +0,0 @@\n-use std::fmt;\n-use std::fs::File;\n-use std::io;\n-use std::io::Read;\n-\n-use regex::Regex;\n-\n-#[derive(Debug)]\n-pub(crate) enum LicenseError {\n-    IO(io::Error),\n-    Regex(regex::Error),\n-    Parse(String),\n-}\n-\n-impl fmt::Display for LicenseError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {\n-            LicenseError::IO(ref err) => err.fmt(f),\n-            LicenseError::Regex(ref err) => err.fmt(f),\n-            LicenseError::Parse(ref err) => write!(f, \"parsing failed, {}\", err),\n-        }\n-    }\n-}\n-\n-impl From<io::Error> for LicenseError {\n-    fn from(err: io::Error) -> LicenseError {\n-        LicenseError::IO(err)\n-    }\n-}\n-\n-impl From<regex::Error> for LicenseError {\n-    fn from(err: regex::Error) -> LicenseError {\n-        LicenseError::Regex(err)\n-    }\n-}\n-\n-// the template is parsed using a state machine\n-enum ParsingState {\n-    Lit,\n-    LitEsc,\n-    // the u32 keeps track of brace nesting\n-    Re(u32),\n-    ReEsc(u32),\n-    Abort(String),\n-}\n-\n-use self::ParsingState::*;\n-\n-pub(crate) struct TemplateParser {\n-    parsed: String,\n-    buffer: String,\n-    state: ParsingState,\n-    linum: u32,\n-    open_brace_line: u32,\n-}\n-\n-impl TemplateParser {\n-    fn new() -> Self {\n-        Self {\n-            parsed: \"^\".to_owned(),\n-            buffer: String::new(),\n-            state: Lit,\n-            linum: 1,\n-            // keeps track of last line on which a regex placeholder was started\n-            open_brace_line: 0,\n-        }\n-    }\n-\n-    /// Converts a license template into a string which can be turned into a regex.\n-    ///\n-    /// The license template could use regex syntax directly, but that would require a lot of manual\n-    /// escaping, which is inconvenient. It is therefore literal by default, with optional regex\n-    /// subparts delimited by `{` and `}`. Additionally:\n-    ///\n-    /// - to insert literal `{`, `}` or `\\`, escape it with `\\`\n-    /// - an empty regex placeholder (`{}`) is shorthand for `{.*?}`\n-    ///\n-    /// This function parses this input format and builds a properly escaped *string* representation\n-    /// of the equivalent regular expression. It **does not** however guarantee that the returned\n-    /// string is a syntactically valid regular expression.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```text\n-    /// assert_eq!(\n-    ///     TemplateParser::parse(\n-    ///         r\"\n-    /// // Copyright {\\d+} The \\} Rust \\\\ Project \\{ Developers. See the {([A-Z]+)}\n-    /// // file at the top-level directory of this distribution and at\n-    /// // {}.\n-    /// //\n-    /// // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-    /// // http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-    /// // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-    /// // option. This file may not be copied, modified, or distributed\n-    /// // except according to those terms.\n-    /// \"\n-    ///     ).unwrap(),\n-    ///     r\"^\n-    /// // Copyright \\d+ The \\} Rust \\\\ Project \\{ Developers\\. See the ([A-Z]+)\n-    /// // file at the top\\-level directory of this distribution and at\n-    /// // .*?\\.\n-    /// //\n-    /// // Licensed under the Apache License, Version 2\\.0 <LICENSE\\-APACHE or\n-    /// // http://www\\.apache\\.org/licenses/LICENSE\\-2\\.0> or the MIT license\n-    /// // <LICENSE\\-MIT or http://opensource\\.org/licenses/MIT>, at your\n-    /// // option\\. This file may not be copied, modified, or distributed\n-    /// // except according to those terms\\.\n-    /// \"\n-    /// );\n-    /// ```\n-    pub(crate) fn parse(template: &str) -> Result<String, LicenseError> {\n-        let mut parser = Self::new();\n-        for chr in template.chars() {\n-            if chr == '\\n' {\n-                parser.linum += 1;\n-            }\n-            parser.state = match parser.state {\n-                Lit => parser.trans_from_lit(chr),\n-                LitEsc => parser.trans_from_litesc(chr),\n-                Re(brace_nesting) => parser.trans_from_re(chr, brace_nesting),\n-                ReEsc(brace_nesting) => parser.trans_from_reesc(chr, brace_nesting),\n-                Abort(msg) => return Err(LicenseError::Parse(msg)),\n-            };\n-        }\n-        // check if we've ended parsing in a valid state\n-        match parser.state {\n-            Abort(msg) => return Err(LicenseError::Parse(msg)),\n-            Re(_) | ReEsc(_) => {\n-                return Err(LicenseError::Parse(format!(\n-                    \"escape or balance opening brace on l. {}\",\n-                    parser.open_brace_line\n-                )));\n-            }\n-            LitEsc => {\n-                return Err(LicenseError::Parse(format!(\n-                    \"incomplete escape sequence on l. {}\",\n-                    parser.linum\n-                )));\n-            }\n-            _ => (),\n-        }\n-        parser.parsed.push_str(&regex::escape(&parser.buffer));\n-\n-        Ok(parser.parsed)\n-    }\n-\n-    fn trans_from_lit(&mut self, chr: char) -> ParsingState {\n-        match chr {\n-            '{' => {\n-                self.parsed.push_str(&regex::escape(&self.buffer));\n-                self.buffer.clear();\n-                self.open_brace_line = self.linum;\n-                Re(1)\n-            }\n-            '}' => Abort(format!(\n-                \"escape or balance closing brace on l. {}\",\n-                self.linum\n-            )),\n-            '\\\\' => LitEsc,\n-            _ => {\n-                self.buffer.push(chr);\n-                Lit\n-            }\n-        }\n-    }\n-\n-    fn trans_from_litesc(&mut self, chr: char) -> ParsingState {\n-        self.buffer.push(chr);\n-        Lit\n-    }\n-\n-    fn trans_from_re(&mut self, chr: char, brace_nesting: u32) -> ParsingState {\n-        match chr {\n-            '{' => {\n-                self.buffer.push(chr);\n-                Re(brace_nesting + 1)\n-            }\n-            '}' => {\n-                match brace_nesting {\n-                    1 => {\n-                        // default regex for empty placeholder {}\n-                        if self.buffer.is_empty() {\n-                            self.parsed.push_str(\".*?\");\n-                        } else {\n-                            self.parsed.push_str(&self.buffer);\n-                        }\n-                        self.buffer.clear();\n-                        Lit\n-                    }\n-                    _ => {\n-                        self.buffer.push(chr);\n-                        Re(brace_nesting - 1)\n-                    }\n-                }\n-            }\n-            '\\\\' => {\n-                self.buffer.push(chr);\n-                ReEsc(brace_nesting)\n-            }\n-            _ => {\n-                self.buffer.push(chr);\n-                Re(brace_nesting)\n-            }\n-        }\n-    }\n-\n-    fn trans_from_reesc(&mut self, chr: char, brace_nesting: u32) -> ParsingState {\n-        self.buffer.push(chr);\n-        Re(brace_nesting)\n-    }\n-}\n-\n-pub(crate) fn load_and_compile_template(path: &str) -> Result<Regex, LicenseError> {\n-    let mut lt_file = File::open(&path)?;\n-    let mut lt_str = String::new();\n-    lt_file.read_to_string(&mut lt_str)?;\n-    let lt_parsed = TemplateParser::parse(&lt_str)?;\n-    Ok(Regex::new(&lt_parsed)?)\n-}\n-\n-#[cfg(test)]\n-mod test {\n-    use super::TemplateParser;\n-\n-    #[test]\n-    fn test_parse_license_template() {\n-        assert_eq!(\n-            TemplateParser::parse(\"literal (.*)\").unwrap(),\n-            r\"^literal \\(\\.\\*\\)\"\n-        );\n-        assert_eq!(\n-            TemplateParser::parse(r\"escaping \\}\").unwrap(),\n-            r\"^escaping \\}\"\n-        );\n-        assert!(TemplateParser::parse(\"unbalanced } without escape\").is_err());\n-        assert_eq!(\n-            TemplateParser::parse(r\"{\\d+} place{-?}holder{s?}\").unwrap(),\n-            r\"^\\d+ place-?holders?\"\n-        );\n-        assert_eq!(TemplateParser::parse(\"default {}\").unwrap(), \"^default .*?\");\n-        assert_eq!(\n-            TemplateParser::parse(r\"unbalanced nested braces {\\{{3}}\").unwrap(),\n-            r\"^unbalanced nested braces \\{{3}\"\n-        );\n-        assert_eq!(\n-            &TemplateParser::parse(\"parsing error }\")\n-                .unwrap_err()\n-                .to_string(),\n-            \"parsing failed, escape or balance closing brace on l. 1\"\n-        );\n-        assert_eq!(\n-            &TemplateParser::parse(\"parsing error {\\nsecond line\")\n-                .unwrap_err()\n-                .to_string(),\n-            \"parsing failed, escape or balance opening brace on l. 1\"\n-        );\n-        assert_eq!(\n-            &TemplateParser::parse(r\"parsing error \\\")\n-                .unwrap_err()\n-                .to_string(),\n-            \"parsing failed, incomplete escape sequence on l. 1\"\n-        );\n-    }\n-}"}, {"sha": "a5169528187834046e13ef5c8f6de8fa9fde1511", "filename": "src/config/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -5,7 +5,6 @@ use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n-use regex::Regex;\n use thiserror::Error;\n \n use crate::config::config_type::ConfigType;\n@@ -22,7 +21,6 @@ pub(crate) mod config_type;\n pub(crate) mod options;\n \n pub(crate) mod file_lines;\n-pub(crate) mod license;\n pub(crate) mod lists;\n \n // This macro defines configuration options used in rustfmt. Each option\n@@ -63,8 +61,6 @@ create_config! {\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, false, \"Convert /* */ comments to // comments where possible\";\n     normalize_doc_attributes: bool, false, false, \"Normalize doc attributes as doc comments\";\n-    license_template_path: String, String::default(), false,\n-        \"Beginning of file must match license template\";\n     format_strings: bool, false, false, \"Format string literals where necessary\";\n     format_macro_matchers: bool, false, false,\n         \"Format the metavariable matching patterns in macros\";\n@@ -414,8 +410,6 @@ mod test {\n         create_config! {\n             // Options that are used by the generated functions\n             max_width: usize, 100, true, \"Maximum width of each line\";\n-            license_template_path: String, String::default(), false,\n-                \"Beginning of file must match license template\";\n             required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n                 \"Require a specific version of rustfmt.\";\n             ignore: IgnoreList, IgnoreList::default(), false,\n@@ -520,31 +514,6 @@ mod test {\n         assert_eq!(s.contains(\"(unstable)\"), true);\n     }\n \n-    #[test]\n-    fn test_empty_string_license_template_path() {\n-        let toml = r#\"license_template_path = \"\"\"#;\n-        let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n-        assert!(config.license_template.is_none());\n-    }\n-\n-    #[nightly_only_test]\n-    #[test]\n-    fn test_valid_license_template_path() {\n-        let toml = r#\"license_template_path = \"tests/license-template/lt.txt\"\"#;\n-        let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n-        assert!(config.license_template.is_some());\n-    }\n-\n-    #[nightly_only_test]\n-    #[test]\n-    fn test_override_existing_license_with_no_license() {\n-        let toml = r#\"license_template_path = \"tests/license-template/lt.txt\"\"#;\n-        let mut config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n-        assert!(config.license_template.is_some());\n-        config.override_value(\"license_template_path\", \"\");\n-        assert!(config.license_template.is_none());\n-    }\n-\n     #[test]\n     fn test_dump_default_config() {\n         let default_config = format!(\n@@ -566,7 +535,6 @@ format_code_in_doc_comments = false\n comment_width = 80\n normalize_comments = false\n normalize_doc_attributes = false\n-license_template_path = \"\"\n format_strings = false\n format_macro_matchers = false\n format_macro_bodies = true"}, {"sha": "fd536d4df41a27a0896351497d9a54c0057f2563", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -142,7 +142,6 @@ fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationTy\n         | ErrorKind::ModuleResolutionError(_)\n         | ErrorKind::ParseError\n         | ErrorKind::LostComment\n-        | ErrorKind::LicenseCheck\n         | ErrorKind::BadAttr\n         | ErrorKind::InvalidGlobPattern(_)\n         | ErrorKind::VersionMismatch => AnnotationType::Error,"}, {"sha": "e6995210a943a8d42611f87e70cdbe506ed844ad", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -332,8 +332,7 @@ impl FormattingError {\n             ErrorKind::TrailingWhitespace\n             | ErrorKind::DeprecatedAttr\n             | ErrorKind::BadAttr\n-            | ErrorKind::LostComment\n-            | ErrorKind::LicenseCheck => {\n+            | ErrorKind::LostComment => {\n                 let trailing_ws_start = self\n                     .line_buffer\n                     .rfind(|c: char| !c.is_whitespace())\n@@ -365,7 +364,7 @@ pub(crate) struct ReportedErrors {\n     // Code contains macro call that was unable to format.\n     pub(crate) has_macro_format_failure: bool,\n \n-    // Failed a check, such as the license check or other opt-in checking.\n+    // Failed an opt-in checking.\n     pub(crate) has_check_errors: bool,\n \n     /// Formatted code differs from existing code (--check only).\n@@ -461,7 +460,6 @@ fn format_lines(\n     report: &FormatReport,\n ) {\n     let mut formatter = FormatLines::new(name, skipped_range, config);\n-    formatter.check_license(text);\n     formatter.iterate(text);\n \n     if formatter.newline_count > 1 {\n@@ -508,20 +506,6 @@ impl<'a> FormatLines<'a> {\n         }\n     }\n \n-    fn check_license(&mut self, text: &mut String) {\n-        if let Some(ref license_template) = self.config.license_template {\n-            if !license_template.is_match(text) {\n-                self.errors.push(FormattingError {\n-                    line: self.cur_line,\n-                    kind: ErrorKind::LicenseCheck,\n-                    is_comment: false,\n-                    is_string: false,\n-                    line_buffer: String::new(),\n-                });\n-            }\n-        }\n-    }\n-\n     // Iterate over the chars in the file map.\n     fn iterate(&mut self, text: &mut String) {\n         for (kind, c) in CharClasses::new(text.chars()) {"}, {"sha": "495010a297df04939a9068777ce42e2e3a29ffcb", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79515f17ed4661da864347c90c76c51f9bf86069/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79515f17ed4661da864347c90c76c51f9bf86069/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=79515f17ed4661da864347c90c76c51f9bf86069", "patch": "@@ -108,9 +108,6 @@ pub enum ErrorKind {\n     /// Line ends in whitespace.\n     #[error(\"left behind trailing whitespace\")]\n     TrailingWhitespace,\n-    /// License check has failed.\n-    #[error(\"license check failed\")]\n-    LicenseCheck,\n     /// Used deprecated skip attribute.\n     #[error(\"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n     DeprecatedAttr,\n@@ -231,10 +228,7 @@ impl FormatReport {\n                 ErrorKind::LostComment => {\n                     errs.has_unformatted_code_errors = true;\n                 }\n-                ErrorKind::LicenseCheck\n-                | ErrorKind::DeprecatedAttr\n-                | ErrorKind::BadAttr\n-                | ErrorKind::VersionMismatch => {\n+                ErrorKind::DeprecatedAttr | ErrorKind::BadAttr | ErrorKind::VersionMismatch => {\n                     errs.has_check_errors = true;\n                 }\n                 _ => {}"}, {"sha": "74ee8b010dd054ec1bdf80f0ca81f87a67cbf669", "filename": "tests/config/issue-3802.toml", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fconfig%2Fissue-3802.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fconfig%2Fissue-3802.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fissue-3802.toml?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,2 +0,0 @@\n-unstable_features = true\n-license_template_path = \"\""}, {"sha": "ea4390371a09adad8f9b2cc69af1ee917afb0b54", "filename": "tests/license-template/lt.txt", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Flicense-template%2Flt.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Flicense-template%2Flt.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flicense-template%2Flt.txt?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,2 +0,0 @@\n-// rustfmt-license_template_path: tests/license-template/lt.txt\n-// Copyright {\\d+} The rustfmt developers."}, {"sha": "d3a91e4231d195930c3d60c2ab3111fb55064a3a", "filename": "tests/source/license-templates/empty_license_path.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fsource%2Flicense-templates%2Fempty_license_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fsource%2Flicense-templates%2Fempty_license_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flicense-templates%2Fempty_license_path.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,5 +0,0 @@\n-// rustfmt-config: issue-3802.toml\n-\n-fn main() {\n-println!(\"Hello world!\");\n-}"}, {"sha": "6816011c60dc519377d8a66ab66ce13224400171", "filename": "tests/source/license-templates/license.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fsource%2Flicense-templates%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Fsource%2Flicense-templates%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flicense-templates%2Flicense.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-license_template_path: tests/license-template/lt.txt\n-// Copyright 2019 The rustfmt developers.\n-\n-fn main() {\n-println!(\"Hello world!\");\n-}"}, {"sha": "950f103ed3922532460694fd8c0ee838121b2b03", "filename": "tests/target/license-templates/empty_license_path.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Ftarget%2Flicense-templates%2Fempty_license_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Ftarget%2Flicense-templates%2Fempty_license_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flicense-templates%2Fempty_license_path.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,5 +0,0 @@\n-// rustfmt-config: issue-3802.toml\n-\n-fn main() {\n-    println!(\"Hello world!\");\n-}"}, {"sha": "7169c7b2576155e3b016f76148c2abdfd61e11e0", "filename": "tests/target/license-templates/license.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Ftarget%2Flicense-templates%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/tests%2Ftarget%2Flicense-templates%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flicense-templates%2Flicense.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-license_template_path: tests/license-template/lt.txt\n-// Copyright 2019 The rustfmt developers.\n-\n-fn main() {\n-    println!(\"Hello world!\");\n-}"}]}