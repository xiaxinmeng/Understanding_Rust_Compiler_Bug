{"sha": "02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjdkZTFiZTVhMWNhMzg1YTYzYjY2YjhkMGFmNDdmZjViYWJmNzc=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-26T09:44:42Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:26Z"}, "message": "Fix lint findings in librustc_metadata", "tree": {"sha": "6715789ef41452bdda4687c50bdbab07a9668485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6715789ef41452bdda4687c50bdbab07a9668485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L4ACgkQaTCGhp1Q\nZjcCVA//ch2HsXk/7rf6kdb9/efNHkaSMjSn3+M5nvDcCs0k5HQOAnF1KcnJROUJ\njP8wcs2+/5uidc3J0bje15w8bQ/CFN1Kj0qVhXWyds+OKYK6IdvlC7WduVLwDWf+\ng0/RJ9Acmk60lHT4DfUt0/OyOYEDs5hTC+DniNRlZ6qWhe+f390slhKwk89q551f\nqTudpCPYZpHHFdKOVFH86NoNGOMke/8PGwMMfqI3dFCP9Z4+yurnrOvNJtELsBGa\nVuEALsy/7I2YPXaFNmNPr6nRFu3+Se4P24AtiL7Dh88HTKC4r1zJaDEAXuVKF34k\ncwhbz/SVth23UdLgQFZ5ZkTAalGTO7DQKCRK7UMuvhfoF5WijNHHlA4hyj3TvE2a\n6J7/n2ozFdaElD6IZoAl3T6yxEs9iLKKiJGsWw2i+2YbioHH3OgQ+LRlmpaF4L9W\nM50B1prpOWrfrlKEMRoYfB7/shupmYo+LVZm3pwoa/kR7iDuyj06mID4v10kXLgm\n6gF+lkvpa3Tip/dq9CDVQzOySCijZfotBpF0gJh+ZRrVzE0fQDEPzzYPDgzzq66X\n+COeD3cFtgdDLAv7j0CCsHMW5UBP9fdcn4TdSCEMXPTKTy0kakxcLNPzKzzcCDsW\naQhrmCxkqj2RC/0Zxmhb1sFRZqDLQiTznyP1ITWjCZJiODpKviw=\n=EwfE\n-----END PGP SIGNATURE-----", "payload": "tree 6715789ef41452bdda4687c50bdbab07a9668485\nparent 6c272b78dcfd16b36955903cfc6386af71a64583\nauthor flip1995 <hello@philkrones.com> 1556271882 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479166 +0200\n\nFix lint findings in librustc_metadata\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "html_url": "https://github.com/rust-lang/rust/commit/02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f7de1be5a1ca385a63b66b8d0af47ff5babf77/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c272b78dcfd16b36955903cfc6386af71a64583", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c272b78dcfd16b36955903cfc6386af71a64583", "html_url": "https://github.com/rust-lang/rust/commit/6c272b78dcfd16b36955903cfc6386af71a64583"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f914184b34f541fe11a61287656214b0917069e2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02f7de1be5a1ca385a63b66b8d0af47ff5babf77/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f7de1be5a1ca385a63b66b8d0af47ff5babf77/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n         }\n \n-        let repr_options = get_repr_options(&tcx, adt_def_id);\n+        let repr_options = get_repr_options(tcx, adt_def_id);\n \n         Entry {\n             kind: EntryKind::Struct(self.lazy(&data), repr_options),\n@@ -1119,7 +1119,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::Ty(..) => EntryKind::Type,\n             hir::ItemKind::Existential(..) => EntryKind::Existential,\n-            hir::ItemKind::Enum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n+            hir::ItemKind::Enum(..) => EntryKind::Enum(get_repr_options(tcx, def_id)),\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let variant = tcx.adt_def(def_id).non_enum_variant();\n \n@@ -1129,7 +1129,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let ctor = struct_def.ctor_hir_id()\n                     .map(|ctor_hir_id| tcx.hir().local_def_id_from_hir_id(ctor_hir_id).index);\n \n-                let repr_options = get_repr_options(&tcx, def_id);\n+                let repr_options = get_repr_options(tcx, def_id);\n \n                 EntryKind::Struct(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n@@ -1140,7 +1140,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n             hir::ItemKind::Union(..) => {\n                 let variant = tcx.adt_def(def_id).non_enum_variant();\n-                let repr_options = get_repr_options(&tcx, def_id);\n+                let repr_options = get_repr_options(tcx, def_id);\n \n                 EntryKind::Union(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n@@ -1938,7 +1938,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}]}