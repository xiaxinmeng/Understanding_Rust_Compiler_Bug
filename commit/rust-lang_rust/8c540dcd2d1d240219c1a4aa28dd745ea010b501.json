{"sha": "8c540dcd2d1d240219c1a4aa28dd745ea010b501", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTQwZGNkMmQxZDI0MDIxOWMxYTRhYTI4ZGQ3NDVlYTAxMGI1MDE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-08T19:05:13Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-08T19:16:53Z"}, "message": "Improve the redundant_closure message", "tree": {"sha": "e79152f0aab468e70f7c042a4fd6ea6f16b46c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e79152f0aab468e70f7c042a4fd6ea6f16b46c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c540dcd2d1d240219c1a4aa28dd745ea010b501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c540dcd2d1d240219c1a4aa28dd745ea010b501", "html_url": "https://github.com/rust-lang/rust/commit/8c540dcd2d1d240219c1a4aa28dd745ea010b501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c540dcd2d1d240219c1a4aa28dd745ea010b501/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf98aa6fb8e02db15ad18d517145f13a5bed2921", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf98aa6fb8e02db15ad18d517145f13a5bed2921", "html_url": "https://github.com/rust-lang/rust/commit/bf98aa6fb8e02db15ad18d517145f13a5bed2921"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "c461732fd3693dc1301f3cdbbced43026adc862c", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c540dcd2d1d240219c1a4aa28dd745ea010b501/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c540dcd2d1d240219c1a4aa28dd745ea010b501/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=8c540dcd2d1d240219c1a4aa28dd745ea010b501", "patch": "@@ -99,8 +99,8 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     cx,\n                     REDUNDANT_CLOSURE,\n                     expr.span,\n-                    \"redundant closure found\",\n-                    \"remove closure as shown\",\n+                    \"redundant closure\",\n+                    \"replace the closure with `Vec::new`\",\n                     \"std::vec::Vec::new\".into(),\n                     Applicability::MachineApplicable,\n                 );\n@@ -129,11 +129,11 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             if compare_inputs(&mut iter_input_pats(decl, body), &mut args.iter());\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |diag| {\n+                span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure\", |diag| {\n                     if let Some(snippet) = snippet_opt(cx, caller.span) {\n                         diag.span_suggestion(\n                             expr.span,\n-                            \"remove closure as shown\",\n+                            \"replace the closure with the function itself\",\n                             snippet,\n                             Applicability::MachineApplicable,\n                         );\n@@ -163,8 +163,8 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     cx,\n                     REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n                     expr.span,\n-                    \"redundant closure found\",\n-                    \"remove closure as shown\",\n+                    \"redundant closure\",\n+                    \"replace the closure with the method itself\",\n                     format!(\"{}::{}\", name, path.ident.name),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "57ed65279666a64b29e7058b8055880865d70233", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c540dcd2d1d240219c1a4aa28dd745ea010b501/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c540dcd2d1d240219c1a4aa28dd745ea010b501/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=8c540dcd2d1d240219c1a4aa28dd745ea010b501", "patch": "@@ -1,22 +1,22 @@\n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:32:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n-   |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n+   |                           ^^^^^^^^^^ help: replace the closure with the function itself: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:33:10\n    |\n LL |     meta(|a| foo(a));\n-   |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n+   |          ^^^^^^^^^^ help: replace the closure with the function itself: `foo`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:37:40\n    |\n LL |     let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n-   |                                        ^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::new`\n+   |                                        ^^^^^^^^^ help: replace the closure with `Vec::new`: `std::vec::Vec::new`\n \n error: this expression borrows a reference (`&u8`) that is immediately dereferenced by the compiler\n   --> $DIR/eta.rs:39:21\n@@ -26,61 +26,61 @@ LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:46:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n-   |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n+   |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `generic`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:89:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n-   |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n+   |                                                   ^^^^^^^^^^^ help: replace the closure with the method itself: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:91:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n-   |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n+   |                                                   ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `TestTrait::trait_foo`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:94:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n-   |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n+   |                                          ^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::vec::Vec::clear`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:99:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n-   |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n+   |                             ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:101:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n-   |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n+   |                           ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_uppercase`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:104:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n+   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_ascii_uppercase`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:187:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n-   |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n+   |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo_ptr`\n \n-error: redundant closure found\n+error: redundant closure\n   --> $DIR/eta.rs:192:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n-   |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n+   |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`\n \n error: aborting due to 13 previous errors\n "}]}