{"sha": "7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZGE0YTU2N2QzMGVjYWRjM2Y2YmZhMTdlMjkxMTU5NGFkNmIxZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-04T01:08:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-04T01:08:52Z"}, "message": "librustdoc: Parenthesize closure calls in tests to attempt to put out burning tinderbox. rs=rustbot", "tree": {"sha": "0388cd477f8dc82d3f2962cf965191ef49aa11c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0388cd477f8dc82d3f2962cf965191ef49aa11c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "html_url": "https://github.com/rust-lang/rust/commit/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f1e3084fccac7bada780f285ea048ec8a56521", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f1e3084fccac7bada780f285ea048ec8a56521", "html_url": "https://github.com/rust-lang/rust/commit/b6f1e3084fccac7bada780f285ea048ec8a56521"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "62a83f6a520b8a6432d98721ab9be82e6098b682", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -85,7 +85,7 @@ mod test {\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "65f3a9f7d7fb7f65b382070efbdd9a107fd6c09e", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -239,9 +239,9 @@ mod test {\n                 .. config::default_config(&Path(\"whatever\"))\n             };\n             let doc = extract::from_srv(srv, ~\"\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n-            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n-            let doc = path_pass::mk_pass().f(srv, doc);\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n+            let doc = (path_pass::mk_pass().f)(srv, doc);\n             run(srv, doc, config)\n         }\n     }"}, {"sha": "618e92bc046a0ee283dc39e517537fa023f3e829", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -115,7 +115,7 @@ fn should_request_new_writer_for_each_page() {\n     let (writer_factory, po) = markdown_writer::future_writer_factory();\n     let (srv, doc) = test::create_doc_srv(~\"mod a { }\");\n     // Split the document up into pages\n-    let doc = page_pass::mk_pass(config::DocPerMod).f(srv, doc);\n+    let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n     write_markdown(doc, move writer_factory);\n     // We expect two pages to have been written\n     for iter::repeat(2) {\n@@ -147,7 +147,7 @@ fn should_write_title_for_each_page() {\n     let (writer_factory, po) = markdown_writer::future_writer_factory();\n     let (srv, doc) = test::create_doc_srv(\n         ~\"#[link(name = \\\"core\\\")]; mod a { }\");\n-    let doc = page_pass::mk_pass(config::DocPerMod).f(srv, doc);\n+    let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n     write_markdown(doc, move writer_factory);\n     for iter::repeat(2) {\n         let (page, markdown) = comm::recv(po);\n@@ -814,21 +814,21 @@ mod test {\n \n             let doc = extract::from_srv(srv, ~\"\");\n             debug!(\"doc (extract): %?\", doc);\n-            let doc = tystr_pass::mk_pass().f(srv, doc);\n+            let doc = (tystr_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (tystr): %?\", doc);\n-            let doc = path_pass::mk_pass().f(srv, doc);\n+            let doc = (path_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (path): %?\", doc);\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (attr): %?\", doc);\n-            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (desc_to_brief): %?\", doc);\n-            let doc = unindent_pass::mk_pass().f(srv, doc);\n+            let doc = (unindent_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (unindent): %?\", doc);\n-            let doc = sectionalize_pass::mk_pass().f(srv, doc);\n+            let doc = (sectionalize_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (trim): %?\", doc);\n-            let doc = trim_pass::mk_pass().f(srv, doc);\n+            let doc = (trim_pass::mk_pass().f)(srv, doc);\n             debug!(\"doc (sectionalize): %?\", doc);\n-            let doc = markdown_index_pass::mk_pass(config).f(srv, doc);\n+            let doc = (markdown_index_pass::mk_pass(config).f)(srv, doc);\n             debug!(\"doc (index): %?\", doc);\n             (srv, doc)\n         }\n@@ -853,7 +853,7 @@ mod test {\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         let pass = mk_pass(move writer_factory);\n-        pass.f(srv, doc);\n+        (pass.f)(srv, doc);\n         return comm::recv(po).second();\n     }\n "}, {"sha": "4dfba8c29bad6b0b267d0f450bbe3cfa7d6a1c70", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -247,7 +247,7 @@ mod test {\n     fn mk_doc(+name: ~str, +source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, name);\n-            let doc = path_pass::mk_pass().f(srv, doc);\n+            let doc = (path_pass::mk_pass().f)(srv, doc);\n             doc\n         }\n     }"}, {"sha": "8bd761df53338c0f13d52f6253d19a55cef7b47b", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -234,7 +234,7 @@ mod test {\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "767468293bb0f215d289403dd638683f22ae0436", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -14,7 +14,7 @@ fn test() {\n     let source = ~\"mod z { } fn y() { }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n-        let doc = mk_pass().f(srv, doc);\n+        let doc = (mk_pass().f)(srv, doc);\n         assert doc.cratemod().items[0].name() == ~\"y\";\n         assert doc.cratemod().items[1].name() == ~\"z\";\n     }"}, {"sha": "0bc6c1accdd48aa4ef7b8877e07dc20d07b6f44a", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -39,7 +39,7 @@ fn test() {\n          struct istruct { f: () }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n-        let doc = mk_pass().f(srv, doc);\n+        let doc = (mk_pass().f)(srv, doc);\n         assert doc.cratemod().items[0].name() == ~\"iconst\";\n         assert doc.cratemod().items[1].name() == ~\"itype\";\n         assert doc.cratemod().items[2].name() == ~\"ienum\";"}, {"sha": "3fa7ff6d8a6bec24f7783d84bb7defa01a212114", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -51,7 +51,7 @@ fn test() {\n     let source = ~\"mod z { mod y { } fn x() { } } mod w { }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n-        let doc = mk_pass(~\"\", name_lteq).f(srv, doc);\n+        let doc = (mk_pass(~\"\", name_lteq).f)(srv, doc);\n         assert doc.cratemod().mods()[0].name() == ~\"w\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"x\";\n         assert doc.cratemod().mods()[1].items[1].name() == ~\"y\";\n@@ -68,10 +68,10 @@ fn should_be_stable() {\n     let source = ~\"mod a { mod b { } } mod c { mod d { } }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n-        let doc = mk_pass(~\"\", always_eq).f(srv, doc);\n+        let doc = (mk_pass(~\"\", always_eq).f)(srv, doc);\n         assert doc.cratemod().mods()[0].items[0].name() == ~\"b\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"d\";\n-        let doc = mk_pass(~\"\", always_eq).f(srv, doc);\n+        let doc = (mk_pass(~\"\", always_eq).f)(srv, doc);\n         assert doc.cratemod().mods()[0].items[0].name() == ~\"b\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"d\";\n     }"}, {"sha": "6493caeebe60dd73816905cdba2869f2a713f17d", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -276,10 +276,10 @@ mod test {\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n-            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n-            let doc = sectionalize_pass::mk_pass().f(srv, doc);\n-            mk_pass(~\"\", |s| str::trim(s) ).f(srv, doc)\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n+            let doc = (sectionalize_pass::mk_pass().f)(srv, doc);\n+            (mk_pass(~\"\", |s| str::trim(s) ).f)(srv, doc)\n         }\n     }\n }"}, {"sha": "58bf52f9a4a3ae82189383f1f1d1e8712501be99", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=7eda4a567d30ecadc3f6bfa17e2911594ad6b1fa", "patch": "@@ -25,8 +25,8 @@ mod test {\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n-            mk_pass().f(srv, doc)\n+            let doc = (attr_pass::mk_pass().f)(srv, doc);\n+            (mk_pass().f)(srv, doc)\n         }\n     }\n }"}]}