{"sha": "17aaece6b39c2fb525be0eccce4626fc622e8236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YWFlY2U2YjM5YzJmYjUyNWJlMGVjY2NlNDYyNmZjNjIyZTgyMzY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-03T11:44:01Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-03T11:44:01Z"}, "message": "Merge #917\n\n917: Trait tests r=flodiebold a=flodiebold\n\nThis adds a bunch of basic tests for trait functionality, just to outline what seems like the first goals for that ;)\r\n\r\nIt also changes the display of `Ty::Unknown` to `{unknown}`, since `[unknown]` could be confused with a slice, and fixes an error in the emacs runnables code.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "864de162bea4cf160a78d56d6f3a0c0fd82ca73a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/864de162bea4cf160a78d56d6f3a0c0fd82ca73a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17aaece6b39c2fb525be0eccce4626fc622e8236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17aaece6b39c2fb525be0eccce4626fc622e8236", "html_url": "https://github.com/rust-lang/rust/commit/17aaece6b39c2fb525be0eccce4626fc622e8236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17aaece6b39c2fb525be0eccce4626fc622e8236/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "00b09bcd8c96c37633964aa40df711dc013a6ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b09bcd8c96c37633964aa40df711dc013a6ca5", "html_url": "https://github.com/rust-lang/rust/commit/00b09bcd8c96c37633964aa40df711dc013a6ca5"}, {"sha": "2e8f25884584ec7dd21bdd4be1bcf1c857efa35e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8f25884584ec7dd21bdd4be1bcf1c857efa35e", "html_url": "https://github.com/rust-lang/rust/commit/2e8f25884584ec7dd21bdd4be1bcf1c857efa35e"}], "stats": {"total": 2577, "additions": 1286, "deletions": 1291}, "files": [{"sha": "bad811a56b06fb009caedb50d48f75d64c30a9f5", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=17aaece6b39c2fb525be0eccce4626fc622e8236", "patch": "@@ -339,7 +339,7 @@ impl fmt::Display for Ty {\n                 Ok(())\n             }\n             Ty::Param { name, .. } => write!(f, \"{}\", name),\n-            Ty::Unknown => write!(f, \"[unknown]\"),\n+            Ty::Unknown => write!(f, \"{{unknown}}\"),\n             Ty::Infer(..) => write!(f, \"_\"),\n         }\n     }"}, {"sha": "28f57623d111763f3f0364bc419ed4791d764758", "filename": "crates/ra_hir/src/ty/snapshots/tests__bug_484.snap", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_484.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_484.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_484.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,12 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.880187500+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[11; 37) '{    l... {}; }': ()\n-[20; 21) 'x': ()\n-[24; 34) 'if true {}': ()\n-[27; 31) 'true': bool\n-[32; 34) '{}': ()\n-"}, {"sha": "e7b42e413c0fc2dc118e2ffc83d6abb93e15981e", "filename": "crates/ra_hir/src/ty/snapshots/tests__bug_585.snap", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_585.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_585.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_585.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,15 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.880187500+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[11; 89) '{     ...   } }': ()\n-[17; 21) 'X {}': [unknown]\n-[27; 87) 'match ...     }': ()\n-[33; 34) 'x': [unknown]\n-[45; 52) 'A::B {}': [unknown]\n-[56; 58) '()': ()\n-[68; 74) 'A::Y()': [unknown]\n-[78; 80) '()': ()\n-"}, {"sha": "d23d3f139261586a4556e2ff0b1363e47bf0bbcc", "filename": "crates/ra_hir/src/ty/snapshots/tests__bug_651.snap", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_651.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_651.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__bug_651.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,13 +0,0 @@\n----\n-created: \"2019-01-25T20:31:47.275112244+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[11; 41) '{     ...+ y; }': ()\n-[21; 22) 'y': i32\n-[25; 27) '92': i32\n-[33; 34) '1': i32\n-[33; 38) '1 + y': i32\n-[37; 38) 'y': i32\n-"}, {"sha": "48c83cbb277e2c62e81433fee75a5ff770fcb662", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_adt_pattern.snap", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,32 +0,0 @@\n----\n-created: \"2019-01-28T21:58:55.559331849+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[68; 289) '{     ...  d; }': ()\n-[78; 79) 'e': E\n-[82; 95) 'E::A { x: 3 }': E\n-[92; 93) '3': usize\n-[106; 113) 'S(y, z)': S\n-[108; 109) 'y': u32\n-[111; 112) 'z': E\n-[116; 119) 'foo': S\n-[129; 148) 'E::A {..._var }': E\n-[139; 146) 'new_var': usize\n-[151; 152) 'e': E\n-[159; 245) 'match ...     }': usize\n-[165; 166) 'e': E\n-[177; 187) 'E::A { x }': E\n-[184; 185) 'x': usize\n-[191; 192) 'x': usize\n-[202; 206) 'E::B': E\n-[210; 213) 'foo': bool\n-[217; 218) '1': usize\n-[228; 232) 'E::B': E\n-[236; 238) '10': usize\n-[256; 275) 'ref d ...{ .. }': &E\n-[264; 275) 'E::A { .. }': E\n-[278; 279) 'e': E\n-[285; 286) 'd': &E\n-"}, {"sha": "042248c35460ed61092f4c0c87e8c4ee23033ed1", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_array.snap", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_array.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_array.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_array.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,65 +0,0 @@\n----\n-created: \"2019-01-30T20:08:05.185312835+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[9; 10) 'x': &str\n-[18; 19) 'y': isize\n-[28; 324) '{     ... 3]; }': ()\n-[38; 39) 'a': [&str]\n-[42; 45) '[x]': [&str]\n-[43; 44) 'x': &str\n-[55; 56) 'b': [[&str]]\n-[59; 65) '[a, a]': [[&str]]\n-[60; 61) 'a': [&str]\n-[63; 64) 'a': [&str]\n-[75; 76) 'c': [[[&str]]]\n-[79; 85) '[b, b]': [[[&str]]]\n-[80; 81) 'b': [[&str]]\n-[83; 84) 'b': [[&str]]\n-[96; 97) 'd': [isize]\n-[100; 112) '[y, 1, 2, 3]': [isize]\n-[101; 102) 'y': isize\n-[104; 105) '1': isize\n-[107; 108) '2': isize\n-[110; 111) '3': isize\n-[122; 123) 'd': [isize]\n-[126; 138) '[1, y, 2, 3]': [isize]\n-[127; 128) '1': isize\n-[130; 131) 'y': isize\n-[133; 134) '2': isize\n-[136; 137) '3': isize\n-[148; 149) 'e': [isize]\n-[152; 155) '[y]': [isize]\n-[153; 154) 'y': isize\n-[165; 166) 'f': [[isize]]\n-[169; 175) '[d, d]': [[isize]]\n-[170; 171) 'd': [isize]\n-[173; 174) 'd': [isize]\n-[185; 186) 'g': [[isize]]\n-[189; 195) '[e, e]': [[isize]]\n-[190; 191) 'e': [isize]\n-[193; 194) 'e': [isize]\n-[206; 207) 'h': [i32]\n-[210; 216) '[1, 2]': [i32]\n-[211; 212) '1': i32\n-[214; 215) '2': i32\n-[226; 227) 'i': [&str]\n-[230; 240) '[\"a\", \"b\"]': [&str]\n-[231; 234) '\"a\"': &str\n-[236; 239) '\"b\"': &str\n-[251; 252) 'b': [[&str]]\n-[255; 265) '[a, [\"b\"]]': [[&str]]\n-[256; 257) 'a': [&str]\n-[259; 264) '[\"b\"]': [&str]\n-[260; 263) '\"b\"': &str\n-[275; 276) 'x': [u8]\n-[288; 290) '[]': [u8]\n-[300; 301) 'z': &[u8]\n-[311; 321) '&[1, 2, 3]': &[u8]\n-[312; 321) '[1, 2, 3]': [u8]\n-[313; 314) '1': u8\n-[316; 317) '2': u8\n-[319; 320) '3': u8\n-"}, {"sha": "51f3fd4c0dc72f05c5619bed6b5514e8b6f205eb", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_const.snap", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,14 +0,0 @@\n----\n-created: \"2019-02-25T08:36:33.885804400Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[227; 305) '{     ...:ID; }': ()\n-[237; 238) 'x': u32\n-[241; 252) 'Struct::FOO': u32\n-[262; 263) 'y': u32\n-[266; 275) 'Enum::BAR': u32\n-[285; 286) 'z': u32\n-[289; 302) 'TraitTest::ID': u32\n-"}, {"sha": "8f27af88c9f29d4e8ec6a28a4f5102e6b7ddcb43", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_method_enum.snap", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_enum.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_enum.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_enum.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,20 +0,0 @@\n----\n-created: \"2019-02-20T11:04:56.553382800Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[48; 68) '{     ...     }': A\n-[58; 62) 'A::B': A\n-[89; 109) '{     ...     }': A\n-[99; 103) 'A::C': A\n-[122; 179) '{     ...  c; }': ()\n-[132; 133) 'a': A\n-[136; 140) 'A::b': fn b() -> A\n-[136; 142) 'A::b()': A\n-[148; 149) 'a': A\n-[159; 160) 'c': A\n-[163; 167) 'A::c': fn c() -> A\n-[163; 169) 'A::c()': A\n-[175; 176) 'c': A\n-"}, {"sha": "44694dfdb017d7a9c213f26af50cb528f37e1497", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_method_generics.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_generics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-02-23T21:58:35.844769207Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[64; 67) 'val': T\n-[82; 109) '{     ...     }': Gen<T>\n-[92; 103) 'Gen { val }': Gen<T>\n-[98; 101) 'val': T\n-[123; 155) '{     ...32); }': ()\n-[133; 134) 'a': Gen<u32>\n-[137; 146) 'Gen::make': fn make<u32>(T) -> Gen<T>\n-[137; 152) 'Gen::make(0u32)': Gen<u32>\n-[147; 151) '0u32': u32\n-"}, {"sha": "29ca9b0ea9e56f609a6fa3f55bf2ea89701bbddd", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_method_struct.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_struct.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_struct.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_struct.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-02-20T11:04:56.553382800Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[50; 76) '{     ...     }': A\n-[60; 70) 'A { x: 0 }': A\n-[67; 68) '0': u32\n-[89; 123) '{     ...a.x; }': ()\n-[99; 100) 'a': A\n-[103; 109) 'A::new': fn new() -> A\n-[103; 111) 'A::new()': A\n-[117; 118) 'a': A\n-[117; 120) 'a.x': u32\n-"}, {"sha": "6584bef39229cc8e6b893848735c9b9431037748", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_method_with_modules.snap", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_with_modules.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_with_modules.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_method_with_modules.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,23 +0,0 @@\n----\n-created: \"2019-02-21T08:55:53.926725400Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[56; 64) '{ A {} }': A\n-[58; 62) 'A {}': A\n-[126; 132) '{ 99 }': u32\n-[128; 130) '99': u32\n-[202; 210) '{ C {} }': C\n-[204; 208) 'C {}': C\n-[241; 325) '{     ...g(); }': ()\n-[251; 252) 'x': A\n-[255; 266) 'a::A::thing': fn thing() -> A\n-[255; 268) 'a::A::thing()': A\n-[278; 279) 'y': u32\n-[282; 293) 'b::B::thing': fn thing() -> u32\n-[282; 295) 'b::B::thing()': u32\n-[305; 306) 'z': C\n-[309; 320) 'c::C::thing': fn thing() -> C\n-[309; 322) 'c::C::thing()': C\n-"}, {"sha": "f5840a934748e8c244010bed30ae39c2a0bd0799", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_backwards.snap", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,27 +0,0 @@\n----\n-created: \"2019-01-26T17:46:03.842478456+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[14; 15) 'x': u32\n-[22; 24) '{}': ()\n-[78; 231) '{     ...t &c }': &mut &f64\n-[88; 89) 'a': u32\n-[92; 108) 'unknow...nction': [unknown]\n-[92; 110) 'unknow...tion()': u32\n-[116; 125) 'takes_u32': fn takes_u32(u32) -> ()\n-[116; 128) 'takes_u32(a)': ()\n-[126; 127) 'a': u32\n-[138; 139) 'b': i32\n-[142; 158) 'unknow...nction': [unknown]\n-[142; 160) 'unknow...tion()': i32\n-[166; 184) 'S { i3...d: b }': S\n-[181; 182) 'b': i32\n-[194; 195) 'c': f64\n-[198; 214) 'unknow...nction': [unknown]\n-[198; 216) 'unknow...tion()': f64\n-[222; 229) '&mut &c': &mut &f64\n-[227; 229) '&c': &f64\n-[228; 229) 'c': f64\n-"}, {"sha": "4b0863558df496eb9a675ca6553a6e8dff4b9b9f", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_basics.snap", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_basics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_basics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_basics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,20 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.880187500+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[9; 10) 'a': u32\n-[17; 18) 'b': isize\n-[27; 28) 'c': !\n-[33; 34) 'd': &str\n-[42; 121) '{     ...f32; }': ()\n-[48; 49) 'a': u32\n-[55; 56) 'b': isize\n-[62; 63) 'c': !\n-[69; 70) 'd': &str\n-[76; 82) '1usize': usize\n-[88; 94) '1isize': isize\n-[100; 106) '\"test\"': &str\n-[112; 118) '1.0f32': f32\n-"}, {"sha": "80ffe6e11f32f95575a60f687c19a8c17b190a12", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_binary_op.snap", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,57 +0,0 @@\n----\n-created: \"2019-02-18T07:03:52.524808301Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[6; 7) 'x': bool\n-[22; 34) '{     0i32 }': i32\n-[28; 32) '0i32': i32\n-[54; 370) '{     ... < 3 }': bool\n-[64; 65) 'x': bool\n-[68; 69) 'a': bool\n-[68; 74) 'a && b': bool\n-[73; 74) 'b': bool\n-[84; 85) 'y': bool\n-[88; 92) 'true': bool\n-[88; 101) 'true || false': bool\n-[96; 101) 'false': bool\n-[111; 112) 'z': bool\n-[115; 116) 'x': bool\n-[115; 121) 'x == y': bool\n-[120; 121) 'y': bool\n-[131; 132) 't': bool\n-[135; 136) 'x': bool\n-[135; 141) 'x != y': bool\n-[140; 141) 'y': bool\n-[151; 162) 'minus_forty': isize\n-[172; 180) '-40isize': isize\n-[173; 180) '40isize': isize\n-[190; 191) 'h': bool\n-[194; 205) 'minus_forty': isize\n-[194; 216) 'minus_...ONST_2': bool\n-[209; 216) 'CONST_2': isize\n-[226; 227) 'c': i32\n-[230; 231) 'f': fn f(bool) -> i32\n-[230; 239) 'f(z || y)': i32\n-[230; 243) 'f(z || y) + 5': i32\n-[232; 233) 'z': bool\n-[232; 238) 'z || y': bool\n-[237; 238) 'y': bool\n-[242; 243) '5': i32\n-[253; 254) 'd': [unknown]\n-[257; 258) 'b': [unknown]\n-[268; 269) 'g': ()\n-[272; 283) 'minus_forty': isize\n-[272; 288) 'minus_...y ^= i': ()\n-[287; 288) 'i': isize\n-[298; 301) 'ten': usize\n-[311; 313) '10': usize\n-[323; 336) 'ten_is_eleven': bool\n-[339; 342) 'ten': usize\n-[339; 354) 'ten == some_num': bool\n-[346; 354) 'some_num': usize\n-[361; 364) 'ten': usize\n-[361; 368) 'ten < 3': bool\n-[367; 368) '3': usize\n-"}, {"sha": "a5eba39801d4f5f4c7528e4d2171f214075c15f8", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_const.snap", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,14 +0,0 @@\n----\n-created: \"2019-02-25T07:26:34.115351100Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[95; 213) '{     ...NST; }': ()\n-[138; 139) 'x': [unknown]\n-[142; 153) 'LOCAL_CONST': [unknown]\n-[163; 164) 'z': u32\n-[167; 179) 'GLOBAL_CONST': u32\n-[189; 191) 'id': u32\n-[194; 210) 'Foo::A..._CONST': u32\n-"}, {"sha": "bc8b84272bcbfb17011146480aec6898c68b2275", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_enum.snap", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_enum.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_enum.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_enum.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,11 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.880187500+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[48; 82) '{   E:...:V2; }': ()\n-[52; 70) 'E::V1 ...d: 1 }': E\n-[67; 68) '1': u32\n-[74; 79) 'E::V2': E\n-"}, {"sha": "f092fd3192bd32dac2c169b40f9cc054acd1c282", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_field_autoderef.snap", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_field_autoderef.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_field_autoderef.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_field_autoderef.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,50 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.955954900+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[44; 45) 'a': A\n-[50; 213) '{     ...5.b; }': ()\n-[60; 62) 'a1': A\n-[65; 66) 'a': A\n-[72; 74) 'a1': A\n-[72; 76) 'a1.b': B\n-[86; 88) 'a2': &A\n-[91; 93) '&a': &A\n-[92; 93) 'a': A\n-[99; 101) 'a2': &A\n-[99; 103) 'a2.b': B\n-[113; 115) 'a3': &mut A\n-[118; 124) '&mut a': &mut A\n-[123; 124) 'a': A\n-[130; 132) 'a3': &mut A\n-[130; 134) 'a3.b': B\n-[144; 146) 'a4': &&&&&&&A\n-[149; 157) '&&&&&&&a': &&&&&&&A\n-[150; 157) '&&&&&&a': &&&&&&A\n-[151; 157) '&&&&&a': &&&&&A\n-[152; 157) '&&&&a': &&&&A\n-[153; 157) '&&&a': &&&A\n-[154; 157) '&&a': &&A\n-[155; 157) '&a': &A\n-[156; 157) 'a': A\n-[163; 165) 'a4': &&&&&&&A\n-[163; 167) 'a4.b': B\n-[177; 179) 'a5': &mut &&mut &&mut A\n-[182; 200) '&mut &...&mut a': &mut &&mut &&mut A\n-[187; 200) '&&mut &&mut a': &&mut &&mut A\n-[188; 200) '&mut &&mut a': &mut &&mut A\n-[193; 200) '&&mut a': &&mut A\n-[194; 200) '&mut a': &mut A\n-[199; 200) 'a': A\n-[206; 208) 'a5': &mut &&mut &&mut A\n-[206; 210) 'a5.b': B\n-[224; 226) 'a1': *const A\n-[238; 240) 'a2': *mut A\n-[250; 273) '{     ...2.b; }': ()\n-[256; 258) 'a1': *const A\n-[256; 260) 'a1.b': B\n-[266; 268) 'a2': *mut A\n-[266; 270) 'a2.b': B\n-"}, {"sha": "91c48897cf7b26fd29415a97803249806611f17e", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_function_generics.snap", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,21 +0,0 @@\n----\n-created: \"2019-01-27T14:52:29.934503829+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[10; 11) 't': T\n-[21; 26) '{ t }': T\n-[23; 24) 't': T\n-[38; 98) '{     ...(1); }': ()\n-[44; 46) 'id': fn id<u32>(T) -> T\n-[44; 52) 'id(1u32)': u32\n-[47; 51) '1u32': u32\n-[58; 68) 'id::<i128>': fn id<i128>(T) -> T\n-[58; 71) 'id::<i128>(1)': i128\n-[69; 70) '1': i128\n-[81; 82) 'x': u64\n-[90; 92) 'id': fn id<u64>(T) -> T\n-[90; 95) 'id(1)': u64\n-[93; 94) '1': u64\n-"}, {"sha": "d1ce87b0a2ccbffc53a4f58fdfa1117f2eaf3f8b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_generic_chain.snap", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,36 +0,0 @@\n----\n-created: \"2019-02-16T20:53:59.655361804Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[53; 57) 'self': A<T2>\n-[65; 87) '{     ...     }': T2\n-[75; 79) 'self': A<T2>\n-[75; 81) 'self.x': T2\n-[99; 100) 't': T\n-[110; 115) '{ t }': T\n-[112; 113) 't': T\n-[135; 261) '{     ....x() }': i128\n-[146; 147) 'x': i128\n-[150; 151) '1': i128\n-[162; 163) 'y': i128\n-[166; 168) 'id': fn id<i128>(T) -> T\n-[166; 171) 'id(x)': i128\n-[169; 170) 'x': i128\n-[182; 183) 'a': A<i128>\n-[186; 200) 'A { x: id(y) }': A<i128>\n-[193; 195) 'id': fn id<i128>(T) -> T\n-[193; 198) 'id(y)': i128\n-[196; 197) 'y': i128\n-[211; 212) 'z': i128\n-[215; 217) 'id': fn id<i128>(T) -> T\n-[215; 222) 'id(a.x)': i128\n-[218; 219) 'a': A<i128>\n-[218; 221) 'a.x': i128\n-[233; 234) 'b': A<i128>\n-[237; 247) 'A { x: z }': A<i128>\n-[244; 245) 'z': i128\n-[254; 255) 'b': A<i128>\n-[254; 259) 'b.x()': i128\n-"}, {"sha": "fae7ab0ddb4f6ee8d1e2d33b50165a6d73b0ade5", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_generics_in_patterns.snap", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generics_in_patterns.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generics_in_patterns.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generics_in_patterns.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,24 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.970913200+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[79; 81) 'a1': A<u32>\n-[91; 92) 'o': Option<u64>\n-[107; 244) '{     ...  }; }': ()\n-[117; 128) 'A { x: x2 }': A<u32>\n-[124; 126) 'x2': u32\n-[131; 133) 'a1': A<u32>\n-[143; 161) 'A::<i6...: x3 }': A<i64>\n-[157; 159) 'x3': i64\n-[164; 174) 'A { x: 1 }': A<i64>\n-[171; 172) '1': i64\n-[180; 241) 'match ...     }': u64\n-[186; 187) 'o': Option<u64>\n-[198; 213) 'Option::Some(t)': Option<u64>\n-[211; 212) 't': u64\n-[217; 218) 't': u64\n-[228; 229) '_': Option<u64>\n-[233; 234) '1': u64\n-"}, {"sha": "44f00a52eb62e15d36c8ba319f851e2a7e2744dc", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_impl_generics.snap", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,39 +0,0 @@\n----\n-created: \"2019-02-16T21:58:14.029368845Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[74; 78) 'self': A<X, Y>\n-[85; 107) '{     ...     }': X\n-[95; 99) 'self': A<X, Y>\n-[95; 101) 'self.x': X\n-[117; 121) 'self': A<X, Y>\n-[128; 150) '{     ...     }': Y\n-[138; 142) 'self': A<X, Y>\n-[138; 144) 'self.y': Y\n-[163; 167) 'self': A<X, Y>\n-[169; 170) 't': T\n-[188; 223) '{     ...     }': (X, Y, T)\n-[198; 217) '(self.....y, t)': (X, Y, T)\n-[199; 203) 'self': A<X, Y>\n-[199; 205) 'self.x': X\n-[207; 211) 'self': A<X, Y>\n-[207; 213) 'self.y': Y\n-[215; 216) 't': T\n-[245; 342) '{     ...(1); }': ()\n-[255; 256) 'a': A<u64, i64>\n-[259; 281) 'A { x:...1i64 }': A<u64, i64>\n-[266; 270) '1u64': u64\n-[275; 279) '1i64': i64\n-[287; 288) 'a': A<u64, i64>\n-[287; 292) 'a.x()': u64\n-[298; 299) 'a': A<u64, i64>\n-[298; 303) 'a.y()': i64\n-[309; 310) 'a': A<u64, i64>\n-[309; 319) 'a.z(1i128)': (u64, i64, i128)\n-[313; 318) '1i128': i128\n-[325; 326) 'a': A<u64, i64>\n-[325; 339) 'a.z::<u128>(1)': (u64, i64, u128)\n-[337; 338) '1': u128\n-"}, {"sha": "f609eaf7ccc05768dd6d64290323257d1dd97c03", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_impl_generics_with_autoderef.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-02-17T13:35:06.385679926Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[78; 82) 'self': &Option<T>\n-[98; 100) '{}': ()\n-[111; 112) 'o': Option<u32>\n-[127; 165) '{     ...f(); }': ()\n-[133; 146) '(&o).as_ref()': Option<&u32>\n-[134; 136) '&o': &Option<u32>\n-[135; 136) 'o': Option<u32>\n-[152; 153) 'o': Option<u32>\n-[152; 162) 'o.as_ref()': Option<&u32>\n-"}, {"sha": "6a435e5cfe370ef52b6d64fcee2d3ab478702353", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_in_elseif.snap", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,17 +0,0 @@\n----\n-created: \"2019-01-26T21:36:52.714121185+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[35; 38) 'foo': Foo\n-[45; 109) '{     ...   } }': ()\n-[51; 107) 'if tru...     }': ()\n-[54; 58) 'true': bool\n-[59; 67) '{      }': ()\n-[73; 107) 'if fal...     }': i32\n-[76; 81) 'false': bool\n-[82; 107) '{     ...     }': i32\n-[92; 95) 'foo': Foo\n-[92; 101) 'foo.field': i32\n-"}, {"sha": "b3c706aca64d741426bf2b47c200ef7cce63e087", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_inherent_method.snap", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_inherent_method.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_inherent_method.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_inherent_method.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,25 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.968918800+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[32; 36) 'self': A\n-[38; 39) 'x': u32\n-[53; 55) '{}': ()\n-[103; 107) 'self': &A\n-[109; 110) 'x': u64\n-[124; 126) '{}': ()\n-[144; 145) 'a': A\n-[150; 198) '{     ...(1); }': ()\n-[156; 157) 'a': A\n-[156; 164) 'a.foo(1)': i32\n-[162; 163) '1': u32\n-[170; 181) '(&a).bar(1)': i64\n-[171; 173) '&a': &A\n-[172; 173) 'a': A\n-[179; 180) '1': u64\n-[187; 188) 'a': A\n-[187; 195) 'a.bar(1)': i64\n-[193; 194) '1': u64\n-"}, {"sha": "0d085071afed384186da887edbf7b9f47a858c84", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_let.snap", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_let.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_let.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_let.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,14 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.963931700+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[11; 71) '{     ...= b; }': ()\n-[21; 22) 'a': isize\n-[25; 31) '1isize': isize\n-[41; 42) 'b': usize\n-[52; 53) '1': usize\n-[63; 64) 'c': usize\n-[67; 68) 'b': usize\n-"}, {"sha": "e287a100e49cbf6f747cdc42fae18b6c3e30b03b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_literals.snap", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_literals.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_literals.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_literals.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,19 +0,0 @@\n----\n-created: \"2019-01-22T14:44:59.974903100+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[11; 201) '{     ...o\"#; }': ()\n-[17; 21) '5i32': i32\n-[27; 34) '\"hello\"': &str\n-[40; 48) 'b\"bytes\"': &[u8]\n-[54; 57) ''c'': char\n-[63; 67) 'b'b'': u8\n-[73; 77) '3.14': f64\n-[83; 87) '5000': i32\n-[93; 98) 'false': bool\n-[104; 108) 'true': bool\n-[114; 182) 'r#\"   ...    \"#': &str\n-[188; 198) 'br#\"yolo\"#': &[u8]\n-"}, {"sha": "209454a9140b62d056dd87a6c41587fb0ad0ad47", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_nested_generics_crash.snap", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_nested_generics_crash.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_nested_generics_crash.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_nested_generics_crash.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,12 +0,0 @@\n----\n-created: \"2019-02-11T21:59:04.302375838Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[92; 106) 'query_response': Canonical<QueryResponse<R>>\n-[137; 167) '{     ...lue; }': ()\n-[143; 164) '&query....value': &QueryResponse<R>\n-[144; 158) 'query_response': Canonical<QueryResponse<R>>\n-[144; 164) 'query_....value': QueryResponse<R>\n-"}, {"sha": "afbe2f747aabf9b1ab1d3d6d0052d7b1453ba989", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_paths.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-01-26T17:46:03.928773630+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[15; 20) '{ 1 }': u32\n-[17; 18) '1': u32\n-[48; 53) '{ 1 }': u32\n-[50; 51) '1': u32\n-[67; 91) '{     ...c(); }': ()\n-[73; 74) 'a': fn a() -> u32\n-[73; 76) 'a()': u32\n-[82; 86) 'b::c': fn c() -> u32\n-[82; 88) 'b::c()': u32\n-"}, {"sha": "1da46daf8f328d326415d26dab5d10766f244d8a", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_pattern.snap", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_pattern.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_pattern.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_pattern.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,54 +0,0 @@\n----\n-created: \"2019-01-22T14:45:00.037734500+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[9; 10) 'x': &i32\n-[18; 369) '{     ...o_x; }': ()\n-[28; 29) 'y': &i32\n-[32; 33) 'x': &i32\n-[43; 45) '&z': &i32\n-[44; 45) 'z': i32\n-[48; 49) 'x': &i32\n-[59; 60) 'a': i32\n-[63; 64) 'z': i32\n-[74; 80) '(c, d)': (i32, &str)\n-[75; 76) 'c': i32\n-[78; 79) 'd': &str\n-[83; 95) '(1, \"hello\")': (i32, &str)\n-[84; 85) '1': i32\n-[87; 94) '\"hello\"': &str\n-[102; 152) 'for (e...     }': ()\n-[106; 112) '(e, f)': ([unknown], [unknown])\n-[107; 108) 'e': [unknown]\n-[110; 111) 'f': [unknown]\n-[116; 125) 'some_iter': [unknown]\n-[126; 152) '{     ...     }': ()\n-[140; 141) 'g': [unknown]\n-[144; 145) 'e': [unknown]\n-[158; 205) 'if let...     }': ()\n-[165; 170) '[val]': [unknown]\n-[173; 176) 'opt': [unknown]\n-[177; 205) '{     ...     }': ()\n-[191; 192) 'h': [unknown]\n-[195; 198) 'val': [unknown]\n-[215; 221) 'lambda': [unknown]\n-[224; 256) '|a: u6...b; c }': [unknown]\n-[225; 226) 'a': u64\n-[233; 234) 'b': u64\n-[236; 237) 'c': i32\n-[244; 256) '{ a + b; c }': i32\n-[246; 247) 'a': u64\n-[246; 251) 'a + b': u64\n-[250; 251) 'b': u64\n-[253; 254) 'c': i32\n-[267; 279) 'ref ref_to_x': &&i32\n-[282; 283) 'x': &i32\n-[293; 302) 'mut mut_x': &i32\n-[305; 306) 'x': &i32\n-[316; 336) 'ref mu...f_to_x': &mut &i32\n-[339; 340) 'x': &i32\n-[350; 351) 'k': &mut &i32\n-[354; 366) 'mut_ref_to_x': &mut &i32\n-"}, {"sha": "56931bb3dff94704e4b52e554ff94334bb4f06a7", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_refs.snap", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_refs.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_refs.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_refs.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,30 +0,0 @@\n----\n-created: \"2019-01-22T14:45:00.053692600+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[9; 10) 'a': &u32\n-[18; 19) 'b': &mut u32\n-[31; 32) 'c': *const u32\n-[46; 47) 'd': *mut u32\n-[59; 150) '{     ... *d; }': ()\n-[65; 66) 'a': &u32\n-[72; 74) '*a': u32\n-[73; 74) 'a': &u32\n-[80; 82) '&a': &&u32\n-[81; 82) 'a': &u32\n-[88; 94) '&mut a': &mut &u32\n-[93; 94) 'a': &u32\n-[100; 101) 'b': &mut u32\n-[107; 109) '*b': u32\n-[108; 109) 'b': &mut u32\n-[115; 117) '&b': &&mut u32\n-[116; 117) 'b': &mut u32\n-[123; 124) 'c': *const u32\n-[130; 132) '*c': u32\n-[131; 132) 'c': *const u32\n-[138; 139) 'd': *mut u32\n-[145; 147) '*d': u32\n-[146; 147) 'd': *mut u32\n-"}, {"sha": "5c927f5c11225ed6d6f4c7ec25a25b9a5688b92d", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_self.snap", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_self.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_self.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_self.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,17 +0,0 @@\n----\n-created: \"2019-02-04T19:40:48.826936500+00:00\"\n-creator: insta@0.5.3\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[34; 38) 'self': &S\n-[40; 61) '{     ...     }': ()\n-[50; 54) 'self': &S\n-[75; 79) 'self': &S\n-[88; 109) '{     ...     }': ()\n-[98; 102) 'self': &S\n-[133; 153) '{     ...     }': S\n-[143; 147) 'S {}': S\n-[177; 200) '{     ...     }': S\n-[187; 194) 'Self {}': S\n-"}, {"sha": "5d90f56edacf0dd74d74b9a42890340ab501981e", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_static.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-02-25T08:20:17.807316Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[85; 280) '{     ...MUT; }': ()\n-[173; 174) 'x': [unknown]\n-[177; 189) 'LOCAL_STATIC': [unknown]\n-[199; 200) 'y': [unknown]\n-[203; 219) 'LOCAL_...IC_MUT': [unknown]\n-[229; 230) 'z': u32\n-[233; 246) 'GLOBAL_STATIC': u32\n-[256; 257) 'w': u32\n-[260; 277) 'GLOBAL...IC_MUT': u32\n-"}, {"sha": "4b99788e47f97215a5463a1c5e06433fd89e5b3f", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_1.snap", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,13 +0,0 @@\n----\n-created: \"2019-02-09T16:56:24.803326529Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[54; 139) '{     ...   } }': ()\n-[60; 137) 'match ...     }': ()\n-[66; 83) 'someth...nknown': Maybe<[unknown]>\n-[94; 124) 'Maybe:...thing)': Maybe<[unknown]>\n-[106; 123) 'ref mu...ething': &mut [unknown]\n-[128; 130) '()': ()\n-"}, {"sha": "fd0b39b7dc6e6d9f848370a21647ec407b7f1599", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_2.snap", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,14 +0,0 @@\n----\n-created: \"2019-02-09T17:03:11.974225590Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[23; 53) '{     ...n']; }': ()\n-[29; 50) '&[0, b...b'\\n']': &[u8]\n-[30; 50) '[0, b'...b'\\n']': [u8]\n-[31; 32) '0': u8\n-[34; 39) 'b'\\n'': u8\n-[41; 42) '1': u8\n-[44; 49) 'b'\\n'': u8\n-"}, {"sha": "d15b77e171e376b35cf64b403842590b02a72459", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_3.snap", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,13 +0,0 @@\n----\n-created: \"2019-02-09T18:02:37.377591660Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[18; 102) '{     ...   } }': ()\n-[24; 100) 'match ...     }': ()\n-[42; 88) 'SizeSk...tail }': [unknown]\n-[76; 80) 'true': [unknown]\n-[82; 86) 'tail': [unknown]\n-[92; 94) '{}': ()\n-"}, {"sha": "fb31883ce8a63c8c628edc6dc3907eb07f821611", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_4.snap", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_4.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,16 +0,0 @@\n----\n-created: \"2019-02-09T19:55:39.712470520Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[25; 110) '{     ...   } }': ()\n-[31; 108) 'match ...     }': ()\n-[37; 42) '*self': [unknown]\n-[38; 42) 'self': [unknown]\n-[53; 95) 'Borrow...), ..}': [unknown]\n-[74; 77) 'box': [unknown]\n-[78; 87) 'Primitive': [unknown]\n-[88; 89) 'p': [unknown]\n-[99; 101) '{}': ()\n-"}, {"sha": "6bbf59fb6dc43e97f184376c996befb8720f665c", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_5.snap", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_5.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,30 +0,0 @@\n----\n-created: \"2019-02-09T20:28:37.294693728Z\"\n-creator: insta@0.6.1\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[27; 323) '{     ...   } }': ()\n-[33; 321) 'for co...     }': ()\n-[37; 44) 'content': &[unknown]\n-[48; 61) 'doesnt_matter': [unknown]\n-[62; 321) '{     ...     }': ()\n-[76; 80) 'name': &&[unknown]\n-[83; 167) 'if doe...     }': &&[unknown]\n-[86; 99) 'doesnt_matter': bool\n-[100; 129) '{     ...     }': &&[unknown]\n-[114; 119) 'first': &&[unknown]\n-[135; 167) '{     ...     }': &&[unknown]\n-[149; 157) '&content': &&[unknown]\n-[150; 157) 'content': &[unknown]\n-[182; 189) 'content': &&[unknown]\n-[192; 314) 'if ICE...     }': &&[unknown]\n-[195; 232) 'ICE_RE..._VALUE': [unknown]\n-[195; 248) 'ICE_RE...&name)': bool\n-[242; 247) '&name': &&&[unknown]\n-[243; 247) 'name': &&[unknown]\n-[249; 277) '{     ...     }': &&[unknown]\n-[263; 267) 'name': &&[unknown]\n-[283; 314) '{     ...     }': &[unknown]\n-[297; 304) 'content': &[unknown]\n-"}, {"sha": "32f1fa10806debe65afccdfca9af8bf34ccaf75b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_struct.snap", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,23 +0,0 @@\n----\n-created: \"2019-02-20T21:31:12.910924715Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[72; 154) '{     ...a.c; }': ()\n-[82; 83) 'c': C\n-[86; 87) 'C': C(usize) -> C\n-[86; 90) 'C(1)': C\n-[88; 89) '1': usize\n-[96; 97) 'B': B\n-[107; 108) 'a': A\n-[114; 133) 'A { b:...C(1) }': A\n-[121; 122) 'B': B\n-[127; 128) 'C': C(usize) -> C\n-[127; 131) 'C(1)': C\n-[129; 130) '1': usize\n-[139; 140) 'a': A\n-[139; 142) 'a.b': B\n-[148; 149) 'a': A\n-[148; 151) 'a.c': C\n-"}, {"sha": "e07c7d36c43239706b990313107ac6acab06dcfe", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_struct_generics.snap", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_struct_generics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,22 +0,0 @@\n----\n-created: \"2019-01-22T14:45:00.058678600+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[36; 38) 'a1': A<u32>\n-[48; 49) 'i': i32\n-[56; 147) '{     ...3.x; }': ()\n-[62; 64) 'a1': A<u32>\n-[62; 66) 'a1.x': u32\n-[76; 78) 'a2': A<i32>\n-[81; 91) 'A { x: i }': A<i32>\n-[88; 89) 'i': i32\n-[97; 99) 'a2': A<i32>\n-[97; 101) 'a2.x': i32\n-[111; 113) 'a3': A<i128>\n-[116; 134) 'A::<i1...x: 1 }': A<i128>\n-[131; 132) '1': i128\n-[140; 142) 'a3': A<i128>\n-[140; 144) 'a3.x': i128\n-"}, {"sha": "cd11d41d338caffe9120fc78328dac6b68750c8e", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_tuple.snap", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,34 +0,0 @@\n----\n-created: \"2019-01-22T14:45:00.058678600+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[9; 10) 'x': &str\n-[18; 19) 'y': isize\n-[28; 170) '{     ...d\"); }': ()\n-[38; 39) 'a': (u32, &str)\n-[55; 63) '(1, \"a\")': (u32, &str)\n-[56; 57) '1': u32\n-[59; 62) '\"a\"': &str\n-[73; 74) 'b': ((u32, &str), &str)\n-[77; 83) '(a, x)': ((u32, &str), &str)\n-[78; 79) 'a': (u32, &str)\n-[81; 82) 'x': &str\n-[93; 94) 'c': (isize, &str)\n-[97; 103) '(y, x)': (isize, &str)\n-[98; 99) 'y': isize\n-[101; 102) 'x': &str\n-[113; 114) 'd': ((isize, &str), &str)\n-[117; 123) '(c, x)': ((isize, &str), &str)\n-[118; 119) 'c': (isize, &str)\n-[121; 122) 'x': &str\n-[133; 134) 'e': (i32, &str)\n-[137; 145) '(1, \"e\")': (i32, &str)\n-[138; 139) '1': i32\n-[141; 144) '\"e\"': &str\n-[155; 156) 'f': ((i32, &str), &str)\n-[159; 167) '(e, \"d\")': ((i32, &str), &str)\n-[160; 161) 'e': (i32, &str)\n-[163; 166) '\"d\"': &str\n-"}, {"sha": "783795cfdd7f916bb4f893c012d58485a9e77ae9", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_tuple_struct_generics.snap", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple_struct_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple_struct_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_tuple_struct_generics.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,23 +0,0 @@\n----\n-created: \"2019-02-20T21:31:12.911275141Z\"\n-creator: insta@0.6.2\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[77; 185) '{     ...one; }': ()\n-[83; 84) 'A': A<i32>(T) -> A<T>\n-[83; 88) 'A(42)': A<i32>\n-[85; 87) '42': i32\n-[94; 95) 'A': A<u128>(T) -> A<T>\n-[94; 103) 'A(42u128)': A<u128>\n-[96; 102) '42u128': u128\n-[109; 113) 'Some': Some<&str>(T) -> Option<T>\n-[109; 118) 'Some(\"x\")': Option<&str>\n-[114; 117) '\"x\"': &str\n-[124; 136) 'Option::Some': Some<&str>(T) -> Option<T>\n-[124; 141) 'Option...e(\"x\")': Option<&str>\n-[137; 140) '\"x\"': &str\n-[147; 151) 'None': Option<[unknown]>\n-[161; 162) 'x': Option<i64>\n-[178; 182) 'None': Option<i64>\n-"}, {"sha": "241c08353a01afb6cfc19579e534dc0dd0b102c6", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_type_alias.snap", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,23 +0,0 @@\n----\n-created: \"2019-02-24T16:13:47.561870283Z\"\n-creator: insta@0.6.3\n-source: crates/ra_hir/src/ty/tests.rs\n-expression: \"&result\"\n----\n-[117; 118) 'x': A<u32, i128>\n-[125; 126) 'y': A<&str, u128>\n-[139; 140) 'z': A<u8, i8>\n-[155; 212) '{     ...z.y; }': ()\n-[161; 162) 'x': A<u32, i128>\n-[161; 164) 'x.x': u32\n-[170; 171) 'x': A<u32, i128>\n-[170; 173) 'x.y': i128\n-[179; 180) 'y': A<&str, u128>\n-[179; 182) 'y.x': &str\n-[188; 189) 'y': A<&str, u128>\n-[188; 191) 'y.y': u128\n-[197; 198) 'z': A<u8, i8>\n-[197; 200) 'z.x': u8\n-[206; 207) 'z': A<u8, i8>\n-[206; 209) 'z.y': i8\n-"}, {"sha": "216d1e41f103a1d01bfc29b1a7ae3ed8cf592b97", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_type_param.snap", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,26 +0,0 @@\n----\n-created: \"2019-01-27T20:38:32.153717698+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[10; 11) 'x': T\n-[21; 30) '{     x }': T\n-[27; 28) 'x': T\n-[44; 45) 'x': &T\n-[56; 65) '{     x }': &T\n-[62; 63) 'x': &T\n-[77; 157) '{     ...(1); }': ()\n-[87; 88) 'y': u32\n-[91; 96) '10u32': u32\n-[102; 104) 'id': fn id<u32>(T) -> T\n-[102; 107) 'id(y)': u32\n-[105; 106) 'y': u32\n-[117; 118) 'x': bool\n-[127; 132) 'clone': fn clone<bool>(&T) -> T\n-[127; 135) 'clone(z)': bool\n-[133; 134) 'z': &bool\n-[141; 151) 'id::<i128>': fn id<i128>(T) -> T\n-[141; 154) 'id::<i128>(1)': i128\n-[152; 153) '1': i128\n-"}, {"sha": "5021d0eeba7366553828cc6ba45845f612541406", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_unary_op.snap", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_unary_op.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_unary_op.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_unary_op.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,48 +0,0 @@\n----\n-created: \"2019-01-28T14:51:16.185273502+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[27; 28) 'x': SomeType\n-[40; 272) '{     ...lo\"; }': ()\n-[50; 51) 'b': bool\n-[54; 59) 'false': bool\n-[69; 70) 'c': bool\n-[73; 75) '!b': bool\n-[74; 75) 'b': bool\n-[85; 86) 'a': i128\n-[89; 92) '100': i128\n-[102; 103) 'd': i128\n-[112; 114) '-a': i128\n-[113; 114) 'a': i128\n-[124; 125) 'e': i32\n-[128; 132) '-100': i32\n-[129; 132) '100': i32\n-[142; 143) 'f': bool\n-[146; 153) '!!!true': bool\n-[147; 153) '!!true': bool\n-[148; 153) '!true': bool\n-[149; 153) 'true': bool\n-[163; 164) 'g': i32\n-[167; 170) '!42': i32\n-[168; 170) '42': i32\n-[180; 181) 'h': u32\n-[184; 190) '!10u32': u32\n-[185; 190) '10u32': u32\n-[200; 201) 'j': i128\n-[204; 206) '!a': i128\n-[205; 206) 'a': i128\n-[212; 217) '-3.14': f64\n-[213; 217) '3.14': f64\n-[223; 225) '!3': i32\n-[224; 225) '3': i32\n-[231; 233) '-x': [unknown]\n-[232; 233) 'x': SomeType\n-[239; 241) '!x': [unknown]\n-[240; 241) 'x': SomeType\n-[247; 255) '-\"hello\"': [unknown]\n-[248; 255) '\"hello\"': &str\n-[261; 269) '!\"hello\"': [unknown]\n-[262; 269) '\"hello\"': &str\n-"}, {"sha": "b6f404b4c74d6bd382e57b1d90c3a61f15d10fdc", "filename": "crates/ra_hir/src/ty/snapshots/tests__no_panic_on_field_of_enum.snap", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__no_panic_on_field_of_enum.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__no_panic_on_field_of_enum.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__no_panic_on_field_of_enum.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,11 +0,0 @@\n----\n-created: \"2019-01-22T14:45:00.058678600+00:00\"\n-creator: insta@0.4.0\n-expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n----\n-[20; 21) 'x': X\n-[26; 47) '{     ...eld; }': ()\n-[32; 33) 'x': X\n-[32; 44) 'x.some_field': [unknown]\n-"}, {"sha": "c3227ff7eac45c7fe459c15a8f3c0287461d15b1", "filename": "crates/ra_hir/src/ty/snapshots/tests__recursive_vars.snap", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,14 +0,0 @@\n----\n-created: \"2019-01-26T22:42:22.329980185+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[11; 48) '{     ...&y]; }': ()\n-[21; 22) 'y': &[unknown]\n-[25; 32) 'unknown': &[unknown]\n-[38; 45) '[y, &y]': [&&[unknown]]\n-[39; 40) 'y': &[unknown]\n-[42; 44) '&y': &&[unknown]\n-[43; 44) 'y': &[unknown]\n-"}, {"sha": "de124da5b12e4e35e2db37a0a2f36d4903561953", "filename": "crates/ra_hir/src/ty/snapshots/tests__recursive_vars_2.snap", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/00b09bcd8c96c37633964aa40df711dc013a6ca5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__recursive_vars_2.snap?ref=00b09bcd8c96c37633964aa40df711dc013a6ca5", "patch": "@@ -1,21 +0,0 @@\n----\n-created: \"2019-01-26T22:42:22.331805845+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n-source: crates/ra_hir/src/ty/tests.rs\n----\n-[11; 80) '{     ...x)]; }': ()\n-[21; 22) 'x': &&[unknown]\n-[25; 32) 'unknown': &&[unknown]\n-[42; 43) 'y': &&[unknown]\n-[46; 53) 'unknown': &&[unknown]\n-[59; 77) '[(x, y..., &x)]': [(&&[unknown], &&[unknown])]\n-[60; 66) '(x, y)': (&&[unknown], &&[unknown])\n-[61; 62) 'x': &&[unknown]\n-[64; 65) 'y': &&[unknown]\n-[68; 76) '(&y, &x)': (&&&[unknown], &&&[unknown])\n-[69; 71) '&y': &&&[unknown]\n-[70; 71) 'y': &&[unknown]\n-[73; 75) '&x': &&&[unknown]\n-[74; 75) 'x': &&[unknown]\n-"}, {"sha": "c7d409e6d67df123b2928ec3a0cd359f384c592a", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1283, "deletions": 196, "changes": 1479, "blob_url": "https://github.com/rust-lang/rust/blob/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=17aaece6b39c2fb525be0eccce4626fc622e8236", "patch": "@@ -1,6 +1,8 @@\n use std::sync::Arc;\n use std::fmt::Write;\n \n+use insta::assert_snapshot_matches;\n+\n use ra_db::{SourceDatabase, salsa::Database, FilePosition};\n use ra_syntax::{algo, ast::{self, AstNode}};\n use test_utils::covers;\n@@ -11,14 +13,13 @@ use crate::{\n };\n \n // These tests compare the inference results for all expressions in a file\n-// against snapshots of the expected results using insta. Run the tests with\n-// INSTA_UPDATE=1 to update the snapshots.\n+// against snapshots of the expected results using insta. Use cargo-insta to\n+// update the snapshots.\n \n #[test]\n fn infer_basics() {\n-    check_inference(\n-        \"infer_basics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test(a: u32, b: isize, c: !, d: &str) {\n     a;\n     b;\n@@ -28,29 +29,49 @@ fn test(a: u32, b: isize, c: !, d: &str) {\n     1isize;\n     \"test\";\n     1.0f32;\n-}\"#,\n+}\"#),\n+        @r###\"\n+[9; 10) 'a': u32\n+[17; 18) 'b': isize\n+[27; 28) 'c': !\n+[33; 34) 'd': &str\n+[42; 121) '{     ...f32; }': ()\n+[48; 49) 'a': u32\n+[55; 56) 'b': isize\n+[62; 63) 'c': !\n+[69; 70) 'd': &str\n+[76; 82) '1usize': usize\n+[88; 94) '1isize': isize\n+[100; 106) '\"test\"': &str\n+[112; 118) '1.0f32': f32\"###\n     );\n }\n \n #[test]\n fn infer_let() {\n-    check_inference(\n-        \"infer_let\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test() {\n     let a = 1isize;\n     let b: usize = 1;\n     let c = b;\n }\n-}\"#,\n+}\"#),\n+        @r###\"\n+[11; 71) '{     ...= b; }': ()\n+[21; 22) 'a': isize\n+[25; 31) '1isize': isize\n+[41; 42) 'b': usize\n+[52; 53) '1': usize\n+[63; 64) 'c': usize\n+[67; 68) 'b': usize\"###\n     );\n }\n \n #[test]\n fn infer_paths() {\n-    check_inference(\n-        \"infer_paths\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn a() -> u32 { 1 }\n \n mod b {\n@@ -61,15 +82,24 @@ fn test() {\n     a();\n     b::c();\n }\n-}\"#,\n+}\"#),\n+        @r###\"\n+[15; 20) '{ 1 }': u32\n+[17; 18) '1': u32\n+[48; 53) '{ 1 }': u32\n+[50; 51) '1': u32\n+[67; 91) '{     ...c(); }': ()\n+[73; 74) 'a': fn a() -> u32\n+[73; 76) 'a()': u32\n+[82; 86) 'b::c': fn c() -> u32\n+[82; 88) 'b::c()': u32\"###\n     );\n }\n \n #[test]\n fn infer_struct() {\n-    check_inference(\n-        \"infer_struct\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A {\n     b: B,\n     c: C,\n@@ -84,31 +114,51 @@ fn test() {\n     a.b;\n     a.c;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[72; 154) '{     ...a.c; }': ()\n+[82; 83) 'c': C\n+[86; 87) 'C': C(usize) -> C\n+[86; 90) 'C(1)': C\n+[88; 89) '1': usize\n+[96; 97) 'B': B\n+[107; 108) 'a': A\n+[114; 133) 'A { b:...C(1) }': A\n+[121; 122) 'B': B\n+[127; 128) 'C': C(usize) -> C\n+[127; 131) 'C(1)': C\n+[129; 130) '1': usize\n+[139; 140) 'a': A\n+[139; 142) 'a.b': B\n+[148; 149) 'a': A\n+[148; 151) 'a.c': C\"###\n     );\n }\n \n #[test]\n fn infer_enum() {\n-    check_inference(\n-        \"infer_enum\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum E {\n   V1 { field: u32 },\n   V2\n }\n fn test() {\n   E::V1 { field: 1 };\n   E::V2;\n-}\"#,\n+}\"#),\n+        @r###\"\n+[48; 82) '{   E:...:V2; }': ()\n+[52; 70) 'E::V1 ...d: 1 }': E\n+[67; 68) '1': u32\n+[74; 79) 'E::V2': E\"###\n     );\n }\n \n #[test]\n fn infer_refs() {\n-    check_inference(\n-        \"infer_refs\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n     a;\n     *a;\n@@ -122,15 +172,38 @@ fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n     d;\n     *d;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[9; 10) 'a': &u32\n+[18; 19) 'b': &mut u32\n+[31; 32) 'c': *const u32\n+[46; 47) 'd': *mut u32\n+[59; 150) '{     ... *d; }': ()\n+[65; 66) 'a': &u32\n+[72; 74) '*a': u32\n+[73; 74) 'a': &u32\n+[80; 82) '&a': &&u32\n+[81; 82) 'a': &u32\n+[88; 94) '&mut a': &mut &u32\n+[93; 94) 'a': &u32\n+[100; 101) 'b': &mut u32\n+[107; 109) '*b': u32\n+[108; 109) 'b': &mut u32\n+[115; 117) '&b': &&mut u32\n+[116; 117) 'b': &mut u32\n+[123; 124) 'c': *const u32\n+[130; 132) '*c': u32\n+[131; 132) 'c': *const u32\n+[138; 139) 'd': *mut u32\n+[145; 147) '*d': u32\n+[146; 147) 'd': *mut u32\"###\n     );\n }\n \n #[test]\n fn infer_literals() {\n-    check_inference(\n-        \"infer_literals\",\n-        r##\"\n+    assert_snapshot_matches!(\n+        infer(r##\"\n fn test() {\n     5i32;\n     \"hello\";\n@@ -148,15 +221,27 @@ fn test() {\n         \"#;\n     br#\"yolo\"#;\n }\n-\"##,\n+\"##),\n+        @r###\"\n+[11; 201) '{     ...o\"#; }': ()\n+[17; 21) '5i32': i32\n+[27; 34) '\"hello\"': &str\n+[40; 48) 'b\"bytes\"': &[u8]\n+[54; 57) ''c'': char\n+[63; 67) 'b'b'': u8\n+[73; 77) '3.14': f64\n+[83; 87) '5000': i32\n+[93; 98) 'false': bool\n+[104; 108) 'true': bool\n+[114; 182) 'r#\"   ...    \"#': &str\n+[188; 198) 'br#\"yolo\"#': &[u8]\"###\n     );\n }\n \n #[test]\n fn infer_unary_op() {\n-    check_inference(\n-        \"infer_unary_op\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum SomeType {}\n \n fn test(x: SomeType) {\n@@ -176,15 +261,56 @@ fn test(x: SomeType) {\n     -\"hello\";\n     !\"hello\";\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[27; 28) 'x': SomeType\n+[40; 272) '{     ...lo\"; }': ()\n+[50; 51) 'b': bool\n+[54; 59) 'false': bool\n+[69; 70) 'c': bool\n+[73; 75) '!b': bool\n+[74; 75) 'b': bool\n+[85; 86) 'a': i128\n+[89; 92) '100': i128\n+[102; 103) 'd': i128\n+[112; 114) '-a': i128\n+[113; 114) 'a': i128\n+[124; 125) 'e': i32\n+[128; 132) '-100': i32\n+[129; 132) '100': i32\n+[142; 143) 'f': bool\n+[146; 153) '!!!true': bool\n+[147; 153) '!!true': bool\n+[148; 153) '!true': bool\n+[149; 153) 'true': bool\n+[163; 164) 'g': i32\n+[167; 170) '!42': i32\n+[168; 170) '42': i32\n+[180; 181) 'h': u32\n+[184; 190) '!10u32': u32\n+[185; 190) '10u32': u32\n+[200; 201) 'j': i128\n+[204; 206) '!a': i128\n+[205; 206) 'a': i128\n+[212; 217) '-3.14': f64\n+[213; 217) '3.14': f64\n+[223; 225) '!3': i32\n+[224; 225) '3': i32\n+[231; 233) '-x': {unknown}\n+[232; 233) 'x': SomeType\n+[239; 241) '!x': {unknown}\n+[240; 241) 'x': SomeType\n+[247; 255) '-\"hello\"': {unknown}\n+[248; 255) '\"hello\"': &str\n+[261; 269) '!\"hello\"': {unknown}\n+[262; 269) '\"hello\"': &str\"###\n     );\n }\n \n #[test]\n fn infer_backwards() {\n-    check_inference(\n-        \"infer_backwards\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn takes_u32(x: u32) {}\n \n struct S { i32_field: i32 }\n@@ -197,15 +323,35 @@ fn test() -> &mut &f64 {\n     let c = unknown_function();\n     &mut &c\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[14; 15) 'x': u32\n+[22; 24) '{}': ()\n+[78; 231) '{     ...t &c }': &mut &f64\n+[88; 89) 'a': u32\n+[92; 108) 'unknow...nction': {unknown}\n+[92; 110) 'unknow...tion()': u32\n+[116; 125) 'takes_u32': fn takes_u32(u32) -> ()\n+[116; 128) 'takes_u32(a)': ()\n+[126; 127) 'a': u32\n+[138; 139) 'b': i32\n+[142; 158) 'unknow...nction': {unknown}\n+[142; 160) 'unknow...tion()': i32\n+[166; 184) 'S { i3...d: b }': S\n+[181; 182) 'b': i32\n+[194; 195) 'c': f64\n+[198; 214) 'unknow...nction': {unknown}\n+[198; 216) 'unknow...tion()': f64\n+[222; 229) '&mut &c': &mut &f64\n+[227; 229) '&c': &f64\n+[228; 229) 'c': f64\"###\n     );\n }\n \n #[test]\n fn infer_self() {\n-    check_inference(\n-        \"infer_self\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct S;\n \n impl S {\n@@ -222,15 +368,25 @@ impl S {\n         Self {}\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[34; 38) 'self': &S\n+[40; 61) '{     ...     }': ()\n+[50; 54) 'self': &S\n+[75; 79) 'self': &S\n+[88; 109) '{     ...     }': ()\n+[98; 102) 'self': &S\n+[133; 153) '{     ...     }': S\n+[143; 147) 'S {}': S\n+[177; 200) '{     ...     }': S\n+[187; 194) 'Self {}': S\"###\n     );\n }\n \n #[test]\n fn infer_binary_op() {\n-    check_inference(\n-        \"infer_binary_op\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn f(x: bool) -> i32 {\n     0i32\n }\n@@ -250,15 +406,65 @@ fn test() -> bool {\n \n     ten < 3\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[6; 7) 'x': bool\n+[22; 34) '{     0i32 }': i32\n+[28; 32) '0i32': i32\n+[54; 370) '{     ... < 3 }': bool\n+[64; 65) 'x': bool\n+[68; 69) 'a': bool\n+[68; 74) 'a && b': bool\n+[73; 74) 'b': bool\n+[84; 85) 'y': bool\n+[88; 92) 'true': bool\n+[88; 101) 'true || false': bool\n+[96; 101) 'false': bool\n+[111; 112) 'z': bool\n+[115; 116) 'x': bool\n+[115; 121) 'x == y': bool\n+[120; 121) 'y': bool\n+[131; 132) 't': bool\n+[135; 136) 'x': bool\n+[135; 141) 'x != y': bool\n+[140; 141) 'y': bool\n+[151; 162) 'minus_forty': isize\n+[172; 180) '-40isize': isize\n+[173; 180) '40isize': isize\n+[190; 191) 'h': bool\n+[194; 205) 'minus_forty': isize\n+[194; 216) 'minus_...ONST_2': bool\n+[209; 216) 'CONST_2': isize\n+[226; 227) 'c': i32\n+[230; 231) 'f': fn f(bool) -> i32\n+[230; 239) 'f(z || y)': i32\n+[230; 243) 'f(z || y) + 5': i32\n+[232; 233) 'z': bool\n+[232; 238) 'z || y': bool\n+[237; 238) 'y': bool\n+[242; 243) '5': i32\n+[253; 254) 'd': {unknown}\n+[257; 258) 'b': {unknown}\n+[268; 269) 'g': ()\n+[272; 283) 'minus_forty': isize\n+[272; 288) 'minus_...y ^= i': ()\n+[287; 288) 'i': isize\n+[298; 301) 'ten': usize\n+[311; 313) '10': usize\n+[323; 336) 'ten_is_eleven': bool\n+[339; 342) 'ten': usize\n+[339; 354) 'ten == some_num': bool\n+[346; 354) 'some_num': usize\n+[361; 364) 'ten': usize\n+[361; 368) 'ten < 3': bool\n+[367; 368) '3': usize\"###\n     );\n }\n \n #[test]\n fn infer_field_autoderef() {\n-    check_inference(\n-        \"infer_field_autoderef\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A {\n     b: B,\n }\n@@ -281,27 +487,75 @@ fn test2(a1: *const A, a2: *mut A) {\n     a1.b;\n     a2.b;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[44; 45) 'a': A\n+[50; 213) '{     ...5.b; }': ()\n+[60; 62) 'a1': A\n+[65; 66) 'a': A\n+[72; 74) 'a1': A\n+[72; 76) 'a1.b': B\n+[86; 88) 'a2': &A\n+[91; 93) '&a': &A\n+[92; 93) 'a': A\n+[99; 101) 'a2': &A\n+[99; 103) 'a2.b': B\n+[113; 115) 'a3': &mut A\n+[118; 124) '&mut a': &mut A\n+[123; 124) 'a': A\n+[130; 132) 'a3': &mut A\n+[130; 134) 'a3.b': B\n+[144; 146) 'a4': &&&&&&&A\n+[149; 157) '&&&&&&&a': &&&&&&&A\n+[150; 157) '&&&&&&a': &&&&&&A\n+[151; 157) '&&&&&a': &&&&&A\n+[152; 157) '&&&&a': &&&&A\n+[153; 157) '&&&a': &&&A\n+[154; 157) '&&a': &&A\n+[155; 157) '&a': &A\n+[156; 157) 'a': A\n+[163; 165) 'a4': &&&&&&&A\n+[163; 167) 'a4.b': B\n+[177; 179) 'a5': &mut &&mut &&mut A\n+[182; 200) '&mut &...&mut a': &mut &&mut &&mut A\n+[187; 200) '&&mut &&mut a': &&mut &&mut A\n+[188; 200) '&mut &&mut a': &mut &&mut A\n+[193; 200) '&&mut a': &&mut A\n+[194; 200) '&mut a': &mut A\n+[199; 200) 'a': A\n+[206; 208) 'a5': &mut &&mut &&mut A\n+[206; 210) 'a5.b': B\n+[224; 226) 'a1': *const A\n+[238; 240) 'a2': *mut A\n+[250; 273) '{     ...2.b; }': ()\n+[256; 258) 'a1': *const A\n+[256; 260) 'a1.b': B\n+[266; 268) 'a2': *mut A\n+[266; 270) 'a2.b': B\"###\n     );\n }\n \n #[test]\n fn bug_484() {\n-    check_inference(\n-        \"bug_484\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test() {\n    let x = if true {};\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[11; 37) '{    l... {}; }': ()\n+[20; 21) 'x': ()\n+[24; 34) 'if true {}': ()\n+[27; 31) 'true': bool\n+[32; 34) '{}': ()\"###\n     );\n }\n \n #[test]\n fn infer_in_elseif() {\n-    check_inference(\n-        \"infer_in_elseif\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct Foo { field: i32 }\n fn main(foo: Foo) {\n     if true {\n@@ -310,15 +564,25 @@ fn main(foo: Foo) {\n         foo.field\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[35; 38) 'foo': Foo\n+[45; 109) '{     ...   } }': ()\n+[51; 107) 'if tru...     }': ()\n+[54; 58) 'true': bool\n+[59; 67) '{      }': ()\n+[73; 107) 'if fal...     }': i32\n+[76; 81) 'false': bool\n+[82; 107) '{     ...     }': i32\n+[92; 95) 'foo': Foo\n+[92; 101) 'foo.field': i32\"###\n     )\n }\n \n #[test]\n fn infer_inherent_method() {\n-    check_inference(\n-        \"infer_inherent_method\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A;\n \n impl A {\n@@ -336,15 +600,33 @@ fn test(a: A) {\n     (&a).bar(1);\n     a.bar(1);\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[32; 36) 'self': A\n+[38; 39) 'x': u32\n+[53; 55) '{}': ()\n+[103; 107) 'self': &A\n+[109; 110) 'x': u64\n+[124; 126) '{}': ()\n+[144; 145) 'a': A\n+[150; 198) '{     ...(1); }': ()\n+[156; 157) 'a': A\n+[156; 164) 'a.foo(1)': i32\n+[162; 163) '1': u32\n+[170; 181) '(&a).bar(1)': i64\n+[171; 173) '&a': &A\n+[172; 173) 'a': A\n+[179; 180) '1': u64\n+[187; 188) 'a': A\n+[187; 195) 'a.bar(1)': i64\n+[193; 194) '1': u64\"###\n     );\n }\n \n #[test]\n fn infer_tuple() {\n-    check_inference(\n-        \"infer_tuple\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test(x: &str, y: isize) {\n     let a: (u32, &str) = (1, \"a\");\n     let b = (a, x);\n@@ -353,15 +635,42 @@ fn test(x: &str, y: isize) {\n     let e = (1, \"e\");\n     let f = (e, \"d\");\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[9; 10) 'x': &str\n+[18; 19) 'y': isize\n+[28; 170) '{     ...d\"); }': ()\n+[38; 39) 'a': (u32, &str)\n+[55; 63) '(1, \"a\")': (u32, &str)\n+[56; 57) '1': u32\n+[59; 62) '\"a\"': &str\n+[73; 74) 'b': ((u32, &str), &str)\n+[77; 83) '(a, x)': ((u32, &str), &str)\n+[78; 79) 'a': (u32, &str)\n+[81; 82) 'x': &str\n+[93; 94) 'c': (isize, &str)\n+[97; 103) '(y, x)': (isize, &str)\n+[98; 99) 'y': isize\n+[101; 102) 'x': &str\n+[113; 114) 'd': ((isize, &str), &str)\n+[117; 123) '(c, x)': ((isize, &str), &str)\n+[118; 119) 'c': (isize, &str)\n+[121; 122) 'x': &str\n+[133; 134) 'e': (i32, &str)\n+[137; 145) '(1, \"e\")': (i32, &str)\n+[138; 139) '1': i32\n+[141; 144) '\"e\"': &str\n+[155; 156) 'f': ((i32, &str), &str)\n+[159; 167) '(e, \"d\")': ((i32, &str), &str)\n+[160; 161) 'e': (i32, &str)\n+[163; 166) '\"d\"': &str\"###\n     );\n }\n \n #[test]\n fn infer_array() {\n-    check_inference(\n-        \"infer_array\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test(x: &str, y: isize) {\n     let a = [x];\n     let b = [a, a];\n@@ -380,15 +689,73 @@ fn test(x: &str, y: isize) {\n     let x: [u8; 0] = [];\n     let z: &[u8] = &[1, 2, 3];\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[9; 10) 'x': &str\n+[18; 19) 'y': isize\n+[28; 324) '{     ... 3]; }': ()\n+[38; 39) 'a': [&str]\n+[42; 45) '[x]': [&str]\n+[43; 44) 'x': &str\n+[55; 56) 'b': [[&str]]\n+[59; 65) '[a, a]': [[&str]]\n+[60; 61) 'a': [&str]\n+[63; 64) 'a': [&str]\n+[75; 76) 'c': [[[&str]]]\n+[79; 85) '[b, b]': [[[&str]]]\n+[80; 81) 'b': [[&str]]\n+[83; 84) 'b': [[&str]]\n+[96; 97) 'd': [isize]\n+[100; 112) '[y, 1, 2, 3]': [isize]\n+[101; 102) 'y': isize\n+[104; 105) '1': isize\n+[107; 108) '2': isize\n+[110; 111) '3': isize\n+[122; 123) 'd': [isize]\n+[126; 138) '[1, y, 2, 3]': [isize]\n+[127; 128) '1': isize\n+[130; 131) 'y': isize\n+[133; 134) '2': isize\n+[136; 137) '3': isize\n+[148; 149) 'e': [isize]\n+[152; 155) '[y]': [isize]\n+[153; 154) 'y': isize\n+[165; 166) 'f': [[isize]]\n+[169; 175) '[d, d]': [[isize]]\n+[170; 171) 'd': [isize]\n+[173; 174) 'd': [isize]\n+[185; 186) 'g': [[isize]]\n+[189; 195) '[e, e]': [[isize]]\n+[190; 191) 'e': [isize]\n+[193; 194) 'e': [isize]\n+[206; 207) 'h': [i32]\n+[210; 216) '[1, 2]': [i32]\n+[211; 212) '1': i32\n+[214; 215) '2': i32\n+[226; 227) 'i': [&str]\n+[230; 240) '[\"a\", \"b\"]': [&str]\n+[231; 234) '\"a\"': &str\n+[236; 239) '\"b\"': &str\n+[251; 252) 'b': [[&str]]\n+[255; 265) '[a, [\"b\"]]': [[&str]]\n+[256; 257) 'a': [&str]\n+[259; 264) '[\"b\"]': [&str]\n+[260; 263) '\"b\"': &str\n+[275; 276) 'x': [u8]\n+[288; 290) '[]': [u8]\n+[300; 301) 'z': &[u8]\n+[311; 321) '&[1, 2, 3]': &[u8]\n+[312; 321) '[1, 2, 3]': [u8]\n+[313; 314) '1': u8\n+[316; 317) '2': u8\n+[319; 320) '3': u8\"###\n     );\n }\n \n #[test]\n fn infer_pattern() {\n-    check_inference(\n-        \"infer_pattern\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test(x: &i32) {\n     let y = x;\n     let &z = x;\n@@ -410,15 +777,62 @@ fn test(x: &i32) {\n     let ref mut mut_ref_to_x = x;\n     let k = mut_ref_to_x;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[9; 10) 'x': &i32\n+[18; 369) '{     ...o_x; }': ()\n+[28; 29) 'y': &i32\n+[32; 33) 'x': &i32\n+[43; 45) '&z': &i32\n+[44; 45) 'z': i32\n+[48; 49) 'x': &i32\n+[59; 60) 'a': i32\n+[63; 64) 'z': i32\n+[74; 80) '(c, d)': (i32, &str)\n+[75; 76) 'c': i32\n+[78; 79) 'd': &str\n+[83; 95) '(1, \"hello\")': (i32, &str)\n+[84; 85) '1': i32\n+[87; 94) '\"hello\"': &str\n+[102; 152) 'for (e...     }': ()\n+[106; 112) '(e, f)': ({unknown}, {unknown})\n+[107; 108) 'e': {unknown}\n+[110; 111) 'f': {unknown}\n+[116; 125) 'some_iter': {unknown}\n+[126; 152) '{     ...     }': ()\n+[140; 141) 'g': {unknown}\n+[144; 145) 'e': {unknown}\n+[158; 205) 'if let...     }': ()\n+[165; 170) '[val]': {unknown}\n+[173; 176) 'opt': {unknown}\n+[177; 205) '{     ...     }': ()\n+[191; 192) 'h': {unknown}\n+[195; 198) 'val': {unknown}\n+[215; 221) 'lambda': {unknown}\n+[224; 256) '|a: u6...b; c }': {unknown}\n+[225; 226) 'a': u64\n+[233; 234) 'b': u64\n+[236; 237) 'c': i32\n+[244; 256) '{ a + b; c }': i32\n+[246; 247) 'a': u64\n+[246; 251) 'a + b': u64\n+[250; 251) 'b': u64\n+[253; 254) 'c': i32\n+[267; 279) 'ref ref_to_x': &&i32\n+[282; 283) 'x': &i32\n+[293; 302) 'mut mut_x': &i32\n+[305; 306) 'x': &i32\n+[316; 336) 'ref mu...f_to_x': &mut &i32\n+[339; 340) 'x': &i32\n+[350; 351) 'k': &mut &i32\n+[354; 366) 'mut_ref_to_x': &mut &i32\"###\n     );\n }\n \n #[test]\n fn infer_adt_pattern() {\n-    check_inference(\n-        \"infer_adt_pattern\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum E {\n     A { x: usize },\n     B\n@@ -441,15 +855,40 @@ fn test() {\n     let ref d @ E::A { .. } = e;\n     d;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[68; 289) '{     ...  d; }': ()\n+[78; 79) 'e': E\n+[82; 95) 'E::A { x: 3 }': E\n+[92; 93) '3': usize\n+[106; 113) 'S(y, z)': S\n+[108; 109) 'y': u32\n+[111; 112) 'z': E\n+[116; 119) 'foo': S\n+[129; 148) 'E::A {..._var }': E\n+[139; 146) 'new_var': usize\n+[151; 152) 'e': E\n+[159; 245) 'match ...     }': usize\n+[165; 166) 'e': E\n+[177; 187) 'E::A { x }': E\n+[184; 185) 'x': usize\n+[191; 192) 'x': usize\n+[202; 206) 'E::B': E\n+[210; 213) 'foo': bool\n+[217; 218) '1': usize\n+[228; 232) 'E::B': E\n+[236; 238) '10': usize\n+[256; 275) 'ref d ...{ .. }': &E\n+[264; 275) 'E::A { .. }': E\n+[278; 279) 'e': E\n+[285; 286) 'd': &E\"###\n     );\n }\n \n #[test]\n fn infer_struct_generics() {\n-    check_inference(\n-        \"infer_struct_generics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<T> {\n     x: T,\n }\n@@ -461,15 +900,30 @@ fn test(a1: A<u32>, i: i32) {\n     let a3 = A::<i128> { x: 1 };\n     a3.x;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[36; 38) 'a1': A<u32>\n+[48; 49) 'i': i32\n+[56; 147) '{     ...3.x; }': ()\n+[62; 64) 'a1': A<u32>\n+[62; 66) 'a1.x': u32\n+[76; 78) 'a2': A<i32>\n+[81; 91) 'A { x: i }': A<i32>\n+[88; 89) 'i': i32\n+[97; 99) 'a2': A<i32>\n+[97; 101) 'a2.x': i32\n+[111; 113) 'a3': A<i128>\n+[116; 134) 'A::<i1...x: 1 }': A<i128>\n+[131; 132) '1': i128\n+[140; 142) 'a3': A<i128>\n+[140; 144) 'a3.x': i128\"###\n     );\n }\n \n #[test]\n fn infer_tuple_struct_generics() {\n-    check_inference(\n-        \"infer_tuple_struct_generics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<T>(T);\n enum Option<T> { Some(T), None };\n use Option::*;\n@@ -482,15 +936,31 @@ fn test() {\n     None;\n     let x: Option<i64> = None;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[77; 185) '{     ...one; }': ()\n+[83; 84) 'A': A<i32>(T) -> A<T>\n+[83; 88) 'A(42)': A<i32>\n+[85; 87) '42': i32\n+[94; 95) 'A': A<u128>(T) -> A<T>\n+[94; 103) 'A(42u128)': A<u128>\n+[96; 102) '42u128': u128\n+[109; 113) 'Some': Some<&str>(T) -> Option<T>\n+[109; 118) 'Some(\"x\")': Option<&str>\n+[114; 117) '\"x\"': &str\n+[124; 136) 'Option::Some': Some<&str>(T) -> Option<T>\n+[124; 141) 'Option...e(\"x\")': Option<&str>\n+[137; 140) '\"x\"': &str\n+[147; 151) 'None': Option<{unknown}>\n+[161; 162) 'x': Option<i64>\n+[178; 182) 'None': Option<i64>\"###\n     );\n }\n \n #[test]\n fn infer_generics_in_patterns() {\n-    check_inference(\n-        \"infer_generics_in_patterns\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<T> {\n     x: T,\n }\n@@ -508,31 +978,62 @@ fn test(a1: A<u32>, o: Option<u64>) {\n         _ => 1,\n     };\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[79; 81) 'a1': A<u32>\n+[91; 92) 'o': Option<u64>\n+[107; 244) '{     ...  }; }': ()\n+[117; 128) 'A { x: x2 }': A<u32>\n+[124; 126) 'x2': u32\n+[131; 133) 'a1': A<u32>\n+[143; 161) 'A::<i6...: x3 }': A<i64>\n+[157; 159) 'x3': i64\n+[164; 174) 'A { x: 1 }': A<i64>\n+[171; 172) '1': i64\n+[180; 241) 'match ...     }': u64\n+[186; 187) 'o': Option<u64>\n+[198; 213) 'Option::Some(t)': Option<u64>\n+[211; 212) 't': u64\n+[217; 218) 't': u64\n+[228; 229) '_': Option<u64>\n+[233; 234) '1': u64\"###\n     );\n }\n \n #[test]\n fn infer_function_generics() {\n-    check_inference(\n-        \"infer_function_generics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn id<T>(t: T) -> T { t }\n \n fn test() {\n     id(1u32);\n     id::<i128>(1);\n     let x: u64 = id(1);\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[10; 11) 't': T\n+[21; 26) '{ t }': T\n+[23; 24) 't': T\n+[38; 98) '{     ...(1); }': ()\n+[44; 46) 'id': fn id<u32>(T) -> T\n+[44; 52) 'id(1u32)': u32\n+[47; 51) '1u32': u32\n+[58; 68) 'id::<i128>': fn id<i128>(T) -> T\n+[58; 71) 'id::<i128>(1)': i128\n+[69; 70) '1': i128\n+[81; 82) 'x': u64\n+[90; 92) 'id': fn id<u64>(T) -> T\n+[90; 95) 'id(1)': u64\n+[93; 94) '1': u64\"###\n     );\n }\n \n #[test]\n fn infer_impl_generics() {\n-    check_inference(\n-        \"infer_impl_generics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<T1, T2> {\n     x: T1,\n     y: T2,\n@@ -556,15 +1057,47 @@ fn test() -> i128 {\n     a.z(1i128);\n     a.z::<u128>(1);\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[74; 78) 'self': A<X, Y>\n+[85; 107) '{     ...     }': X\n+[95; 99) 'self': A<X, Y>\n+[95; 101) 'self.x': X\n+[117; 121) 'self': A<X, Y>\n+[128; 150) '{     ...     }': Y\n+[138; 142) 'self': A<X, Y>\n+[138; 144) 'self.y': Y\n+[163; 167) 'self': A<X, Y>\n+[169; 170) 't': T\n+[188; 223) '{     ...     }': (X, Y, T)\n+[198; 217) '(self.....y, t)': (X, Y, T)\n+[199; 203) 'self': A<X, Y>\n+[199; 205) 'self.x': X\n+[207; 211) 'self': A<X, Y>\n+[207; 213) 'self.y': Y\n+[215; 216) 't': T\n+[245; 342) '{     ...(1); }': ()\n+[255; 256) 'a': A<u64, i64>\n+[259; 281) 'A { x:...1i64 }': A<u64, i64>\n+[266; 270) '1u64': u64\n+[275; 279) '1i64': i64\n+[287; 288) 'a': A<u64, i64>\n+[287; 292) 'a.x()': u64\n+[298; 299) 'a': A<u64, i64>\n+[298; 303) 'a.y()': i64\n+[309; 310) 'a': A<u64, i64>\n+[309; 319) 'a.z(1i128)': (u64, i64, i128)\n+[313; 318) '1i128': i128\n+[325; 326) 'a': A<u64, i64>\n+[325; 339) 'a.z::<u128>(1)': (u64, i64, u128)\n+[337; 338) '1': u128\"###\n     );\n }\n \n #[test]\n fn infer_impl_generics_with_autoderef() {\n-    check_inference(\n-        \"infer_impl_generics_with_autoderef\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum Option<T> {\n     Some(T),\n     None,\n@@ -576,15 +1109,24 @@ fn test(o: Option<u32>) {\n     (&o).as_ref();\n     o.as_ref();\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[78; 82) 'self': &Option<T>\n+[98; 100) '{}': ()\n+[111; 112) 'o': Option<u32>\n+[127; 165) '{     ...f(); }': ()\n+[133; 146) '(&o).as_ref()': Option<&u32>\n+[134; 136) '&o': &Option<u32>\n+[135; 136) 'o': Option<u32>\n+[152; 153) 'o': Option<u32>\n+[152; 162) 'o.as_ref()': Option<&u32>\"###\n     );\n }\n \n #[test]\n fn infer_generic_chain() {\n-    check_inference(\n-        \"infer_generic_chain\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<T> {\n     x: T,\n }\n@@ -603,15 +1145,44 @@ fn test() -> i128 {\n      let b = A { x: z };\n      b.x()\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[53; 57) 'self': A<T2>\n+[65; 87) '{     ...     }': T2\n+[75; 79) 'self': A<T2>\n+[75; 81) 'self.x': T2\n+[99; 100) 't': T\n+[110; 115) '{ t }': T\n+[112; 113) 't': T\n+[135; 261) '{     ....x() }': i128\n+[146; 147) 'x': i128\n+[150; 151) '1': i128\n+[162; 163) 'y': i128\n+[166; 168) 'id': fn id<i128>(T) -> T\n+[166; 171) 'id(x)': i128\n+[169; 170) 'x': i128\n+[182; 183) 'a': A<i128>\n+[186; 200) 'A { x: id(y) }': A<i128>\n+[193; 195) 'id': fn id<i128>(T) -> T\n+[193; 198) 'id(y)': i128\n+[196; 197) 'y': i128\n+[211; 212) 'z': i128\n+[215; 217) 'id': fn id<i128>(T) -> T\n+[215; 222) 'id(a.x)': i128\n+[218; 219) 'a': A<i128>\n+[218; 221) 'a.x': i128\n+[233; 234) 'b': A<i128>\n+[237; 247) 'A { x: z }': A<i128>\n+[244; 245) 'z': i128\n+[254; 255) 'b': A<i128>\n+[254; 259) 'b.x()': i128\"###\n     );\n }\n \n #[test]\n fn infer_associated_const() {\n-    check_inference(\n-        \"infer_associated_const\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct Struct;\n \n impl Struct {\n@@ -639,15 +1210,22 @@ fn test() {\n     let y = Enum::BAR;\n     let z = TraitTest::ID;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[227; 305) '{     ...:ID; }': ()\n+[237; 238) 'x': u32\n+[241; 252) 'Struct::FOO': u32\n+[262; 263) 'y': u32\n+[266; 275) 'Enum::BAR': u32\n+[285; 286) 'z': u32\n+[289; 302) 'TraitTest::ID': u32\"###\n     );\n }\n \n #[test]\n fn infer_associated_method_struct() {\n-    check_inference(\n-        \"infer_associated_method_struct\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A { x: u32 };\n \n impl A {\n@@ -659,15 +1237,24 @@ fn test() {\n     let a = A::new();\n     a.x;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[50; 76) '{     ...     }': A\n+[60; 70) 'A { x: 0 }': A\n+[67; 68) '0': u32\n+[89; 123) '{     ...a.x; }': ()\n+[99; 100) 'a': A\n+[103; 109) 'A::new': fn new() -> A\n+[103; 111) 'A::new()': A\n+[117; 118) 'a': A\n+[117; 120) 'a.x': u32\"###\n     );\n }\n \n #[test]\n fn infer_associated_method_enum() {\n-    check_inference(\n-        \"infer_associated_method_enum\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum A { B, C };\n \n impl A {\n@@ -684,15 +1271,28 @@ fn test() {\n     let c = A::c();\n     c;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[48; 68) '{     ...     }': A\n+[58; 62) 'A::B': A\n+[89; 109) '{     ...     }': A\n+[99; 103) 'A::C': A\n+[122; 179) '{     ...  c; }': ()\n+[132; 133) 'a': A\n+[136; 140) 'A::b': fn b() -> A\n+[136; 142) 'A::b()': A\n+[148; 149) 'a': A\n+[159; 160) 'c': A\n+[163; 167) 'A::c': fn c() -> A\n+[163; 169) 'A::c()': A\n+[175; 176) 'c': A\"###\n     );\n }\n \n #[test]\n fn infer_associated_method_with_modules() {\n-    check_inference(\n-        \"infer_associated_method_with_modules\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n mod a {\n     struct A;\n     impl A { pub fn thing() -> A { A {} }}\n@@ -714,15 +1314,31 @@ fn test() {\n     let y = b::B::thing();\n     let z = c::C::thing();\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[56; 64) '{ A {} }': A\n+[58; 62) 'A {}': A\n+[126; 132) '{ 99 }': u32\n+[128; 130) '99': u32\n+[202; 210) '{ C {} }': C\n+[204; 208) 'C {}': C\n+[241; 325) '{     ...g(); }': ()\n+[251; 252) 'x': A\n+[255; 266) 'a::A::thing': fn thing() -> A\n+[255; 268) 'a::A::thing()': A\n+[278; 279) 'y': u32\n+[282; 293) 'b::B::thing': fn thing() -> u32\n+[282; 295) 'b::B::thing()': u32\n+[305; 306) 'z': C\n+[309; 320) 'c::C::thing': fn thing() -> C\n+[309; 322) 'c::C::thing()': C\"###\n     );\n }\n \n #[test]\n fn infer_associated_method_generics() {\n-    check_inference(\n-        \"infer_associated_method_generics\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct Gen<T> {\n     val: T\n }\n@@ -736,15 +1352,24 @@ impl<T> Gen<T> {\n fn test() {\n     let a = Gen::make(0u32);\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[64; 67) 'val': T\n+[82; 109) '{     ...     }': Gen<T>\n+[92; 103) 'Gen { val }': Gen<T>\n+[98; 101) 'val': T\n+[123; 155) '{     ...32); }': ()\n+[133; 134) 'a': Gen<u32>\n+[137; 146) 'Gen::make': fn make<u32>(T) -> Gen<T>\n+[137; 152) 'Gen::make(0u32)': Gen<u32>\n+[147; 151) '0u32': u32\"###\n     );\n }\n \n #[test]\n fn infer_type_alias() {\n-    check_inference(\n-        \"infer_type_alias\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<X, Y> { x: X, y: Y };\n type Foo = A<u32, i128>;\n type Bar<T> = A<T, u128>;\n@@ -757,103 +1382,158 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n     z.x;\n     z.y;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[117; 118) 'x': A<u32, i128>\n+[125; 126) 'y': A<&str, u128>\n+[139; 140) 'z': A<u8, i8>\n+[155; 212) '{     ...z.y; }': ()\n+[161; 162) 'x': A<u32, i128>\n+[161; 164) 'x.x': u32\n+[170; 171) 'x': A<u32, i128>\n+[170; 173) 'x.y': i128\n+[179; 180) 'y': A<&str, u128>\n+[179; 182) 'y.x': &str\n+[188; 189) 'y': A<&str, u128>\n+[188; 191) 'y.y': u128\n+[197; 198) 'z': A<u8, i8>\n+[197; 200) 'z.x': u8\n+[206; 207) 'z': A<u8, i8>\n+[206; 209) 'z.y': i8\"###\n     )\n }\n \n #[test]\n #[should_panic] // we currently can't handle this\n fn recursive_type_alias() {\n-    check_inference(\n-        \"recursive_type_alias\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct A<X> {};\n type Foo = Foo;\n type Bar = A<Bar>;\n fn test(x: Foo) {}\n-\"#,\n+\"#),\n+        @\"\"\n     )\n }\n \n #[test]\n fn no_panic_on_field_of_enum() {\n-    check_inference(\n-        \"no_panic_on_field_of_enum\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum X {}\n \n fn test(x: X) {\n     x.some_field;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[20; 21) 'x': X\n+[26; 47) '{     ...eld; }': ()\n+[32; 33) 'x': X\n+[32; 44) 'x.some_field': {unknown}\"###\n     );\n }\n \n #[test]\n fn bug_585() {\n-    check_inference(\n-        \"bug_585\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test() {\n     X {};\n     match x {\n         A::B {} => (),\n         A::Y() => (),\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[11; 89) '{     ...   } }': ()\n+[17; 21) 'X {}': {unknown}\n+[27; 87) 'match ...     }': ()\n+[33; 34) 'x': {unknown}\n+[45; 52) 'A::B {}': {unknown}\n+[56; 58) '()': ()\n+[68; 74) 'A::Y()': {unknown}\n+[78; 80) '()': ()\"###\n     );\n }\n \n #[test]\n fn bug_651() {\n-    check_inference(\n-        \"bug_651\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn quux() {\n     let y = 92;\n     1 + y;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[11; 41) '{     ...+ y; }': ()\n+[21; 22) 'y': i32\n+[25; 27) '92': i32\n+[33; 34) '1': i32\n+[33; 38) '1 + y': i32\n+[37; 38) 'y': i32\"###\n     );\n }\n \n #[test]\n fn recursive_vars() {\n     covers!(type_var_cycles_resolve_completely);\n     covers!(type_var_cycles_resolve_as_possible);\n-    check_inference(\n-        \"recursive_vars\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test() {\n     let y = unknown;\n     [y, &y];\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[11; 48) '{     ...&y]; }': ()\n+[21; 22) 'y': &{unknown}\n+[25; 32) 'unknown': &{unknown}\n+[38; 45) '[y, &y]': [&&{unknown}]\n+[39; 40) 'y': &{unknown}\n+[42; 44) '&y': &&{unknown}\n+[43; 44) 'y': &{unknown}\"###\n     );\n }\n \n #[test]\n fn recursive_vars_2() {\n     covers!(type_var_cycles_resolve_completely);\n     covers!(type_var_cycles_resolve_as_possible);\n-    check_inference(\n-        \"recursive_vars_2\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test() {\n     let x = unknown;\n     let y = unknown;\n     [(x, y), (&y, &x)];\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[11; 80) '{     ...x)]; }': ()\n+[21; 22) 'x': &&{unknown}\n+[25; 32) 'unknown': &&{unknown}\n+[42; 43) 'y': &&{unknown}\n+[46; 53) 'unknown': &&{unknown}\n+[59; 77) '[(x, y..., &x)]': [(&&{unknown}, &&{unknown})]\n+[60; 66) '(x, y)': (&&{unknown}, &&{unknown})\n+[61; 62) 'x': &&{unknown}\n+[64; 65) 'y': &&{unknown}\n+[68; 76) '(&y, &x)': (&&&{unknown}, &&&{unknown})\n+[69; 71) '&y': &&&{unknown}\n+[70; 71) 'y': &&{unknown}\n+[73; 75) '&x': &&&{unknown}\n+[74; 75) 'x': &&{unknown}\"###\n     );\n }\n \n #[test]\n fn infer_type_param() {\n-    check_inference(\n-        \"infer_type_param\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn id<T>(x: T) -> T {\n     x\n }\n@@ -868,16 +1548,35 @@ fn test() {\n     let x: bool = clone(z);\n     id::<i128>(1);\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[10; 11) 'x': T\n+[21; 30) '{     x }': T\n+[27; 28) 'x': T\n+[44; 45) 'x': &T\n+[56; 65) '{     x }': &T\n+[62; 63) 'x': &T\n+[77; 157) '{     ...(1); }': ()\n+[87; 88) 'y': u32\n+[91; 96) '10u32': u32\n+[102; 104) 'id': fn id<u32>(T) -> T\n+[102; 107) 'id(y)': u32\n+[105; 106) 'y': u32\n+[117; 118) 'x': bool\n+[127; 132) 'clone': fn clone<bool>(&T) -> T\n+[127; 135) 'clone(z)': bool\n+[133; 134) 'z': &bool\n+[141; 151) 'id::<i128>': fn id<i128>(T) -> T\n+[141; 154) 'id::<i128>(1)': i128\n+[152; 153) '1': i128\"###\n     );\n }\n \n #[test]\n fn infer_std_crash_1() {\n     // caused stack overflow, taken from std\n-    check_inference(\n-        \"infer_std_crash_1\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n enum Maybe<T> {\n     Real(T),\n     Fake,\n@@ -888,60 +1587,88 @@ fn write() {\n         Maybe::Real(ref mut something) => (),\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[54; 139) '{     ...   } }': ()\n+[60; 137) 'match ...     }': ()\n+[66; 83) 'someth...nknown': Maybe<{unknown}>\n+[94; 124) 'Maybe:...thing)': Maybe<{unknown}>\n+[106; 123) 'ref mu...ething': &mut {unknown}\n+[128; 130) '()': ()\"###\n     );\n }\n \n #[test]\n fn infer_std_crash_2() {\n     covers!(type_var_resolves_to_int_var);\n     // caused \"equating two type variables, ...\", taken from std\n-    check_inference(\n-        \"infer_std_crash_2\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn test_line_buffer() {\n     &[0, b'\\n', 1, b'\\n'];\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[23; 53) '{     ...n']; }': ()\n+[29; 50) '&[0, b...b'\\n']': &[u8]\n+[30; 50) '[0, b'...b'\\n']': [u8]\n+[31; 32) '0': u8\n+[34; 39) 'b'\\n'': u8\n+[41; 42) '1': u8\n+[44; 49) 'b'\\n'': u8\"###\n     );\n }\n \n #[test]\n fn infer_std_crash_3() {\n     // taken from rustc\n-    check_inference(\n-        \"infer_std_crash_3\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n pub fn compute() {\n     match _ {\n         SizeSkeleton::Pointer { non_zero: true, tail } => {}\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[18; 102) '{     ...   } }': ()\n+[24; 100) 'match ...     }': ()\n+[42; 88) 'SizeSk...tail }': {unknown}\n+[76; 80) 'true': {unknown}\n+[82; 86) 'tail': {unknown}\n+[92; 94) '{}': ()\"###\n     );\n }\n \n #[test]\n fn infer_std_crash_4() {\n     // taken from rustc\n-    check_inference(\n-        \"infer_std_crash_4\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n pub fn primitive_type() {\n     match *self {\n         BorrowedRef { type_: box Primitive(p), ..} => {},\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[25; 110) '{     ...   } }': ()\n+[31; 108) 'match ...     }': ()\n+[37; 42) '*self': {unknown}\n+[38; 42) 'self': {unknown}\n+[53; 95) 'Borrow...), ..}': {unknown}\n+[74; 77) 'box': {unknown}\n+[78; 87) 'Primitive': {unknown}\n+[88; 89) 'p': {unknown}\n+[99; 101) '{}': ()\"###\n     );\n }\n \n #[test]\n fn infer_std_crash_5() {\n     // taken from rustc\n-    check_inference(\n-        \"infer_std_crash_5\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n fn extra_compiler_flags() {\n     for content in doesnt_matter {\n         let name = if doesnt_matter {\n@@ -957,16 +1684,39 @@ fn extra_compiler_flags() {\n         };\n     }\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[27; 323) '{     ...   } }': ()\n+[33; 321) 'for co...     }': ()\n+[37; 44) 'content': &{unknown}\n+[48; 61) 'doesnt_matter': {unknown}\n+[62; 321) '{     ...     }': ()\n+[76; 80) 'name': &&{unknown}\n+[83; 167) 'if doe...     }': &&{unknown}\n+[86; 99) 'doesnt_matter': bool\n+[100; 129) '{     ...     }': &&{unknown}\n+[114; 119) 'first': &&{unknown}\n+[135; 167) '{     ...     }': &&{unknown}\n+[149; 157) '&content': &&{unknown}\n+[150; 157) 'content': &{unknown}\n+[182; 189) 'content': &&{unknown}\n+[192; 314) 'if ICE...     }': &&{unknown}\n+[195; 232) 'ICE_RE..._VALUE': {unknown}\n+[195; 248) 'ICE_RE...&name)': bool\n+[242; 247) '&name': &&&{unknown}\n+[243; 247) 'name': &&{unknown}\n+[249; 277) '{     ...     }': &&{unknown}\n+[263; 267) 'name': &&{unknown}\n+[283; 314) '{     ...     }': &{unknown}\n+[297; 304) 'content': &{unknown}\"###\n     );\n }\n \n #[test]\n fn infer_nested_generics_crash() {\n     // another crash found typechecking rustc\n-    check_inference(\n-        \"infer_nested_generics_crash\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct Canonical<V> {\n     value: V,\n }\n@@ -976,7 +1726,13 @@ struct QueryResponse<V> {\n fn test<R>(query_response: Canonical<QueryResponse<R>>) {\n     &query_response.value;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[92; 106) 'query_response': Canonical<QueryResponse<R>>\n+[137; 167) '{     ...lue; }': ()\n+[143; 164) '&query....value': &QueryResponse<R>\n+[144; 158) 'query_response': Canonical<QueryResponse<R>>\n+[144; 164) 'query_....value': QueryResponse<R>\"###\n     );\n }\n \n@@ -1008,9 +1764,8 @@ mod foo {\n \n #[test]\n fn infer_const() {\n-    check_inference(\n-        \"infer_const\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n struct Foo;\n impl Foo { const ASSOC_CONST: u32 = 0; }\n const GLOBAL_CONST: u32 = 101;\n@@ -1020,15 +1775,22 @@ fn test() {\n     let z = GLOBAL_CONST;\n     let id = Foo::ASSOC_CONST;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[95; 213) '{     ...NST; }': ()\n+[138; 139) 'x': {unknown}\n+[142; 153) 'LOCAL_CONST': {unknown}\n+[163; 164) 'z': u32\n+[167; 179) 'GLOBAL_CONST': u32\n+[189; 191) 'id': u32\n+[194; 210) 'Foo::A..._CONST': u32\"###\n     );\n }\n \n #[test]\n fn infer_static() {\n-    check_inference(\n-        \"infer_static\",\n-        r#\"\n+    assert_snapshot_matches!(\n+        infer(r#\"\n static GLOBAL_STATIC: u32 = 101;\n static mut GLOBAL_STATIC_MUT: u32 = 101;\n fn test() {\n@@ -1039,7 +1801,336 @@ fn test() {\n     let z = GLOBAL_STATIC;\n     let w = GLOBAL_STATIC_MUT;\n }\n-\"#,\n+\"#),\n+        @r###\"\n+[85; 280) '{     ...MUT; }': ()\n+[173; 174) 'x': {unknown}\n+[177; 189) 'LOCAL_STATIC': {unknown}\n+[199; 200) 'y': {unknown}\n+[203; 219) 'LOCAL_...IC_MUT': {unknown}\n+[229; 230) 'z': u32\n+[233; 246) 'GLOBAL_STATIC': u32\n+[256; 257) 'w': u32\n+[260; 277) 'GLOBAL...IC_MUT': u32\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_simple() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait1 {\n+    fn method(&self) -> u32;\n+}\n+struct S1;\n+impl Trait1 for S1 {}\n+trait Trait2 {\n+    fn method(&self) -> i128;\n+}\n+struct S2;\n+impl Trait2 for S2 {}\n+fn test() {\n+    S1.method(); // -> u32\n+    S2.method(); // -> i128\n+}\n+\"#),\n+        @r###\"\n+[31; 35) 'self': &{unknown}\n+[110; 114) 'self': &{unknown}\n+[170; 228) '{     ...i128 }': ()\n+[176; 178) 'S1': S1\n+[176; 187) 'S1.method()': {unknown}\n+[203; 205) 'S2': S2\n+[203; 214) 'S2.method()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_scoped() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct S;\n+mod foo {\n+    pub trait Trait1 {\n+        fn method(&self) -> u32;\n+    }\n+    impl Trait1 for super::S {}\n+}\n+mod bar {\n+    pub trait Trait2 {\n+        fn method(&self) -> i128;\n+    }\n+    impl Trait2 for super::S {}\n+}\n+\n+mod foo_test {\n+    use super::S;\n+    use super::foo::Trait1;\n+    fn test() {\n+        S.method(); // -> u32\n+    }\n+}\n+\n+mod bar_test {\n+    use super::S;\n+    use super::bar::Trait2;\n+    fn test() {\n+        S.method(); // -> i128\n+    }\n+}\n+\"#),\n+        @r###\"\n+[63; 67) 'self': &{unknown}\n+[169; 173) 'self': &{unknown}\n+[300; 337) '{     ...     }': ()\n+[310; 311) 'S': S\n+[310; 320) 'S.method()': {unknown}\n+[416; 454) '{     ...     }': ()\n+[426; 427) 'S': S\n+[426; 436) 'S.method()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_generic_1() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait<T> {\n+    fn method(&self) -> T;\n+}\n+struct S;\n+impl Trait<u32> for S {}\n+fn test() {\n+    S.method();\n+}\n+\"#),\n+        @r###\"\n+[33; 37) 'self': &{unknown}\n+[92; 111) '{     ...d(); }': ()\n+[98; 99) 'S': S\n+[98; 108) 'S.method()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_generic_2() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait<T> {\n+    fn method(&self) -> T;\n+}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn test() {\n+    S(1u32).method();\n+}\n+\"#),\n+        @r###\"\n+[33; 37) 'self': &{unknown}\n+[102; 127) '{     ...d(); }': ()\n+[108; 109) 'S': S<u32>(T) -> S<T>\n+[108; 115) 'S(1u32)': S<u32>\n+[108; 124) 'S(1u32...thod()': {unknown}\n+[110; 114) '1u32': u32\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_assoc_method() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Default {\n+    fn default() -> Self;\n+}\n+struct S;\n+impl Default for S {}\n+fn test() {\n+    let s1: S = Default::default();\n+    let s2 = S::default();\n+    let s3 = <S as Default>::default();\n+}\n+\"#),\n+        @r###\"\n+[87; 193) '{     ...t(); }': ()\n+[97; 99) 's1': S\n+[105; 121) 'Defaul...efault': {unknown}\n+[105; 123) 'Defaul...ault()': S\n+[133; 135) 's2': {unknown}\n+[138; 148) 'S::default': {unknown}\n+[138; 150) 'S::default()': {unknown}\n+[160; 162) 's3': {unknown}\n+[165; 188) '<S as ...efault': {unknown}\n+[165; 190) '<S as ...ault()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_from_bound_1() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait<T> {}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn foo<T: Trait<u32>>(t: T) {}\n+fn test() {\n+    let s = S(unknown);\n+    foo(s);\n+}\n+\"#),\n+        @r###\"\n+[86; 87) 't': T\n+[92; 94) '{}': ()\n+[105; 144) '{     ...(s); }': ()\n+[115; 116) 's': S<{unknown}>\n+[119; 120) 'S': S<{unknown}>(T) -> S<T>\n+[119; 129) 'S(unknown)': S<{unknown}>\n+[121; 128) 'unknown': {unknown}\n+[135; 138) 'foo': fn foo<S<{unknown}>>(T) -> ()\n+[135; 141) 'foo(s)': ()\n+[139; 140) 's': S<{unknown}>\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_from_bound_2() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait<T> {}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn foo<U, T: Trait<U>>(t: T) -> U {}\n+fn test() {\n+    let s = S(unknown);\n+    let x: u32 = foo(s);\n+}\n+\"#),\n+        @r###\"\n+[87; 88) 't': T\n+[98; 100) '{}': ()\n+[111; 163) '{     ...(s); }': ()\n+[121; 122) 's': S<{unknown}>\n+[125; 126) 'S': S<{unknown}>(T) -> S<T>\n+[125; 135) 'S(unknown)': S<{unknown}>\n+[127; 134) 'unknown': {unknown}\n+[145; 146) 'x': u32\n+[154; 157) 'foo': fn foo<u32, S<{unknown}>>(T) -> U\n+[154; 160) 'foo(s)': u32\n+[158; 159) 's': S<{unknown}>\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_call_trait_method_on_generic_param_1() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait {\n+    fn method() -> u32;\n+}\n+fn test<T: Trait>(t: T) {\n+    t.method();\n+}\n+\"#),\n+        @r###\"\n+[59; 60) 't': T\n+[65; 84) '{     ...d(); }': ()\n+[71; 72) 't': T\n+[71; 81) 't.method()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_call_trait_method_on_generic_param_2() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait<T> {\n+    fn method() -> T;\n+}\n+fn test<U, T: Trait<U>>(t: T) {\n+    t.method();\n+}\n+\"#),\n+        @r###\"\n+[66; 67) 't': T\n+[72; 91) '{     ...d(); }': ()\n+[78; 79) 't': T\n+[78; 88) 't.method()': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_with_multiple_trait_impls() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Into<T> {\n+    fn into(self) -> T;\n+}\n+struct S;\n+impl Into<u32> for S;\n+impl Into<u64> for S;\n+fn test() {\n+    let x: u32 = S.into();\n+    let y: u64 = S.into();\n+    let z = Into::<u64>::into(S);\n+}\n+\"#),\n+        @r###\"\n+[29; 33) 'self': {unknown}\n+[107; 198) '{     ...(S); }': ()\n+[117; 118) 'x': u32\n+[126; 127) 'S': S\n+[126; 134) 'S.into()': u32\n+[144; 145) 'y': u64\n+[153; 154) 'S': S\n+[153; 161) 'S.into()': u64\n+[171; 172) 'z': {unknown}\n+[175; 192) 'Into::...::into': {unknown}\n+[175; 195) 'Into::...nto(S)': {unknown}\n+[193; 194) 'S': S\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_project_associated_type() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Iterable {\n+   type Item;\n+}\n+struct S;\n+impl Iterable for S { type Item = u32; }\n+fn test<T: Iterable>() {\n+    let x: <S as Iterable>::Item = 1;\n+    let y: T::Item = no_matter;\n+}\n+\"#),\n+        @r###\"\n+[108; 181) '{     ...ter; }': ()\n+[118; 119) 'x': i32\n+[145; 146) '1': i32\n+[156; 157) 'y': {unknown}\n+[169; 178) 'no_matter': {unknown}\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_associated_type_bound() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Iterable {\n+   type Item;\n+}\n+fn test<T: Iterable<Item=u32>>() {\n+    let y: T::Item = unknown;\n+}\n+\"#),\n+        @r###\"\n+[67; 100) '{     ...own; }': ()\n+[77; 78) 'y': {unknown}\n+[90; 97) 'unknown': {unknown}\"###\n     );\n }\n \n@@ -1058,6 +2149,7 @@ fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);\n     let mut acc = String::new();\n+    acc.push_str(\"\\n\");\n     for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n         let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n         let inference_result = func.infer(&db);\n@@ -1091,15 +2183,10 @@ fn infer(content: &str) -> String {\n             .unwrap();\n         }\n     }\n+    acc.truncate(acc.trim_end().len());\n     acc\n }\n \n-fn check_inference(name: &str, content: &str) {\n-    let result = infer(content);\n-\n-    insta::assert_snapshot_matches!(&name, &result);\n-}\n-\n fn ellipsize(mut text: String, max_len: usize) -> String {\n     if text.len() <= max_len {\n         return text;"}, {"sha": "8ec60090db5bcdf87518be51f8a96ac3fdc7c7b2", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aaece6b39c2fb525be0eccce4626fc622e8236/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=17aaece6b39c2fb525be0eccce4626fc622e8236", "patch": "@@ -474,7 +474,7 @@ mod tests {\n         );\n \n         let type_name = analysis.type_of(range).unwrap().unwrap();\n-        assert_eq!(\"[unknown]\", &type_name);\n+        assert_eq!(\"{unknown}\", &type_name);\n     }\n \n     #[test]"}, {"sha": "780182f8aa817ffcc5e9459d0a9a6a199bbca114", "filename": "editors/emacs/ra-emacs-lsp.el", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17aaece6b39c2fb525be0eccce4626fc622e8236/editors%2Femacs%2Fra-emacs-lsp.el", "raw_url": "https://github.com/rust-lang/rust/raw/17aaece6b39c2fb525be0eccce4626fc622e8236/editors%2Femacs%2Fra-emacs-lsp.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Fra-emacs-lsp.el?ref=17aaece6b39c2fb525be0eccce4626fc622e8236", "patch": "@@ -138,7 +138,7 @@\n   (add-hook 'rust-mode-hook 'rust-analyzer--add-er-expansion))\n \n ;; runnables\n-(defvar rust-analyzer--last-runnable)\n+(defvar rust-analyzer--last-runnable nil)\n \n (defun rust-analyzer--runnables-params ()\n   (list :textDocument (lsp--text-document-identifier)"}]}