{"sha": "2e8358e1ab933c6599b40294c0b33a1a17d19a23", "node_id": "C_kwDOAAsO6NoAKDJlODM1OGUxYWI5MzNjNjU5OWI0MDI5NGMwYjMzYTFhMTdkMTlhMjM", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-29T04:31:32Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-29T04:31:45Z"}, "message": "add `Option::inspect` and `Result::{inspect, inspect_err}`", "tree": {"sha": "cc05ad66245cb0fdb68944413852cad0529bafd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc05ad66245cb0fdb68944413852cad0529bafd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8358e1ab933c6599b40294c0b33a1a17d19a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8358e1ab933c6599b40294c0b33a1a17d19a23", "html_url": "https://github.com/rust-lang/rust/commit/2e8358e1ab933c6599b40294c0b33a1a17d19a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8358e1ab933c6599b40294c0b33a1a17d19a23/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90c5fbbc5df5c81267747daeb937d4e955ce6ad", "html_url": "https://github.com/rust-lang/rust/commit/e90c5fbbc5df5c81267747daeb937d4e955ce6ad"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "4eeb5e43943862dd7d7f9a57d5d3dc49a3db51c6", "filename": "library/core/src/option.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e8358e1ab933c6599b40294c0b33a1a17d19a23/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8358e1ab933c6599b40294c0b33a1a17d19a23/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=2e8358e1ab933c6599b40294c0b33a1a17d19a23", "patch": "@@ -848,6 +848,31 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Calls the provided closure with a reference to the contained value (if [`Some`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// let v = vec![1, 2, 3, 4, 5];\n+    ///\n+    /// // prints \"got: 4\"\n+    /// let x: Option<&usize> = v.get(3).inspect(|x| println!(\"got: {}\", x));\n+    ///\n+    /// // prints nothing\n+    /// let x: Option<&usize> = v.get(5).inspect(|x| println!(\"got: {}\", x));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n+        if let Some(ref x) = self {\n+            f(x);\n+        }\n+\n+        self\n+    }\n+\n     /// Returns the provided default result (if none),\n     /// or applies a function to the contained value (if any).\n     ///"}, {"sha": "a494c089f68ba760b8796a5c926fab7df5f3e01c", "filename": "library/core/src/result.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2e8358e1ab933c6599b40294c0b33a1a17d19a23/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8358e1ab933c6599b40294c0b33a1a17d19a23/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=2e8358e1ab933c6599b40294c0b33a1a17d19a23", "patch": "@@ -854,6 +854,53 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Calls the provided closure with a reference to the contained value (if [`Ok`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// let x: u8 = \"4\"\n+    ///     .parse::<u8>()\n+    ///     .inspect(|x| println!(\"original: {}\", x))\n+    ///     .map(|x| x.pow(3))\n+    ///     .expect(\"failed to parse number\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n+        if let Ok(ref t) = self {\n+            f(t);\n+        }\n+\n+        self\n+    }\n+\n+    /// Calls the provided closure with a reference to the contained error (if [`Err`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// use std::{fs, io};\n+    ///\n+    /// fn read() -> io::Result<String> {\n+    ///     fs::read_to_string(\"address.txt\")\n+    ///         .inspect_err(|e| eprintln!(\"failed to read file: {}\", e))\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self {\n+        if let Err(ref e) = self {\n+            f(e);\n+        }\n+\n+        self\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////"}]}