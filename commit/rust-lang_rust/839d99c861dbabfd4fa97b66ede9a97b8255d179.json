{"sha": "839d99c861dbabfd4fa97b66ede9a97b8255d179", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOWQ5OWM4NjFkYmFiZmQ0ZmE5N2I2NmVkZTlhOTdiODI1NWQxNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T15:48:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T15:48:21Z"}, "message": "Auto merge of #53884 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #53076 (set cfg(rustdoc) when rustdoc is running on a crate)\n - #53622 (cleanup: Add main functions to some UI tests)\n - #53769 (Also link Clippy repo in the CONTRIBUTING.md file)\n - #53774 (Add rust-gdbgui script.)\n - #53781 (bench: libcore: fix build failure of any.rs benchmark (use \"dyn Any\"))\n - #53782 (Make Arc cloning mechanics clearer in module docs)\n - #53790 (Add regression test for issue #52060)\n - #53801 (Prevent duplicated impl on foreign types)\n - #53850 (Nuke the `const_to_allocation` query)", "tree": {"sha": "1e26f4d288d82bde6f02a4f805ff1229063b0ad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e26f4d288d82bde6f02a4f805ff1229063b0ad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/839d99c861dbabfd4fa97b66ede9a97b8255d179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/839d99c861dbabfd4fa97b66ede9a97b8255d179", "html_url": "https://github.com/rust-lang/rust/commit/839d99c861dbabfd4fa97b66ede9a97b8255d179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/839d99c861dbabfd4fa97b66ede9a97b8255d179/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "html_url": "https://github.com/rust-lang/rust/commit/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1"}, {"sha": "d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "html_url": "https://github.com/rust-lang/rust/commit/d0f8cf32b3c0a17037445f7544f5067bdd838f7b"}], "stats": {"total": 523, "additions": 282, "deletions": 241}, "files": [{"sha": "21b14d011f91182d815acb4f610dff1a5f0b5a1c", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -405,7 +405,8 @@ before the PR is merged.\n [breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n \n Rust's build system builds a number of tools that make use of the\n-internals of the compiler. This includes clippy,\n+internals of the compiler. This includes \n+[Clippy](https://github.com/rust-lang-nursery/rust-clippy),\n [RLS](https://github.com/rust-lang-nursery/rls) and\n [rustfmt](https://github.com/rust-lang-nursery/rustfmt). If these tools\n break because of your changes, you may run into a sort of \"chicken and egg\""}, {"sha": "bb5a21e3e405fd034f35d33373006369333bfc21", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -37,6 +37,8 @@ fn main() {\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n+    //FIXME(misdreavus): once stdsimd uses cfg(rustdoc) instead of cfg(dox), remove the `--cfg dox`\n+    //arguments here\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n         .arg(\"--cfg\")"}, {"sha": "32fb8c2f7d58e4f9330946fef58512f133d37076", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -106,27 +106,25 @@ The `#[doc(cfg(...))]` attribute has another effect: When Rustdoc renders docume\n item, it will be accompanied by a banner explaining that the item is only available on certain\n platforms.\n \n-As mentioned earlier, getting the items to Rustdoc requires some extra preparation. The standard\n-library adds a `--cfg dox` flag to every Rustdoc command, but the same thing can be accomplished by\n-adding a feature to your Cargo.toml and adding `--feature dox` (or whatever you choose to name the\n-feature) to your `cargo doc` calls.\n+For Rustdoc to document an item, it needs to see it, regardless of what platform it's currently\n+running on. To aid this, Rustdoc sets the flag `#[cfg(rustdoc)]` when running on your crate.\n+Combining this with the target platform of a given item allows it to appear when building your crate\n+normally on that platform, as well as when building documentation anywhere.\n \n-Either way, once you create an environment for the documentation, you can start to augment your\n-`#[cfg]` attributes to allow both the target platform *and* the documentation configuration to leave\n-the item in. For example, `#[cfg(any(windows, feature = \"dox\"))]` will preserve the item either on\n-Windows or during the documentation process. Then, adding a new attribute `#[doc(cfg(windows))]`\n-will tell Rustdoc that the item is supposed to be used on Windows. For example:\n+For example, `#[cfg(any(windows, rustdoc))]` will preserve the item either on Windows or during the\n+documentation process. Then, adding a new attribute `#[doc(cfg(windows))]` will tell Rustdoc that\n+the item is supposed to be used on Windows. For example:\n \n ```rust\n #![feature(doc_cfg)]\n \n /// Token struct that can only be used on Windows.\n-#[cfg(any(windows, feature = \"dox\"))]\n+#[cfg(any(windows, rustdoc))]\n #[doc(cfg(windows))]\n pub struct WindowsToken;\n \n /// Token struct that can only be used on Unix.\n-#[cfg(any(unix, feature = \"dox\"))]\n+#[cfg(any(unix, rustdoc))]\n #[doc(cfg(unix))]\n pub struct UnixToken;\n ```"}, {"sha": "96c66a1515ed5495b2da721e641ce191fe5167f7", "filename": "src/doc/unstable-book/src/language-features/doc-cfg.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -12,13 +12,17 @@ This attribute has two effects:\n \n 2. The item's doc-tests will only run on the specific platform.\n \n+In addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a\n+special conditional compilation flag, `#[cfg(rustdoc)]`, set whenever building documentation on your\n+crate.\n+\n This feature was introduced as part of PR [#43348] to allow the platform-specific parts of the\n standard library be documented.\n \n ```rust\n #![feature(doc_cfg)]\n \n-#[cfg(any(windows, feature = \"documentation\"))]\n+#[cfg(any(windows, rustdoc))]\n #[doc(cfg(windows))]\n /// The application's icon in the notification area (a.k.a. system tray).\n ///\n@@ -39,4 +43,4 @@ pub struct Icon {\n ```\n \n [#43781]: https://github.com/rust-lang/rust/issues/43781\n-[#43348]: https://github.com/rust-lang/rust/issues/43348\n\\ No newline at end of file\n+[#43348]: https://github.com/rust-lang/rust/issues/43348"}, {"sha": "7e179ba927dff11bb0bd1fe59e8eb833b3443ce2", "filename": "src/etc/rust-gdbgui", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fetc%2Frust-gdbgui", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fetc%2Frust-gdbgui", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdbgui?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -0,0 +1,65 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Exit if anything fails\n+set -e\n+\n+if [ $# -eq 0 ] || [ \"$1\" = \"-h\" ] || [ \"$1\" = \"-help\" ] || [ \"$1\" = \"--help\" ]; then\n+    echo \"\n+rust-gdbgui\n+===========\n+gdbgui - https://gdbgui.com - is a graphical front-end to GDB\n+that runs in a browser. This script invokes gdbgui with the Rust\n+pretty printers loaded.\n+\n+Simple usage  : rust-gdbgui target/debug/myprog\n+With arguments: rust-gdbgui 'target/debug/myprog arg1 arg2...'\n+  (note the quotes)\n+\n+\n+Hints\n+=====\n+gdbgui won't be able to find the rust 'main' method automatically, so\n+in its options make sure to disable the 'Add breakpoint to main after\n+loading executable' setting to avoid a 'File not found: main' warning\n+on startup.\n+\n+Instead, type 'main' into gdbgui's file browser and you should get\n+auto-completion on the filename. Just pick 'main.rs', add a breakpoint\n+by clicking in the line number gutter, and type 'r' or hit the Restart\n+icon to start your program running.\n+\"\n+    exit 0\n+fi\n+\n+# Find out where the pretty printer Python module is\n+RUSTC_SYSROOT=`rustc --print=sysroot`\n+GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n+\n+# Set the environment variable `RUST_GDB` to overwrite the call to a\n+# different/specific command (defaults to `gdb`).\n+RUST_GDB=\"${RUST_GDB:-gdb}\"\n+\n+# Set the environment variable `RUST_GDBGUI` to overwrite the call to a\n+# different/specific command (defaults to `gdbgui`).\n+RUST_GDBGUI=\"${RUST_GDBGUI:-gdbgui}\"\n+\n+# These arguments get passed through to GDB and make it load the\n+# Rust pretty printers.\n+GDB_ARGS=\"--directory=\\\"$GDB_PYTHON_MODULE_DIRECTORY\\\" -iex \\\"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\\\"\"\n+\n+# Finally we execute gdbgui.\n+PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" \\\n+  exec ${RUST_GDBGUI} \\\n+  --gdb ${RUST_GDB} \\\n+  --gdb-args \"${GDB_ARGS}\" \\\n+  \"${@}\"\n+"}, {"sha": "db7a4044b267f7eedc0cecf47473790d73e4adbf", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -49,9 +49,10 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// The type `Arc<T>` provides shared ownership of a value of type `T`,\n /// allocated in the heap. Invoking [`clone`][clone] on `Arc` produces\n-/// a new pointer to the same value in the heap. When the last `Arc`\n-/// pointer to a given value is destroyed, the pointed-to value is\n-/// also destroyed.\n+/// a new `Arc` instance, which points to the same value on the heap as the\n+/// source `Arc`, while increasing a reference count. When the last `Arc`\n+/// pointer to a given value is destroyed, the pointed-to value is also\n+/// destroyed.\n ///\n /// Shared references in Rust disallow mutation by default, and `Arc` is no\n /// exception: you cannot generally obtain a mutable reference to something\n@@ -107,7 +108,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// // The two syntaxes below are equivalent.\n /// let a = foo.clone();\n /// let b = Arc::clone(&foo);\n-/// // a and b both point to the same memory location as foo.\n+/// // a, b, and foo are all Arcs that point to the same memory location\n /// ```\n ///\n /// The [`Arc::clone(&from)`] syntax is the most idiomatic because it conveys more explicitly"}, {"sha": "f4f01eb1cf5d29d84d8c4466a209e103bc24d99f", "filename": "src/libcore/benches/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibcore%2Fbenches%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibcore%2Fbenches%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fany.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -15,7 +15,7 @@ use test::{Bencher, black_box};\n fn bench_downcast_ref(b: &mut Bencher) {\n     b.iter(|| {\n         let mut x = 0;\n-        let mut y = &mut x as &mut Any;\n+        let mut y = &mut x as &mut dyn Any;\n         black_box(&mut y);\n         black_box(y.downcast_ref::<isize>() == Some(&0));\n     });"}, {"sha": "0032bedc7ed1de518390c363f30171a5900cc274", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -541,7 +541,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "dfe0a395ca140678fac359aa24fc6236e0ca3d1e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -75,7 +75,7 @@ use traits::query::{\n     CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n-         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty, self};\n+         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n use ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -632,7 +632,6 @@ define_dep_nodes!( <'tcx>\n     // queries). Making them anonymous avoids hashing the result, which\n     // may save a bit of time.\n     [anon] EraseRegionsTy { ty: Ty<'tcx> },\n-    [anon] ConstToAllocation { val: &'tcx ty::Const<'tcx> },\n \n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),"}, {"sha": "d32580181f8dc65cb25376dd46eef0f622f4acb8", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -198,12 +198,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::const_to_allocation<'tcx> {\n-    fn describe(_tcx: TyCtxt, val: &'tcx ty::Const<'tcx>) -> String {\n-        format!(\"converting constant `{:?}` to an allocation\", val)\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n     fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n         format!(\"erasing regions from `{:?}`\", ty)"}, {"sha": "88f599971c7daeab9a4d5c793c2142e6d87b9554", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -30,7 +30,7 @@ use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n-use mir::interpret::{GlobalId, Allocation};\n+use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n@@ -286,11 +286,6 @@ define_queries! { <'tcx>\n         /// other items (such as enum variant explicit discriminants).\n         [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx>,\n-\n-        /// Converts a constant value to a constant allocation\n-        [] fn const_to_allocation: const_to_allocation(\n-            &'tcx ty::Const<'tcx>\n-        ) -> &'tcx Allocation,\n     },\n \n     TypeChecking {\n@@ -706,12 +701,6 @@ fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::EraseRegionsTy { ty }\n }\n \n-fn const_to_allocation<'tcx>(\n-    val: &'tcx ty::Const<'tcx>,\n-) -> DepConstructor<'tcx> {\n-    DepConstructor::ConstToAllocation { val }\n-}\n-\n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,"}, {"sha": "215fba54499b7e0065f53c78066d565d55191e97", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1062,7 +1062,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n         DepKind::EraseRegionsTy |\n-        DepKind::ConstToAllocation |\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::ImpliedOutlivesBounds |"}, {"sha": "59bebbb87a7755289ffd46041ffdce433251a61d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -22,7 +22,7 @@ use std::ptr;\n \n use rustc::ty::{self, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ScalarMaybeUndef, GlobalId,\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, ScalarMaybeUndef, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n                             truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n@@ -340,9 +340,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(tcx.is_static(def_id).is_some());\n             EvalErrorKind::ReferencedConstant(err).into()\n-        }).map(|val| {\n-            // FIXME We got our static (will be a ByRef), now we make a *copy*?!?\n-            tcx.const_to_allocation(val)\n+        }).map(|const_val| {\n+            if let ConstValue::ByRef(_, allocation, _) = const_val.val {\n+                allocation\n+            } else {\n+                bug!(\"Matching on non-ByRef static\")\n+            }\n         })\n     }\n "}, {"sha": "a55f0496c2dee487f9d155c5dfbca18f0e8e0e37", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -92,7 +92,6 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n     providers.const_eval = interpret::const_eval_provider;\n-    providers.const_to_allocation = interpret::const_to_allocation_provider;\n     providers.check_match = hair::pattern::check_match;\n }\n "}, {"sha": "7a13d8bdd4bac2508bb79d46b050b383d9165873", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -94,7 +94,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n-use rustc::mir::interpret::{GlobalId};\n+use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::ty::subst::{CanonicalSubsts, UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n@@ -1375,7 +1375,11 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt, id: DefId, span: Span) {\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = tcx.const_to_allocation(static_);\n+        let alloc = if let ConstValue::ByRef(_, allocation, _) = static_.val {\n+            allocation\n+        } else {\n+            bug!(\"Matching on non-ByRef static\")\n+        };\n         if alloc.relocations.len() != 0 {\n             let msg = \"statics with a custom `#[link_section]` must be a \\\n                        simple list of bytes on the wasm target with no \\"}, {"sha": "368c056f021c135b359c70bc2ec00c9908bb79ca", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -2956,12 +2956,16 @@ fn item_trait(\n                 </h2>\n             \")?;\n \n+            let mut foreign_cache = FxHashSet();\n             for implementor in foreign {\n-                let assoc_link = AssocItemLink::GotoSource(\n-                    implementor.impl_item.def_id, &implementor.inner_impl().provided_trait_methods\n-                );\n-                render_impl(w, cx, &implementor, assoc_link,\n-                            RenderMode::Normal, implementor.impl_item.stable_since(), false)?;\n+                if foreign_cache.insert(implementor.inner_impl().to_string()) {\n+                    let assoc_link = AssocItemLink::GotoSource(\n+                        implementor.impl_item.def_id,\n+                        &implementor.inner_impl().provided_trait_methods\n+                    );\n+                    render_impl(w, cx, &implementor, assoc_link,\n+                                RenderMode::Normal, implementor.impl_item.stable_since(), false)?;\n+                }\n             }\n         }\n "}, {"sha": "1acae86f0068f5f7ba61180eac9d9717791690ca", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -477,7 +477,8 @@ fn main_args(args: &[String]) -> isize {\n \n     let output = matches.opt_str(\"o\").map(|s| PathBuf::from(&s));\n     let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n-    let cfgs = matches.opt_strs(\"cfg\");\n+    let mut cfgs = matches.opt_strs(\"cfg\");\n+    cfgs.push(\"rustdoc\".to_string());\n \n     if let Some(ref p) = css_file_extension {\n         if !p.is_file() {\n@@ -671,7 +672,8 @@ where R: 'static + Send,\n     for s in &matches.opt_strs(\"L\") {\n         paths.add_path(s, ErrorOutputType::default());\n     }\n-    let cfgs = matches.opt_strs(\"cfg\");\n+    let mut cfgs = matches.opt_strs(\"cfg\");\n+    cfgs.push(\"rustdoc\".to_string());\n     let triple = matches.opt_str(\"target\").map(|target| {\n         if target.ends_with(\".json\") {\n             TargetTriple::TargetPath(PathBuf::from(target))"}, {"sha": "b649ec2340e93df33e87121b1143dff8c780e840", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -309,7 +309,7 @@ macro_rules! assert_approx_eq {\n /// These macros do not have any corresponding definition with a `macro_rules!`\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "1cb9799ff3c22562bcdbcf6b23318c725ac17472", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -14,7 +14,7 @@\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n cfg_if! {\n-    if #[cfg(dox)] {\n+    if #[cfg(rustdoc)] {\n \n         // When documenting libstd we want to show unix/windows/linux modules as\n         // these are the \"main modules\" that are used across platforms. This"}, {"sha": "61e4ce66eec0fe636e911d6a00f10f5aa3d82f9a", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -57,7 +57,7 @@ cfg_if! {\n // then later used in the `std::os` module when documenting, for example,\n // Windows when we're compiling for Linux.\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(any(unix, target_os = \"redox\"))] {\n         // On unix we'll document what's already available\n@@ -77,7 +77,7 @@ cfg_if! {\n     }\n }\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available"}, {"sha": "17214be5b054957da532e8d555f447bf252b349e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -13,22 +13,22 @@\n use io::{self, ErrorKind};\n use libc;\n \n-#[cfg(any(dox, target_os = \"linux\"))] pub use os::linux as platform;\n-\n-#[cfg(all(not(dox), target_os = \"android\"))]   pub use os::android as platform;\n-#[cfg(all(not(dox), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n-#[cfg(all(not(dox), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n-#[cfg(all(not(dox), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n-#[cfg(all(not(dox), target_os = \"haiku\"))]     pub use os::haiku as platform;\n-#[cfg(all(not(dox), target_os = \"ios\"))]       pub use os::ios as platform;\n-#[cfg(all(not(dox), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(dox), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n-#[cfg(all(not(dox), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n-#[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n-#[cfg(all(not(dox), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n-#[cfg(all(not(dox), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n-#[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n-#[cfg(all(not(dox), target_os = \"hermit\"))]    pub use os::hermit as platform;\n+#[cfg(any(rustdoc, target_os = \"linux\"))] pub use os::linux as platform;\n+\n+#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use os::android as platform;\n+#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n+#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n+#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use os::haiku as platform;\n+#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use os::ios as platform;\n+#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use os::macos as platform;\n+#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use os::solaris as platform;\n+#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n+#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n+#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use os::linux as platform;\n+#[cfg(all(not(rustdoc), target_os = \"hermit\"))]    pub use os::hermit as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;"}, {"sha": "4c64322a6dce398c1b3d0065597e4a12c57c613c", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -794,7 +794,7 @@ pub struct FLOATING_SAVE_AREA {\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(dox, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n+#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n pub enum CONTEXT {}\n \n #[cfg(target_arch = \"aarch64\")]"}, {"sha": "14781dd8e24d3812c06d55137378e66b3fc6e6cd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1164,6 +1164,7 @@ const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),\n+    (\"rustdoc\", \"doc_cfg\", cfg_fn!(doc_cfg)),\n ];\n \n #[derive(Debug)]"}, {"sha": "dab22de1b6e58101ae13cfa0a110baa78f739bc1", "filename": "src/test/ui/enum/enum-discrim-autosizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -18,3 +18,4 @@ enum Eu64 {\n     Bu64 = 0x8000_0000_0000_0000 //~ERROR already exists\n }\n \n+fn main() {}"}, {"sha": "e4419d6285127a5312a94f04b1f3f331ee8547c9", "filename": "src/test/ui/enum/enum-discrim-autosizing.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `enum_discrim_autosizing`\n-   |\n-   = note: consider adding a `main` function to `$DIR/enum-discrim-autosizing.rs`\n-\n error[E0081]: discriminant value `0` already exists\n   --> $DIR/enum-discrim-autosizing.rs:18:12\n    |\n@@ -10,7 +6,6 @@ LL |     Au64 = 0,\n LL |     Bu64 = 0x8000_0000_0000_0000 //~ERROR already exists\n    |            ^^^^^^^^^^^^^^^^^^^^^ enum already has `0`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0081, E0601.\n-For more information about an error, try `rustc --explain E0081`.\n+For more information about this error, try `rustc --explain E0081`."}, {"sha": "6207d99dc36aa443735b737949e1219e9954b6dc", "filename": "src/test/ui/feature-gate-doc_cfg-cfg-rustdoc.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(rustdoc)] //~ ERROR: `cfg(rustdoc)` is experimental and subject to change\n+pub struct SomeStruct;\n+\n+fn main() {}"}, {"sha": "be2c263af042deab1aaca34bcc1b58228a5aee07", "filename": "src/test/ui/feature-gate-doc_cfg-cfg-rustdoc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `cfg(rustdoc)` is experimental and subject to change (see issue #43781)\n+  --> $DIR/feature-gate-doc_cfg-cfg-rustdoc.rs:11:7\n+   |\n+LL | #[cfg(rustdoc)] //~ ERROR: `cfg(rustdoc)` is experimental and subject to change\n+   |       ^^^^^^^\n+   |\n+   = help: add #![feature(doc_cfg)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0d74f9011c3ecdbac0c029c9ad94dd5b667b22cc", "filename": "src/test/ui/gated-bad-feature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -20,3 +20,5 @@\n #![feature = \"foo\"] //~ ERROR: malformed feature\n \n #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n+\n+fn main() {}"}, {"sha": "68be49a7277d26bb0b71a78fd4a4b89ed7c4d5a1", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -28,11 +28,7 @@ error[E0557]: feature has been removed\n LL | #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `gated_bad_feature`\n-   |\n-   = note: consider adding a `main` function to `$DIR/gated-bad-feature.rs`\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0555, E0556, E0557, E0601.\n+Some errors occurred: E0555, E0556, E0557.\n For more information about an error, try `rustc --explain E0555`."}, {"sha": "efb3696cf851376557fb1f39a118a54422bda97e", "filename": "src/test/ui/hygiene/generate-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -55,3 +55,5 @@ fn check_legacy() {\n     struct FromOutside;\n     genmod_legacy!();\n }\n+\n+fn main() {}"}, {"sha": "f86444bae77e817d3a884ae0fb80cb4b416f786e", "filename": "src/test/ui/hygiene/generate-mod.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -46,11 +46,6 @@ LL |         type Inner = Outer; //~ ERROR cannot find type `Outer` in this scop\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n \n-error[E0601]: `main` function not found in crate `generate_mod`\n-   |\n-   = note: consider adding a `main` function to `$DIR/generate-mod.rs`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors occurred: E0412, E0601.\n-For more information about an error, try `rustc --explain E0412`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "bf07bc05491cc3752afd543338b08af9a5ff4c09", "filename": "src/test/ui/hygiene/no_implicit_prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -23,3 +23,5 @@ mod bar {\n     }\n     fn f() { ::foo::m!(); }\n }\n+\n+fn main() {}"}, {"sha": "463fdbf00ce54bbc3783b5042395a90c36c82456", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -7,10 +7,6 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new(); //~ ERROR failed to resolve\n    |         ^^^ Use of undeclared type or module `Vec`\n \n-error[E0601]: `main` function not found in crate `no_implicit_prelude`\n-   |\n-   = note: consider adding a `main` function to `$DIR/no_implicit_prelude.rs`\n-\n error[E0599]: no method named `clone` found for type `()` in the current scope\n   --> $DIR/no_implicit_prelude.rs:22:12\n    |\n@@ -24,7 +20,7 @@ LL |         ().clone() //~ ERROR no method named `clone` found\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n            `use std::clone::Clone;`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0433, E0599, E0601.\n+Some errors occurred: E0433, E0599.\n For more information about an error, try `rustc --explain E0433`."}, {"sha": "b2e92fe0e1bf9212c78ce8dc0f4a29dddc5f4af5", "filename": "src/test/ui/imports/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -25,3 +25,5 @@ mod test {\n \n     fn test() { f1066(); } //~ ERROR cannot find function `f1066` in this scope\n }\n+\n+fn main() {}"}, {"sha": "fdff04cc2414892bb320ab77f6e3336b4e75557d", "filename": "src/test/ui/imports/import-glob-circular.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-glob-circular.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,11 +4,6 @@ error[E0425]: cannot find function `f1066` in this scope\n LL |     fn test() { f1066(); } //~ ERROR cannot find function `f1066` in this scope\n    |                 ^^^^^ not found in this scope\n \n-error[E0601]: `main` function not found in crate `import_glob_circular`\n-   |\n-   = note: consider adding a `main` function to `$DIR/import-glob-circular.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0425, E0601.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "0bc968872db5bcc2a10b249ebaf378957e8f3614", "filename": "src/test/ui/imports/import-loop-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -19,3 +19,5 @@ mod b {\n \n     fn main() { let y = x; }\n }\n+\n+fn main() {}"}, {"sha": "09c2e7918f37627fe213297e2b0eef074e1cec34", "filename": "src/test/ui/imports/import-loop-2.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-loop-2.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,16 +4,6 @@ error[E0432]: unresolved import `a::x`\n LL |     pub use a::x;\n    |             ^^^^ no `x` in `a`\n \n-error[E0601]: `main` function not found in crate `import_loop_2`\n-   |\n-   = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n-note: here is a function named 'main'\n-  --> $DIR/import-loop-2.rs:20:5\n-   |\n-LL |     fn main() { let y = x; }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0432, E0601.\n-For more information about an error, try `rustc --explain E0432`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "904a9acf9e53097f41f00996de95307aa4f85f16", "filename": "src/test/ui/invalid_crate_type_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -12,3 +12,5 @@\n #![crate_type(lib)]  //~ ERROR `crate_type` requires a value\n \n fn my_lib_fn() {}\n+\n+fn main() {}"}, {"sha": "6f02f96faca93e91c7a753c734d42cf037f75669", "filename": "src/test/ui/invalid_crate_type_syntax.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -6,10 +6,5 @@ LL | #![crate_type(lib)]  //~ ERROR `crate_type` requires a value\n    |\n    = note: for example: `#![crate_type=\"lib\"]`\n \n-error[E0601]: `main` function not found in crate `invalid_crate_type_syntax`\n-   |\n-   = note: consider adding a `main` function to `$DIR/invalid_crate_type_syntax.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "5c745d1fab3b5374a367f8cf2f0af04d9abd753c", "filename": "src/test/ui/issues/issue-38715.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -14,3 +14,5 @@ macro_rules! foo { ($i:ident) => {} }\n #[macro_export]\n macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n                               //~| WARN this was previously accepted\n+\n+fn main() {}"}, {"sha": "67b27cc83cc897e74ea42ea3b41039dd525c8b88", "filename": "src/test/ui/issues/issue-38715.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -13,10 +13,5 @@ note: previous macro export is now shadowed\n LL | macro_rules! foo { ($i:ident) => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `issue_38715`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-38715.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "46c8cb740ded7cfc3b101d87a2039115490963b2", "filename": "src/test/ui/issues/issue-42755.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -15,3 +15,5 @@ macro_rules! foo {\n }\n \n foo!(a);\n+\n+fn main() {}"}, {"sha": "fa736edc47f5bf8207b045f332a00575764ab0d4", "filename": "src/test/ui/issues/issue-42755.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,10 +4,5 @@ error: repetition matches empty token tree\n LL |     ($($p:vis)*) => {} //~ ERROR repetition matches empty token tree\n    |       ^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `issue_42755`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-42755.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "1ff1238ec54b83724b806bca0bd5875ed8aeee6f", "filename": "src/test/ui/issues/issue-43784-associated-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -23,3 +23,5 @@ impl<T> Partial<T> for T::Assoc where\n impl<T> Complete for T { //~ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n     type Assoc = T;\n }\n+\n+fn main() {}"}, {"sha": "18e97e24b733a334315853005787a5d2fdbfa769", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_43784_associated_type`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-43784-associated-type.rs`\n-\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:23:9\n    |\n@@ -10,7 +6,6 @@ LL | impl<T> Complete for T { //~ ERROR the trait bound `T: std::marker::Copy` i\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0277, E0601.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "30132c3be88a7a4f9bc700db7bb1c6c5ecef5b0f", "filename": "src/test/ui/issues/issue-43784-supertrait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -16,3 +16,5 @@ pub trait Complete: Partial {\n \n impl<T> Partial for T where T: Complete {}\n impl<T> Complete for T {} //~ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+\n+fn main() {}"}, {"sha": "422075f62aa0d086771646a276a8b9e3ae13645a", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_43784_supertrait`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-43784-supertrait.rs`\n-\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:18:9\n    |\n@@ -10,7 +6,6 @@ LL | impl<T> Complete for T {} //~ ERROR the trait bound `T: std::marker::Copy`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0277, E0601.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "54eff228934e36ecf1e4eea630e64d04f4d8d47a", "filename": "src/test/ui/issues/issue-52060.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/52060\n+// The compiler shouldn't ICE in this case\n+static A: &'static [u32] = &[1];\n+static B: [u32; 1] = [0; A.len()];\n+//~^ ERROR [E0013]\n+//~| ERROR `core::slice::<impl [T]>::len` is not yet stable as a const fn\n+\n+fn main() {}"}, {"sha": "988bfd480e6add84fde91a482dd2aafb86cebee9", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -0,0 +1,17 @@\n+error[E0013]: constants cannot refer to statics, use a constant instead\n+  --> $DIR/issue-52060.rs:4:26\n+   |\n+LL | static B: [u32; 1] = [0; A.len()];\n+   |                          ^\n+\n+error: `core::slice::<impl [T]>::len` is not yet stable as a const fn\n+  --> $DIR/issue-52060.rs:4:26\n+   |\n+LL | static B: [u32; 1] = [0; A.len()];\n+   |                          ^^^^^^^\n+   |\n+   = help: in Nightly builds, add `#![feature(const_slice_len)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "fefc6ff6ca615559862dfa7f8188f7d30bd499df", "filename": "src/test/ui/macros/macro-use-bad-args-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -13,3 +13,5 @@\n #[allow(unused_extern_crates)]\n #[macro_use(foo(bar))]  //~ ERROR bad macro import\n extern crate std;\n+\n+fn main() {}"}, {"sha": "308fb6c76e1b9444d9bc862235281e6f7c4bed16", "filename": "src/test/ui/macros/macro-use-bad-args-1.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-1.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,11 +4,6 @@ error[E0466]: bad macro import\n LL | #[macro_use(foo(bar))]  //~ ERROR bad macro import\n    |             ^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `macro_use_bad_args_1`\n-   |\n-   = note: consider adding a `main` function to `$DIR/macro-use-bad-args-1.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0466, E0601.\n-For more information about an error, try `rustc --explain E0466`.\n+For more information about this error, try `rustc --explain E0466`."}, {"sha": "81352cf2e427de855c7972fb4cd9adcedf1e08de", "filename": "src/test/ui/macros/macro-use-bad-args-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -13,3 +13,5 @@\n #[allow(unused_extern_crates)]\n #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n extern crate std;\n+\n+fn main() {}"}, {"sha": "62e3c22fab3ec5b2e256dc49a280d233b60fc9c3", "filename": "src/test/ui/macros/macro-use-bad-args-2.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-bad-args-2.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,11 +4,6 @@ error[E0466]: bad macro import\n LL | #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n    |             ^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `macro_use_bad_args_2`\n-   |\n-   = note: consider adding a `main` function to `$DIR/macro-use-bad-args-2.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0466, E0601.\n-For more information about an error, try `rustc --explain E0466`.\n+For more information about this error, try `rustc --explain E0466`."}, {"sha": "2378cccf56f76c34e8590116e9755cde779f3adf", "filename": "src/test/ui/nested-ty-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -14,3 +14,5 @@ fn hd<U>(v: Vec<U> ) -> U {\n \n     return hd1(v);\n }\n+\n+fn main() {}"}, {"sha": "58b6cd18989f2171db70f3c272bfac407acdf64b", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -18,11 +18,6 @@ LL |     fn hd1(w: [U]) -> U { return w[0]; }\n    |        |\n    |        help: try using a local type parameter instead: `hd1<U>`\n \n-error[E0601]: `main` function not found in crate `nested_ty_params`\n-   |\n-   = note: consider adding a `main` function to `$DIR/nested-ty-params.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0401, E0601.\n-For more information about an error, try `rustc --explain E0401`.\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "be6f3cf9eb205e96af215e105084299595dc8019", "filename": "src/test/ui/repr/repr-transparent-other-items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -36,3 +36,5 @@ fn cant_repr_this() {}\n \n #[repr(transparent)] //~ ERROR should be applied to struct\n static CANT_REPR_THIS: u32 = 0;\n+\n+fn main() {}"}, {"sha": "5a1978991480e62041e155fc916f556063301710", "filename": "src/test/ui/repr/repr-transparent-other-items.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `repr_transparent_other_items`\n-   |\n-   = note: consider adding a `main` function to `$DIR/repr-transparent-other-items.rs`\n-\n error[E0517]: attribute should be applied to struct\n   --> $DIR/repr-transparent-other-items.rs:13:8\n    |\n@@ -67,7 +63,7 @@ LL | #[repr(transparent)] //~ ERROR unsupported representation for zero-variant\n LL | enum Void {}         //~| ERROR should be applied to struct\n    | ------------ zero-variant enum\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0084, E0517, E0601.\n+Some errors occurred: E0084, E0517.\n For more information about an error, try `rustc --explain E0084`."}, {"sha": "aed8a69f66ef81e6518799a3fa58b31fdcfd1a12", "filename": "src/test/ui/repr/repr-transparent-other-reprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -26,3 +26,5 @@ struct TransparentPlusAlign(u8);\n #[repr(transparent)] //~ ERROR cannot have other repr\n #[repr(C)]\n struct SeparateAttributes(*mut u8);\n+\n+fn main() {}"}, {"sha": "c8f5dea3c1242e60b1d5cd4193ea089d8d954239", "filename": "src/test/ui/repr/repr-transparent-other-reprs.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `repr_transparent_other_reprs`\n-   |\n-   = note: consider adding a `main` function to `$DIR/repr-transparent-other-reprs.rs`\n-\n error[E0692]: transparent struct cannot have other repr hints\n   --> $DIR/repr-transparent-other-reprs.rs:15:8\n    |\n@@ -28,7 +24,6 @@ LL | #[repr(transparent)] //~ ERROR cannot have other repr\n LL | #[repr(C)]\n    |        ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0601, E0692.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0692`."}, {"sha": "f5b99af156ee0567d3c7547aba9a143f21ba0f00", "filename": "src/test/ui/repr/repr-transparent.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -48,3 +48,5 @@ struct ZstAlign32<T>(PhantomData<T>);\n \n #[repr(transparent)]\n struct GenericAlign<T>(ZstAlign32<T>, u32); //~ ERROR alignment larger than 1\n+\n+fn main() {}"}, {"sha": "f7bfdbdc625bbd70e4db39276416365adec948a8", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `repr_transparent`\n-   |\n-   = note: consider adding a `main` function to `$DIR/repr-transparent.rs`\n-\n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:21:1\n    |\n@@ -70,7 +66,7 @@ error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n LL | struct GenericAlign<T>(ZstAlign32<T>, u32); //~ ERROR alignment larger than 1\n    |                        ^^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors occurred: E0601, E0690, E0691.\n-For more information about an error, try `rustc --explain E0601`.\n+Some errors occurred: E0690, E0691.\n+For more information about an error, try `rustc --explain E0690`."}, {"sha": "05bf4b928b7251abc421ec09afb31e8bc3a0c8a0", "filename": "src/test/ui/resolve/resolve-unknown-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -17,3 +17,5 @@ impl SomeNonExistentTrait for isize {}\n \n fn f<T:SomeNonExistentTrait>() {}\n //~^ ERROR cannot find trait `SomeNonExistentTrait` in this scope\n+\n+fn main() {}"}, {"sha": "74b190f86845fcd23369cd7c83a970efc03b4d7a", "filename": "src/test/ui/resolve/resolve-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-unknown-trait.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -16,11 +16,6 @@ error[E0405]: cannot find trait `SomeNonExistentTrait` in this scope\n LL | fn f<T:SomeNonExistentTrait>() {}\n    |        ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n-error[E0601]: `main` function not found in crate `resolve_unknown_trait`\n-   |\n-   = note: consider adding a `main` function to `$DIR/resolve-unknown-trait.rs`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0405, E0601.\n-For more information about an error, try `rustc --explain E0405`.\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "c5dd367c0ab88e21fd4f25e87b51e9869d207a93", "filename": "src/test/ui/resolve_self_super_hint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -32,3 +32,5 @@ mod a {\n         }\n     }\n }\n+\n+fn main() {}"}, {"sha": "40b2a4bf9684254a705c763c258e139b15200124", "filename": "src/test/ui/resolve_self_super_hint.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -22,11 +22,6 @@ error[E0432]: unresolved import `alloc`\n LL |                 use alloc::HashMap;\n    |                     ^^^^^ Did you mean `a::alloc`?\n \n-error[E0601]: `main` function not found in crate `resolve_self_super_hint`\n-   |\n-   = note: consider adding a `main` function to `$DIR/resolve_self_super_hint.rs`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0432, E0601.\n-For more information about an error, try `rustc --explain E0432`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "068eb7a448556cc02d3e639cb14dbcb3b1993c36", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -21,3 +21,5 @@ default impl !Send for Z {} //~ ERROR impls of auto traits cannot be default\n \n trait Tr {}\n default impl !Tr for S {} //~ ERROR negative impls are only allowed for auto traits\n+\n+fn main() {}"}, {"sha": "c25c428eb4e9403d9a3138cdbd1b86577150cdc7", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -6,10 +6,6 @@ LL | default impl S {} //~ ERROR inherent impls cannot be default\n    |\n    = note: only trait implementations may be annotated with default\n \n-error[E0601]: `main` function not found in crate `validation`\n-   |\n-   = note: consider adding a `main` function to `$DIR/validation.rs`\n-\n error: impls of auto traits cannot be default\n   --> $DIR/validation.rs:19:1\n    |\n@@ -28,7 +24,6 @@ error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and\n LL | default impl !Tr for S {} //~ ERROR negative impls are only allowed for auto traits\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0192, E0601.\n-For more information about an error, try `rustc --explain E0192`.\n+For more information about this error, try `rustc --explain E0192`."}, {"sha": "c8b77bfabdb9568733a0c085818b7fd3e2ea38d7", "filename": "src/test/ui/tuple/tuple-struct-fields/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -15,3 +15,5 @@ mod foo {\n     //~^ ERROR expected one of `)` or `,`, found `(`\n     //~| ERROR cannot find type `foo` in this scope\n }\n+\n+fn main() {}"}, {"sha": "f83e9dd5458fbad6d370fa68d4f36ea0684dfe80", "filename": "src/test/ui/tuple/tuple-struct-fields/test.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -10,11 +10,6 @@ error[E0412]: cannot find type `foo` in this scope\n LL |     struct S2(pub((foo)) ());\n    |                    ^^^ not found in this scope\n \n-error[E0601]: `main` function not found in crate `test`\n-   |\n-   = note: consider adding a `main` function to `$DIR/test.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0412, E0601.\n-For more information about an error, try `rustc --explain E0412`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "efa7494647691a28ed57e277e0cdfce0e398bbac", "filename": "src/test/ui/unresolved/unresolved-import.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -55,3 +55,5 @@ mod items {\n \n     fn item() {}\n }\n+\n+fn main() {}"}, {"sha": "9bcebb0011a75d9336ae2c4a362bb99b395597ca", "filename": "src/test/ui/unresolved/unresolved-import.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -34,11 +34,6 @@ error[E0432]: unresolved import `Enum`\n LL |     use Enum::*; //~ ERROR unresolved import `Enum` [E0432]\n    |         ^^^^ Did you mean `self::Enum`?\n \n-error[E0601]: `main` function not found in crate `unresolved_import`\n-   |\n-   = note: consider adding a `main` function to `$DIR/unresolved-import.rs`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors occurred: E0432, E0601.\n-For more information about an error, try `rustc --explain E0432`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "fe76d58f1ef76d26444eaf809ba38e4df62d77a7", "filename": "src/test/ui/user-defined-macro-rules.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fuser-defined-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fuser-defined-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuser-defined-macro-rules.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -11,3 +11,5 @@\n #![allow(unused_macros)]\n \n macro_rules! macro_rules { () => {} } //~ ERROR user-defined macros may not be named `macro_rules`\n+\n+fn main() {}"}, {"sha": "1f8b18166c9c96124461bc2fc5eb14522e2f5113", "filename": "src/test/ui/user-defined-macro-rules.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fuser-defined-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fuser-defined-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuser-defined-macro-rules.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -4,10 +4,5 @@ error: user-defined macros may not be named `macro_rules`\n LL | macro_rules! macro_rules { () => {} } //~ ERROR user-defined macros may not be named `macro_rules`\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `user_defined_macro_rules`\n-   |\n-   = note: consider adding a `main` function to `$DIR/user-defined-macro-rules.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "9f431e78061391e98e473977a799faea28ab4c4a", "filename": "src/test/ui/wasm-custom-section-relocations.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -21,3 +21,5 @@ pub static C: usize = 3;\n \n #[link_section = \"test\"]\n pub static D: &usize = &C; //~ ERROR: no extra levels of indirection\n+\n+fn main() {}"}, {"sha": "cea6e5c41923a1013a1d5e754d7c5ee29829172c", "filename": "src/test/ui/wasm-custom-section-relocations.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/839d99c861dbabfd4fa97b66ede9a97b8255d179/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr?ref=839d99c861dbabfd4fa97b66ede9a97b8255d179", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `wasm_custom_section_relocations`\n-   |\n-   = note: consider adding a `main` function to `$DIR/wasm-custom-section-relocations.rs`\n-\n error: statics with a custom `#[link_section]` must be a simple list of bytes on the wasm target with no extra levels of indirection such as references\n   --> $DIR/wasm-custom-section-relocations.rs:14:1\n    |\n@@ -14,6 +10,5 @@ error: statics with a custom `#[link_section]` must be a simple list of bytes on\n LL | pub static D: &usize = &C; //~ ERROR: no extra levels of indirection\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}]}