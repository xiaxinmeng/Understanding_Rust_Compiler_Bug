{"sha": "a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGQ0MjRjNDhlNWIyZTIzY2ViZjVhYjU5NjlhMzI1NGFiOTBhOWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-09-27T13:21:02Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-03T11:54:27Z"}, "message": "Allocate a new diagnostic for defaulted type parameters cannot use `Self`\n\n(Without this commit, you still get an error (a very similar one, at\nthat), but it complains about use of forward declaration, which is\nconfusing since people do not necessarily think of `Self` as being\ndeclared at all.)\n\nUpdate: incorporate review feedback.", "tree": {"sha": "a25c02e98fd9d278584a4b56bf5d15d6459340ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a25c02e98fd9d278584a4b56bf5d15d6459340ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "html_url": "https://github.com/rust-lang/rust/commit/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a4921cde162af1ffbb2fbff4b395408eab1deab", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4921cde162af1ffbb2fbff4b395408eab1deab", "html_url": "https://github.com/rust-lang/rust/commit/3a4921cde162af1ffbb2fbff4b395408eab1deab"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "7f819486f5bd3af609c66464df97703cc721966b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "patch": "@@ -354,6 +354,17 @@ impl<'a> Resolver<'a> {\n                     span, \"defaulted type parameters cannot be forward declared\".to_string());\n                 err\n             }\n+            ResolutionError::SelfInTyParamDefault => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0735,\n+                    \"type parameters cannot use `Self` in their defaults\"\n+                );\n+                err.span_label(\n+                    span, \"`Self` in type parameter default\".to_string());\n+                err\n+            }\n             ResolutionError::ConstParamDependentOnTypeParam => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "47346774180fe4ae091533b6951dd2d2dc0075f0", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "patch": "@@ -8,9 +8,9 @@ Type parameter defaults can only use parameters that occur before them.\n Erroneous code example:\n \n ```compile_fail,E0128\n-struct Foo<T=U, U=()> {\n+struct Foo<T = U, U = ()> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n // error: type parameters with a default cannot use forward declared\n // identifiers\n@@ -20,9 +20,9 @@ Since type parameters are evaluated in-order, you may be able to fix this issue\n by doing:\n \n ```\n-struct Foo<U=(), T=U> {\n+struct Foo<U = (), T = U> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n ```\n \n@@ -1705,6 +1705,21 @@ fn const_id<T, const N: T>() -> T { // error: const parameter\n }\n ```\n \"##,\n+\n+E0735: r##\"\n+Type parameter defaults cannot use `Self` on structs, enums, or unions.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0735\n+struct Foo<X = Box<Self>> {\n+    field1: Option<X>,\n+    field2: Option<X>,\n+}\n+// error: type parameters cannot use `Self` in their defaults.\n+```\n+\"##,\n+\n ;\n //  E0153, unused error code\n //  E0157, unused error code"}, {"sha": "e7292b52ab3e88c512dbafab43797192f40a5cd8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// Error E0735: type parameters with a default cannot use `Self`\n+    SelfInTyParamDefault,\n     /// Error E0671: const parameter cannot depend on type parameter.\n     ConstParamDependentOnTypeParam,\n }\n@@ -1536,7 +1538,7 @@ impl<'a> Resolver<'a> {\n             if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n-                    self.validate_res_from_ribs(i, res, record_used, path_span, ribs),\n+                    self.validate_res_from_ribs(i, rib_ident, res, record_used, path_span, ribs),\n                 ));\n             }\n \n@@ -2122,6 +2124,7 @@ impl<'a> Resolver<'a> {\n     fn validate_res_from_ribs(\n         &mut self,\n         rib_index: usize,\n+        rib_ident: Ident,\n         res: Res,\n         record_used: bool,\n         span: Span,\n@@ -2133,7 +2136,12 @@ impl<'a> Resolver<'a> {\n         // An invalid forward use of a type parameter from a previous default.\n         if let ForwardTyParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n-                self.report_error(span, ResolutionError::ForwardDeclaredTyParam);\n+                let res_error = if rib_ident.name == kw::SelfUpper {\n+                    ResolutionError::SelfInTyParamDefault\n+                } else {\n+                    ResolutionError::ForwardDeclaredTyParam\n+                };\n+                self.report_error(span, res_error);\n             }\n             assert_eq!(res, Res::Err);\n             return Res::Err;"}]}