{"sha": "05a46815e4c54bffd95036249b080f293cd3acff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTQ2ODE1ZTRjNTRiZmZkOTUwMzYyNDliMDgwZjI5M2NkM2FjZmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-16T22:56:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-05T07:40:19Z"}, "message": "resolve: Support value namespace in `fn resolve_lexical_macro_path_segment`", "tree": {"sha": "4f7f5df4bde83d69a61371e1ab3468bf12aeb270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7f5df4bde83d69a61371e1ab3468bf12aeb270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a46815e4c54bffd95036249b080f293cd3acff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a46815e4c54bffd95036249b080f293cd3acff", "html_url": "https://github.com/rust-lang/rust/commit/05a46815e4c54bffd95036249b080f293cd3acff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a46815e4c54bffd95036249b080f293cd3acff/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b69088d15043ec466fde7960b59bc08c420dd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b69088d15043ec466fde7960b59bc08c420dd7d", "html_url": "https://github.com/rust-lang/rust/commit/7b69088d15043ec466fde7960b59bc08c420dd7d"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "2479c5161cb4831fb63b1e249ed67a392bdd4cbb", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05a46815e4c54bffd95036249b080f293cd3acff/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a46815e4c54bffd95036249b080f293cd3acff/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=05a46815e4c54bffd95036249b080f293cd3acff", "patch": "@@ -11,7 +11,7 @@\n use {AmbiguityError, CrateLint, Resolver, ResolutionError, is_known_tool, resolve_error};\n use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, ToNameBinding};\n use ModuleOrUniformRoot;\n-use Namespace::{self, TypeNS, MacroNS};\n+use Namespace::{self, *};\n use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n@@ -547,7 +547,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 1. Not controlled (user-defined) names should have higher priority than controlled names\n         //    built into the language or standard library. This way we can add new names into the\n         //    language or standard library without breaking user code.\n-        // 2. \"Closed set\" below means new names can appear after the current resolution attempt.\n+        // 2. \"Closed set\" below means new names cannot appear after the current resolution attempt.\n         // Places to search (in order of decreasing priority):\n         // (Type NS)\n         // 1. FIXME: Ribs (type parameters), there's no necessary infrastructure yet\n@@ -558,6 +558,12 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 4. Tool modules (closed, controlled right now, but not in the future).\n         // 5. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude (closed, controlled).\n+        // (Value NS)\n+        // 1. FIXME: Ribs (local variables), there's no necessary infrastructure yet\n+        //    (open set, not controlled).\n+        // 2. Names in modules (both normal `mod`ules and blocks), loop through hygienic parents\n+        //    (open, not controlled).\n+        // 3. Standard library prelude (de-facto closed, controlled).\n         // (Macro NS)\n         // 0. Derive helpers (open, not controlled). All ambiguities with other names\n         //    are currently reported as errors. They should be higher in priority than preludes\n@@ -584,7 +590,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // N (unordered). Legacy plugin helpers (open, not controlled). Similar to derive helpers,\n         //    but introduced by legacy plugins using `register_attribute`.\n \n-        assert!(ns == TypeNS  || ns == MacroNS);\n         assert!(force || !record_used); // `record_used` implies `force`\n         ident = ident.modern();\n \n@@ -746,10 +751,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                             Some(parent_module) => WhereToResolve::Module(parent_module),\n                             None => {\n                                 use_prelude = !module.no_implicit_prelude;\n-                                if ns == MacroNS {\n-                                    WhereToResolve::MacroUsePrelude\n-                                } else {\n-                                    WhereToResolve::ExternPrelude\n+                                match ns {\n+                                    TypeNS => WhereToResolve::ExternPrelude,\n+                                    ValueNS => WhereToResolve::StdLibPrelude,\n+                                    MacroNS => WhereToResolve::MacroUsePrelude,\n                                 }\n                             }\n                         }\n@@ -761,7 +766,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     WhereToResolve::LegacyPluginHelpers => break, // nowhere else to search\n                     WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n                     WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n-                    WhereToResolve::StdLibPrelude => WhereToResolve::BuiltinTypes,\n+                    WhereToResolve::StdLibPrelude => match ns {\n+                        TypeNS => WhereToResolve::BuiltinTypes,\n+                        ValueNS => break, // nowhere else to search\n+                        MacroNS => unreachable!(),\n+                    }\n                     WhereToResolve::BuiltinTypes => break, // nowhere else to search\n                 };\n "}]}