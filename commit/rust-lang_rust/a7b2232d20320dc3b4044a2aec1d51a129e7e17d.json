{"sha": "a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjIyMzJkMjAzMjBkYzNiNDA0NGEyYWVjMWQ1MWExMjllN2UxN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-07T22:45:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-07T22:45:14Z"}, "message": "Auto merge of #36292 - japaric:musl-root, r=alexcrichton\n\nrustbuild: per target musl-root\n\nconfig.toml now accepts a target.$TARGET.musl-root key that lets you\noverride the \"build\" musl-root value, which is set via the --musl-root\nflag or via the build.musl-root key.\n\nWith this change, it's now possible to compile std for several musl\ntargets at once. Here's are the sample commands to do such thing:\n\n```\n$ configure \\\n    --enable-rustbuild \\\n    --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \\\n    --musl-root=/musl/x86_64-unknown-linux-musl/\n\n$ edit config.toml && tail config.toml\n[target.arm-unknown-linux-musleabi]\nmusl-root = \"/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr\"\n\n$ make\n```\n\nr? @alexcrichton\nWith this we should be able to start producing releases of std for arm musl targets", "tree": {"sha": "1b04fa3fb7c69183e8254b76c089f4bff8803e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b04fa3fb7c69183e8254b76c089f4bff8803e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "html_url": "https://github.com/rust-lang/rust/commit/a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9627e9ef6e0183e50b6a985143d31d82bda31cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9627e9ef6e0183e50b6a985143d31d82bda31cfe", "html_url": "https://github.com/rust-lang/rust/commit/9627e9ef6e0183e50b6a985143d31d82bda31cfe"}, {"sha": "8cfc69ecea9874ad28253ecc47d50099f9e7001e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfc69ecea9874ad28253ecc47d50099f9e7001e", "html_url": "https://github.com/rust-lang/rust/commit/8cfc69ecea9874ad28253ecc47d50099f9e7001e"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "e87669ba08ca9ba6014e9dd8e6331bcb5beec9e8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "patch": "@@ -59,8 +59,8 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n             cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n         }\n     }\n-    if let Some(ref p) = build.config.musl_root {\n-        if target.contains(\"musl\") {\n+    if target.contains(\"musl\") {\n+        if let Some(p) = build.musl_root(target) {\n             cargo.env(\"MUSL_ROOT\", p);\n         }\n     }"}, {"sha": "5f18dfcaa12c97776ce0615dfd82d0a64d6cce39", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "patch": "@@ -76,6 +76,7 @@ pub struct Config {\n \n     // misc\n     pub channel: String,\n+    // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<String>,\n     pub codegen_tests: bool,\n@@ -89,6 +90,7 @@ pub struct Target {\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n+    pub musl_root: Option<PathBuf>,\n }\n \n /// Structure of the `config.toml` file that configuration is read from."}, {"sha": "f054b29d0b1406cb2a7d94b979f40bc277a16ff6", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "patch": "@@ -118,10 +118,6 @@\n # nightly features\n #channel = \"dev\"\n \n-# The root location of the MUSL installation directory. The library directory\n-# will also need to contain libunwind.a for an unwinding implementation.\n-#musl-root = \"...\"\n-\n # By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\n # platforms to ensure that the compiler is usable by default from the build\n # directory (as it links to a number of dynamic libraries). This may not be\n@@ -167,3 +163,9 @@\n # the NDK for the target lives. This is used to find the C compiler to link and\n # build native code.\n #android-ndk = \"/path/to/ndk\"\n+\n+# The root location of the MUSL installation directory. The library directory\n+# will also need to contain libunwind.a for an unwinding implementation. Note\n+# that this option only makes sense for MUSL targets that produce statically\n+# linked binaries\n+#musl-root = \"...\""}, {"sha": "94c14f7ea254664902d390557a0bb0dda87bbcc8", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "patch": "@@ -977,6 +977,13 @@ impl Build {\n         }\n         return base\n     }\n+\n+    /// Returns the \"musl root\" for this `target`, if defined\n+    fn musl_root(&self, target: &str) -> Option<&Path> {\n+        self.config.target_config[target].musl_root.as_ref()\n+            .or(self.config.musl_root.as_ref())\n+            .map(|p| &**p)\n+    }\n }\n \n impl<'a> Compiler<'a> {"}, {"sha": "c69f9489c306d5dd2e63942cabbd25467c782f4b", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b2232d20320dc3b4044a2aec1d51a129e7e17d/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=a7b2232d20320dc3b4044a2aec1d51a129e7e17d", "patch": "@@ -111,8 +111,8 @@ pub fn check(build: &mut Build) {\n \n         // Make sure musl-root is valid if specified\n         if target.contains(\"musl\") && !target.contains(\"mips\") {\n-            match build.config.musl_root {\n-                Some(ref root) => {\n+            match build.musl_root(target) {\n+                Some(root) => {\n                     if fs::metadata(root.join(\"lib/libc.a\")).is_err() {\n                         panic!(\"couldn't find libc.a in musl dir: {}\",\n                                root.join(\"lib\").display());\n@@ -123,8 +123,9 @@ pub fn check(build: &mut Build) {\n                     }\n                 }\n                 None => {\n-                    panic!(\"when targeting MUSL the build.musl-root option \\\n-                            must be specified in config.toml\")\n+                    panic!(\"when targeting MUSL either the build.musl-root \\\n+                            option or the target.$TARGET.musl-root one must \\\n+                            be specified in config.toml\")\n                 }\n             }\n         }"}]}