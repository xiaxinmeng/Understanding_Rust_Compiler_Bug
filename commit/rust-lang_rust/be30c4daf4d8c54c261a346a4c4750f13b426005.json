{"sha": "be30c4daf4d8c54c261a346a4c4750f13b426005", "node_id": "C_kwDOAAsO6NoAKGJlMzBjNGRhZjRkOGM1NGMyNjFhMzQ2YTRjNDc1MGYxM2I0MjYwMDU", "commit": {"author": {"name": "Milo Mirate", "email": "mmirate@gmx.com", "date": "2022-07-18T12:38:14Z"}, "committer": {"name": "Milo Mirate", "email": "mmirate@gmx.com", "date": "2022-07-18T12:38:14Z"}, "message": "chore: change str_ref_to_string to str_ref_to_owned\n\nToString is implemented by many different types than &str, and\nrepresents a serialization into string data. The fact that said data is\nreturned as owned, is an implementation detail.\n\nIf merely copying borrowed string data to owned string data is all that\nis desired, ToOwned is a much better choice, because if the user later\nrefactors the code such that the input is no longer an `&str`, then they\nwill get a compiler error instead of a mysterious change-in-behavior.", "tree": {"sha": "0253bba19d45f1b3178109eda521abedadc2dbb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0253bba19d45f1b3178109eda521abedadc2dbb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be30c4daf4d8c54c261a346a4c4750f13b426005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be30c4daf4d8c54c261a346a4c4750f13b426005", "html_url": "https://github.com/rust-lang/rust/commit/be30c4daf4d8c54c261a346a4c4750f13b426005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be30c4daf4d8c54c261a346a4c4750f13b426005/comments", "author": {"login": "mmirate", "id": 992859, "node_id": "MDQ6VXNlcjk5Mjg1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/992859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmirate", "html_url": "https://github.com/mmirate", "followers_url": "https://api.github.com/users/mmirate/followers", "following_url": "https://api.github.com/users/mmirate/following{/other_user}", "gists_url": "https://api.github.com/users/mmirate/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmirate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmirate/subscriptions", "organizations_url": "https://api.github.com/users/mmirate/orgs", "repos_url": "https://api.github.com/users/mmirate/repos", "events_url": "https://api.github.com/users/mmirate/events{/privacy}", "received_events_url": "https://api.github.com/users/mmirate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmirate", "id": 992859, "node_id": "MDQ6VXNlcjk5Mjg1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/992859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmirate", "html_url": "https://github.com/mmirate", "followers_url": "https://api.github.com/users/mmirate/followers", "following_url": "https://api.github.com/users/mmirate/following{/other_user}", "gists_url": "https://api.github.com/users/mmirate/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmirate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmirate/subscriptions", "organizations_url": "https://api.github.com/users/mmirate/orgs", "repos_url": "https://api.github.com/users/mmirate/repos", "events_url": "https://api.github.com/users/mmirate/events{/privacy}", "received_events_url": "https://api.github.com/users/mmirate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e379cec62b63d4e61a8f0b062e8be3ebfcd4a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e379cec62b63d4e61a8f0b062e8be3ebfcd4a4b", "html_url": "https://github.com/rust-lang/rust/commit/8e379cec62b63d4e61a8f0b062e8be3ebfcd4a4b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "5826bed34345b11d851c3239054f66e92359be19", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be30c4daf4d8c54c261a346a4c4750f13b426005/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be30c4daf4d8c54c261a346a4c4750f13b426005/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=be30c4daf4d8c54c261a346a4c4750f13b426005", "patch": "@@ -35,7 +35,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Option<Vec<Assi\n     add_reference(ctx, d, &mut fixes);\n     add_missing_ok_or_some(ctx, d, &mut fixes);\n     remove_semicolon(ctx, d, &mut fixes);\n-    str_ref_to_string(ctx, d, &mut fixes);\n+    str_ref_to_owned(ctx, d, &mut fixes);\n \n     if fixes.is_empty() {\n         None\n@@ -135,7 +135,7 @@ fn remove_semicolon(\n     Some(())\n }\n \n-fn str_ref_to_string(\n+fn str_ref_to_owned(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::TypeMismatch,\n     acc: &mut Vec<Assist>,\n@@ -151,12 +151,12 @@ fn str_ref_to_string(\n     let expr = d.expr.value.to_node(&root);\n     let expr_range = expr.syntax().text_range();\n \n-    let to_string = format!(\".to_string()\");\n+    let to_owned = format!(\".to_owned()\");\n \n-    let edit = TextEdit::insert(expr.syntax().text_range().end(), to_string);\n+    let edit = TextEdit::insert(expr.syntax().text_range().end(), to_owned);\n     let source_change =\n         SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n-    acc.push(fix(\"str_ref_to_string\", \"Add .to_string() here\", source_change, expr_range));\n+    acc.push(fix(\"str_ref_to_owned\", \"Add .to_owned() here\", source_change, expr_range));\n \n     Some(())\n }\n@@ -527,7 +527,7 @@ fn foo() -> SomeOtherEnum { 0$0 }\n     }\n \n     #[test]\n-    fn str_ref_to_string() {\n+    fn str_ref_to_owned() {\n         check_fix(\n             r#\"\n struct String;\n@@ -540,7 +540,7 @@ fn test() -> String {\n struct String;\n \n fn test() -> String {\n-    \"a\".to_string()\n+    \"a\".to_owned()\n }\n             \"#,\n         );"}]}