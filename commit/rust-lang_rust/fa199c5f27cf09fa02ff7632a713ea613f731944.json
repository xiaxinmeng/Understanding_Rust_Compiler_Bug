{"sha": "fa199c5f27cf09fa02ff7632a713ea613f731944", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMTk5YzVmMjdjZjA5ZmEwMmZmNzYzMmE3MTNlYTYxM2Y3MzE5NDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-11T14:04:29Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-12T02:13:13Z"}, "message": "Don't suggest wrong snippet in closure", "tree": {"sha": "c149b12b4369fec714d85fcf026475b30460f0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c149b12b4369fec714d85fcf026475b30460f0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa199c5f27cf09fa02ff7632a713ea613f731944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa199c5f27cf09fa02ff7632a713ea613f731944", "html_url": "https://github.com/rust-lang/rust/commit/fa199c5f27cf09fa02ff7632a713ea613f731944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa199c5f27cf09fa02ff7632a713ea613f731944/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d6f55f47e8875e71083a28ed84ea5a88e1b596", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d6f55f47e8875e71083a28ed84ea5a88e1b596", "html_url": "https://github.com/rust-lang/rust/commit/27d6f55f47e8875e71083a28ed84ea5a88e1b596"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "cc634101f0adf9f6f3452f0c8c4c953a6c3d8e3d", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=fa199c5f27cf09fa02ff7632a713ea613f731944", "patch": "@@ -223,18 +223,24 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind<'_>) =\n+            let (span, use_spans, original_path, kind,):\n+            (\n+                Span,\n+                Option<UseSpans>,\n+                &Place<'tcx>,\n+                &IllegalMoveOriginKind<'_>,\n+            ) =\n                 match error {\n                     GroupedMoveError::MovesFromPlace { span, ref original_path, ref kind, .. } |\n                     GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } => {\n-                        (span, original_path, kind)\n+                        (span, None, original_path, kind)\n                     }\n                     GroupedMoveError::OtherIllegalMove {\n                         use_spans,\n                         ref original_path,\n                         ref kind\n                     } => {\n-                        (use_spans.args_or_use(), original_path, kind)\n+                        (use_spans.args_or_use(), Some(use_spans), original_path, kind)\n                     },\n                 };\n             debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n@@ -250,6 +256,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             original_path,\n                             target_place,\n                             span,\n+                            use_spans,\n                         )\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n@@ -296,6 +303,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         move_place: &Place<'tcx>,\n         deref_target_place: &Place<'tcx>,\n         span: Span,\n+        use_spans: Option<UseSpans>,\n     ) -> DiagnosticBuilder<'a> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n@@ -416,7 +424,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n             let is_option = move_ty.starts_with(\"std::option::Option\");\n             let is_result = move_ty.starts_with(\"std::result::Result\");\n-            if is_option || is_result {\n+            if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n                 err.span_suggestion(\n                     span,\n                     &format!(\"consider borrowing the `{}`'s content\", if is_option {"}, {"sha": "88e8a5b7aeef06e0293c4f52a2c4979b66e8f3b1", "filename": "src/test/ui/suggestions/option-content-move2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.rs?ref=fa199c5f27cf09fa02ff7632a713ea613f731944", "patch": "@@ -0,0 +1,16 @@\n+struct NotCopyable;\n+\n+fn func<F: FnMut() -> H, H: FnMut()>(_: F) {}\n+\n+fn parse() {\n+    let mut var = None;\n+    func(|| {\n+        // Shouldn't suggest `move ||.as_ref()` here\n+        move || {\n+        //~^ ERROR: cannot move out of `var`\n+            var = Some(NotCopyable);\n+        }\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "71f745374e5acd7011c9eafe63070d9961279f1c", "filename": "src/test/ui/suggestions/option-content-move2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa199c5f27cf09fa02ff7632a713ea613f731944/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr?ref=fa199c5f27cf09fa02ff7632a713ea613f731944", "patch": "@@ -0,0 +1,18 @@\n+error[E0507]: cannot move out of `var`, a captured variable in an `FnMut` closure\n+  --> $DIR/option-content-move2.rs:9:9\n+   |\n+LL |     let mut var = None;\n+   |         ------- captured outer variable\n+...\n+LL |         move || {\n+   |         ^^^^^^^ move out of `var` occurs here\n+LL |\n+LL |             var = Some(NotCopyable);\n+   |             ---\n+   |             |\n+   |             move occurs because `var` has type `std::option::Option<NotCopyable>`, which does not implement the `Copy` trait\n+   |             move occurs due to use in closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}