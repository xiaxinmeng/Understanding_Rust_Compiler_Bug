{"sha": "4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZWViODFkYjViYzQ3NzBlMDZkYmU2ZjExM2Y5MjU4OGNjYmZjY2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-31T13:59:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T13:59:50Z"}, "message": "Rollup merge of #70588 - Coder-256:str-split-at-docs, r=Dylan-DPC\n\nFix incorrect documentation for `str::{split_at, split_at_mut}`\n\nThe documentation for each method currently states:\n\n> Panics if `mid` is not on a UTF-8 code point boundary, or if it is beyond the last code point of the string slice.\n\nHowever, this is not consistent with the real behavior, or that of the corresponding methods for `[T]` slices. A comment inside each of the `str` methods states:\n\n> is_char_boundary checks that the index is in [0, .len()]\n\nThat is what I would expect the behavior to be, and in fact this seems to be the real behavior. For example ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8e03dcc209d4dd176df2297523f9fee1)):\n\n```rust\nfn main() {\n    // Prints (\"abc\", \"\") and doesn't panic\n    println!(\"{:?}\", \"abc\".split_at(3));\n}\n```\n\nIn this case, I would interpret \"the last code point of the string slice\" to mean the byte at index 2 in UTF-8. However, it is possible to pass an index of 3, which is definitely \"beyond the last code point of the string slice\".\n\nI think that this is much clearer, but feel free to bikeshed.", "tree": {"sha": "6aedd730763ea3aade56b77daeb27a60969fa20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aedd730763ea3aade56b77daeb27a60969fa20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg0zWCRBK7hj4Ov3rIwAAdHIIAFfSLeVuDLvr2e03AJKmhROI\nbwmOwpbNLZrElFmE18G3G8mdO2YmFDaoKtJASsq4R8DAr94uzYOFiG3eCLYorXBh\nohQyZ8rhQnomuAlys1uSrdlyR8YrGoZJ2WojpFS48TCM2IAGQJaNrvqaHbtyzB3a\nktajPIzUBo8AQxFdGqnWDqEjbArltg3FY71z7BmKRVgST0v1rju7cpYaa2ASOOcv\na3QFeHKd7oeVOXNFcqTYtpfHvGH5TsdIDHaVbTAiQR6MkFB358XkarKJ+vq+VnyF\ngDTc6LnqXNIlRStOf5HxjILZzarRa/xuElwOgxQgtHlo3kPottosRpB0er9mEso=\n=5qoi\n-----END PGP SIGNATURE-----\n", "payload": "tree 6aedd730763ea3aade56b77daeb27a60969fa20f\nparent c55f5007b2dc089d5a4548dd4e04ea9343655e38\nparent fcab1f947bb760910815685ba75b4c7a85a79f89\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585663190 +0200\ncommitter GitHub <noreply@github.com> 1585663190 +0200\n\nRollup merge of #70588 - Coder-256:str-split-at-docs, r=Dylan-DPC\n\nFix incorrect documentation for `str::{split_at, split_at_mut}`\n\nThe documentation for each method currently states:\n\n> Panics if `mid` is not on a UTF-8 code point boundary, or if it is beyond the last code point of the string slice.\n\nHowever, this is not consistent with the real behavior, or that of the corresponding methods for `[T]` slices. A comment inside each of the `str` methods states:\n\n> is_char_boundary checks that the index is in [0, .len()]\n\nThat is what I would expect the behavior to be, and in fact this seems to be the real behavior. For example ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8e03dcc209d4dd176df2297523f9fee1)):\n\n```rust\nfn main() {\n    // Prints (\"abc\", \"\") and doesn't panic\n    println!(\"{:?}\", \"abc\".split_at(3));\n}\n```\n\nIn this case, I would interpret \"the last code point of the string slice\" to mean the byte at index 2 in UTF-8. However, it is possible to pass an index of 3, which is definitely \"beyond the last code point of the string slice\".\n\nI think that this is much clearer, but feel free to bikeshed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "html_url": "https://github.com/rust-lang/rust/commit/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55f5007b2dc089d5a4548dd4e04ea9343655e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55f5007b2dc089d5a4548dd4e04ea9343655e38", "html_url": "https://github.com/rust-lang/rust/commit/c55f5007b2dc089d5a4548dd4e04ea9343655e38"}, {"sha": "fcab1f947bb760910815685ba75b4c7a85a79f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcab1f947bb760910815685ba75b4c7a85a79f89", "html_url": "https://github.com/rust-lang/rust/commit/fcab1f947bb760910815685ba75b4c7a85a79f89"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "dc7637cfdb934121c6f8cd80e948aeae8ce4097f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "patch": "@@ -2642,7 +2642,7 @@ impl str {\n     /// # Panics\n     ///\n     /// Panics if `mid` is not on a UTF-8 code point boundary, or if it is\n-    /// beyond the last code point of the string slice.\n+    /// past the end of the last code point of the string slice.\n     ///\n     /// # Examples\n     ///\n@@ -2683,7 +2683,7 @@ impl str {\n     /// # Panics\n     ///\n     /// Panics if `mid` is not on a UTF-8 code point boundary, or if it is\n-    /// beyond the last code point of the string slice.\n+    /// past the end of the last code point of the string slice.\n     ///\n     /// # Examples\n     ///"}]}