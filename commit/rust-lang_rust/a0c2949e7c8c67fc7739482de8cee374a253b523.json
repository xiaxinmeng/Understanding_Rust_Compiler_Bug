{"sha": "a0c2949e7c8c67fc7739482de8cee374a253b523", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzI5NDllN2M4YzY3ZmM3NzM5NDgyZGU4Y2VlMzc0YTI1M2I1MjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-20T03:32:27Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-20T09:18:52Z"}, "message": "libcore: add a ScanIterator, a generalisation of MapIterator to have internal state.", "tree": {"sha": "457e10d74795d849feac364f6defcbcdfc693132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457e10d74795d849feac364f6defcbcdfc693132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c2949e7c8c67fc7739482de8cee374a253b523", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c2949e7c8c67fc7739482de8cee374a253b523", "html_url": "https://github.com/rust-lang/rust/commit/a0c2949e7c8c67fc7739482de8cee374a253b523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c2949e7c8c67fc7739482de8cee374a253b523/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff701b7db609cabe59832d47779832a16627b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff701b7db609cabe59832d47779832a16627b5f", "html_url": "https://github.com/rust-lang/rust/commit/4ff701b7db609cabe59832d47779832a16627b5f"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "4a3a98df0d0ea78cb414c817343c3e7339608b97", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a0c2949e7c8c67fc7739482de8cee374a253b523/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c2949e7c8c67fc7739482de8cee374a253b523/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=a0c2949e7c8c67fc7739482de8cee374a253b523", "patch": "@@ -39,6 +39,8 @@ pub trait IteratorUtil<A> {\n     fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n     fn skip(self, n: uint) -> SkipIterator<Self>;\n     fn take(self, n: uint) -> TakeIterator<Self>;\n+    fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n+        -> ScanIterator<'r, A, B, Self, St>;\n     fn advance(&mut self, f: &fn(A) -> bool);\n }\n \n@@ -93,6 +95,12 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         TakeIterator{iter: self, n: n}\n     }\n \n+    #[inline(always)]\n+    fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n+        -> ScanIterator<'r, A, B, T, St> {\n+        ScanIterator{iter: self, f: f, state: initial_state}\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) {\n@@ -306,12 +314,13 @@ impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n \n pub struct UnfoldrIterator<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n-    priv state: St\n+    state: St\n }\n \n pub impl<'self, A, St> UnfoldrIterator<'self, A, St> {\n     #[inline]\n-    fn new(f: &'self fn(&mut St) -> Option<A>, initial_state: St) -> UnfoldrIterator<'self, A, St> {\n+    fn new(f: &'self fn(&mut St) -> Option<A>, initial_state: St)\n+        -> UnfoldrIterator<'self, A, St> {\n         UnfoldrIterator {\n             f: f,\n             state: initial_state\n@@ -326,6 +335,19 @@ impl<'self, A, St> Iterator<A> for UnfoldrIterator<'self, A, St> {\n     }\n }\n \n+pub struct ScanIterator<'self, A, B, T, St> {\n+    priv iter: T,\n+    priv f: &'self fn(&mut St, A) -> Option<B>,\n+    state: St\n+}\n+\n+impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B, T, St> {\n+    #[inline]\n+    fn next(&mut self) -> Option<B> {\n+        self.iter.next().chain(|a| (self.f)(&mut self.state, a))\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -406,6 +428,25 @@ mod tests {\n         assert_eq!(i, ys.len());\n     }\n \n+    #[test]\n+    fn test_iterator_scan() {\n+        // test the type inference\n+        fn add(old: &mut int, new: &uint) -> Option<float> {\n+            *old += *new as int;\n+            Some(*old as float)\n+        }\n+        let xs = [0u, 1, 2, 3, 4];\n+        let ys = [0f, 1f, 3f, 6f, 10f];\n+\n+        let mut it = xs.iter().scan(0, add);\n+        let mut i = 0;\n+        for it.advance |x| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+\n     #[test]\n     fn test_unfoldr() {\n         fn count(st: &mut uint) -> Option<uint> {"}]}