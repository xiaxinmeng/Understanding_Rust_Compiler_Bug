{"sha": "5510803fe98660d96e9b6b9ba95cc00b8539155f", "node_id": "C_kwDOAAsO6NoAKDU1MTA4MDNmZTk4NjYwZDk2ZTliNmI5YmE5NWNjMDBiODUzOTE1NWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-10T21:40:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-10T21:40:33Z"}, "message": "Rollup merge of #91482 - JosephTLyons:update-HashMap-and-BTreeMap-documentation, r=yaahc\n\nUpdate documentation to use `from()` to initialize `HashMap`s and `BTreeMap`s\n\nAs of Rust 1.56, `HashMap` and `BTreeMap` both have associated `from()` functions.  I think using these in the documentation cleans things up a bit.  It allows us to remove some of the `mut`s and avoids the Initialize-Then-Modify anti-pattern.", "tree": {"sha": "6ec15978f6a0181cefeaba3d31ca4d9bd09a1aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ec15978f6a0181cefeaba3d31ca4d9bd09a1aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5510803fe98660d96e9b6b9ba95cc00b8539155f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhs8lSCRBK7hj4Ov3rIwAAylkIAC+jcyzpSueCwJAQHilABHJX\nidbgFG3OLVdAqiKG8EeNM9izZWFM6BJFbu2rtA8jMvIhStxGIPJ5FsltbOvpDoj9\nIzYYDIWBxqpJEX/5om3IbXuEATJmxXD+0zt8ELEHF76CAVbRjdH5+YhPasR3di7n\nWI4URg27l9+Yf8cMMHmfTaUaG0GsPFGBqyiBAo4jO0xS6eNKDeogDndytjtYmrTl\nw0QVws6+i1J5BaFZMHkZWLYq/JK+yWfmNxuO+86X2KwFLLWet4CL8fMM2IKLvoIs\nzO5CLn0ZhWU/vdwpeSCqY7ZFnq9Wy1VWFr2rw3mjumE69WiDbVjAQxQsvUiMRio=\n=yBXF\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ec15978f6a0181cefeaba3d31ca4d9bd09a1aee\nparent b7b4d7742e42d821acf15663ca3c0285cc20fa76\nparent 72a6974e455793f9dcc370cc8bdf9c055b843d39\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639172433 +0100\ncommitter GitHub <noreply@github.com> 1639172433 +0100\n\nRollup merge of #91482 - JosephTLyons:update-HashMap-and-BTreeMap-documentation, r=yaahc\n\nUpdate documentation to use `from()` to initialize `HashMap`s and `BTreeMap`s\n\nAs of Rust 1.56, `HashMap` and `BTreeMap` both have associated `from()` functions.  I think using these in the documentation cleans things up a bit.  It allows us to remove some of the `mut`s and avoids the Initialize-Then-Modify anti-pattern.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5510803fe98660d96e9b6b9ba95cc00b8539155f", "html_url": "https://github.com/rust-lang/rust/commit/5510803fe98660d96e9b6b9ba95cc00b8539155f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5510803fe98660d96e9b6b9ba95cc00b8539155f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b4d7742e42d821acf15663ca3c0285cc20fa76", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4d7742e42d821acf15663ca3c0285cc20fa76", "html_url": "https://github.com/rust-lang/rust/commit/b7b4d7742e42d821acf15663ca3c0285cc20fa76"}, {"sha": "72a6974e455793f9dcc370cc8bdf9c055b843d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a6974e455793f9dcc370cc8bdf9c055b843d39", "html_url": "https://github.com/rust-lang/rust/commit/72a6974e455793f9dcc370cc8bdf9c055b843d39"}], "stats": {"total": 132, "additions": 75, "deletions": 57}, "files": [{"sha": "199c05dc5df3e4e4471f2dcda41f772eb002e59b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5510803fe98660d96e9b6b9ba95cc00b8539155f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5510803fe98660d96e9b6b9ba95cc00b8539155f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=5510803fe98660d96e9b6b9ba95cc00b8539155f", "patch": "@@ -2107,10 +2107,11 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n-    /// let mut map = BTreeMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = BTreeMap::from([\n+    ///    (\"a\", 1),\n+    ///    (\"b\", 2),\n+    ///    (\"c\", 3),\n+    /// ]);\n     ///\n     /// // add 10 to the value if the key isn't \"a\"\n     /// for (key, value) in map.iter_mut() {"}, {"sha": "35f17aa781f4e3a1e025936e1b6227af605c7144", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 70, "deletions": 53, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/5510803fe98660d96e9b6b9ba95cc00b8539155f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5510803fe98660d96e9b6b9ba95cc00b8539155f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=5510803fe98660d96e9b6b9ba95cc00b8539155f", "patch": "@@ -334,10 +334,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for key in map.keys() {\n     ///     println!(\"{}\", key);\n@@ -356,10 +357,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for val in map.values() {\n     ///     println!(\"{}\", val);\n@@ -378,11 +380,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    ///\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for val in map.values_mut() {\n     ///     *val = *val + 10;\n@@ -405,10 +407,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for (key, val) in map.iter() {\n     ///     println!(\"key: {} val: {}\", key, val);\n@@ -428,10 +431,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// // Update all values\n     /// for (_, val) in map.iter_mut() {\n@@ -966,10 +970,11 @@ where\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// let mut vec: Vec<&str> = map.into_keys().collect();\n     /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n@@ -992,10 +997,11 @@ where\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// let mut vec: Vec<i32> = map.into_values().collect();\n     /// // The `IntoValues` iterator produces values in arbitrary order, so\n@@ -1202,8 +1208,9 @@ where\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.iter();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1239,8 +1246,9 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.iter_mut();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1269,8 +1277,9 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.into_iter();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1298,8 +1307,9 @@ impl<K, V> IntoIter<K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.keys();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1335,8 +1345,9 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_values = map.values();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1372,8 +1383,9 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.drain();\n /// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -1402,8 +1414,9 @@ impl<'a, K, V> Drain<'a, K, V> {\n ///\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.drain_filter(|_k, v| *v % 2 == 0);\n /// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n@@ -1426,8 +1439,9 @@ where\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_values = map.values_mut();\n /// ```\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1447,8 +1461,9 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.into_keys();\n /// ```\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -1468,8 +1483,9 @@ pub struct IntoKeys<K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.into_values();\n /// ```\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -2004,10 +2020,11 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// // Not possible with .iter()\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();"}]}