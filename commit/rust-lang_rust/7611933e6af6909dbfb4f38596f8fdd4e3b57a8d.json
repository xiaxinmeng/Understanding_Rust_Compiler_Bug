{"sha": "7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "node_id": "C_kwDOAAsO6NoAKDc2MTE5MzNlNmFmNjkwOWRiZmI0ZjM4NTk2ZjhmZGQ0ZTNiNTdhOGQ", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-12-08T19:21:08Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-12-14T20:17:52Z"}, "message": "add `-Z dump-mono-stats`\n\nThis option will output some stats from the monomorphization collection\npass to a file, to show estimated sizes from each instantiation.", "tree": {"sha": "72d90033498731f96dccacc68213339266f4107a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d90033498731f96dccacc68213339266f4107a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "html_url": "https://github.com/rust-lang/rust/commit/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f4da44a5743e88ce2bbb76f585c02e67af83a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f4da44a5743e88ce2bbb76f585c02e67af83a1", "html_url": "https://github.com/rust-lang/rust/commit/74f4da44a5743e88ce2bbb76f585c02e67af83a1"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "243d10bfa062150bf9bda530541b8f235d35ceae", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "patch": "@@ -21,3 +21,6 @@ monomorphize_large_assignments =\n     moving {$size} bytes\n     .label = value moved from here\n     .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n+\n+monomorphize_couldnt_dump_mono_stats =\n+    unexpected error occurred while dumping monomorphization stats: {$error}"}, {"sha": "f15cf54718e2b7221bbb70fb9261f36af32fd525", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "patch": "@@ -77,3 +77,9 @@ pub struct SymbolAlreadyDefined {\n     pub span: Option<Span>,\n     pub symbol: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(monomorphize_couldnt_dump_mono_stats)]\n+pub struct CouldntDumpMonoStats {\n+    pub error: String,\n+}"}, {"sha": "fef8c9d163475e19affb42c3dd73c35540adcb73", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "patch": "@@ -95,6 +95,11 @@\n mod default;\n mod merging;\n \n+use std::cmp;\n+use std::fs::{self, File};\n+use std::io::Write;\n+use std::path::{Path, PathBuf};\n+\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n use rustc_hir::def_id::DefIdSet;\n@@ -104,11 +109,12 @@ use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::SwitchWithOptPath;\n use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n use crate::collector::{self, MonoItemCollectionMode};\n-use crate::errors::{SymbolAlreadyDefined, UnknownPartitionStrategy};\n+use crate::errors::{CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownPartitionStrategy};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -411,6 +417,15 @@ fn collect_and_partition_mono_items<'tcx>(\n         })\n         .collect();\n \n+    // Output monomorphization stats per def_id\n+    if let SwitchWithOptPath::Enabled(ref path) = tcx.sess.opts.unstable_opts.dump_mono_stats {\n+        if let Err(err) =\n+            dump_mono_items_stats(tcx, &codegen_units, path, tcx.sess.opts.crate_name.as_deref())\n+        {\n+            tcx.sess.emit_fatal(CouldntDumpMonoStats { error: err.to_string() });\n+        }\n+    }\n+\n     if tcx.sess.opts.unstable_opts.print_mono_items.is_some() {\n         let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n@@ -465,6 +480,66 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n+/// Outputs stats about instantation counts and estimated size, per `MonoItem`'s\n+/// def, to a file in the given output directory.\n+fn dump_mono_items_stats<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    codegen_units: &[CodegenUnit<'tcx>],\n+    output_directory: &Option<PathBuf>,\n+    crate_name: Option<&str>,\n+) -> Result<(), Box<dyn std::error::Error>> {\n+    let output_directory = if let Some(ref directory) = output_directory {\n+        fs::create_dir_all(directory)?;\n+        directory\n+    } else {\n+        Path::new(\".\")\n+    };\n+\n+    let filename = format!(\"{}.mono_items.md\", crate_name.unwrap_or(\"unknown-crate\"));\n+    let output_path = output_directory.join(&filename);\n+    let mut file = File::create(output_path)?;\n+\n+    // Gather instantiated mono items grouped by def_id\n+    let mut items_per_def_id: FxHashMap<_, Vec<_>> = Default::default();\n+    for cgu in codegen_units {\n+        for (&mono_item, _) in cgu.items() {\n+            // Avoid variable-sized compiler-generated shims\n+            if mono_item.is_user_defined() {\n+                items_per_def_id.entry(mono_item.def_id()).or_default().push(mono_item);\n+            }\n+        }\n+    }\n+\n+    // Output stats sorted by total instantiated size, from heaviest to lightest\n+    let mut stats: Vec<_> = items_per_def_id\n+        .into_iter()\n+        .map(|(def_id, items)| {\n+            let instantiation_count = items.len();\n+            let size_estimate = items[0].size_estimate(tcx);\n+            let total_estimate = instantiation_count * size_estimate;\n+            (def_id, instantiation_count, size_estimate, total_estimate)\n+        })\n+        .collect();\n+    stats.sort_unstable_by_key(|(_, _, _, total_estimate)| cmp::Reverse(*total_estimate));\n+\n+    if !stats.is_empty() {\n+        writeln!(\n+            file,\n+            \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n+        )?;\n+        writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n+        for (def_id, instantiation_count, size_estimate, total_estimate) in stats {\n+            let item = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n+            writeln!(\n+                file,\n+                \"| {item} | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n+            )?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSet {\n     let (items, cgus) = tcx.collect_and_partition_mono_items(());\n     let mut visited = DefIdSet::default();"}, {"sha": "9e130287104f9b1edd38a3d47e3dc11701c14e7f", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611933e6af6909dbfb4f38596f8fdd4e3b57a8d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=7611933e6af6909dbfb4f38596f8fdd4e3b57a8d", "patch": "@@ -1294,6 +1294,9 @@ options! {\n         computed `block` spans (one span encompassing a block's terminator and \\\n         all statements). If `-Z instrument-coverage` is also enabled, create \\\n         an additional `.html` file showing the computed coverage spans.\"),\n+    dump_mono_stats: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [UNTRACKED],\n+        \"output statistics about monomorphization collection (format: markdown)\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n     dylib_lto: bool = (false, parse_bool, [UNTRACKED],"}]}