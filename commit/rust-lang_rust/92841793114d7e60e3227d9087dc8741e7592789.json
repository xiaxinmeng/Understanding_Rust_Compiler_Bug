{"sha": "92841793114d7e60e3227d9087dc8741e7592789", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODQxNzkzMTE0ZDdlNjBlMzIyN2Q5MDg3ZGM4NzQxZTc1OTI3ODk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-02T19:19:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-02T19:20:06Z"}, "message": "libstd: Switch off legacy modes in both core and std.", "tree": {"sha": "b3fd0dec762668159122a494927e03baf2dd0760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fd0dec762668159122a494927e03baf2dd0760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92841793114d7e60e3227d9087dc8741e7592789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92841793114d7e60e3227d9087dc8741e7592789", "html_url": "https://github.com/rust-lang/rust/commit/92841793114d7e60e3227d9087dc8741e7592789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92841793114d7e60e3227d9087dc8741e7592789/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b787a265347a6572f1826357aeae2ef219544b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b787a265347a6572f1826357aeae2ef219544b49", "html_url": "https://github.com/rust-lang/rust/commit/b787a265347a6572f1826357aeae2ef219544b49"}], "stats": {"total": 205, "additions": 108, "deletions": 97}, "files": [{"sha": "81c0ce9a5b7a456e2703355a35a5e98e279b7f40", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -144,7 +144,7 @@ fn is_uuid(id: ~str) -> bool {\n     if vec::len(parts) == 5u {\n         let mut correct = 0u;\n         for vec::eachi(parts) |i, part| {\n-            fn is_hex_digit(ch: char) -> bool {\n+            fn is_hex_digit(+ch: char) -> bool {\n                 ('0' <= ch && ch <= '9') ||\n                 ('a' <= ch && ch <= 'f') ||\n                 ('A' <= ch && ch <= 'F')\n@@ -402,7 +402,7 @@ fn need_dir(s: &Path) {\n }\n \n fn valid_pkg_name(s: &str) -> bool {\n-    fn is_valid_digit(c: char) -> bool {\n+    fn is_valid_digit(+c: char) -> bool {\n         ('0' <= c && c <= '9') ||\n         ('a' <= c && c <= 'z') ||\n         ('A' <= c && c <= 'Z') ||"}, {"sha": "cd312362d6a4fcd96f645a434509bf5af319ab4b", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -221,7 +221,7 @@ fn under(n: uint, it: fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-fn as_str(f: fn@(io::Writer)) -> ~str {\n+fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n "}, {"sha": "21f5861b89e7d9dab438c547b7554a18ca489238", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -3,7 +3,7 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     fn forget<T>(-x: T);\n-    fn reinterpret_cast<T, U>(e: T) -> U;\n+    fn reinterpret_cast<T, U>(&&e: T) -> U;\n }\n \n /// Casts the value at `src` to U. The two types must have the same length."}, {"sha": "ff9f9498a9855cfd7b14eced98aa81f8f8f4a463", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -33,7 +33,7 @@ will once again be the preferred module for intertask communication.\n */\n \n // NB: transitionary, de-mode-ing.\n-#[forbid(deprecated_mode)];\n+#[warn(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use either::Either;\n@@ -166,7 +166,7 @@ fn as_raw_port<T: Send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n  * Constructs a channel. The channel is bound to the port used to\n  * construct it.\n  */\n-pub fn Chan<T: Send>(p: Port<T>) -> Chan<T> {\n+pub fn Chan<T: Send>(&&p: Port<T>) -> Chan<T> {\n     Chan_(rustrt::get_port_id((**p).po))\n }\n "}, {"sha": "6cada58fa0282434a9308f1f05669a94663476da", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -36,7 +36,6 @@ Implicitly, all crates behave as if they included the following prologue:\n // Don't link to core. We are core.\n #[no_core];\n \n-#[legacy_modes];\n #[legacy_exports];\n \n #[warn(deprecated_mode)];"}, {"sha": "1cf4fbab6c97499cee631fc85085f3ad067b8739", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -35,7 +35,7 @@ extern mod rustrt {\n     fn rust_getcwd() -> ~str;\n     fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n     fn rust_path_exists(path: *libc::c_char) -> c_int;\n-    fn rust_list_files(path: ~str) -> ~[~str];\n+    fn rust_list_files2(&&path: ~str) -> ~[~str];\n     fn rust_process_wait(handle: c_int) -> c_int;\n     fn last_os_error() -> ~str;\n     fn rust_set_exit_status(code: libc::intptr_t);\n@@ -582,7 +582,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n     #[cfg(windows)]\n     fn star(p: &Path) -> Path { p.push(\"*\") }\n \n-    do rustrt::rust_list_files(star(p).to_str()).filter |filename| {\n+    do rustrt::rust_list_files2(star(p).to_str()).filter |filename| {\n         *filename != ~\".\" && *filename != ~\"..\"\n     }\n }"}, {"sha": "fad7eddd2d8dcf43450998e7a89365e655acaec3", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -21,7 +21,7 @@ extern mod libc_ {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    fn addr_of<T>(val: T) -> *T;\n+    fn addr_of<T>(&&val: T) -> *T;\n }\n \n /// Get an unsafe pointer to a value"}, {"sha": "f6b7dfa568c28f2ca671f14ec8ce75043fe33b8d", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -11,7 +11,7 @@ enum rctx {}\n extern mod rustrt {\n     fn rand_seed() -> ~[u8];\n     fn rand_new() -> *rctx;\n-    fn rand_new_seeded(seed: ~[u8]) -> *rctx;\n+    fn rand_new_seeded2(&&seed: ~[u8]) -> *rctx;\n     fn rand_next(c: *rctx) -> u32;\n     fn rand_free(c: *rctx);\n }\n@@ -276,7 +276,7 @@ pub fn Rng() -> Rng {\n  * length.\n  */\n pub fn seeded_rng(seed: &~[u8]) -> Rng {\n-    @RandRes(rustrt::rand_new_seeded(*seed)) as Rng\n+    @RandRes(rustrt::rand_new_seeded2(*seed)) as Rng\n }\n \n type XorShiftState = {"}, {"sha": "d0f8de136e2fb259c8f84780deb5818fbf3e64ca", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -1,7 +1,8 @@\n #[doc(hidden)]; // FIXME #3538\n \n // NB: transitionary, de-mode-ing.\n-#[forbid(deprecated_mode)];\n+// XXX: Can't do this because frame_address needs a deprecated mode.\n+//#[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use cast::reinterpret_cast;\n@@ -74,7 +75,7 @@ fn breakpoint() {\n     rustrt::rust_dbg_breakpoint()\n }\n \n-fn frame_address(f: fn(*u8)) {\n+fn frame_address(f: fn(++x: *u8)) {\n     rusti::frame_address(f)\n }\n \n@@ -86,5 +87,5 @@ extern mod rustrt {\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     #[legacy_exports];\n-    fn frame_address(f: fn(*u8));\n+    fn frame_address(f: fn(++x: *u8));\n }"}, {"sha": "7c5b7929f8494c96b7f732658e991746d110706d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -588,11 +588,11 @@ impl EbmlDeserializer: serialization::Deserializer {\n \n #[test]\n fn test_option_int() {\n-    fn serialize_1<S: serialization::Serializer>(s: S, v: int) {\n+    fn serialize_1<S: serialization::Serializer>(&&s: S, v: int) {\n         s.emit_i64(v as i64);\n     }\n \n-    fn serialize_0<S: serialization::Serializer>(s: S, v: Option<int>) {\n+    fn serialize_0<S: serialization::Serializer>(&&s: S, v: Option<int>) {\n         do s.emit_enum(~\"core::option::t\") {\n             match v {\n               None => s.emit_enum_variant(\n@@ -606,11 +606,11 @@ fn test_option_int() {\n         }\n     }\n \n-    fn deserialize_1<S: serialization::Deserializer>(s: S) -> int {\n+    fn deserialize_1<S: serialization::Deserializer>(&&s: S) -> int {\n         s.read_i64() as int\n     }\n \n-    fn deserialize_0<S: serialization::Deserializer>(s: S) -> Option<int> {\n+    fn deserialize_0<S: serialization::Deserializer>(&&s: S) -> Option<int> {\n         do s.read_enum(~\"core::option::t\") {\n             do s.read_enum_variant |i| {\n                 match i {"}, {"sha": "e9067bc64042d8ee0ff94e415f2d30b45c512201", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -81,7 +81,7 @@ trait Deserializer {\n //\n // In some cases, these should eventually be coded as traits.\n \n-fn emit_from_vec<S: Serializer, T>(s: S, v: ~[T], f: fn(T)) {\n+fn emit_from_vec<S: Serializer, T>(&&s: S, &&v: ~[T], f: fn(&&x: T)) {\n     do s.emit_vec(vec::len(v)) {\n         for vec::eachi(v) |i,e| {\n             do s.emit_vec_elt(i) {\n@@ -91,7 +91,7 @@ fn emit_from_vec<S: Serializer, T>(s: S, v: ~[T], f: fn(T)) {\n     }\n }\n \n-fn read_to_vec<D: Deserializer, T: Copy>(d: D, f: fn() -> T) -> ~[T] {\n+fn read_to_vec<D: Deserializer, T: Copy>(&&d: D, f: fn() -> T) -> ~[T] {\n     do d.read_vec |len| {\n         do vec::from_fn(len) |i| {\n             d.read_vec_elt(i, || f())\n@@ -100,11 +100,11 @@ fn read_to_vec<D: Deserializer, T: Copy>(d: D, f: fn() -> T) -> ~[T] {\n }\n \n trait SerializerHelpers {\n-    fn emit_from_vec<T>(v: ~[T], f: fn(T));\n+    fn emit_from_vec<T>(&&v: ~[T], f: fn(&&x: T));\n }\n \n impl<S: Serializer> S: SerializerHelpers {\n-    fn emit_from_vec<T>(v: ~[T], f: fn(T)) {\n+    fn emit_from_vec<T>(&&v: ~[T], f: fn(&&x: T)) {\n         emit_from_vec(self, v, f)\n     }\n }\n@@ -119,127 +119,127 @@ impl<D: Deserializer> D: DeserializerHelpers {\n     }\n }\n \n-fn serialize_uint<S: Serializer>(s: S, v: uint) {\n+fn serialize_uint<S: Serializer>(&&s: S, v: uint) {\n     s.emit_uint(v);\n }\n \n-fn deserialize_uint<D: Deserializer>(d: D) -> uint {\n+fn deserialize_uint<D: Deserializer>(&&d: D) -> uint {\n     d.read_uint()\n }\n \n-fn serialize_u8<S: Serializer>(s: S, v: u8) {\n+fn serialize_u8<S: Serializer>(&&s: S, v: u8) {\n     s.emit_u8(v);\n }\n \n-fn deserialize_u8<D: Deserializer>(d: D) -> u8 {\n+fn deserialize_u8<D: Deserializer>(&&d: D) -> u8 {\n     d.read_u8()\n }\n \n-fn serialize_u16<S: Serializer>(s: S, v: u16) {\n+fn serialize_u16<S: Serializer>(&&s: S, v: u16) {\n     s.emit_u16(v);\n }\n \n-fn deserialize_u16<D: Deserializer>(d: D) -> u16 {\n+fn deserialize_u16<D: Deserializer>(&&d: D) -> u16 {\n     d.read_u16()\n }\n \n-fn serialize_u32<S: Serializer>(s: S, v: u32) {\n+fn serialize_u32<S: Serializer>(&&s: S, v: u32) {\n     s.emit_u32(v);\n }\n \n-fn deserialize_u32<D: Deserializer>(d: D) -> u32 {\n+fn deserialize_u32<D: Deserializer>(&&d: D) -> u32 {\n     d.read_u32()\n }\n \n-fn serialize_u64<S: Serializer>(s: S, v: u64) {\n+fn serialize_u64<S: Serializer>(&&s: S, v: u64) {\n     s.emit_u64(v);\n }\n \n-fn deserialize_u64<D: Deserializer>(d: D) -> u64 {\n+fn deserialize_u64<D: Deserializer>(&&d: D) -> u64 {\n     d.read_u64()\n }\n \n-fn serialize_int<S: Serializer>(s: S, v: int) {\n+fn serialize_int<S: Serializer>(&&s: S, v: int) {\n     s.emit_int(v);\n }\n \n-fn deserialize_int<D: Deserializer>(d: D) -> int {\n+fn deserialize_int<D: Deserializer>(&&d: D) -> int {\n     d.read_int()\n }\n \n-fn serialize_i8<S: Serializer>(s: S, v: i8) {\n+fn serialize_i8<S: Serializer>(&&s: S, v: i8) {\n     s.emit_i8(v);\n }\n \n-fn deserialize_i8<D: Deserializer>(d: D) -> i8 {\n+fn deserialize_i8<D: Deserializer>(&&d: D) -> i8 {\n     d.read_i8()\n }\n \n-fn serialize_i16<S: Serializer>(s: S, v: i16) {\n+fn serialize_i16<S: Serializer>(&&s: S, v: i16) {\n     s.emit_i16(v);\n }\n \n-fn deserialize_i16<D: Deserializer>(d: D) -> i16 {\n+fn deserialize_i16<D: Deserializer>(&&d: D) -> i16 {\n     d.read_i16()\n }\n \n-fn serialize_i32<S: Serializer>(s: S, v: i32) {\n+fn serialize_i32<S: Serializer>(&&s: S, v: i32) {\n     s.emit_i32(v);\n }\n \n-fn deserialize_i32<D: Deserializer>(d: D) -> i32 {\n+fn deserialize_i32<D: Deserializer>(&&d: D) -> i32 {\n     d.read_i32()\n }\n \n-fn serialize_i64<S: Serializer>(s: S, v: i64) {\n+fn serialize_i64<S: Serializer>(&&s: S, v: i64) {\n     s.emit_i64(v);\n }\n \n-fn deserialize_i64<D: Deserializer>(d: D) -> i64 {\n+fn deserialize_i64<D: Deserializer>(&&d: D) -> i64 {\n     d.read_i64()\n }\n \n-fn serialize_str<S: Serializer>(s: S, v: &str) {\n+fn serialize_str<S: Serializer>(&&s: S, v: &str) {\n     s.emit_str(v);\n }\n \n-fn deserialize_str<D: Deserializer>(d: D) -> ~str {\n+fn deserialize_str<D: Deserializer>(&&d: D) -> ~str {\n     d.read_str()\n }\n \n-fn serialize_float<S: Serializer>(s: S, v: float) {\n+fn serialize_float<S: Serializer>(&&s: S, v: float) {\n     s.emit_float(v);\n }\n \n-fn deserialize_float<D: Deserializer>(d: D) -> float {\n+fn deserialize_float<D: Deserializer>(&&d: D) -> float {\n     d.read_float()\n }\n \n-fn serialize_f32<S: Serializer>(s: S, v: f32) {\n+fn serialize_f32<S: Serializer>(&&s: S, v: f32) {\n     s.emit_f32(v);\n }\n \n-fn deserialize_f32<D: Deserializer>(d: D) -> f32 {\n+fn deserialize_f32<D: Deserializer>(&&d: D) -> f32 {\n     d.read_f32()\n }\n \n-fn serialize_f64<S: Serializer>(s: S, v: f64) {\n+fn serialize_f64<S: Serializer>(&&s: S, v: f64) {\n     s.emit_f64(v);\n }\n \n-fn deserialize_f64<D: Deserializer>(d: D) -> f64 {\n+fn deserialize_f64<D: Deserializer>(&&d: D) -> f64 {\n     d.read_f64()\n }\n \n-fn serialize_bool<S: Serializer>(s: S, v: bool) {\n+fn serialize_bool<S: Serializer>(&&s: S, v: bool) {\n     s.emit_bool(v);\n }\n \n-fn deserialize_bool<D: Deserializer>(d: D) -> bool {\n+fn deserialize_bool<D: Deserializer>(&&d: D) -> bool {\n     d.read_bool()\n }\n \n-fn serialize_Option<S: Serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n+fn serialize_Option<S: Serializer,T>(&&s: S, &&v: Option<T>, st: fn(&&x: T)) {\n     do s.emit_enum(~\"option\") {\n         match v {\n           None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n@@ -254,7 +254,7 @@ fn serialize_Option<S: Serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n     }\n }\n \n-fn deserialize_Option<D: Deserializer,T: Copy>(d: D, st: fn() -> T)\n+fn deserialize_Option<D: Deserializer,T: Copy>(&&d: D, st: fn() -> T)\n     -> Option<T> {\n     do d.read_enum(~\"option\") {\n         do d.read_enum_variant |i| {"}, {"sha": "aa26c4af29cafcc49d27743f9899dfeac0e6ef48", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -18,7 +18,6 @@ not required in or otherwise suitable for the core library.\n \n #[no_core];\n \n-#[legacy_modes];\n #[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];"}, {"sha": "e17b52fb27d176d30f317680a9976851ae9809dd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -69,7 +69,7 @@ impl ident: cmp::Eq {\n }\n \n impl ident: to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         self.repr.iter_bytes(lsb0, f)\n     }\n }\n@@ -328,7 +328,7 @@ enum binding_mode {\n }\n \n impl binding_mode : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           bind_by_value => 0u8.iter_bytes(lsb0, f),\n \n@@ -402,7 +402,7 @@ enum pat_ {\n enum mutability { m_mutbl, m_imm, m_const, }\n \n impl mutability : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -541,7 +541,7 @@ enum inferable<T> {\n }\n \n impl<T: to_bytes::IterBytes> inferable<T> : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           expl(ref t) =>\n           to_bytes::iter_bytes_2(&0u8, t, lsb0, f),\n@@ -577,7 +577,7 @@ impl<T:cmp::Eq> inferable<T> : cmp::Eq {\n enum rmode { by_ref, by_val, by_mutbl_ref, by_move, by_copy }\n \n impl rmode : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -937,7 +937,7 @@ enum trait_method {\n enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n impl int_ty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -966,7 +966,7 @@ impl int_ty : cmp::Eq {\n enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n impl uint_ty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -993,7 +993,7 @@ impl uint_ty : cmp::Eq {\n enum float_ty { ty_f, ty_f32, ty_f64, }\n \n impl float_ty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -1102,7 +1102,7 @@ impl ty : cmp::Eq {\n }\n \n impl ty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.span.lo, &self.span.hi, lsb0, f);\n     }\n }\n@@ -1126,7 +1126,7 @@ enum purity {\n }\n \n impl purity : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -1146,7 +1146,7 @@ enum ret_style {\n }\n \n impl ret_style : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -1443,7 +1443,7 @@ enum item_ {\n enum class_mutability { class_mutable, class_immutable }\n \n impl class_mutability : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }"}, {"sha": "e8099de246cca59c2a4679051ef1b70bc73e33e3", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -254,7 +254,7 @@ pure fn is_call_expr(e: @expr) -> bool {\n // This makes def_id hashable\n impl def_id : core::to_bytes::IterBytes {\n     #[inline(always)]\n-    pure fn iter_bytes(lsb0: bool, f: core::to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: core::to_bytes::Cb) {\n         core::to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f);\n     }\n }"}, {"sha": "782535f5c2b2c50c097e42236067845e18545aa1", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -36,7 +36,7 @@ impl ObsoleteSyntax : cmp::Eq {\n \n impl ObsoleteSyntax: to_bytes::IterBytes {\n     #[inline(always)]\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as uint).iter_bytes(lsb0, f);\n     }\n }"}, {"sha": "6f985601f8bd878e571ca90edc783fcb8ba77b81", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -180,6 +180,11 @@ rand_new_seeded(rust_vec_box* seed) {\n     return rctx;\n }\n \n+extern \"C\" CDECL void *\n+rand_new_seeded2(rust_vec_box** seed) {\n+    return rand_new_seeded(*seed);\n+}\n+\n extern \"C\" CDECL size_t\n rand_next(randctx *rctx) {\n     return isaac_rand(rctx);\n@@ -371,6 +376,11 @@ rust_list_files(rust_str *path) {\n   return vec;\n }\n \n+extern \"C\" CDECL rust_vec_box*\n+rust_list_files2(rust_str **path) {\n+    return rust_list_files(*path);\n+}\n+\n extern \"C\" CDECL int\n rust_path_is_dir(char *path) {\n     struct stat buf;"}, {"sha": "551378a3d6cb6cbfde363bca365d40d5aaff20c8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -27,6 +27,7 @@ rust_port_select\n rand_free\n rand_new\n rand_new_seeded\n+rand_new_seeded2\n rand_next\n rand_seed\n rust_get_sched_id\n@@ -40,6 +41,7 @@ rust_get_stdin\n rust_get_stdout\n rust_get_stderr\n rust_list_files\n+rust_list_files2\n rust_log_console_on\n rust_log_console_off\n rust_port_begin_detach"}, {"sha": "414890cbd7c643e49b66997b0751e3c9d2c370e1", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -415,7 +415,7 @@ impl root_map_key : cmp::Eq {\n }\n \n impl root_map_key : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.id, &self.derefs, lsb0, f);\n     }\n }"}, {"sha": "6768f3e71a0d319fc0070cc1747e66d813b65cd8", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -1142,7 +1142,7 @@ impl mono_id_ : cmp::Eq {\n }\n \n impl mono_param_id : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           mono_precise(t, mids) =>\n           to_bytes::iter_bytes_3(&0u8, &ty::type_id(t), &mids, lsb0, f),\n@@ -1156,7 +1156,7 @@ impl mono_param_id : to_bytes::IterBytes {\n }\n \n impl mono_id_ : core::to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f);\n     }\n }"}, {"sha": "241fa5e53afb29bd828bc8d5ffd47f33c9909507", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -146,7 +146,7 @@ impl DatumMode: cmp::Eq {\n }\n \n impl DatumMode: to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as uint).iter_bytes(lsb0, f)\n     }\n }"}, {"sha": "a96388e9d771177fac30cbe602c08cc576bd3a66", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -248,7 +248,7 @@ impl creader_cache_key : cmp::Eq {\n }\n \n impl creader_cache_key : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_3(&self.cnum, &self.pos, &self.len, lsb0, f);\n     }\n }\n@@ -263,7 +263,7 @@ impl intern_key : cmp::Eq {\n }\n \n impl intern_key : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.sty, &self.o_def_id, lsb0, f);\n     }\n }\n@@ -406,7 +406,7 @@ enum closure_kind {\n }\n \n impl closure_kind : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (self as u8).iter_bytes(lsb0, f)\n     }\n }\n@@ -424,7 +424,7 @@ enum fn_proto {\n }\n \n impl fn_proto : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           proto_bare =>\n           0u8.iter_bytes(lsb0, f),\n@@ -502,7 +502,7 @@ impl param_ty : cmp::Eq {\n }\n \n impl param_ty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.idx, &self.def_id, lsb0, f)\n     }\n }\n@@ -676,7 +676,7 @@ enum InferTy {\n }\n \n impl InferTy : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           TyVar(ref tv) => to_bytes::iter_bytes_2(&0u8, tv, lsb0, f),\n           IntVar(ref iv) => to_bytes::iter_bytes_2(&1u8, iv, lsb0, f)\n@@ -685,7 +685,7 @@ impl InferTy : to_bytes::IterBytes {\n }\n \n impl param_bound : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           bound_copy => 0u8.iter_bytes(lsb0, f),\n           bound_owned => 1u8.iter_bytes(lsb0, f),\n@@ -749,25 +749,25 @@ impl purity: purity_to_str {\n }\n \n impl RegionVid : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (*self).iter_bytes(lsb0, f)\n     }\n }\n \n impl TyVid : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (*self).iter_bytes(lsb0, f)\n     }\n }\n \n impl IntVid : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (*self).iter_bytes(lsb0, f)\n     }\n }\n \n impl FnVid : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         (*self).iter_bytes(lsb0, f)\n     }\n }\n@@ -2505,7 +2505,7 @@ fn index_sty(cx: ctxt, sty: &sty) -> Option<mt> {\n }\n \n impl bound_region : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           ty::br_self => 0u8.iter_bytes(lsb0, f),\n \n@@ -2522,7 +2522,7 @@ impl bound_region : to_bytes::IterBytes {\n }\n \n impl region : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           re_bound(ref br) =>\n           to_bytes::iter_bytes_2(&0u8, br, lsb0, f),\n@@ -2542,7 +2542,7 @@ impl region : to_bytes::IterBytes {\n }\n \n impl vstore : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           vstore_fixed(ref u) =>\n           to_bytes::iter_bytes_2(&0u8, u, lsb0, f),\n@@ -2557,36 +2557,36 @@ impl vstore : to_bytes::IterBytes {\n }\n \n impl substs : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_3(&self.self_r,\n                                  &self.self_ty,\n                                  &self.tps, lsb0, f)\n     }\n }\n \n impl mt : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_2(&self.ty,\n                                  &self.mutbl, lsb0, f)\n     }\n }\n \n impl field : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_2(&self.ident,\n                                  &self.mt, lsb0, f)\n     }\n }\n \n impl arg : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_2(&self.mode,\n                                  &self.ty, lsb0, f)\n     }\n }\n \n impl sty : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           ty_nil => 0u8.iter_bytes(lsb0, f),\n           ty_bool => 1u8.iter_bytes(lsb0, f),"}, {"sha": "8bbdab74d230ef81b44bede225fb189daa3f6a61", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -350,7 +350,7 @@ impl Constraint : cmp::Eq {\n }\n \n impl Constraint : to_bytes::IterBytes {\n-   pure  fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+   pure  fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         match self {\n           ConstrainVarSubVar(ref v0, ref v1) =>\n           to_bytes::iter_bytes_3(&0u8, v0, v1, lsb0, f),\n@@ -377,7 +377,7 @@ impl TwoRegions : cmp::Eq {\n }\n \n impl TwoRegions : to_bytes::IterBytes {\n-    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+    pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.a, &self.b, lsb0, f)\n     }\n }"}, {"sha": "a34fcc89c048ce497a3605db7d50c2f29b8f09e8", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -251,7 +251,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         colors = do par::mapi_factory(*color_vec) {\n             let colors = arc::clone(&color);\n             let graph = arc::clone(&graph);\n-            fn~(i: uint, c: color) -> color {\n+            fn~(+i: uint, +c: color) -> color {\n                 let c : color = c;\n                 let colors = arc::get(&colors);\n                 let graph = arc::get(&graph);"}, {"sha": "ee38b957b0cb00d19f416a9515ecc5d10a7ae391", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92841793114d7e60e3227d9087dc8741e7592789/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92841793114d7e60e3227d9087dc8741e7592789/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=92841793114d7e60e3227d9087dc8741e7592789", "patch": "@@ -94,7 +94,7 @@ type devnull = {dn: int};\n \n impl devnull: io::Writer {\n     fn write(_b: &[const u8]) {}\n-    fn seek(_i: int, _s: io::SeekStyle) {}\n+    fn seek(+_i: int, +_s: io::SeekStyle) {}\n     fn tell() -> uint {0_u}\n     fn flush() -> int {0}\n     fn get_type() -> io::WriterType { io::File }"}]}