{"sha": "d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjhhMGI1ZGZkZGZlNDQzZDlkYjFmMWRhMTgzNDhkYmNlYjBlNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T20:03:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T20:03:28Z"}, "message": "Auto merge of #63213 - varkor:itemkind-tyalias, r=Centril\n\nRename `ItemKind::Ty` to `ItemKind::TyAlias`\n\nThe current name is not entirely clear without context and `TyAlias` is consistent with `ItemKind::TraitAlias`.", "tree": {"sha": "d878818a562a332fbb4f63b954c69bcb0621c72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d878818a562a332fbb4f63b954c69bcb0621c72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "html_url": "https://github.com/rust-lang/rust/commit/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01b9f803b59f170f5dabaaa8aedc96abe45bfea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01b9f803b59f170f5dabaaa8aedc96abe45bfea", "html_url": "https://github.com/rust-lang/rust/commit/f01b9f803b59f170f5dabaaa8aedc96abe45bfea"}, {"sha": "fd819d02d7bf4f93d0b06849b9f0984a85281956", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd819d02d7bf4f93d0b06849b9f0984a85281956", "html_url": "https://github.com/rust-lang/rust/commit/fd819d02d7bf4f93d0b06849b9f0984a85281956"}], "stats": {"total": 179, "additions": 90, "deletions": 89}, "files": [{"sha": "22124d4ee4120555b07113eae738ad54338a173c", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -26,7 +26,7 @@ pub(crate) enum Target {\n     Mod,\n     ForeignMod,\n     GlobalAsm,\n-    Ty,\n+    TyAlias,\n     OpaqueTy,\n     Enum,\n     Struct,\n@@ -50,7 +50,7 @@ impl Display for Target {\n             Target::Mod => \"module\",\n             Target::ForeignMod => \"foreign module\",\n             Target::GlobalAsm => \"global asm\",\n-            Target::Ty => \"type alias\",\n+            Target::TyAlias => \"type alias\",\n             Target::OpaqueTy => \"opaque type\",\n             Target::Enum => \"enum\",\n             Target::Struct => \"struct\",\n@@ -75,7 +75,7 @@ impl Target {\n             hir::ItemKind::Mod(..) => Target::Mod,\n             hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n-            hir::ItemKind::Ty(..) => Target::Ty,\n+            hir::ItemKind::TyAlias(..) => Target::TyAlias,\n             hir::ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n             hir::ItemKind::Enum(..) => Target::Enum,\n             hir::ItemKind::Struct(..) => Target::Struct,"}, {"sha": "b5c760bc9a08e5a7ace2ad4d0974eaeb82979f6a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -500,7 +500,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);\n         }\n-        ItemKind::Ty(ref ty, ref generics) => {\n+        ItemKind::TyAlias(ref ty, ref generics) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_ty(ty);\n             visitor.visit_generics(generics)\n@@ -926,7 +926,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                              impl_item.span,\n                              impl_item.hir_id);\n         }\n-        ImplItemKind::Type(ref ty) => {\n+        ImplItemKind::TyAlias(ref ty) => {\n             visitor.visit_id(impl_item.hir_id);\n             visitor.visit_ty(ty);\n         }"}, {"sha": "429eb6b31025f4bce8e18229f9fb35dcf1747b79", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -486,7 +486,7 @@ impl<'a> LoweringContext<'a> {\n                     ItemKind::Struct(_, ref generics)\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::Ty(_, ref generics)\n+                    | ItemKind::TyAlias(_, ref generics)\n                     | ItemKind::OpaqueTy(_, ref generics)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n@@ -3440,7 +3440,7 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::Ty(ref t, ref generics) => hir::ItemKind::Ty(\n+            ItemKind::TyAlias(ref t, ref generics) => hir::ItemKind::TyAlias(\n                 self.lower_ty(t, ImplTraitContext::disallowed()),\n                 self.lower_generics(generics, ImplTraitContext::disallowed()),\n             ),\n@@ -3914,9 +3914,9 @@ impl<'a> LoweringContext<'a> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::Type(ref ty) => (\n+            ImplItemKind::TyAlias(ref ty) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::Type(self.lower_ty(ty, ImplTraitContext::disallowed())),\n+                hir::ImplItemKind::TyAlias(self.lower_ty(ty, ImplTraitContext::disallowed())),\n             ),\n             ImplItemKind::OpaqueTy(ref bounds) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n@@ -3950,7 +3950,7 @@ impl<'a> LoweringContext<'a> {\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match i.node {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::Type(..) => hir::AssocItemKind::Type,\n+                ImplItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n                 ImplItemKind::OpaqueTy(..) => hir::AssocItemKind::OpaqueTy,\n                 ImplItemKind::Method(ref sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),"}, {"sha": "2964b130ddd313c344f8ffd36cbc0c3d227d3e5b", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -93,7 +93,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n-            ItemKind::Ty(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n+            ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Fn(\n                 ref decl,\n                 ref header,\n@@ -222,7 +222,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.as_interned_str()),\n-            ImplItemKind::Type(..) |\n+            ImplItemKind::TyAlias(..) |\n             ImplItemKind::OpaqueTy(..) => {\n                 DefPathData::TypeNs(ii.ident.as_interned_str())\n             },"}, {"sha": "0d477ae79682285628ad01c08e9424152f849af7", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -302,7 +302,7 @@ impl<'hir> Map<'hir> {\n                     ItemKind::Fn(..) => DefKind::Fn,\n                     ItemKind::Mod(..) => DefKind::Mod,\n                     ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n-                    ItemKind::Ty(..) => DefKind::TyAlias,\n+                    ItemKind::TyAlias(..) => DefKind::TyAlias,\n                     ItemKind::Enum(..) => DefKind::Enum,\n                     ItemKind::Struct(..) => DefKind::Struct,\n                     ItemKind::Union(..) => DefKind::Union,\n@@ -333,7 +333,7 @@ impl<'hir> Map<'hir> {\n                 match item.node {\n                     ImplItemKind::Const(..) => DefKind::AssocConst,\n                     ImplItemKind::Method(..) => DefKind::Method,\n-                    ImplItemKind::Type(..) => DefKind::AssocTy,\n+                    ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                     ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n                 }\n             }\n@@ -576,7 +576,7 @@ impl<'hir> Map<'hir> {\n                 Node::Item(ref item) => {\n                     match item.node {\n                         ItemKind::Fn(_, _, ref generics, _) |\n-                        ItemKind::Ty(_, ref generics) |\n+                        ItemKind::TyAlias(_, ref generics) |\n                         ItemKind::Enum(_, ref generics) |\n                         ItemKind::Struct(_, ref generics) |\n                         ItemKind::Union(_, ref generics) |\n@@ -1269,7 +1269,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n                 ItemKind::Mod(..) => \"mod\",\n                 ItemKind::ForeignMod(..) => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n-                ItemKind::Ty(..) => \"ty\",\n+                ItemKind::TyAlias(..) => \"ty\",\n                 ItemKind::OpaqueTy(..) => \"opaque type\",\n                 ItemKind::Enum(..) => \"enum\",\n                 ItemKind::Struct(..) => \"struct\",\n@@ -1291,7 +1291,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n                 ImplItemKind::Method(..) => {\n                     format!(\"method {} in {}{}\", ii.ident, path_str(), id_str)\n                 }\n-                ImplItemKind::Type(_) => {\n+                ImplItemKind::TyAlias(_) => {\n                     format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n                 }\n                 ImplItemKind::OpaqueTy(_) => {"}, {"sha": "b8d8394a02cee42d27fcc25363d0a374d0d396a7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -1837,7 +1837,7 @@ pub enum ImplItemKind {\n     /// A method implementation with the given signature and body.\n     Method(MethodSig, BodyId),\n     /// An associated type.\n-    Type(P<Ty>),\n+    TyAlias(P<Ty>),\n     /// An associated `type = impl Trait`.\n     OpaqueTy(GenericBounds),\n }\n@@ -2420,7 +2420,7 @@ pub enum ItemKind {\n     /// Module-level inline assembly (from global_asm!)\n     GlobalAsm(P<GlobalAsm>),\n     /// A type alias, e.g., `type Foo = Bar<u8>`\n-    Ty(P<Ty>, Generics),\n+    TyAlias(P<Ty>, Generics),\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`\n     OpaqueTy(OpaqueTy),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`\n@@ -2455,7 +2455,7 @@ impl ItemKind {\n             ItemKind::Mod(..) => \"module\",\n             ItemKind::ForeignMod(..) => \"foreign module\",\n             ItemKind::GlobalAsm(..) => \"global asm\",\n-            ItemKind::Ty(..) => \"type alias\",\n+            ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::OpaqueTy(..) => \"opaque type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n@@ -2478,7 +2478,7 @@ impl ItemKind {\n     pub fn generics(&self) -> Option<&Generics> {\n         Some(match *self {\n             ItemKind::Fn(_, _, ref generics, _) |\n-            ItemKind::Ty(_, ref generics) |\n+            ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(OpaqueTy { ref generics, impl_trait_fn: None, .. }) |\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |"}, {"sha": "11ba512053084f764a6f20758edba483d027390a", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -570,7 +570,7 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.as_str().to_string());\n                 self.end()\n             }\n-            hir::ItemKind::Ty(ref ty, ref generics) => {\n+            hir::ItemKind::TyAlias(ref ty, ref generics) => {\n                 self.print_item_type(item, &generics, |state| {\n                     state.word_space(\"=\");\n                     state.print_type(&ty);\n@@ -908,7 +908,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ImplItemKind::Type(ref ty) => {\n+            hir::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n             hir::ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "8d0ead5c8fe90e574c7c52b0f2488488a00587df", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             hir::ImplItemKind::Method(..) => \"method body\",\n             hir::ImplItemKind::Const(..)\n             | hir::ImplItemKind::OpaqueTy(..)\n-            | hir::ImplItemKind::Type(..) => \"associated item\",\n+            | hir::ImplItemKind::TyAlias(..) => \"associated item\",\n         }\n     }\n "}, {"sha": "55fa261f1ed57976236beb0c9a4600a37341eee3", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -480,7 +480,7 @@ impl DeadVisitor<'tcx> {\n             hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n             | hir::ItemKind::Fn(..)\n-            | hir::ItemKind::Ty(..)\n+            | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Union(..) => true,\n@@ -640,7 +640,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::OpaqueTy(..) |\n-            hir::ImplItemKind::Type(..) => {}\n+            hir::ImplItemKind::TyAlias(..) => {}\n         }\n     }\n "}, {"sha": "76d8a6738f087c9c9b878f32feb868869e03d941", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         }\n                     }\n                     hir::ImplItemKind::OpaqueTy(..) |\n-                    hir::ImplItemKind::Type(_) => false,\n+                    hir::ImplItemKind::TyAlias(_) => false,\n                 }\n             }\n             Some(_) => false,\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemKind::ExternCrate(_) |\n                     hir::ItemKind::Use(..) |\n                     hir::ItemKind::OpaqueTy(..) |\n-                    hir::ItemKind::Ty(..) |\n+                    hir::ItemKind::TyAlias(..) |\n                     hir::ItemKind::Static(..) |\n                     hir::ItemKind::Mod(..) |\n                     hir::ItemKind::ForeignMod(..) |\n@@ -302,7 +302,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         }\n                     }\n                     hir::ImplItemKind::OpaqueTy(..) |\n-                    hir::ImplItemKind::Type(_) => {}\n+                    hir::ImplItemKind::TyAlias(_) => {}\n                 }\n             }\n             Node::Expr(&hir::Expr { node: hir::ExprKind::Closure(.., body, _, _), .. }) => {"}, {"sha": "f8f01f79e1db4d8a40e7e525c2fb96cef5d09f02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // items. Doing anything on this node is irrelevant, as we currently don't need\n                 // it.\n             }\n-            hir::ItemKind::Ty(_, ref generics)\n+            hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                 impl_trait_fn: None,\n                 ref generics,\n@@ -828,7 +828,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     |this| intravisit::walk_impl_item(this, impl_item),\n                 )\n             }\n-            Type(ref ty) => {\n+            TyAlias(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n                 let mut non_lifetime_count = 0;\n@@ -1259,7 +1259,7 @@ fn compute_object_lifetime_defaults(tcx: TyCtxt<'_>) -> HirIdMap<Vec<ObjectLifet\n                 impl_trait_fn: None,\n                 ..\n             })\n-            | hir::ItemKind::Ty(_, ref generics)\n+            | hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Trait(_, _, ref generics, ..) => {\n                 let result = object_lifetime_defaults_for_item(tcx, generics);\n "}, {"sha": "e569a9bc7df40025d23a8698346c3effc029bbda", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -354,7 +354,7 @@ impl DirtyCleanVisitor<'tcx> {\n                     HirItem::GlobalAsm(..) => (\"ItemGlobalAsm\", LABELS_HIR_ONLY),\n \n                     // A type alias, e.g., `type Foo = Bar<u8>`\n-                    HirItem::Ty(..) => (\"ItemTy\", LABELS_HIR_ONLY),\n+                    HirItem::TyAlias(..) => (\"ItemTy\", LABELS_HIR_ONLY),\n \n                     // An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`\n                     HirItem::Enum(..) => (\"ItemEnum\", LABELS_ADT),\n@@ -405,7 +405,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 match item.node {\n                     ImplItemKind::Method(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                     ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n-                    ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n+                    ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                     ImplItemKind::OpaqueTy(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                 }\n             },"}, {"sha": "c9153f285fff71634fa62bed35d5326d2af7eede", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Fn(..) |\n-            hir::ItemKind::Ty(..) |\n+            hir::ItemKind::TyAlias(..) |\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |\n             hir::ItemKind::Union(..) => {\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 }\n                 \"a trait\"\n             }\n-            hir::ItemKind::Ty(..) => \"a type alias\",\n+            hir::ItemKind::TyAlias(..) => \"a type alias\",\n             hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) => {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let desc = match impl_item.node {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n             hir::ImplItemKind::Method(..) => \"a method\",\n-            hir::ImplItemKind::Type(_) => \"an associated type\",\n+            hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n             hir::ImplItemKind::OpaqueTy(_) => \"an associated `impl Trait` type\",\n         };\n         self.check_missing_docs_attrs(cx,\n@@ -1123,7 +1123,7 @@ impl TypeAliasBounds {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         let (ty, type_alias_generics) = match item.node {\n-            hir::ItemKind::Ty(ref ty, ref generics) => (&*ty, generics),\n+            hir::ItemKind::TyAlias(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n         let mut suggested_changing_assoc_types = false;"}, {"sha": "8f7fe6680cb14e80b4312ea30d1adbb650a6358b", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -137,7 +137,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         }\n \n         match it.node {\n-            ast::ItemKind::Ty(..) |\n+            ast::ItemKind::TyAlias(..) |\n             ast::ItemKind::Enum(..) |\n             ast::ItemKind::Struct(..) |\n             ast::ItemKind::Union(..) => self.check_case(cx, \"type\", &it.ident),"}, {"sha": "d73a4966bca8c760de793a5d20a9b2ddfa075f59", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -980,7 +980,7 @@ impl EncodeContext<'tcx> {\n                     needs_inline || is_const_fn || always_encode_mir\n                 },\n                 hir::ImplItemKind::OpaqueTy(..) |\n-                hir::ImplItemKind::Type(..) => false,\n+                hir::ImplItemKind::TyAlias(..) => false,\n             };\n \n         Entry {\n@@ -1094,7 +1094,7 @@ impl EncodeContext<'tcx> {\n             }\n             hir::ItemKind::ForeignMod(_) => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n-            hir::ItemKind::Ty(..) => EntryKind::Type,\n+            hir::ItemKind::TyAlias(..) => EntryKind::Type,\n             hir::ItemKind::OpaqueTy(..) => EntryKind::OpaqueTy,\n             hir::ItemKind::Enum(..) => EntryKind::Enum(get_repr_options(tcx, def_id)),\n             hir::ItemKind::Struct(ref struct_def, _) => {\n@@ -1227,7 +1227,7 @@ impl EncodeContext<'tcx> {\n                 hir::ItemKind::Static(..) |\n                 hir::ItemKind::Const(..) |\n                 hir::ItemKind::Fn(..) |\n-                hir::ItemKind::Ty(..) |\n+                hir::ItemKind::TyAlias(..) |\n                 hir::ItemKind::OpaqueTy(..) |\n                 hir::ItemKind::Enum(..) |\n                 hir::ItemKind::Struct(..) |\n@@ -1247,7 +1247,7 @@ impl EncodeContext<'tcx> {\n                 hir::ItemKind::Static(..) |\n                 hir::ItemKind::Const(..) |\n                 hir::ItemKind::Fn(..) |\n-                hir::ItemKind::Ty(..) |\n+                hir::ItemKind::TyAlias(..) |\n                 hir::ItemKind::Enum(..) |\n                 hir::ItemKind::Struct(..) |\n                 hir::ItemKind::Union(..) |\n@@ -1261,7 +1261,7 @@ impl EncodeContext<'tcx> {\n                 hir::ItemKind::Static(..) |\n                 hir::ItemKind::Const(..) |\n                 hir::ItemKind::Fn(..) |\n-                hir::ItemKind::Ty(..) |\n+                hir::ItemKind::TyAlias(..) |\n                 hir::ItemKind::Enum(..) |\n                 hir::ItemKind::Struct(..) |\n                 hir::ItemKind::Union(..) |\n@@ -1761,7 +1761,7 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::GlobalAsm(..) |\n             hir::ItemKind::ExternCrate(..) |\n             hir::ItemKind::Use(..) |\n-            hir::ItemKind::Ty(..) |\n+            hir::ItemKind::TyAlias(..) |\n             hir::ItemKind::OpaqueTy(..) |\n             hir::ItemKind::TraitAlias(..) => {\n                 // no sub-item recording needed in these cases"}, {"sha": "12d763bb7910af96d5f694a604aeb314274eb3f5", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -969,7 +969,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n             hir::ItemKind::ExternCrate(..) |\n             hir::ItemKind::Use(..)         |\n             hir::ItemKind::ForeignMod(..)  |\n-            hir::ItemKind::Ty(..)          |\n+            hir::ItemKind::TyAlias(..)          |\n             hir::ItemKind::Trait(..)       |\n             hir::ItemKind::TraitAlias(..)  |\n             hir::ItemKind::OpaqueTy(..) |"}, {"sha": "45a185dccf29c7d829088494048a7130826d65f1", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -31,7 +31,7 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n-        if let ItemKind::Ty(..) = item.node {\n+        if let ItemKind::TyAlias(..) = item.node {\n             for attr in self.tcx.get_attrs(item_def_id).iter() {\n                 if attr.check_name(sym::rustc_layout) {\n                     self.dump_layout_of(item_def_id, item, attr);"}, {"sha": "4800bb9365cb78bd6a85adbe1b30dc10791ea950", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -534,7 +534,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Static(..) | hir::ItemKind::Struct(..) |\n             hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) |\n             hir::ItemKind::OpaqueTy(..) |\n-            hir::ItemKind::Ty(..) | hir::ItemKind::Union(..) | hir::ItemKind::Use(..) => {\n+            hir::ItemKind::TyAlias(..) | hir::ItemKind::Union(..) | hir::ItemKind::Use(..) => {\n                 if item.vis.node.is_pub() { self.prev_level } else { None }\n             }\n         };\n@@ -589,7 +589,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n             hir::ItemKind::GlobalAsm(..) |\n-            hir::ItemKind::Ty(..) |\n+            hir::ItemKind::TyAlias(..) |\n             hir::ItemKind::Mod(..) |\n             hir::ItemKind::TraitAlias(..) |\n             hir::ItemKind::Fn(..) |\n@@ -621,7 +621,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             // Visit everything.\n             hir::ItemKind::Const(..) | hir::ItemKind::Static(..) |\n-            hir::ItemKind::Fn(..) | hir::ItemKind::Ty(..) => {\n+            hir::ItemKind::Fn(..) | hir::ItemKind::TyAlias(..) => {\n                 if item_level.is_some() {\n                     self.reach(item.hir_id, item_level).generics().predicates().ty();\n                 }\n@@ -1371,7 +1371,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                                 impl_item_ref.id.hir_id)\n                                          }\n                                          hir::ImplItemKind::OpaqueTy(..) |\n-                                         hir::ImplItemKind::Type(_) => false,\n+                                         hir::ImplItemKind::TyAlias(_) => false,\n                                      }\n                                  });\n \n@@ -1397,7 +1397,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::ImplItemKind::Type(..) => {\n+                                    hir::ImplItemKind::TyAlias(..) => {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 3. are warned with this call.\n                             for impl_item_ref in impl_item_refs {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                if let hir::ImplItemKind::Type(ref ty) = impl_item.node {\n+                                if let hir::ImplItemKind::TyAlias(ref ty) = impl_item.node {\n                                     self.visit_ty(ty);\n                                 }\n                             }\n@@ -1458,7 +1458,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n             // `type ... = ...;` can contain private types, because\n             // we're introducing a new name.\n-            hir::ItemKind::Ty(..) => return,\n+            hir::ItemKind::TyAlias(..) => return,\n \n             // Not at all public, so we don't care.\n             _ if !self.item_is_public(&item.hir_id, &item.vis) => {\n@@ -1739,7 +1739,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemKind::GlobalAsm(..) => {}\n             // Subitems of these items have inherited publicity.\n             hir::ItemKind::Const(..) | hir::ItemKind::Static(..) |\n-            hir::ItemKind::Fn(..) | hir::ItemKind::Ty(..) => {\n+            hir::ItemKind::Fn(..) | hir::ItemKind::TyAlias(..) => {\n                 self.check(item.hir_id, item_visibility).generics().predicates().ty();\n             }\n             hir::ItemKind::OpaqueTy(..) => {"}, {"sha": "9d01f33002940170c00b40c927282aee4d604ee9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -459,7 +459,7 @@ impl<'a> Resolver<'a> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::Ty(..) => {\n+            ItemKind::TyAlias(..) => {\n                 let res = Res::Def(DefKind::TyAlias, self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }"}, {"sha": "a7062840a6ffa6f0891c66fb4bd9df78ab35e62f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -2709,7 +2709,7 @@ impl<'a> Resolver<'a> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.node);\n \n         match item.node {\n-            ItemKind::Ty(_, ref generics) |\n+            ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(_, ref generics) |\n             ItemKind::Fn(_, _, ref generics, _) => {\n                 self.with_generic_param_rib(\n@@ -3079,7 +3079,7 @@ impl<'a> Resolver<'a> {\n \n                                                 visit::walk_impl_item(this, impl_item);\n                                             }\n-                                            ImplItemKind::Type(ref ty) => {\n+                                            ImplItemKind::TyAlias(ref ty) => {\n                                                 // If this is a trait impl, ensure the type\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,"}, {"sha": "c32d4885c4ad9b7d974ff7941cdb11defba63db8", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -1167,7 +1167,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::ImplItemKind::Type(ref ty) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n@@ -1397,7 +1397,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.process_mod(item);\n                 visit::walk_mod(self, m);\n             }\n-            Ty(ref ty, ref ty_params) => {\n+            TyAlias(ref ty, ref ty_params) => {\n                 let qualname = format!(\"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 let value = ty_to_string(&ty);"}, {"sha": "c212cda2d6679e4a5610307c8fe4750a0ddd4522", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -438,7 +438,7 @@ impl Sig for ast::Item {\n                     refs: vec![],\n                 })\n             }\n-            ast::ItemKind::Ty(ref ty, ref generics) => {\n+            ast::ItemKind::TyAlias(ref ty, ref generics) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n "}, {"sha": "e8ff83e7d2b1cdb620d9d031c4d93ccb93d91d8f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -1409,7 +1409,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             check_opaque(tcx, def_id, substs, it.span, &origin);\n         }\n-        hir::ItemKind::Ty(..) => {\n+        hir::ItemKind::TyAlias(..) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);\n             let pty_ty = tcx.type_of(def_id);\n             let generics = tcx.generics_of(def_id);\n@@ -1543,7 +1543,7 @@ fn check_specialization_validity<'tcx>(\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n         hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n-        hir::ImplItemKind::Type(_) => ty::AssocKind::Type\n+        hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n \n     let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).nth(1)\n@@ -1640,7 +1640,7 @@ fn check_impl_items_against_trait<'tcx>(\n                     }\n                 }\n                 hir::ImplItemKind::OpaqueTy(..) |\n-                hir::ImplItemKind::Type(_) => {\n+                hir::ImplItemKind::TyAlias(_) => {\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n                         if ty_trait_item.defaultness.has_value() {\n                             overridden_associated_type = Some(impl_item);"}, {"sha": "a14040fe59a4ebeda9d8b75a0ba2bebea6cb9136", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -293,7 +293,7 @@ fn type_param_predicates(\n             match item.node {\n                 ItemKind::Fn(.., ref generics, _)\n                 | ItemKind::Impl(_, _, _, ref generics, ..)\n-                | ItemKind::Ty(_, ref generics)\n+                | ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::OpaqueTy(OpaqueTy {\n                     ref generics,\n                     impl_trait_fn: None,\n@@ -462,7 +462,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         }) => {}\n \n         hir::ItemKind::OpaqueTy(..)\n-        | hir::ItemKind::Ty(..)\n+        | hir::ItemKind::TyAlias(..)\n         | hir::ItemKind::Static(..)\n         | hir::ItemKind::Const(..)\n         | hir::ItemKind::Fn(..) => {\n@@ -917,7 +917,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                     generics\n                 }\n \n-                ItemKind::Ty(_, ref generics)\n+                ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::Enum(_, ref generics)\n                 | ItemKind::Struct(_, ref generics)\n                 | ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, .. })\n@@ -1220,7 +1220,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n \n                 find_opaque_ty_constraints(tcx, def_id)\n             }\n-            ImplItemKind::Type(ref ty) => {\n+            ImplItemKind::TyAlias(ref ty) => {\n                 if tcx\n                     .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n                     .is_none()\n@@ -1242,7 +1242,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                         icx.to_ty(ty)\n                     }\n                 },\n-                ItemKind::Ty(ref ty, _)\n+                ItemKind::TyAlias(ref ty, _)\n                 | ItemKind::Impl(.., ref ty, _) => icx.to_ty(ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -2038,7 +2038,7 @@ fn explicit_predicates_of(\n                     generics\n                 }\n                 ItemKind::Fn(.., ref generics, _)\n-                | ItemKind::Ty(_, ref generics)\n+                | ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::Enum(_, ref generics)\n                 | ItemKind::Struct(_, ref generics)\n                 | ItemKind::Union(_, ref generics) => generics,"}, {"sha": "fcfd9adef54dfde2a02e38ad872622036188a16a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -189,7 +189,7 @@ fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplI\n     for impl_item_ref in impl_item_refs {\n         let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n         let seen_items = match impl_item.node {\n-            hir::ImplItemKind::Type(_) => &mut seen_type_items,\n+            hir::ImplItemKind::TyAlias(_) => &mut seen_type_items,\n             _                          => &mut seen_value_items,\n         };\n         match seen_items.entry(impl_item.ident.modern()) {"}, {"sha": "1e1d3e7865c92cba748b9dbde85ff3bc2f30a813", "filename": "src/librustc_typeck/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -23,7 +23,7 @@ impl<'a> From <&'a hir::ImplItemKind> for Namespace {\n     fn from(impl_kind: &'a hir::ImplItemKind) -> Self {\n         match *impl_kind {\n             hir::ImplItemKind::OpaqueTy(..) |\n-            hir::ImplItemKind::Type(..) => Namespace::Type,\n+            hir::ImplItemKind::TyAlias(..) => Namespace::Type,\n             hir::ImplItemKind::Const(..) |\n             hir::ImplItemKind::Method(..) => Namespace::Value,\n         }"}, {"sha": "d3accff5c2ce8805ec242e1efaa15d32fd88ca14", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -2253,7 +2253,7 @@ impl Clean<Item> for hir::ImplItem {\n             hir::ImplItemKind::Method(ref sig, body) => {\n                 MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n             }\n-            hir::ImplItemKind::Type(ref ty) => TypedefItem(Typedef {\n+            hir::ImplItemKind::TyAlias(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),\n                 generics: Generics::default(),\n             }, true),\n@@ -2802,7 +2802,7 @@ impl Clean<Type> for hir::Ty {\n                     }\n                 };\n \n-                if let Some(&hir::ItemKind::Ty(ref ty, ref generics)) = alias {\n+                if let Some(&hir::ItemKind::TyAlias(ref ty, ref generics)) = alias {\n                     let provided_params = &path.segments.last().expect(\"segments were empty\");\n                     let mut ty_substs = FxHashMap::default();\n                     let mut lt_substs = FxHashMap::default();"}, {"sha": "1ba2c0333d6bf6aa5ff62e8356d9a8789934996f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -458,7 +458,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n                 self.visit_fn(om, item, ident.name, &**fd, header, gen, body),\n-            hir::ItemKind::Ty(ref ty, ref gen) => {\n+            hir::ItemKind::TyAlias(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty,\n                     gen,"}, {"sha": "849e77c4f311205642f753edcb480c4f4853912a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -1509,7 +1509,7 @@ pub struct ImplItem {\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n     Method(MethodSig, P<Block>),\n-    Type(P<Ty>),\n+    TyAlias(P<Ty>),\n     OpaqueTy(GenericBounds),\n     Macro(Mac),\n }\n@@ -2346,7 +2346,7 @@ pub enum ItemKind {\n     /// A type alias (`type` or `pub type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    Ty(P<Ty>, Generics),\n+    TyAlias(P<Ty>, Generics),\n     /// An opaque `impl Trait` type alias.\n     ///\n     /// E.g., `type Foo = impl Bar + Boo;`.\n@@ -2403,7 +2403,7 @@ impl ItemKind {\n             ItemKind::Mod(..) => \"module\",\n             ItemKind::ForeignMod(..) => \"foreign module\",\n             ItemKind::GlobalAsm(..) => \"global asm\",\n-            ItemKind::Ty(..) => \"type alias\",\n+            ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::OpaqueTy(..) => \"opaque type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\","}, {"sha": "59e13fdc8f163a42d3dfd1c4391f363ad734e796", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -858,7 +858,7 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn item_ty_poly(&self, span: Span, name: Ident, ty: P<ast::Ty>,\n                     generics: Generics) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Ty(ty, generics))\n+        self.item(span, name, Vec::new(), ast::ItemKind::TyAlias(ty, generics))\n     }\n \n     pub fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item> {"}, {"sha": "76ea8e607b722143c9151b45b6e98b7580dbd6ea", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -2254,7 +2254,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     \"`impl Trait` in type aliases is unstable\"\n                 );\n             }\n-            ast::ImplItemKind::Type(_) => {\n+            ast::ImplItemKind::TyAlias(_) => {\n                 if !ii.generics.params.is_empty() {\n                     gate_feature_post!(&self, generic_associated_types, ii.span,\n                                        \"generic associated types are unstable\");"}, {"sha": "be04c6a76b06d370d353850210ebbf5f467bc084", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -847,7 +847,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         ItemKind::Mod(m) => vis.visit_mod(m),\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(_ga) => {}\n-        ItemKind::Ty(ty, generics) => {\n+        ItemKind::TyAlias(ty, generics) => {\n             vis.visit_ty(ty);\n             vis.visit_generics(generics);\n         }\n@@ -933,7 +933,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visit_method_sig(sig, visitor);\n             visitor.visit_block(body);\n         }\n-        ImplItemKind::Type(ty) => visitor.visit_ty(ty),\n+        ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),\n         ImplItemKind::OpaqueTy(bounds) => visit_bounds(bounds, visitor),\n         ImplItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }"}, {"sha": "d85c2df16a3509b68d41f2319698f62c225b07e4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -5707,7 +5707,7 @@ impl<'a> Parser<'a> {\n         let (name, node, generics) = if let Some(type_) = self.eat_type() {\n             let (name, alias, generics) = type_?;\n             let kind = match alias {\n-                AliasKind::Weak(typ) => ast::ImplItemKind::Type(typ),\n+                AliasKind::Weak(typ) => ast::ImplItemKind::TyAlias(typ),\n                 AliasKind::OpaqueTy(bounds) => ast::ImplItemKind::OpaqueTy(bounds),\n             };\n             (name, kind, generics)\n@@ -7263,7 +7263,7 @@ impl<'a> Parser<'a> {\n             let (ident, alias, generics) = type_?;\n             // TYPE ITEM\n             let item_ = match alias {\n-                AliasKind::Weak(ty) => ItemKind::Ty(ty, generics),\n+                AliasKind::Weak(ty) => ItemKind::TyAlias(ty, generics),\n                 AliasKind::OpaqueTy(bounds) => ItemKind::OpaqueTy(bounds, generics),\n             };\n             let prev_span = self.prev_span;"}, {"sha": "2ef8a919b9c56e54408b7f0d917d659c289de1a6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -1208,7 +1208,7 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.as_str().to_string());\n                 self.end();\n             }\n-            ast::ItemKind::Ty(ref ty, ref generics) => {\n+            ast::ItemKind::TyAlias(ref ty, ref generics) => {\n                 self.head(visibility_qualified(&item.vis, \"type\"));\n                 self.print_ident(item.ident);\n                 self.print_generic_params(&generics.params);\n@@ -1579,7 +1579,7 @@ impl<'a> State<'a> {\n                 self.nbsp();\n                 self.print_block_with_attrs(body, &ii.attrs);\n             }\n-            ast::ImplItemKind::Type(ref ty) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n             ast::ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "596c5b46b986f2c82c9ad6204ea697c473f035a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -255,7 +255,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::Ty(ref typ, ref generics) => {\n+        ItemKind::TyAlias(ref typ, ref generics) => {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(generics)\n         }\n@@ -616,7 +616,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), body),\n                              &sig.decl, impl_item.span, impl_item.id);\n         }\n-        ImplItemKind::Type(ref ty) => {\n+        ImplItemKind::TyAlias(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n         ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "cb89a68b9f27272c8abedd27c266a2e9dcdc5d33", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d3f8a0b5dfddfe443d9db1f1da18348dbceb0e47", "patch": "@@ -529,7 +529,8 @@ impl<'a> TraitDef<'a> {\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n-                node: ast::ImplItemKind::Type(type_def.to_ty(cx, self.span, type_ident, generics)),\n+                node: ast::ImplItemKind::TyAlias(\n+                    type_def.to_ty(cx, self.span, type_ident, generics)),\n                 tokens: None,\n             }\n         });"}]}