{"sha": "98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWM0NWVlMGI1ZjM4ZjA2YjRhYzVhZGZiOWFmZjE5OGYxNTdiZGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-21T20:20:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-21T20:20:53Z"}, "message": "Rollup merge of #22542 - ipetkov:unsafe-lint, r=huonw\n\n This allows warning or forbidding all uses of unsafe code, whereas\npreviously only unsafe blocks were caught by the lint.\n\nThe lint has been renamed from `unsafe-blocks` to `unsafe-code` to\nreflect its new purpose.\n\nThis is a minor [breaking-change]\n\nCloses #22430", "tree": {"sha": "90aa3738974544b02adcf3b9e4abe9c92a9248ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90aa3738974544b02adcf3b9e4abe9c92a9248ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "html_url": "https://github.com/rust-lang/rust/commit/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe2d212a0f776dda3986291921a9b0ebf1d7a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe2d212a0f776dda3986291921a9b0ebf1d7a48", "html_url": "https://github.com/rust-lang/rust/commit/9fe2d212a0f776dda3986291921a9b0ebf1d7a48"}, {"sha": "be0dc49675ff38b4bc2e73f68bff298168bc6875", "url": "https://api.github.com/repos/rust-lang/rust/commits/be0dc49675ff38b4bc2e73f68bff298168bc6875", "html_url": "https://github.com/rust-lang/rust/commit/be0dc49675ff38b4bc2e73f68bff298168bc6875"}], "stats": {"total": 140, "additions": 103, "deletions": 37}, "files": [{"sha": "a2272b332b7212533971c42ac14fb603ea58cb0d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1269,27 +1269,71 @@ impl LintPass for UnusedUnsafe {\n }\n \n declare_lint! {\n-    UNSAFE_BLOCKS,\n+    UNSAFE_CODE,\n     Allow,\n-    \"usage of an `unsafe` block\"\n+    \"usage of `unsafe` code\"\n }\n \n #[derive(Copy)]\n-pub struct UnsafeBlocks;\n+pub struct UnsafeCode;\n \n-impl LintPass for UnsafeBlocks {\n+impl LintPass for UnsafeCode {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSAFE_BLOCKS)\n+        lint_array!(UNSAFE_CODE)\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         if let ast::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == ast::UnsafeBlock(ast::UserProvided) {\n-                cx.span_lint(UNSAFE_BLOCKS, blk.span, \"usage of an `unsafe` block\");\n+                cx.span_lint(UNSAFE_CODE, blk.span, \"usage of an `unsafe` block\");\n             }\n         }\n     }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        use syntax::ast::Unsafety::Unsafe;\n+\n+        fn check_method(cx: &Context, meth: &P<ast::Method>) {\n+            if let ast::Method_::MethDecl(_, _, _, _, Unsafe, _, _, _) = meth.node {\n+                cx.span_lint(UNSAFE_CODE, meth.span, \"implementation of an `unsafe` method\");\n+            }\n+        }\n+\n+        match it.node {\n+            ast::ItemFn(_, Unsafe, _, _, _) =>\n+                cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` function\"),\n+\n+            ast::ItemTrait(trait_safety, _, _, ref items) => {\n+                if trait_safety == Unsafe {\n+                    cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\");\n+                }\n+\n+                for it in items {\n+                    match *it {\n+                        ast::RequiredMethod(ast::TypeMethod { unsafety: Unsafe, span, ..}) =>\n+                            cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` method\"),\n+                        ast::ProvidedMethod(ref meth) => check_method(cx, meth),\n+                        _ => (),\n+                    }\n+                }\n+            },\n+\n+            ast::ItemImpl(impl_safety, _, _, _, _, ref impls) => {\n+                if impl_safety == Unsafe {\n+                    cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\");\n+                }\n+\n+                for item in impls {\n+                    if let ast::ImplItem::MethodImplItem(ref meth) = *item {\n+                        check_method(cx, meth);\n+                    }\n+                }\n+            },\n+\n+            _ => return,\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "8a832f0b08635a638cd36752809049b9bfb6ed98", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -206,7 +206,7 @@ impl LintStore {\n                      UnusedImportBraces,\n                      NonShorthandFieldPatterns,\n                      UnusedUnsafe,\n-                     UnsafeBlocks,\n+                     UnsafeCode,\n                      UnusedMut,\n                      UnusedAllocation,\n                      MissingCopyImplementations,"}, {"sha": "56d2b2cd6c0845c8a2b4e1ca0df6e6e95ddb853f", "filename": "src/test/compile-fail/lint-unsafe-block.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9fe2d212a0f776dda3986291921a9b0ebf1d7a48/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe2d212a0f776dda3986291921a9b0ebf1d7a48/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs?ref=9fe2d212a0f776dda3986291921a9b0ebf1d7a48", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_unsafe)]\n-#![allow(dead_code)]\n-#![deny(unsafe_blocks)]\n-unsafe fn allowed() {}\n-\n-#[allow(unsafe_blocks)] fn also_allowed() { unsafe {} }\n-\n-macro_rules! unsafe_in_macro {\n-    () => {\n-        unsafe {} //~ ERROR: usage of an `unsafe` block\n-    }\n-}\n-\n-fn main() {\n-    unsafe {} //~ ERROR: usage of an `unsafe` block\n-\n-    unsafe_in_macro!()\n-}"}, {"sha": "486e7142f27234047a620ba000f2a6b44a05844b", "filename": "src/test/compile-fail/lint-unsafe-code.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs?ref=98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_unsafe)]\n+#![allow(dead_code)]\n+#![deny(unsafe_code)]\n+\n+struct Bar;\n+\n+#[allow(unsafe_code)]\n+mod allowed_unsafe {\n+    fn allowed() { unsafe {} }\n+    unsafe fn also_allowed() {}\n+    unsafe trait AllowedUnsafe {}\n+    unsafe impl AllowedUnsafe for super::Bar {}\n+}\n+\n+macro_rules! unsafe_in_macro {\n+    () => {\n+        unsafe {} //~ ERROR: usage of an `unsafe` block\n+    }\n+}\n+\n+unsafe fn baz() {} //~ ERROR: declaration of an `unsafe` function\n+unsafe trait Foo {} //~ ERROR: declaration of an `unsafe` trait\n+unsafe impl Foo for Bar {} //~ ERROR: implementation of an `unsafe` trait\n+\n+trait Baz {\n+    unsafe fn baz(&self); //~ ERROR: declaration of an `unsafe` method\n+    unsafe fn provided(&self) {} //~ ERROR: implementation of an `unsafe` method\n+    unsafe fn provided_override(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+impl Baz for Bar {\n+    unsafe fn baz(&self) {} //~ ERROR: implementation of an `unsafe` method\n+    unsafe fn provided_override(&self) {} //~ ERROR: implementation of an `unsafe` method\n+}\n+\n+fn main() {\n+    unsafe {} //~ ERROR: usage of an `unsafe` block\n+\n+    unsafe_in_macro!()\n+}"}]}