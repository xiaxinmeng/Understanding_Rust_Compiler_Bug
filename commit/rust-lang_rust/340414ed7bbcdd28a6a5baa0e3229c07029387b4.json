{"sha": "340414ed7bbcdd28a6a5baa0e3229c07029387b4", "node_id": "C_kwDOAAsO6NoAKDM0MDQxNGVkN2JiY2RkMjhhNmE1YmFhMGUzMjI5YzA3MDI5Mzg3YjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T07:44:34Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T07:54:01Z"}, "message": "Review changes", "tree": {"sha": "a3f208d67adb7e1a64e377bf1c55e5773909a4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f208d67adb7e1a64e377bf1c55e5773909a4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/340414ed7bbcdd28a6a5baa0e3229c07029387b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/340414ed7bbcdd28a6a5baa0e3229c07029387b4", "html_url": "https://github.com/rust-lang/rust/commit/340414ed7bbcdd28a6a5baa0e3229c07029387b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/340414ed7bbcdd28a6a5baa0e3229c07029387b4/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d273cbfbebe108306455b7b34bbc625a24fa7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d273cbfbebe108306455b7b34bbc625a24fa7a", "html_url": "https://github.com/rust-lang/rust/commit/f1d273cbfbebe108306455b7b34bbc625a24fa7a"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "5d85cfe330acdd6075954690acc2a30c6fe7de21", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=340414ed7bbcdd28a6a5baa0e3229c07029387b4", "patch": "@@ -581,7 +581,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n         let context = method_context(cx, impl_item.owner_id.def_id);\n-        \n+\n         match context {\n             // If the method is an impl for a trait, don't doc.\n             MethodLateContext::TraitImpl => return,"}, {"sha": "05a9ec5e6d04a5bca66b64c4795984223ebcd2d7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=340414ed7bbcdd28a6a5baa0e3229c07029387b4", "patch": "@@ -416,7 +416,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            if decl.is_user_variable() && decl.mutability.is_mut() { Some(local) } else { None }\n+            (decl.is_user_variable() && decl.mutability.is_mut()).then(|| local)\n         })\n     }\n "}, {"sha": "16daf63b82d9f2f68e88acd85c54ce6f2f3d8422", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=340414ed7bbcdd28a6a5baa0e3229c07029387b4", "patch": "@@ -580,7 +580,7 @@ fn write_scope_tree(\n             continue;\n         }\n \n-        let mut_str = if local_decl.mutability.is_mut() { \"mut \" } else { \"\" };\n+        let mut_str = local_decl.mutability.prefix_str();\n \n         let mut indented_decl =\n             format!(\"{0:1$}let {2}{3:?}: {4:?}\", INDENT, indent, mut_str, local, local_decl.ty);"}, {"sha": "a50a8178de38bb3af51f44380575ee81c39b3887", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340414ed7bbcdd28a6a5baa0e3229c07029387b4/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=340414ed7bbcdd28a6a5baa0e3229c07029387b4", "patch": "@@ -768,9 +768,8 @@ impl<'hir> Sig for hir::ForeignItem<'hir> {\n             }\n             hir::ForeignItemKind::Static(ref ty, m) => {\n                 let mut text = \"static \".to_owned();\n-                if m.is_mut() {\n-                    text.push_str(\"mut \");\n-                }\n+                text.push_str(m.prefix_str());\n+\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n                     id: id_from_def_id(self.owner_id.to_def_id()),"}]}