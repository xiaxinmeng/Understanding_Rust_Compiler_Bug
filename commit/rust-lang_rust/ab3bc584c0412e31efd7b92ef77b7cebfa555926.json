{"sha": "ab3bc584c0412e31efd7b92ef77b7cebfa555926", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2JjNTg0YzA0MTJlMzFlZmQ3YjkyZWY3N2I3Y2ViZmE1NTU5MjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T14:12:34Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(20): Do some cleanup.", "tree": {"sha": "7c808df6258ec0ea6137eb469c337d1c6d0d630a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c808df6258ec0ea6137eb469c337d1c6d0d630a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3bc584c0412e31efd7b92ef77b7cebfa555926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bc584c0412e31efd7b92ef77b7cebfa555926", "html_url": "https://github.com/rust-lang/rust/commit/ab3bc584c0412e31efd7b92ef77b7cebfa555926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bc584c0412e31efd7b92ef77b7cebfa555926/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b789fd879b8dcafe9d6acc06fdc71261c520fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b789fd879b8dcafe9d6acc06fdc71261c520fb", "html_url": "https://github.com/rust-lang/rust/commit/81b789fd879b8dcafe9d6acc06fdc71261c520fb"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "f792da01cde894dd56a8c7c4c4e7b26d74eb87b2", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ab3bc584c0412e31efd7b92ef77b7cebfa555926/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3bc584c0412e31efd7b92ef77b7cebfa555926/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ab3bc584c0412e31efd7b92ef77b7cebfa555926", "patch": "@@ -341,7 +341,7 @@ pub struct CodegenContext {\n     // compiling incrementally\n     pub incr_comp_session_dir: Option<PathBuf>,\n     // Channel back to the main control thread to send messages to\n-    pub coordinator_send: Sender<Message>,\n+    coordinator_send: Sender<Message>,\n }\n \n impl CodegenContext {\n@@ -660,17 +660,17 @@ fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n     sess.opts.output_types.contains_key(&OutputType::Exe)\n }\n \n-pub fn run_passes(sess: &Session,\n-                  crate_output: &OutputFilenames,\n-                  crate_name: Symbol,\n-                  link: LinkMeta,\n-                  metadata: EncodedMetadata,\n-                  exported_symbols: Arc<ExportedSymbols>,\n-                  no_builtins: bool,\n-                  windows_subsystem: Option<String>,\n-                  linker_info: LinkerInfo,\n-                  no_integrated_as: bool)\n-                  -> OngoingCrateTranslation {\n+pub fn start_async_translation(sess: &Session,\n+                               crate_output: &OutputFilenames,\n+                               crate_name: Symbol,\n+                               link: LinkMeta,\n+                               metadata: EncodedMetadata,\n+                               exported_symbols: Arc<ExportedSymbols>,\n+                               no_builtins: bool,\n+                               windows_subsystem: Option<String>,\n+                               linker_info: LinkerInfo,\n+                               no_integrated_as: bool)\n+                               -> OngoingCrateTranslation {\n     let output_types_override = if no_integrated_as {\n         OutputTypes::new(&[(OutputType::Assembly, None)])\n     } else {\n@@ -1061,16 +1061,15 @@ fn execute_work_item(cgcx: &CodegenContext, work_item: WorkItem)\n }\n \n #[derive(Debug)]\n-pub enum Message {\n+enum Message {\n     Token(io::Result<Acquired>),\n     Done { result: Result<CompiledModule, ()> },\n     WorkItem(WorkItem),\n     CheckErrorMessages,\n     TranslationDone,\n }\n \n-\n-pub struct Diagnostic {\n+struct Diagnostic {\n     msg: String,\n     code: Option<String>,\n     lvl: Level,\n@@ -1519,14 +1518,14 @@ impl SharedEmitterMain {\n }\n \n pub struct OngoingCrateTranslation {\n-    pub crate_name: Symbol,\n-    pub link: LinkMeta,\n-    pub metadata: EncodedMetadata,\n-    pub exported_symbols: Arc<ExportedSymbols>,\n-    pub no_builtins: bool,\n-    pub windows_subsystem: Option<String>,\n-    pub linker_info: LinkerInfo,\n-    pub no_integrated_as: bool,\n+    crate_name: Symbol,\n+    link: LinkMeta,\n+    metadata: EncodedMetadata,\n+    exported_symbols: Arc<ExportedSymbols>,\n+    no_builtins: bool,\n+    windows_subsystem: Option<String>,\n+    linker_info: LinkerInfo,\n+    no_integrated_as: bool,\n \n     output_filenames: OutputFilenames,\n     regular_module_config: ModuleConfig,"}, {"sha": "2e6093eb1ca37692b521ec0068e478b1bd856f54", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3bc584c0412e31efd7b92ef77b7cebfa555926/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3bc584c0412e31efd7b92ef77b7cebfa555926/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ab3bc584c0412e31efd7b92ef77b7cebfa555926", "patch": "@@ -962,7 +962,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n        !tcx.sess.opts.output_types.should_trans() {\n         let empty_exported_symbols = ExportedSymbols::empty();\n         let linker_info = LinkerInfo::new(&shared_ccx, &empty_exported_symbols);\n-        let ongoing_translation = write::run_passes(\n+        let ongoing_translation = write::start_async_translation(\n             tcx.sess,\n             output_filenames,\n             tcx.crate_name(LOCAL_CRATE),\n@@ -1012,7 +1012,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n          (output_filenames.outputs.contains_key(&OutputType::Object) ||\n           output_filenames.outputs.contains_key(&OutputType::Exe)));\n \n-    let ongoing_translation = write::run_passes(\n+    let ongoing_translation = write::start_async_translation(\n         tcx.sess,\n         output_filenames,\n         tcx.crate_name(LOCAL_CRATE),"}]}