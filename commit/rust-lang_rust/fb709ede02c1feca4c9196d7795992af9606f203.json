{"sha": "fb709ede02c1feca4c9196d7795992af9606f203", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNzA5ZWRlMDJjMWZlY2E0YzkxOTZkNzc5NTk5MmFmOTYwNmYyMDM=", "commit": {"author": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T14:43:00Z"}, "committer": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T14:43:00Z"}, "message": "Simplify with make_file_info", "tree": {"sha": "cfb04d85e4c4998a7d30e63a0b10cc0be7e0155b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb04d85e4c4998a7d30e63a0b10cc0be7e0155b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb709ede02c1feca4c9196d7795992af9606f203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb709ede02c1feca4c9196d7795992af9606f203", "html_url": "https://github.com/rust-lang/rust/commit/fb709ede02c1feca4c9196d7795992af9606f203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb709ede02c1feca4c9196d7795992af9606f203/comments", "author": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e837e308254f3e56b95fcdafa706e40be084bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e837e308254f3e56b95fcdafa706e40be084bb9", "html_url": "https://github.com/rust-lang/rust/commit/0e837e308254f3e56b95fcdafa706e40be084bb9"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "c001d4b082b49f72902c220b3b5db1ba246cd82a", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb709ede02c1feca4c9196d7795992af9606f203/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb709ede02c1feca4c9196d7795992af9606f203/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=fb709ede02c1feca4c9196d7795992af9606f203", "patch": "@@ -37,22 +37,17 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n \n pub(crate) const MD5_LEN: usize = 16;\n \n-#[derive(Default, Clone, Copy)]\n-pub struct FileHash([u8; MD5_LEN]);\n-\n-impl FileHash {\n-    pub fn from_source_hash(hash: SourceFileHash) -> Option<Self> {\n-        if hash.kind == SourceFileHashAlgorithm::Md5 {\n-            let mut buf = [0u8; MD5_LEN];\n-            buf.copy_from_slice(hash.hash_bytes());\n-            Some(Self(buf))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn inner(self) -> [u8; MD5_LEN] {\n-        self.0\n+pub fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n+    if hash.kind == SourceFileHashAlgorithm::Md5 {\n+        let mut buf = [0u8; MD5_LEN];\n+        buf.copy_from_slice(hash.hash_bytes());\n+        Some(FileInfo {\n+            timestamp: 0,\n+            size: 0,\n+            md5: buf,\n+        })\n+    } else {\n+        None\n     }\n }\n \n@@ -79,14 +74,10 @@ fn line_program_add_file(\n                 line_strings,\n             );\n \n-            let file_hash = FileHash::from_source_hash(file.src_hash);\n+            let info = make_file_info(file.src_hash);\n \n-            line_program.file_has_md5 = file_hash.is_some();\n-            line_program.add_file(file_name, dir_id, Some(FileInfo {\n-                timestamp: 0,\n-                size: 0,\n-                md5: file_hash.unwrap_or_default().inner(),\n-            }))\n+            line_program.file_has_md5 = info.is_some();\n+            line_program.add_file(file_name, dir_id, info)\n         }\n         // FIXME give more appropriate file names\n         filename => {"}, {"sha": "c1d96183ea4b6164020f19c9bc4f079dac9eb2e6", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb709ede02c1feca4c9196d7795992af9606f203/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb709ede02c1feca4c9196d7795992af9606f203/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=fb709ede02c1feca4c9196d7795992af9606f203", "patch": "@@ -11,7 +11,7 @@ use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n     self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString, Location,\n-    LocationList, Range, RangeList, UnitEntryId, Writer, FileInfo,\n+    LocationList, Range, RangeList, UnitEntryId, Writer,\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n \n@@ -59,15 +59,15 @@ impl<'tcx> DebugContext<'tcx> {\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n         let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n-        let (name, file_hash) = match tcx.sess.local_crate_source_file.clone() {\n+        let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n-                let hash = tcx.sess\n+                let info = tcx.sess\n                     .source_map()\n                     .get_source_file(&FileName::Real(path))\n                     .map(|f| f.src_hash)\n-                    .and_then(line_info::FileHash::from_source_hash);\n-                (name, hash)\n+                    .and_then(line_info::make_file_info);\n+                (name, info)\n             },\n             None => (tcx.crate_name(LOCAL_CRATE).to_string(), None),\n         };\n@@ -77,13 +77,9 @@ impl<'tcx> DebugContext<'tcx> {\n             LineEncoding::default(),\n             LineString::new(comp_dir.as_bytes(), encoding, &mut dwarf.line_strings),\n             LineString::new(name.as_bytes(), encoding, &mut dwarf.line_strings),\n-            Some(FileInfo {\n-                timestamp: 0,\n-                size: 0,\n-                md5: file_hash.unwrap_or_default().inner(),\n-            }),\n+            file_info,\n         );\n-        line_program.file_has_md5 = file_hash.is_some();\n+        line_program.file_has_md5 = file_info.is_some();\n \n         dwarf.unit.line_program = line_program;\n "}]}