{"sha": "800166cf9697226910104c2812afe2bc1e2e5399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMDE2NmNmOTY5NzIyNjkxMDEwNGMyODEyYWZlMmJjMWUyZTUzOTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-28T21:29:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-28T22:42:51Z"}, "message": "rustc: remove `LvaluePreference` argument from `Ty::builtin_deref`.", "tree": {"sha": "c6b91fe71e000ca029f7a06b45d4b105b29b8c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b91fe71e000ca029f7a06b45d4b105b29b8c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/800166cf9697226910104c2812afe2bc1e2e5399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/800166cf9697226910104c2812afe2bc1e2e5399", "html_url": "https://github.com/rust-lang/rust/commit/800166cf9697226910104c2812afe2bc1e2e5399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/800166cf9697226910104c2812afe2bc1e2e5399/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87990a119aa1ce77f294253cde836518870b8032", "url": "https://api.github.com/repos/rust-lang/rust/commits/87990a119aa1ce77f294253cde836518870b8032", "html_url": "https://github.com/rust-lang/rust/commit/87990a119aa1ce77f294253cde836518870b8032"}], "stats": {"total": 100, "additions": 45, "deletions": 55}, "files": [{"sha": "b5d2bb1cffc874ad2079bafa5171802bd258bca1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     // a bind-by-ref means that the base_ty will be the type of the ident itself,\n                     // but what we want here is the type of the underlying value being borrowed.\n                     // So peel off one-level, turning the &T into T.\n-                    match base_ty.builtin_deref(false, ty::NoPreference) {\n+                    match base_ty.builtin_deref(false) {\n                         Some(t) => t.ty,\n                         None => {\n                             debug!(\"By-ref binding of non-derefable type {:?}\", base_ty);\n@@ -1019,7 +1019,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         debug!(\"cat_deref: base_cmt={:?}\", base_cmt);\n \n         let base_cmt_ty = base_cmt.ty;\n-        let deref_ty = match base_cmt_ty.builtin_deref(true, ty::NoPreference) {\n+        let deref_ty = match base_cmt_ty.builtin_deref(true) {\n             Some(mt) => mt.ty,\n             None => {\n                 debug!(\"Explicit deref of non-derefable type: {:?}\","}, {"sha": "53607764b3984ec4ddf1c27d1adfb68df640b873", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n         match *elem {\n             ProjectionElem::Deref => {\n                 let ty = self.to_ty(tcx)\n-                             .builtin_deref(true, ty::LvaluePreference::NoPreference)\n+                             .builtin_deref(true)\n                              .unwrap_or_else(|| {\n                                  bug!(\"deref projection of non-dereferencable ty {:?}\", self)\n                              })"}, {"sha": "600c823aaf880f1c715f4b5c39e483852c1fe94f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -12,7 +12,6 @@ pub use self::Variance::*;\n pub use self::AssociatedItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n-pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n use hir::{map as hir_map, FreevarMap, TraitMap};\n@@ -2099,21 +2098,6 @@ impl<'tcx> TyS<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum LvaluePreference {\n-    PreferMutLvalue,\n-    NoPreference\n-}\n-\n-impl LvaluePreference {\n-    pub fn from_mutbl(m: hir::Mutability) -> Self {\n-        match m {\n-            hir::MutMutable => PreferMutLvalue,\n-            hir::MutImmutable => NoPreference,\n-        }\n-    }\n-}\n-\n impl BorrowKind {\n     pub fn from_mutbl(m: hir::Mutability) -> BorrowKind {\n         match m {"}, {"sha": "0c1ebd1a2ba2f2f0c754d1ed8067c4bbdefcbfb1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -1514,18 +1514,12 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     ///\n     /// The parameter `explicit` indicates if this is an *explicit* dereference.\n     /// Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n-    pub fn builtin_deref(&self, explicit: bool, pref: ty::LvaluePreference)\n-        -> Option<TypeAndMut<'tcx>>\n-    {\n+    pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {\n         match self.sty {\n             TyAdt(def, _) if def.is_box() => {\n                 Some(TypeAndMut {\n                     ty: self.boxed_ty(),\n-                    mutbl: if pref == ty::PreferMutLvalue {\n-                        hir::MutMutable\n-                    } else {\n-                        hir::MutImmutable\n-                    },\n+                    mutbl: hir::MutImmutable,\n                 })\n             },\n             TyRef(_, mt) => Some(mt),"}, {"sha": "6d9354360d36741e35b2075d04ac703f1b72facc", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         let base_ty = base.to_ty(tcx);\n         match *pi {\n             ProjectionElem::Deref => {\n-                let deref_ty = base_ty.builtin_deref(true, ty::LvaluePreference::NoPreference);\n+                let deref_ty = base_ty.builtin_deref(true);\n                 PlaceTy::Ty {\n                     ty: deref_ty.map(|t| t.ty).unwrap_or_else(|| {\n                         span_mirbug_and_err!(self, place, \"deref of non-pointer {:?}\", base_ty)"}, {"sha": "4c17929fe98036fa911954ac04ba2b9165785222", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -674,7 +674,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n                 _ => bug!(\"FnType::new_vtable: non-pair self {:?}\", self_arg)\n             }\n \n-            let pointee = self_arg.layout.ty.builtin_deref(true, ty::NoPreference)\n+            let pointee = self_arg.layout.ty.builtin_deref(true)\n                 .unwrap_or_else(|| {\n                     bug!(\"FnType::new_vtable: non-pointer self {:?}\", self_arg)\n                 }).ty;"}, {"sha": "b4cdf38a5139f528aa46df8a27ff1c295d41f15a", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         operand.llval\n                     }\n                     mir::CastKind::Unsize => {\n-                        let pointee_ty = operand.ty.builtin_deref(true, ty::NoPreference)\n+                        let pointee_ty = operand.ty.builtin_deref(true)\n                             .expect(\"consts: unsizing got non-pointer type\").ty;\n                         let (base, old_info) = if !self.cx.type_is_sized(pointee_ty) {\n                             // Normally, the source is a thin pointer and we are\n@@ -755,7 +755,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             (operand.llval, None)\n                         };\n \n-                        let unsized_ty = cast_ty.builtin_deref(true, ty::NoPreference)\n+                        let unsized_ty = cast_ty.builtin_deref(true)\n                             .expect(\"consts: unsizing got non-pointer target type\").ty;\n                         let ptr_ty = self.cx.layout_of(unsized_ty).llvm_type(self.cx).ptr_to();\n                         let base = consts::ptrcast(base, ptr_ty);"}, {"sha": "e1b906646aa437a9bfefe155ee459eee6596a31d", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -100,7 +99,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n     }\n \n     pub fn deref(self, cx: &CodegenCx<'a, 'tcx>) -> PlaceRef<'tcx> {\n-        let projected_ty = self.layout.ty.builtin_deref(true, ty::NoPreference)\n+        let projected_ty = self.layout.ty.builtin_deref(true)\n             .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", self)).ty;\n         let (llptr, llextra) = match self.val {\n             OperandValue::Immediate(llptr) => (llptr, ptr::null_mut()),"}, {"sha": "a6530aa3e15dfeb110b7e6f1e505e44d6b4980b1", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -14,8 +14,8 @@ use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::infer;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::ObligationCauseCode;\n-use rustc::ty::{self, Ty, TypeFoldable, LvaluePreference};\n-use check::{FnCtxt, Expectation, Diverges};\n+use rustc::ty::{self, Ty, TypeFoldable};\n+use check::{FnCtxt, Expectation, Diverges, LvaluePreference};\n use check::coercion::CoerceMany;\n use util::nodemap::FxHashMap;\n \n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn check_dereferencable(&self, span: Span, expected: Ty<'tcx>, inner: &hir::Pat) -> bool {\n         if let PatKind::Binding(..) = inner.node {\n-            if let Some(mt) = self.shallow_resolve(expected).builtin_deref(true, ty::NoPreference) {\n+            if let Some(mt) = self.shallow_resolve(expected).builtin_deref(true) {\n                 if let ty::TyDynamic(..) = mt.ty.sty {\n                     // This is \"x = SomeTrait\" being reduced from\n                     // \"let &x = &SomeTrait\" or \"let box x = Box<SomeTrait>\", an error."}, {"sha": "fec9f4c658e487b30cee4d555ad846c592d5d950", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -10,15 +10,14 @@\n \n use astconv::AstConv;\n \n-use super::{FnCtxt, LvalueOp};\n+use super::{FnCtxt, LvalueOp, LvaluePreference};\n use super::method::MethodCallee;\n \n use rustc::infer::InferOk;\n use rustc::session::DiagnosticMessageId;\n use rustc::traits;\n use rustc::ty::{self, Ty, TraitRef};\n use rustc::ty::{ToPredicate, TypeFoldable};\n-use rustc::ty::{LvaluePreference, NoPreference};\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n \n use syntax_pos::Span;\n@@ -85,7 +84,7 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n \n         // Otherwise, deref if type is derefable:\n         let (kind, new_ty) =\n-            if let Some(mt) = self.cur_ty.builtin_deref(self.include_raw_pointers, NoPreference) {\n+            if let Some(mt) = self.cur_ty.builtin_deref(self.include_raw_pointers) {\n                 (AutoderefKind::Builtin, mt.ty)\n             } else {\n                 let ty = self.overloaded_deref_ty(self.cur_ty)?;\n@@ -238,8 +237,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_overloaded_deref(&self,\n                                 span: Span,\n                                 base_ty: Ty<'tcx>,\n-                                pref: LvaluePreference)\n+                                needs: Needs)\n                                 -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n-        self.try_overloaded_lvalue_op(span, base_ty, &[], pref, LvalueOp::Deref)\n+        self.try_overloaded_lvalue_op(span, base_ty, &[], needs, LvalueOp::Deref)\n     }\n }"}, {"sha": "84e1de5c3620de5ccadf60efaaa55194b6d6a4a3", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n+use super::{Expectation, FnCtxt, LvaluePreference, TupleArgumentsFlag};\n use super::autoderef::Autoderef;\n use super::method::MethodCallee;\n \n use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n-use rustc::ty::{self, TyCtxt, TypeFoldable, LvaluePreference, Ty};\n+use rustc::ty::{self, TyCtxt, TypeFoldable, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use syntax::abi;\n use syntax::symbol::Symbol;"}, {"sha": "25c175c538887dc5125f85612f17eeee86a3f504", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -60,7 +60,7 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n-use check::{Diverges, FnCtxt};\n+use check::{Diverges, FnCtxt, LvaluePreference};\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -69,8 +69,7 @@ use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::lint;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n-use rustc::ty::{self, LvaluePreference, TypeAndMut,\n-                Ty, ClosureSubsts};\n+use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;"}, {"sha": "3f4281d2a60e8c84aeeb8ed44c7888c640d8e36b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -11,11 +11,11 @@\n use super::{probe, MethodCallee};\n \n use astconv::AstConv;\n-use check::{FnCtxt, LvalueOp, callee};\n+use check::{FnCtxt, LvalueOp, callee, LvaluePreference, PreferMutLvalue};\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n-use rustc::ty::{self, LvaluePreference, NoPreference, PreferMutLvalue, Ty};\n+use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, OverloadedDeref};\n use rustc::ty::fold::TypeFoldable;\n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         let base_ty = self.resolve_type_vars_if_possible(&base_ty);\n \n         // Need to deref because overloaded lvalue ops take self by-reference.\n-        let base_ty = base_ty.builtin_deref(false, NoPreference)\n+        let base_ty = base_ty.builtin_deref(false)\n             .expect(\"lvalue op takes something that is not a ref\")\n             .ty;\n "}, {"sha": "4514910f1b5a107fa86f3d200f09bd5eae690074", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -77,6 +77,7 @@ type parameter).\n */\n \n pub use self::Expectation::*;\n+use self::LvaluePreference::*;\n use self::autoderef::Autoderef;\n use self::callee::DeferredCallResolution;\n use self::coercion::{CoerceMany, DynamicCoerceMany};\n@@ -95,7 +96,6 @@ use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n-use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc::ty::fold::TypeFoldable;\n@@ -368,6 +368,21 @@ impl<'a, 'gcx, 'tcx> Expectation<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum LvaluePreference {\n+    PreferMutLvalue,\n+    NoPreference\n+}\n+\n+impl LvaluePreference {\n+    fn from_mutbl(m: hir::Mutability) -> Self {\n+        match m {\n+            hir::MutMutable => PreferMutLvalue,\n+            hir::MutImmutable => NoPreference,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct UnsafetyState {\n     pub def: ast::NodeId,\n@@ -2219,7 +2234,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let ret_ty = method.sig.output();\n \n         // method returns &T, but the type as visible to user is T, so deref\n-        ret_ty.builtin_deref(true, NoPreference).unwrap()\n+        ret_ty.builtin_deref(true).unwrap()\n     }\n \n     fn lookup_indexing(&self,\n@@ -3572,7 +3587,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 oprnd_t = self.structurally_resolved_type(expr.span, oprnd_t);\n                 match unop {\n                     hir::UnDeref => {\n-                        if let Some(mt) = oprnd_t.builtin_deref(true, NoPreference) {\n+                        if let Some(mt) = oprnd_t.builtin_deref(true) {\n                             oprnd_t = mt.ty;\n                         } else if let Some(ok) = self.try_overloaded_deref(\n                                 expr.span, oprnd_t, lvalue_pref) {\n@@ -5023,7 +5038,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let lifetime_count = generics.lifetimes().count();\n \n     for leaf_ty in ty.walk() {\n-        if let ty::TyParam(ParamTy {idx, ..}) = leaf_ty.sty {\n+        if let ty::TyParam(ty::ParamTy {idx, ..}) = leaf_ty.sty {\n             debug!(\"Found use of ty param num {}\", idx);\n             tps_used[idx as usize - lifetime_count] = true;\n         } else if let ty::TyError = leaf_ty.sty {"}, {"sha": "0d02212e725146a451fb0451eadddd31762a55d5", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800166cf9697226910104c2812afe2bc1e2e5399/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=800166cf9697226910104c2812afe2bc1e2e5399", "patch": "@@ -10,9 +10,9 @@\n \n //! Code related to processing overloaded binary and unary operators.\n \n-use super::FnCtxt;\n+use super::{FnCtxt, NoPreference, PreferMutLvalue};\n use super::method::MethodCallee;\n-use rustc::ty::{self, Ty, TypeFoldable, NoPreference, PreferMutLvalue, TypeVariants};\n+use rustc::ty::{self, Ty, TypeFoldable, TypeVariants};\n use rustc::ty::TypeVariants::{TyStr, TyRef};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::infer::type_variable::TypeVariableOrigin;"}]}