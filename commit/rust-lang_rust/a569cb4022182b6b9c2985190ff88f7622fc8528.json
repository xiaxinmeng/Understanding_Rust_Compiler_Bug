{"sha": "a569cb4022182b6b9c2985190ff88f7622fc8528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NjljYjQwMjIxODJiNmI5YzI5ODUxOTBmZjg4Zjc2MjJmYzg1Mjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:32:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:32:38Z"}, "message": "Fix test", "tree": {"sha": "f3caa4ab657477eea5d8d4616bf0555ee5801abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3caa4ab657477eea5d8d4616bf0555ee5801abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a569cb4022182b6b9c2985190ff88f7622fc8528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a569cb4022182b6b9c2985190ff88f7622fc8528", "html_url": "https://github.com/rust-lang/rust/commit/a569cb4022182b6b9c2985190ff88f7622fc8528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a569cb4022182b6b9c2985190ff88f7622fc8528/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a3d98dadeff821506bdf9cf168858587046a70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3d98dadeff821506bdf9cf168858587046a70e", "html_url": "https://github.com/rust-lang/rust/commit/9a3d98dadeff821506bdf9cf168858587046a70e"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "6570f2bf9f297fbccf66a4681d639a91f266a18f", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a569cb4022182b6b9c2985190ff88f7622fc8528/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569cb4022182b6b9c2985190ff88f7622fc8528/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=a569cb4022182b6b9c2985190ff88f7622fc8528", "patch": "@@ -11,6 +11,22 @@ unsafe extern \"C\" fn my_puts(s: *const i8) {\n     puts(s);\n }\n \n+macro_rules! assert {\n+    ($e:expr) => {\n+        if !$e {\n+            panic(stringify!(! $e));\n+        }\n+    };\n+}\n+\n+macro_rules! assert_eq {\n+    ($l:expr, $r: expr) => {\n+        if $l != $r {\n+            panic(stringify!($l != $r));\n+        }\n+    }\n+}\n+\n #[lang = \"termination\"]\n trait Termination {\n     fn report(self) -> i32;\n@@ -20,8 +36,9 @@ impl Termination for () {\n     fn report(self) -> i32 {\n         unsafe {\n             NUM = 6 * 7 + 1 + (1u8 == 1u8) as u8; // 44\n-            *NUM_REF as i32\n+            assert_eq!(*NUM_REF as i32, 44);\n         }\n+        0\n     }\n }\n \n@@ -82,29 +99,12 @@ fn start<T: Termination + 'static>(\n         unsafe { puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const i8)); }\n     }\n \n-    main().report();\n-    0\n+    main().report() as isize\n }\n \n static mut NUM: u8 = 6 * 7;\n static NUM_REF: &'static u8 = unsafe { &NUM };\n \n-macro_rules! assert {\n-    ($e:expr) => {\n-        if !$e {\n-            panic(stringify!(! $e));\n-        }\n-    };\n-}\n-\n-macro_rules! assert_eq {\n-    ($l:expr, $r: expr) => {\n-        if $l != $r {\n-            panic(stringify!($l != $r));\n-        }\n-    }\n-}\n-\n struct Unique<T: ?Sized> {\n     pointer: *const T,\n     _marker: PhantomData<T>,"}]}