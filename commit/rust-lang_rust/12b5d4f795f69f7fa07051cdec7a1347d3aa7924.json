{"sha": "12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYjVkNGY3OTVmNjlmN2ZhMDcwNTFjZGVjN2ExMzQ3ZDNhYTc5MjQ=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-25T22:53:57Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-25T22:53:57Z"}, "message": "Assist to flip (some) binary expressions.\n\nThis assist can flip the following operators: ==, !=, >, >=, <, <=.", "tree": {"sha": "6ecfb96b9d5920e96e38d90906f8841c8d09e636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ecfb96b9d5920e96e38d90906f8841c8d09e636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "html_url": "https://github.com/rust-lang/rust/commit/12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b5d4f795f69f7fa07051cdec7a1347d3aa7924/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88a96bd05fdfdc6986e7807c93400af2cf6fa0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88a96bd05fdfdc6986e7807c93400af2cf6fa0f", "html_url": "https://github.com/rust-lang/rust/commit/d88a96bd05fdfdc6986e7807c93400af2cf6fa0f"}], "stats": {"total": 239, "additions": 151, "deletions": 88}, "files": [{"sha": "8a0737b5563ca83272b43b939a6cca8e3a9aa4a4", "filename": "crates/ra_assists/src/flip_binexpr.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/12b5d4f795f69f7fa07051cdec7a1347d3aa7924/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5d4f795f69f7fa07051cdec7a1347d3aa7924/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs?ref=12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "patch": "@@ -0,0 +1,149 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+/// Flip binary comparison expressions (==, !=, >, >=, <, <=).\n+pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let expr = ctx.node_at_offset::<BinExpr>()?;\n+    let lhs = expr.lhs()?.syntax();\n+    let rhs = expr.rhs()?.syntax();\n+    let op_range = expr.op()?.range();\n+    // The assist should be available only if the cursor is on the operator\n+    let cursor_in_range = ctx.frange.range.is_subrange(&op_range);\n+    // The assist should be available only for these binary operators\n+    // (it should not change the meaning of the expression)\n+    let allowed_ops = [\n+        BinOp::EqualityTest,\n+        BinOp::NegatedEqualityTest,\n+        BinOp::GreaterTest,\n+        BinOp::GreaterEqualTest,\n+        BinOp::LesserTest,\n+        BinOp::LesserEqualTest,\n+    ];\n+    let op_kind = expr.op_kind()?;\n+    if !cursor_in_range || !allowed_ops.iter().any(|o| *o == op_kind) {\n+        return None;\n+    }\n+    let new_op = match op_kind {\n+        BinOp::GreaterTest => Some(\"<\"),\n+        BinOp::GreaterEqualTest => Some(\"<=\"),\n+        BinOp::LesserTest => Some(\">\"),\n+        BinOp::LesserEqualTest => Some(\">=\"),\n+        _ => None,\n+    };\n+    ctx.add_action(AssistId(\"flip_binexpr\"), \"flip binary expression\", |edit| {\n+        edit.target(op_range);\n+        if let Some(new_op) = new_op {\n+            edit.replace(op_range, new_op);\n+        }\n+        edit.replace(lhs.range(), rhs.text());\n+        edit.replace(rhs.range(), lhs.text());\n+    });\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{check_assist, check_assist_target};\n+\n+    #[test]\n+    fn flip_eq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 ==<|> 2; }\",\n+            \"fn f() { let res = 2 ==<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_neq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 !=<|> 2; }\",\n+            \"fn f() { let res = 2 !=<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_gt_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 ><|> 2; }\",\n+            \"fn f() { let res = 2 <<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_gteq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 >=<|> 2; }\",\n+            \"fn f() { let res = 2 <=<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_lt_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 <<|> 2; }\",\n+            \"fn f() { let res = 2 ><|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_lteq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = 1 <=<|> 2; }\",\n+            \"fn f() { let res = 2 >=<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_for_complex_stmt() {\n+        check_assist(\n+            flip_binexpr,\n+            \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n+            \"fn f() { let res = (2 + 2) ==<|> (1 + 1); }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_in_match_expr() {\n+        check_assist(\n+            flip_binexpr,\n+            r#\"\n+            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n+                match other.downcast_ref::<Self>() {\n+                    None => false,\n+                    Some(it) => it ==<|> self,\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n+                match other.downcast_ref::<Self>() {\n+                    None => false,\n+                    Some(it) => self ==<|> it,\n+                }\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_target() {\n+        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n+    }\n+\n+    #[test]\n+    fn flip_gt_operands_target() {\n+        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ><|> 2; }\", \">\")\n+    }\n+\n+}"}, {"sha": "df0bb689da55e5614d565846c8b694391de38ae1", "filename": "crates/ra_assists/src/flip_eq_operands.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d88a96bd05fdfdc6986e7807c93400af2cf6fa0f/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88a96bd05fdfdc6986e7807c93400af2cf6fa0f/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs?ref=d88a96bd05fdfdc6986e7807c93400af2cf6fa0f", "patch": "@@ -1,86 +0,0 @@\n-use hir::db::HirDatabase;\n-use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n-\n-use crate::{AssistCtx, Assist, AssistId};\n-\n-pub(crate) fn flip_eq_operands(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let expr = ctx.node_at_offset::<BinExpr>()?;\n-    let lhs = expr.lhs()?.syntax();\n-    let rhs = expr.rhs()?.syntax();\n-    let op_range = expr.op()?.range();\n-    let cursor_in_range = ctx.frange.range.is_subrange(&op_range);\n-    let allowed_ops = [BinOp::EqualityTest, BinOp::NegatedEqualityTest];\n-    let expr_op = expr.op_kind()?;\n-    if !cursor_in_range || !allowed_ops.iter().any(|o| *o == expr_op) {\n-        return None;\n-    }\n-    ctx.add_action(AssistId(\"flip_eq_operands\"), \"flip equality operands\", |edit| {\n-        edit.target(op_range);\n-        edit.replace(lhs.range(), rhs.text());\n-        edit.replace(rhs.range(), lhs.text());\n-    });\n-\n-    ctx.build()\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    use crate::helpers::{check_assist, check_assist_target};\n-\n-    #[test]\n-    fn flip_eq_operands_for_simple_stmt() {\n-        check_assist(\n-            flip_eq_operands,\n-            \"fn f() { let res = 1 ==<|> 2; }\",\n-            \"fn f() { let res = 2 ==<|> 1; }\",\n-        )\n-    }\n-\n-    #[test]\n-    fn flip_neq_operands_for_simple_stmt() {\n-        check_assist(\n-            flip_eq_operands,\n-            \"fn f() { let res = 1 !=<|> 2; }\",\n-            \"fn f() { let res = 2 !=<|> 1; }\",\n-        )\n-    }\n-\n-    #[test]\n-    fn flip_eq_operands_for_complex_stmt() {\n-        check_assist(\n-            flip_eq_operands,\n-            \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n-            \"fn f() { let res = (2 + 2) ==<|> (1 + 1); }\",\n-        )\n-    }\n-\n-    #[test]\n-    fn flip_eq_operands_in_match_expr() {\n-        check_assist(\n-            flip_eq_operands,\n-            r#\"\n-            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n-                match other.downcast_ref::<Self>() {\n-                    None => false,\n-                    Some(it) => it ==<|> self,\n-                }\n-            }\n-            \"#,\n-            r#\"\n-            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n-                match other.downcast_ref::<Self>() {\n-                    None => false,\n-                    Some(it) => self ==<|> it,\n-                }\n-            }\n-            \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn flip_eq_operands_target() {\n-        check_assist_target(flip_eq_operands, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n-    }\n-}"}, {"sha": "c1514f8e5237ced832f627d3950657651af84438", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b5d4f795f69f7fa07051cdec7a1347d3aa7924/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5d4f795f69f7fa07051cdec7a1347d3aa7924/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=12b5d4f795f69f7fa07051cdec7a1347d3aa7924", "patch": "@@ -88,7 +88,7 @@ where\n mod add_derive;\n mod add_impl;\n mod flip_comma;\n-mod flip_eq_operands;\n+mod flip_binexpr;\n mod change_visibility;\n mod fill_match_arms;\n mod fill_struct_fields;\n@@ -108,7 +108,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         fill_match_arms::fill_match_arms,\n         fill_struct_fields::fill_struct_fields,\n         flip_comma::flip_comma,\n-        flip_eq_operands::flip_eq_operands,\n+        flip_binexpr::flip_binexpr,\n         introduce_variable::introduce_variable,\n         replace_if_let_with_match::replace_if_let_with_match,\n         split_import::split_import,"}]}