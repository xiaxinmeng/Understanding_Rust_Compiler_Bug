{"sha": "efa3a62b56f793ab13a85486ad99da1432f88aa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTNhNjJiNTZmNzkzYWIxM2E4NTQ4NmFkOTlkYTE0MzJmODhhYTM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-16T07:42:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-16T07:42:15Z"}, "message": "Merge pull request #3512 from scampi/issue-2724\n\nexit integration test successfully if the crate build failed before applying rustfmt", "tree": {"sha": "d97f913fb36cfe006989d854502def7fcff44418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97f913fb36cfe006989d854502def7fcff44418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa3a62b56f793ab13a85486ad99da1432f88aa3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctYdXCRBK7hj4Ov3rIwAAdHIIAIuLen5kSHObYgCU97UAfCm5\neldrWL8Eu6Uoz36VBpBxMAe6b63sWD2iHwVq3OtoEkqRYGKi8D+59U++zm6yDWTn\nkfLgEDqnXZLi1MIZVtRMhsUPAm803lIj0uZVbpH0xJHu/MsSAy+PY2wv/8uTEeoQ\ndlMK+H2ApRNGKFLkGPkVcaFirZjRmSEUQcbNwIjUzXVvtv3p1lB7ozuibDO/dWCL\nrt5SrCyvnqxHYwIaNf8OQwAOQeUAFRL0NeZjV6lvlPuZCGpZeuWHxwNrHd6BXM6S\n+YfB2rDYS86tdd3CTa3tzA0p1L8A5MW1RsjSfzXeaNmen0AKYCFPhfZ7B/beh/Q=\n=66In\n-----END PGP SIGNATURE-----\n", "payload": "tree d97f913fb36cfe006989d854502def7fcff44418\nparent d0df47fc58e305bd7817f81956e72bb27c060ced\nparent 1c7202b2eebb6a514fa1b175e38a66ac518ff409\nauthor Seiichi Uchida <seuchida@gmail.com> 1555400535 -0700\ncommitter GitHub <noreply@github.com> 1555400535 -0700\n\nMerge pull request #3512 from scampi/issue-2724\n\nexit integration test successfully if the crate build failed before applying rustfmt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa3a62b56f793ab13a85486ad99da1432f88aa3", "html_url": "https://github.com/rust-lang/rust/commit/efa3a62b56f793ab13a85486ad99da1432f88aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa3a62b56f793ab13a85486ad99da1432f88aa3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0df47fc58e305bd7817f81956e72bb27c060ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0df47fc58e305bd7817f81956e72bb27c060ced", "html_url": "https://github.com/rust-lang/rust/commit/d0df47fc58e305bd7817f81956e72bb27c060ced"}, {"sha": "1c7202b2eebb6a514fa1b175e38a66ac518ff409", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7202b2eebb6a514fa1b175e38a66ac518ff409", "html_url": "https://github.com/rust-lang/rust/commit/1c7202b2eebb6a514fa1b175e38a66ac518ff409"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4d5498b6ec7423a9323e66990ff2defec43a89c1", "filename": "ci/integration.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3a62b56f793ab13a85486ad99da1432f88aa3/ci%2Fintegration.sh", "raw_url": "https://github.com/rust-lang/rust/raw/efa3a62b56f793ab13a85486ad99da1432f88aa3/ci%2Fintegration.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration.sh?ref=efa3a62b56f793ab13a85486ad99da1432f88aa3", "patch": "@@ -42,8 +42,8 @@ function check_fmt_with_lib_tests {\n \n function check_fmt_base {\n     local test_args=\"$1\"\n-    cargo test $test_args\n-    if [[ $? != 0 ]]; then\n+    local build=$(cargo test $test_args 2>&1)\n+    if [[ \"$build\" =~ \"build failed\" ]] || [[ \"$build\" =~ \"test result: FAILED.\" ]]; then\n           return 0\n     fi\n     touch rustfmt.toml"}, {"sha": "6299aedf4a755199870f88c4d6f73ac2f44411b3", "filename": "src/ignore_path.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/efa3a62b56f793ab13a85486ad99da1432f88aa3/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3a62b56f793ab13a85486ad99da1432f88aa3/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=efa3a62b56f793ab13a85486ad99da1432f88aa3", "patch": "@@ -39,17 +39,17 @@ mod test {\n \n     #[test]\n     fn test_ignore_path_set() {\n-        let config = Config::from_toml(\n-            \"ignore = [\n-            \\\"foo.rs\\\",\n-            \\\"bar_dir/*\\\",\n-        ]\",\n-        )\n-        .unwrap();\n-        let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n-\n-        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));\n-        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"bar_dir/baz.rs\"))));\n-        assert!(!ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/bar.rs\"))));\n+        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n+            // this test requires nightly\n+            None | Some(\"nightly\") => {\n+                let config = Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#).unwrap();\n+                let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n+\n+                assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));\n+                assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"bar_dir/baz.rs\"))));\n+                assert!(!ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/bar.rs\"))));\n+            }\n+            _ => (),\n+        };\n     }\n }"}]}