{"sha": "30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZGU5MWQzZTllNzI0YzhlYmM1ZDNkZjM0MmFhNGU2NmE4OGRkNDc=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T20:30:34Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T20:30:34Z"}, "message": "moved in_macro to (new) utils.rs", "tree": {"sha": "e85cd9b9ff69773df187f21540a4e5cd05da4cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85cd9b9ff69773df187f21540a4e5cd05da4cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "html_url": "https://github.com/rust-lang/rust/commit/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee2e4ffe8a4ca40676fe6b372570d4e51c2f375", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee2e4ffe8a4ca40676fe6b372570d4e51c2f375", "html_url": "https://github.com/rust-lang/rust/commit/1ee2e4ffe8a4ca40676fe6b372570d4e51c2f375"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "5ee8745c33e0db89ea5a1cf5cc30820e84a7add1", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, ExpnInfo};\n use syntax::parse::token::InternedString;\n-use mut_mut::in_macro;\n+use utils::in_macro;\n \n declare_lint! { pub INLINE_ALWAYS, Warn,\n     \"#[inline(always)] is usually a bad idea.\"}"}, {"sha": "85c1b25a673b9b7b2602cb128793612ac3bd3870", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "patch": "@@ -19,7 +19,7 @@ use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, Spanned, ExpnInfo};\n use syntax::print::pprust::expr_to_string;\n-use mut_mut::in_macro;\n+use utils::in_macro;\n \n declare_lint! {\n     pub COLLAPSIBLE_IF,"}, {"sha": "202b5600dbe46008ca67d9404cfc018b769cd15c", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "patch": "@@ -3,6 +3,7 @@ use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::middle::ty::{expr_ty, sty, ty_ptr, ty_rptr, mt};\n use syntax::codemap::{BytePos, ExpnInfo, MacroFormat, Span};\n+use utils::in_macro;\n \n declare_lint!(pub MUT_MUT, Warn,\n               \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n@@ -51,16 +52,6 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n \t})\n }\n \n-pub fn in_macro(cx: &Context, opt_info: Option<&ExpnInfo>) -> bool {\n-\topt_info.map_or(false, |info| {\n-\t\tinfo.callee.span.map_or(true, |span| {\n-\t\t\tcx.sess().codemap().span_to_snippet(span).ok().map_or(true, |code| \n-\t\t\t\t!code.starts_with(\"macro_rules\")\n-\t\t\t)\n-\t\t})\n-\t})\n-}\n-\n fn unwrap_mut(ty : &Ty) -> Option<&Ty> {\n \tmatch ty.node {\n \t\tTyPtr(MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),"}, {"sha": "e6e0c0e4868d2991691edc2f93c1584417851415", "filename": "src/utils.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30de91d3e9e724c8ebc5d3df342aa4e66a88dd47/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=30de91d3e9e724c8ebc5d3df342aa4e66a88dd47", "patch": "@@ -0,0 +1,12 @@\n+use rustc::lint::Context;\n+use syntax::codemap::ExpnInfo;\n+\n+fn in_macro(cx: &Context, opt_info: Option<&ExpnInfo>) -> bool {\n+\topt_info.map_or(false, |info| {\n+\t\tinfo.callee.span.map_or(true, |span| {\n+\t\t\tcx.sess().codemap().span_to_snippet(span).ok().map_or(true, |code| \n+\t\t\t\t!code.starts_with(\"macro_rules\")\n+\t\t\t)\n+\t\t})\n+\t})\n+}"}]}