{"sha": "08e026675ee38bb4ca81106e766a6456c8b7382e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZTAyNjY3NWVlMzhiYjRjYTgxMTA2ZTc2NmE2NDU2YzhiNzM4MmU=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-18T20:00:36Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-18T20:00:36Z"}, "message": "deduplication", "tree": {"sha": "b7d38dd5b07fbe280e1b1ac91bf03408a3a4e33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d38dd5b07fbe280e1b1ac91bf03408a3a4e33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08e026675ee38bb4ca81106e766a6456c8b7382e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08e026675ee38bb4ca81106e766a6456c8b7382e", "html_url": "https://github.com/rust-lang/rust/commit/08e026675ee38bb4ca81106e766a6456c8b7382e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08e026675ee38bb4ca81106e766a6456c8b7382e/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1021bf05459ca5e84a580895565cab9663ed839", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1021bf05459ca5e84a580895565cab9663ed839", "html_url": "https://github.com/rust-lang/rust/commit/f1021bf05459ca5e84a580895565cab9663ed839"}], "stats": {"total": 133, "additions": 62, "deletions": 71}, "files": [{"sha": "5ad9bdbe68db051570891bd6af992b2d32d0535e", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -33,6 +33,7 @@ struct InteriorVisitor<'a, 'tcx> {\n     /// that they may succeed the said yield point in the post-order.\n     guard_bindings: SmallVec<[SmallVec<[HirId; 4]>; 1]>,\n     guard_bindings_set: HirIdSet,\n+    linted_values: HirIdSet,\n }\n \n impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n@@ -122,18 +123,21 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                 // Insert the type into the ordered set.\n                 let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n \n-                check_must_not_suspend_ty(\n-                    self.fcx,\n-                    ty,\n-                    hir_id,\n-                    SuspendCheckData {\n-                        expr,\n-                        source_span,\n-                        yield_span: yield_data.span,\n-                        plural_len: 1,\n-                        ..Default::default()\n-                    },\n-                );\n+                if !self.linted_values.contains(&hir_id) {\n+                    check_must_not_suspend_ty(\n+                        self.fcx,\n+                        ty,\n+                        hir_id,\n+                        SuspendCheckData {\n+                            expr,\n+                            source_span,\n+                            yield_span: yield_data.span,\n+                            plural_len: 1,\n+                            ..Default::default()\n+                        },\n+                    );\n+                    self.linted_values.insert(hir_id);\n+                }\n \n                 self.types.insert(ty::GeneratorInteriorTypeCause {\n                     span: source_span,\n@@ -181,6 +185,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         prev_unresolved_span: None,\n         guard_bindings: <_>::default(),\n         guard_bindings_set: <_>::default(),\n+        linted_values: <_>::default(),\n     };\n     intravisit::walk_body(&mut visitor, body);\n "}, {"sha": "040fff5a5a5a8d8219ee1aa4e11a91946d68aae3", "filename": "src/test/ui/lint/must_not_suspend/dedup.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend]\n+struct No {}\n+\n+async fn shushspend() {}\n+\n+async fn wheeee<T>(t: T) {\n+    shushspend().await;\n+    drop(t);\n+}\n+\n+async fn yes() {\n+    wheeee(No {}).await; //~ ERROR `No` held across\n+}\n+\n+fn main() {\n+}"}, {"sha": "542b7a3bc7e98c3e02657d979c588d8abc9ab100", "filename": "src/test/ui/lint/must_not_suspend/dedup.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -0,0 +1,19 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:16:12\n+   |\n+LL |     wheeee(No {}).await;\n+   |     -------^^^^^------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:16:12\n+   |\n+LL |     wheeee(No {}).await;\n+   |            ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b3effa020c48fa9b2e1ee1cc98a06869199d5773", "filename": "src/test/ui/lint/must_not_suspend/generic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// run-pass\n+//\n+// this test shows a case where the lint doesn't fire in generic code\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n@@ -12,10 +15,6 @@ async fn wheeee<T>(t: T) {\n     drop(t);\n }\n \n-async fn yes() {\n-    wheeee(No {}).await; //~ ERROR `No` held across\n-    //~^ ERROR `No` held across\n-}\n-\n fn main() {\n+    let _fut = wheeee(No {});\n }"}, {"sha": "d853ba720a3ad909213b79fc9539a54dffba548f", "filename": "src/test/ui/lint/must_not_suspend/generic.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f1021bf05459ca5e84a580895565cab9663ed839/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1021bf05459ca5e84a580895565cab9663ed839/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.stderr?ref=f1021bf05459ca5e84a580895565cab9663ed839", "patch": "@@ -1,31 +0,0 @@\n-error: `No` held across a suspend point, but should not be\n-  --> $DIR/generic.rs:16:12\n-   |\n-LL |     wheeee(No {}).await;\n-   |     -------^^^^^------- the value is held across this suspend point\n-   |\n-note: the lint level is defined here\n-  --> $DIR/generic.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/generic.rs:16:12\n-   |\n-LL |     wheeee(No {}).await;\n-   |            ^^^^^\n-\n-error: `No` held across a suspend point, but should not be\n-  --> $DIR/generic.rs:16:12\n-   |\n-LL |     wheeee(No {}).await;\n-   |     -------^^^^^------- the value is held across this suspend point\n-   |\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/generic.rs:16:12\n-   |\n-LL |     wheeee(No {}).await;\n-   |            ^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "738dd9e04655ced2a1a106d30ebaadb9c9f80d15", "filename": "src/test/ui/lint/must_not_suspend/ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -16,7 +16,6 @@ async fn other() {}\n impl Bar {\n     async fn uhoh(&mut self) {\n         let guard = &mut self.u; //~ ERROR `Umm` held across\n-        //~^ ERROR `Umm` held across\n \n         other().await;\n "}, {"sha": "78b44b00625d1cdf2809fc0628e3b78eb4e40cde", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08e026675ee38bb4ca81106e766a6456c8b7382e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=08e026675ee38bb4ca81106e766a6456c8b7382e", "patch": "@@ -3,7 +3,7 @@ error: `Umm` held across a suspend point, but should not be\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n-...\n+LL | \n LL |         other().await;\n    |         ------------- the value is held across this suspend point\n    |\n@@ -23,25 +23,5 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n \n-error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:18:26\n-   |\n-LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n-...\n-LL |         other().await;\n-   |         ------------- the value is held across this suspend point\n-   |\n-note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:18:26\n-   |\n-LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:18:26\n-   |\n-LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}