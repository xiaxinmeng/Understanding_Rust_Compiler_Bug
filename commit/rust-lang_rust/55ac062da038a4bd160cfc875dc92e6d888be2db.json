{"sha": "55ac062da038a4bd160cfc875dc92e6d888be2db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWMwNjJkYTAzOGE0YmQxNjBjZmM4NzVkYzkyZTZkODg4YmUyZGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T01:50:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T01:50:30Z"}, "message": "Add `--quiet` flag, remove `Plain` write mode\n\ncc #1976", "tree": {"sha": "2dd34f1a911b56cca8d9e3bc704b5c02c4268f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd34f1a911b56cca8d9e3bc704b5c02c4268f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ac062da038a4bd160cfc875dc92e6d888be2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ac062da038a4bd160cfc875dc92e6d888be2db", "html_url": "https://github.com/rust-lang/rust/commit/55ac062da038a4bd160cfc875dc92e6d888be2db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ac062da038a4bd160cfc875dc92e6d888be2db/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dba81bbbf0f352335b240fbf1cd64e5f3ca447f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dba81bbbf0f352335b240fbf1cd64e5f3ca447f", "html_url": "https://github.com/rust-lang/rust/commit/5dba81bbbf0f352335b240fbf1cd64e5f3ca447f"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "9577d041388ff4c81f8e82e2678ac16299091059", "filename": "src/bin/main.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=55ac062da038a4bd160cfc875dc92e6d888be2db", "patch": "@@ -25,10 +25,9 @@ use failure::err_msg;\n use getopts::{Matches, Options};\n \n use rustfmt::{\n-    emit_post_matter, emit_pre_matter, load_config, CliOptions, Config, FmtResult, WriteMode,\n-    WRITE_MODE_LIST,\n+    emit_post_matter, emit_pre_matter, format_and_emit_report, load_config, CliOptions, Config,\n+    FileName, FmtResult, Input, Summary, Verbosity, WriteMode, WRITE_MODE_LIST,\n };\n-use rustfmt::{format_and_emit_report, FileName, Input, Summary};\n \n fn main() {\n     env_logger::init();\n@@ -144,6 +143,7 @@ fn make_opts() -> Options {\n         \"Enables unstable features. Only available on nightly channel\",\n     );\n     opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n+    opts.optflag(\"q\", \"quiet\", \"Print less output\");\n     opts.optflag(\"V\", \"version\", \"Show version information\");\n     opts.optopt(\n         \"\",\n@@ -187,8 +187,9 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n             let options = CliOptions::from_matches(&matches)?;\n             let (mut config, _) = load_config(Some(Path::new(\".\")), Some(&options))?;\n \n-            // write_mode is always Plain for Stdin.\n-            config.set().write_mode(WriteMode::Plain);\n+            // write_mode is always Display for Stdin.\n+            config.set().write_mode(WriteMode::Display);\n+            config.set().verbose(Verbosity::Quiet);\n \n             // parse file_lines\n             if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n@@ -211,7 +212,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n             }\n             emit_post_matter(&config)?;\n \n-            Ok((WriteMode::Plain, error_summary))\n+            Ok((WriteMode::Display, error_summary))\n         }\n         Operation::Format {\n             files,\n@@ -231,7 +232,7 @@ fn format(\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(&options))?;\n \n-    if config.verbose() {\n+    if config.verbose() == Verbosity::Verbose {\n         if let Some(path) = config_path.as_ref() {\n             println!(\"Using rustfmt config file {}\", path.display());\n         }\n@@ -252,7 +253,7 @@ fn format(\n             let local_config = if config_path.is_none() {\n                 let (local_config, config_path) =\n                     load_config(Some(file.parent().unwrap()), Some(&options))?;\n-                if local_config.verbose() {\n+                if local_config.verbose() == Verbosity::Verbose {\n                     if let Some(path) = config_path {\n                         println!(\n                             \"Using rustfmt config file {} for {}\","}, {"sha": "5f6d9082ce87ffeee24e445c6d99169a680462a0", "filename": "src/config/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=55ac062da038a4bd160cfc875dc92e6d888be2db", "patch": "@@ -143,7 +143,7 @@ create_config! {\n         \"Skip formatting the specified files and directories.\";\n \n     // Not user-facing\n-    verbose: bool, false, false, \"Use verbose output\";\n+    verbose: Verbosity, Verbosity::Normal, false, \"How much to information to emit to the user\";\n     verbose_diff: bool, false, false, \"Emit verbose diffs\";\n     file_lines: FileLines, FileLines::all(), false,\n         \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n@@ -230,7 +230,7 @@ fn config_path(options: &CliOptions) -> Result<Option<PathBuf>, Error> {\n \n #[cfg(test)]\n mod test {\n-    use super::Config;\n+    use super::*;\n     use std::str;\n \n     #[allow(dead_code)]\n@@ -249,7 +249,8 @@ mod test {\n                 \"Require a specific version of rustfmt.\";\n             ignore: IgnoreList, IgnoreList::default(), false,\n                 \"Skip formatting the specified files and directories.\";\n-            verbose: bool, false, false, \"Use verbose output\";\n+            verbose: Verbosity, Verbosity::Normal, false,\n+                \"How much to information to emit to the user\";\n             file_lines: FileLines, FileLines::all(), false,\n                 \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n                     via the --file-lines option\";\n@@ -265,10 +266,10 @@ mod test {\n     #[test]\n     fn test_config_set() {\n         let mut config = Config::default();\n-        config.set().verbose(false);\n-        assert_eq!(config.verbose(), false);\n-        config.set().verbose(true);\n-        assert_eq!(config.verbose(), true);\n+        config.set().verbose(Verbosity::Quiet);\n+        assert_eq!(config.verbose(), Verbosity::Quiet);\n+        config.set().verbose(Verbosity::Normal);\n+        assert_eq!(config.verbose(), Verbosity::Normal);\n     }\n \n     #[test]"}, {"sha": "e18c88c302737432a6c76a2b8cf97ca572d69b7b", "filename": "src/config/options.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=55ac062da038a4bd160cfc875dc92e6d888be2db", "patch": "@@ -185,8 +185,6 @@ configuration_option_enum! { WriteMode:\n     // Displays how much of the input file was processed\n     Coverage,\n     // Unfancy stdout\n-    Plain,\n-    // Outputs a checkstyle XML file.\n     Checkstyle,\n     // Output the changed lines (for internal value only)\n     Modified,\n@@ -207,6 +205,14 @@ configuration_option_enum! { Color:\n     Auto,\n }\n \n+configuration_option_enum! { Verbosity:\n+    // Emit more.\n+    Verbose,\n+    Normal,\n+    // Emit as little as possible.\n+    Quiet,\n+}\n+\n #[derive(Deserialize, Serialize, Clone, Debug)]\n pub struct WidthHeuristics {\n     // Maximum width of the args of a function call before falling back\n@@ -322,6 +328,7 @@ impl ::std::str::FromStr for IgnoreList {\n #[derive(Clone, Debug, Default)]\n pub struct CliOptions {\n     skip_children: Option<bool>,\n+    quiet: bool,\n     verbose: bool,\n     verbose_diff: bool,\n     pub(super) config_path: Option<PathBuf>,\n@@ -336,6 +343,10 @@ impl CliOptions {\n     pub fn from_matches(matches: &Matches) -> FmtResult<CliOptions> {\n         let mut options = CliOptions::default();\n         options.verbose = matches.opt_present(\"verbose\");\n+        options.quiet = matches.opt_present(\"quiet\");\n+        if options.verbose && options.quiet {\n+            return Err(format_err!(\"Can't use both `--verbose` and `--quiet`\"));\n+        }\n         options.verbose_diff = matches.opt_present(\"verbose-diff\");\n \n         let unstable_features = matches.opt_present(\"unstable-features\");\n@@ -386,7 +397,13 @@ impl CliOptions {\n     }\n \n     pub fn apply_to(self, config: &mut Config) {\n-        config.set().verbose(self.verbose);\n+        if self.verbose {\n+            config.set().verbose(Verbosity::Verbose);\n+        } else if self.quiet {\n+            config.set().verbose(Verbosity::Quiet);\n+        } else {\n+            config.set().verbose(Verbosity::Normal);\n+        }\n         config.set().verbose_diff(self.verbose_diff);\n         config.set().file_lines(self.file_lines);\n         config.set().unstable_features(self.unstable_features);"}, {"sha": "fc86beeede46f418eb84f043b86b9e2e0b94aab8", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=55ac062da038a4bd160cfc875dc92e6d888be2db", "patch": "@@ -15,7 +15,7 @@ use std::io::{self, BufWriter, Read, Write};\n use std::path::Path;\n \n use checkstyle::output_checkstyle_file;\n-use config::{Config, NewlineStyle, WriteMode};\n+use config::{Config, NewlineStyle, Verbosity, WriteMode};\n use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n use syntax::codemap::FileName;\n \n@@ -150,11 +150,10 @@ where\n                 write_system_newlines(file, text, config)?;\n             }\n         }\n-        WriteMode::Plain => {\n-            write_system_newlines(out, text, config)?;\n-        }\n         WriteMode::Display | WriteMode::Coverage => {\n-            println!(\"{}:\\n\", filename);\n+            if config.verbose() != Verbosity::Quiet {\n+                println!(\"{}:\\n\", filename);\n+            }\n             write_system_newlines(out, text, config)?;\n         }\n         WriteMode::Diff => {"}, {"sha": "115b21f4b11f4549c13cdcb965f5899a2726c805", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ac062da038a4bd160cfc875dc92e6d888be2db/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=55ac062da038a4bd160cfc875dc92e6d888be2db", "patch": "@@ -64,7 +64,7 @@ use visitor::{FmtVisitor, SnippetProvider};\n \n pub use config::options::CliOptions;\n pub use config::summary::Summary;\n-pub use config::{file_lines, load_config, Config, WriteMode};\n+pub use config::{file_lines, load_config, Config, Verbosity, WriteMode};\n \n pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n@@ -331,7 +331,7 @@ fn should_emit_verbose<F>(path: &FileName, config: &Config, f: F)\n where\n     F: Fn(),\n {\n-    if config.verbose() && path.to_string() != STDIN {\n+    if config.verbose() == Verbosity::Verbose && path.to_string() != STDIN {\n         f();\n     }\n }\n@@ -351,9 +351,7 @@ where\n     // diff mode: check if any files are differing\n     let mut has_diff = false;\n \n-    // We always skip children for the \"Plain\" write mode, since there is\n-    // nothing to distinguish the nested module contents.\n-    let skip_children = config.skip_children() || config.write_mode() == config::WriteMode::Plain;\n+    let skip_children = config.skip_children();\n     for (path, module) in modules::list_files(krate, parse_session.codemap())? {\n         if (skip_children && path != *main_file) || config.ignore().skip_file(&path) {\n             continue;\n@@ -603,7 +601,8 @@ pub fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n     let input = Input::Text(snippet.into());\n     let mut config = config.clone();\n-    config.set().write_mode(config::WriteMode::Plain);\n+    config.set().write_mode(config::WriteMode::Display);\n+    config.set().verbose(Verbosity::Quiet);\n     config.set().hide_parse_errors(true);\n     match format_input(input, &config, Some(&mut out)) {\n         // `format_input()` returns an empty string on parsing error."}]}