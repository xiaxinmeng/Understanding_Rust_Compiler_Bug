{"sha": "e38bb1a963749ac4e94c13751233bdc61f20e84f", "node_id": "C_kwDOAAsO6NoAKGUzOGJiMWE5NjM3NDlhYzRlOTRjMTM3NTEyMzNiZGM2MWYyMGU4NGY", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-22T11:37:23Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-22T11:42:35Z"}, "message": "Apply `--fix` fixes", "tree": {"sha": "1e8f678eae951db8f1076373154928c0f5bc258b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8f678eae951db8f1076373154928c0f5bc258b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38bb1a963749ac4e94c13751233bdc61f20e84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38bb1a963749ac4e94c13751233bdc61f20e84f", "html_url": "https://github.com/rust-lang/rust/commit/e38bb1a963749ac4e94c13751233bdc61f20e84f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38bb1a963749ac4e94c13751233bdc61f20e84f/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6c3534d9648472940efe00d3d8fb9e15bdd1a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6c3534d9648472940efe00d3d8fb9e15bdd1a2", "html_url": "https://github.com/rust-lang/rust/commit/5c6c3534d9648472940efe00d3d8fb9e15bdd1a2"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "39ddf0d4d5ab6fe474543762ddd94d4bad1cf6d8", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38bb1a963749ac4e94c13751233bdc61f20e84f/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38bb1a963749ac4e94c13751233bdc61f20e84f/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=e38bb1a963749ac4e94c13751233bdc61f20e84f", "patch": "@@ -97,7 +97,7 @@ impl LintcheckConfig {\n             Some(&0) => {\n                 // automatic choice\n                 // Rayon seems to return thread count so half that for core count\n-                (rayon::current_num_threads() / 2) as usize\n+                rayon::current_num_threads() / 2\n             },\n             Some(&threads) => threads,\n             // no -j passed, use a single thread"}, {"sha": "b95e889a50fa1ff65aff0cf8bb1b6b10d04a35c6", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e38bb1a963749ac4e94c13751233bdc61f20e84f/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38bb1a963749ac4e94c13751233bdc61f20e84f/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=e38bb1a963749ac4e94c13751233bdc61f20e84f", "patch": "@@ -144,12 +144,12 @@ impl ClippyWarning {\n             }\n \n             let mut output = String::from(\"| \");\n-            let _ = write!(output, \"[`{}`]({}#L{})\", file_with_pos, file, self.line);\n+            let _ = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n             let _ = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n             output.push('\\n');\n             output\n         } else {\n-            format!(\"{} {} \\\"{}\\\"\\n\", file_with_pos, self.lint_type, self.message)\n+            format!(\"{file_with_pos} {} \\\"{}\\\"\\n\", self.lint_type, self.message)\n         }\n     }\n }\n@@ -161,10 +161,10 @@ fn get(path: &str) -> Result<ureq::Response, ureq::Error> {\n         match ureq::get(path).call() {\n             Ok(res) => return Ok(res),\n             Err(e) if retries >= MAX_RETRIES => return Err(e),\n-            Err(ureq::Error::Transport(e)) => eprintln!(\"Error: {}\", e),\n+            Err(ureq::Error::Transport(e)) => eprintln!(\"Error: {e}\"),\n             Err(e) => return Err(e),\n         }\n-        eprintln!(\"retrying in {} seconds...\", retries);\n+        eprintln!(\"retrying in {retries} seconds...\");\n         thread::sleep(Duration::from_secs(retries as u64));\n         retries += 1;\n     }\n@@ -181,11 +181,11 @@ impl CrateSource {\n                 let krate_download_dir = PathBuf::from(LINTCHECK_DOWNLOADS);\n \n                 // url to download the crate from crates.io\n-                let url = format!(\"https://crates.io/api/v1/crates/{}/{}/download\", name, version);\n-                println!(\"Downloading and extracting {} {} from {}\", name, version, url);\n+                let url = format!(\"https://crates.io/api/v1/crates/{name}/{version}/download\");\n+                println!(\"Downloading and extracting {name} {version} from {url}\");\n                 create_dirs(&krate_download_dir, &extract_dir);\n \n-                let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", name, version));\n+                let krate_file_path = krate_download_dir.join(format!(\"{name}-{version}.crate.tar.gz\"));\n                 // don't download/extract if we already have done so\n                 if !krate_file_path.is_file() {\n                     // create a file path to download and write the crate data into\n@@ -205,7 +205,7 @@ impl CrateSource {\n                 Crate {\n                     version: version.clone(),\n                     name: name.clone(),\n-                    path: extract_dir.join(format!(\"{}-{}/\", name, version)),\n+                    path: extract_dir.join(format!(\"{name}-{version}/\")),\n                     options: options.clone(),\n                 }\n             },\n@@ -218,12 +218,12 @@ impl CrateSource {\n                 let repo_path = {\n                     let mut repo_path = PathBuf::from(LINTCHECK_SOURCES);\n                     // add a -git suffix in case we have the same crate from crates.io and a git repo\n-                    repo_path.push(format!(\"{}-git\", name));\n+                    repo_path.push(format!(\"{name}-git\"));\n                     repo_path\n                 };\n                 // clone the repo if we have not done so\n                 if !repo_path.is_dir() {\n-                    println!(\"Cloning {} and checking out {}\", url, commit);\n+                    println!(\"Cloning {url} and checking out {commit}\");\n                     if !Command::new(\"git\")\n                         .arg(\"clone\")\n                         .arg(url)\n@@ -232,7 +232,7 @@ impl CrateSource {\n                         .expect(\"Failed to clone git repo!\")\n                         .success()\n                     {\n-                        eprintln!(\"Failed to clone {} into {}\", url, repo_path.display())\n+                        eprintln!(\"Failed to clone {url} into {}\", repo_path.display())\n                     }\n                 }\n                 // check out the commit/branch/whatever\n@@ -245,7 +245,7 @@ impl CrateSource {\n                     .expect(\"Failed to check out commit\")\n                     .success()\n                 {\n-                    eprintln!(\"Failed to checkout {} of repo at {}\", commit, repo_path.display())\n+                    eprintln!(\"Failed to checkout {commit} of repo at {}\", repo_path.display())\n                 }\n \n                 Crate {\n@@ -261,11 +261,11 @@ impl CrateSource {\n                 // as a result of this filter.\n                 let dest_crate_root = PathBuf::from(LINTCHECK_SOURCES).join(name);\n                 if dest_crate_root.exists() {\n-                    println!(\"Deleting existing directory at {:?}\", dest_crate_root);\n+                    println!(\"Deleting existing directory at {dest_crate_root:?}\");\n                     std::fs::remove_dir_all(&dest_crate_root).unwrap();\n                 }\n \n-                println!(\"Copying {:?} to {:?}\", path, dest_crate_root);\n+                println!(\"Copying {path:?} to {dest_crate_root:?}\");\n \n                 fn is_cache_dir(entry: &DirEntry) -> bool {\n                     std::fs::read(entry.path().join(\"CACHEDIR.TAG\"))\n@@ -389,10 +389,7 @@ impl Crate {\n \n         let all_output = Command::new(&cargo_clippy_path)\n             // use the looping index to create individual target dirs\n-            .env(\n-                \"CARGO_TARGET_DIR\",\n-                shared_target_dir.join(format!(\"_{:?}\", thread_index)),\n-            )\n+            .env(\"CARGO_TARGET_DIR\", shared_target_dir.join(format!(\"_{thread_index:?}\")))\n             .args(&cargo_clippy_args)\n             .current_dir(&self.path)\n             .output()\n@@ -422,8 +419,8 @@ impl Crate {\n             {\n                 let subcrate = &stderr[63..];\n                 println!(\n-                    \"ERROR: failed to apply some suggetion to {} / to (sub)crate {}\",\n-                    self.name, subcrate\n+                    \"ERROR: failed to apply some suggetion to {} / to (sub)crate {subcrate}\",\n+                    self.name\n                 );\n             }\n             // fast path, we don't need the warnings anyway\n@@ -459,7 +456,7 @@ fn read_crates(toml_path: &Path) -> (Vec<CrateSource>, RecursiveOptions) {\n     let toml_content: String =\n         std::fs::read_to_string(toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: SourceList =\n-        toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n+        toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{e}\", toml_path.display()));\n     // parse the hashmap of the toml file into a list of crates\n     let tomlcrates: Vec<TomlCrate> = crate_list.crates.into_values().collect();\n \n@@ -498,7 +495,7 @@ fn read_crates(toml_path: &Path) -> (Vec<CrateSource>, RecursiveOptions) {\n         if tk.versions.is_some() && (tk.git_url.is_some() || tk.git_hash.is_some())\n             || tk.git_hash.is_some() != tk.git_url.is_some()\n         {\n-            eprintln!(\"tomlkrate: {:?}\", tk);\n+            eprintln!(\"tomlkrate: {tk:?}\");\n             if tk.git_hash.is_some() != tk.git_url.is_some() {\n                 panic!(\"Error: Encountered TomlCrate with only one of git_hash and git_url!\");\n             }\n@@ -526,13 +523,13 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n     let mut stats: Vec<(&&String, &usize)> = counter.iter().map(|(lint, count)| (lint, count)).collect();\n     // sort by \"000{count} {clippy::lintname}\"\n     // to not have a lint with 200 and 2 warnings take the same spot\n-    stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n+    stats.sort_by_key(|(lint, count)| format!(\"{count:0>4}, {lint}\"));\n \n     let mut header = String::from(\"| lint                                               | count |\\n\");\n     header.push_str(\"| -------------------------------------------------- | ----- |\\n\");\n     let stats_string = stats\n         .iter()\n-        .map(|(lint, count)| format!(\"| {:<50} |  {:>4} |\\n\", lint, count))\n+        .map(|(lint, count)| format!(\"| {lint:<50} |  {count:>4} |\\n\"))\n         .fold(header, |mut table, line| {\n             table.push_str(&line);\n             table\n@@ -731,7 +728,7 @@ fn main() {\n     write!(text, \"{}\", all_msgs.join(\"\")).unwrap();\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n     for (cratename, msg) in ices.iter() {\n-        let _ = write!(text, \"{}: '{}'\", cratename, msg);\n+        let _ = write!(text, \"{cratename}: '{msg}'\");\n     }\n \n     println!(\"Writing logs to {}\", config.lintcheck_results_path.display());\n@@ -795,7 +792,7 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n         .iter()\n         .filter(|(new_key, _)| old_stats_deduped.get::<str>(new_key).is_none())\n         .for_each(|(new_key, new_value)| {\n-            println!(\"{} 0 => {}\", new_key, new_value);\n+            println!(\"{new_key} 0 => {new_value}\");\n         });\n \n     // list all changed counts (key is in both maps but value differs)\n@@ -804,7 +801,7 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n         .filter(|(new_key, _new_val)| old_stats_deduped.get::<str>(new_key).is_some())\n         .for_each(|(new_key, new_val)| {\n             let old_val = old_stats_deduped.get::<str>(new_key).unwrap();\n-            println!(\"{} {} => {}\", new_key, old_val, new_val);\n+            println!(\"{new_key} {old_val} => {new_val}\");\n         });\n \n     // list all gone counts (key is in old status but not in new stats)\n@@ -813,7 +810,7 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n         .filter(|(old_key, _)| new_stats_deduped.get::<&String>(old_key).is_none())\n         .filter(|(old_key, _)| lint_filter.is_empty() || lint_filter.contains(old_key))\n         .for_each(|(old_key, old_value)| {\n-            println!(\"{} {} => 0\", old_key, old_value);\n+            println!(\"{old_key} {old_value} => 0\");\n         });\n }\n "}]}