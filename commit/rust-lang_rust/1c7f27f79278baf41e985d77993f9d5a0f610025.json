{"sha": "1c7f27f79278baf41e985d77993f9d5a0f610025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjN2YyN2Y3OTI3OGJhZjQxZTk4NWQ3Nzk5M2Y5ZDVhMGY2MTAwMjU=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-06-03T13:53:12Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-28T12:33:35Z"}, "message": "Improve documentation of TrustedRandomAccess\n\nInclude new details regarding coercions to a subtype.\nThese conditions also explain why the previously removed implementations\nfor {array, vec, vec_deque}::IntoIter<T> were unsound, because they introduced\nan extra `T: Clone` for the TrustedRandomAccess impl, even though their parameter T\nis covariant.", "tree": {"sha": "8779aac1db1c3a37c4a90b288fbf5141f8de7786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8779aac1db1c3a37c4a90b288fbf5141f8de7786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7f27f79278baf41e985d77993f9d5a0f610025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7f27f79278baf41e985d77993f9d5a0f610025", "html_url": "https://github.com/rust-lang/rust/commit/1c7f27f79278baf41e985d77993f9d5a0f610025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7f27f79278baf41e985d77993f9d5a0f610025/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d8a324eb2ad2f4660c3ab065aa35de306cd822", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d8a324eb2ad2f4660c3ab065aa35de306cd822", "html_url": "https://github.com/rust-lang/rust/commit/a0d8a324eb2ad2f4660c3ab065aa35de306cd822"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "bf45f36dcf108246491b4769e69365745dbf3663", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1c7f27f79278baf41e985d77993f9d5a0f610025/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7f27f79278baf41e985d77993f9d5a0f610025/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=1c7f27f79278baf41e985d77993f9d5a0f610025", "patch": "@@ -433,28 +433,44 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///\n /// `size` may not be overridden.\n ///\n-/// `<Self as Iterator>::__iterator_get_unchecked` must be safe to call\n-/// provided the following conditions are met.\n+/// All subtypes and all supertypes of `Self` must also implement `TrustedRandomAccess`.\n+/// In particular, this means that types with non-invariant parameters usually can not have\n+/// an impl for `TrustedRandomAccess` that depends on any trait bounds on such parameters, except\n+/// for bounds that come from the respective struct/enum definition itself, or bounds involving\n+/// traits that themselves come with a guarantee similar to this one.\n+///\n+/// If `Self: Iterator`, then `<Self as Iterator>::__iterator_get_unchecked(&mut self, idx)`\n+/// must be safe to call provided the following conditions are met.\n ///\n /// 1. `0 <= idx` and `idx < self.size()`.\n-/// 2. If `self: !Clone`, then `get_unchecked` is never called with the same\n+/// 2. If `Self: !Clone`, then `self.__iterator_get_unchecked(idx)` is never called with the same\n ///    index on `self` more than once.\n-/// 3. After `self.get_unchecked(idx)` has been called then `next_back` will\n-///    only be called at most `self.size() - idx - 1` times.\n-/// 4. After `get_unchecked` is called, then only the following methods will be\n-///    called on `self`:\n-///     * `std::clone::Clone::clone()`\n-///     * `std::iter::Iterator::size_hint()`\n-///     * `std::iter::DoubleEndedIterator::next_back()`\n-///     * `std::iter::Iterator::__iterator_get_unchecked()`\n-///     * `std::iter::TrustedRandomAccess::size()`\n+/// 3. After `self.__iterator_get_unchecked(idx)` has been called, then `self.next_back()` will\n+///    only be called at most `self.size() - idx - 1` times. If `Self: Clone` and `self` is cloned,\n+///    then this number is calculated for `self` and its clone individually,\n+///    but `self.next_back()` calls that happened before the cloning count for both `self` and the clone.\n+/// 4. After `self.__iterator_get_unchecked(idx)` has been called, then only the following methods\n+///    will be called on `self` or on any new clones of `self`:\n+///     * `std::clone::Clone::clone`\n+///     * `std::iter::Iterator::size_hint`\n+///     * `std::iter::DoubleEndedIterator::next_back`\n+///     * `std::iter::Iterator::__iterator_get_unchecked`\n+///     * `std::iter::TrustedRandomAccess::size`\n+/// 5. If `T` is a subtype of `Self`, then `self` is allowed to be coerced\n+///    to `T`. If `self` is coerced to `T` after `self.__iterator_get_unchecked(idx)` has already\n+///    been called, then no methods except for the ones listed under 4. are allowed to be called\n+///    on the resulting value of type `T`, either. Multiple such coercion steps are allowed.\n+///    Regarding 2. and 3., the number of times `__iterator_get_unchecked(idx)` or `next_back()` is\n+///    called on `self` and the resulting value of type `T` (and on further coercion results with\n+///    sub-subtypes) are added together and their sums must not exceed the specified bounds.\n ///\n /// Further, given that these conditions are met, it must guarantee that:\n ///\n /// * It does not change the value returned from `size_hint`\n /// * It must be safe to call the methods listed above on `self` after calling\n-///   `get_unchecked`, assuming that the required traits are implemented.\n-/// * It must also be safe to drop `self` after calling `get_unchecked`.\n+///   `self.__iterator_get_unchecked(idx)`, assuming that the required traits are implemented.\n+/// * It must also be safe to drop `self` after calling `self.__iterator_get_unchecked(idx)`.\n+/// * If `T` is a subtype of `Self`, then it must be safe to coerce `self` to `T`.\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n #[rustc_specialization_trait]"}]}