{"sha": "9f75dbfa69ba8508fa7765305f75cd96dff06078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzVkYmZhNjliYTg1MDhmYTc3NjUzMDVmNzVjZDk2ZGZmMDYwNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-29T13:34:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-29T13:34:20Z"}, "message": "Auto merge of #85767 - lqd:stackless_span_stacks, r=oli-obk\n\nA bit more polish on const eval errors\n\nThis PR adds a bit more polish to the const eval errors:\n- a slight improvement to the PME messages from #85633: I mentioned there that the erroneous item's paths were dependent on the environment, and could be displayed fully qualified or not. This can obscure the items when they come from a dependency. This PR uses the pretty-printing code ensuring the items' paths are not trimmed.\n- whenever there are generics involved in an item where const evaluation errors out, the error message now displays the instance and its const arguments, so that we can see which instantiated item and compile-time values lead to the error.\n\nSo we get this slight improvement for our beloved `stdarch` example, on nightly:\n```\nerror[E0080]: evaluation of constant value failed\n --> ./stdarch/crates/core_arch/src/macros.rs:8:9\n  |\n8 |         assert!(IMM >= MIN && IMM <= MAX, \"IMM value not in expected range\");\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'IMM value not in expected range', /rustc/9111b8ae9793f18179a1336417618fc07a9cac85/library/core/src/../../stdarch/crates/core_arch/src/macros.rs:8:9\n  |\n```\n\nto this PR's:\n\n```\nerror[E0080]: evaluation of `core::core_arch::macros::ValidateConstImm::<51_i32, 0_i32, 15_i32>::VALID` failed\n --> ./stdarch/crates/core_arch/src/macros.rs:8:9\n  |\n8 |         assert!(IMM >= MIN && IMM <= MAX, \"IMM value not in expected range\");\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'IMM value not in expected range', ./stdarch/crates/core_arch/src/macros.rs:8:9\n  |\n```\n\nwith this PR.\n\nOf course this is an idea from Oli, so maybe r? `@oli-obk` if they have the time.", "tree": {"sha": "49cd57bf8b95fb49d72978f90670027826a4e49d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cd57bf8b95fb49d72978f90670027826a4e49d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f75dbfa69ba8508fa7765305f75cd96dff06078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f75dbfa69ba8508fa7765305f75cd96dff06078", "html_url": "https://github.com/rust-lang/rust/commit/9f75dbfa69ba8508fa7765305f75cd96dff06078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f75dbfa69ba8508fa7765305f75cd96dff06078/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77b1a5973521bce26d92d346304cfaca05ae79e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77b1a5973521bce26d92d346304cfaca05ae79e", "html_url": "https://github.com/rust-lang/rust/commit/f77b1a5973521bce26d92d346304cfaca05ae79e"}, {"sha": "c31ca9a42c0dd8a8c16b74c9db3f5376aabfcc81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31ca9a42c0dd8a8c16b74c9db3f5376aabfcc81", "html_url": "https://github.com/rust-lang/rust/commit/c31ca9a42c0dd8a8c16b74c9db3f5376aabfcc81"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "460fea37461e8d998e7d447d79a0dc493cc6b715", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n use rustc_target::abi::{Abi, LayoutOf};\n+use std::borrow::Cow;\n use std::convert::TryInto;\n \n pub fn note_on_undefined_behavior_error() -> &'static str {\n@@ -328,11 +329,22 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 ))\n             } else {\n                 let msg = if is_static {\n-                    \"could not evaluate static initializer\"\n+                    Cow::from(\"could not evaluate static initializer\")\n                 } else {\n-                    \"evaluation of constant value failed\"\n+                    // If the current item has generics, we'd like to enrich the message with the\n+                    // instance and its substs: to show the actual compile-time values, in addition to\n+                    // the expression, leading to the const eval error.\n+                    let instance = &key.value.instance;\n+                    if !instance.substs.is_empty() {\n+                        let instance = with_no_trimmed_paths(|| instance.to_string());\n+                        let msg = format!(\"evaluation of `{}` failed\", instance);\n+                        Cow::from(msg)\n+                    } else {\n+                        Cow::from(\"evaluation of constant value failed\")\n+                    }\n                 };\n-                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), msg))\n+\n+                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), &msg))\n             }\n         }\n         Ok(mplace) => {"}, {"sha": "31cb5484bcefb3ae842bbacbeeb41a857941a3fa", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -194,6 +194,7 @@ use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n@@ -444,12 +445,10 @@ fn collect_items_rec<'tcx>(\n     // defined in the local crate.\n     if tcx.sess.diagnostic().err_count() > error_count && starting_point.node.krate() != LOCAL_CRATE\n     {\n+        let formatted_item = with_no_trimmed_paths(|| starting_point.node.to_string());\n         tcx.sess.span_note_without_error(\n             starting_point.span,\n-            &format!(\n-                \"the above error was encountered while instantiating `{}`\",\n-                starting_point.node\n-            ),\n+            &format!(\"the above error was encountered while instantiating `{}`\", formatted_item),\n         );\n     }\n "}, {"sha": "8167d785d7a8e5cb9b7272acd76f0357b3152336", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n \n fn test<const N: usize>() -> [u8; N - 1] {\n-    //~^ ERROR evaluation of constant\n+    //~^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n     todo!()\n }\n "}, {"sha": "31ccf9796947267784d546bf3e51492a372209a2", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `test::<0_usize>::{constant#0}` failed\n   --> $DIR/from-sig-fail.rs:4:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] {"}, {"sha": "1f2313a6028d1bc4678687abf76dd65300679a4e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -1,10 +1,10 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/simple_fail.rs:9:48\n+error[E0080]: evaluation of `test::<0_usize>::{constant#0}` failed\n+  --> $DIR/simple_fail.rs:10:48\n    |\n LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n    |                                                ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `Arr::<0_usize>::{constant#0}` failed\n   --> $DIR/simple_fail.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "1aa66f9a8ba8988db7cec68c29879b01fe0c5bb6", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -8,7 +8,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/simple_fail.rs:9:48\n+  --> $DIR/simple_fail.rs:10:48\n    |\n LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n    |                                                ^ cannot perform const operation using `N`"}, {"sha": "f08d2495b4dd9299a7761d18b287c134ee7952d7", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -3,12 +3,13 @@\n #![cfg_attr(full, feature(const_evaluatable_checked))]\n #![allow(incomplete_features)]\n \n-type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n+type Arr<const N: usize> = [u8; N - 1];\n //[min]~^ ERROR generic parameters may not be used in const operations\n+//[full]~^^ ERROR evaluation of `Arr::<0_usize>::{constant#0}` failed\n \n fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n //[min]~^ ERROR generic parameters may not be used in const operations\n-//[full]~^^ ERROR evaluation of constant\n+//[full]~^^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n     todo!()\n }\n "}, {"sha": "d34ac773da25e039c9c1b2a08704646d89ccd22a", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -10,7 +10,7 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `foo::<()>` failed\n   --> $DIR/issue-50814-2.rs:19:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR"}, {"sha": "dd8d6bf839a04e26cc83e1372be38588f1e70269", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -10,7 +10,7 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `foo::<i32>` failed\n   --> $DIR/issue-50814.rs:21:6\n    |\n LL |     &Sum::<U8,U8>::MAX"}, {"sha": "c36d7c172152674e1285f3c222035672abe2b8ce", "filename": "src/test/ui/consts/const-eval/issue-85155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -1,10 +1,10 @@\n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `post_monomorphization_error::ValidateConstImm::<2_i32, 0_i32, 1_i32>::VALID` failed\n   --> $DIR/auxiliary/post_monomorphization_error.rs:7:17\n    |\n LL |         let _ = 1 / ((IMM >= MIN && IMM <= MAX) as usize);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to divide `1_usize` by zero\n \n-note: the above error was encountered while instantiating `fn stdarch_intrinsic::<2_i32>`\n+note: the above error was encountered while instantiating `fn post_monomorphization_error::stdarch_intrinsic::<2_i32>`\n   --> $DIR/issue-85155.rs:19:5\n    |\n LL |     post_monomorphization_error::stdarch_intrinsic::<2>();"}, {"sha": "961234cf7e8540b9369cc5bf1fc6e0145f3d3ac2", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f75dbfa69ba8508fa7765305f75cd96dff06078/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=9f75dbfa69ba8508fa7765305f75cd96dff06078", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n@@ -35,7 +35,7 @@ LL |   pub trait Debug {\n    = note: the following trait bounds were not satisfied:\n            `dyn Debug: Sized`\n \n-error[E0080]: evaluation of constant value failed\n+error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()"}]}