{"sha": "ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2E1YzUxOGE0ZTIwZGRhY2FkMDVkN2E4YTY3NzA0Y2EyYjJhOWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-20T11:55:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-20T11:55:17Z"}, "message": "Merge #7724\n\n7724: Consider import prefix config settings during flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nFixes #7666\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "948664f21dc2a9f8e9134b8731a0998c6cb6e5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/948664f21dc2a9f8e9134b8731a0998c6cb6e5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMPilCRBK7hj4Ov3rIwAAdHIIAAAnhFXK9RYFK8EgkGI0chv+\nFeNrBlFi8DvPW6qyLRPwh3ogLqRmbPPzZxqHx6lT3zZbLotYJwbjfYVhEwpCT2uH\nFuuG7r58CRoTK9zpIQVgOTb11FZDUR4NARVxAcM+lEeCLq1tlTExo4aefmxbmjt+\nHWKZcxtesLNV8ocYMoL/Qh+yZT+qyP1CONavqr6Ce20iGUQx7nIDn/KFecWmz+Hz\ntOzX+5tbQ96HfdX3nXC/2JZaseZd+MHO4ZW9TkJYAumEvxjz9EdHW3IcsCVLca8g\nvggwe4tafPP4yEr07jZBdilKvVFR1ovTxD3PyKk3XH2JCBzEBXuiuM2TjSxgahM=\n=8ciJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 948664f21dc2a9f8e9134b8731a0998c6cb6e5e2\nparent 23f0d4baa1af45b77842cd877140743343b3234e\nparent 4fe5786c0cdab1273685a0668107915b843bcaf6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613822117 +0000\ncommitter GitHub <noreply@github.com> 1613822117 +0000\n\nMerge #7724\n\n7724: Consider import prefix config settings during flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nFixes #7666\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "html_url": "https://github.com/rust-lang/rust/commit/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23f0d4baa1af45b77842cd877140743343b3234e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f0d4baa1af45b77842cd877140743343b3234e", "html_url": "https://github.com/rust-lang/rust/commit/23f0d4baa1af45b77842cd877140743343b3234e"}, {"sha": "4fe5786c0cdab1273685a0668107915b843bcaf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe5786c0cdab1273685a0668107915b843bcaf6", "html_url": "https://github.com/rust-lang/rust/commit/4fe5786c0cdab1273685a0668107915b843bcaf6"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "021e4ad314282ab566eb76395f941c0770bd6d81", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "patch": "@@ -2076,7 +2076,7 @@ impl Callable {\n }\n \n /// For IDE only\n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq, Hash)]\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),"}, {"sha": "da8375af9757ec2e1a4cbd515cc8dcb05fa3dee7", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "patch": "@@ -53,6 +53,7 @@ use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n };\n+use rustc_hash::FxHashSet;\n use syntax::{AstNode, SyntaxNode, T};\n use test_utils::mark;\n \n@@ -91,8 +92,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         position_for_import(ctx, Some(import_assets.import_candidate()))?,\n         &ctx.sema,\n     )?;\n+\n+    let scope_definitions = scope_definitions(ctx);\n     let mut all_mod_paths = import_assets\n-        .search_for_relative_paths(&ctx.sema)\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n         .into_iter()\n         .map(|(mod_path, item_in_ns)| {\n             let scope_item = match item_in_ns {\n@@ -102,6 +105,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             };\n             (mod_path, scope_item)\n         })\n+        .filter(|(_, proposed_def)| !scope_definitions.contains(proposed_def))\n         .collect::<Vec<_>>();\n     all_mod_paths.sort_by_cached_key(|(mod_path, _)| {\n         compute_fuzzy_completion_order_key(mod_path, &user_input_lowercased)\n@@ -125,6 +129,14 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     Some(())\n }\n \n+fn scope_definitions(ctx: &CompletionContext) -> FxHashSet<ScopeDef> {\n+    let mut scope_definitions = FxHashSet::default();\n+    ctx.scope.process_all_names(&mut |_, scope_def| {\n+        scope_definitions.insert(scope_def);\n+    });\n+    scope_definitions\n+}\n+\n pub(crate) fn position_for_import<'a>(\n     ctx: &'a CompletionContext,\n     import_candidate: Option<&ImportCandidate>,\n@@ -192,7 +204,7 @@ mod tests {\n \n     use crate::{\n         item::CompletionKind,\n-        test_utils::{check_edit, completion_list},\n+        test_utils::{check_edit, check_edit_with_config, completion_list, TEST_CONFIG},\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -685,4 +697,82 @@ fn main() {}\n             expect![[]],\n         );\n     }\n+\n+    #[test]\n+    fn prefix_config_usage() {\n+        let fixture = r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Item;\n+    }\n+}\n+\n+use crate::foo::bar;\n+\n+fn main() {\n+    Ite$0\n+}\"#;\n+        let mut config = TEST_CONFIG;\n+\n+        config.insert_use.prefix_kind = hir::PrefixKind::ByCrate;\n+        check_edit_with_config(\n+            config.clone(),\n+            \"Item\",\n+            fixture,\n+            r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Item;\n+    }\n+}\n+\n+use crate::foo::bar::{self, Item};\n+\n+fn main() {\n+    Item\n+}\"#,\n+        );\n+\n+        config.insert_use.prefix_kind = hir::PrefixKind::BySelf;\n+        check_edit_with_config(\n+            config.clone(),\n+            \"Item\",\n+            fixture,\n+            r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Item;\n+    }\n+}\n+\n+use crate::foo::bar;\n+\n+use self::foo::bar::Item;\n+\n+fn main() {\n+    Item\n+}\"#,\n+        );\n+\n+        config.insert_use.prefix_kind = hir::PrefixKind::Plain;\n+        check_edit_with_config(\n+            config,\n+            \"Item\",\n+            fixture,\n+            r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Item;\n+    }\n+}\n+\n+use foo::bar::Item;\n+\n+use crate::foo::bar;\n+\n+fn main() {\n+    Item\n+}\"#,\n+        );\n+    }\n }"}, {"sha": "76f31de9e38ceb067bdf03f6c3caf98732e2b3e3", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=ba3a5c518a4e20ddacad05d7a8a67704ca2b2a9a", "patch": "@@ -151,7 +151,7 @@ pub fn resolve_completion_edits(\n     let import_path = imports_locator::find_exact_imports(&ctx.sema, current_crate, imported_name)\n         .filter_map(|candidate| {\n             let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n-            current_module.find_use_path(db, item)\n+            current_module.find_use_path_prefixed(db, item, config.insert_use.prefix_kind)\n         })\n         .find(|mod_path| mod_path.to_string() == full_import_path)?;\n "}]}