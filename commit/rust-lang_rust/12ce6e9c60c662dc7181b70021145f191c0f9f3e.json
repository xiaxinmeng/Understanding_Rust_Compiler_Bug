{"sha": "12ce6e9c60c662dc7181b70021145f191c0f9f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2U2ZTljNjBjNjYyZGM3MTgxYjcwMDIxMTQ1ZjE5MWMwZjlmM2U=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-02T18:34:03Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-03T14:43:04Z"}, "message": "Detect bare blocks with type ascription that were meant to be a `struct` literal\n\nAddress part of #34255.\n\nPotential improvement: silence the other knock down errors in\n`issue-34255-1.rs`.", "tree": {"sha": "2d25c254eeec0782df8dced3f020e4cff9ef6785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d25c254eeec0782df8dced3f020e4cff9ef6785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ce6e9c60c662dc7181b70021145f191c0f9f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ce6e9c60c662dc7181b70021145f191c0f9f3e", "html_url": "https://github.com/rust-lang/rust/commit/12ce6e9c60c662dc7181b70021145f191c0f9f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ce6e9c60c662dc7181b70021145f191c0f9f3e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcce644119cf4e8e36001368e514bb5ed67cb855", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcce644119cf4e8e36001368e514bb5ed67cb855", "html_url": "https://github.com/rust-lang/rust/commit/fcce644119cf4e8e36001368e514bb5ed67cb855"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "5e1548056440c52359790708ca46c65407cb1ae2", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -565,6 +565,14 @@ pub struct Block {\n     pub rules: BlockCheckMode,\n     pub span: Span,\n     pub tokens: Option<LazyTokenStream>,\n+    /// The following *isn't* a parse error, but will cause multiple errors in following stages.\n+    /// ```\n+    /// let x = {\n+    ///     foo: var\n+    /// };\n+    /// ```\n+    /// #34255\n+    pub could_be_bare_literal: bool,\n }\n \n /// A match pattern."}, {"sha": "4d9fc6554e750dffd4c7738ebfc1adb22342622b", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -949,7 +949,7 @@ pub fn noop_visit_mt<T: MutVisitor>(MutTy { ty, mutbl: _ }: &mut MutTy, vis: &mu\n }\n \n pub fn noop_visit_block<T: MutVisitor>(block: &mut P<Block>, vis: &mut T) {\n-    let Block { id, stmts, rules: _, span, tokens } = block.deref_mut();\n+    let Block { id, stmts, rules: _, span, tokens, could_be_bare_literal: _ } = block.deref_mut();\n     vis.visit_id(id);\n     stmts.flat_map_in_place(|stmt| vis.flat_map_stmt(stmt));\n     vis.visit_span(span);"}, {"sha": "bcf95719db56b839331c689a787245e5c45409f2", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -102,6 +102,7 @@ fn call_unreachable(cx: &ExtCtxt<'_>, span: Span) -> P<ast::Expr> {\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n         tokens: None,\n+        could_be_bare_literal: false,\n     }))\n }\n "}, {"sha": "8508b3b7ae6edb9a273d9f05e16950b75096e030", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -867,6 +867,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             rules: BlockCheckMode::Unsafe(UnsafeSource::CompilerGenerated),\n             span: self.macsp,\n             tokens: None,\n+            could_be_bare_literal: false,\n         }));\n \n         let ident = Ident::from_str_and_span(\"args\", self.macsp);"}, {"sha": "2cc15b3e53f460b93ba8e686e6835fa20a8c0174", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -197,6 +197,7 @@ impl<'a> ExtCtxt<'a> {\n             rules: BlockCheckMode::Default,\n             span,\n             tokens: None,\n+            could_be_bare_literal: false,\n         })\n     }\n "}, {"sha": "a5f0c01477898dd6b2248a078026687c7b4338ad", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -810,6 +810,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 id: resolver.next_node_id(),\n                 span: rustc_span::DUMMY_SP,\n                 tokens: None,\n+                could_be_bare_literal: false,\n             }\n         }\n "}, {"sha": "59e0feb67c5f0c3fa8f8d4980a5c52ef76237028", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -446,11 +446,13 @@ impl<'a> Parser<'a> {\n                         )\n                         .emit();\n                     *self = snapshot;\n-                    Ok(self.mk_block(\n+                    let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n                         lo.to(self.prev_token.span),\n-                    ))\n+                    );\n+                    tail.could_be_bare_literal = true;\n+                    Ok(tail)\n                 }\n                 (Err(mut err), Ok(tail)) => {\n                     // We have a block tail that contains a somehow valid type ascription expr.\n@@ -463,7 +465,10 @@ impl<'a> Parser<'a> {\n                     self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n                     Err(err)\n                 }\n-                (Ok(_), Ok(tail)) => Ok(tail),\n+                (Ok(_), Ok(mut tail)) => {\n+                    tail.could_be_bare_literal = true;\n+                    Ok(tail)\n+                }\n             });\n         }\n         None"}, {"sha": "25dcb4a112de1c7e030498a7167e97be22526055", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -574,7 +574,14 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_block(&self, stmts: Vec<Stmt>, rules: BlockCheckMode, span: Span) -> P<Block> {\n-        P(Block { stmts, id: DUMMY_NODE_ID, rules, span, tokens: None })\n+        P(Block {\n+            stmts,\n+            id: DUMMY_NODE_ID,\n+            rules,\n+            span,\n+            tokens: None,\n+            could_be_bare_literal: false,\n+        })\n     }\n \n     pub(super) fn mk_stmt(&self, span: Span, kind: StmtKind) -> Stmt {"}, {"sha": "fed739d186c443538971883aa00522ef962d6da3", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -383,6 +383,11 @@ struct DiagnosticMetadata<'ast> {\n     /// Only used for better errors on `fn(): fn()`.\n     current_type_ascription: Vec<Span>,\n \n+    /// Only used for better errors on `let x = { foo: bar };`.\n+    /// In the case of a parse error with `let x = { foo: bar, };`, this isn't needed, it's only\n+    /// needed for cases where this parses as a correct type ascription.\n+    current_block_could_be_bare_struct_literal: Option<Span>,\n+\n     /// Only used for better errors on `let <pat>: <expr, not type>;`.\n     current_let_binding: Option<(Span, Option<Span>, Option<Span>)>,\n \n@@ -1859,6 +1864,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let instead = res.is_some();\n                 let suggestion =\n                     if res.is_none() { this.report_missing_type_error(path) } else { None };\n+                // get_from_node_id\n \n                 this.r.use_injections.push(UseError {\n                     err,\n@@ -2242,6 +2248,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n         }\n \n+        let prev = self.diagnostic_metadata.current_block_could_be_bare_struct_literal.take();\n+        if let (true, [Stmt { kind: StmtKind::Expr(expr), .. }]) =\n+            (block.could_be_bare_literal, &block.stmts[..])\n+        {\n+            if let ExprKind::Type(..) = expr.kind {\n+                self.diagnostic_metadata.current_block_could_be_bare_struct_literal =\n+                    Some(block.span);\n+            }\n+        }\n         // Descend into the block.\n         for stmt in &block.stmts {\n             if let StmtKind::Item(ref item) = stmt.kind {\n@@ -2255,6 +2270,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             self.visit_stmt(stmt);\n         }\n+        self.diagnostic_metadata.current_block_could_be_bare_struct_literal = prev;\n \n         // Move back up.\n         self.parent_scope.module = orig_module;"}, {"sha": "b2c0c7874655e0d6fe9fd6bf7a412ab1b5a4fb3b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -207,6 +207,16 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let code = source.error_code(res.is_some());\n         let mut err = self.r.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n+        if let Some(span) = self.diagnostic_metadata.current_block_could_be_bare_struct_literal {\n+            err.multipart_suggestion(\n+                \"you might have meant to write a `struct` literal\",\n+                vec![\n+                    (span.shrink_to_lo(), \"{ SomeStruct \".to_string()),\n+                    (span.shrink_to_hi(), \"}\".to_string()),\n+                ],\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n         match (source, self.diagnostic_metadata.in_if_condition) {\n             (PathSource::Expr(_), Some(Expr { span, kind: ExprKind::Assign(..), .. })) => {\n                 err.span_suggestion_verbose("}, {"sha": "8b0cebfa60e2c09251e99abcc6f30550c29fc343", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -106,6 +106,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n                     tokens: None,\n+                    could_be_bare_literal: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             }"}, {"sha": "43f0fbbc4e387d266d8bddbc87fe7a6138de3c95", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -3,6 +3,16 @@ error[E0425]: cannot find value `input_cells` in this scope\n    |\n LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n+   |\n+help: you might have meant to write a `struct` literal\n+   |\n+LL ~     pub fn new() -> Self { SomeStruct {\n+LL |         input_cells: Vec::new()\n+LL |\n+LL |\n+LL |\n+LL ~     }}\n+   |\n \n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-34255-1.rs:7:27"}, {"sha": "34d73a77fd3d4fa6b41c5a7737b316865febcb13", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce6e9c60c662dc7181b70021145f191c0f9f3e/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=12ce6e9c60c662dc7181b70021145f191c0f9f3e", "patch": "@@ -160,6 +160,7 @@ fn rewrite_closure_with_block(\n             .first()\n             .map(|attr| attr.span.to(body.span))\n             .unwrap_or(body.span),\n+        could_be_bare_literal: false,\n     };\n     let block = crate::expr::rewrite_block_with_visitor(\n         context,"}]}