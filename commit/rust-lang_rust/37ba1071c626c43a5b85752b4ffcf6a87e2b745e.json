{"sha": "37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmExMDcxYzYyNmM0M2E1Yjg1NzUyYjRmZmNmNmE4N2UyYjc0NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T01:59:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T01:59:28Z"}, "message": "Auto merge of #54671 - petrochenkov:extpre2015, r=nikomatsakis\n\nresolve: Scale back hard-coded extern prelude additions on 2015 edition\n\nhttps://github.com/rust-lang/rust/pull/54404 stabilized `feature(extern_prelude)` on 2015 edition, including the hard-coded parts not passed with `--extern`.\nFirst of all, I'd want to confirm that this is intended stabilization, rather than a part of the \"extended beta\" scheme that's going to be reverted before releasing stable.\n(EDIT: to clarify - this is a question, I'm \\*asking\\* for confirmation, rather than give it.)\n\nSecond, on 2015 edition extern prelude is not so fundamentally tied to imports and is a mere convenience, so this PR scales them back to the uncontroversial subset.\nThe \"uncontroversial subset\" means that if libcore is injected it brings `core` into prelude, if libstd is injected it brings `std` and `core` into prelude.\nOn 2015 edition this can be implemented through the library prelude (rather than hard-coding in the compiler) right now, I'll do it in a follow-up PR.\n\nUPDATE: The change is done for both 2015 and 2018 editions now as discussed below.\n\nCloses https://github.com/rust-lang/rust/issues/53166", "tree": {"sha": "fb99c20ee80261584dc85fb47ac322f6e0fb1076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb99c20ee80261584dc85fb47ac322f6e0fb1076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "html_url": "https://github.com/rust-lang/rust/commit/37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ca85becd45a4115bd5a1b367a1667c06f0906b", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ca85becd45a4115bd5a1b367a1667c06f0906b", "html_url": "https://github.com/rust-lang/rust/commit/01ca85becd45a4115bd5a1b367a1667c06f0906b"}, {"sha": "894a8d574d0851edf70eba1404a97df535d31e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/894a8d574d0851edf70eba1404a97df535d31e29", "html_url": "https://github.com/rust-lang/rust/commit/894a8d574d0851edf70eba1404a97df535d31e29"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "1ca60d54f7a3d0c935d15c444bb6ffd5f2367806", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -35,7 +35,6 @@ use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n-use syntax::symbol::Symbol;\n use syntax::parse::{self, ParseSess};\n use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n@@ -166,10 +165,6 @@ pub struct Session {\n \n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n-\n-    /// All the crate names specified with `--extern`, and the builtin ones.\n-    /// Starting with the Rust 2018 edition, absolute paths resolve in this set.\n-    pub extern_prelude: FxHashSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1137,18 +1132,6 @@ pub fn build_session_(\n         CguReuseTracker::new_disabled()\n     };\n \n-\n-    let mut extern_prelude: FxHashSet<Symbol> =\n-        sopts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n-\n-    // HACK(eddyb) this ignores the `no_{core,std}` attributes.\n-    // FIXME(eddyb) warn (somewhere) if core/std is used with `no_{core,std}`.\n-    // if !attr::contains_name(&krate.attrs, \"no_core\") {\n-    // if !attr::contains_name(&krate.attrs, \"no_std\") {\n-    extern_prelude.insert(Symbol::intern(\"core\"));\n-    extern_prelude.insert(Symbol::intern(\"std\"));\n-    extern_prelude.insert(Symbol::intern(\"meta\"));\n-\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1224,7 +1207,6 @@ pub fn build_session_(\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps: FxHashMap(),\n-        extern_prelude,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "1bccd05af83237f82e1b1823d57bea542ca8d20e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -936,8 +936,8 @@ pub struct GlobalCtxt<'tcx> {\n     freevars: FxHashMap<DefId, Lrc<Vec<hir::Freevar>>>,\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n-\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    pub extern_prelude: FxHashSet<ast::Name>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n@@ -1223,6 +1223,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .into_iter()\n                     .map(|(id, sp)| (hir.local_def_id(id), sp))\n                     .collect(),\n+            extern_prelude: resolutions.extern_prelude,\n             hir,\n             def_path_hash_to_def_id,\n             queries: query::Queries::new("}, {"sha": "2e635c6ecdecb7475de13c383f96a1eac5f26332", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // printing the `CrateRoot` so we don't prepend a `crate::` to paths.\n                 let mut is_prelude_crate = false;\n                 if let DefPathData::CrateRoot = self.def_key(parent_did).disambiguated_data.data {\n-                    if self.sess.extern_prelude.contains(&data.as_interned_str().as_symbol()) {\n+                    if self.extern_prelude.contains(&data.as_interned_str().as_symbol()) {\n                         is_prelude_crate = true;\n                     }\n                 }"}, {"sha": "45a70be5842fcab3818ae82f235ab89e35e91a61", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -36,7 +36,7 @@ use ty::subst::{Subst, Substs};\n use ty::util::{IntTypeExt, Discr};\n use ty::walk::TypeWalker;\n use util::captures::Captures;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n+use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n use arena::SyncDroplessArena;\n use session::DataTypeKind;\n \n@@ -141,6 +141,7 @@ pub struct Resolutions {\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n+    pub extern_prelude: FxHashSet<Name>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]"}, {"sha": "4f48b00c93707a7aa05dfbc7a8fd8e8fa860403b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -790,6 +790,7 @@ where\n                 trait_map: resolver.trait_map,\n                 maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n                 maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n+                extern_prelude: resolver.extern_prelude,\n             },\n \n             analysis: ty::CrateAnalysis {"}, {"sha": "74d1ae96e794f6c486a4485028ed5c49ca157322", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // Need to clone else we can't call `resolve_path` without a borrow error. We also store\n         // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n         // each time.\n-        let external_crate_names: BTreeSet<Symbol> = self.resolver.session.extern_prelude\n+        let external_crate_names: BTreeSet<Symbol> = self.resolver.extern_prelude\n             .clone().drain().collect();\n \n         // Insert a new path segment that we can replace."}, {"sha": "86fe584dc3a40fe937c4199474e1958402d8602c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -1360,6 +1360,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n+    pub extern_prelude: FxHashSet<Name>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1676,6 +1677,19 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n+        let mut extern_prelude: FxHashSet<Name> =\n+            session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n+\n+        if !attr::contains_name(&krate.attrs, \"no_core\") {\n+            extern_prelude.insert(Symbol::intern(\"core\"));\n+            if !attr::contains_name(&krate.attrs, \"no_std\") {\n+                extern_prelude.insert(Symbol::intern(\"std\"));\n+                if session.rust_2018() {\n+                    extern_prelude.insert(Symbol::intern(\"meta\"));\n+                }\n+            }\n+        }\n+\n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n@@ -1694,6 +1708,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             // AST.\n             graph_root,\n             prelude: None,\n+            extern_prelude,\n \n             has_self: FxHashSet(),\n             field_names: FxHashMap(),\n@@ -1966,7 +1981,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if !module.no_implicit_prelude {\n             // `record_used` means that we don't try to load crates during speculative resolution\n-            if record_used && ns == TypeNS && self.session.extern_prelude.contains(&ident.name) {\n+            if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n                 let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(&crate_root);\n@@ -4018,7 +4033,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.session.extern_prelude.iter().cloned());\n+                            names.extend(self.extern_prelude.iter().cloned());\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4464,7 +4479,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         );\n \n         if self.session.rust_2018() {\n-            for &name in &self.session.extern_prelude {\n+            let extern_prelude_names = self.extern_prelude.clone();\n+            for &name in extern_prelude_names.iter() {\n                 let ident = Ident::with_empty_ctxt(name);\n                 match self.crate_loader.maybe_process_path_extern(name, ident.span) {\n                     Some(crate_id) => {"}, {"sha": "6c57e6c88abebd014fae159b31b32e645b6c8291", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -692,7 +692,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude && self.session.extern_prelude.contains(&ident.name) {\n+                    if use_prelude && self.extern_prelude.contains(&ident.name) {\n                         let crate_id =\n                             self.crate_loader.process_path_extern(ident.name, ident.span);\n                         let crate_root ="}, {"sha": "48f312ce9f27d46763e307a3babc0d10bf4e5d5f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     if !(\n                         ns == TypeNS &&\n                         !ident.is_path_segment_keyword() &&\n-                        self.session.extern_prelude.contains(&ident.name)\n+                        self.extern_prelude.contains(&ident.name)\n                     ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n@@ -218,7 +218,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 } else if\n                     ns == TypeNS &&\n                     !ident.is_path_segment_keyword() &&\n-                    self.session.extern_prelude.contains(&ident.name)\n+                    self.extern_prelude.contains(&ident.name)\n                 {\n                     let crate_id =\n                         self.crate_loader.process_path_extern(ident.name, ident.span);\n@@ -736,7 +736,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n-            let external_crate = if ns == TypeNS && self.session.extern_prelude.contains(&name) {\n+            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n                 let crate_id =\n                     self.crate_loader.process_path_extern(name, span);\n                 Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))"}, {"sha": "f9aa0397257b8e63de1b1e5575723d8729598509", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -164,7 +164,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n         // If the extern crate isn't in the extern prelude,\n         // there is no way it can be written as an `use`.\n         let orig_name = extern_crate.orig_name.unwrap_or(item.name);\n-        if !tcx.sess.extern_prelude.contains(&orig_name) {\n+        if !tcx.extern_prelude.contains(&orig_name) {\n             continue;\n         }\n "}, {"sha": "4a698e499a7fbd18209becabf75f22488d895fc9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -474,6 +474,7 @@ pub fn run_core(search_paths: SearchPaths,\n             trait_map: resolver.trait_map.clone(),\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n+            extern_prelude: resolver.extern_prelude.clone(),\n         };\n         let analysis = ty::CrateAnalysis {\n             access_levels: Lrc::new(AccessLevels::default()),"}, {"sha": "268a16e5d2a0f0163e01cf80efb8407443c0df21", "filename": "src/test/ui/rust-2018/issue-54006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ba1071c626c43a5b85752b4ffcf6a87e2b745e/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr?ref=37ba1071c626c43a5b85752b4ffcf6a87e2b745e", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `alloc`\n   --> $DIR/issue-54006.rs:16:5\n    |\n LL | use alloc::vec;\n-   |     ^^^^^ Did you mean `std::alloc`?\n+   |     ^^^^^ Did you mean `core::alloc`?\n \n error: cannot determine resolution for the macro `vec`\n   --> $DIR/issue-54006.rs:20:18"}]}