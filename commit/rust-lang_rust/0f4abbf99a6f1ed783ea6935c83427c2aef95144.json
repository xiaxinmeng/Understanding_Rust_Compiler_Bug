{"sha": "0f4abbf99a6f1ed783ea6935c83427c2aef95144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNGFiYmY5OWE2ZjFlZDc4M2VhNjkzNWM4MzQyN2MyYWVmOTUxNDQ=", "commit": {"author": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-09-28T16:57:18Z"}, "committer": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-10-21T15:04:26Z"}, "message": "Better naming post copy/paste", "tree": {"sha": "8326a101da9e50f935c97d0f29d4f7ab0ff42d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8326a101da9e50f935c97d0f29d4f7ab0ff42d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4abbf99a6f1ed783ea6935c83427c2aef95144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4abbf99a6f1ed783ea6935c83427c2aef95144", "html_url": "https://github.com/rust-lang/rust/commit/0f4abbf99a6f1ed783ea6935c83427c2aef95144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4abbf99a6f1ed783ea6935c83427c2aef95144/comments", "author": null, "committer": null, "parents": [{"sha": "070a751d4cf350a71901f75bc99ca0e0922a3133", "url": "https://api.github.com/repos/rust-lang/rust/commits/070a751d4cf350a71901f75bc99ca0e0922a3133", "html_url": "https://github.com/rust-lang/rust/commit/070a751d4cf350a71901f75bc99ca0e0922a3133"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "dd3adc494f1be22b7f58945a76f7711c5a43039d", "filename": "tests/ui/await_holding_refcell_ref.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f4abbf99a6f1ed783ea6935c83427c2aef95144/tests%2Fui%2Fawait_holding_refcell_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4abbf99a6f1ed783ea6935c83427c2aef95144/tests%2Fui%2Fawait_holding_refcell_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.rs?ref=0f4abbf99a6f1ed783ea6935c83427c2aef95144", "patch": "@@ -61,11 +61,11 @@ fn block_bad(x: &RefCell<u32>) -> impl std::future::Future<Output = u32> + '_ {\n }\n \n fn main() {\n-    let m = RefCell::new(100);\n-    good(&m);\n-    bad(&m);\n-    bad_mut(&m);\n-    also_bad(&m);\n-    not_good(&m);\n-    block_bad(&m);\n+    let rc = RefCell::new(100);\n+    good(&rc);\n+    bad(&rc);\n+    bad_mut(&rc);\n+    also_bad(&rc);\n+    not_good(&rc);\n+    block_bad(&rc);\n }"}]}