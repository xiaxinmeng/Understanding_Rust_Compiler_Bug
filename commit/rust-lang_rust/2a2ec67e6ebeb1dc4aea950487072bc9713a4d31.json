{"sha": "2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMmVjNjdlNmViZWIxZGM0YWVhOTUwNDg3MDcyYmM5NzEzYTRkMzE=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-18T05:37:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-19T18:08:01Z"}, "message": "Fix opeq.rs for LLVM by implementing simple augmented-assignment operators.", "tree": {"sha": "9c065a9c88abeb2711bf2604f938901eb77af140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c065a9c88abeb2711bf2604f938901eb77af140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "html_url": "https://github.com/rust-lang/rust/commit/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "html_url": "https://github.com/rust-lang/rust/commit/9d0d350d2cb62a0396c2d186fcfb936edfc150e8"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "d94e3e250f2ce0f5a2ede810a5106842a3b4cc0a", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "patch": "@@ -433,7 +433,6 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       obj-recursion.rs \\\n                       obj-return-polytypes.rs \\\n                       obj-with-vec.rs \\\n-                      opeq.rs \\\n                       output-slot-variants.rs \\\n                       pred.rs \\\n                       preempt.rs \\"}, {"sha": "b70b2b885c796b50477b00a34c127c7a133a3743", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "patch": "@@ -1377,6 +1377,7 @@ let ty_children (ty:ty) : ty array =\n         [| |]\n ;;\n \n+let sprintf_binop = sprintf_fmt fmt_binop;;\n let sprintf_expr = sprintf_fmt fmt_expr;;\n let sprintf_name = sprintf_fmt fmt_name;;\n let sprintf_name_component = sprintf_fmt fmt_name_component;;"}, {"sha": "a0569b4cadf5234b1eee1556f17650ebefb6589a", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2a2ec67e6ebeb1dc4aea950487072bc9713a4d31/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=2a2ec67e6ebeb1dc4aea950487072bc9713a4d31", "patch": "@@ -731,6 +731,25 @@ let trans_crate\n               Llvm.build_load (trans_lval lval) (anon_llid \"tmp\") llbuilder\n       in\n \n+      let build_binop (op:Ast.binop) (lllhs:Llvm.llvalue) (llrhs:Llvm.llvalue)\n+          : Llvm.llvalue =\n+        let llid = anon_llid \"expr\" in\n+        match op with\n+            Ast.BINOP_eq ->\n+              (* TODO: equality works on more than just integers *)\n+              Llvm.build_icmp Llvm.Icmp.Eq lllhs llrhs llid llbuilder\n+\n+            (* TODO: signed/unsigned distinction, floating point *)\n+          | Ast.BINOP_add -> Llvm.build_add lllhs llrhs llid llbuilder\n+          | Ast.BINOP_sub -> Llvm.build_sub lllhs llrhs llid llbuilder\n+          | Ast.BINOP_mul -> Llvm.build_mul lllhs llrhs llid llbuilder\n+          | Ast.BINOP_div -> Llvm.build_sdiv lllhs llrhs llid llbuilder\n+          | Ast.BINOP_mod -> Llvm.build_srem lllhs llrhs llid llbuilder\n+\n+          | _ -> raise\n+              (Not_implemented (\"build_binop \" ^ (Ast.sprintf_binop() op)))\n+      in\n+\n       let trans_binary_expr\n           ((op:Ast.binop), (lhs:Ast.atom), (rhs:Ast.atom))\n           : Llvm.llvalue =\n@@ -748,23 +767,7 @@ let trans_crate\n                 let lllhs = trans_atom lhs in\n                 (lllhs, llrhs)\n         in\n-        let llid = anon_llid \"expr\" in\n-        match op with\n-            Ast.BINOP_eq ->\n-              (* TODO: equality works on more than just integers *)\n-              Llvm.build_icmp Llvm.Icmp.Eq lllhs llrhs llid llbuilder\n-\n-            (* TODO: signed/unsigned distinction, floating point *)\n-          | Ast.BINOP_add -> Llvm.build_add lllhs llrhs llid llbuilder\n-          | Ast.BINOP_sub -> Llvm.build_sub lllhs llrhs llid llbuilder\n-          | Ast.BINOP_mul -> Llvm.build_mul lllhs llrhs llid llbuilder\n-          | Ast.BINOP_div -> Llvm.build_sdiv lllhs llrhs llid llbuilder\n-          | Ast.BINOP_mod -> Llvm.build_srem lllhs llrhs llid llbuilder\n-\n-          | _ -> raise\n-              (Not_implemented\n-                 (\"trans_binary_expr \" ^\n-                    (Ast.sprintf_expr() (Ast.EXPR_binary (op,lhs,rhs)))))\n+          build_binop op lllhs llrhs\n       in\n \n       let trans_unary_expr e = raise\n@@ -854,6 +857,17 @@ let trans_crate\n                   ignore (Llvm.build_store llsrc lldest llbuilder);\n                   trans_tail ()\n \n+              | Ast.STMT_copy_binop (dest, op, src) ->\n+                  let lldest = trans_lval dest in\n+                  let llsrc = trans_atom src in\n+                    (* FIXME: Handle vecs and strs. *)\n+                  let lldest_deref =\n+                    Llvm.build_load lldest (anon_llid \"dest_init\") llbuilder\n+                  in\n+                  let llres = build_binop op lldest_deref llsrc in\n+                  ignore (Llvm.build_store llres lldest llbuilder);\n+                  trans_tail ()\n+\n               | Ast.STMT_call (dest, fn, args) ->\n                   let llargs = Array.map trans_atom args in\n                   let lldest = trans_lval dest in"}]}