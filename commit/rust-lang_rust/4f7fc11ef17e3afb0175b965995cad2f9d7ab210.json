{"sha": "4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2ZjMTFlZjE3ZTNhZmIwMTc1Yjk2NTk5NWNhZDJmOWQ3YWIyMTA=", "commit": {"author": {"name": "boxdot", "email": "d@zerovolt.org", "date": "2020-10-18T11:42:09Z"}, "committer": {"name": "boxdot", "email": "d@zerovolt.org", "date": "2021-04-08T20:49:48Z"}, "message": "Add invalid null pointer usage lint.", "tree": {"sha": "5ef4d6829e2d666e597dbca5590d796fe5508762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef4d6829e2d666e597dbca5590d796fe5508762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz6IvBRWjm4Kc4B7XY17zt4kwirQFAmBvbGwACgkQY17zt4kw\nirQfvw/+LWoCsY7FqM4Lz3oyX423f2LPExuM6vfHqP7tNi/hNT7qMScLorJLGQ0P\ny8RM7ZEiDLbdqiXa9M5QHK4AUq+a1GK6Z0IIXQLMcokSn9TPQiEnWzZPruSXRAXK\nBr3B8/3QSeFUlLcbi3jpXRMwm+GJYuT6zWAtnqR53Wi/3CqbukucEJv/cKPBiW25\ni9UXBdmpVckybRqs0urdZWwx0fqUa8NQJQ0jbQn0cEgMBoSpyhqqXB3SghFb0Kuc\ncRoOrwnKSV16zYqaoMzLFTU/oHSg9r6KmVthGk/pc+Cn7cvOz5RFT/1BaeEv6YYE\n2MhkvtiR+kW8lvHWeQvrd8jnJRJ+At7ryM1xowUC/7hHss2kpiE5jt2XJnFk6I4s\neE9eh8L/6RSDxlJ9EW6E6/H100bVX6QSDi0MpyCSlusblzs3le9gC5aocPfBwCqj\nD9yoQfWhPB8kS5cHC30GO2PZfF4bIzB6tvmMJ9hJFAkRgntCPIOg/9VKQkWQpCcE\nTZQ84diKZSK6z7yCR7u+xqPV+Np+fyoidpx9zjMOqvDNH5kXnEhwU93+7/rjzcoa\nQNinP6GNpZblxdV1W1irr1W0Mp3xzHC3Ua18ObQCniHsSzdEvF96zNFZ2kmIjipv\n8OA9Fcx5V88z17ZERAW7c+U9+AP5ONuOWfIYB6WRdZpom68gzh4=\n=LjQT\n-----END PGP SIGNATURE-----", "payload": "tree 5ef4d6829e2d666e597dbca5590d796fe5508762\nparent db6ea84f8790e9e8488ee917ab72af28a4eccf61\nauthor boxdot <d@zerovolt.org> 1603021329 +0200\ncommitter boxdot <d@zerovolt.org> 1617914988 +0200\n\nAdd invalid null pointer usage lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "html_url": "https://github.com/rust-lang/rust/commit/4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/comments", "author": {"login": "boxdot", "id": 3841359, "node_id": "MDQ6VXNlcjM4NDEzNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3841359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxdot", "html_url": "https://github.com/boxdot", "followers_url": "https://api.github.com/users/boxdot/followers", "following_url": "https://api.github.com/users/boxdot/following{/other_user}", "gists_url": "https://api.github.com/users/boxdot/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxdot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxdot/subscriptions", "organizations_url": "https://api.github.com/users/boxdot/orgs", "repos_url": "https://api.github.com/users/boxdot/repos", "events_url": "https://api.github.com/users/boxdot/events{/privacy}", "received_events_url": "https://api.github.com/users/boxdot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boxdot", "id": 3841359, "node_id": "MDQ6VXNlcjM4NDEzNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3841359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxdot", "html_url": "https://github.com/boxdot", "followers_url": "https://api.github.com/users/boxdot/followers", "following_url": "https://api.github.com/users/boxdot/following{/other_user}", "gists_url": "https://api.github.com/users/boxdot/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxdot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxdot/subscriptions", "organizations_url": "https://api.github.com/users/boxdot/orgs", "repos_url": "https://api.github.com/users/boxdot/repos", "events_url": "https://api.github.com/users/boxdot/events{/privacy}", "received_events_url": "https://api.github.com/users/boxdot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6ea84f8790e9e8488ee917ab72af28a4eccf61", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ea84f8790e9e8488ee917ab72af28a4eccf61", "html_url": "https://github.com/rust-lang/rust/commit/db6ea84f8790e9e8488ee917ab72af28a4eccf61"}], "stats": {"total": 368, "additions": 353, "deletions": 15}, "files": [{"sha": "715f4702e95255f4dae991da0b63d464739de91e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -2267,6 +2267,7 @@ Released 2018-09-13\n [`into_iter_on_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_array\n [`into_iter_on_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n [`invalid_atomic_ordering`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering\n+[`invalid_null_ptr_usage`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_null_ptr_usage\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons"}, {"sha": "2fb8bbcd1f7b3796b74d087005ae0217b8e4a518", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -902,6 +902,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n         precedence::PRECEDENCE,\n         ptr::CMP_NULL,\n+        ptr::INVALID_NULL_PTR_USAGE,\n         ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n         ptr_eq::PTR_EQ,\n@@ -1671,6 +1672,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n         LintId::of(precedence::PRECEDENCE),\n         LintId::of(ptr::CMP_NULL),\n+        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n         LintId::of(ptr::MUT_FROM_REF),\n         LintId::of(ptr::PTR_ARG),\n         LintId::of(ptr_eq::PTR_EQ),\n@@ -2010,6 +2012,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n         LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n+        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n         LintId::of(ptr::MUT_FROM_REF),\n         LintId::of(ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(regex::INVALID_REGEX),"}, {"sha": "2ab1e958ec8d73a58cdc80d1ef0cb2f1311d13eb", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 84, "deletions": 11, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_the\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n-use clippy_utils::{is_allowed, match_qpath, paths};\n+use clippy_utils::{is_allowed, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -15,6 +15,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, MultiSpan};\n use std::borrow::Cow;\n \n@@ -94,7 +95,7 @@ declare_clippy_lint! {\n     /// ```\n     pub CMP_NULL,\n     style,\n-    \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n+    \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead\"\n }\n \n declare_clippy_lint! {\n@@ -119,7 +120,28 @@ declare_clippy_lint! {\n     \"fns that create mutable refs from immutable ref args\"\n }\n \n-declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n+declare_clippy_lint! {\n+    /// **What it does:** This lint checks for invalid usages of `ptr::null`.\n+    ///\n+    /// **Why is this bad?** This causes undefined behavior.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// // Bad. Undefined behavior\n+    /// unsafe { std::slice::from_raw_parts(ptr::null(), 0); }\n+    /// ```\n+    ///\n+    /// // Good\n+    /// unsafe { std::slice::from_raw_parts(NonNull::dangling().as_ptr(), 0); }\n+    /// ```\n+    pub INVALID_NULL_PTR_USAGE,\n+    correctness,\n+    \"invalid usage of a null pointer, suggesting `NonNull::dangling()` instead\"\n+}\n+\n+declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF, INVALID_NULL_PTR_USAGE]);\n \n impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n@@ -153,14 +175,63 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref op, l, r) = expr.kind {\n-            if (op.node == BinOpKind::Eq || op.node == BinOpKind::Ne) && (is_null_path(l) || is_null_path(r)) {\n+            if (op.node == BinOpKind::Eq || op.node == BinOpKind::Ne) && (is_null_path(cx, l) || is_null_path(cx, r)) {\n                 span_lint(\n                     cx,\n                     CMP_NULL,\n                     expr.span,\n                     \"comparing with null is better expressed by the `.is_null()` method\",\n                 );\n             }\n+        } else {\n+            check_invalid_ptr_usage(cx, expr);\n+        }\n+    }\n+}\n+\n+fn check_invalid_ptr_usage<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+    // (fn_path, arg_indices) - `arg_indices` are the `arg` positions where null would cause U.B.\n+    const INVALID_NULL_PTR_USAGE_TABLE: [(&[&str], &[usize]); 16] = [\n+        (&paths::SLICE_FROM_RAW_PARTS, &[0]),\n+        (&paths::SLICE_FROM_RAW_PARTS_MUT, &[0]),\n+        (&paths::PTR_COPY, &[0, 1]),\n+        (&paths::PTR_COPY_NONOVERLAPPING, &[0, 1]),\n+        (&paths::PTR_READ, &[0]),\n+        (&paths::PTR_READ_UNALIGNED, &[0]),\n+        (&paths::PTR_READ_VOLATILE, &[0]),\n+        (&paths::PTR_REPLACE, &[0]),\n+        (&paths::PTR_SLICE_FROM_RAW_PARTS, &[0]),\n+        (&paths::PTR_SLICE_FROM_RAW_PARTS_MUT, &[0]),\n+        (&paths::PTR_SWAP, &[0, 1]),\n+        (&paths::PTR_SWAP_NONOVERLAPPING, &[0, 1]),\n+        (&paths::PTR_WRITE, &[0]),\n+        (&paths::PTR_WRITE_UNALIGNED, &[0]),\n+        (&paths::PTR_WRITE_VOLATILE, &[0]),\n+        (&paths::PTR_WRITE_BYTES, &[0]),\n+    ];\n+\n+    if_chain! {\n+        if let ExprKind::Call(ref fun, ref args) = expr.kind;\n+        if let ExprKind::Path(ref qpath) = fun.kind;\n+        if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n+        let fun_def_path = cx.get_def_path(fun_def_id).into_iter().map(Symbol::to_ident_string).collect::<Vec<_>>();\n+        if let Some(&(_, arg_indices)) = INVALID_NULL_PTR_USAGE_TABLE\n+            .iter()\n+            .find(|&&(fn_path, _)| fn_path == fun_def_path);\n+        then {\n+            for &arg_idx in arg_indices {\n+                if let Some(arg) = args.get(arg_idx).filter(|arg| is_null_path(cx, arg)) {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        INVALID_NULL_PTR_USAGE,\n+                        arg.span,\n+                        \"pointer must be non-null\",\n+                        \"change this to\",\n+                        \"core::ptr::NonNull::dangling().as_ptr()\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n         }\n     }\n }\n@@ -345,13 +416,15 @@ fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability,\n     }\n }\n \n-fn is_null_path(expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Call(pathexp, args) = expr.kind {\n-        if args.is_empty() {\n-            if let ExprKind::Path(ref path) = pathexp.kind {\n-                return match_qpath(path, &paths::PTR_NULL) || match_qpath(path, &paths::PTR_NULL_MUT);\n-            }\n+fn is_null_path(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let ExprKind::Call(path, []) = expr.kind;\n+        if let ExprKind::Path(ref qpath) = path.kind;\n+        if let Some(fn_def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n+        then {\n+            match_def_path(cx, fn_def_id, &paths::PTR_NULL) || match_def_path(cx, fn_def_id, &paths::PTR_NULL_MUT)\n+        } else {\n+            false\n         }\n     }\n-    false\n }"}, {"sha": "cd2bdec1707b31d2f75647a0e0e4cd35f098d105", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -65,8 +65,8 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool)\n \n fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n     const FUNCTIONS: [&[&str]; 8] = [\n-        &paths::COPY_NONOVERLAPPING,\n-        &paths::COPY,\n+        &paths::PTR_COPY_NONOVERLAPPING,\n+        &paths::PTR_COPY,\n         &paths::WRITE_BYTES,\n         &paths::PTR_SWAP_NONOVERLAPPING,\n         &paths::PTR_SLICE_FROM_RAW_PARTS,"}, {"sha": "5da9c624ac4108754a073d16cf4f60e6a17e0190", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -18,8 +18,6 @@ pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeS\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n-pub const COPY: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy_nonoverlapping\"];\n-pub const COPY_NONOVERLAPPING: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n@@ -100,12 +98,23 @@ pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"sys\", \"unix\", \"ext\", \"fs\",\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n+pub const PTR_COPY: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy\"];\n+pub const PTR_COPY_NONOVERLAPPING: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n pub const PTR_SLICE_FROM_RAW_PARTS: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts\"];\n pub const PTR_SLICE_FROM_RAW_PARTS_MUT: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts_mut\"];\n pub const PTR_SWAP_NONOVERLAPPING: [&str; 3] = [\"core\", \"ptr\", \"swap_nonoverlapping\"];\n+pub const PTR_READ: [&str; 3] = [\"core\", \"ptr\", \"read\"];\n+pub const PTR_READ_UNALIGNED: [&str; 3] = [\"core\", \"ptr\", \"read_unaligned\"];\n+pub const PTR_READ_VOLATILE: [&str; 3] = [\"core\", \"ptr\", \"read_volatile\"];\n+pub const PTR_REPLACE: [&str; 3] = [\"core\", \"ptr\", \"replace\"];\n+pub const PTR_SWAP: [&str; 3] = [\"core\", \"ptr\", \"swap\"];\n+pub const PTR_WRITE: [&str; 3] = [\"core\", \"ptr\", \"write\"];\n+pub const PTR_WRITE_BYTES: [&str; 3] = [\"core\", \"intrinsics\", \"write_bytes\"];\n+pub const PTR_WRITE_UNALIGNED: [&str; 3] = [\"core\", \"ptr\", \"write_unaligned\"];\n+pub const PTR_WRITE_VOLATILE: [&str; 3] = [\"core\", \"ptr\", \"write_volatile\"];\n pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];"}, {"sha": "4f5322ebf202f819063de4ef709541741a952703", "filename": "tests/ui/invalid_null_ptr_usage.fixed", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_null_ptr_usage.fixed?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -0,0 +1,49 @@\n+// run-rustfix\n+\n+fn main() {\n+    unsafe {\n+        let _slice: &[usize] = std::slice::from_raw_parts(core::ptr::NonNull::dangling().as_ptr(), 0);\n+        let _slice: &[usize] = std::slice::from_raw_parts(core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        let _slice: &[usize] = std::slice::from_raw_parts_mut(core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        std::ptr::copy::<usize>(core::ptr::NonNull::dangling().as_ptr(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+        std::ptr::copy::<usize>(std::ptr::NonNull::dangling().as_ptr(), core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        std::ptr::copy_nonoverlapping::<usize>(core::ptr::NonNull::dangling().as_ptr(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+        std::ptr::copy_nonoverlapping::<usize>(std::ptr::NonNull::dangling().as_ptr(), core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        struct A; // zero sized struct\n+        assert_eq!(std::mem::size_of::<A>(), 0);\n+\n+        let _a: A = std::ptr::read(core::ptr::NonNull::dangling().as_ptr());\n+        let _a: A = std::ptr::read(core::ptr::NonNull::dangling().as_ptr());\n+\n+        let _a: A = std::ptr::read_unaligned(core::ptr::NonNull::dangling().as_ptr());\n+        let _a: A = std::ptr::read_unaligned(core::ptr::NonNull::dangling().as_ptr());\n+\n+        let _a: A = std::ptr::read_volatile(core::ptr::NonNull::dangling().as_ptr());\n+        let _a: A = std::ptr::read_volatile(core::ptr::NonNull::dangling().as_ptr());\n+\n+        let _a: A = std::ptr::replace(core::ptr::NonNull::dangling().as_ptr(), A);\n+\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts(core::ptr::NonNull::dangling().as_ptr(), 0);\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts(core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts_mut(core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        std::ptr::swap::<A>(core::ptr::NonNull::dangling().as_ptr(), &mut A);\n+        std::ptr::swap::<A>(&mut A, core::ptr::NonNull::dangling().as_ptr());\n+\n+        std::ptr::swap_nonoverlapping::<A>(core::ptr::NonNull::dangling().as_ptr(), &mut A, 0);\n+        std::ptr::swap_nonoverlapping::<A>(&mut A, core::ptr::NonNull::dangling().as_ptr(), 0);\n+\n+        std::ptr::write(core::ptr::NonNull::dangling().as_ptr(), A);\n+\n+        std::ptr::write_unaligned(core::ptr::NonNull::dangling().as_ptr(), A);\n+\n+        std::ptr::write_volatile(core::ptr::NonNull::dangling().as_ptr(), A);\n+\n+        std::ptr::write_bytes::<usize>(core::ptr::NonNull::dangling().as_ptr(), 42, 0);\n+    }\n+}"}, {"sha": "ae51c52d8af0ce2f33759bad1f8fe8d059b97064", "filename": "tests/ui/invalid_null_ptr_usage.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_null_ptr_usage.rs?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -0,0 +1,49 @@\n+// run-rustfix\n+\n+fn main() {\n+    unsafe {\n+        let _slice: &[usize] = std::slice::from_raw_parts(std::ptr::null(), 0);\n+        let _slice: &[usize] = std::slice::from_raw_parts(std::ptr::null_mut(), 0);\n+\n+        let _slice: &[usize] = std::slice::from_raw_parts_mut(std::ptr::null_mut(), 0);\n+\n+        std::ptr::copy::<usize>(std::ptr::null(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+        std::ptr::copy::<usize>(std::ptr::NonNull::dangling().as_ptr(), std::ptr::null_mut(), 0);\n+\n+        std::ptr::copy_nonoverlapping::<usize>(std::ptr::null(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+        std::ptr::copy_nonoverlapping::<usize>(std::ptr::NonNull::dangling().as_ptr(), std::ptr::null_mut(), 0);\n+\n+        struct A; // zero sized struct\n+        assert_eq!(std::mem::size_of::<A>(), 0);\n+\n+        let _a: A = std::ptr::read(std::ptr::null());\n+        let _a: A = std::ptr::read(std::ptr::null_mut());\n+\n+        let _a: A = std::ptr::read_unaligned(std::ptr::null());\n+        let _a: A = std::ptr::read_unaligned(std::ptr::null_mut());\n+\n+        let _a: A = std::ptr::read_volatile(std::ptr::null());\n+        let _a: A = std::ptr::read_volatile(std::ptr::null_mut());\n+\n+        let _a: A = std::ptr::replace(std::ptr::null_mut(), A);\n+\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts(std::ptr::null(), 0);\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts(std::ptr::null_mut(), 0);\n+\n+        let _slice: *const [usize] = std::ptr::slice_from_raw_parts_mut(std::ptr::null_mut(), 0);\n+\n+        std::ptr::swap::<A>(std::ptr::null_mut(), &mut A);\n+        std::ptr::swap::<A>(&mut A, std::ptr::null_mut());\n+\n+        std::ptr::swap_nonoverlapping::<A>(std::ptr::null_mut(), &mut A, 0);\n+        std::ptr::swap_nonoverlapping::<A>(&mut A, std::ptr::null_mut(), 0);\n+\n+        std::ptr::write(std::ptr::null_mut(), A);\n+\n+        std::ptr::write_unaligned(std::ptr::null_mut(), A);\n+\n+        std::ptr::write_volatile(std::ptr::null_mut(), A);\n+\n+        std::ptr::write_bytes::<usize>(std::ptr::null_mut(), 42, 0);\n+    }\n+}"}, {"sha": "532c36abe51961fc6b31d9bebba0a03e034f92ce", "filename": "tests/ui/invalid_null_ptr_usage.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc11ef17e3afb0175b965995cad2f9d7ab210/tests%2Fui%2Finvalid_null_ptr_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_null_ptr_usage.stderr?ref=4f7fc11ef17e3afb0175b965995cad2f9d7ab210", "patch": "@@ -0,0 +1,154 @@\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:5:59\n+   |\n+LL |         let _slice: &[usize] = std::slice::from_raw_parts(std::ptr::null(), 0);\n+   |                                                           ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+   |\n+   = note: `#[deny(clippy::invalid_null_ptr_usage)]` on by default\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:6:59\n+   |\n+LL |         let _slice: &[usize] = std::slice::from_raw_parts(std::ptr::null_mut(), 0);\n+   |                                                           ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:8:63\n+   |\n+LL |         let _slice: &[usize] = std::slice::from_raw_parts_mut(std::ptr::null_mut(), 0);\n+   |                                                               ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:10:33\n+   |\n+LL |         std::ptr::copy::<usize>(std::ptr::null(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+   |                                 ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:11:73\n+   |\n+LL |         std::ptr::copy::<usize>(std::ptr::NonNull::dangling().as_ptr(), std::ptr::null_mut(), 0);\n+   |                                                                         ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:13:48\n+   |\n+LL |         std::ptr::copy_nonoverlapping::<usize>(std::ptr::null(), std::ptr::NonNull::dangling().as_ptr(), 0);\n+   |                                                ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:14:88\n+   |\n+LL |         std::ptr::copy_nonoverlapping::<usize>(std::ptr::NonNull::dangling().as_ptr(), std::ptr::null_mut(), 0);\n+   |                                                                                        ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:19:36\n+   |\n+LL |         let _a: A = std::ptr::read(std::ptr::null());\n+   |                                    ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:20:36\n+   |\n+LL |         let _a: A = std::ptr::read(std::ptr::null_mut());\n+   |                                    ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:22:46\n+   |\n+LL |         let _a: A = std::ptr::read_unaligned(std::ptr::null());\n+   |                                              ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:23:46\n+   |\n+LL |         let _a: A = std::ptr::read_unaligned(std::ptr::null_mut());\n+   |                                              ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:25:45\n+   |\n+LL |         let _a: A = std::ptr::read_volatile(std::ptr::null());\n+   |                                             ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:26:45\n+   |\n+LL |         let _a: A = std::ptr::read_volatile(std::ptr::null_mut());\n+   |                                             ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:28:39\n+   |\n+LL |         let _a: A = std::ptr::replace(std::ptr::null_mut(), A);\n+   |                                       ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:30:69\n+   |\n+LL |         let _slice: *const [usize] = std::ptr::slice_from_raw_parts(std::ptr::null(), 0);\n+   |                                                                     ^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:31:69\n+   |\n+LL |         let _slice: *const [usize] = std::ptr::slice_from_raw_parts(std::ptr::null_mut(), 0);\n+   |                                                                     ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:33:73\n+   |\n+LL |         let _slice: *const [usize] = std::ptr::slice_from_raw_parts_mut(std::ptr::null_mut(), 0);\n+   |                                                                         ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:35:29\n+   |\n+LL |         std::ptr::swap::<A>(std::ptr::null_mut(), &mut A);\n+   |                             ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:36:37\n+   |\n+LL |         std::ptr::swap::<A>(&mut A, std::ptr::null_mut());\n+   |                                     ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:38:44\n+   |\n+LL |         std::ptr::swap_nonoverlapping::<A>(std::ptr::null_mut(), &mut A, 0);\n+   |                                            ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:39:52\n+   |\n+LL |         std::ptr::swap_nonoverlapping::<A>(&mut A, std::ptr::null_mut(), 0);\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:41:25\n+   |\n+LL |         std::ptr::write(std::ptr::null_mut(), A);\n+   |                         ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:43:35\n+   |\n+LL |         std::ptr::write_unaligned(std::ptr::null_mut(), A);\n+   |                                   ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:45:34\n+   |\n+LL |         std::ptr::write_volatile(std::ptr::null_mut(), A);\n+   |                                  ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: pointer must be non-null\n+  --> $DIR/invalid_null_ptr_usage.rs:47:40\n+   |\n+LL |         std::ptr::write_bytes::<usize>(std::ptr::null_mut(), 42, 0);\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ help: change this to: `core::ptr::NonNull::dangling().as_ptr()`\n+\n+error: aborting due to 25 previous errors\n+"}]}