{"sha": "0a89d7bd7e341e4f2a7de17af765ce24dfecf569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODlkN2JkN2UzNDFlNGYyYTdkZTE3YWY3NjVjZTI0ZGZlY2Y1Njk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-11-06T16:02:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-06T16:02:24Z"}, "message": "Rollup merge of #78771 - tmiasko:inline-consts, r=oli-obk\n\ninliner: Copy unevaluated constants only after successful inlining\n\nInliner copies the unevaluated constants from the callee body to the\ncaller at the point where decision to inline is yet to be made. The\nconstants will be unnecessary if inlining were to fail.\n\nOrganize the code moving items from callee to the caller together in one\nplace to avoid the issue.", "tree": {"sha": "9df1ed586beb4c1ce542d16925acf2b6ffa5cb61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df1ed586beb4c1ce542d16925acf2b6ffa5cb61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a89d7bd7e341e4f2a7de17af765ce24dfecf569", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpXOQCRBK7hj4Ov3rIwAAdHIIAEGbIdsJV5xIbSQca3O0oFRg\nArODiYnpDTlclQryFvsTafrr0L4k8BifYhYS9cnvq8NFaQYUpYZGiNJ4dfwyf9/A\nPySfLRe+UuPgJa5pJaskLSVtvDcr6akrh5Hx2ZA47xg3aNgr/UdrzeZcI/mpVV4a\nUJHQ0RHuulDLBofuhdQU6lL3N9j3Km/bf6iRQaCrJDnXrJVKuAfAcOsGimRaA5jt\n0IYnhG3/iXNiidsOsz7HuLdPoDokUq5RNCQoYITFORWMrT5d2YTpoQ/JMvMuwaie\ntVZKwqUGsZN0NfXvqWaxAx9H4kBwVIOaTtN+WVdqrxPP5wuWPVhVZm9RT2K1IJY=\n=jaKn\n-----END PGP SIGNATURE-----\n", "payload": "tree 9df1ed586beb4c1ce542d16925acf2b6ffa5cb61\nparent 55bf7911c316f444fbf7042852be062dc93cac1a\nparent 6ca43aca1d550855e32f516cf8c89fd9e717d8f7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1604678544 +0900\ncommitter GitHub <noreply@github.com> 1604678544 +0900\n\nRollup merge of #78771 - tmiasko:inline-consts, r=oli-obk\n\ninliner: Copy unevaluated constants only after successful inlining\n\nInliner copies the unevaluated constants from the callee body to the\ncaller at the point where decision to inline is yet to be made. The\nconstants will be unnecessary if inlining were to fail.\n\nOrganize the code moving items from callee to the caller together in one\nplace to avoid the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a89d7bd7e341e4f2a7de17af765ce24dfecf569", "html_url": "https://github.com/rust-lang/rust/commit/0a89d7bd7e341e4f2a7de17af765ce24dfecf569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a89d7bd7e341e4f2a7de17af765ce24dfecf569/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55bf7911c316f444fbf7042852be062dc93cac1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/55bf7911c316f444fbf7042852be062dc93cac1a", "html_url": "https://github.com/rust-lang/rust/commit/55bf7911c316f444fbf7042852be062dc93cac1a"}, {"sha": "6ca43aca1d550855e32f516cf8c89fd9e717d8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca43aca1d550855e32f516cf8c89fd9e717d8f7", "html_url": "https://github.com/rust-lang/rust/commit/6ca43aca1d550855e32f516cf8c89fd9e717d8f7"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "4de93739992542dd838e308c40627d073953bd9d", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a89d7bd7e341e4f2a7de17af765ce24dfecf569/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a89d7bd7e341e4f2a7de17af765ce24dfecf569/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=0a89d7bd7e341e4f2a7de17af765ce24dfecf569", "patch": "@@ -140,14 +140,6 @@ impl Inliner<'tcx> {\n                 continue;\n             };\n \n-            // Copy only unevaluated constants from the callee_body into the caller_body.\n-            // Although we are only pushing `ConstKind::Unevaluated` consts to\n-            // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n-            // because we are calling `subst_and_normalize_erasing_regions`.\n-            caller_body.required_consts.extend(callee_body.required_consts.iter().copied().filter(\n-                |&constant| matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _)),\n-            ));\n-\n             let start = caller_body.basic_blocks().len();\n             debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n             if !self.inline_call(callsite, caller_body, callee_body) {\n@@ -522,6 +514,16 @@ impl Inliner<'tcx> {\n                     kind: TerminatorKind::Goto { target: integrator.map_block(START_BLOCK) },\n                 });\n \n+                // Copy only unevaluated constants from the callee_body into the caller_body.\n+                // Although we are only pushing `ConstKind::Unevaluated` consts to\n+                // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n+                // because we are calling `subst_and_normalize_erasing_regions`.\n+                caller_body.required_consts.extend(\n+                    callee_body.required_consts.iter().copied().filter(|&constant| {\n+                        matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n+                    }),\n+                );\n+\n                 true\n             }\n             kind => {"}]}