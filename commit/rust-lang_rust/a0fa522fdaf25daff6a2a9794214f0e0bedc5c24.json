{"sha": "a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZmE1MjJmZGFmMjVkYWZmNmEyYTk3OTQyMTRmMGUwYmVkYzVjMjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-06T16:00:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-06T16:00:03Z"}, "message": "Merge #6733\n\n6733: Update attributes completion list r=jonas-schievink a=Veykril\n\nMight be nice to have them grouped for readability/maintainability similar to how the [reference](https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index) does it but that would require the use of a `OnceCell` for sorting the entries back after construction.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0229c35d77ef4a759ed02256863e73c472046e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0229c35d77ef4a759ed02256863e73c472046e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfzQADCRBK7hj4Ov3rIwAAdHIIAKYtdsRzFKvxYP8GzIJwc4l5\n+hkFUf7zUCfRi1Dm3VyAps0DL7jHn7gpdBghGWULXZcixdXgcz3v4PXTyW1sG2K8\ntPf3oaBQff7FUvfTppNpRdcxfWqzzpTsdDISbuqRS2ev/TFRTIW2aKEdtGJQmn4x\n8nA3HFEe6CoD+M5kJJt1mSBlK+zfRS5NwO1tsvn3qMEOaupPo8gi+MDOJGIH/+D7\nHI51IF7rkOuC2Ubf3sLgeWJ/PHqgqHN6c1JQwzBZRTuPX3v0evACg4WOskGAdgDj\nwPvfqf5+dcwFvkW1pZD/Gan5fzqhIcKbWMBVT88qFs/H04DWqUEP36rsvn1NWh0=\n=UQe9\n-----END PGP SIGNATURE-----\n", "payload": "tree 0229c35d77ef4a759ed02256863e73c472046e9c\nparent 1403ddf029a6a4ced904146ac7b475c923f6129f\nparent 2ff1ebe8f3eb820e13e08f8cfbdac2f12a921e15\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607270403 +0000\ncommitter GitHub <noreply@github.com> 1607270403 +0000\n\nMerge #6733\n\n6733: Update attributes completion list r=jonas-schievink a=Veykril\n\nMight be nice to have them grouped for readability/maintainability similar to how the [reference](https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index) does it but that would require the use of a `OnceCell` for sorting the entries back after construction.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "html_url": "https://github.com/rust-lang/rust/commit/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1403ddf029a6a4ced904146ac7b475c923f6129f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1403ddf029a6a4ced904146ac7b475c923f6129f", "html_url": "https://github.com/rust-lang/rust/commit/1403ddf029a6a4ced904146ac7b475c923f6129f"}, {"sha": "2ff1ebe8f3eb820e13e08f8cfbdac2f12a921e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff1ebe8f3eb820e13e08f8cfbdac2f12a921e15", "html_url": "https://github.com/rust-lang/rust/commit/2ff1ebe8f3eb820e13e08f8cfbdac2f12a921e15"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "5404145d5568d94807473bed72d56048d3868c45", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "patch": "@@ -87,30 +87,48 @@ const fn attr(\n     AttrCompletion { label, lookup, snippet, prefer_inner: false }\n }\n \n+/// https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index\n const ATTRIBUTES: &[AttrCompletion] = &[\n     attr(\"allow(\u2026)\", Some(\"allow\"), Some(\"allow(${0:lint})\")),\n+    attr(\"automatically_derived\", None, None),\n     attr(\"cfg_attr(\u2026)\", Some(\"cfg_attr\"), Some(\"cfg_attr(${1:predicate}, ${0:attr})\")),\n     attr(\"cfg(\u2026)\", Some(\"cfg\"), Some(\"cfg(${0:predicate})\")),\n+    attr(\"cold\", None, None),\n+    attr(r#\"crate_name = \"\"\"#, Some(\"crate_name\"), Some(r#\"crate_name = \"${0:crate_name}\"\"#))\n+        .prefer_inner(),\n     attr(\"deny(\u2026)\", Some(\"deny\"), Some(\"deny(${0:lint})\")),\n     attr(r#\"deprecated = \"\u2026\"\"#, Some(\"deprecated\"), Some(r#\"deprecated = \"${0:reason}\"\"#)),\n     attr(\"derive(\u2026)\", Some(\"derive\"), Some(r#\"derive(${0:Debug})\"#)),\n+    attr(\n+        r#\"export_name = \"\u2026\"\"#,\n+        Some(\"export_name\"),\n+        Some(r#\"export_name = \"${0:exported_symbol_name}\"\"#),\n+    ),\n     attr(r#\"doc = \"\u2026\"\"#, Some(\"doc\"), Some(r#\"doc = \"${0:docs}\"\"#)),\n     attr(\"feature(\u2026)\", Some(\"feature\"), Some(\"feature(${0:flag})\")).prefer_inner(),\n     attr(\"forbid(\u2026)\", Some(\"forbid\"), Some(\"forbid(${0:lint})\")),\n     // FIXME: resolve through macro resolution?\n     attr(\"global_allocator\", None, None).prefer_inner(),\n     attr(r#\"ignore = \"\u2026\"\"#, Some(\"ignore\"), Some(r#\"ignore = \"${0:reason}\"\"#)),\n     attr(\"inline(\u2026)\", Some(\"inline\"), Some(\"inline(${0:lint})\")),\n-    attr(r#\"link_name = \"\u2026\"\"#, Some(\"link_name\"), Some(r#\"link_name = \"${0:symbol_name}\"\"#)),\n     attr(\"link\", None, None),\n+    attr(r#\"link_name = \"\u2026\"\"#, Some(\"link_name\"), Some(r#\"link_name = \"${0:symbol_name}\"\"#)),\n+    attr(\n+        r#\"link_section = \"\u2026\"\"#,\n+        Some(\"link_section\"),\n+        Some(r#\"link_section = \"${0:section_name}\"\"#),\n+    ),\n     attr(\"macro_export\", None, None),\n     attr(\"macro_use\", None, None),\n     attr(r#\"must_use = \"\u2026\"\"#, Some(\"must_use\"), Some(r#\"must_use = \"${0:reason}\"\"#)),\n+    attr(\"no_link\", None, None).prefer_inner(),\n+    attr(\"no_implicit_prelude\", None, None).prefer_inner(),\n+    attr(\"no_main\", None, None).prefer_inner(),\n     attr(\"no_mangle\", None, None),\n     attr(\"no_std\", None, None).prefer_inner(),\n     attr(\"non_exhaustive\", None, None),\n     attr(\"panic_handler\", None, None).prefer_inner(),\n-    attr(\"path = \\\"\u2026\\\"\", Some(\"path\"), Some(\"path =\\\"${0:path}\\\"\")),\n+    attr(r#\"path = \"\u2026\"\"#, Some(\"path\"), Some(r#\"path =\"${0:path}\"\"#)),\n     attr(\"proc_macro\", None, None),\n     attr(\"proc_macro_attribute\", None, None),\n     attr(\"proc_macro_derive(\u2026)\", Some(\"proc_macro_derive\"), Some(\"proc_macro_derive(${0:Trait})\")),\n@@ -125,9 +143,12 @@ const ATTRIBUTES: &[AttrCompletion] = &[\n     attr(\n         r#\"target_feature = \"\u2026\"\"#,\n         Some(\"target_feature\"),\n-        Some(\"target_feature = \\\"${0:feature}\\\"\"),\n+        Some(r#\"target_feature = \"${0:feature}\"\"#),\n     ),\n     attr(\"test\", None, None),\n+    attr(\"track_caller\", None, None),\n+    attr(\"type_length_limit = \u2026\", Some(\"type_length_limit\"), Some(\"type_length_limit = ${0:128}\"))\n+        .prefer_inner(),\n     attr(\"used\", None, None),\n     attr(\"warn(\u2026)\", Some(\"warn\"), Some(\"warn(${0:lint})\")),\n     attr(\n@@ -449,17 +470,21 @@ struct Test {}\n             r#\"#[<|>]\"#,\n             expect![[r#\"\n                 at allow(\u2026)\n+                at automatically_derived\n                 at cfg(\u2026)\n                 at cfg_attr(\u2026)\n+                at cold\n                 at deny(\u2026)\n                 at deprecated = \"\u2026\"\n                 at derive(\u2026)\n                 at doc = \"\u2026\"\n+                at export_name = \"\u2026\"\n                 at forbid(\u2026)\n                 at ignore = \"\u2026\"\n                 at inline(\u2026)\n                 at link\n                 at link_name = \"\u2026\"\n+                at link_section = \"\u2026\"\n                 at macro_export\n                 at macro_use\n                 at must_use = \"\u2026\"\n@@ -473,6 +498,7 @@ struct Test {}\n                 at should_panic(\u2026)\n                 at target_feature = \"\u2026\"\n                 at test\n+                at track_caller\n                 at used\n                 at warn(\u2026)\n             \"#]],\n@@ -490,22 +516,30 @@ struct Test {}\n             r\"#![<|>]\",\n             expect![[r#\"\n                 at allow(\u2026)\n+                at automatically_derived\n                 at cfg(\u2026)\n                 at cfg_attr(\u2026)\n+                at cold\n+                at crate_name = \"\"\n                 at deny(\u2026)\n                 at deprecated = \"\u2026\"\n                 at derive(\u2026)\n                 at doc = \"\u2026\"\n+                at export_name = \"\u2026\"\n                 at feature(\u2026)\n                 at forbid(\u2026)\n                 at global_allocator\n                 at ignore = \"\u2026\"\n                 at inline(\u2026)\n                 at link\n                 at link_name = \"\u2026\"\n+                at link_section = \"\u2026\"\n                 at macro_export\n                 at macro_use\n                 at must_use = \"\u2026\"\n+                at no_implicit_prelude\n+                at no_link\n+                at no_main\n                 at no_mangle\n                 at no_std\n                 at non_exhaustive\n@@ -519,6 +553,8 @@ struct Test {}\n                 at should_panic(\u2026)\n                 at target_feature = \"\u2026\"\n                 at test\n+                at track_caller\n+                at type_length_limit = \u2026\n                 at used\n                 at warn(\u2026)\n                 at windows_subsystem = \"\u2026\""}]}