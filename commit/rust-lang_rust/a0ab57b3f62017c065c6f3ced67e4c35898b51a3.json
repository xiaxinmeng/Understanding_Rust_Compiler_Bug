{"sha": "a0ab57b3f62017c065c6f3ced67e4c35898b51a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYWI1N2IzZjYyMDE3YzA2NWM2ZjNjZWQ2N2U0YzM1ODk4YjUxYTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-19T15:07:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-19T15:07:51Z"}, "message": "Fix trans_alt to handle unreachable branches without blowing up", "tree": {"sha": "c020053766026dc31506da2d01240061da50f229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c020053766026dc31506da2d01240061da50f229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ab57b3f62017c065c6f3ced67e4c35898b51a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ab57b3f62017c065c6f3ced67e4c35898b51a3", "html_url": "https://github.com/rust-lang/rust/commit/a0ab57b3f62017c065c6f3ced67e4c35898b51a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ab57b3f62017c065c6f3ced67e4c35898b51a3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3d6339e0454b6353e863f226ddd2a3900f9e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3d6339e0454b6353e863f226ddd2a3900f9e51", "html_url": "https://github.com/rust-lang/rust/commit/ce3d6339e0454b6353e863f226ddd2a3900f9e51"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "6ca0caeeef1d1240450f905d3c1102a5c3ce9302", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a0ab57b3f62017c065c6f3ced67e4c35898b51a3/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ab57b3f62017c065c6f3ced67e4c35898b51a3/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=a0ab57b3f62017c065c6f3ced67e4c35898b51a3", "patch": "@@ -382,29 +382,38 @@ fn compile_submatch(@block_ctxt bcx, &match m, ValueRef[] vals, &mk_fail f,\n     }\n }\n \n-// FIXME breaks on unreacheable cases\n+// Returns false for unreachable blocks\n fn make_phi_bindings(&@block_ctxt bcx, &exit_node[] map,\n-                     &ast::pat_id_map ids) {\n-    fn assoc(str key, &tup(str, ValueRef)[] list) -> ValueRef {\n+                     &ast::pat_id_map ids) -> bool {\n+    fn assoc(str key, &tup(str, ValueRef)[] list) -> option::t[ValueRef] {\n         for (tup(str, ValueRef) elt in list) {\n-            if (str::eq(elt._0, key)) { ret elt._1; }\n+            if (str::eq(elt._0, key)) { ret some(elt._1); }\n         }\n-        fail;\n+        ret none;\n     }\n \n     auto our_block = bcx.llbb as uint;\n+    auto success = true;\n     for each (@tup(ast::ident, ast::node_id) item in ids.items()) {\n         auto llbbs = ~[];\n         auto vals = ~[];\n         for (exit_node ex in map) {\n             if (ex.to as uint == our_block) {\n-                llbbs += ~[ex.from];\n-                vals += ~[assoc(item._0, ex.bound)];\n+                alt (assoc(item._0, ex.bound)) {\n+                    some(?val) {\n+                        llbbs += ~[ex.from];\n+                        vals += ~[val];\n+                    }\n+                    none {}\n+                }\n             }\n         }\n-        auto phi = bcx.build.Phi(val_ty(vals.(0)), vals, llbbs);\n-        bcx.fcx.lllocals.insert(item._1, phi);\n+        if (ivec::len(vals) > 0u) {\n+            auto phi = bcx.build.Phi(val_ty(vals.(0)), vals, llbbs);\n+            bcx.fcx.lllocals.insert(item._1, phi);\n+        } else { success = false; }\n     }\n+    ret success;\n }\n \n fn trans_alt(&@block_ctxt cx, &@ast::expr expr, &ast::arm[] arms,\n@@ -444,9 +453,13 @@ fn trans_alt(&@block_ctxt cx, &@ast::expr expr, &ast::arm[] arms,\n     auto arm_results = ~[];\n     for (ast::arm a in arms) {\n         auto body_cx = bodies.(i);\n-        make_phi_bindings(body_cx, exit_map, ast::pat_id_map(a.pats.(0)));\n-        auto block_res = trans::trans_block(body_cx, a.block, output);\n-        arm_results += ~[block_res];\n+        if (make_phi_bindings(body_cx, exit_map,\n+                              ast::pat_id_map(a.pats.(0)))) {\n+            auto block_res = trans::trans_block(body_cx, a.block, output);\n+            arm_results += ~[block_res];\n+        } else { // Unreachable\n+            arm_results += ~[rslt(body_cx, C_nil())];\n+        }\n         i += 1u;\n     }\n     ret rslt(trans::join_branches(cx, arm_results), C_nil());"}]}