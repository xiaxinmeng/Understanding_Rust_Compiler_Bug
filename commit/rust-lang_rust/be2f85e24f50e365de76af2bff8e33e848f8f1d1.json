{"sha": "be2f85e24f50e365de76af2bff8e33e848f8f1d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmY4NWUyNGY1MGUzNjVkZTc2YWYyYmZmOGUzM2U4NDhmOGYxZDE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-09-05T14:14:35Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-09-16T11:26:49Z"}, "message": "Update rustdoc_ng to new ast naming", "tree": {"sha": "ad9ddd95832fe78558e452cc451db8feb039fd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad9ddd95832fe78558e452cc451db8feb039fd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2f85e24f50e365de76af2bff8e33e848f8f1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2f85e24f50e365de76af2bff8e33e848f8f1d1", "html_url": "https://github.com/rust-lang/rust/commit/be2f85e24f50e365de76af2bff8e33e848f8f1d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2f85e24f50e365de76af2bff8e33e848f8f1d1/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "136900fdbbe218d16190c38042ec2aa16cb50840", "url": "https://api.github.com/repos/rust-lang/rust/commits/136900fdbbe218d16190c38042ec2aa16cb50840", "html_url": "https://github.com/rust-lang/rust/commit/136900fdbbe218d16190c38042ec2aa16cb50840"}], "stats": {"total": 147, "additions": 64, "deletions": 83}, "files": [{"sha": "fefd679e20b2fc64f12b4558db9641f093368214", "filename": "src/rustdoc_ng/clean.rs", "status": "modified", "additions": 40, "deletions": 59, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fclean.rs?ref=be2f85e24f50e365de76af2bff8e33e848f8f1d1", "patch": "@@ -657,7 +657,7 @@ impl Clean<VariantKind> for ast::variant_kind {\n     }\n }\n \n-impl Clean<~str> for syntax::codemap::span {\n+impl Clean<~str> for syntax::codemap::Span {\n     fn clean(&self) -> ~str {\n         let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess.codemap;\n         cm.span_to_str(*self)\n@@ -697,7 +697,7 @@ fn path_to_str(p: &ast::Path) -> ~str {\n     s\n }\n \n-impl Clean<~str> for ast::ident {\n+impl Clean<~str> for ast::Ident {\n     fn clean(&self) -> ~str {\n         its(self).to_owned()\n     }\n@@ -779,15 +779,13 @@ impl Clean<Item> for doctree::Static {\n pub enum Mutability {\n     Mutable,\n     Immutable,\n-    Const,\n }\n \n-impl Clean<Mutability> for ast::mutability {\n+impl Clean<Mutability> for ast::Mutability {\n     fn clean(&self) -> Mutability {\n         match self {\n-            &ast::m_mutbl => Mutable,\n-            &ast::m_imm => Immutable,\n-            &ast::m_const => Const\n+            &ast::MutMutable => Mutable,\n+            &ast::MutImmutable => Immutable,\n         }\n     }\n }\n@@ -885,7 +883,7 @@ trait ToSource {\n     fn to_src(&self) -> ~str;\n }\n \n-impl ToSource for syntax::codemap::span {\n+impl ToSource for syntax::codemap::Span {\n     fn to_src(&self) -> ~str {\n         debug!(\"converting span %s to snippet\", self.clean());\n         let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess.codemap.clone();\n@@ -912,23 +910,23 @@ fn lit_to_str(lit: &ast::lit) -> ~str {\n     }\n }\n \n-fn name_from_pat(p: &ast::pat) -> ~str {\n+fn name_from_pat(p: &ast::Pat) -> ~str {\n     use syntax::ast::*;\n     match p.node {\n-        pat_wild => ~\"_\",\n-        pat_ident(_, ref p, _) => path_to_str(p),\n-        pat_enum(ref p, _) => path_to_str(p),\n-        pat_struct(*) => fail!(\"tried to get argument name from pat_struct, \\\n-                                 which is not allowed in function arguments\"),\n-        pat_tup(*) => ~\"(tuple arg NYI)\",\n-        pat_box(p) => name_from_pat(p),\n-        pat_uniq(p) => name_from_pat(p),\n-        pat_region(p) => name_from_pat(p),\n-        pat_lit(*) => fail!(\"tried to get argument name from pat_lit, \\\n-                             which is not allowed in function arguments\"),\n-        pat_range(*) => fail!(\"tried to get argument name from pat_range, \\\n-                               which is not allowed in function arguments\"),\n-        pat_vec(*) => fail!(\"tried to get argument name from pat_vec, \\\n+        PatWild => ~\"_\",\n+        PatIdent(_, ref p, _) => path_to_str(p),\n+        PatEnum(ref p, _) => path_to_str(p),\n+        PatStruct(*) => fail!(\"tried to get argument name from pat_struct, \\\n+                                which is not allowed in function arguments\"),\n+        PatTup(*) => ~\"(tuple arg NYI)\",\n+        PatBox(p) => name_from_pat(p),\n+        PatUniq(p) => name_from_pat(p),\n+        PatRegion(p) => name_from_pat(p),\n+        PatLit(*) => fail!(\"tried to get argument name from pat_lit, \\\n+                            which is not allowed in function arguments\"),\n+        PatRange(*) => fail!(\"tried to get argument name from pat_range, \\\n+                              which is not allowed in function arguments\"),\n+        PatVec(*) => fail!(\"tried to get argument name from pat_vec, \\\n                              which is not allowed in function arguments\")\n     }\n }\n@@ -945,23 +943,6 @@ fn remove_comment_tags(s: &str) -> ~str {\n     }\n }\n \n-/*fn collapse_docs(attrs: ~[Attribute]) -> ~[Attribute] {\n-    let mut docstr = ~\"\";\n-    for at in attrs.iter() {\n-        match *at {\n-            //XXX how should these be separated?\n-            NameValue(~\"doc\", ref s) => docstr.push_str(fmt!(\"%s \", clean_comment_body(s.clone()))),\n-            _ => ()\n-        }\n-    }\n-    let mut a = attrs.iter().filter(|&a| match a {\n-        &NameValue(~\"doc\", _) => false,\n-        _ => true\n-    }).map(|x| x.clone()).collect::<~[Attribute]>();\n-    a.push(NameValue(~\"doc\", docstr.trim().to_owned()));\n-    a\n-}*/\n-\n /// Given a Type, resolve it using the def_map\n fn resolve_type(t: &Type) -> Type {\n     use syntax::ast::*;\n@@ -984,21 +965,21 @@ fn resolve_type(t: &Type) -> Type {\n     };\n \n     let def_id = match *d {\n-        def_fn(i, _) => i,\n-        def_self(i, _) | def_self_ty(i) => return Self(i),\n-        def_ty(i) => i,\n-        def_trait(i) => {\n-            debug!(\"saw def_trait in def_to_id\");\n+        DefFn(i, _) => i,\n+        DefSelf(i, _) | DefSelfTy(i) => return Self(i),\n+        DefTy(i) => i,\n+        DefTrait(i) => {\n+            debug!(\"saw DefTrait in def_to_id\");\n             i\n         },\n-        def_prim_ty(p) => match p {\n+        DefPrimTy(p) => match p {\n             ty_str => return String,\n             ty_bool => return Bool,\n             _ => return Primitive(p)\n         },\n-        def_ty_param(i, _) => return Generic(i.node),\n-        def_struct(i) => i,\n-        def_typaram_binder(i) => { \n+        DefTyParam(i, _) => return Generic(i.node),\n+        DefStruct(i) => i,\n+        DefTyParamBinder(i) => { \n             debug!(\"found a typaram_binder, what is it? %d\", i);\n             return TyParamBinder(i);\n         },\n@@ -1011,10 +992,10 @@ fn resolve_type(t: &Type) -> Type {\n         let mut ty = ~\"\";\n         do csearch::each_path(sess.cstore, def_id.crate) |pathstr, deflike, _vis| {\n             match deflike {\n-                decoder::dl_def(di) => {\n+                decoder::DlDef(di) => {\n                     let d2 = match di {\n-                        def_fn(i, _) | def_ty(i) | def_trait(i) |\n-                            def_struct(i) | def_mod(i) => Some(i),\n+                        DefFn(i, _) | DefTy(i) | DefTrait(i) |\n+                            DefStruct(i) | DefMod(i) => Some(i),\n                         _ => None,\n                     };\n                     if d2.is_some() {\n@@ -1023,10 +1004,10 @@ fn resolve_type(t: &Type) -> Type {\n                             debug!(\"found external def: %?\", di);\n                             path = pathstr.to_owned();\n                             ty = match di {\n-                                def_fn(*) => ~\"fn\",\n-                                def_ty(*) => ~\"enum\",\n-                                def_trait(*) => ~\"trait\",\n-                                def_prim_ty(p) => match p {\n+                                DefFn(*) => ~\"fn\",\n+                                DefTy(*) => ~\"enum\",\n+                                DefTrait(*) => ~\"trait\",\n+                                DefPrimTy(p) => match p {\n                                     ty_str => ~\"str\",\n                                     ty_bool => ~\"bool\",\n                                     ty_int(t) => match t.to_str() {\n@@ -1036,9 +1017,9 @@ fn resolve_type(t: &Type) -> Type {\n                                     ty_uint(t) => t.to_str(),\n                                     ty_float(t) => t.to_str()\n                                 },\n-                                def_ty_param(*) => ~\"generic\",\n-                                def_struct(*) => ~\"struct\",\n-                                def_typaram_binder(*) => ~\"typaram_binder\",\n+                                DefTyParam(*) => ~\"generic\",\n+                                DefStruct(*) => ~\"struct\",\n+                                DefTyParamBinder(*) => ~\"typaram_binder\",\n                                 x => fail!(\"resolved external maps to a weird def %?\", x),\n                             };\n "}, {"sha": "3b553608c1a4e0925890af362a183b79deea3319", "filename": "src/rustdoc_ng/doctree.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fdoctree.rs?ref=be2f85e24f50e365de76af2bff8e33e848f8f1d1", "patch": "@@ -2,14 +2,14 @@\n //! manner (and with prettier names) before cleaning.\n \n use syntax;\n-use syntax::codemap::span;\n+use syntax::codemap::Span;\n use syntax::ast;\n-use syntax::ast::{ident, NodeId};\n+use syntax::ast::{Ident, NodeId};\n \n pub struct Module {\n-    name: Option<ident>,\n+    name: Option<Ident>,\n     attrs: ~[ast::Attribute],\n-    where: span,\n+    where: Span,\n     structs: ~[Struct],\n     enums: ~[Enum],\n     fns: ~[Function],\n@@ -24,7 +24,7 @@ pub struct Module {\n }\n \n impl Module {\n-    pub fn new(name: Option<ident>) -> Module {\n+    pub fn new(name: Option<Ident>) -> Module {\n         Module {\n             name       : name,\n             id: 0,\n@@ -65,11 +65,11 @@ pub struct Struct {\n     vis: ast::visibility,\n     id: NodeId,\n     struct_type: StructType,\n-    name: ident,\n+    name: Ident,\n     generics: ast::Generics,\n     attrs: ~[ast::Attribute],\n     fields: ~[@ast::struct_field],\n-    where: span,\n+    where: Span,\n }\n \n pub struct Enum {\n@@ -78,58 +78,58 @@ pub struct Enum {\n     generics: ast::Generics,\n     attrs: ~[ast::Attribute],\n     id: NodeId,\n-    where: span,\n-    name: ident,\n+    where: Span,\n+    name: Ident,\n }\n \n pub struct Variant {\n-    name: ident,\n+    name: Ident,\n     attrs: ~[ast::Attribute],\n     kind: ast::variant_kind,\n     id: ast::NodeId,\n     vis: ast::visibility,\n-    where: span,\n+    where: Span,\n }\n \n pub struct Function {\n     decl: ast::fn_decl,\n     attrs: ~[ast::Attribute],\n     id: NodeId,\n-    name: ident,\n+    name: Ident,\n     vis: ast::visibility,\n-    where: span,\n+    where: Span,\n     generics: ast::Generics,\n }\n \n pub struct Typedef {\n     ty: ast::Ty,\n     gen: ast::Generics,\n-    name: ast::ident,\n+    name: Ident,\n     id: ast::NodeId,\n     attrs: ~[ast::Attribute],\n-    where: span,\n+    where: Span,\n     vis: ast::visibility,\n }\n \n pub struct Static {\n     type_: ast::Ty,\n-    mutability: ast::mutability,\n-    expr: @ast::expr,\n-    name: ast::ident,\n+    mutability: ast::Mutability,\n+    expr: @ast::Expr,\n+    name: Ident,\n     attrs: ~[ast::Attribute],\n     vis: ast::visibility,\n     id: ast::NodeId,\n-    where: span,\n+    where: Span,\n }\n \n pub struct Trait {\n-    name: ast::ident,\n+    name: Ident,\n     methods: ~[ast::trait_method], //should be TraitMethod\n     generics: ast::Generics,\n     parents: ~[ast::trait_ref],\n     attrs: ~[ast::Attribute],\n     id: ast::NodeId,\n-    where: span,\n+    where: Span,\n     vis: ast::visibility,\n }\n \n@@ -139,7 +139,7 @@ pub struct Impl {\n     for_: ast::Ty,\n     methods: ~[@ast::method],\n     attrs: ~[ast::Attribute],\n-    where: span,\n+    where: Span,\n     vis: ast::visibility,\n     id: ast::NodeId,\n }"}, {"sha": "4ece4a1f0399e7d3b69d0b2cc5b568d12716e200", "filename": "src/rustdoc_ng/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2f85e24f50e365de76af2bff8e33e848f8f1d1/src%2Frustdoc_ng%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fvisit_ast.rs?ref=be2f85e24f50e365de76af2bff8e33e848f8f1d1", "patch": "@@ -3,7 +3,7 @@\n \n use syntax::abi::AbiSet;\n use syntax::{ast, ast_map};\n-use syntax::codemap::span;\n+use syntax::codemap::Span;\n \n use doctree::*;\n use std::local_data;\n@@ -79,7 +79,7 @@ impl RustdocVisitor {\n             }\n         }\n \n-        fn visit_mod_contents(span: span, attrs: ~[ast::Attribute], vis:\n+        fn visit_mod_contents(span: Span, attrs: ~[ast::Attribute], vis:\n                               ast::visibility, id: ast::NodeId, m: &ast::_mod) -> Module {\n             let am = local_data::get(super::ctxtkey, |x| *x.unwrap()).tycx.items;\n             let name = match am.find(&id) {"}]}