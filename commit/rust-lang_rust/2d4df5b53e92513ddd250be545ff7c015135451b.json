{"sha": "2d4df5b53e92513ddd250be545ff7c015135451b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGRmNWI1M2U5MjUxM2RkZDI1MGJlNTQ1ZmY3YzAxNTEzNTQ1MWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-12T16:01:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-19T17:38:37Z"}, "message": "NLL: Updates to diagnostic output in `test/ui`.", "tree": {"sha": "88f05e26284de6b1fdc66621d44916efbf95bec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f05e26284de6b1fdc66621d44916efbf95bec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4df5b53e92513ddd250be545ff7c015135451b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4df5b53e92513ddd250be545ff7c015135451b", "html_url": "https://github.com/rust-lang/rust/commit/2d4df5b53e92513ddd250be545ff7c015135451b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4df5b53e92513ddd250be545ff7c015135451b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd4b52b1b83195594ef88c193fdd409b68f19ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd4b52b1b83195594ef88c193fdd409b68f19ef", "html_url": "https://github.com/rust-lang/rust/commit/7fd4b52b1b83195594ef88c193fdd409b68f19ef"}], "stats": {"total": 266, "additions": 163, "deletions": 103}, "files": [{"sha": "592f666eff8f3955b2f8af28f90bac2df13117f4", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -17,6 +17,9 @@ LL | |     x;  //~ value moved here\n error[E0596]: cannot borrow immutable item `y` as mutable\n   --> $DIR/augmented-assignments.rs:30:5\n    |\n+LL |     let y = Int(2);\n+   |         - help: consider changing this to be mutable: `mut y`\n+LL |     //~^ consider changing this to `mut y`\n LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow as mutable\n "}, {"sha": "a008a408d97112116774c66e4b3234f24c7896d1", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -14,13 +14,13 @@ error[E0594]: cannot assign to immutable item `x`\n   --> $DIR/issue-45983.rs:17:18\n    |\n LL |     give_any(|y| x = Some(y));\n-   |                  ^^^^^^^^^^^ cannot mutate\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `x`\n+   |                  ^^^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/issue-45983.rs:17:14\n    |\n+LL |     let x = None;\n+   |         - help: consider changing this to be mutable: `mut x`\n LL |     give_any(|y| x = Some(y));\n    |              ^^^^^^^^^^^^^^^ cannot borrow as mutable\n "}, {"sha": "0674c8230165aa20713708cf551c43ebb2d5068f", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,6 +1,8 @@\n error[E0596]: cannot borrow immutable item `b` as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:18:7\n    |\n+LL | fn f(b: &mut i32) {\n+   |      - help: consider changing this to be mutable: `mut b`\n LL |     g(&mut b) //~ ERROR cannot borrow\n    |       ^^^^^^ cannot borrow as mutable\n "}, {"sha": "da0b201f5d4e160b6b6d191a8c0dce5adc6ab7d2", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,6 +1,9 @@\n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/huge_multispan_highlight.rs:100:13\n    |\n+LL |     let x = \"foo\";\n+   |         - help: consider changing this to be mutable: `mut x`\n+...\n LL |     let y = &mut x; //~ ERROR cannot borrow\n    |             ^^^^^^ cannot borrow as mutable\n "}, {"sha": "21c5e3608c00b5dd73fbffac57fa5f504731c930", "filename": "src/test/ui/did_you_mean/issue-31424.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -7,6 +7,8 @@ LL |         (&mut self).bar(); //~ ERROR cannot borrow\n error[E0596]: cannot borrow immutable item `self` as mutable\n   --> $DIR/issue-31424.rs:23:9\n    |\n+LL |     fn bar(self: &mut Self) {\n+   |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar(); //~ ERROR cannot borrow\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n "}, {"sha": "8dedb6ec4db80a1eed930a3e5168805c7546cef8", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -2,7 +2,10 @@ error[E0596]: cannot borrow immutable item `self` as mutable\n   --> $DIR/issue-34126.rs:16:18\n    |\n LL |         self.run(&mut self); //~ ERROR cannot borrow\n-   |                  ^^^^^^^^^ cannot borrow as mutable\n+   |                  ^^^^^^^^^\n+   |                  |\n+   |                  cannot borrow as mutable\n+   |                  try removing `&mut` here\n \n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:16:18"}, {"sha": "d2271e8e7de76b5ee9cf526f745edb54d1e56aeb", "filename": "src/test/ui/did_you_mean/issue-34337.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -2,7 +2,10 @@ error[E0596]: cannot borrow immutable item `key` as mutable\n   --> $DIR/issue-34337.rs:16:9\n    |\n LL |     get(&mut key); //~ ERROR cannot borrow\n-   |         ^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^\n+   |         |\n+   |         cannot borrow as mutable\n+   |         try removing `&mut` here\n \n error: aborting due to previous error\n "}, {"sha": "f070921558fb29a057b5418e6987e3583110e237", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow immutable item `f.v` as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n+LL |     let f = Foo { v: Vec::new() };\n+   |         - help: consider changing this to be mutable: `mut f`\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `f`\n \n error[E0384]: cannot assign twice to immutable variable `s.x`\n   --> $DIR/issue-35937.rs:26:5"}, {"sha": "e51a1baad25f26685fdfc7a43477e936986a67de", "filename": "src/test/ui/did_you_mean/issue-37139.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -2,7 +2,10 @@ error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/issue-37139.rs:22:18\n    |\n LL |             test(&mut x); //~ ERROR cannot borrow immutable\n-   |                  ^^^^^^ cannot borrow as mutable\n+   |                  ^^^^^^\n+   |                  |\n+   |                  cannot borrow as mutable\n+   |                  try removing `&mut` here\n \n error: aborting due to previous error\n "}, {"sha": "76b8c8ebf602940058e6828efbb1b1a2836de961", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow immutable item `*self.s` as mutable\n   --> $DIR/issue-38147-1.rs:27:9\n    |\n+LL |     fn f(&self) {\n+   |          ----- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n-   |         ^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*self`\n+   |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "c875957623b62841a675fbd11ce9e9340380c49f", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow immutable item `*f.s` as mutable\n   --> $DIR/issue-38147-4.rs:16:5\n    |\n+LL | fn f(x: usize, f: &Foo) {\n+   |                   ---- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n-   |     ^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*f`\n+   |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "02c1debca69b24fa515978b7e4c757612eba2fc1", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,96 +1,100 @@\n error[E0596]: cannot borrow immutable item `z.x` as mutable\n   --> $DIR/issue-39544.rs:21:13\n    |\n+LL |     let z = Z { x: X::Y };\n+   |         - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:17\n    |\n+LL |     fn foo<'z>(&'z self) {\n+   |                -------- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*self`\n+   |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:17\n    |\n+LL |     fn foo1(&self, other: &Z) {\n+   |             ----- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*self`\n+   |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:31:17\n    |\n+LL |     fn foo1(&self, other: &Z) {\n+   |                           -- help: consider changing this to be a mutable reference: `&mut Z`\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*other`\n+   |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:17\n    |\n+LL |     fn foo2<'a>(&'a self, other: &Z) {\n+   |                 -------- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*self`\n+   |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:36:17\n    |\n+LL |     fn foo2<'a>(&'a self, other: &Z) {\n+   |                                  -- help: consider changing this to be a mutable reference: `&mut Z`\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*other`\n+   |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:40:17\n    |\n+LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+   |                       -------- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*self`\n+   |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:41:17\n    |\n+LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n+   |                                        -- help: consider changing this to be a mutable reference: `&mut Z`\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*other`\n+   |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:45:17\n    |\n+LL |     fn foo4(other: &Z) {\n+   |                    -- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*other`\n+   |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `z.x` as mutable\n   --> $DIR/issue-39544.rs:51:13\n    |\n+LL | pub fn with_arg(z: Z, w: &Z) {\n+   |                 - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `w.x` as mutable\n   --> $DIR/issue-39544.rs:52:13\n    |\n+LL | pub fn with_arg(z: Z, w: &Z) {\n+   |                          -- help: consider changing this to be a mutable reference: `&mut Z`\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n-   |             ^^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*w`\n+   |             ^^^^^^^^ `w` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0594]: cannot assign to immutable item `*x.0`\n+error[E0594]: cannot assign to `*x.0` which is behind a `&` reference\n   --> $DIR/issue-39544.rs:58:5\n    |\n LL |     *x.0 = 1;\n-   |     ^^^^^^^^ cannot mutate\n+   |     ^^^^^^^^ cannot assign\n \n error: aborting due to 12 previous errors\n "}, {"sha": "1fd75de81284fd363b62fa149f616dd7894aeb96", "filename": "src/test/ui/did_you_mean/issue-40823.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,8 +1,10 @@\n error[E0596]: cannot borrow immutable item `*buf` as mutable\n   --> $DIR/issue-40823.rs:13:5\n    |\n+LL |     let mut buf = &[1, 2, 3, 4];\n+   |                   ------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4]`\n LL |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^ `buf` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "66e46dfe29d70d7cfc6b2f4dafdca49243e370dd", "filename": "src/test/ui/error-codes/E0389.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,4 +1,4 @@\n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `fancy_ref.num` which is behind a `&` reference\n   --> $DIR/E0389.rs:18:5\n    |\n LL |     let fancy_ref = &(&mut fancy);"}, {"sha": "be10b1d517bdc6c16af40bb31bef21b15a9cc0f8", "filename": "src/test/ui/issue-36400.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/issue-36400.rs:15:7\n    |\n+LL |     let x = Box::new(3);\n+   |         - help: consider changing this to be mutable: `mut x`\n LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n    |       ^^^^^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to previous error\n "}, {"sha": "01e26980323949cac18c34806e96e9453f4cc79a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -15,6 +15,8 @@ LL |   y.push(z); //~ ERROR lifetime mismatch\n error[E0596]: cannot borrow immutable item `y` as mutable\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n    |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                        - help: consider changing this to be mutable: `mut y`\n LL |   y.push(z); //~ ERROR lifetime mismatch\n    |   ^ cannot borrow as mutable\n "}, {"sha": "a61d49fc953dbd9eb2ba896d5eddccca5c8179b4", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -15,6 +15,8 @@ LL |   y.push(z); //~ ERROR lifetime mismatch\n error[E0596]: cannot borrow immutable item `y` as mutable\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n    |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                              - help: consider changing this to be mutable: `mut y`\n LL |   y.push(z); //~ ERROR lifetime mismatch\n    |   ^ cannot borrow as mutable\n "}, {"sha": "213eddee720d3e081949e761f6762e0d9955b00a", "filename": "src/test/ui/macros/span-covering-argument-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,6 +1,8 @@\n error[E0596]: cannot borrow immutable item `foo` as mutable\n   --> $DIR/span-covering-argument-1.rs:15:14\n    |\n+LL |             let $s = 0;\n+   |                 -- help: consider changing this to be mutable: `mut foo`\n LL |             *&mut $s = 0;\n    |              ^^^^^^^ cannot borrow as mutable\n ..."}, {"sha": "96e9f1554144788a6ecbaf1ccf0a15a6f85fea83", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,4 +1,4 @@\n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `fancy_ref.num` which is behind a `&` reference\n   --> $DIR/issue-47388.rs:18:5\n    |\n LL |     let fancy_ref = &(&mut fancy);"}, {"sha": "8aa7e8a417c2bea3aeb5d778768278e29720e664", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,26 +1,20 @@\n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:19:5\n    |\n-LL |     let Wrap(x) = &Wrap(3);\n-   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n-   |     ^^^^^^^\n+   |     ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:23:9\n    |\n-LL |     if let Some(x) = &Some(3) {\n-   |                 - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^\n+   |         ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:29:9\n    |\n-LL |     while let Some(x) = &Some(3) {\n-   |                    - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^\n+   |         ^^^^^^^ cannot assign\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4e00dec761621ac58d317944e99a1275c270ea28", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,26 +1,20 @@\n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:17:13\n    |\n-LL |         Some(n) => {\n-   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^\n+   |             ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:25:13\n    |\n-LL |         Some(n) => {\n-   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^\n+   |             ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:33:13\n    |\n-LL |         Some(n) => {\n-   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^\n+   |             ^^^^^^^ cannot assign\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3282fbba6c5cfea76aca5fd6733a04fc25e9b21f", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,50 +1,66 @@\n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n    |\n+LL | fn deref_mut_field1(x: Own<Point>) {\n+   |                     - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n    |                        ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:75:10\n    |\n+LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n+   |                               ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     &mut x.y //~ ERROR cannot borrow\n-   |          ^ cannot borrow as mutable\n+   |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n+LL | fn assign_field1<'a>(x: Own<Point>) {\n+   |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n    |\n+LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n+   |                         -------------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y = 3; //~ ERROR cannot borrow\n-   |     ^ cannot borrow as mutable\n+   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n    |\n+LL | fn deref_mut_method1(x: Own<Point>) {\n+   |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.set(0, 0); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:131:5\n    |\n+LL | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n+   |                                ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y_mut() //~ ERROR cannot borrow\n-   |     ^ cannot borrow as mutable\n+   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n    |\n+LL | fn assign_method1<'a>(x: Own<Point>) {\n+   |                       - help: consider changing this to be mutable: `mut x`\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n    |\n+LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n+   |                          -------------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n-   |      ^ cannot borrow as mutable\n+   |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 8 previous errors\n "}, {"sha": "0b1bfd8cee6730821670893decd6197ff80cf59b", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.nll.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,26 +1,34 @@\n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n    |\n+LL | fn deref_mut1(x: Own<isize>) {\n+   |               - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n    |                         ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n    |\n+LL | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n+   |                             -------------- help: consider changing this to be a mutable reference: `&mut Own<isize>`\n LL |     &mut **x //~ ERROR cannot borrow\n-   |           ^^ cannot borrow as mutable\n+   |           ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n    |\n+LL | fn assign1<'a>(x: Own<isize>) {\n+   |                - help: consider changing this to be mutable: `mut x`\n LL |     *x = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n    |\n+LL | fn assign2<'a>(x: &'a Own<isize>) {\n+   |                   -------------- help: consider changing this to be a mutable reference: `&mut Own<isize>`\n LL |     **x = 3; //~ ERROR cannot borrow\n-   |      ^^ cannot borrow as mutable\n+   |      ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c4bdef21de4bacdf5698a5c6ee99b7877ae1f993", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -15,16 +15,18 @@ LL | |     }));\n error[E0596]: cannot borrow immutable item `*f` as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n    |\n+LL | fn test2<F>(f: &F) where F: FnMut() {\n+   |                -- help: consider changing this to be a mutable reference: `&mut F`\n LL |     (*f)();\n-   |     ^^^^ cannot borrow as mutable\n+   |     ^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `*f.f` as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n    |\n+LL | fn test4(f: &Test) {\n+   |             ----- help: consider changing this to be a mutable reference: `&mut Test<'_>`\n LL |     f.f.call_mut(())\n-   |     ^^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*f`\n+   |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13"}, {"sha": "0bc614589e3d2ef1d0361fa8db4ae37bd736b6ab", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,8 +1,11 @@\n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-call-method-from-mut-aliasable.rs:27:5\n    |\n+LL | fn b(x: &Foo) {\n+   |         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n+LL |     x.f();\n LL |     x.h(); //~ ERROR cannot borrow\n-   |     ^ cannot borrow as mutable\n+   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "1cb2c92833c1634ab689cadce02bf38b98765fb1", "filename": "src/test/ui/span/borrowck-fn-in-const-b.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,8 +1,10 @@\n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-fn-in-const-b.rs:17:9\n    |\n+LL |     fn broken(x: &Vec<String>) {\n+   |                  ------------ help: consider changing this to be a mutable reference: `&mut std::vec::Vec<std::string::String>`\n LL |         x.push(format!(\"this is broken\"));\n-   |         ^ cannot borrow as mutable\n+   |         ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "cf615eed55691d3fc1db747ee184707042d3c7b8", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,16 +1,20 @@\n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:19:5\n    |\n+LL | fn borrowed_receiver(x: &Foo) {\n+   |                         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n+LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n-   |     ^ cannot borrow as mutable\n+   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:29:5\n    |\n+LL | fn owned_receiver(x: Box<Foo>) {\n+   |                   - help: consider changing this to be mutable: `mut x`\n+LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd19059fdae32d5121e3621de64dc28c952d7ef9", "filename": "src/test/ui/span/mut-arg-hint.nll.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,20 +1,26 @@\n error[E0596]: cannot borrow immutable item `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:13:9\n    |\n+LL |     fn foo(mut a: &String) {\n+   |                   ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n LL |         a.push_str(\"bar\"); //~ ERROR cannot borrow immutable borrowed content\n-   |         ^ cannot borrow as mutable\n+   |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:18:5\n    |\n+LL | pub fn foo<'a>(mut a: &'a String) {\n+   |                       ---------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n LL |     a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n-   |     ^ cannot borrow as mutable\n+   |     ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:25:9\n    |\n+LL |     pub fn foo(mut a: &String) {\n+   |                       ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n LL |         a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n-   |         ^ cannot borrow as mutable\n+   |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "335ccefe8a0b12096d3655d1343adf11f9232635", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to immutable item `y`\n   --> $DIR/closure-immutable-outer-variable.rs:21:26\n    |\n LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n-   |                          ^^^^^^^^^ cannot mutate\n+   |                          ^^^^^^^^^ cannot assign\n \n error: aborting due to previous error\n "}, {"sha": "7ef21d3720d8833ed9180789d0907889206f7f99", "filename": "src/test/ui/suggestions/fn-closure-mutable-capture.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,8 +1,8 @@\n-error[E0594]: cannot assign to immutable item `x`\n+error[E0594]: cannot assign to `x` which is behind a `&` reference\n   --> $DIR/fn-closure-mutable-capture.rs:15:17\n    |\n LL |     bar(move || x = 1);\n-   |                 ^^^^^ cannot mutate\n+   |                 ^^^^^ cannot assign\n \n error: aborting due to previous error\n "}, {"sha": "1a36b0c4839b6b79a59d317c8518df502f9abe31", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df5b53e92513ddd250be545ff7c015135451b/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=2d4df5b53e92513ddd250be545ff7c015135451b", "patch": "@@ -1,18 +1,18 @@\n error[E0596]: cannot borrow immutable item `**t` as mutable\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n    |\n+LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                        --------------- help: consider changing this to be a mutable reference: `&mut &mut i32`\n LL |     *t //~ ERROR\n-   |     ^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*t`\n+   |     ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `**t` as mutable\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n    |\n+LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                             --------------- help: consider changing this to be a mutable reference: `&mut &mut i32`\n LL |     {*t} //~ ERROR\n-   |      ^^ cannot borrow as mutable\n-   |\n-   = note: the value which is causing this path not to be mutable is...: `*t`\n+   |      ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 2 previous errors\n "}]}