{"sha": "8ad4f14372b920aae3ecd51a33211d0508a2fe03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDRmMTQzNzJiOTIwYWFlM2VjZDUxYTMzMjExZDA1MDhhMmZlMDM=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-02-22T01:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T01:35:29Z"}, "message": "Merge pull request #77 from rust-lang/reorg-vectors\n\nReorg vector types (nfc)", "tree": {"sha": "dbc06a9b600e367b3a82e1c9c2cbd3db6b88e34e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc06a9b600e367b3a82e1c9c2cbd3db6b88e34e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad4f14372b920aae3ecd51a33211d0508a2fe03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMwphCRBK7hj4Ov3rIwAAdHIIAHxt1eF/CS0e3Wr5210K9543\nWfDT8SzGhP1HG6SNT/+USedSwxT4xKrZf8n4tSvEPbO+LuWUvnYduyJrnRYQpNT3\nVY50+8/yZVloBxToGuMK9zRmT1uRT7FZm82vXOfWugrpoapA1hVtkuuJlDWTHEbT\nuMIQD9WSiKcaaARS4CAdYtJBH5dA1YJAtdd2CEIl2NeiIDoHa9UKgrlWYEDQuKGT\npL3LBDfhbTkFZMxlvobnacmV+c9irNtxmOSM/TzKUnciJnUwOuxiHcXPPDwBkeMW\nQJUNjU92EpIuz/wUmPPCVOxQk0adCDJaHd6ABifmsCELR5YbZAQAwUacqNfGfvA=\n=zYI7\n-----END PGP SIGNATURE-----\n", "payload": "tree dbc06a9b600e367b3a82e1c9c2cbd3db6b88e34e\nparent e3b729caad352f4e28610ee3bbe25955848c8710\nparent a2302da5b26fd5456c676a57c702c260cd977f95\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1613957729 -0800\ncommitter GitHub <noreply@github.com> 1613957729 -0800\n\nMerge pull request #77 from rust-lang/reorg-vectors\n\nReorg vector types (nfc)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad4f14372b920aae3ecd51a33211d0508a2fe03", "html_url": "https://github.com/rust-lang/rust/commit/8ad4f14372b920aae3ecd51a33211d0508a2fe03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad4f14372b920aae3ecd51a33211d0508a2fe03/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b729caad352f4e28610ee3bbe25955848c8710", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b729caad352f4e28610ee3bbe25955848c8710", "html_url": "https://github.com/rust-lang/rust/commit/e3b729caad352f4e28610ee3bbe25955848c8710"}, {"sha": "a2302da5b26fd5456c676a57c702c260cd977f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2302da5b26fd5456c676a57c702c260cd977f95", "html_url": "https://github.com/rust-lang/rust/commit/a2302da5b26fd5456c676a57c702c260cd977f95"}], "stats": {"total": 920, "additions": 460, "deletions": 460}, "files": [{"sha": "b18fe5213a3d184aaf1445c47c86e2dda7962251", "filename": "crates/core_simd/src/first.rs", "status": "renamed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Ffirst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Ffirst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffirst.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -1,31 +1,3 @@\n-/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n-macro_rules! from_transmute {\n-    { unsafe $a:ty => $b:ty } => {\n-        from_transmute!{ @impl $a => $b }\n-        from_transmute!{ @impl $b => $a }\n-    };\n-    { @impl $from:ty => $to:ty } => {\n-        impl core::convert::From<$from> for $to {\n-            #[inline]\n-            fn from(value: $from) -> $to {\n-                unsafe { core::mem::transmute(value) }\n-            }\n-        }\n-    };\n-}\n-\n-/// Provides implementations of `From<$generic> for core::arch::{x86, x86_64}::$intel` and\n-/// vice-versa that transmutes the value.\n-macro_rules! from_transmute_x86 {\n-    { unsafe $generic:ty => $intel:ident } => {\n-        #[cfg(target_arch = \"x86\")]\n-        from_transmute! { unsafe $generic => core::arch::x86::$intel }\n-\n-        #[cfg(target_arch = \"x86_64\")]\n-        from_transmute! { unsafe $generic => core::arch::x86_64::$intel }\n-    }\n-}\n-\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {\n@@ -150,69 +122,3 @@ macro_rules! impl_vector {\n         impl_shuffle_2pow_lanes!{ $name }\n     }\n }\n-\n-/// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n-macro_rules! impl_integer_vector {\n-    { $name:ident, $type:ty } => {\n-        impl_vector! { $name, $type }\n-\n-        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost64 {}\n-\n-        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost64 {\n-            #[inline]\n-            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n-                // TODO use SIMD cmp\n-                self.to_array().cmp(other.as_ref())\n-            }\n-        }\n-\n-        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost64 {\n-            #[inline]\n-            fn hash<H>(&self, state: &mut H)\n-            where\n-                H: core::hash::Hasher\n-            {\n-                self.as_slice().hash(state)\n-            }\n-        }\n-    }\n-}\n-\n-/// Implements inherent methods for a float vector `$name` containing multiple\n-/// `$lanes` of float `$type`, which uses `$bits_ty` as its binary\n-/// representation. Called from `define_float_vector!`.\n-macro_rules! impl_float_vector {\n-    { $name:ident, $type:ty, $bits_ty:ident } => {\n-        impl_vector! { $name, $type }\n-\n-        impl<const LANES: usize> $name<LANES>\n-        where\n-            Self: crate::LanesAtMost64,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost64,\n-        {\n-            /// Raw transmutation to an unsigned integer vector type with the\n-            /// same size and number of lanes.\n-            #[inline]\n-            pub fn to_bits(self) -> crate::$bits_ty<LANES> {\n-                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n-                unsafe { core::mem::transmute_copy(&self) }\n-            }\n-\n-            /// Raw transmutation from an unsigned integer vector type with the\n-            /// same size and number of lanes.\n-            #[inline]\n-            pub fn from_bits(bits: crate::$bits_ty<LANES>) -> Self {\n-                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n-                unsafe { core::mem::transmute_copy(&bits) }\n-            }\n-\n-            /// Produces a vector where every lane has the absolute value of the\n-            /// equivalently-indexed lane in `self`.\n-            #[inline]\n-            pub fn abs(self) -> Self {\n-                let no_sign = crate::$bits_ty::splat(!0 >> 1);\n-                Self::from_bits(self.to_bits() & no_sign)\n-            }\n-        }\n-    };\n-}", "previous_filename": "crates/core_simd/src/macros.rs"}, {"sha": "489996ae15ede22ee4adba7815e01deaff9cefcc", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -5,9 +5,11 @@\n //! Portable SIMD module.\n \n #[macro_use]\n-mod macros;\n+mod first;\n #[macro_use]\n mod permute;\n+#[macro_use]\n+mod transmute;\n \n mod fmt;\n mod intrinsics;\n@@ -20,33 +22,5 @@ pub use lanes_at_most_64::LanesAtMost64;\n mod masks;\n pub use masks::*;\n \n-mod vectors_u8;\n-pub use vectors_u8::*;\n-mod vectors_u16;\n-pub use vectors_u16::*;\n-mod vectors_u32;\n-pub use vectors_u32::*;\n-mod vectors_u64;\n-pub use vectors_u64::*;\n-mod vectors_u128;\n-pub use vectors_u128::*;\n-mod vectors_usize;\n-pub use vectors_usize::*;\n-\n-mod vectors_i8;\n-pub use vectors_i8::*;\n-mod vectors_i16;\n-pub use vectors_i16::*;\n-mod vectors_i32;\n-pub use vectors_i32::*;\n-mod vectors_i64;\n-pub use vectors_i64::*;\n-mod vectors_i128;\n-pub use vectors_i128::*;\n-mod vectors_isize;\n-pub use vectors_isize::*;\n-\n-mod vectors_f32;\n-pub use vectors_f32::*;\n-mod vectors_f64;\n-pub use vectors_f64::*;\n+mod vector;\n+pub use vector::*;"}, {"sha": "835d863029c5e6a0a137135eb8b227886b215ecc", "filename": "crates/core_simd/src/transmute.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -0,0 +1,27 @@\n+/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n+macro_rules! from_transmute {\n+    { unsafe $a:ty => $b:ty } => {\n+        from_transmute!{ @impl $a => $b }\n+        from_transmute!{ @impl $b => $a }\n+    };\n+    { @impl $from:ty => $to:ty } => {\n+        impl core::convert::From<$from> for $to {\n+            #[inline]\n+            fn from(value: $from) -> $to {\n+                unsafe { core::mem::transmute(value) }\n+            }\n+        }\n+    };\n+}\n+\n+/// Provides implementations of `From<$generic> for core::arch::{x86, x86_64}::$intel` and\n+/// vice-versa that transmutes the value.\n+macro_rules! from_transmute_x86 {\n+    { unsafe $generic:ty => $intel:ident } => {\n+        #[cfg(target_arch = \"x86\")]\n+        from_transmute! { unsafe $generic => core::arch::x86::$intel }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        from_transmute! { unsafe $generic => core::arch::x86_64::$intel }\n+    }\n+}"}, {"sha": "95534384b705c37f66236bfbb6616d09968ddb2b", "filename": "crates/core_simd/src/vector.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -0,0 +1,7 @@\n+mod float;\n+mod int;\n+mod uint;\n+\n+pub use float::*;\n+pub use int::*;\n+pub use uint::*;"}, {"sha": "9031e12b604f7657869c53ec3e4c6d75d295b54a", "filename": "crates/core_simd/src/vector/float.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -0,0 +1,86 @@\n+#![allow(non_camel_case_types)]\n+\n+/// Implements inherent methods for a float vector `$name` containing multiple\n+/// `$lanes` of float `$type`, which uses `$bits_ty` as its binary\n+/// representation. Called from `define_float_vector!`.\n+macro_rules! impl_float_vector {\n+    { $name:ident, $type:ty, $bits_ty:ident } => {\n+        impl_vector! { $name, $type }\n+\n+        impl<const LANES: usize> $name<LANES>\n+        where\n+            Self: crate::LanesAtMost64,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost64,\n+        {\n+            /// Raw transmutation to an unsigned integer vector type with the\n+            /// same size and number of lanes.\n+            #[inline]\n+            pub fn to_bits(self) -> crate::$bits_ty<LANES> {\n+                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n+                unsafe { core::mem::transmute_copy(&self) }\n+            }\n+\n+            /// Raw transmutation from an unsigned integer vector type with the\n+            /// same size and number of lanes.\n+            #[inline]\n+            pub fn from_bits(bits: crate::$bits_ty<LANES>) -> Self {\n+                assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<crate::$bits_ty<LANES>>());\n+                unsafe { core::mem::transmute_copy(&bits) }\n+            }\n+\n+            /// Produces a vector where every lane has the absolute value of the\n+            /// equivalently-indexed lane in `self`.\n+            #[inline]\n+            pub fn abs(self) -> Self {\n+                let no_sign = crate::$bits_ty::splat(!0 >> 1);\n+                Self::from_bits(self.to_bits() & no_sign)\n+            }\n+        }\n+    };\n+}\n+\n+\n+/// A SIMD vector of containing `LANES` `f32` values.\n+#[repr(simd)]\n+pub struct SimdF32<const LANES: usize>([f32; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_float_vector! { SimdF32, f32, SimdU32 }\n+\n+from_transmute_x86! { unsafe f32x4 => __m128 }\n+from_transmute_x86! { unsafe f32x8 => __m256 }\n+//from_transmute_x86! { unsafe f32x16 => __m512 }\n+\n+/// A SIMD vector of containing `LANES` `f64` values.\n+#[repr(simd)]\n+pub struct SimdF64<const LANES: usize>([f64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_float_vector! { SimdF64, f64, SimdU64 }\n+\n+from_transmute_x86! { unsafe f64x2 => __m128d }\n+from_transmute_x86! { unsafe f64x4 => __m256d }\n+//from_transmute_x86! { unsafe f64x8 => __m512d }\n+\n+/// Vector of two `f32` values\n+pub type f32x2 = SimdF32<2>;\n+\n+/// Vector of four `f32` values\n+pub type f32x4 = SimdF32<4>;\n+\n+/// Vector of eight `f32` values\n+pub type f32x8 = SimdF32<8>;\n+\n+/// Vector of 16 `f32` values\n+pub type f32x16 = SimdF32<16>;\n+\n+/// Vector of two `f64` values\n+pub type f64x2 = SimdF64<2>;\n+\n+/// Vector of four `f64` values\n+pub type f64x4 = SimdF64<4>;\n+\n+/// Vector of eight `f64` values\n+pub type f64x8 = SimdF64<8>;"}, {"sha": "86762f74ff4778b173a0d349ec54d463ef98782e", "filename": "crates/core_simd/src/vector/int.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -0,0 +1,167 @@\n+#![allow(non_camel_case_types)]\n+\n+/// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! impl_integer_vector {\n+    { $name:ident, $type:ty } => {\n+        impl_vector! { $name, $type }\n+\n+        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost64 {}\n+\n+        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost64 {\n+            #[inline]\n+            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n+                // TODO use SIMD cmp\n+                self.to_array().cmp(other.as_ref())\n+            }\n+        }\n+\n+        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost64 {\n+            #[inline]\n+            fn hash<H>(&self, state: &mut H)\n+            where\n+                H: core::hash::Hasher\n+            {\n+                self.as_slice().hash(state)\n+            }\n+        }\n+    }\n+}\n+\n+/// A SIMD vector of containing `LANES` `isize` values.\n+#[repr(simd)]\n+pub struct SimdIsize<const LANES: usize>([isize; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdIsize, isize }\n+\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe isizex4 => __m128i }\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe isizex8 => __m256i }\n+\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe isizex2 => __m128i }\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe isizex4 => __m256i }\n+//#[cfg(target_pointer_width = \"64\")]\n+//from_transmute_x86! { unsafe isizex8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i128` values.\n+#[repr(simd)]\n+pub struct SimdI128<const LANES: usize>([i128; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI128, i128 }\n+\n+from_transmute_x86! { unsafe i128x2 => __m256i }\n+//from_transmute_x86! { unsafe i128x4 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i16` values.\n+#[repr(simd)]\n+pub struct SimdI16<const LANES: usize>([i16; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI16, i16 }\n+\n+from_transmute_x86! { unsafe i16x8 => __m128i }\n+from_transmute_x86! { unsafe i16x16 => __m256i }\n+//from_transmute_x86! { unsafe i16x32 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i32` values.\n+#[repr(simd)]\n+pub struct SimdI32<const LANES: usize>([i32; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI32, i32 }\n+\n+from_transmute_x86! { unsafe i32x4 => __m128i }\n+from_transmute_x86! { unsafe i32x8 => __m256i }\n+//from_transmute_x86! { unsafe i32x16 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i64` values.\n+#[repr(simd)]\n+pub struct SimdI64<const LANES: usize>([i64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI64, i64 }\n+\n+from_transmute_x86! { unsafe i64x2 => __m128i }\n+from_transmute_x86! { unsafe i64x4 => __m256i }\n+//from_transmute_x86! { unsafe i64x8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i8` values.\n+#[repr(simd)]\n+pub struct SimdI8<const LANES: usize>([i8; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI8, i8 }\n+\n+from_transmute_x86! { unsafe i8x16 => __m128i }\n+from_transmute_x86! { unsafe i8x32 => __m256i }\n+//from_transmute_x86! { unsafe i8x64 => __m512i }\n+\n+/// Vector of two `isize` values\n+pub type isizex2 = SimdIsize<2>;\n+\n+/// Vector of four `isize` values\n+pub type isizex4 = SimdIsize<4>;\n+\n+/// Vector of eight `isize` values\n+pub type isizex8 = SimdIsize<8>;\n+\n+/// Vector of two `i128` values\n+pub type i128x2 = SimdI128<2>;\n+\n+/// Vector of four `i128` values\n+pub type i128x4 = SimdI128<4>;\n+\n+/// Vector of four `i16` values\n+pub type i16x4 = SimdI16<4>;\n+\n+/// Vector of eight `i16` values\n+pub type i16x8 = SimdI16<8>;\n+\n+/// Vector of 16 `i16` values\n+pub type i16x16 = SimdI16<16>;\n+\n+/// Vector of 32 `i16` values\n+pub type i16x32 = SimdI16<32>;\n+\n+/// Vector of two `i32` values\n+pub type i32x2 = SimdI32<2>;\n+\n+/// Vector of four `i32` values\n+pub type i32x4 = SimdI32<4>;\n+\n+/// Vector of eight `i32` values\n+pub type i32x8 = SimdI32<8>;\n+\n+/// Vector of 16 `i32` values\n+pub type i32x16 = SimdI32<16>;\n+\n+/// Vector of two `i64` values\n+pub type i64x2 = SimdI64<2>;\n+\n+/// Vector of four `i64` values\n+pub type i64x4 = SimdI64<4>;\n+\n+/// Vector of eight `i64` values\n+pub type i64x8 = SimdI64<8>;\n+\n+/// Vector of eight `i8` values\n+pub type i8x8 = SimdI8<8>;\n+\n+/// Vector of 16 `i8` values\n+pub type i8x16 = SimdI8<16>;\n+\n+/// Vector of 32 `i8` values\n+pub type i8x32 = SimdI8<32>;\n+\n+/// Vector of 64 `i8` values\n+pub type i8x64 = SimdI8<64>;"}, {"sha": "0f7a47eee30ec1e260c7e334665986643f1cbab2", "filename": "crates/core_simd/src/vector/uint.rs", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4f14372b920aae3ecd51a33211d0508a2fe03/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=8ad4f14372b920aae3ecd51a33211d0508a2fe03", "patch": "@@ -0,0 +1,168 @@\n+#![allow(non_camel_case_types)]\n+\n+\n+/// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! impl_unsigned_vector {\n+    { $name:ident, $type:ty } => {\n+        impl_vector! { $name, $type }\n+\n+        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost64 {}\n+\n+        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost64 {\n+            #[inline]\n+            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n+                // TODO use SIMD cmp\n+                self.to_array().cmp(other.as_ref())\n+            }\n+        }\n+\n+        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost64 {\n+            #[inline]\n+            fn hash<H>(&self, state: &mut H)\n+            where\n+                H: core::hash::Hasher\n+            {\n+                self.as_slice().hash(state)\n+            }\n+        }\n+    }\n+}\n+\n+/// A SIMD vector of containing `LANES` `usize` values.\n+#[repr(simd)]\n+pub struct SimdUsize<const LANES: usize>([usize; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdUsize, usize }\n+\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe usizex4 => __m128i }\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe usizex8 => __m256i }\n+\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe usizex2 => __m128i }\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe usizex4 => __m256i }\n+//#[cfg(target_pointer_width = \"64\")]\n+//from_transmute_x86! { unsafe usizex8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u128` values.\n+#[repr(simd)]\n+pub struct SimdU128<const LANES: usize>([u128; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdU128, u128 }\n+\n+from_transmute_x86! { unsafe u128x2 => __m256i }\n+//from_transmute_x86! { unsafe u128x4 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u16` values.\n+#[repr(simd)]\n+pub struct SimdU16<const LANES: usize>([u16; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdU16, u16 }\n+\n+from_transmute_x86! { unsafe u16x8 => __m128i }\n+from_transmute_x86! { unsafe u16x16 => __m256i }\n+//from_transmute_x86! { unsafe u16x32 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u32` values.\n+#[repr(simd)]\n+pub struct SimdU32<const LANES: usize>([u32; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdU32, u32 }\n+\n+from_transmute_x86! { unsafe u32x4 => __m128i }\n+from_transmute_x86! { unsafe u32x8 => __m256i }\n+//from_transmute_x86! { unsafe u32x16 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u64` values.\n+#[repr(simd)]\n+pub struct SimdU64<const LANES: usize>([u64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdU64, u64 }\n+\n+from_transmute_x86! { unsafe u64x2 => __m128i }\n+from_transmute_x86! { unsafe u64x4 => __m256i }\n+//from_transmute_x86! { unsafe u64x8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u8` values.\n+#[repr(simd)]\n+pub struct SimdU8<const LANES: usize>([u8; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_unsigned_vector! { SimdU8, u8 }\n+\n+from_transmute_x86! { unsafe u8x16 => __m128i }\n+from_transmute_x86! { unsafe u8x32 => __m256i }\n+//from_transmute_x86! { unsafe u8x64 => __m512i }\n+\n+/// Vector of two `usize` values\n+pub type usizex2 = SimdUsize<2>;\n+\n+/// Vector of four `usize` values\n+pub type usizex4 = SimdUsize<4>;\n+\n+/// Vector of eight `usize` values\n+pub type usizex8 = SimdUsize<8>;\n+\n+/// Vector of two `u128` values\n+pub type u128x2 = SimdU128<2>;\n+\n+/// Vector of four `u128` values\n+pub type u128x4 = SimdU128<4>;\n+\n+/// Vector of four `u16` values\n+pub type u16x4 = SimdU16<4>;\n+\n+/// Vector of eight `u16` values\n+pub type u16x8 = SimdU16<8>;\n+\n+/// Vector of 16 `u16` values\n+pub type u16x16 = SimdU16<16>;\n+\n+/// Vector of 32 `u16` values\n+pub type u16x32 = SimdU16<32>;\n+\n+/// Vector of two `u32` values\n+pub type u32x2 = SimdU32<2>;\n+\n+/// Vector of four `u32` values\n+pub type u32x4 = SimdU32<4>;\n+\n+/// Vector of eight `u32` values\n+pub type u32x8 = SimdU32<8>;\n+\n+/// Vector of 16 `u32` values\n+pub type u32x16 = SimdU32<16>;\n+\n+/// Vector of two `u64` values\n+pub type u64x2 = SimdU64<2>;\n+\n+/// Vector of four `u64` values\n+pub type u64x4 = SimdU64<4>;\n+\n+/// Vector of eight `u64` values\n+pub type u64x8 = SimdU64<8>;\n+\n+/// Vector of eight `u8` values\n+pub type u8x8 = SimdU8<8>;\n+\n+/// Vector of 16 `u8` values\n+pub type u8x16 = SimdU8<16>;\n+\n+/// Vector of 32 `u8` values\n+pub type u8x32 = SimdU8<32>;\n+\n+/// Vector of 64 `u8` values\n+pub type u8x64 = SimdU8<64>;"}, {"sha": "5bb8f3a1c34d04b92dbf88aa7b1e70373f1ff669", "filename": "crates/core_simd/src/vectors_f32.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `f32` values.\n-#[repr(simd)]\n-pub struct SimdF32<const LANES: usize>([f32; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_float_vector! { SimdF32, f32, SimdU32 }\n-\n-/// Vector of two `f32` values\n-pub type f32x2 = SimdF32<2>;\n-\n-/// Vector of four `f32` values\n-pub type f32x4 = SimdF32<4>;\n-\n-/// Vector of eight `f32` values\n-pub type f32x8 = SimdF32<8>;\n-\n-/// Vector of 16 `f32` values\n-pub type f32x16 = SimdF32<16>;\n-\n-from_transmute_x86! { unsafe f32x4 => __m128 }\n-from_transmute_x86! { unsafe f32x8 => __m256 }\n-//from_transmute_x86! { unsafe f32x16 => __m512 }"}, {"sha": "c0dca6a52ac621b63fad65aa49f307214bce1b27", "filename": "crates/core_simd/src/vectors_f64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `f64` values.\n-#[repr(simd)]\n-pub struct SimdF64<const LANES: usize>([f64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_float_vector! { SimdF64, f64, SimdU64 }\n-\n-/// Vector of two `f64` values\n-pub type f64x2 = SimdF64<2>;\n-\n-/// Vector of four `f64` values\n-pub type f64x4 = SimdF64<4>;\n-\n-/// Vector of eight `f64` values\n-pub type f64x8 = SimdF64<8>;\n-\n-from_transmute_x86! { unsafe f64x2 => __m128d }\n-from_transmute_x86! { unsafe f64x4 => __m256d }\n-//from_transmute_x86! { unsafe f64x8 => __m512d }"}, {"sha": "568fa81da80edf0937fdc7b3de9408ab4296d741", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,18 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i128` values.\n-#[repr(simd)]\n-pub struct SimdI128<const LANES: usize>([i128; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI128, i128 }\n-\n-/// Vector of two `i128` values\n-pub type i128x2 = SimdI128<2>;\n-\n-/// Vector of four `i128` values\n-pub type i128x4 = SimdI128<4>;\n-\n-from_transmute_x86! { unsafe i128x2 => __m256i }\n-//from_transmute_x86! { unsafe i128x4 => __m512i }"}, {"sha": "d77e593a2edc46b40065499c7ab233765bcc0667", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i16` values.\n-#[repr(simd)]\n-pub struct SimdI16<const LANES: usize>([i16; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI16, i16 }\n-\n-/// Vector of four `i16` values\n-pub type i16x4 = SimdI16<4>;\n-\n-/// Vector of eight `i16` values\n-pub type i16x8 = SimdI16<8>;\n-\n-/// Vector of 16 `i16` values\n-pub type i16x16 = SimdI16<16>;\n-\n-/// Vector of 32 `i16` values\n-pub type i16x32 = SimdI16<32>;\n-\n-from_transmute_x86! { unsafe i16x8 => __m128i }\n-from_transmute_x86! { unsafe i16x16 => __m256i }\n-//from_transmute_x86! { unsafe i16x32 => __m512i }"}, {"sha": "0a89eeda3b2f844fb45bc40b9f9614ea3ea2b515", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i32` values.\n-#[repr(simd)]\n-pub struct SimdI32<const LANES: usize>([i32; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI32, i32 }\n-\n-/// Vector of two `i32` values\n-pub type i32x2 = SimdI32<2>;\n-\n-/// Vector of four `i32` values\n-pub type i32x4 = SimdI32<4>;\n-\n-/// Vector of eight `i32` values\n-pub type i32x8 = SimdI32<8>;\n-\n-/// Vector of 16 `i32` values\n-pub type i32x16 = SimdI32<16>;\n-\n-from_transmute_x86! { unsafe i32x4 => __m128i }\n-from_transmute_x86! { unsafe i32x8 => __m256i }\n-//from_transmute_x86! { unsafe i32x16 => __m512i }"}, {"sha": "017140654a515375f5988f35fbe4bc25e778d715", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i64` values.\n-#[repr(simd)]\n-pub struct SimdI64<const LANES: usize>([i64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI64, i64 }\n-\n-/// Vector of two `i64` values\n-pub type i64x2 = SimdI64<2>;\n-\n-/// Vector of four `i64` values\n-pub type i64x4 = SimdI64<4>;\n-\n-/// Vector of eight `i64` values\n-pub type i64x8 = SimdI64<8>;\n-\n-from_transmute_x86! { unsafe i64x2 => __m128i }\n-from_transmute_x86! { unsafe i64x4 => __m256i }\n-//from_transmute_x86! { unsafe i64x8 => __m512i }"}, {"sha": "e21126533b8846b3708d3cf91af65030b94ff41e", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i8` values.\n-#[repr(simd)]\n-pub struct SimdI8<const LANES: usize>([i8; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI8, i8 }\n-\n-/// Vector of eight `i8` values\n-pub type i8x8 = SimdI8<8>;\n-\n-/// Vector of 16 `i8` values\n-pub type i8x16 = SimdI8<16>;\n-\n-/// Vector of 32 `i8` values\n-pub type i8x32 = SimdI8<32>;\n-\n-/// Vector of 64 `i8` values\n-pub type i8x64 = SimdI8<64>;\n-\n-from_transmute_x86! { unsafe i8x16 => __m128i }\n-from_transmute_x86! { unsafe i8x32 => __m256i }\n-//from_transmute_x86! { unsafe i8x64 => __m512i }"}, {"sha": "ee23dfe7d865e831179220f43fa02ba1802f1598", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,30 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `isize` values.\n-#[repr(simd)]\n-pub struct SimdIsize<const LANES: usize>([isize; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdIsize, isize }\n-\n-/// Vector of two `isize` values\n-pub type isizex2 = SimdIsize<2>;\n-\n-/// Vector of four `isize` values\n-pub type isizex4 = SimdIsize<4>;\n-\n-/// Vector of eight `isize` values\n-pub type isizex8 = SimdIsize<8>;\n-\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe isizex4 => __m128i }\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe isizex8 => __m256i }\n-\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe isizex2 => __m128i }\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe isizex4 => __m256i }\n-//#[cfg(target_pointer_width = \"64\")]\n-//from_transmute_x86! { unsafe isizex8 => __m512i }"}, {"sha": "7931b9e088f6fb516d0fc635f2253e96982c978e", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,18 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u128` values.\n-#[repr(simd)]\n-pub struct SimdU128<const LANES: usize>([u128; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU128, u128 }\n-\n-/// Vector of two `u128` values\n-pub type u128x2 = SimdU128<2>;\n-\n-/// Vector of four `u128` values\n-pub type u128x4 = SimdU128<4>;\n-\n-from_transmute_x86! { unsafe u128x2 => __m256i }\n-//from_transmute_x86! { unsafe u128x4 => __m512i }"}, {"sha": "91c0e6168089971bf3c27c1f6439cf61473013f2", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u16` values.\n-#[repr(simd)]\n-pub struct SimdU16<const LANES: usize>([u16; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU16, u16 }\n-\n-/// Vector of four `u16` values\n-pub type u16x4 = SimdU16<4>;\n-\n-/// Vector of eight `u16` values\n-pub type u16x8 = SimdU16<8>;\n-\n-/// Vector of 16 `u16` values\n-pub type u16x16 = SimdU16<16>;\n-\n-/// Vector of 32 `u16` values\n-pub type u16x32 = SimdU16<32>;\n-\n-from_transmute_x86! { unsafe u16x8 => __m128i }\n-from_transmute_x86! { unsafe u16x16 => __m256i }\n-//from_transmute_x86! { unsafe u16x32 => __m512i }"}, {"sha": "b0400b5ba3a948fb6a6238b54d6e1fe1c32429af", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u32` values.\n-#[repr(simd)]\n-pub struct SimdU32<const LANES: usize>([u32; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU32, u32 }\n-\n-/// Vector of two `u32` values\n-pub type u32x2 = SimdU32<2>;\n-\n-/// Vector of four `u32` values\n-pub type u32x4 = SimdU32<4>;\n-\n-/// Vector of eight `u32` values\n-pub type u32x8 = SimdU32<8>;\n-\n-/// Vector of 16 `u32` values\n-pub type u32x16 = SimdU32<16>;\n-\n-from_transmute_x86! { unsafe u32x4 => __m128i }\n-from_transmute_x86! { unsafe u32x8 => __m256i }\n-//from_transmute_x86! { unsafe u32x16 => __m512i }"}, {"sha": "0f3712241fe7714ddf2dbf018ddf20b0eaf30ab5", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u64` values.\n-#[repr(simd)]\n-pub struct SimdU64<const LANES: usize>([u64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU64, u64 }\n-\n-/// Vector of two `u64` values\n-pub type u64x2 = SimdU64<2>;\n-\n-/// Vector of four `u64` values\n-pub type u64x4 = SimdU64<4>;\n-\n-/// Vector of eight `u64` values\n-pub type u64x8 = SimdU64<8>;\n-\n-from_transmute_x86! { unsafe u64x2 => __m128i }\n-from_transmute_x86! { unsafe u64x4 => __m256i }\n-//from_transmute_x86! { unsafe u64x8 => __m512i }"}, {"sha": "6cf623f680136a0a212a447a9ef56e8e76dd4152", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,23 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u8` values.\n-#[repr(simd)]\n-pub struct SimdU8<const LANES: usize>([u8; LANES]) where Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU8, u8 }\n-\n-/// Vector of eight `u8` values\n-pub type u8x8 = SimdU8<8>;\n-\n-/// Vector of 16 `u8` values\n-pub type u8x16 = SimdU8<16>;\n-\n-/// Vector of 32 `u8` values\n-pub type u8x32 = SimdU8<32>;\n-\n-/// Vector of 64 `u8` values\n-pub type u8x64 = SimdU8<64>;\n-\n-from_transmute_x86! { unsafe u8x16 => __m128i }\n-from_transmute_x86! { unsafe u8x32 => __m256i }\n-//from_transmute_x86! { unsafe u8x64 => __m512i }"}, {"sha": "ea089aeb9d3cbeed69792d8e356420c1d5004605", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b729caad352f4e28610ee3bbe25955848c8710/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=e3b729caad352f4e28610ee3bbe25955848c8710", "patch": "@@ -1,30 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `usize` values.\n-#[repr(simd)]\n-pub struct SimdUsize<const LANES: usize>([usize; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdUsize, usize }\n-\n-/// Vector of two `usize` values\n-pub type usizex2 = SimdUsize<2>;\n-\n-/// Vector of four `usize` values\n-pub type usizex4 = SimdUsize<4>;\n-\n-/// Vector of eight `usize` values\n-pub type usizex8 = SimdUsize<8>;\n-\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe usizex4 => __m128i }\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe usizex8 => __m256i }\n-\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe usizex2 => __m128i }\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe usizex4 => __m256i }\n-//#[cfg(target_pointer_width = \"64\")]\n-//from_transmute_x86! { unsafe usizex8 => __m512i }"}]}