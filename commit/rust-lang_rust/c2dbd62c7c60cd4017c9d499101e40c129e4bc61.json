{"sha": "c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "node_id": "C_kwDOAAsO6NoAKGMyZGJkNjJjN2M2MGNkNDAxN2M5ZDQ5OTEwMWU0MGMxMjllNGJjNjE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T09:34:24Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T17:00:03Z"}, "message": "Lower closure binders to hir & properly check them", "tree": {"sha": "2b995dbbc34a3a74ea4ff4b8a6dcbd3b66198afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b995dbbc34a3a74ea4ff4b8a6dcbd3b66198afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "html_url": "https://github.com/rust-lang/rust/commit/c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89ef3cf66206b7c0ba0ca134de40b567c7bda83", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89ef3cf66206b7c0ba0ca134de40b567c7bda83", "html_url": "https://github.com/rust-lang/rust/commit/f89ef3cf66206b7c0ba0ca134de40b567c7bda83"}], "stats": {"total": 317, "additions": 214, "deletions": 103}, "files": [{"sha": "3f830acbf27a61f139fb4aa79f5edea564ba70e8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -642,7 +642,7 @@ pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics\n pub fn walk_closure_binder<'a, V: Visitor<'a>>(visitor: &mut V, binder: &'a ClosureBinder) {\n     match binder {\n         ClosureBinder::NotPresent => {}\n-        ClosureBinder::For { span: _, generic_params } => {\n+        ClosureBinder::For { generic_params, span: _ } => {\n             walk_list!(visitor, visit_generic_param, generic_params)\n         }\n     }"}, {"sha": "995dc6aab5561913b025d6f1668997cf60beff5b", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -609,6 +609,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n         let generator_kind = hir::ExprKind::Closure {\n+            binder: &hir::ClosureBinder::Default,\n             capture_clause,\n             bound_generic_params: &[],\n             fn_decl,\n@@ -842,15 +843,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        // FIXME(waffle): lower binder\n-        if let &ClosureBinder::For { span, .. } = binder {\n-            self.sess\n-                .struct_span_err(span, \"`for<...>` binders for closures are not yet supported\")\n-                .help(\"consider removing `for<...>`\")\n-                .emit();\n-        }\n+        let (binder_clause, generic_params) = self.lower_closure_binder(binder);\n \n-        let (body, generator_option) = self.with_new_scopes(move |this| {\n+        let (body_id, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n             let mut generator_kind = None;\n@@ -865,15 +860,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n             // Lower outside new scope to preserve `is_in_loop_condition`.\n             let fn_decl = this.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n             hir::ExprKind::Closure {\n+                binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n-                body,\n+                body: body_id,\n                 fn_decl_span: this.lower_span(fn_decl_span),\n                 movability: generator_option,\n             }\n@@ -918,6 +914,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n+    fn lower_closure_binder<'c>(\n+        &mut self,\n+        binder: &'c ClosureBinder,\n+    ) -> (&'hir hir::ClosureBinder, &'c [GenericParam]) {\n+        let (binder, params) = match binder {\n+            ClosureBinder::NotPresent => (hir::ClosureBinder::Default, &[][..]),\n+            &ClosureBinder::For { span, ref generic_params } => {\n+                let span = self.lower_span(span);\n+                (hir::ClosureBinder::For { span }, &**generic_params)\n+            }\n+        };\n+\n+        (self.arena.alloc(binder), params)\n+    }\n+\n     fn lower_expr_async_closure(\n         &mut self,\n         binder: &ClosureBinder,\n@@ -928,17 +939,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        // FIXME(waffle): lower binder\n         if let &ClosureBinder::For { span, .. } = binder {\n-            self.sess\n-                .struct_span_err(\n-                    span,\n-                    \"`for<...>` binders for async closures are not yet supported\",\n-                )\n-                .help(\"consider removing `for<...>`\")\n-                .emit();\n+            self.tcx.sess.span_err(\n+                span,\n+                \"`for<...>` binders on `async` closures are not currently supported\",\n+            );\n         }\n \n+        let (binder_clause, generic_params) = self.lower_closure_binder(binder);\n+\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n \n@@ -976,13 +985,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n             // We need to lower the declaration outside the new scope, because we\n             // have to conserve the state of being inside a loop condition for the\n             // closure argument types.\n             let fn_decl = this.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n             hir::ExprKind::Closure {\n+                binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,"}, {"sha": "2252dfd683a418065b379a779487c30c82d2c5c5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1931,6 +1931,7 @@ pub enum ExprKind<'hir> {\n     /// This may also be a generator literal or an `async block` as indicated by the\n     /// `Option<Movability>`.\n     Closure {\n+        binder: &'hir ClosureBinder,\n         capture_clause: CaptureBy,\n         bound_generic_params: &'hir [GenericParam<'hir>],\n         fn_decl: &'hir FnDecl<'hir>,\n@@ -2715,6 +2716,17 @@ impl FnRetTy<'_> {\n     }\n }\n \n+/// Represents `for<...>` binder before a closure\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n+pub enum ClosureBinder {\n+    /// Binder is not specified.\n+    Default,\n+    /// Binder is specified.\n+    ///\n+    /// Span points to the whole `for<...>`.\n+    For { span: Span },\n+}\n+\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct Mod<'hir> {\n     pub spans: ModSpans,"}, {"sha": "6eceef56b47d6c7ef237b80f9fdc6466fecbcbd2", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -925,7 +925,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n         FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(..) | FnKind::Closure => {}\n+        FnKind::Closure | FnKind::Method(..) => {}\n     }\n }\n \n@@ -1145,6 +1145,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprKind::Closure {\n+            binder: _,\n             bound_generic_params,\n             ref fn_decl,\n             body,\n@@ -1153,7 +1154,13 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             movability: _,\n         } => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n-            visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)\n+            visitor.visit_fn(\n+                FnKind::Closure,\n+                fn_decl,\n+                body,\n+                expression.span,\n+                expression.hir_id,\n+            )\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "5453f4a8c9295817e068509486cecac33c916c7a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -6,6 +6,7 @@ use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_hir as hir;\n+use rustc_hir::LifetimeParamKind;\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node, Term};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::SourceMap;\n@@ -1441,14 +1442,15 @@ impl<'a> State<'a> {\n                 self.bclose(expr.span);\n             }\n             hir::ExprKind::Closure {\n+                binder,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n             } => {\n-                self.print_formal_generic_params(bound_generic_params);\n+                self.print_closure_binder(binder, bound_generic_params);\n                 self.print_capture_clause(capture_clause);\n \n                 self.print_closure_params(fn_decl, body);\n@@ -2033,6 +2035,42 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_closure_binder(\n+        &mut self,\n+        binder: &hir::ClosureBinder,\n+        generic_params: &[GenericParam<'_>],\n+    ) {\n+        let generic_params = generic_params\n+            .iter()\n+            .filter(|p| {\n+                matches!(\n+                    p,\n+                    GenericParam {\n+                        kind: GenericParamKind::Lifetime { kind: LifetimeParamKind::Explicit },\n+                        ..\n+                    }\n+                )\n+            })\n+            .collect::<Vec<_>>();\n+\n+        match binder {\n+            hir::ClosureBinder::Default => {}\n+            // we need to distinguish `|...| {}` from `for<> |...| {}` as `for<>` adds additional restrictions\n+            hir::ClosureBinder::For { .. } if generic_params.is_empty() => self.word(\"for<>\"),\n+            hir::ClosureBinder::For { .. } => {\n+                self.word(\"for\");\n+                self.word(\"<\");\n+\n+                self.commasep(Inconsistent, &generic_params, |s, param| {\n+                    s.print_generic_param(param)\n+                });\n+\n+                self.word(\">\");\n+                self.nbsp();\n+            }\n+        }\n+    }\n+\n     pub fn print_bounds<'b>(\n         &mut self,\n         prefix: &'static str,"}, {"sha": "87cb2651dd31403edfe2a38651c5f5e8319309ce", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -154,6 +154,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n                 self.check_id(closure_id);\n             }\n         }\n+\n         run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n "}, {"sha": "80186650fe869d26dcf42fff4e32631f11a5b49b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -844,19 +844,30 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             this.in_func_body = previous_state;\n                         }\n                     }\n-                    FnKind::Closure(declaration, body) => {\n-                        // We do not have any explicit generic lifetime parameter.\n-                        // FIXME(rfc3216): Change when implementing `for<>` bounds on closures.\n+                    FnKind::Closure(binder, declaration, body) => {\n+                        this.visit_closure_binder(binder);\n+\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousCreateParameter {\n-                                binder: fn_id,\n-                                report_in_path: false,\n+                            match binder {\n+                                // We do not have any explicit generic lifetime parameter.\n+                                ClosureBinder::NotPresent => {\n+                                    LifetimeRibKind::AnonymousCreateParameter {\n+                                        binder: fn_id,\n+                                        report_in_path: false,\n+                                    }\n+                                }\n+                                ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n                             },\n                             // Add each argument to the rib.\n                             |this| this.resolve_params(&declaration.inputs),\n                         );\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id, true),\n+                            match binder {\n+                                ClosureBinder::NotPresent => {\n+                                    LifetimeRibKind::AnonymousPassThrough(fn_id, true)\n+                                }\n+                                ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n+                            },\n                             |this| visit::walk_fn_ret_ty(this, &declaration.output),\n                         );\n \n@@ -891,6 +902,18 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    fn visit_closure_binder(&mut self, b: &'ast ClosureBinder) {\n+        match b {\n+            ClosureBinder::NotPresent => {}\n+            ClosureBinder::For { generic_params, .. } => {\n+                self.visit_generic_params(\n+                    &generic_params,\n+                    self.diagnostic_metadata.current_self_item.is_some(),\n+                );\n+            }\n+        }\n+    }\n+\n     fn visit_generic_arg(&mut self, arg: &'ast GenericArg) {\n         debug!(\"visit_generic_arg({:?})\", arg);\n         let prev = replace(&mut self.diagnostic_metadata.currently_processing_generics, true);\n@@ -3515,6 +3538,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             // For closures, ClosureOrAsyncRibKind is added in visit_fn\n+            ExprKind::Closure(ClosureBinder::For { ref generic_params, span }, ..) => {\n+                self.with_generic_param_rib(\n+                    &generic_params,\n+                    NormalRibKind,\n+                    LifetimeRibKind::Generics {\n+                        binder: expr.id,\n+                        kind: LifetimeBinderKind::Function,\n+                        span,\n+                    },\n+                    |this| visit::walk_expr(this, expr),\n+                );\n+            }\n             ExprKind::Closure(..) => visit::walk_expr(self, expr),\n             ExprKind::Async(..) => {\n                 self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));"}, {"sha": "547255498a0962a61ae5c1db4f8168b4daf44afe", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -571,7 +571,51 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { bound_generic_params, .. } = e.kind {\n+        if let hir::ExprKind::Closure { binder, bound_generic_params, fn_decl, .. } = e.kind {\n+            if let &hir::ClosureBinder::For { span: for_sp, .. } = binder {\n+                fn span_of_infer(ty: &hir::Ty<'_>) -> Option<Span> {\n+                    struct V(Option<Span>);\n+\n+                    impl<'v> Visitor<'v> for V {\n+                        fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n+                            match t.kind {\n+                                _ if self.0.is_some() => (),\n+                                hir::TyKind::Infer => {\n+                                    self.0 = Some(t.span);\n+                                }\n+                                _ => intravisit::walk_ty(self, t),\n+                            }\n+                        }\n+                    }\n+\n+                    let mut v = V(None);\n+                    v.visit_ty(ty);\n+                    v.0\n+                }\n+\n+                let infer_in_rt_sp = match fn_decl.output {\n+                    hir::FnRetTy::DefaultReturn(sp) => Some(sp),\n+                    hir::FnRetTy::Return(ty) => span_of_infer(ty),\n+                };\n+\n+                let infer_spans = fn_decl\n+                    .inputs\n+                    .into_iter()\n+                    .filter_map(span_of_infer)\n+                    .chain(infer_in_rt_sp)\n+                    .collect::<Vec<_>>();\n+\n+                if !infer_spans.is_empty() {\n+                    self.tcx.sess\n+                        .struct_span_err(\n+                            infer_spans,\n+                            \"implicit types in closure signatures are forbidden when `for<...>` is present\",\n+                        )\n+                        .span_label(for_sp, \"`for<...>` is here\")\n+                        .emit();\n+                }\n+            }\n+\n             let next_early_index = self.next_early_index();\n             let (lifetimes, binders): (FxIndexMap<LocalDefId, Region>, Vec<_>) =\n                 bound_generic_params\n@@ -584,6 +628,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         (pair, r)\n                     })\n                     .unzip();\n+\n+            // FIXME: missing_named_lifetime_spots\n+\n             self.map.late_bound_vars.insert(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,"}, {"sha": "4fa599d37cbd170005aa9e9e94366a2267ea8df9", "filename": "src/test/ui/closures/binder/async-closure-with-binder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -4,4 +4,5 @@\n fn main() {\n     for<'a> async || ();\n     //~^ ERROR `for<...>` binders on `async` closures are not currently supported\n+    //~^^ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n }"}, {"sha": "1d4628b1a494a726b43c4d85d9162f0a8bccb49a", "filename": "src/test/ui/closures/binder/async-closure-with-binder.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -4,5 +4,13 @@ error: `for<...>` binders on `async` closures are not currently supported\n LL |     for<'a> async || ();\n    |     ^^^^^^^\n \n-error: aborting due to previous error\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/async-closure-with-binder.rs:5:5\n+   |\n+LL |     for<'a> async || ();\n+   |     -------^^^^^^^^^\n+   |     |\n+   |     `for<...>` is here\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d34e5721d919b6d6aead9fdad98ea9fc73b1410f", "filename": "src/test/ui/closures/binder/implicit-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let _f = for<'a> |_: &'a ()| {};\n-    //~^ implicit return type is forbidden when `for<...>` is present\n+    //~^ implicit types in closure signatures are forbidden when `for<...>` is present\n }"}, {"sha": "5bfb97113344a1ea4896a216e93105339ab50352", "filename": "src/test/ui/closures/binder/implicit-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1,4 +1,4 @@\n-error: implicit return type is forbidden when `for<...>` is present\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n   --> $DIR/implicit-return.rs:4:34\n    |\n LL |     let _f = for<'a> |_: &'a ()| {};"}, {"sha": "b0b494fa3ff13240a558a4a215f55f43013c4201", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1,12 +1,8 @@\n fn main() {\n-    for<> || {};\n+    for<> || -> () {};\n     //~^ ERROR `for<...>` binders for closures are experimental\n-    //~^^ ERROR `for<...>` binders for closures are not yet supported\n-    for<'a> || {};\n+    for<'a> || -> () {};\n     //~^ ERROR `for<...>` binders for closures are experimental\n-    //~^^ ERROR `for<...>` binders for closures are not yet supported\n-    for<'a, 'b> |_: &'a ()| {};\n+    for<'a, 'b> |_: &'a ()| -> () {};\n     //~^ ERROR `for<...>` binders for closures are experimental\n-    //~^^ ERROR `for<...>` binders for closures are not yet supported\n-    //~^^^ ERROR use of undeclared lifetime name `'a`\n }"}, {"sha": "aea5cfeed0705825ce554186d4b2c91aafb5c28b", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1,67 +1,33 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:22\n-   |\n-LL | fn main() {\n-   |        - help: consider introducing lifetime `'a` here: `<'a>`\n-...\n-LL |     for<'a, 'b> |_: &'a ()| {};\n-   |                      ^^ undeclared lifetime\n-\n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5\n    |\n-LL |     for<> || {};\n+LL |     for<> || -> () {};\n    |     ^^^^^\n    |\n    = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n    = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n    = help: consider removing `for<...>`\n \n error[E0658]: `for<...>` binders for closures are experimental\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:5:5\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:4:5\n    |\n-LL |     for<'a> || {};\n+LL |     for<'a> || -> () {};\n    |     ^^^^^^^\n    |\n    = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n    = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n    = help: consider removing `for<...>`\n \n error[E0658]: `for<...>` binders for closures are experimental\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:5\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:6:5\n    |\n-LL |     for<'a, 'b> |_: &'a ()| {};\n+LL |     for<'a, 'b> |_: &'a ()| -> () {};\n    |     ^^^^^^^^^^^\n    |\n    = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n    = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n    = help: consider removing `for<...>`\n \n-error: `for<...>` binders for closures are not yet supported\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5\n-   |\n-LL |     for<> || {};\n-   |     ^^^^^\n-   |\n-   = help: consider removing `for<...>`\n-\n-error: `for<...>` binders for closures are not yet supported\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:5:5\n-   |\n-LL |     for<'a> || {};\n-   |     ^^^^^^^\n-   |\n-   = help: consider removing `for<...>`\n-\n-error: `for<...>` binders for closures are not yet supported\n-  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:5\n-   |\n-LL |     for<'a, 'b> |_: &'a ()| {};\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider removing `for<...>`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0261, E0658.\n-For more information about an error, try `rustc --explain E0261`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "10af39b70074882ef906f592ac57975f4df7beba", "filename": "src/test/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1,8 +1,7 @@\n fn main() {\n     for<'a> |x: &'a u8| *x + 1;\n-    //~^ ERROR use of undeclared lifetime name `'a`\n-    //~^^ ERROR `for<...>` binders for closures are experimental\n-    //~^^^ ERROR `for<...>` binders for closures are not yet supported\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    //~^^ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n }\n \n enum Foo { Bar }"}, {"sha": "39eec80f658ad9344ab64a8091c32381806b2b81", "filename": "src/test/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbd62c7c60cd4017c9d499101e40c129e4bc61/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "patch": "@@ -1,17 +1,9 @@\n error: expected one of `move`, `static`, `|`, or `||`, found `::`\n-  --> $DIR/recover-quantified-closure.rs:10:14\n+  --> $DIR/recover-quantified-closure.rs:9:14\n    |\n LL |     for <Foo>::Bar in x {}\n    |              ^^ expected one of `move`, `static`, `|`, or `||`\n \n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/recover-quantified-closure.rs:2:18\n-   |\n-LL | fn main() {\n-   |        - help: consider introducing lifetime `'a` here: `<'a>`\n-LL |     for<'a> |x: &'a u8| *x + 1;\n-   |                  ^^ undeclared lifetime\n-\n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5\n    |\n@@ -23,7 +15,7 @@ LL |     for<'a> |x: &'a u8| *x + 1;\n    = help: consider removing `for<...>`\n \n error[E0658]: `for<...>` binders for closures are experimental\n-  --> $DIR/recover-quantified-closure.rs:10:5\n+  --> $DIR/recover-quantified-closure.rs:9:5\n    |\n LL |     for <Foo>::Bar in x {}\n    |     ^^^^^^^^^\n@@ -32,15 +24,14 @@ LL |     for <Foo>::Bar in x {}\n    = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n    = help: consider removing `for<...>`\n \n-error: `for<...>` binders for closures are not yet supported\n-  --> $DIR/recover-quantified-closure.rs:2:5\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/recover-quantified-closure.rs:2:25\n    |\n LL |     for<'a> |x: &'a u8| *x + 1;\n-   |     ^^^^^^^\n-   |\n-   = help: consider removing `for<...>`\n+   |     -------             ^\n+   |     |\n+   |     `for<...>` is here\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0261, E0658.\n-For more information about an error, try `rustc --explain E0261`.\n+For more information about this error, try `rustc --explain E0658`."}]}