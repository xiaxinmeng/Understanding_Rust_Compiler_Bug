{"sha": "38891b91bfe5d3fd10e841dbc6f67965bed141ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODkxYjkxYmZlNWQzZmQxMGU4NDFkYmM2ZjY3OTY1YmVkMTQxZWE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T00:47:11Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T18:14:14Z"}, "message": "Update invocation syntax for `macro_rules!`", "tree": {"sha": "8ceb67ea3a59f9fea00c72dbce2c7c4ab83adc1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ceb67ea3a59f9fea00c72dbce2c7c4ab83adc1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38891b91bfe5d3fd10e841dbc6f67965bed141ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38891b91bfe5d3fd10e841dbc6f67965bed141ea", "html_url": "https://github.com/rust-lang/rust/commit/38891b91bfe5d3fd10e841dbc6f67965bed141ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38891b91bfe5d3fd10e841dbc6f67965bed141ea/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "345363866c4e66f97b54bd9c79f3a94fd30a555d", "url": "https://api.github.com/repos/rust-lang/rust/commits/345363866c4e66f97b54bd9c79f3a94fd30a555d", "html_url": "https://github.com/rust-lang/rust/commit/345363866c4e66f97b54bd9c79f3a94fd30a555d"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "f5c7f60aec5d49912060237e6b2dfb4e410f3b4f", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -16,9 +16,9 @@ import io::WriterUtil;\n \n import pipes::{port, chan, SharedChan};\n \n-macro_rules! move_out {\n+macro_rules! move_out (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n-}\n+)\n \n enum request {\n     get_count,"}, {"sha": "2e074f1b4bab2bc9ae3e315e3b290144ba0290af", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -12,9 +12,9 @@ import io::WriterUtil;\n \n import pipes::{port, PortSet, chan};\n \n-macro_rules! move_out {\n+macro_rules! move_out (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n-}\n+)\n \n enum request {\n     get_count,"}, {"sha": "db8894da587d4defb33b8eb136feb054c44ed31a", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -32,11 +32,11 @@ proto! pingpong_unbounded {\n }\n \n // This stuff should go in libcore::pipes\n-macro_rules! move_it {\n+macro_rules! move_it (\n     { $x:expr } => { let t <- *ptr::addr_of($x); t }\n-}\n+)\n \n-macro_rules! follow {\n+macro_rules! follow (\n     {\n         $($message:path($($x: ident),+) -> $next:ident $e:expr)+\n     } => (\n@@ -62,7 +62,7 @@ macro_rules! follow {\n                 _ => { fail }\n         }\n     )\n-}\n+)\n \n fn switch<T: send, Tb: send, U>(+endp: pipes::recv_packet_buffered<T, Tb>,\n                       f: fn(+option<T>) -> U) -> U {"}, {"sha": "efad6ae921089b355df53de78a41662204db2f76", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -34,9 +34,9 @@ import comm::port;\n import comm::recv;\n import comm::send;\n \n-macro_rules! move_out {\n+macro_rules! move_out (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n-}\n+)\n \n trait word_reader {\n     fn read_word() -> option<~str>;"}, {"sha": "80f283c4f2b150f4fc1b010d6fb8fca42dd3e255", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -15,13 +15,13 @@ left.\n \n */\n \n-macro_rules! html {\n+macro_rules! html (\n     { $($body:tt)* } => (\n         parse_node!( []; []; $($body)* )\n     )\n-}\n+)\n \n-macro_rules! parse_node {\n+macro_rules! parse_node (\n     {\n         [:$head:ident ($(:$head_nodes:expr),*)\n          $(:$tags:ident ($(:$tag_nodes:expr),*))*];\n@@ -72,7 +72,7 @@ macro_rules! parse_node {\n     );\n \n     { []; [:$e:expr]; } => ( $e );\n-}\n+)\n \n fn main() {\n     let page = html! ("}, {"sha": "69a7e557fdcfe80e0c4c1a9374cae722b38e2421", "filename": "src/test/run-pass/macro-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-2.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -9,12 +9,12 @@ fn main() {\n \n     assert (mylambda!(y, y * 2)(8) == 16);\n \n-    macro_rules! mylambda_tt{\n+    macro_rules! mylambda_tt(\n         {$x:ident, $body:expr} => {\n             fn f($x: int) -> int { return $body; };\n             f\n         }\n-    }\n+    )\n \n     assert(mylambda_tt!(y, y * 2)(8) == 16)\n }"}, {"sha": "549d7d1aaf099121fcbc10ddd8cb98d14397fb50", "filename": "src/test/run-pass/macro-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-3.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -5,8 +5,8 @@ fn main() {\n \n     assert (trivial!() == 16);\n \n-    macro_rules! trivial_tt{\n+    macro_rules! trivial_tt(\n         {} => {1*2*4*2*1}\n-    }\n+    )\n     assert(trivial_tt!() == 16);\n }"}, {"sha": "65b3fe0ac59afa27b9a3b3d9fee7f1049f060c8d", "filename": "src/test/run-pass/macro-by-example-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -2,9 +2,9 @@\n fn main() {\n     #macro[[#apply[f, [x, ...]], f(x, ...)]];\n \n-    macro_rules! apply_tt{\n+    macro_rules! apply_tt(\n         {$f:expr, ($($x:expr),*)} => {$f($($x),*)}\n-    }\n+    )\n \n     fn add(a: int, b: int) -> int { return a + b; }\n "}, {"sha": "38032e4ec521a05c8d517aac33226f793b7679e7", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -1,5 +1,5 @@\n \n-macro_rules! overly_complicated {\n+macro_rules! overly_complicated (\n     {$fnname:ident, $arg:ident, $ty:ty, $body:block, $val:expr, $pat:pat, $res:path} =>\n     {\n         fn $fnname($arg: $ty) -> option<$ty> $body\n@@ -11,7 +11,7 @@ macro_rules! overly_complicated {\n         }\n     }\n \n-}\n+)\n fn main() {\n     assert overly_complicated!(f, x, option<uint>, { return some(x); },\n                                some(8u), some(y), y) == 8u"}, {"sha": "30622d598860f23a4115dfa10814525382b90801", "filename": "src/test/run-pass/macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -4,8 +4,8 @@ fn main() {\n     #macro[[#m1[a], a * 4]];\n     assert (m1!(2) == 8);\n \n-    macro_rules! m1tt {\n+    macro_rules! m1tt (\n         {$a:expr} => {$a*4}\n-    };\n+    );\n     assert(m1tt!(2) == 8);\n }"}, {"sha": "839c63df951fb69ec129530788313f9d2bfff076", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -32,9 +32,9 @@ proto! bank {\n     }\n }\n \n-macro_rules! move_it {\n+macro_rules! move_it (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n-}\n+)\n \n fn switch<T: send, U>(+endp: pipes::recv_packet<T>,\n                       f: fn(+option<T>) -> U) -> U {\n@@ -43,7 +43,7 @@ fn switch<T: send, U>(+endp: pipes::recv_packet<T>,\n \n fn move_it<T>(-x: T) -> T { x }\n \n-macro_rules! follow {\n+macro_rules! follow (\n     {\n         $($message:path$(($($x: ident),+))||* -> $next:ident $e:expr)+\n     } => (\n@@ -54,7 +54,7 @@ macro_rules! follow {\n           _ => { fail }\n         }\n     );\n-}\n+)\n \n fn client_follow(+bank: bank::client::login) {\n     import bank::*;"}, {"sha": "9758ce68dc45f0b2022c6dac2be38a29cc9f4a34", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -8,7 +8,7 @@\n import double_buffer::client::*;\n import double_buffer::give_buffer;\n \n-macro_rules! select_if {\n+macro_rules! select_if (\n     {\n         $index:expr,\n         $count:expr,\n@@ -48,9 +48,9 @@ macro_rules! select_if {\n     } => {\n         fail\n     }\n-}\n+)\n \n-macro_rules! select {\n+macro_rules! select (\n     {\n         $( $port:path => {\n             $($message:path$(($($x: ident),+))dont_type_this*\n@@ -62,7 +62,7 @@ macro_rules! select {\n             $($message$(($($x),+))dont_type_this* -> $next $e),+\n         ], )+)\n     }\n-}\n+)\n \n // Types and protocols\n struct Buffer {"}, {"sha": "9521d6f128924237493515f85071671089c03c99", "filename": "src/test/run-pass/select-macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38891b91bfe5d3fd10e841dbc6f67965bed141ea/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=38891b91bfe5d3fd10e841dbc6f67965bed141ea", "patch": "@@ -3,7 +3,7 @@\n  {\n \n // select!\n-macro_rules! select_if {\n+macro_rules! select_if (\n \n     {\n         $index:expr,\n@@ -44,9 +44,9 @@ macro_rules! select_if {\n             )\n         }\n     };\n-}\n+)\n \n-macro_rules! select {\n+macro_rules! select (\n     {\n         $( $port:path => {\n             $($message:path$(($($x: ident),+))dont_type_this*\n@@ -58,6 +58,6 @@ macro_rules! select {\n             $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n         ])+)\n     }\n-}\n+)\n \n }"}]}