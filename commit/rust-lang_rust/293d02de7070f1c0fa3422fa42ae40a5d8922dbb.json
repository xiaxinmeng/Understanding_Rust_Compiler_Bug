{"sha": "293d02de7070f1c0fa3422fa42ae40a5d8922dbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5M2QwMmRlNzA3MGYxYzBmYTM0MjJmYTQyYWU0MGE1ZDg5MjJkYmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T11:34:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T11:34:39Z"}, "message": "Rollup merge of #65339 - RalfJung:atomic-ordering, r=Centril\n\ndo not reference LLVM for our concurrency memory model\n\nFixes https://github.com/rust-lang/rust/issues/65282", "tree": {"sha": "a952fa14e35e8445fe5ded9e85b9b1036a86096a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a952fa14e35e8445fe5ded9e85b9b1036a86096a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293d02de7070f1c0fa3422fa42ae40a5d8922dbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdowvPCRBK7hj4Ov3rIwAAdHIIALAadn5hhIZJtfbebY5JX5Mv\n/cQFqdBoglxtxXJhgoKSgw/WxPY2kktZwkEw+LwpxuygR0EbD2Ka3THkA7peGqtY\nm4BGgKnU6KWxbn670w3O3uxvv4trmMuweTbLkhK23s/SvfYzSK9HZ8opyiJnhcgk\nOfmBWVt8Knhuu1kzUowJdnwxMoo3drxJkqkCo2qq/pO/3CnHeEjoZmeD1KH/5p6y\n0HXq/zcLdijuX8YgHufP0e59uIBNne/6I8g8EU/lE0ZIUL4mXV7igJjlScd6OUSS\nL8SYUUCztjMeBKFzOMScZk111eNpaeOlMDTtenU8TegUauf8pqyrW+I6CULgLhE=\n=u+kP\n-----END PGP SIGNATURE-----\n", "payload": "tree a952fa14e35e8445fe5ded9e85b9b1036a86096a\nparent af8a6e5e6d2b87f388f2b3145fbbede997152156\nparent d6ab45d264d8f6d664838360595d2175e44ef9c2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570966479 +0200\ncommitter GitHub <noreply@github.com> 1570966479 +0200\n\nRollup merge of #65339 - RalfJung:atomic-ordering, r=Centril\n\ndo not reference LLVM for our concurrency memory model\n\nFixes https://github.com/rust-lang/rust/issues/65282\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293d02de7070f1c0fa3422fa42ae40a5d8922dbb", "html_url": "https://github.com/rust-lang/rust/commit/293d02de7070f1c0fa3422fa42ae40a5d8922dbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293d02de7070f1c0fa3422fa42ae40a5d8922dbb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8a6e5e6d2b87f388f2b3145fbbede997152156", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8a6e5e6d2b87f388f2b3145fbbede997152156", "html_url": "https://github.com/rust-lang/rust/commit/af8a6e5e6d2b87f388f2b3145fbbede997152156"}, {"sha": "d6ab45d264d8f6d664838360595d2175e44ef9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ab45d264d8f6d664838360595d2175e44ef9c2", "html_url": "https://github.com/rust-lang/rust/commit/d6ab45d264d8f6d664838360595d2175e44ef9c2"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "f2822227ac2a69fa5d9b8e638e8b4ce6b5629e74", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/293d02de7070f1c0fa3422fa42ae40a5d8922dbb/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293d02de7070f1c0fa3422fa42ae40a5d8922dbb/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=293d02de7070f1c0fa3422fa42ae40a5d8922dbb", "patch": "@@ -18,11 +18,11 @@\n //!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n-//! same as [LLVM atomic orderings][1]. For more information see the [nomicon][2].\n+//! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n //! [`Ordering`]: enum.Ordering.html\n //!\n-//! [1]: https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n+//! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!\n //! Atomic variables are safe to share between threads (they implement [`Sync`])\n@@ -217,8 +217,8 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// operations synchronize other memory while additionally preserving a total order of such\n /// operations across all threads.\n ///\n-/// Rust's memory orderings are [the same as\n-/// LLVM's](https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n+/// Rust's memory orderings are [the same as those of\n+/// C++20](https://en.cppreference.com/w/cpp/atomic/memory_order).\n ///\n /// For more information see the [nomicon].\n ///\n@@ -231,9 +231,9 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n-    /// Corresponds to LLVM's [`Monotonic`] ordering.\n+    /// Corresponds to [`memory_order_relaxed`] in C++20.\n     ///\n-    /// [`Monotonic`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`memory_order_relaxed`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n     /// When coupled with a store, all previous operations become ordered\n@@ -246,11 +246,12 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a store.\n     ///\n-    /// Corresponds to LLVM's [`Release`] ordering.\n+    /// Corresponds to [`memory_order_release`] in C++20.\n     ///\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`Release`]: #variant.Release\n+    /// [`Acquire`]: #variant.Acquire\n+    /// [`Relaxed`]: #variant.Relaxed\n+    /// [`memory_order_release`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n     /// When coupled with a load, if the loaded value was written by a store operation with\n@@ -263,40 +264,41 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a load.\n     ///\n-    /// Corresponds to LLVM's [`Acquire`] ordering.\n+    /// Corresponds to [`memory_order_acquire`] in C++20.\n     ///\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`Acquire`]: #variant.Acquire\n+    /// [`Release`]: #variant.Release\n+    /// [`Relaxed`]: #variant.Relaxed\n+    /// [`memory_order_acquire`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n     /// Has the effects of both [`Acquire`] and [`Release`] together:\n     /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n     ///\n     /// Notice that in the case of `compare_and_swap`, it is possible that the operation ends up\n     /// not performing any store and hence it has just [`Acquire`] ordering. However,\n-    /// [`AcqRel`][`AcquireRelease`] will never perform [`Relaxed`] accesses.\n+    /// `AcqRel` will never perform [`Relaxed`] accesses.\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///\n-    /// Corresponds to LLVM's [`AcquireRelease`] ordering.\n+    /// Corresponds to [`memory_order_acq_rel`] in C++20.\n     ///\n-    /// [`AcquireRelease`]: https://llvm.org/docs/Atomics.html#acquirerelease\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n+    /// [`memory_order_acq_rel`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n+    /// [`Acquire`]: #variant.Acquire\n+    /// [`Release`]: #variant.Release\n+    /// [`Relaxed`]: #variant.Relaxed\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n     /// Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store\n     /// operations, respectively) with the additional guarantee that all threads see all\n     /// sequentially consistent operations in the same order.\n     ///\n-    /// Corresponds to LLVM's [`SequentiallyConsistent`] ordering.\n+    /// Corresponds to [`memory_order_seq_cst`] in C++20.\n     ///\n-    /// [`SequentiallyConsistent`]: https://llvm.org/docs/Atomics.html#sequentiallyconsistent\n-    /// [`Acquire`]: https://llvm.org/docs/Atomics.html#acquire\n-    /// [`Release`]: https://llvm.org/docs/Atomics.html#release\n-    /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n+    /// [`memory_order_seq_cst`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering\n+    /// [`Acquire`]: #variant.Acquire\n+    /// [`Release`]: #variant.Release\n+    /// [`AcqRel`]: #variant.AcqRel\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n }"}]}