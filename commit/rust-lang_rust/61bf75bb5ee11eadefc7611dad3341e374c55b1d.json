{"sha": "61bf75bb5ee11eadefc7611dad3341e374c55b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYmY3NWJiNWVlMTFlYWRlZmM3NjExZGFkMzM0MWUzNzRjNTViMWQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-04T07:11:23Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-10-01T20:21:52Z"}, "message": "Add a guide to compiler plugins\n\nFixes #16983.", "tree": {"sha": "4cc7b0932b1ad18223b904edc4ce040f91ddb87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc7b0932b1ad18223b904edc4ce040f91ddb87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61bf75bb5ee11eadefc7611dad3341e374c55b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61bf75bb5ee11eadefc7611dad3341e374c55b1d", "html_url": "https://github.com/rust-lang/rust/commit/61bf75bb5ee11eadefc7611dad3341e374c55b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61bf75bb5ee11eadefc7611dad3341e374c55b1d/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c428fbf2df35bba9efe4290d63fa9df8aa9c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/58c428fbf2df35bba9efe4290d63fa9df8aa9c20", "html_url": "https://github.com/rust-lang/rust/commit/58c428fbf2df35bba9efe4290d63fa9df8aa9c20"}], "stats": {"total": 364, "additions": 361, "deletions": 3}, "files": [{"sha": "deb55bfb0dda5239a3cf718f76095edaca8694be", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -926,6 +926,7 @@ do\n     make_dir $h/test/doc-guide-pointers\n     make_dir $h/test/doc-guide-container\n     make_dir $h/test/doc-guide-tasks\n+    make_dir $h/test/doc-guide-plugin\n     make_dir $h/test/doc-rust\n done\n "}, {"sha": "26439948aa45d6f51e8b6d276c969dc0883893fc", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -27,7 +27,7 @@\n ######################################################################\n DOCS := index intro tutorial guide guide-ffi guide-macros guide-lifetimes \\\n \tguide-tasks guide-container guide-pointers guide-testing \\\n-\tguide-runtime complement-bugreport \\\n+\tguide-runtime guide-plugin complement-bugreport \\\n \tcomplement-lang-faq complement-design-faq complement-project-faq rust \\\n     rustdoc guide-unsafe guide-strings reference\n "}, {"sha": "3830a2126e172709ac58831657891e65a1d3b22e", "filename": "src/doc/guide-plugin.md", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Fguide-plugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Fguide-plugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugin.md?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -0,0 +1,259 @@\n+% The Rust Compiler Plugins Guide\n+\n+<div class=\"unstable-feature\">\n+\n+<p>\n+<b>Warning:</b> Plugins are an advanced, unstable feature! For many details,\n+the only available documentation is the <a\n+href=\"syntax/index.html\"><code>libsyntax</code></a> and <a\n+href=\"rustc/index.html\"><code>librustc</code></a> API docs, or even the source\n+code itself. These internal compiler APIs are also subject to change at any\n+time.\n+</p>\n+\n+<p>\n+For defining new syntax it is often much easier to use Rust's <a\n+href=\"guide-macros.html\">built-in macro system</a>.\n+</p>\n+\n+<p style=\"margin-bottom: 0\">\n+The code in this document uses language features not covered in the Rust\n+Guide.  See the <a href=\"reference.html\">Reference Manual</a> for more\n+information.\n+</p>\n+\n+</div>\n+\n+# Introduction\n+\n+`rustc` can load compiler plugins, which are user-provided libraries that\n+extend the compiler's behavior with new syntax extensions, lint checks, etc.\n+\n+A plugin is a dynamic library crate with a designated \"registrar\" function that\n+registers extensions with `rustc`. Other crates can use these extensions by\n+loading the plugin crate with `#[phase(plugin)] extern crate`. See the\n+[`rustc::plugin`](rustc/plugin/index.html) documentation for more about the\n+mechanics of defining and loading a plugin.\n+\n+# Syntax extensions\n+\n+Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n+is the procedural macro. These are invoked the same way as [ordinary\n+macros](guide-macros.html), but the expansion is performed by arbitrary Rust\n+code that manipulates [syntax trees](syntax/ast/index.html) at\n+compile time.\n+\n+Let's write a plugin\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/tree/master/src/test/auxiliary/roman_numerals.rs)\n+that implements Roman numeral integer literals.\n+\n+```ignore\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::codemap::Span;\n+use syntax::parse::token::{IDENT, get_ident};\n+use syntax::ast::{TokenTree, TTTok};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use rustc::plugin::Registry;\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, uint)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    let text = match args {\n+        [TTTok(_, IDENT(s, _))] => get_ident(s).to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = text.as_slice();\n+    let mut total = 0u;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = text.slice_from(rn.len());\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacExpr::new(cx.expr_uint(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}\n+```\n+\n+Then we can use `rn!()` like any other macro:\n+\n+```ignore\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate roman_numerals;\n+\n+fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+}\n+```\n+\n+The advantages over a simple `fn(&str) -> uint` are:\n+\n+* The (arbitrarily complex) conversion is done at compile time.\n+* Input validation is also performed at compile time.\n+* It can be extended to allow use in patterns, which effectively gives\n+  a way to define new literal syntax for any data type.\n+\n+In addition to procedural macros, you can define new\n+[`deriving`](reference.html#deriving)-like attributes and other kinds of\n+extensions.  See\n+[`Registry::register_syntax_extension`](rustc/plugin/registry/struct.Registry.html#method.register_syntax_extension)\n+and the [`SyntaxExtension`\n+enum](http://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n+a more involved macro example, see\n+[`src/libregex_macros/lib.rs`](https://github.com/rust-lang/rust/blob/master/src/libregex_macros/lib.rs)\n+in the Rust distribution.\n+\n+\n+## Tips and tricks\n+\n+To see the results of expanding syntax extensions, run\n+`rustc --pretty expanded`. The output represents a whole crate, so you\n+can also feed it back in to `rustc`, which will sometimes produce better\n+error messages than the original compilation. Note that the\n+`--pretty expanded` output may have a different meaning if multiple\n+variables of the same name (but different syntax contexts) are in play\n+in the same scope. In this case `--pretty expanded,hygiene` will tell\n+you about the syntax contexts.\n+\n+You can use [`syntax::parse`](syntax/parse/index.html) to turn token trees into\n+higher-level syntax elements like expressions:\n+\n+```ignore\n+fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult+'static> {\n+\n+    let mut parser =\n+        parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), args.to_slice())\n+\n+    let expr: P<Expr> = parser.parse_expr();\n+```\n+\n+Looking through [`libsyntax` parser\n+code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n+will give you a feel for how the parsing infrastructure works.\n+\n+Keep the [`Span`s](syntax/codemap/struct.Span.html) of\n+everything you parse, for better error reporting. You can wrap\n+[`Spanned`](syntax/codemap/struct.Spanned.html) around\n+your custom data structures.\n+\n+Calling\n+[`ExtCtxt::span_fatal`](syntax/ext/base/struct.ExtCtxt.html#method.span_fatal)\n+will immediately abort compilation. It's better to instead call\n+[`ExtCtxt::span_err`](syntax/ext/base/struct.ExtCtxt.html#method.span_err)\n+and return\n+[`DummyResult`](syntax/ext/base/struct.DummyResult.html),\n+so that the compiler can continue and find further errors.\n+\n+The example above produced an integer literal using\n+[`AstBuilder::expr_uint`](syntax/ext/build/trait.AstBuilder.html#tymethod.expr_uint).\n+As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n+[quasiquote macros](syntax/ext/quote/index.html).  They are undocumented and\n+very rough around the edges.  However, the implementation may be a good\n+starting point for an improved quasiquote as an ordinary plugin library.\n+\n+\n+# Lint plugins\n+\n+Plugins can extend [Rust's lint\n+infrastructure](reference.html#lint-check-attributes) with additional checks for\n+code style, safety, etc. You can see\n+[`src/test/auxiliary/lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n+for a full example, the core of which is reproduced here:\n+\n+```ignore\n+declare_lint!(TEST_LINT, Warn,\n+              \"Warn about items named 'lintme'\")\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        let name = token::get_ident(it.ident);\n+        if name.get() == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_lint_pass(box Pass as LintPassObject);\n+}\n+```\n+\n+Then code like\n+\n+```ignore\n+#[phase(plugin)]\n+extern crate lint_plugin_test;\n+\n+fn lintme() { }\n+```\n+\n+will produce a compiler warning:\n+\n+```txt\n+foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n+foo.rs:4 fn lintme() { }\n+         ^~~~~~~~~~~~~~~\n+```\n+\n+The components of a lint plugin are:\n+\n+* one or more `declare_lint!` invocations, which define static\n+  [`Lint`](rustc/lint/struct.Lint.html) structs;\n+\n+* a struct holding any state needed by the lint pass (here, none);\n+\n+* a [`LintPass`](rustc/lint/trait.LintPass.html)\n+  implementation defining how to check each syntax element. A single\n+  `LintPass` may call `span_lint` for several different `Lint`s, but should\n+  register them all through the `get_lints` method.\n+\n+Lint passes are syntax traversals, but they run at a late stage of compilation\n+where type information is available. `rustc`'s [built-in\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+mostly use the same infrastructure as lint plugins, and provide examples of how\n+to access type information.\n+\n+Lints defined by plugins are controlled by the usual [attributes and compiler\n+flags](reference.html#lint-check-attributes), e.g. `#[allow(test_lint)]` or\n+`-A test-lint`. These identifiers are derived from the first argument to\n+`declare_lint!`, with appropriate case and punctuation conversion.\n+\n+You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n+including those provided by plugins loaded by `foo.rs`."}, {"sha": "f38c5883b538d00d5d403ad7beb3609597b65af5", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -63,6 +63,7 @@ a guide that can help you out:\n * [Macros](guide-macros.html)\n * [Testing](guide-testing.html)\n * [Rust's Runtime](guide-runtime.html)\n+* [Compiler Plugins](guide-plugin.html)\n \n # Tools\n "}, {"sha": "54da9bfa716053d3c1dd7a9df527af9ce32f1d26", "filename": "src/doc/po4a.conf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Fpo4a.conf", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Fdoc%2Fpo4a.conf", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo4a.conf?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -13,6 +13,7 @@\n [type: text] src/doc/guide-ffi.md $lang:doc/l10n/$lang/guide-ffi.md\n [type: text] src/doc/guide-lifetimes.md $lang:doc/l10n/$lang/guide-lifetimes.md\n [type: text] src/doc/guide-macros.md $lang:doc/l10n/$lang/guide-macros.md\n+[type: text] src/doc/guide-plugin.md $lang:doc/l10n/$lang/guide-plugin.md\n [type: text] src/doc/guide-pointers.md $lang:doc/l10n/$lang/guide-pointers.md\n [type: text] src/doc/guide-runtime.md $lang:doc/l10n/$lang/guide-runtime.md\n [type: text] src/doc/guide-strings.md $lang:doc/l10n/$lang/guide-strings.md"}, {"sha": "a03ee471be68155e8e87b6957317249762000712", "filename": "src/librustc/plugin/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Flibrustc%2Fplugin%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Flibrustc%2Fplugin%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fmod.rs?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -53,8 +53,8 @@\n  * If you also need the plugin crate available at runtime, use\n  * `phase(plugin, link)`.\n  *\n- * See `src/test/auxiliary/macro_crate_test.rs` and `src/libfourcc`\n- * for examples of syntax extension plugins.\n+ * See [the compiler plugin guide](../../guide-plugin.html)\n+ * for more examples.\n  */\n \n pub use self::registry::Registry;"}, {"sha": "43842fae70f802412bb5ed2261060ef7e8715ab5", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::codemap::Span;\n+use syntax::parse::token::{IDENT, get_ident};\n+use syntax::ast::{TokenTree, TTTok};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use rustc::plugin::Registry;\n+\n+// WARNING WARNING WARNING WARNING WARNING\n+// =======================================\n+//\n+// This code also appears in src/doc/guide-plugin.md. Please keep\n+// the two copies in sync!  FIXME: have rustdoc read this file\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, uint)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    let text = match args {\n+        [TTTok(_, IDENT(s, _))] => get_ident(s).to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = text.as_slice();\n+    let mut total = 0u;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = text.slice_from(rn.len());\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacExpr::new(cx.expr_uint(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}"}, {"sha": "6fd427c9f8ceab1bc0b4d5ae2d5985fb77f209bf", "filename": "src/test/run-pass-fulldeps/roman-numerals-macro.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bf75bb5ee11eadefc7611dad3341e374c55b1d/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs?ref=61bf75bb5ee11eadefc7611dad3341e374c55b1d", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:roman_numerals.rs\n+// ignore-stage1\n+\n+#![feature(phase)]\n+\n+#[phase(plugin, link)]\n+extern crate roman_numerals;\n+\n+pub fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+    assert_eq!(rn!(MCMXCIX), 1999);\n+    assert_eq!(rn!(XXV), 25);\n+    assert_eq!(rn!(MDCLXVI), 1666);\n+    assert_eq!(rn!(MMMDCCCLXXXVIII), 3888);\n+    assert_eq!(rn!(MMXIV), 2014);\n+}"}]}