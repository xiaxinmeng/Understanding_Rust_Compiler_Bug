{"sha": "4e017b54ad96175939c90353b89017d1fd1b9e09", "node_id": "C_kwDOAAsO6NoAKDRlMDE3YjU0YWQ5NjE3NTkzOWM5MDM1M2I4OTAxN2QxZmQxYjllMDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T21:38:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T21:38:59Z"}, "message": "fix host/target check for extern-so", "tree": {"sha": "e16ad5f3c7ad3e71bf651a6f500f14cf5c6e12a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16ad5f3c7ad3e71bf651a6f500f14cf5c6e12a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e017b54ad96175939c90353b89017d1fd1b9e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e017b54ad96175939c90353b89017d1fd1b9e09", "html_url": "https://github.com/rust-lang/rust/commit/4e017b54ad96175939c90353b89017d1fd1b9e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e017b54ad96175939c90353b89017d1fd1b9e09/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515038ed7d6558232437006919ca99253e8c1d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/515038ed7d6558232437006919ca99253e8c1d5a", "html_url": "https://github.com/rust-lang/rust/commit/515038ed7d6558232437006919ca99253e8c1d5a"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "15d6c963ad21fc914554cb8d1c855f795fcd1dec", "filename": "build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e017b54ad96175939c90353b89017d1fd1b9e09/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e017b54ad96175939c90353b89017d1fd1b9e09/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=4e017b54ad96175939c90353b89017d1fd1b9e09", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     // Re-export the TARGET environment variable so it can\n     // be accessed by miri.\n     let target = std::env::var(\"TARGET\").unwrap();\n-    println!(\"cargo:rustc-env=TARGET={:?}\", target);\n+    println!(\"cargo:rustc-env=TARGET={}\", target);\n }"}, {"sha": "70b8263a9eb258d74bccbc3aa3a64979f3bfa958", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e017b54ad96175939c90353b89017d1fd1b9e09/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e017b54ad96175939c90353b89017d1fd1b9e09/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4e017b54ad96175939c90353b89017d1fd1b9e09", "patch": "@@ -418,9 +418,11 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             since_progress_report: 0,\n             external_so_lib: config.external_so_file.as_ref().map(|lib_file_path| {\n                 // Check if host target == the session target.\n-                if option_env!(\"TARGET\") == Some(target_triple) {\n+                if env!(\"TARGET\") != target_triple {\n                     panic!(\n-                        \"calling external C functions in linked .so file requires target and host to be the same\"\n+                        \"calling external C functions in linked .so file requires host and target to be the same: host={}, target={}\",\n+                        env!(\"TARGET\"),\n+                        target_triple,\n                     );\n                 }\n                 // Note: it is the user's responsibility to provide a correct SO file."}, {"sha": "117e0933ddcf9fdcfc4160ee56150facc6746a11", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e017b54ad96175939c90353b89017d1fd1b9e09/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e017b54ad96175939c90353b89017d1fd1b9e09/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4e017b54ad96175939c90353b89017d1fd1b9e09", "patch": "@@ -370,11 +370,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        // First deal with any external C functions in linked .so file\n-        // (if any SO file is specified, and if the host target == the session target)\n+        // First deal with any external C functions in linked .so file.\n         if this.machine.external_so_lib.as_ref().is_some() {\n             // An Ok(false) here means that the function being called was not exported\n-            // by the specified SO file; we should continue and check if it corresponds to\n+            // by the specified `.so` file; we should continue and check if it corresponds to\n             // a provided shim.\n             if this.call_external_c_fct(link_name, dest, args)? {\n                 return Ok(EmulateByNameResult::NeedsJumping);"}]}