{"sha": "dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "node_id": "C_kwDOAAsO6NoAKGRjMTIxNmJjMDY2MGMyZDc2NTM1YTY4YTUzZmYzNzQ2MmM1YjFjYjA", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-27T03:33:27Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-27T03:33:27Z"}, "message": "fixup new usages of fn_sig, bound_fn_sig after rebasing", "tree": {"sha": "7f778b0f5429f2e35732198d24f6235c1bd0adf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f778b0f5429f2e35732198d24f6235c1bd0adf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "html_url": "https://github.com/rust-lang/rust/commit/dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7d0e9754aa75eb0fd37bfeb4f00562806d112f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7d0e9754aa75eb0fd37bfeb4f00562806d112f", "html_url": "https://github.com/rust-lang/rust/commit/4a7d0e9754aa75eb0fd37bfeb4f00562806d112f"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "34e8edd6140b211002eaf1f6de68b5b3a0bc8fcf", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "patch": "@@ -463,7 +463,7 @@ fn foo(&tcx) -> Self::T { String::new() }\n                 ty::AssocKind::Fn == item.kind && Some(item.name) != current_method_ident\n             })\n             .filter_map(|item| {\n-                let method = tcx.fn_sig(item.def_id);\n+                let method = tcx.fn_sig(item.def_id).subst_identity();\n                 match *method.output().skip_binder().kind() {\n                     ty::Alias(ty::Projection, ty::AliasTy { def_id: item_def_id, .. })\n                         if item_def_id == proj_ty_item_def_id =>"}, {"sha": "23063e80b05ff117091c95c35bdfa728f8de1584", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "patch": "@@ -369,7 +369,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             (ty::FnPtr(sig), ty::FnDef(did, substs)) => {\n                 let expected_sig = &(self.normalize_fn_sig)(*sig);\n                 let found_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did).subst(self.tcx, substs));\n \n                 let fn_name = self.tcx.def_path_str_with_substs(*did, substs);\n \n@@ -408,9 +408,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did1).subst(self.tcx, substs1));\n                 let found_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did2).subst(self.tcx, substs2));\n \n                 if self.same_type_modulo_infer(*expected_sig, *found_sig) {\n                     diag.note(\"different fn items have unique types, even if their signatures are the same\");\n@@ -440,7 +440,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n             (ty::FnDef(did, substs), ty::FnPtr(sig)) => {\n                 let expected_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did).subst(self.tcx, substs));\n                 let found_sig = &(self.normalize_fn_sig)(*sig);\n \n                 if !self.same_type_modulo_infer(*found_sig, *expected_sig) {"}, {"sha": "f4673c332b88702778ffe77a8e800ba0cc696e7b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "patch": "@@ -2120,7 +2120,8 @@ impl CheckAttrVisitor<'_> {\n             let id = hir_id.expect_owner();\n             let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n \n-            let sig = tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id));\n+            let sig =\n+                tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id).subst_identity());\n             let sig = tcx.normalize_erasing_regions(ParamEnv::empty(), sig);\n \n             // We don't currently require that the function signature is equal to"}, {"sha": "6cab0bc6a4b25f3c165532d3aed95111ac4b5168", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1216bc0660c2d76535a68a53ff37462c5b1cb0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "patch": "@@ -184,7 +184,7 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n ) -> Result<Option<ty::Binder<'tcx, (Ty<'tcx>, Ty<'tcx>)>>, NoSolution> {\n     match *self_ty.kind() {\n         ty::FnDef(def_id, substs) => Ok(Some(\n-            tcx.bound_fn_sig(def_id)\n+            tcx.fn_sig(def_id)\n                 .subst(tcx, substs)\n                 .map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output())),\n         )),"}]}