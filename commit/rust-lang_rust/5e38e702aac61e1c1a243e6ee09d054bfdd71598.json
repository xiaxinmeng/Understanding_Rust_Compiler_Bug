{"sha": "5e38e702aac61e1c1a243e6ee09d054bfdd71598", "node_id": "C_kwDOAAsO6NoAKDVlMzhlNzAyYWFjNjFlMWMxYTI0M2U2ZWUwOWQwNTRiZmRkNzE1OTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T18:57:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T18:57:10Z"}, "message": "Rollup merge of #105464 - nbdd0121:hir, r=compiler-errors\n\nSupport #[track_caller] on async closures\n\nFollow up on #105180\n\nr? ```@compiler-errors```\ncc ```@cjgillot```", "tree": {"sha": "c32f15081bf9c936fa629530377f3cd619718b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32f15081bf9c936fa629530377f3cd619718b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e38e702aac61e1c1a243e6ee09d054bfdd71598", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmMsGCRBK7hj4Ov3rIwAAU9QIAKATqGAfslM/Q+/adwBCE17c\nYmrkUJGyq1mrMQvMFo8Oz/MZ2ZuXuwsVwE62yaAXHFI5tV5mZ4UTmgKXmCLn2THb\nCA+lFaAr2kCVmST3CBa70LHJn9NO8TEXMoC1pRfMUITgYqw52F1vq9YdOtauqOyC\nfVBA5ITrll/oFL6t8xJ/83aP+UVZJ2u1YlidbLNzXk1isJ6SQdYNOOk+DaPmBF3Q\n2JSlRVOjE5xq6DTcwqdZL02iSq7d0kaShvTaTRCtdiotWUNbJaUF4SKbIA2NuvX9\n8LS2SQ5hvAiHir0l6aMN6ZPDmuZDeI7q8rVY20R5kJfhuKwBmFGPoDNeiycPnKI=\n=WZxX\n-----END PGP SIGNATURE-----\n", "payload": "tree c32f15081bf9c936fa629530377f3cd619718b5a\nparent 51375dd7a8a5cd114671da56aee568f281e8f042\nparent 3c0983c3236204359c3e5c4ed7c7223f186f133a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670957830 +0100\ncommitter GitHub <noreply@github.com> 1670957830 +0100\n\nRollup merge of #105464 - nbdd0121:hir, r=compiler-errors\n\nSupport #[track_caller] on async closures\n\nFollow up on #105180\n\nr? ```@compiler-errors```\ncc ```@cjgillot```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e38e702aac61e1c1a243e6ee09d054bfdd71598", "html_url": "https://github.com/rust-lang/rust/commit/5e38e702aac61e1c1a243e6ee09d054bfdd71598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e38e702aac61e1c1a243e6ee09d054bfdd71598/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51375dd7a8a5cd114671da56aee568f281e8f042", "url": "https://api.github.com/repos/rust-lang/rust/commits/51375dd7a8a5cd114671da56aee568f281e8f042", "html_url": "https://github.com/rust-lang/rust/commit/51375dd7a8a5cd114671da56aee568f281e8f042"}, {"sha": "3c0983c3236204359c3e5c4ed7c7223f186f133a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0983c3236204359c3e5c4ed7c7223f186f133a", "html_url": "https://github.com/rust-lang/rust/commit/3c0983c3236204359c3e5c4ed7c7223f186f133a"}], "stats": {"total": 173, "additions": 124, "deletions": 49}, "files": [{"sha": "e86e807279d6f10157264705e42e49c8b8c872d0", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 48, "deletions": 37, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -31,6 +31,44 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {\n         ensure_sufficient_stack(|| {\n+            match &e.kind {\n+                // Paranthesis expression does not have a HirId and is handled specially.\n+                ExprKind::Paren(ex) => {\n+                    let mut ex = self.lower_expr_mut(ex);\n+                    // Include parens in span, but only if it is a super-span.\n+                    if e.span.contains(ex.span) {\n+                        ex.span = self.lower_span(e.span);\n+                    }\n+                    // Merge attributes into the inner expression.\n+                    if !e.attrs.is_empty() {\n+                        let old_attrs =\n+                            self.attrs.get(&ex.hir_id.local_id).map(|la| *la).unwrap_or(&[]);\n+                        self.attrs.insert(\n+                            ex.hir_id.local_id,\n+                            &*self.arena.alloc_from_iter(\n+                                e.attrs\n+                                    .iter()\n+                                    .map(|a| self.lower_attr(a))\n+                                    .chain(old_attrs.iter().cloned()),\n+                            ),\n+                        );\n+                    }\n+                    return ex;\n+                }\n+                // Desugar `ExprForLoop`\n+                // from: `[opt_ident]: for <pat> in <head> <body>`\n+                //\n+                // This also needs special handling because the HirId of the returned `hir::Expr` will not\n+                // correspond to the `e.id`, so `lower_expr_for` handles attribute lowering itself.\n+                ExprKind::ForLoop(pat, head, body, opt_label) => {\n+                    return self.lower_expr_for(e, pat, head, body, *opt_label);\n+                }\n+                _ => (),\n+            }\n+\n+            let hir_id = self.lower_node_id(e.id);\n+            self.lower_attrs(hir_id, &e.attrs);\n+\n             let kind = match &e.kind {\n                 ExprKind::Box(inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n@@ -48,7 +86,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n                         if let [inner] = &args[..] && e.attrs.len() == 1 {\n                             let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n-                            let hir_id = self.lower_node_id(e.id);\n                             return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n                         } else {\n                             self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n@@ -147,7 +184,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Async(capture_clause, closure_node_id, block) => self.make_async_expr(\n                     *capture_clause,\n-                    None,\n+                    hir_id,\n                     *closure_node_id,\n                     None,\n                     e.span,\n@@ -184,6 +221,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             binder,\n                             *capture_clause,\n                             e.id,\n+                            hir_id,\n                             *closure_id,\n                             fn_decl,\n                             body,\n@@ -279,39 +317,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Yield(opt_expr) => self.lower_expr_yield(e.span, opt_expr.as_deref()),\n                 ExprKind::Err => hir::ExprKind::Err,\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n-                ExprKind::Paren(ex) => {\n-                    let mut ex = self.lower_expr_mut(ex);\n-                    // Include parens in span, but only if it is a super-span.\n-                    if e.span.contains(ex.span) {\n-                        ex.span = self.lower_span(e.span);\n-                    }\n-                    // Merge attributes into the inner expression.\n-                    if !e.attrs.is_empty() {\n-                        let old_attrs =\n-                            self.attrs.get(&ex.hir_id.local_id).map(|la| *la).unwrap_or(&[]);\n-                        self.attrs.insert(\n-                            ex.hir_id.local_id,\n-                            &*self.arena.alloc_from_iter(\n-                                e.attrs\n-                                    .iter()\n-                                    .map(|a| self.lower_attr(a))\n-                                    .chain(old_attrs.iter().cloned()),\n-                            ),\n-                        );\n-                    }\n-                    return ex;\n-                }\n \n-                // Desugar `ExprForLoop`\n-                // from: `[opt_ident]: for <pat> in <head> <body>`\n-                ExprKind::ForLoop(pat, head, body, opt_label) => {\n-                    return self.lower_expr_for(e, pat, head, body, *opt_label);\n-                }\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) => unreachable!(\"already handled\"),\n+\n                 ExprKind::MacCall(_) => panic!(\"{:?} shouldn't exist here\", e.span),\n             };\n \n-            let hir_id = self.lower_node_id(e.id);\n-            self.lower_attrs(hir_id, &e.attrs);\n             hir::Expr { hir_id, kind, span: self.lower_span(e.span) }\n         })\n     }\n@@ -576,7 +587,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n-        outer_hir_id: Option<hir::HirId>,\n+        outer_hir_id: hir::HirId,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n@@ -669,8 +680,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::ExprKind::Closure(c)\n         };\n \n-        let track_caller = outer_hir_id\n-            .and_then(|id| self.attrs.get(&id.local_id))\n+        let track_caller = self\n+            .attrs\n+            .get(&outer_hir_id.local_id)\n             .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n \n         let hir_id = self.lower_node_id(closure_node_id);\n@@ -985,6 +997,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n+        closure_hir_id: hir::HirId,\n         inner_closure_id: NodeId,\n         decl: &FnDecl,\n         body: &Expr,\n@@ -1018,9 +1031,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let async_body = this.make_async_expr(\n                     capture_clause,\n-                    // FIXME(nbdd0121): This should also use a proper HIR id so `#[track_caller]`\n-                    // can be applied on async closures as well.\n-                    None,\n+                    closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,"}, {"sha": "73065ab516350fe33c50fae50de39a228278340f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -1139,7 +1139,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n-                Some(fn_id),\n+                fn_id,\n                 closure_id,\n                 None,\n                 body.span,"}, {"sha": "ada541e644a3130236366d1b562303afe9059f38", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -187,9 +187,9 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;"}, {"sha": "88fd4d89b2827661b9d9f74dcaf4be3e5692d4d7", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -158,9 +158,9 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -210,9 +210,9 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;"}, {"sha": "9b4d23757b871340e7418c03025e449d978ccf63", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -158,9 +158,9 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -212,9 +212,9 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_continue_label() {\n     let mut _x = 0;"}, {"sha": "8e81387c34bd056013659ffca95f4840e031f7d2", "filename": "src/test/ui/async-await/track-caller/async-block.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -0,0 +1,9 @@\n+// edition:2021\n+\n+#![feature(closure_track_caller, stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[track_caller] async {\n+        //~^ ERROR attribute should be applied to a function definition [E0739]\n+    };\n+}"}, {"sha": "407439921c0d44dccec43274a576a60f4ed62ed5", "filename": "src/test/ui/async-await/track-caller/async-block.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -0,0 +1,12 @@\n+error[E0739]: attribute should be applied to a function definition\n+  --> $DIR/async-block.rs:6:13\n+   |\n+LL |       let _ = #[track_caller] async {\n+   |  _____________^^^^^^^^^^^^^^^_-\n+LL | |\n+LL | |     };\n+   | |_____- not a function definition\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0739`."}, {"sha": "9593fdb1908e22213b5ea35303338e37379da8bf", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -0,0 +1,10 @@\n+// edition:2021\n+\n+#![feature(async_closure, stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[track_caller] async || {\n+        //~^ ERROR `#[track_caller]` on closures is currently unstable [E0658]\n+        //~| ERROR `#[track_caller]` on closures is currently unstable [E0658]\n+    };\n+}"}, {"sha": "be3d110eccdb002e68617843dfe505c456ecf91c", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -0,0 +1,25 @@\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/async-closure-gate.rs:6:13\n+   |\n+LL |     let _ = #[track_caller] async || {\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/async-closure-gate.rs:6:38\n+   |\n+LL |       let _ = #[track_caller] async || {\n+   |  ______________________________________^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "066cf97628fa5cd9d5852847bfddb5f799c7555a", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e38e702aac61e1c1a243e6ee09d054bfdd71598/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=5e38e702aac61e1c1a243e6ee09d054bfdd71598", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // edition:2021\n // needs-unwind\n-#![feature(closure_track_caller)]\n+#![feature(closure_track_caller, async_closure, stmt_expr_attributes)]\n \n use std::future::Future;\n use std::panic;\n@@ -67,6 +67,13 @@ async fn foo_assoc() {\n     Foo::bar_assoc().await\n }\n \n+async fn foo_closure() {\n+    let c = #[track_caller] async || {\n+        panic!();\n+    };\n+    c().await\n+}\n+\n fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n     let loc = Arc::new(Mutex::new(None));\n \n@@ -87,4 +94,5 @@ fn main() {\n     assert_eq!(panicked_at(|| block_on(foo())), 41);\n     assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n     assert_eq!(panicked_at(|| block_on(foo_assoc())), 67);\n+    assert_eq!(panicked_at(|| block_on(foo_closure())), 74);\n }"}]}