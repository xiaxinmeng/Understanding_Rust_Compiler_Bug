{"sha": "4ebde950f5afc16366b04b4c191f1c6198726da7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYmRlOTUwZjVhZmMxNjM2NmIwNGI0YzE5MWYxYzYxOTg3MjZkYTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-14T13:23:43Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-14T13:23:43Z"}, "message": "Document, tweak and refactor some trans code.", "tree": {"sha": "de3044be96575c3709726eed5f1ed114cee948ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3044be96575c3709726eed5f1ed114cee948ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ebde950f5afc16366b04b4c191f1c6198726da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebde950f5afc16366b04b4c191f1c6198726da7", "html_url": "https://github.com/rust-lang/rust/commit/4ebde950f5afc16366b04b4c191f1c6198726da7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ebde950f5afc16366b04b4c191f1c6198726da7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5fbae33897a8340542f21b6ded913148ca9199", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5fbae33897a8340542f21b6ded913148ca9199", "html_url": "https://github.com/rust-lang/rust/commit/3d5fbae33897a8340542f21b6ded913148ca9199"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "e7d613f67b6f6bd619240a76a21d2d5979dcdfc0", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=4ebde950f5afc16366b04b4c191f1c6198726da7", "patch": "@@ -304,7 +304,7 @@ pub enum RealPredicate {\n \n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, PartialEq, Show)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,"}, {"sha": "c0e80ff08a22eeff54f14228e1c8648b68166ed0", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=4ebde950f5afc16366b04b4c191f1c6198726da7", "patch": "@@ -34,6 +34,7 @@ enum RegClass {\n     SSEDs,\n     SSEDv,\n     SSEInt,\n+    /// Data that can appear in the upper half of an SSE register.\n     SSEUp,\n     X87,\n     X87Up,\n@@ -155,26 +156,28 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n     fn unify(cls: &mut [RegClass],\n              i: uint,\n              newv: RegClass) {\n-        if cls[i] == newv {\n-            return;\n-        } else if cls[i] == NoClass {\n-            cls[i] = newv;\n-        } else if newv == NoClass {\n-            return;\n-        } else if cls[i] == Memory || newv == Memory {\n-            cls[i] = Memory;\n-        } else if cls[i] == Int || newv == Int {\n-            cls[i] = Int;\n-        } else if cls[i] == X87 ||\n-                  cls[i] == X87Up ||\n-                  cls[i] == ComplexX87 ||\n-                  newv == X87 ||\n-                  newv == X87Up ||\n-                  newv == ComplexX87 {\n-            cls[i] = Memory;\n-        } else {\n-            cls[i] = newv;\n-        }\n+        if cls[i] == newv { return }\n+\n+        let to_write = match (cls[i], newv) {\n+            (NoClass,     _) => newv,\n+            (_,           NoClass) => return,\n+\n+            (Memory,      _) |\n+            (_,           Memory) => Memory,\n+\n+            (Int,         _) |\n+            (_,           Int) => Int,\n+\n+            (X87,         _) |\n+            (X87Up,       _) |\n+            (ComplexX87,  _) |\n+            (_,           X87) |\n+            (_,           X87Up) |\n+            (_,           ComplexX87) => Memory,\n+\n+            (_,           _) => newv\n+        };\n+        cls[i] = to_write;\n     }\n \n     fn classify_struct(tys: &[Type],"}, {"sha": "acb1623db330c13a401506a5d7d8715feb5d6be9", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebde950f5afc16366b04b4c191f1c6198726da7/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=4ebde950f5afc16366b04b4c191f1c6198726da7", "patch": "@@ -284,6 +284,13 @@ impl Type {\n         }\n     }\n \n+    /// Return the number of elements in `self` if it is a LLVM vector type.\n+    pub fn vector_length(&self) -> uint {\n+        unsafe {\n+            llvm::LLVMGetVectorSize(self.to_ref()) as uint\n+        }\n+    }\n+\n     pub fn array_length(&self) -> uint {\n         unsafe {\n             llvm::LLVMGetArrayLength(self.to_ref()) as uint"}]}