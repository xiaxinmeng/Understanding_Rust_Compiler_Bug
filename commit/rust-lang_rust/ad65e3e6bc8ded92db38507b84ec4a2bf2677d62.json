{"sha": "ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNjVlM2U2YmM4ZGVkOTJkYjM4NTA3Yjg0ZWM0YTJiZjI2NzdkNjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-10T09:32:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-10T09:57:36Z"}, "message": "Fix some rebasing fallout.", "tree": {"sha": "54b00a0ff92055a4ec8c3fa0135f0585594f05c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b00a0ff92055a4ec8c3fa0135f0585594f05c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "html_url": "https://github.com/rust-lang/rust/commit/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e4844480230f42f59377629bb72cbc649b4a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e4844480230f42f59377629bb72cbc649b4a48", "html_url": "https://github.com/rust-lang/rust/commit/11e4844480230f42f59377629bb72cbc649b4a48"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "bbe014baa498b39019ce05d94fbcd5705df3e0f0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "patch": "@@ -3079,6 +3079,7 @@ dependencies = [\n  \"graphviz\",\n  \"jobserver\",\n  \"log\",\n+ \"measureme\",\n  \"parking_lot\",\n  \"polonius-engine\",\n  \"rustc-rayon\","}, {"sha": "79b32ba83aea0100bf80e6d4a4e2127fe88f17fe", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;\n use crate::ty::query::config::QueryConfig;\n@@ -7,6 +6,7 @@ use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_data_structures::sharded::Sharded;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use std::fmt::Debug;\n use std::io::Write;\n "}, {"sha": "9b9434539a8e50a53e6a07ecd75dbd5dc2c351dc", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "patch": "@@ -334,11 +334,7 @@ pub fn from_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value,\n ) -> Bx::Value {\n-    if bx.cx().val_ty(val) == bx.cx().type_i1() {\n-        bx.zext(val, bx.cx().type_i8())\n-    } else {\n-        val\n-    }\n+    if bx.cx().val_ty(val) == bx.cx().type_i1() { bx.zext(val, bx.cx().type_i8()) } else { val }\n }\n \n pub fn to_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n@@ -887,11 +883,7 @@ fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx>, cgu: &CodegenUnit<'tcx>) -> CguR\n \n     if tcx.dep_graph.try_mark_green(tcx, &dep_node).is_some() {\n         // We can re-use either the pre- or the post-thinlto state\n-        if tcx.sess.lto() != Lto::No {\n-            CguReuse::PreLto\n-        } else {\n-            CguReuse::PostLto\n-        }\n+        if tcx.sess.lto() != Lto::No { CguReuse::PreLto } else { CguReuse::PostLto }\n     } else {\n         CguReuse::No\n     }"}, {"sha": "e8a70d58f0cff4aec871a9642c9104c7cafadf3c", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad65e3e6bc8ded92db38507b84ec4a2bf2677d62/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=ad65e3e6bc8ded92db38507b84ec4a2bf2677d62", "patch": "@@ -224,7 +224,10 @@ impl SelfProfilerRef {\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stdout if the compiler is invoked with -Ztime or -Ztime-passes.\n     #[inline(always)]\n-    pub fn verbose_generic_activity<'a>(&'a self, event_id: &'a str) -> VerboseTimingGuard<'a> {\n+    pub fn verbose_generic_activity<'a>(\n+        &'a self,\n+        event_id: &'static str,\n+    ) -> VerboseTimingGuard<'a> {\n         VerboseTimingGuard::start(\n             event_id,\n             self.print_verbose_generic_activities,\n@@ -589,8 +592,8 @@ fn get_resident() -> Option<usize> {\n             cb: DWORD,\n         ) -> BOOL;\n     }\n-    let mut pmc: PROCESS_MEMORY_COUNTERS = unsafe { mem::zeroed() };\n-    pmc.cb = mem::size_of_val(&pmc) as DWORD;\n+    let mut pmc: PROCESS_MEMORY_COUNTERS = unsafe { std::mem::zeroed() };\n+    pmc.cb = std::mem::size_of_val(&pmc) as DWORD;\n     match unsafe { GetProcessMemoryInfo(GetCurrentProcess(), &mut pmc, pmc.cb) } {\n         0 => None,\n         _ => Some(pmc.WorkingSetSize as usize),"}]}