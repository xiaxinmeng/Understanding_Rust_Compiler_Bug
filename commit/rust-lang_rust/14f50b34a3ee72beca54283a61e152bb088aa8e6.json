{"sha": "14f50b34a3ee72beca54283a61e152bb088aa8e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjUwYjM0YTNlZTcyYmVjYTU0MjgzYTYxZTE1MmJiMDg4YWE4ZTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T15:53:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T15:54:26Z"}, "message": "use pre-computed layouts some more", "tree": {"sha": "368c9707f358dfbf76c42357f934b879306963c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368c9707f358dfbf76c42357f934b879306963c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f50b34a3ee72beca54283a61e152bb088aa8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f50b34a3ee72beca54283a61e152bb088aa8e6", "html_url": "https://github.com/rust-lang/rust/commit/14f50b34a3ee72beca54283a61e152bb088aa8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f50b34a3ee72beca54283a61e152bb088aa8e6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "html_url": "https://github.com/rust-lang/rust/commit/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "1caffe264761750fea3b702d801f813947eea83d", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -130,7 +130,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n             let argc_place =\n-                ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n+                ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into());\n             ecx.write_scalar(argc, argc_place.into())?;\n             ecx.machine.argc = Some(argc_place.ptr);\n \n@@ -168,7 +168,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     };\n \n     // Return place (in static memory so that it does not count as leak).\n-    let ret_place = ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n+    let ret_place = ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into());\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n@@ -178,7 +178,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     )?;\n \n     // Set the last_error to 0\n-    let errno_layout = ecx.layout_of(tcx.types.u32)?;\n+    let errno_layout = ecx.machine.layouts.u32;\n     let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Machine.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);"}, {"sha": "236b31ec4af54a4be039ef4a5ec838c4077d0415", "filename": "src/machine.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -168,7 +168,7 @@ impl MemoryExtra {\n             \"linux\" => {\n                 // \"__cxa_thread_atexit_impl\"\n                 // This should be all-zero, pointer-sized.\n-                let layout = this.layout_of(this.tcx.types.usize)?;\n+                let layout = this.machine.layouts.usize;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n                 this.write_scalar(Scalar::from_machine_usize(0, this), place.into())?;\n                 Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n@@ -178,7 +178,7 @@ impl MemoryExtra {\n             \"windows\" => {\n                 // \"_tls_used\"\n                 // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n-                let layout = this.layout_of(this.tcx.types.u8)?;\n+                let layout = this.machine.layouts.u8;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n                 this.write_scalar(Scalar::from_u8(0), place.into())?;\n                 Self::add_extern_static(this, \"_tls_used\", place.ptr);\n@@ -190,16 +190,26 @@ impl MemoryExtra {\n }\n \n /// Precomputed layouts of primitive types\n-pub(crate) struct PrimitiveLayouts<'tcx> {\n-    pub(crate) i32: TyAndLayout<'tcx>,\n-    pub(crate) u32: TyAndLayout<'tcx>,\n+pub struct PrimitiveLayouts<'tcx> {\n+    pub unit: TyAndLayout<'tcx>,\n+    pub i8: TyAndLayout<'tcx>,\n+    pub i32: TyAndLayout<'tcx>,\n+    pub isize: TyAndLayout<'tcx>,\n+    pub u8: TyAndLayout<'tcx>,\n+    pub u32: TyAndLayout<'tcx>,\n+    pub usize: TyAndLayout<'tcx>,\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n     fn new(layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Result<Self, LayoutError<'tcx>> {\n         Ok(Self {\n+            unit: layout_cx.layout_of(layout_cx.tcx.mk_unit())?,\n+            i8: layout_cx.layout_of(layout_cx.tcx.types.i8)?,\n             i32: layout_cx.layout_of(layout_cx.tcx.types.i32)?,\n+            isize: layout_cx.layout_of(layout_cx.tcx.types.isize)?,\n+            u8: layout_cx.layout_of(layout_cx.tcx.types.u8)?,\n             u32: layout_cx.layout_of(layout_cx.tcx.types.u32)?,\n+            usize: layout_cx.layout_of(layout_cx.tcx.types.usize)?,\n         })\n     }\n }\n@@ -242,8 +252,6 @@ pub struct Evaluator<'tcx> {\n     pub(crate) time_anchor: Instant,\n \n     /// Precomputed `TyLayout`s for primitive data types that are commonly used inside Miri.\n-    /// FIXME: Search through the rest of the codebase for more layout_of() calls that\n-    /// could be stored here.\n     pub(crate) layouts: PrimitiveLayouts<'tcx>,\n }\n "}, {"sha": "8dd2a3ca302a0ab47b094b2c431311ef34075df4", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -384,7 +384,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             // No `environ` allocated yet, let's do that.\n             // This is memory backing an extern static, hence `Machine`, not `Env`.\n-            let layout = this.layout_of(this.tcx.types.usize)?;\n+            let layout = this.machine.layouts.usize;\n             let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n             this.machine.env_vars.environ = Some(place);\n         }"}, {"sha": "450f735ad6868f5134c141c4a46856cfee00d1c2", "filename": "src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -14,7 +14,7 @@\n use log::trace;\n \n use rustc_middle::{mir, ty};\n-use rustc_target::{spec::PanicStrategy, abi::LayoutOf};\n+use rustc_target::spec::PanicStrategy;\n \n use crate::*;\n \n@@ -93,7 +93,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Now we make a function call, and pass `data` as first and only argument.\n         let f_instance = this.memory.get_fn(try_fn)?.as_instance()?;\n         trace!(\"try_fn: {:?}\", f_instance);\n-        let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+        let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n         this.call_function(\n             f_instance,\n             &[data.into()],\n@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Push the `catch_fn` stackframe.\n             let f_instance = this.memory.get_fn(catch_unwind.catch_fn)?.as_instance()?;\n             trace!(\"catch_fn: {:?}\", f_instance);\n-            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 f_instance,\n                 &[catch_unwind.data.into(), payload.into()],"}, {"sha": "de9a0313b14474fc9162358df59c285155aad8ff", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -1,8 +1,6 @@\n use std::time::{Duration, SystemTime, Instant};\n use std::convert::TryFrom;\n \n-use rustc_target::abi::LayoutOf;\n-\n use crate::stacked_borrows::Tag;\n use crate::*;\n use helpers::{immty_from_int_checked, immty_from_uint_checked};\n@@ -107,7 +105,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let dwLowDateTime = u32::try_from(duration_ticks & 0x00000000FFFFFFFF).unwrap();\n         let dwHighDateTime = u32::try_from((duration_ticks & 0xFFFFFFFF00000000) >> 32).unwrap();\n-        let DWORD_tylayout = this.layout_of(this.tcx.types.u32)?;\n+        let DWORD_tylayout = this.machine.layouts.u32;\n         let imms = [\n             immty_from_uint_checked(dwLowDateTime, DWORD_tylayout)?,\n             immty_from_uint_checked(dwHighDateTime, DWORD_tylayout)?,"}, {"sha": "ba072e8ffd5d28848aee264126df640e1a470c91", "filename": "src/shims/tls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f50b34a3ee72beca54283a61e152bb088aa8e6/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=14f50b34a3ee72beca54283a61e152bb088aa8e6", "patch": "@@ -5,7 +5,7 @@ use std::collections::BTreeMap;\n use log::trace;\n \n use rustc_middle::ty;\n-use rustc_target::abi::{LayoutOf, Size, HasDataLayout};\n+use rustc_target::abi::{Size, HasDataLayout};\n \n use crate::{HelpersEvalContextExt, InterpResult, MPlaceTy, Scalar, StackPopCleanup, Tag};\n \n@@ -172,7 +172,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n             let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_PROCESS_DETACH\"])?;\n-            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 thread_callback,\n                 &[Scalar::null_ptr(this).into(), reason.into(), Scalar::null_ptr(this).into()],\n@@ -191,7 +191,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((instance, data)) = this.machine.tls.global_dtor {\n             trace!(\"Running global dtor {:?} on {:?}\", instance, data);\n \n-            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 instance,\n                 &[data.into()],\n@@ -209,7 +209,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n             assert!(!this.is_null(ptr).unwrap(), \"data can't be NULL when dtor is called!\");\n \n-            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 instance,\n                 &[ptr.into()],"}]}