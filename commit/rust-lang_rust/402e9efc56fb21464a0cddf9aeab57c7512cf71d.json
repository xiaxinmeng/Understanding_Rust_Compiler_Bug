{"sha": "402e9efc56fb21464a0cddf9aeab57c7512cf71d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMmU5ZWZjNTZmYjIxNDY0YTBjZGRmOWFlYWI1N2M3NTEyY2Y3MWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-05-06T14:37:19Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-05-16T21:04:09Z"}, "message": "rustc_codegen_ssa: only create backend `BasicBlock`s as-needed.", "tree": {"sha": "3a5b0eb4df206123dcfdbd1564cda65a2cda014d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a5b0eb4df206123dcfdbd1564cda65a2cda014d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402e9efc56fb21464a0cddf9aeab57c7512cf71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402e9efc56fb21464a0cddf9aeab57c7512cf71d", "html_url": "https://github.com/rust-lang/rust/commit/402e9efc56fb21464a0cddf9aeab57c7512cf71d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402e9efc56fb21464a0cddf9aeab57c7512cf71d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "html_url": "https://github.com/rust-lang/rust/commit/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "c4efd9dbdbc2a8bd55fc077e4eb596fc7f766e7f", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -1148,10 +1148,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.cx\n     }\n \n-    unsafe fn delete_basic_block(&mut self, bb: &'ll BasicBlock) {\n-        llvm::LLVMDeleteBasicBlock(bb);\n-    }\n-\n     fn do_not_inline(&mut self, llret: &'ll Value) {\n         llvm::Attribute::NoInline.apply_callsite(llvm::AttributePlace::Function, llret);\n     }"}, {"sha": "bf66040a7ebad7120a9b3f1c50963b3098476065", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -1079,7 +1079,6 @@ extern \"C\" {\n         Fn: &'a Value,\n         Name: *const c_char,\n     ) -> &'a BasicBlock;\n-    pub fn LLVMDeleteBasicBlock(BB: &BasicBlock);\n \n     // Operations on instructions\n     pub fn LLVMIsAInstruction(Val: &Value) -> Option<&Value>;"}, {"sha": "b26c7c9d51a1cbbe414382bc107ec2f296bd8b3d", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         target: mir::BasicBlock,\n     ) -> (Bx::BasicBlock, bool) {\n         let span = self.terminator.source_info.span;\n-        let lltarget = fx.blocks[target];\n+        let lltarget = fx.llbb(target);\n         let target_funclet = fx.cleanup_kinds[target].funclet_bb(target);\n         match (self.funclet_bb, target_funclet) {\n             (None, None) => (lltarget, false),\n@@ -133,13 +133,13 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         // If there is a cleanup block and the function we're calling can unwind, then\n         // do an invoke, otherwise do a call.\n         if let Some(cleanup) = cleanup.filter(|_| fn_abi.can_unwind) {\n-            let ret_bx = if let Some((_, target)) = destination {\n-                fx.blocks[target]\n+            let ret_llbb = if let Some((_, target)) = destination {\n+                fx.llbb(target)\n             } else {\n                 fx.unreachable_block()\n             };\n             let invokeret =\n-                bx.invoke(fn_ptr, &llargs, ret_bx, self.llblock(fx, cleanup), self.funclet(fx));\n+                bx.invoke(fn_ptr, &llargs, ret_llbb, self.llblock(fx, cleanup), self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, invokeret);\n \n             if let Some((ret_dest, target)) = destination {\n@@ -1205,7 +1205,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n     // FIXME(eddyb) rename this to `eh_pad_for_uncached`.\n     fn landing_pad_for_uncached(&mut self, bb: mir::BasicBlock) -> Bx::BasicBlock {\n-        let llbb = self.blocks[bb];\n+        let llbb = self.llbb(bb);\n         if base::wants_msvc_seh(self.cx.sess()) {\n             let funclet;\n             let ret_llbb;\n@@ -1293,9 +1293,23 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         Bx::new_block(self.cx, self.llfn, name)\n     }\n \n-    pub fn build_block(&self, bb: mir::BasicBlock) -> Bx {\n+    /// Get the backend `BasicBlock` for a MIR `BasicBlock`, either already\n+    /// cached in `self.cached_llbbs`, or created on demand (and cached).\n+    // FIXME(eddyb) rename `llbb` and other `ll`-prefixed things to use a\n+    // more backend-agnostic prefix such as `cg` (i.e. this would be `cgbb`).\n+    pub fn llbb(&mut self, bb: mir::BasicBlock) -> Bx::BasicBlock {\n+        self.cached_llbbs[bb].unwrap_or_else(|| {\n+            // FIXME(eddyb) only name the block if `fewer_names` is `false`.\n+            // FIXME(eddyb) create the block directly, without a builder.\n+            let llbb = self.new_block(&format!(\"{:?}\", bb)).llbb();\n+            self.cached_llbbs[bb] = Some(llbb);\n+            llbb\n+        })\n+    }\n+\n+    pub fn build_block(&mut self, bb: mir::BasicBlock) -> Bx {\n         let mut bx = Bx::with_cx(self.cx);\n-        bx.position_at_end(self.blocks[bb]);\n+        bx.position_at_end(self.llbb(bb));\n         bx\n     }\n "}, {"sha": "73d08b84cb8984b3bb5d8758a0410e7ac59876cf", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -40,8 +40,11 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// then later loaded when generating the DIVERGE_BLOCK.\n     personality_slot: Option<PlaceRef<'tcx, Bx::Value>>,\n \n-    /// A `Block` for each MIR `BasicBlock`\n-    blocks: IndexVec<mir::BasicBlock, Bx::BasicBlock>,\n+    /// A backend `BasicBlock` for each MIR `BasicBlock`, created lazily\n+    /// as-needed (e.g. RPO reaching it or another block branching to it).\n+    // FIXME(eddyb) rename `llbbs` and other `ll`-prefixed things to use a\n+    // more backend-agnostic prefix such as `cg` (i.e. this would be `cgbbs`).\n+    cached_llbbs: IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>>,\n \n     /// The funclet status of each basic block\n     cleanup_kinds: IndexVec<mir::BasicBlock, analyze::CleanupKind>,\n@@ -151,17 +154,17 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     // Allocate a `Block` for every basic block, except\n     // the start block, if nothing loops back to it.\n     let reentrant_start_block = !mir.predecessors()[mir::START_BLOCK].is_empty();\n-    let block_bxs: IndexVec<mir::BasicBlock, Bx::BasicBlock> = mir\n-        .basic_blocks()\n-        .indices()\n-        .map(|bb| {\n-            if bb == mir::START_BLOCK && !reentrant_start_block {\n-                bx.llbb()\n-            } else {\n-                bx.build_sibling_block(&format!(\"{:?}\", bb)).llbb()\n-            }\n-        })\n-        .collect();\n+    let cached_llbbs: IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>> =\n+        mir.basic_blocks()\n+            .indices()\n+            .map(|bb| {\n+                if bb == mir::START_BLOCK && !reentrant_start_block {\n+                    Some(bx.llbb())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n \n     let mut fx = FunctionCx {\n         instance,\n@@ -170,7 +173,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         fn_abi,\n         cx,\n         personality_slot: None,\n-        blocks: block_bxs,\n+        cached_llbbs,\n         unreachable_block: None,\n         cleanup_kinds,\n         landing_pads: IndexVec::from_elem(None, mir.basic_blocks()),\n@@ -245,29 +248,14 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     // Branch to the START block, if it's not the entry block.\n     if reentrant_start_block {\n-        bx.br(fx.blocks[mir::START_BLOCK]);\n+        bx.br(fx.llbb(mir::START_BLOCK));\n     }\n \n-    let rpo = traversal::reverse_postorder(&mir);\n-    let mut visited = BitSet::new_empty(mir.basic_blocks().len());\n-\n     // Codegen the body of each block using reverse postorder\n-    for (bb, _) in rpo {\n-        visited.insert(bb.index());\n+    // FIXME(eddyb) reuse RPO iterator between `analysis` and this.\n+    for (bb, _) in traversal::reverse_postorder(&mir) {\n         fx.codegen_block(bb);\n     }\n-\n-    // Remove blocks that haven't been visited, or have no\n-    // predecessors.\n-    for bb in mir.basic_blocks().indices() {\n-        // Unreachable block\n-        if !visited.contains(bb.index()) {\n-            debug!(\"codegen_mir: block {:?} was not visited\", bb);\n-            unsafe {\n-                bx.delete_basic_block(fx.blocks[bb]);\n-            }\n-        }\n-    }\n }\n \n /// Produces, for each argument, a `Value` pointing at the"}, {"sha": "1c1aa1c5c888d357e288cf00c6c3083f25f76520", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -291,6 +291,5 @@ pub trait BuilderMethods<'a, 'tcx>:\n     ) -> Self::Value;\n     fn zext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n-    unsafe fn delete_basic_block(&mut self, bb: Self::BasicBlock);\n     fn do_not_inline(&mut self, llret: Self::Value);\n }"}, {"sha": "543b81b0b6246d3bec2a5ae119e7d9c655540ef1", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -23,13 +23,16 @@ pub fn droppy() {\n // FIXME(eddyb) the `void @` forces a match on the instruction, instead of the\n // comment, that's `; call core::ptr::drop_in_place::<drop::SomeUniqueName>`\n // for the `v0` mangling, should switch to matching on that once `legacy` is gone.\n-// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: {{(call|invoke) void @.*}}drop_in_place{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition"}, {"sha": "d0c0202052ed6c7a554524d3461b766401954050", "filename": "src/test/codegen/match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/402e9efc56fb21464a0cddf9aeab57c7512cf71d/src%2Ftest%2Fcodegen%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402e9efc56fb21464a0cddf9aeab57c7512cf71d/src%2Ftest%2Fcodegen%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch.rs?ref=402e9efc56fb21464a0cddf9aeab57c7512cf71d", "patch": "@@ -14,13 +14,13 @@ pub fn exhaustive_match(e: E) -> u8 {\n // CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[A:[a-zA-Z0-9_]+]]\n // CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[B:[a-zA-Z0-9_]+]]\n // CHECK-NEXT: ]\n-// CHECK: [[B]]:\n-// CHECK-NEXT: store i8 1, i8* %1, align 1\n-// CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n // CHECK: [[OTHERWISE]]:\n // CHECK-NEXT: unreachable\n // CHECK: [[A]]:\n // CHECK-NEXT: store i8 0, i8* %1, align 1\n+// CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n+// CHECK: [[B]]:\n+// CHECK-NEXT: store i8 1, i8* %1, align 1\n // CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n     match e {\n         E::A => 0,"}]}