{"sha": "fab79c27ef184ee3620681bfbdc1fd89ad10b4df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjc5YzI3ZWYxODRlZTM2MjA2ODFiZmJkYzFmZDg5YWQxMGI0ZGY=", "commit": {"author": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2020-10-28T12:29:13Z"}, "committer": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2020-10-28T12:29:13Z"}, "message": "Extend test to cover dyn methods/functions.", "tree": {"sha": "3257c47b2e6b91da1ecf3a1cd4aade45297669c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3257c47b2e6b91da1ecf3a1cd4aade45297669c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab79c27ef184ee3620681bfbdc1fd89ad10b4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab79c27ef184ee3620681bfbdc1fd89ad10b4df", "html_url": "https://github.com/rust-lang/rust/commit/fab79c27ef184ee3620681bfbdc1fd89ad10b4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab79c27ef184ee3620681bfbdc1fd89ad10b4df/comments", "author": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e60f4511e39d012d5a21c10c55d706ec1e75e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e60f4511e39d012d5a21c10c55d706ec1e75e53", "html_url": "https://github.com/rust-lang/rust/commit/9e60f4511e39d012d5a21c10c55d706ec1e75e53"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "8b956988c7c461fbd5ea4c13af65480e38a7dafe", "filename": "src/test/ui/const-generics/dyn-supertraits.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fab79c27ef184ee3620681bfbdc1fd89ad10b4df/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab79c27ef184ee3620681bfbdc1fd89ad10b4df/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs?ref=fab79c27ef184ee3620681bfbdc1fd89ad10b4df", "patch": "@@ -1,58 +1,82 @@\n-// check-pass\n+// run-pass\n // revisions: full min\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(min, feature(min_const_generics))]\n \n-trait Foo<const N: usize> {}\n+trait Foo<const N: usize> {\n+    fn myfun(&self) -> usize;\n+}\n trait Bar<const N: usize> : Foo<N> {}\n trait Baz: Foo<3> {}\n \n-struct FooType<const N: usize> {}\n-struct BarType<const N: usize> {}\n-struct BazType {}\n+struct FooType<const N: usize>;\n+struct BarType<const N: usize>;\n+struct BazType;\n \n-impl<const N: usize> Foo<N> for FooType<N> {}\n-impl<const N: usize> Foo<N> for BarType<N> {}\n+impl<const N: usize> Foo<N> for FooType<N> {\n+    fn myfun(&self) -> usize { N }\n+}\n+impl<const N: usize> Foo<N> for BarType<N> {\n+    fn myfun(&self) -> usize { N + 1 }\n+}\n impl<const N: usize> Bar<N> for BarType<N> {}\n-impl Foo<3> for BazType {}\n+impl Foo<3> for BazType {\n+    fn myfun(&self) -> usize { 999 }\n+}\n impl Baz for BazType {}\n \n trait Foz {}\n trait Boz: Foo<3> + Foz {}\n trait Bok<const N: usize>: Foo<N> + Foz {}\n \n-struct FozType {}\n-struct BozType {}\n-struct BokType<const N: usize> {}\n+struct FozType;\n+struct BozType;\n+struct BokType<const N: usize>;\n \n impl Foz for FozType {}\n \n impl Foz for BozType {}\n-impl Foo<3> for BozType {}\n+impl Foo<3> for BozType {\n+    fn myfun(&self) -> usize { 9999 }\n+}\n impl Boz for BozType {}\n \n impl<const N: usize> Foz for BokType<N> {}\n-impl<const N: usize> Foo<N> for BokType<N> {}\n+impl<const N: usize> Foo<N> for BokType<N> {\n+    fn myfun(&self) -> usize { N + 2 }\n+}\n impl<const N: usize> Bok<N> for BokType<N> {}\n \n-fn a<const N: usize>(x: &dyn Foo<N>) {}\n-fn b(x: &dyn Foo<3>) {}\n+fn a<const N: usize>(_: &dyn Foo<N>) {}\n+fn b(_: &dyn Foo<3>) {}\n+fn c<T: Bok<N>, const N: usize>(x: T) { a::<N>(&x); }\n+fn d<T: ?Sized + Foo<3>>(_: &T) {}\n+fn e(x: &dyn Bar<3>) { d(x); }\n+\n+fn get_myfun<const N: usize>(x: &dyn Foo<N>) -> usize { x.myfun() }\n \n fn main() {\n     let foo = FooType::<3> {};\n-    a(&foo); b(&foo);\n+    a(&foo); b(&foo); d(&foo);\n+    assert!(get_myfun(&foo) == 3);\n \n     let bar = BarType::<3> {};\n-    a(&bar); b(&bar);\n+    a(&bar); b(&bar); d(&bar); e(&bar);\n+    assert!(get_myfun(&bar) == 4);\n \n     let baz = BazType {};\n-    a(&baz); b(&baz);\n+    a(&baz); b(&baz); d(&baz);\n+    assert!(get_myfun(&baz) == 999);\n \n     let boz = BozType {};\n-    a(&boz); b(&boz);\n+    a(&boz); b(&boz); d(&boz);\n+    assert!(get_myfun(&boz) == 9999);\n \n     let bok = BokType::<3> {};\n-    a(&bok); b(&bok);\n+    a(&bok); b(&bok); d(&bok);\n+    assert!(get_myfun(&bok) == 5);\n+    \n+    c(BokType::<3> {});\n }"}]}