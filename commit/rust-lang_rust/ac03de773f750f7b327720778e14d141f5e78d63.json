{"sha": "ac03de773f750f7b327720778e14d141f5e78d63", "node_id": "C_kwDOAAsO6NoAKGFjMDNkZTc3M2Y3NTBmN2IzMjc3MjA3NzhlMTRkMTQxZjVlNzhkNjM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-07T13:45:04Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-12T10:03:48Z"}, "message": "Add flag to disallow opaque types for `DisplayTarget::SourceCode`", "tree": {"sha": "42a4395f795580eae86d7447d027d1f4e2227108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a4395f795580eae86d7447d027d1f4e2227108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac03de773f750f7b327720778e14d141f5e78d63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ2ggQACgkQ4laYqTBY\nYXGVyxAAjnASIlvD1t1IhERHhsN3zz5zQYIzdV8SWM7IghauE/dS7vx0aktus/2u\nMxbtQhCBnusCj9eH8QvzpFZZOViiZiDX1yz0K7lO6ZzFsd1gpqVrDcvQQhgkqC/r\noIaAVw5NcK5VD/qSj9ApRpEBNXnqqvSKRS683YhoTD5ua8+a+PduYVIWd9ELyBxg\nWMyqHW+nB6yXXdvb5lAkMPW44cHyY7XTbZbfRQP3Xpwu2h50302g9NzONUhtjYyM\nklbRiRQduJahIQBaocnUJrIvJWSB6WOdGznuWe79rBro3u+ts4orCfF02VoZrHQH\nY9oo7kEpiYKMKefseIbzcdxI8FIA4R0kthUdYRYS9+1rqQUI87CB6fJNZDsw0c8d\nKeciuimsv0Bb3xz9AbRvaerdsKs+s2/Usm8n/f5ZFhWAQZ8b8XDfZoYXrpjkLXdM\nVT3rXI62dox1ydBanMzkdEAwEa3Gq4GRMXNXELobL+A2RvEjcGMF7JEogkGTkuxM\nVqv+G2i2sw1I6mvzc1P0pQuKOMeXdOaMtHzWJ5d/cjjUzZA1BJH9bFUohg65Im6k\nxzrGfwleTXs/V6LYnnQySszcbJm6AT/BQ0nDUZOsUSiI6Ggd6ajjjxxrGOCCv+JW\n22RECdNGHmoaiErjlzSWkeRqdAvhELWveSaplm89oFZbLDHp0zo=\n=WzZ3\n-----END PGP SIGNATURE-----", "payload": "tree 42a4395f795580eae86d7447d027d1f4e2227108\nparent 7501d3b721560637e27f904d9fce79182c41bef7\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1680875104 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681293828 +0900\n\nAdd flag to disallow opaque types for `DisplayTarget::SourceCode`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac03de773f750f7b327720778e14d141f5e78d63", "html_url": "https://github.com/rust-lang/rust/commit/ac03de773f750f7b327720778e14d141f5e78d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac03de773f750f7b327720778e14d141f5e78d63/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7501d3b721560637e27f904d9fce79182c41bef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7501d3b721560637e27f904d9fce79182c41bef7", "html_url": "https://github.com/rust-lang/rust/commit/7501d3b721560637e27f904d9fce79182c41bef7"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "0eef25102e8479e025d6aef63a946144012b3fee", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -150,6 +150,7 @@ pub trait HirDisplay {\n         &'a self,\n         db: &'a dyn HirDatabase,\n         module_id: ModuleId,\n+        allow_opaque: bool,\n     ) -> Result<String, DisplaySourceCodeError> {\n         let mut result = String::new();\n         match self.hir_fmt(&mut HirFormatter {\n@@ -160,7 +161,7 @@ pub trait HirDisplay {\n             max_size: None,\n             omit_verbose_types: false,\n             closure_style: ClosureStyle::ImplFn,\n-            display_target: DisplayTarget::SourceCode { module_id },\n+            display_target: DisplayTarget::SourceCode { module_id, allow_opaque },\n         }) {\n             Ok(()) => {}\n             Err(HirDisplayError::FmtError) => panic!(\"Writing to String can't fail!\"),\n@@ -249,25 +250,34 @@ pub enum DisplayTarget {\n     Diagnostics,\n     /// Display types for inserting them in source files.\n     /// The generated code should compile, so paths need to be qualified.\n-    SourceCode { module_id: ModuleId },\n+    SourceCode { module_id: ModuleId, allow_opaque: bool },\n     /// Only for test purpose to keep real types\n     Test,\n }\n \n impl DisplayTarget {\n-    fn is_source_code(&self) -> bool {\n+    fn is_source_code(self) -> bool {\n         matches!(self, Self::SourceCode { .. })\n     }\n-    fn is_test(&self) -> bool {\n+\n+    fn is_test(self) -> bool {\n         matches!(self, Self::Test)\n     }\n+\n+    fn allows_opaque(self) -> bool {\n+        match self {\n+            Self::SourceCode { allow_opaque, .. } => allow_opaque,\n+            _ => true,\n+        }\n+    }\n }\n \n #[derive(Debug)]\n pub enum DisplaySourceCodeError {\n     PathNotFound,\n     UnknownType,\n     Generator,\n+    OpaqueType,\n }\n \n pub enum HirDisplayError {\n@@ -768,7 +778,7 @@ impl HirDisplay for Ty {\n                         };\n                         write!(f, \"{name}\")?;\n                     }\n-                    DisplayTarget::SourceCode { module_id } => {\n+                    DisplayTarget::SourceCode { module_id, allow_opaque: _ } => {\n                         if let Some(path) = find_path::find_path(\n                             db.upcast(),\n                             ItemInNs::Types((*def_id).into()),\n@@ -906,6 +916,11 @@ impl HirDisplay for Ty {\n                 f.end_location_link();\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {\n+                if !f.display_target.allows_opaque() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::OpaqueType,\n+                    ));\n+                }\n                 let impl_trait_id = db.lookup_intern_impl_trait_id((*opaque_ty_id).into());\n                 match impl_trait_id {\n                     ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n@@ -953,8 +968,14 @@ impl HirDisplay for Ty {\n                 }\n             }\n             TyKind::Closure(id, substs) => {\n-                if f.display_target.is_source_code() && f.closure_style != ClosureStyle::ImplFn {\n-                    never!(\"Only `impl Fn` is valid for displaying closures in source code\");\n+                if f.display_target.is_source_code() {\n+                    if !f.display_target.allows_opaque() {\n+                        return Err(HirDisplayError::DisplaySourceCodeError(\n+                            DisplaySourceCodeError::OpaqueType,\n+                        ));\n+                    } else if f.closure_style != ClosureStyle::ImplFn {\n+                        never!(\"Only `impl Fn` is valid for displaying closures in source code\");\n+                    }\n                 }\n                 match f.closure_style {\n                     ClosureStyle::Hide => return write!(f, \"{TYPE_HINT_TRUNCATION}\"),\n@@ -1053,6 +1074,11 @@ impl HirDisplay for Ty {\n             }\n             TyKind::Alias(AliasTy::Projection(p_ty)) => p_ty.hir_fmt(f)?,\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n+                if !f.display_target.allows_opaque() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::OpaqueType,\n+                    ));\n+                }\n                 let impl_trait_id = db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into());\n                 match impl_trait_id {\n                     ImplTraitId::ReturnTypeImplTrait(func, idx) => {"}, {"sha": "245617ab82e234005233993df842749999569b94", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -159,7 +159,7 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let range = node.as_ref().original_file_range(&db);\n             if let Some(expected) = types.remove(&range) {\n                 let actual = if display_source {\n-                    ty.display_source_code(&db, def.module(&db)).unwrap()\n+                    ty.display_source_code(&db, def.module(&db), true).unwrap()\n                 } else {\n                     ty.display_test(&db).to_string()\n                 };\n@@ -175,7 +175,7 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let range = node.as_ref().original_file_range(&db);\n             if let Some(expected) = types.remove(&range) {\n                 let actual = if display_source {\n-                    ty.display_source_code(&db, def.module(&db)).unwrap()\n+                    ty.display_source_code(&db, def.module(&db), true).unwrap()\n                 } else {\n                     ty.display_test(&db).to_string()\n                 };"}, {"sha": "8bc285614e039cfa5f86c6d93c73bca102e091d6", "filename": "crates/ide-assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n         return None;\n     }\n \n-    let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let inferred_type = ty.display_source_code(ctx.db(), module.into(), false).ok()?;\n     acc.add(\n         AssistId(\"add_explicit_type\", AssistKind::RefactorRewrite),\n         format!(\"Insert explicit type `{inferred_type}`\"),"}, {"sha": "9e1022d809d0355de31a1a93371667be2fa89d40", "filename": "crates/ide-assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n     if ty.is_unit() {\n         return None;\n     }\n-    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let ty = ty.display_source_code(ctx.db(), module.into(), true).ok()?;\n \n     acc.add(\n         AssistId(\"add_return_type\", AssistKind::RefactorRewrite),"}, {"sha": "728018506d1b793cff20d28b9906f48212f11178", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -1884,7 +1884,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n-    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"_\".to_string())\n+    ty.display_source_code(ctx.db(), module.into(), true).ok().unwrap_or_else(|| \"_\".to_string())\n }\n \n fn make_ty(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> ast::Type {"}, {"sha": "eccd7675fbaaedead8a053e924819eabc6fb1726", "filename": "crates/ide-assists/src/handlers/generate_constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -46,7 +46,8 @@ pub(crate) fn generate_constant(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     let ty = ctx.sema.type_of_expr(&expr)?;\n     let scope = ctx.sema.scope(statement.syntax())?;\n     let constant_module = scope.module();\n-    let type_name = ty.original().display_source_code(ctx.db(), constant_module.into()).ok()?;\n+    let type_name =\n+        ty.original().display_source_code(ctx.db(), constant_module.into(), false).ok()?;\n     let target = statement.syntax().parent()?.text_range();\n     let path = constant_token.syntax().ancestors().find_map(ast::Path::cast)?;\n "}, {"sha": "184f523e01bd9b5ddeae6cbfb1fbe1ad17f2370a", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -192,7 +192,7 @@ fn expr_ty(\n     scope: &hir::SemanticsScope<'_>,\n ) -> Option<ast::Type> {\n     let ty = ctx.sema.type_of_expr(&arg).map(|it| it.adjusted())?;\n-    let text = ty.display_source_code(ctx.db(), scope.module().into()).ok()?;\n+    let text = ty.display_source_code(ctx.db(), scope.module().into(), false).ok()?;\n     Some(make::ty(&text))\n }\n "}, {"sha": "a5556878be6feceb173400d81f6c1bce5fcf892f", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -438,7 +438,7 @@ fn make_return_type(\n             Some(ty) if ty.is_unit() => (None, false),\n             Some(ty) => {\n                 necessary_generic_params.extend(ty.generic_params(ctx.db()));\n-                let rendered = ty.display_source_code(ctx.db(), target_module.into());\n+                let rendered = ty.display_source_code(ctx.db(), target_module.into(), true);\n                 match rendered {\n                     Ok(rendered) => (Some(make::ty(&rendered)), false),\n                     Err(_) => (Some(make::ty_placeholder()), true),\n@@ -992,9 +992,9 @@ fn fn_arg_type(\n             let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(fn_arg.syntax())?.krate());\n             convert_reference_type(ty.strip_references(), ctx.db(), famous_defs)\n                 .map(|conversion| conversion.convert_type(ctx.db()))\n-                .or_else(|| ty.display_source_code(ctx.db(), target_module.into()).ok())\n+                .or_else(|| ty.display_source_code(ctx.db(), target_module.into(), true).ok())\n         } else {\n-            ty.display_source_code(ctx.db(), target_module.into()).ok()\n+            ty.display_source_code(ctx.db(), target_module.into(), true).ok()\n         }\n     }\n "}, {"sha": "23153b4c566c8d4301f8480f253c1c369cff40ca", "filename": "crates/ide-assists/src/handlers/promote_local_to_const.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -57,11 +57,13 @@ pub(crate) fn promote_local_to_const(acc: &mut Assists, ctx: &AssistContext<'_>)\n     let local = ctx.sema.to_def(&pat)?;\n     let ty = ctx.sema.type_of_pat(&pat.into())?.original;\n \n-    if ty.contains_unknown() || ty.is_closure() {\n-        cov_mark::hit!(promote_lcoal_not_applicable_if_ty_not_inferred);\n-        return None;\n-    }\n-    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let ty = match ty.display_source_code(ctx.db(), module.into(), false) {\n+        Ok(ty) => ty,\n+        Err(_) => {\n+            cov_mark::hit!(promote_local_not_applicable_if_ty_not_inferred);\n+            return None;\n+        }\n+    };\n \n     let initializer = let_stmt.initializer()?;\n     if !is_body_const(&ctx.sema, &initializer) {\n@@ -187,7 +189,7 @@ fn foo() {\n \n     #[test]\n     fn not_applicable_unknown_ty() {\n-        cov_mark::check!(promote_lcoal_not_applicable_if_ty_not_inferred);\n+        cov_mark::check!(promote_local_not_applicable_if_ty_not_inferred);\n         check_assist_not_applicable(\n             promote_local_to_const,\n             r\""}, {"sha": "43a97d7d3a551b485ad54aa21676f84bad7456ec", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n     let returned_type = match ctx.sema.type_of_expr(&initializer) {\n         Some(returned_type) if !returned_type.original.contains_unknown() => {\n             let module = ctx.sema.scope(let_stmt.syntax())?.module();\n-            returned_type.original.display_source_code(ctx.db(), module.into()).ok()?\n+            returned_type.original.display_source_code(ctx.db(), module.into(), false).ok()?\n         }\n         _ => {\n             cov_mark::hit!(fallback_to_turbofish_type_if_type_info_not_available);"}, {"sha": "734e1bed8df1c822a7677d967c81f69ed6188dbf", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -127,7 +127,7 @@ fn params_from_stmt_list_scope(\n         let module = scope.module().into();\n         scope.process_all_names(&mut |name, def| {\n             if let hir::ScopeDef::Local(local) = def {\n-                if let Ok(ty) = local.ty(ctx.db).display_source_code(ctx.db, module) {\n+                if let Ok(ty) = local.ty(ctx.db).display_source_code(ctx.db, module, true) {\n                     cb(name, ty);\n                 }\n             }"}, {"sha": "e47054756389bac08a486cf3807b334b5e165e09", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -242,7 +242,7 @@ pub(crate) fn complete_ascribed_type(\n         }\n     }?\n     .adjusted();\n-    let ty_string = x.display_source_code(ctx.db, ctx.module.into()).ok()?;\n+    let ty_string = x.display_source_code(ctx.db, ctx.module.into(), true).ok()?;\n     acc.add(render_type_inference(ty_string, ctx));\n     None\n }"}, {"sha": "0ee627a44c68ec6af39ca58e2c56be72ba64efad", "filename": "crates/ide-db/src/path_transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fpath_transform.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -116,7 +116,9 @@ impl<'a> PathTransform<'a> {\n                         Some((\n                             k,\n                             ast::make::ty(\n-                                &default.display_source_code(db, source_module.into()).ok()?,\n+                                &default\n+                                    .display_source_code(db, source_module.into(), false)\n+                                    .ok()?,\n                             ),\n                         ))\n                     }"}, {"sha": "a33a2cd85e2271327343d7c34e0b2e4b5ffe3b13", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -176,7 +176,9 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n fn make_ty(ty: &hir::Type, db: &dyn HirDatabase, module: hir::Module) -> ast::Type {\n     let ty_str = match ty.as_adt() {\n         Some(adt) => adt.name(db).to_string(),\n-        None => ty.display_source_code(db, module.into()).ok().unwrap_or_else(|| \"_\".to_string()),\n+        None => {\n+            ty.display_source_code(db, module.into(), false).ok().unwrap_or_else(|| \"_\".to_string())\n+        }\n     };\n \n     make::ty(&ty_str)"}, {"sha": "625c95ce201d740789cac0aa4fe226190b7c2479", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac03de773f750f7b327720778e14d141f5e78d63/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=ac03de773f750f7b327720778e14d141f5e78d63", "patch": "@@ -69,7 +69,7 @@ fn missing_record_expr_field_fixes(\n     let new_field = make::record_field(\n         None,\n         make::name(record_expr_field.field_name()?.ident_token()?.text()),\n-        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+        make::ty(&new_field_type.display_source_code(sema.db, module.into(), true).ok()?),\n     );\n \n     let last_field = record_fields.fields().last()?;"}]}