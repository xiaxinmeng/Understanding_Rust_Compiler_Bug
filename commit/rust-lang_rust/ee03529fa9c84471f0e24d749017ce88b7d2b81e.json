{"sha": "ee03529fa9c84471f0e24d749017ce88b7d2b81e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDM1MjlmYTljODQ0NzFmMGUyNGQ3NDkwMTdjZTg4YjdkMmI4MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-01T16:41:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-01T16:41:54Z"}, "message": "auto merge of #13875 : hjr3/rust/serialize-strbuf, r=alexcrichton\n\n- implement Encodable and Decodable for StrBuf\r\n- implement to_json for StrBuf", "tree": {"sha": "29e4e0998dd17a3a894c20e762e32496fde8dbc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e4e0998dd17a3a894c20e762e32496fde8dbc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee03529fa9c84471f0e24d749017ce88b7d2b81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee03529fa9c84471f0e24d749017ce88b7d2b81e", "html_url": "https://github.com/rust-lang/rust/commit/ee03529fa9c84471f0e24d749017ce88b7d2b81e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee03529fa9c84471f0e24d749017ce88b7d2b81e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239557de6de72748a5c7604081b202d53f7d9ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/239557de6de72748a5c7604081b202d53f7d9ac9", "html_url": "https://github.com/rust-lang/rust/commit/239557de6de72748a5c7604081b202d53f7d9ac9"}, {"sha": "fa6efedccf63c283d7b0916c304ee456d20ab97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6efedccf63c283d7b0916c304ee456d20ab97e", "html_url": "https://github.com/rust-lang/rust/commit/fa6efedccf63c283d7b0916c304ee456d20ab97e"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "b87a02fcfd774354d89eaf4d6e0a1a4a9b123662", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ee03529fa9c84471f0e24d749017ce88b7d2b81e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee03529fa9c84471f0e24d749017ce88b7d2b81e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ee03529fa9c84471f0e24d749017ce88b7d2b81e", "patch": "@@ -2205,6 +2205,10 @@ impl ToJson for ~str {\n     fn to_json(&self) -> Json { String((*self).clone()) }\n }\n \n+impl ToJson for StrBuf {\n+    fn to_json(&self) -> Json { String((*self).as_slice().into_owned()) }\n+}\n+\n impl<A:ToJson,B:ToJson> ToJson for (A, B) {\n     fn to_json(&self) -> Json {\n         match *self {\n@@ -2643,41 +2647,25 @@ mod tests {\n \n     #[test]\n     fn test_decode_str() {\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"foo\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"foo\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\\\\"\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\\"\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\b\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\x08\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\n\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\n\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\r\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\r\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\t\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\t\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\u12ab\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\u12ab\".to_owned());\n-\n-        let mut decoder = Decoder::new(from_str(\"\\\"\\\\uAB12\\\"\").unwrap());\n-        let v: ~str = Decodable::decode(&mut decoder).unwrap();\n-        assert_eq!(v, \"\\uAB12\".to_owned());\n+        let s = [(\"\\\"\\\"\", \"\"),\n+                 (\"\\\"foo\\\"\", \"foo\"),\n+                 (\"\\\"\\\\\\\"\\\"\", \"\\\"\"),\n+                 (\"\\\"\\\\b\\\"\", \"\\x08\"),\n+                 (\"\\\"\\\\n\\\"\", \"\\n\"),\n+                 (\"\\\"\\\\r\\\"\", \"\\r\"),\n+                 (\"\\\"\\\\t\\\"\", \"\\t\"),\n+                 (\"\\\"\\\\u12ab\\\"\", \"\\u12ab\"),\n+                 (\"\\\"\\\\uAB12\\\"\", \"\\uAB12\")];\n+\n+        for &(i, o) in s.iter() {\n+            let mut decoder = Decoder::new(from_str(i).unwrap());\n+            let v: StrBuf = Decodable::decode(&mut decoder).unwrap();\n+            assert_eq!(v.as_slice(), o);\n+\n+            let mut decoder = Decoder::new(from_str(i).unwrap());\n+            let v: ~str = Decodable::decode(&mut decoder).unwrap();\n+            assert_eq!(v, o.to_owned());\n+        }\n     }\n \n     #[test]"}, {"sha": "9801a243efa527cf8384edb222120e2f04847c5a", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee03529fa9c84471f0e24d749017ce88b7d2b81e/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee03529fa9c84471f0e24d749017ce88b7d2b81e/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=ee03529fa9c84471f0e24d749017ce88b7d2b81e", "patch": "@@ -313,6 +313,18 @@ impl<E, D:Decoder<E>> Decodable<D, E> for ~str {\n     }\n }\n \n+impl<E, S:Encoder<E>> Encodable<S, E> for StrBuf {\n+    fn encode(&self, s: &mut S) -> Result<(), E> {\n+        s.emit_str(self.as_slice())\n+    }\n+}\n+\n+impl<E, D:Decoder<E>> Decodable<D, E> for StrBuf {\n+    fn decode(d: &mut D) -> Result<StrBuf, E> {\n+        Ok(StrBuf::from_str(try!(d.read_str())))\n+    }\n+}\n+\n impl<E, S:Encoder<E>> Encodable<S, E> for f32 {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         s.emit_f32(*self)"}]}