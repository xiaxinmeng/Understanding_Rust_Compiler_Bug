{"sha": "d7645f4245518b9d1e216c461f232caea1dcd3f7", "node_id": "C_kwDOAAsO6NoAKGQ3NjQ1ZjQyNDU1MThiOWQxZTIxNmM0NjFmMjMyY2FlYTFkY2QzZjc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-02T09:13:31Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-02T09:13:31Z"}, "message": "don't use a `span_note` for ignored impls", "tree": {"sha": "5ea820880804ea03c08421e3cd13a22b53078c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea820880804ea03c08421e3cd13a22b53078c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7645f4245518b9d1e216c461f232caea1dcd3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7645f4245518b9d1e216c461f232caea1dcd3f7", "html_url": "https://github.com/rust-lang/rust/commit/d7645f4245518b9d1e216c461f232caea1dcd3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7645f4245518b9d1e216c461f232caea1dcd3f7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16", "html_url": "https://github.com/rust-lang/rust/commit/fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16"}], "stats": {"total": 41, "additions": 6, "deletions": 35}, "files": [{"sha": "519fb7ea2640a5b19d874609a41343dcf7465558", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7645f4245518b9d1e216c461f232caea1dcd3f7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7645f4245518b9d1e216c461f232caea1dcd3f7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d7645f4245518b9d1e216c461f232caea1dcd3f7", "patch": "@@ -722,11 +722,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         traits_str,\n                         is_are\n                     );\n-                    let multispan = ign_traits\n-                        .iter()\n-                        .map(|(_, impl_id)| self.tcx.def_span(*impl_id))\n-                        .collect::<Vec<_>>();\n-                    err.span_note(multispan, &msg);\n+                    err.note(&msg);\n                 }\n                 err.emit();\n             });"}, {"sha": "58aaf978dc7d675cad5fdbf6df75ac013e298a60", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=d7645f4245518b9d1e216c461f232caea1dcd3f7", "patch": "@@ -5,12 +5,7 @@ LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n-note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/derive-uninhabited-enum-38885.rs:10:10\n-   |\n-LL | #[derive(Debug)]\n-   |          ^^^^^\n-   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n warning: 1 warning emitted\n "}, {"sha": "031b8ce713eb4c9d3fd5e0b88bc296f032cc3905", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=d7645f4245518b9d1e216c461f232caea1dcd3f7", "patch": "@@ -16,38 +16,23 @@ error: field is never read: `f`\n LL | struct B { f: () }\n    |            ^^^^^\n    |\n-note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:9:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n    |            ^^^^^\n    |\n-note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:13:10\n-   |\n-LL | #[derive(Debug)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n    |            ^^^^^\n    |\n-note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:17:10\n-   |\n-LL | #[derive(Debug,Clone)]\n-   |          ^^^^^ ^^^^^\n-   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:21:12"}, {"sha": "57f8ca74f83dd4f81fff6dc02264766c46cb0400", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7645f4245518b9d1e216c461f232caea1dcd3f7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=d7645f4245518b9d1e216c461f232caea1dcd3f7", "patch": "@@ -9,12 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n-note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/unused-variant.rs:3:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n error: aborting due to previous error\n "}]}