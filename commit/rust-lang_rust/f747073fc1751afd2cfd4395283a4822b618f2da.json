{"sha": "f747073fc1751afd2cfd4395283a4822b618f2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDcwNzNmYzE3NTFhZmQyY2ZkNDM5NTI4M2E0ODIyYjYxOGYyZGE=", "commit": {"author": {"name": "Poliorcetics", "email": "poliorcetics@users.noreply.github.com", "date": "2020-06-13T16:41:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-13T16:41:01Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: David Tolnay <dtolnay@gmail.com>", "tree": {"sha": "a36a0f4b85a261218a7308b6d68ffb19aa1afe86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36a0f4b85a261218a7308b6d68ffb19aa1afe86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f747073fc1751afd2cfd4395283a4822b618f2da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe5QGdCRBK7hj4Ov3rIwAAdHIIACCzF5EyiNhmFm7uzNy1DqNx\nMp9mVIiJ1QkU62UqGWKnpl7KMad8T+TrDbBoHk7NkkLacFIlqrLrODkJo1cURLsP\nP7bUmse2BDRo3/dH+snSIX3XwJYiP7JD6QP09v1rLMfoby9lfPUml8Yaj2QzyK8z\nl6py9zW2arBJTZ0lqeIxE+CHSJ0ELsy8/6ExiC9SxwUR2hVzzTTCRWrtozuLnqtT\nPS7V9NXaGcRp9zUD8AUoDpm6ISHL4bGNab/fIbC6YEWSjamOk2fqeigc+zclOrCu\na+z2e4BKHQbBHrIPA76JetMgNTfH7PCMBWTGvhixJdqI33/SOQ2AutWrKwuvjX0=\n=Rbke\n-----END PGP SIGNATURE-----\n", "payload": "tree a36a0f4b85a261218a7308b6d68ffb19aa1afe86\nparent 1312d30a6a837f72c3f36f5dc1c575a29890aa2c\nauthor Poliorcetics <poliorcetics@users.noreply.github.com> 1592066461 +0200\ncommitter GitHub <noreply@github.com> 1592066461 +0200\n\nApply suggestions from code review\n\nCo-authored-by: David Tolnay <dtolnay@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f747073fc1751afd2cfd4395283a4822b618f2da", "html_url": "https://github.com/rust-lang/rust/commit/f747073fc1751afd2cfd4395283a4822b618f2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f747073fc1751afd2cfd4395283a4822b618f2da/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1312d30a6a837f72c3f36f5dc1c575a29890aa2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1312d30a6a837f72c3f36f5dc1c575a29890aa2c", "html_url": "https://github.com/rust-lang/rust/commit/1312d30a6a837f72c3f36f5dc1c575a29890aa2c"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "6625d4659dcac95dff8da90baefa8d2aee32c022", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f747073fc1751afd2cfd4395283a4822b618f2da/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f747073fc1751afd2cfd4395283a4822b618f2da/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=f747073fc1751afd2cfd4395283a4822b618f2da", "patch": "@@ -108,8 +108,8 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// *guard += 1;\n /// ```\n ///\n-/// It is sometimes a good idea (or even necessary) to manually drop the mutex\n-/// to unlock it as soon as possible. If you need the resource until the end of\n+/// It is sometimes necessary to manually drop the mutex\n+/// guard to unlock it as soon as possible. If you need the resource until the end of\n /// the scope, this is not needed.\n ///\n /// ```\n@@ -140,16 +140,16 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// // This is the result of some important and long-ish work.\n /// let result = data.iter().fold(0, |acc, x| acc + x * 2);\n /// data.push(result);\n-/// // We drop the `data` explicitely because it's not necessary anymore\n+/// // We drop the `data` explicitly because it's not necessary anymore\n /// // and the thread still has work to do. This allow other threads to\n /// // start working on the data immediately, without waiting\n /// // for the rest of the unrelated work to be done here.\n /// //\n /// // It's even more important here than in the threads because we `.join` the\n-/// // threads after that. If we had not dropped the lock, a thread could be\n+/// // threads after that. If we had not dropped the mutex guard, a thread could be\n /// // waiting forever for it, causing a deadlock.\n /// drop(data);\n-/// // Here the lock is not assigned to a variable and so, even if the scope\n+/// // Here the mutex guard is not assigned to a variable and so, even if the scope\n /// // does not end after this line, the mutex is still released:\n /// // there is no deadlock.\n /// *res_mutex.lock().unwrap() += result;"}]}