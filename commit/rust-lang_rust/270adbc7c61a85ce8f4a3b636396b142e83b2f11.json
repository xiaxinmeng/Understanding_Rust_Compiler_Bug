{"sha": "270adbc7c61a85ce8f4a3b636396b142e83b2f11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MGFkYmM3YzYxYTg1Y2U4ZjRhM2I2MzYzOTZiMTQyZTgzYjJmMTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T11:56:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-22T21:32:19Z"}, "message": "Stacked Borrows: alignment does not matter", "tree": {"sha": "9372d20260781589a77388ab4bf47611b7663720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9372d20260781589a77388ab4bf47611b7663720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270adbc7c61a85ce8f4a3b636396b142e83b2f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270adbc7c61a85ce8f4a3b636396b142e83b2f11", "html_url": "https://github.com/rust-lang/rust/commit/270adbc7c61a85ce8f4a3b636396b142e83b2f11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270adbc7c61a85ce8f4a3b636396b142e83b2f11/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9db57a0dee6b2ed013c27fb312cef77a05e323", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9db57a0dee6b2ed013c27fb312cef77a05e323", "html_url": "https://github.com/rust-lang/rust/commit/8d9db57a0dee6b2ed013c27fb312cef77a05e323"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "03140c867b2d07d19dca3025ad198de6f1bffe8d", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/270adbc7c61a85ce8f4a3b636396b142e83b2f11/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270adbc7c61a85ce8f4a3b636396b142e83b2f11/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=270adbc7c61a85ce8f4a3b636396b142e83b2f11", "patch": "@@ -11,7 +11,7 @@ use log::trace;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::RetagKind;\n use rustc_middle::ty;\n-use rustc_target::abi::{LayoutOf, Size};\n+use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_hir::Mutability;\n \n use crate::*;\n@@ -577,11 +577,13 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .size_and_align_of_mplace(place)?\n             .map(|(size, _)| size)\n             .unwrap_or_else(|| place.layout.size);\n+        // `reborrow` relies on getting a `Pointer` and everything being in-bounds,\n+        // so let's ensure that. However, we do not care about alignment.\n         // We can see dangling ptrs in here e.g. after a Box's `Unique` was\n-        // updated using \"self.0 = ...\" (can happen in Box::from_raw); see miri#1050.\n-        let place = this.mplace_access_checked(place)?;\n+        // updated using \"self.0 = ...\" (can happen in Box::from_raw) so we cannot ICE; see miri#1050.\n+        let place = this.mplace_access_checked(place, Some(Align::from_bytes(1).unwrap()))?;\n+        // Nothing to do for ZSTs.\n         if size == Size::ZERO {\n-            // Nothing to do for ZSTs.\n             return Ok(val);\n         }\n "}, {"sha": "5582caaf37ea5fdb9e3a9ef9033d282763384818", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270adbc7c61a85ce8f4a3b636396b142e83b2f11/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270adbc7c61a85ce8f4a3b636396b142e83b2f11/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=270adbc7c61a85ce8f4a3b636396b142e83b2f11", "patch": "@@ -1,11 +1,12 @@\n-#![feature(unsize, coerce_unsized)]\n+#![feature(unsize, coerce_unsized, raw_ref_op)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hash;\n \n fn test_basic() {\n     #[repr(packed)]\n     struct S {\n+        fill: u8,\n         a: i32,\n         b: i64,\n     }\n@@ -30,16 +31,21 @@ fn test_basic() {\n     }\n \n     let mut x = S {\n+        fill: 0,\n         a: 42,\n         b: 99,\n     };\n     let a = x.a;\n     let b = x.b;\n     assert_eq!(a, 42);\n     assert_eq!(b, 99);\n+    assert_eq!(&x.fill, &0); // `fill` just requirs 1-byte-align, so this is fine\n     // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n     assert_eq!({x.a}, 42);\n     assert_eq!({x.b}, 99);\n+    // but we *can* take a raw pointer!\n+    assert_eq!(unsafe { (&raw const x.a).read_unaligned() }, 42);\n+    assert_eq!(unsafe { (&raw const x.b).read_unaligned() }, 99);\n \n     x.b = 77;\n     assert_eq!({x.b}, 77);"}]}