{"sha": "033c99b1baaa87587132debafaa8d2d0ccb7dde8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzM2M5OWIxYmFhYTg3NTg3MTMyZGViYWZhYThkMmQwY2NiN2RkZTg=", "commit": {"author": {"name": "Yury Krivopalov", "email": "ykrivopalov@yandex.ru", "date": "2017-09-30T17:14:00Z"}, "committer": {"name": "Yury Krivopalov", "email": "ykrivopalov@yandex.ru", "date": "2017-10-14T09:34:37Z"}, "message": "Add erasing_op lint\n\nFor expressions that can be replaced by a zero.", "tree": {"sha": "8272efba10f77641eb1586df9a730c3f4400e44b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8272efba10f77641eb1586df9a730c3f4400e44b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033c99b1baaa87587132debafaa8d2d0ccb7dde8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033c99b1baaa87587132debafaa8d2d0ccb7dde8", "html_url": "https://github.com/rust-lang/rust/commit/033c99b1baaa87587132debafaa8d2d0ccb7dde8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033c99b1baaa87587132debafaa8d2d0ccb7dde8/comments", "author": null, "committer": null, "parents": [{"sha": "f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "html_url": "https://github.com/rust-lang/rust/commit/f68e408cb6d0bb0a548b1ed54213e04b245f92cf"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "7b5b4a3d3afb70c29f0b53b02d6f8cc4d20ae817", "filename": "clippy_lints/src/erasing_op.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/033c99b1baaa87587132debafaa8d2d0ccb7dde8/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033c99b1baaa87587132debafaa8d2d0ccb7dde8/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=033c99b1baaa87587132debafaa8d2d0ccb7dde8", "patch": "@@ -0,0 +1,62 @@\n+use consts::{constant_simple, Constant};\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::codemap::Span;\n+use utils::{in_macro, span_lint};\n+\n+/// **What it does:** Checks for erasing operations, e.g. `x * 0`.\n+///\n+/// **Why is this bad?** The whole expression can be replaced by zero.\n+/// Most likely mistake was made and code should be reviewed or simplified.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// 0 / x; 0 * x; x & 0\n+/// ```\n+declare_lint! {\n+    pub ERASING_OP,\n+    Warn,\n+    \"using erasing operations, e.g. `x * 0` or `y & 0`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ErasingOp;\n+\n+impl LintPass for ErasingOp {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ERASING_OP)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n+        if let ExprBinary(ref cmp, ref left, ref right) = e.node {\n+            match cmp.node {\n+                BiMul | BiBitAnd => {\n+                    check(cx, left, e.span);\n+                    check(cx, right, e.span);\n+                },\n+                BiDiv => check(cx, left, e.span),\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n+fn check(cx: &LateContext, e: &Expr, span: Span) {\n+    if let Some(Constant::Int(v)) = constant_simple(cx, e) {\n+        if v.to_u128_unchecked() == 0 {\n+            span_lint(\n+                cx,\n+                ERASING_OP,\n+                span,\n+                \"the operation is ineffective. Consider reducing it to `0`\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "6c85b9efa55c2e70b180f584b6fa5a4b7d834e12", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033c99b1baaa87587132debafaa8d2d0ccb7dde8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033c99b1baaa87587132debafaa8d2d0ccb7dde8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=033c99b1baaa87587132debafaa8d2d0ccb7dde8", "patch": "@@ -86,6 +86,7 @@ pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n pub mod enum_variants;\n+pub mod erasing_op;\n pub mod eq_op;\n pub mod escape;\n pub mod eta_reduction;\n@@ -246,6 +247,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box needless_continue::NeedlessContinue);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n+    reg.register_late_lint_pass(box erasing_op::ErasingOp);\n     reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);"}, {"sha": "45b8bbe6d9e4b28f30824adcc11d5b5238fccd8c", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=033c99b1baaa87587132debafaa8d2d0ccb7dde8", "patch": "@@ -6,6 +6,14 @@ error: &-masking with zero\n    |\n    = note: `-D bad-bit-mask` implied by `-D warnings`\n \n+error: the operation is ineffective. Consider reducing it to `0`\n+  --> $DIR/bit_masks.rs:12:5\n+   |\n+12 |     x & 0 == 0;\n+   |     ^^^^^\n+   |\n+   = note: `-D erasing-op` implied by `-D warnings`\n+\n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5\n    |\n@@ -48,6 +56,12 @@ error: &-masking with zero\n 35 |     0 & x == 0;\n    |     ^^^^^^^^^^\n \n+error: the operation is ineffective. Consider reducing it to `0`\n+  --> $DIR/bit_masks.rs:35:5\n+   |\n+35 |     0 & x == 0;\n+   |     ^^^^^\n+\n error: incompatible bit mask: `_ | 2` will always be higher than `1`\n   --> $DIR/bit_masks.rs:39:5\n    |"}, {"sha": "e5143146f2666b0bff6c5f5e8b852f4009936bcc", "filename": "tests/ui/erasing_op.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=033c99b1baaa87587132debafaa8d2d0ccb7dde8", "patch": "@@ -0,0 +1,12 @@\n+\n+\n+\n+#[allow(no_effect)]\n+#[warn(erasing_op)]\n+fn main() {\n+    let x: u8 = 0;\n+\n+    x * 0;\n+    0 & x;\n+    0 / x;\n+}"}, {"sha": "496c297ef2b478b58751d013aa60d6e4bed52271", "filename": "tests/ui/erasing_op.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033c99b1baaa87587132debafaa8d2d0ccb7dde8/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=033c99b1baaa87587132debafaa8d2d0ccb7dde8", "patch": "@@ -0,0 +1,20 @@\n+error: the operation is ineffective. Consider reducing it to `0`\n+ --> $DIR/erasing_op.rs:9:5\n+  |\n+9 |     x * 0;\n+  |     ^^^^^\n+  |\n+  = note: `-D erasing-op` implied by `-D warnings`\n+\n+error: the operation is ineffective. Consider reducing it to `0`\n+  --> $DIR/erasing_op.rs:10:5\n+   |\n+10 |     0 & x;\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `0`\n+  --> $DIR/erasing_op.rs:11:5\n+   |\n+11 |     0 / x;\n+   |     ^^^^^\n+"}]}