{"sha": "3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDdkM2RiZDZjZGIyMDE0MzY5OTM1YjYyYjM2YzY0ZDZjNTgwYTY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-10T09:47:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-17T11:46:50Z"}, "message": "On nightly with NLL, suggest `#![feature(bind_by_move_pattern_guards)]` when it might fix the code.", "tree": {"sha": "45c6fbe3a82b8efcd38f4bffa383eae0e8a68065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c6fbe3a82b8efcd38f4bffa383eae0e8a68065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "html_url": "https://github.com/rust-lang/rust/commit/3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50884c6157645d22d8fb1ee1beb2c1552d570c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50884c6157645d22d8fb1ee1beb2c1552d570c7", "html_url": "https://github.com/rust-lang/rust/commit/c50884c6157645d22d8fb1ee1beb2c1552d570c7"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "23667d1b331a3b1e8386e9d7a8ec00b7116ceb08", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "patch": "@@ -538,10 +538,14 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n         } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n-            struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                      \"cannot bind by-move into a pattern guard\")\n-                .span_label(p.span, \"moves value into pattern guard\")\n-                .emit();\n+            let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n+                                       \"cannot bind by-move into a pattern guard\");\n+            err.span_label(p.span, \"moves value into pattern guard\");\n+            if cx.tcx.sess.opts.unstable_features.is_nightly_build() && cx.tcx.use_mir_borrowck() {\n+                err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                          crate attributes to enable\");\n+            }\n+            err.emit();\n         } else if let Some(by_ref_span) = by_ref_span {\n             struct_span_err!(\n                 cx.tcx.sess,\n@@ -613,10 +617,16 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n               _: LoanCause) {\n         match kind {\n             ty::MutBorrow => {\n-                struct_span_err!(self.cx.tcx.sess, span, E0301,\n-                          \"cannot mutably borrow in a pattern guard\")\n-                    .span_label(span, \"borrowed mutably in pattern guard\")\n-                    .emit();\n+                let mut err = struct_span_err!(self.cx.tcx.sess, span, E0301,\n+                          \"cannot mutably borrow in a pattern guard\");\n+                err.span_label(span, \"borrowed mutably in pattern guard\");\n+                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() &&\n+                    self.cx.tcx.use_mir_borrowck()\n+                {\n+                    err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                              crate attributes to enable\");\n+                }\n+                err.emit();\n             }\n             ty::ImmBorrow | ty::UniqueImmBorrow => {}\n         }"}, {"sha": "5f8b7007f304c5468b746ded4904efa753fa52d4", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr?ref=3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "patch": "@@ -0,0 +1,11 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/bind-by-move-no-guards.rs:8:14\n+   |\n+LL |         Some(z) if z.recv().unwrap() => { panic!() },\n+   |              ^ moves value into pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "b363a78cbc206825a19594ed858ea858e843ee77", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "patch": "@@ -0,0 +1,24 @@\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:20:25\n+   |\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:22:38\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                      ^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error[E0302]: cannot assign in a pattern guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:22:41\n+   |\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0301, E0302.\n+For more information about an error, try `rustc --explain E0301`."}, {"sha": "ce627cb741a378c06078a84d9a793473f9dc1568", "filename": "src/test/ui/error-codes/E0008.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.nll.stderr?ref=3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "patch": "@@ -0,0 +1,11 @@\n+error[E0008]: cannot bind by-move into a pattern guard\n+  --> $DIR/E0008.rs:13:14\n+   |\n+LL |         Some(s) if s.len() == 0 => {},\n+   |              ^ moves value into pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0008`."}, {"sha": "f060eb9043535a398ea625d8b3e6e6ddb47fed30", "filename": "src/test/ui/error-codes/E0301.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a07d3dbd6cdb2014369935b62b36c64d6c580a6/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr?ref=3a07d3dbd6cdb2014369935b62b36c64d6c580a6", "patch": "@@ -0,0 +1,11 @@\n+error[E0301]: cannot mutably borrow in a pattern guard\n+  --> $DIR/E0301.rs:14:19\n+   |\n+LL |         option if option.take().is_none() => {}, //~ ERROR E0301\n+   |                   ^^^^^^ borrowed mutably in pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0301`."}]}