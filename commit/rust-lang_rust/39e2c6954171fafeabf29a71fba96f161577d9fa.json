{"sha": "39e2c6954171fafeabf29a71fba96f161577d9fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTJjNjk1NDE3MWZhZmVhYmYyOWE3MWZiYTk2ZjE2MTU3N2Q5ZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-06T21:57:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-06T22:11:09Z"}, "message": "syntax: Remove deprecated unicode escapes\n\nThese have been deprecated for quite some time, so we should be good to remove\nthem now.", "tree": {"sha": "5933b51e21c07337f30540cb0f4daa4567e42e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5933b51e21c07337f30540cb0f4daa4567e42e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e2c6954171fafeabf29a71fba96f161577d9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e2c6954171fafeabf29a71fba96f161577d9fa", "html_url": "https://github.com/rust-lang/rust/commit/39e2c6954171fafeabf29a71fba96f161577d9fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e2c6954171fafeabf29a71fba96f161577d9fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "html_url": "https://github.com/rust-lang/rust/commit/1fe8f221450bad3ffb1351c6549f67c18ce0b94e"}], "stats": {"total": 88, "additions": 24, "deletions": 64}, "files": [{"sha": "f5781e0587d245f7d5c6a404a9d634e97a414c3f", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -777,13 +777,6 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    fn old_escape_warning(&mut self, sp: Span) {\n-        self.span_diagnostic\n-            .span_warn(sp, \"\\\\U00ABCD12 and \\\\uABCD escapes are deprecated\");\n-        self.span_diagnostic\n-            .fileline_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n-    }\n-\n     /// Scan for a single (possibly escaped) byte or char\n     /// in a byte, (non-raw) byte string, char, or (non-raw) string literal.\n     /// `start` is the position of `first_source_char`, which is already consumed.\n@@ -803,21 +796,8 @@ impl<'a> StringReader<'a> {\n                         return match e {\n                             'n' | 'r' | 't' | '\\\\' | '\\'' | '\"' | '0' => true,\n                             'x' => self.scan_byte_escape(delim, !ascii_only),\n-                            'u' if !ascii_only => {\n-                                if self.curr == Some('{') {\n-                                    self.scan_unicode_escape(delim)\n-                                } else {\n-                                    let res = self.scan_hex_digits(4, delim, false);\n-                                    let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n-                                    self.old_escape_warning(sp);\n-                                    res\n-                                }\n-                            }\n-                            'U' if !ascii_only => {\n-                                let res = self.scan_hex_digits(8, delim, false);\n-                                let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n-                                self.old_escape_warning(sp);\n-                                res\n+                            'u' if self.curr_is('{') => {\n+                                self.scan_unicode_escape(delim)\n                             }\n                             '\\n' if delim == '\"' => {\n                                 self.consume_whitespace();"}, {"sha": "4aa01bcde69897b3423fc5b32ff32c269575039b", "filename": "src/test/parse-fail/lex-bad-char-literals.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -8,36 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static c: char =\n-    '\\u539_' //~ ERROR: illegal character in numeric character escape\n-    //~^ WARNING: \\uABCD escapes are deprecated\n-;\n-\n-static c2: char =\n-    '\\Uffffffff' //~ ERROR: illegal numeric character escape\n-    //~^ WARNING: \\uABCD escapes are deprecated\n-;\n-\n static c3: char =\n     '\\x1' //~ ERROR: numeric character escape is too short\n ;\n \n-static c4: char =\n-    '\\u23q' //~  ERROR: illegal character in numeric character escape\n-    //~^ WARNING: \\uABCD escapes are deprecated\n-;\n-//~^^^ ERROR: numeric character escape is too short\n-\n static s: &'static str =\n     \"\\x1\" //~ ERROR: numeric character escape is too short\n ;\n \n-static s2: &'static str =\n-    \"\\u23q\" //~ ERROR: illegal character in numeric character escape\n-    //~^ ERROR: numeric character escape is too short\n-    //~^^ WARNING: \\uABCD escapes are deprecated\n-;\n-\n static c: char =\n     '\\\u25cf' //~ ERROR: unknown character escape\n ;"}, {"sha": "a5d82277d2f94aaa66de840350b9d03503b57efd", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -105,10 +105,11 @@\n fn main() {\n     // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n-        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u0085', '\\u00A0', '\\u1680',\n-         '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006',\n-         '\\u2007', '\\u2008', '\\u2009', '\\u200A', '\\u2028', '\\u2029', '\\u202F',\n-         '\\u205F', '\\u3000'];\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n+         '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n+         '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n+         '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n+         '\\u{205F}', '\\u{3000}'];\n     for c in &chars {\n         let ws = c.is_whitespace();\n         println!(\"{} {}\" , c , ws);"}, {"sha": "eb6d2a4a0a17392851e3808808b65721053ac897", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -99,10 +99,11 @@ fn f() {\n fn main() {\n     // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n-        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u0085', '\\u00A0', '\\u1680',\n-         '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006',\n-         '\\u2007', '\\u2008', '\\u2009', '\\u200A', '\\u2028', '\\u2029', '\\u202F',\n-         '\\u205F', '\\u3000'];\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n+         '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n+         '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n+         '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n+         '\\u{205F}', '\\u{3000}'];\n     for c in &chars {\n         let ws = c.is_whitespace();\n         println!(\"{} {}\", c , ws);"}, {"sha": "4a14969209f027dbeb5d8128d7b549851ee57c9e", "filename": "src/test/run-pass/nul-characters.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Fnul-characters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Fnul-characters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnul-characters.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -10,10 +10,10 @@\n \n pub fn main()\n {\n-    let all_nuls1 = \"\\0\\x00\\u0000\\U00000000\";\n-    let all_nuls2 = \"\\U00000000\\u0000\\x00\\0\";\n-    let all_nuls3 = \"\\u0000\\U00000000\\x00\\0\";\n-    let all_nuls4 = \"\\x00\\u0000\\0\\U00000000\";\n+    let all_nuls1 = \"\\0\\x00\\u{0}\\u{0}\";\n+    let all_nuls2 = \"\\u{0}\\u{0}\\x00\\0\";\n+    let all_nuls3 = \"\\u{0}\\u{0}\\x00\\0\";\n+    let all_nuls4 = \"\\x00\\u{0}\\0\\u{0}\";\n \n     // sizes for two should suffice\n     assert_eq!(all_nuls1.len(), 4);\n@@ -35,8 +35,8 @@ pub fn main()\n \n     // testing equality between explicit character literals\n     assert_eq!('\\0', '\\x00');\n-    assert_eq!('\\u0000', '\\x00');\n-    assert_eq!('\\u0000', '\\U00000000');\n+    assert_eq!('\\u{0}', '\\x00');\n+    assert_eq!('\\u{0}', '\\u{0}');\n \n     // NUL characters should make a difference\n     assert!(\"Hello World\" != \"Hello \\0World\");"}, {"sha": "298ac8f77eb11dd6f5a4a63ea68920e34a5e7d61", "filename": "src/test/run-pass/raw-str.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Fraw-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Fraw-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-str.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa"}, {"sha": "4be54bd7080d2eab3aa7d837d6768fd2e6f9ff28", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n     assert_eq!(y_diaeresis as int, 0xff);\n     assert_eq!(pi as int, 0x3a0);\n \n-    assert_eq!(pi as int, '\\u03a0' as int);\n+    assert_eq!(pi as int, '\\u{3a0}' as int);\n     assert_eq!('\\x0a' as int, '\\n' as int);\n \n     let bhutan: String = \"\u0f60\u0f56\u0fb2\u0f74\u0f42\u0f0b\u0f61\u0f74\u0f63\u0f0d\".to_string();\n@@ -33,11 +33,11 @@ pub fn main() {\n     let austria: String = \"\u00d6sterreich\".to_string();\n \n     let bhutan_e: String =\n-        \"\\u0f60\\u0f56\\u0fb2\\u0f74\\u0f42\\u0f0b\\u0f61\\u0f74\\u0f63\\u0f0d\".to_string();\n-    let japan_e: String = \"\\u65e5\\u672c\".to_string();\n+        \"\\u{f60}\\u{f56}\\u{fb2}\\u{f74}\\u{f42}\\u{f0b}\\u{f61}\\u{f74}\\u{f63}\\u{f0d}\".to_string();\n+    let japan_e: String = \"\\u{65e5}\\u{672c}\".to_string();\n     let uzbekistan_e: String =\n-        \"\\u040e\\u0437\\u0431\\u0435\\u043a\\u0438\\u0441\\u0442\\u043e\\u043d\".to_string();\n-    let austria_e: String = \"\\u00d6sterreich\".to_string();\n+        \"\\u{40e}\\u{437}\\u{431}\\u{435}\\u{43a}\\u{438}\\u{441}\\u{442}\\u{43e}\\u{43d}\".to_string();\n+    let austria_e: String = \"\\u{d6}sterreich\".to_string();\n \n     let oo: char = '\u00d6';\n     assert_eq!(oo as int, 0xd6);"}, {"sha": "c54b3b69c688053d8a22cbb1b52b9ca29f35ae69", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2c6954171fafeabf29a71fba96f161577d9fa/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=39e2c6954171fafeabf29a71fba96f161577d9fa", "patch": "@@ -14,7 +14,7 @@ use std::str;\n \n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n-    let chs: Vec<char> = vec!('e', '\u00e9', '\u20ac', '\\U00010000');\n+    let chs: Vec<char> = vec!('e', '\u00e9', '\u20ac', '\\u{10000}');\n     let s: String = chs.iter().cloned().collect();\n     let schs: Vec<char> = s.chars().collect();\n "}]}