{"sha": "f38f0b2e1af79766d13a18b506158ac32b16ce04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOGYwYjJlMWFmNzk3NjZkMTNhMThiNTA2MTU4YWMzMmIxNmNlMDQ=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-17T13:02:26Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-17T13:02:26Z"}, "message": "doc: Backticks and spelling mistakes.", "tree": {"sha": "d11179ef637f55a902ff7cd0df319c1a0ffd7f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11179ef637f55a902ff7cd0df319c1a0ffd7f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38f0b2e1af79766d13a18b506158ac32b16ce04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38f0b2e1af79766d13a18b506158ac32b16ce04", "html_url": "https://github.com/rust-lang/rust/commit/f38f0b2e1af79766d13a18b506158ac32b16ce04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38f0b2e1af79766d13a18b506158ac32b16ce04/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d94d787a7c9b027a83445f1ca9c60d82e425243", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d94d787a7c9b027a83445f1ca9c60d82e425243", "html_url": "https://github.com/rust-lang/rust/commit/0d94d787a7c9b027a83445f1ca9c60d82e425243"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "c98a2d124854b77c5fd198acff8bac15b9640866", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38f0b2e1af79766d13a18b506158ac32b16ce04/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f0b2e1af79766d13a18b506158ac32b16ce04/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f38f0b2e1af79766d13a18b506158ac32b16ce04", "patch": "@@ -327,7 +327,7 @@ impl<T> Option<T> {\n     /// Instead, prefer to use pattern matching and handle the `None`\n     /// case explicitly.\n     ///\n-    /// # Examle\n+    /// # Example\n     ///\n     /// ```\n     /// let x = Some(\"air\");"}, {"sha": "514035f04e08413dc62ff037e3cd36683ddaf94d", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f38f0b2e1af79766d13a18b506158ac32b16ce04/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f0b2e1af79766d13a18b506158ac32b16ce04/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f38f0b2e1af79766d13a18b506158ac32b16ce04", "patch": "@@ -253,7 +253,7 @@ pub struct Substructure<'a> {\n     pub type_ident: Ident,\n     /// ident of the method\n     pub method_ident: Ident,\n-    /// dereferenced access to any Self or Ptr(Self, _) arguments\n+    /// dereferenced access to any `Self` or `Ptr(Self, _)` arguments\n     pub self_args: &'a [P<Expr>],\n     /// verbatim access to any other arguments\n     pub nonself_args: &'a [P<Expr>],\n@@ -270,7 +270,7 @@ pub struct FieldInfo {\n     /// (specifically, a reference to it).\n     pub self_: P<Expr>,\n     /// The expressions corresponding to references to this field in\n-    /// the other Self arguments.\n+    /// the other `Self` arguments.\n     pub other: Vec<P<Expr>>,\n }\n \n@@ -291,17 +291,17 @@ pub enum SubstructureFields<'a> {\n     /// variant.\n     EnumMatching(uint, &'a ast::Variant, Vec<FieldInfo>),\n \n-    /// non-matching variants of the enum, but with all state hidden from\n-    /// the consequent code.  The first component holds Idents for all of\n-    /// the Self arguments; the second component is a slice of all of the\n+    /// Non-matching variants of the enum, but with all state hidden from\n+    /// the consequent code.  The first component holds `Ident`s for all of\n+    /// the `Self` arguments; the second component is a slice of all of the\n     /// variants for the enum itself, and the third component is a list of\n-    /// Idents bound to the variant index values for each of the actual\n-    /// input Self arguments.\n+    /// `Ident`s bound to the variant index values for each of the actual\n+    /// input `Self` arguments.\n     EnumNonMatchingCollapsed(Vec<Ident>, &'a [P<ast::Variant>], &'a [Ident]),\n \n-    /// A static method where Self is a struct.\n+    /// A static method where `Self` is a struct.\n     StaticStruct(&'a ast::StructDef, StaticFields),\n-    /// A static method where Self is an enum.\n+    /// A static method where `Self` is an enum.\n     StaticEnum(&'a ast::EnumDef, Vec<(Ident, Span, StaticFields)>),\n }\n \n@@ -313,10 +313,10 @@ pub type CombineSubstructureFunc<'a> =\n     |&mut ExtCtxt, Span, &Substructure|: 'a -> P<Expr>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n-/// identifiers (one for each Self argument, which could be any of the\n+/// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n-/// holding the variant index value for each of the Self arguments.  The\n-/// last argument is all the non-Self args of the method being derived.\n+/// holding the variant index value for each of the `Self` arguments.  The\n+/// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n     |&mut ExtCtxt,\n      Span,\n@@ -370,7 +370,7 @@ impl<'a> TraitDef<'a> {\n     /// 'z, A, ..., Z>`, creates an impl like:\n     ///\n     /// ```ignore\n-    ///      impl<'a, ..., 'z, A:Tr B1 B2, ..., Z: Tr B1 B2> Tr for T<A, ..., Z> { ... }\n+    /// impl<'a, ..., 'z, A:Tr B1 B2, ..., Z: Tr B1 B2> Tr for T<A, ..., Z> { ... }\n     /// ```\n     ///\n     /// where B1, B2, ... are the bounds given by `bounds_paths`.'"}]}