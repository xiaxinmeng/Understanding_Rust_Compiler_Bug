{"sha": "83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTIxMDkzNWRjZGRiMjBkMmRiYWFjZDlkYjZlMDViZDliZDZiY2E=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2018-04-01T14:32:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-01T14:32:44Z"}, "message": "Merge pull request #2606 from phansch/improve_contributing_instructions\n\nImprove CONTRIBUTING.md", "tree": {"sha": "99239ca50303ae573f89f45f8c9896400da0293e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99239ca50303ae573f89f45f8c9896400da0293e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawO2MCRBK7hj4Ov3rIwAAdHIIADb0+u5dduYvauDEsKvN76DO\nsnogJK5Amr3PEPY1mdquvwCwcFIomuaN3dL7mP3yxbViHXY+WxhuscTObr4/sofi\nnqUQtSqvtUW7Plf9HVcVWTznL/2I92IBbdqvgbWi6Xme67I8EWxDOLawv8iDIg9L\nSG2UtLSQNZ5/gwDRdhRST93kaGOBQlJ7Cecvkd/3oOHW0KNMazUsg32/N/X/cjxW\neWFt0KLa47tF9AkbzWVERm89SEDI6FOM9GfUprmsItb9zenMmNzeGBriTdZDLmvV\n4PbQhPxML292w8a+h6r2ht4KYpN8oy/EJAmPnEmoc+BcMs08yojSes4hm2TQlJQ=\n=pZvF\n-----END PGP SIGNATURE-----\n", "payload": "tree 99239ca50303ae573f89f45f8c9896400da0293e\nparent 4ef7238b3e6b45596a32eb669a07d85d83ff0f1c\nparent 872db029cf8e85ec130af0ba9bf851ee347c3b14\nauthor Martin Carton <cartonmartin+github@gmail.com> 1522593164 +0200\ncommitter GitHub <noreply@github.com> 1522593164 +0200\n\nMerge pull request #2606 from phansch/improve_contributing_instructions\n\nImprove CONTRIBUTING.md"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "html_url": "https://github.com/rust-lang/rust/commit/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ef7238b3e6b45596a32eb669a07d85d83ff0f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef7238b3e6b45596a32eb669a07d85d83ff0f1c", "html_url": "https://github.com/rust-lang/rust/commit/4ef7238b3e6b45596a32eb669a07d85d83ff0f1c"}, {"sha": "872db029cf8e85ec130af0ba9bf851ee347c3b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/872db029cf8e85ec130af0ba9bf851ee347c3b14", "html_url": "https://github.com/rust-lang/rust/commit/872db029cf8e85ec130af0ba9bf851ee347c3b14"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "ebdb88a3ba9d60d22ce55d4fa1b71ceeda234716", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "patch": "@@ -15,41 +15,41 @@ High level approach:\n \n All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n \n-Some issues are easier than others. The [good first issue](https://github.com/rust-lang-nursery/rust-clippy/labels/good%20first%20issue)\n+Some issues are easier than others. The [`good first issue`](https://github.com/rust-lang-nursery/rust-clippy/labels/good%20first%20issue)\n label can be used to find the easy issues. If you want to work on an issue, please leave a comment\n so that we can assign it to you!\n \n-Issues marked [T-AST](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) involve simple\n+Issues marked [`T-AST`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) involve simple\n matching of the syntax tree structure, and are generally easier than\n-[T-middle](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues, which involve types\n+[`T-middle`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues, which involve types\n and resolved paths.\n \n-Issues marked [E-medium](https://github.com/rust-lang-nursery/rust-clippy/labels/E-medium) are generally\n-pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n-as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n-\n-[Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n-to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n-`LintPass` with one or more of its default methods overridden. See the existing lints for examples\n-of this.\n-\n-T-AST issues will generally need you to match against a predefined syntax structure. To figure out\n+[`T-AST`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) issues will generally need you to match against a predefined syntax structure. To figure out\n how this syntax structure is encoded in the AST, it is recommended to run `rustc -Z ast-json` on an\n example of the structure and compare with the\n [nodes in the AST docs](http://manishearth.github.io/rust-internals-docs/syntax/ast/). Usually\n the lint will end up to be a nested series of matches and ifs,\n [like so](https://github.com/rust-lang-nursery/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n \n-T-middle issues can be more involved and require verifying types. The\n+[`E-medium`](https://github.com/rust-lang-nursery/rust-clippy/labels/E-medium) issues are generally\n+pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n+as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n+\n+[`T-middle`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues can\n+be more involved and require verifying types. The\n [`ty`](http://manishearth.github.io/rust-internals-docs/rustc/ty) module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n ### Writing code\n \n-Compiling clippy can take almost a minute or more depending on your machine.\n-You can set the environment flag `CARGO_INCREMENTAL=1` to cut down that time to\n-almost a third on average, depending on the influence your change has.\n+Compiling clippy from scratch can take almost a minute or more depending on your machine.\n+However, since Rust 1.24.0 incremental compilation is enabled by default and compile times for small changes should be quick.\n+\n+[Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n+to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n+`LintPass` with one or more of its default methods overridden. See the existing lints for examples\n+of this.\n \n Please document your lint with a doc comment akin to the following:\n \n@@ -61,8 +61,13 @@ Please document your lint with a doc comment akin to the following:\n /// **Known problems:** None. (Or describe where it could go wrong.)\n ///\n /// **Example:**\n+///\n /// ```rust\n-/// Insert a short example if you have one.\n+/// // Bad\n+/// Insert a short example of code that triggers the lint\n+///\n+/// // Good\n+/// Insert a short example of improved code that doesn't trigger the lint\n /// ```\n ```\n \n@@ -80,12 +85,6 @@ If you don't want to wait for all tests to finish, you can also execute a single\n TESTNAME=ui/empty_line_after_outer_attr cargo test --test compile-test\n ```\n \n-And you can also combine this with `CARGO_INCREMENTAL`:\n-\n-```bash\n-CARGO_INCREMENTAL=1 TESTNAME=ui/doc cargo test --test compile-test\n-```\n-\n ### Testing manually\n \n Manually testing against an example file is useful if you have added some"}]}