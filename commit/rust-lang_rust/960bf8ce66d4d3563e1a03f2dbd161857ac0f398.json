{"sha": "960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MGJmOGNlNjZkNGQzNTYzZTFhMDNmMmRiZDE2MTg1N2FjMGYzOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-22T01:41:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-22T01:41:35Z"}, "message": "auto merge of #13435 : edwardw/rust/span, r=brson\n\nWhen reporting \"consider removing this semicolon\" hint message, the\r\noffending semicolon may come from macro call site instead of macro\r\nitself. Using the more appropriate span makes the hint more helpful.\r\n\r\nCloses #13428.", "tree": {"sha": "e9eefbc907ed99f606d7a99a9fe581862d3c318c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9eefbc907ed99f606d7a99a9fe581862d3c318c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "html_url": "https://github.com/rust-lang/rust/commit/960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4401f88688eec9052f292ce3b3b8cb96da2853f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4401f88688eec9052f292ce3b3b8cb96da2853f2", "html_url": "https://github.com/rust-lang/rust/commit/4401f88688eec9052f292ce3b3b8cb96da2853f2"}, {"sha": "cc5be28b322498f9c7c802cfa825e9f95363243d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5be28b322498f9c7c802cfa825e9f95363243d", "html_url": "https://github.com/rust-lang/rust/commit/cc5be28b322498f9c7c802cfa825e9f95363243d"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "a13b6001495bb554acfde3a285d32cc4050f3410", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "patch": "@@ -117,7 +117,7 @@ use std::rc::Rc;\n use std::str;\n use std::uint;\n use syntax::ast::*;\n-use syntax::codemap::Span;\n+use syntax::codemap::{BytePos, original_sp, Span};\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::print::pprust::{expr_to_str, block_to_str};\n@@ -1473,10 +1473,11 @@ impl<'a> Liveness<'a> {\n                 };\n                 if ends_with_stmt {\n                     let last_stmt = body.stmts.last().unwrap();\n+                    let original_span = original_sp(last_stmt.span, sp);\n                     let span_semicolon = Span {\n-                        lo: last_stmt.span.hi,\n-                        hi: last_stmt.span.hi,\n-                        expn_info: last_stmt.span.expn_info\n+                        lo: original_span.hi - BytePos(1),\n+                        hi: original_span.hi,\n+                        expn_info: original_span.expn_info\n                     };\n                     self.ir.tcx.sess.span_note(\n                         span_semicolon, \"consider removing this semicolon:\");"}, {"sha": "b4730ace56d8ec4f672817ec2f7807dac8f11c62", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "patch": "@@ -141,6 +141,17 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n     Span {lo: lo, hi: hi, expn_info: None}\n }\n \n+/// Return the span itself if it doesn't come from a macro expansion,\n+/// otherwise return the call site span up to the `enclosing_sp` by\n+/// following the `expn_info` chain.\n+pub fn original_sp(sp: Span, enclosing_sp: Span) -> Span {\n+    match (sp.expn_info, enclosing_sp.expn_info) {\n+        (None, _) => sp,\n+        (Some(expn1), Some(expn2)) if expn1.call_site == expn2.call_site => sp,\n+        (Some(expn1), _) => original_sp(expn1.call_site, enclosing_sp),\n+    }\n+}\n+\n /// A source code location used for error reporting\n pub struct Loc {\n     /// Information about the original source"}, {"sha": "122cc37dfb66a5efc6ec5edfac8177859e0fdd90", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "patch": "@@ -686,7 +686,7 @@ mod test {\n                                                       }),\n                                                 span: sp(17,18)},\n                                                 ast::DUMMY_NODE_ID),\n-                                            span: sp(17,18)}),\n+                                            span: sp(17,19)}),\n                                         expr: None,\n                                         id: ast::DUMMY_NODE_ID,\n                                         rules: ast::DefaultBlock, // no idea"}, {"sha": "6485b5a3622c9db9683bcceba305fe8711830b03", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "patch": "@@ -3260,9 +3260,14 @@ impl<'a> Parser<'a> {\n                             match self.token {\n                                 token::SEMI => {\n                                     self.bump();\n+                                    let span_with_semi = Span {\n+                                        lo: stmt.span.lo,\n+                                        hi: self.last_span.hi,\n+                                        expn_info: stmt.span.expn_info,\n+                                    };\n                                     stmts.push(@codemap::Spanned {\n                                         node: StmtSemi(e, stmt_id),\n-                                        span: stmt.span,\n+                                        span: span_with_semi,\n                                     });\n                                 }\n                                 token::RBRACE => {\n@@ -3275,33 +3280,26 @@ impl<'a> Parser<'a> {\n                         }\n                         StmtMac(ref m, _) => {\n                             // statement macro; might be an expr\n-                            let has_semi;\n                             match self.token {\n                                 token::SEMI => {\n-                                    has_semi = true;\n+                                    self.bump();\n+                                    stmts.push(@codemap::Spanned {\n+                                        node: StmtMac((*m).clone(), true),\n+                                        span: stmt.span,\n+                                    });\n                                 }\n                                 token::RBRACE => {\n                                     // if a block ends in `m!(arg)` without\n                                     // a `;`, it must be an expr\n-                                    has_semi = false;\n                                     expr = Some(\n                                         self.mk_mac_expr(stmt.span.lo,\n                                                          stmt.span.hi,\n                                                          m.node.clone()));\n                                 }\n                                 _ => {\n-                                    has_semi = false;\n                                     stmts.push(stmt);\n                                 }\n                             }\n-\n-                            if has_semi {\n-                                self.bump();\n-                                stmts.push(@codemap::Spanned {\n-                                    node: StmtMac((*m).clone(), true),\n-                                    span: stmt.span,\n-                                });\n-                            }\n                         }\n                         _ => { // all other kinds of statements:\n                             stmts.push(stmt);"}, {"sha": "7e24d909237bb0a8566322e676823c517ab7e7cf", "filename": "src/test/compile-fail/issue-13428.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960bf8ce66d4d3563e1a03f2dbd161857ac0f398/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs?ref=960bf8ce66d4d3563e1a03f2dbd161857ac0f398", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #13428\n+\n+fn foo() -> ~str {  //~ ERROR not all control paths return a value\n+    format!(\"Hello {}\",\n+            \"world\")\n+    // Put the trailing semicolon on its own line to test that the\n+    // note message gets the offending semicolon exactly\n+    ;   //~ NOTE consider removing this semicolon\n+}\n+\n+fn bar() -> ~str {  //~ ERROR not all control paths return a value\n+    \"foobar\".to_owned()\n+    ;   //~ NOTE consider removing this semicolon\n+}\n+\n+pub fn main() {}"}]}