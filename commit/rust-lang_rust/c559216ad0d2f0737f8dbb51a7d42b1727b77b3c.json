{"sha": "c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTkyMTZhZDBkMmYwNzM3ZjhkYmI1MWE3ZDQyYjE3MjdiNzdiM2M=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-11-30T05:09:12Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-12-06T15:07:15Z"}, "message": "Change sys::Thread::new to take the thread entry as Box<dyn FnBox() + 'static>\u0323", "tree": {"sha": "61eff11ff6e504d1f5a23ea975c233a3b447853e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61eff11ff6e504d1f5a23ea975c233a3b447853e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "html_url": "https://github.com/rust-lang/rust/commit/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/comments", "author": null, "committer": null, "parents": [{"sha": "6c0364064604d1a3a7755339e7ea81bbea53c005", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0364064604d1a3a7755339e7ea81bbea53c005", "html_url": "https://github.com/rust-lang/rust/commit/6c0364064604d1a3a7755339e7ea81bbea53c005"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "a76e1fa3345cdbc5c231622814e5b5ff494823a8", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -32,7 +32,8 @@ unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>) -> io::Result<Thread> {\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();\n         let mut attr: libc::pthread_attr_t = mem::zeroed();"}, {"sha": "ff86180538283c4ed092535a9f800a240837dcc4", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -28,7 +28,8 @@ unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n impl Thread {\n-    pub unsafe fn new<'a>(_stack: usize, p: Box<dyn FnBox() + 'a>) -> io::Result<Thread> {\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(_stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n         let p = box p;\n \n         let id = cvt(syscall::clone(syscall::CLONE_VM | syscall::CLONE_FS | syscall::CLONE_FILES))?;"}, {"sha": "4ff060018ae330a5d99f51abc968ed7f934aacbd", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -49,7 +49,8 @@ unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n }\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();"}, {"sha": "3d74ffdc14a596befac7ac8a9a862581267a8929", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -19,7 +19,8 @@ pub struct Thread(Void);\n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n-    pub unsafe fn new<'a>(_stack: usize, _p: Box<dyn FnBox() + 'a>)\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "1a97dd10ced8d2c284b299b84a8f5c3caa236c17", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -28,7 +28,8 @@ pub struct Thread {\n }\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n "}, {"sha": "d15b49024121b9d1f618034d3aa93a1215668efe", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c559216ad0d2f0737f8dbb51a7d42b1727b77b3c/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c559216ad0d2f0737f8dbb51a7d42b1727b77b3c", "patch": "@@ -167,10 +167,12 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use any::Any;\n+use boxed::FnBox;\n use cell::UnsafeCell;\n use ffi::{CStr, CString};\n use fmt;\n use io;\n+use mem;\n use panic;\n use panicking;\n use str;\n@@ -452,8 +454,8 @@ impl Builder {\n     /// [`io::Result`]: ../../std/io/type.Result.html\n     /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"55132\")]\n-    pub unsafe fn spawn_unchecked<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n-        F: FnOnce() -> T, F: Send, T: Send\n+    pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n+        F: FnOnce() -> T, F: Send + 'a, T: Send + 'a\n     {\n         let Builder { name, stack_size } = self;\n \n@@ -482,7 +484,21 @@ impl Builder {\n         };\n \n         Ok(JoinHandle(JoinInner {\n-            native: Some(imp::Thread::new(stack_size, Box::new(main))?),\n+            // `imp::Thread::new` takes a closure with a `'static` lifetime, since it's passed\n+            // through FFI or otherwise used with low-level threading primitives that have no\n+            // notion of or way to enforce lifetimes.\n+            //\n+            // As mentioned in the `Safety` section of this function's documentation, the caller of\n+            // this function needs to guarantee that the passed-in lifetime is sufficiently long\n+            // for the lifetime of the thread.\n+            //\n+            // Similarly, the `sys` implementation must guarantee that no references to the closure\n+            // exist after the thread has terminated, which is signaled by `Thread::join`\n+            // returning.\n+            native: Some(imp::Thread::new(\n+                stack_size,\n+                mem::transmute::<Box<dyn FnBox() + 'a>, Box<dyn FnBox() + 'static>>(Box::new(main))\n+            )?),\n             thread: my_thread,\n             packet: Packet(my_packet),\n         }))"}]}