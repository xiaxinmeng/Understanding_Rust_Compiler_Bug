{"sha": "7cd14d2f561a61e9838546f133afcf06038d761b", "node_id": "C_kwDOAAsO6NoAKDdjZDE0ZDJmNTYxYTYxZTk4Mzg1NDZmMTMzYWZjZjA2MDM4ZDc2MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T15:36:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T15:36:12Z"}, "message": "Auto merge of #93312 - pierwill:map-all-local-trait-impls, r=cjgillot\n\nReturn an indexmap in `all_local_trait_impls` query\n\nThe data structure previously used here required that `DefId` be `Ord`. As part of #90317, we do not want `DefId` to implement `Ord`.", "tree": {"sha": "114d7089a5393c7dd9c7a8c28101604bfa5e6196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114d7089a5393c7dd9c7a8c28101604bfa5e6196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd14d2f561a61e9838546f133afcf06038d761b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd14d2f561a61e9838546f133afcf06038d761b", "html_url": "https://github.com/rust-lang/rust/commit/7cd14d2f561a61e9838546f133afcf06038d761b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd14d2f561a61e9838546f133afcf06038d761b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "html_url": "https://github.com/rust-lang/rust/commit/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b"}, {"sha": "f5fe6cd27748d519f8c0751b62bc008595736733", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fe6cd27748d519f8c0751b62bc008595736733", "html_url": "https://github.com/rust-lang/rust/commit/f5fe6cd27748d519f8c0751b62bc008595736733"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "2e7dfb73c2cf4a3914c8e69be57c5f70ef457500", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7cd14d2f561a61e9838546f133afcf06038d761b", "patch": "@@ -1100,7 +1100,7 @@ rustc_queries! {\n     }\n \n     /// Return all `impl` blocks in the current crate.\n-    query all_local_trait_impls(_: ()) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n+    query all_local_trait_impls(_: ()) -> &'tcx rustc_data_structures::fx::FxIndexMap<DefId, Vec<LocalDefId>> {\n         desc { \"local trait impls\" }\n     }\n "}, {"sha": "8eb2793cc34e3b7fe6f636d6a64af2ed2897c6f4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7cd14d2f561a61e9838546f133afcf06038d761b", "patch": "@@ -28,7 +28,7 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::Discr;\n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n@@ -43,7 +43,6 @@ use rustc_span::{sym, Span};\n use rustc_target::abi::Align;\n \n use std::cmp::Ordering;\n-use std::collections::BTreeMap;\n use std::hash::{Hash, Hasher};\n use std::ops::ControlFlow;\n use std::{fmt, ptr, str};\n@@ -136,7 +135,7 @@ pub struct ResolverOutputs {\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,\n     pub main_def: Option<MainDefinition>,\n-    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n+    pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,\n     /// A list of proc macro LocalDefIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<LocalDefId>,"}, {"sha": "040e642b7b6d6f102a7467b4748b8ff0935ca0fe", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=7cd14d2f561a61e9838546f133afcf06038d761b", "patch": "@@ -56,7 +56,6 @@ use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n-use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;"}, {"sha": "28f06ed3a261424f7ac2b71d786428f9ec6c0070", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd14d2f561a61e9838546f133afcf06038d761b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=7cd14d2f561a61e9838546f133afcf06038d761b", "patch": "@@ -68,7 +68,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n-use std::collections::{BTreeMap, BTreeSet};\n+use std::collections::BTreeSet;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter, mem, ptr};\n use tracing::debug;\n@@ -1061,7 +1061,7 @@ pub struct Resolver<'a> {\n     item_generics_num_lifetimes: FxHashMap<LocalDefId, usize>,\n \n     main_def: Option<MainDefinition>,\n-    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n+    trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,\n     /// A list of proc macro LocalDefIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     proc_macros: Vec<NodeId>,"}]}