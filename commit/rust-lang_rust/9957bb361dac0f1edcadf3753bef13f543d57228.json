{"sha": "9957bb361dac0f1edcadf3753bef13f543d57228", "node_id": "C_kwDOAAsO6NoAKDk5NTdiYjM2MWRhYzBmMWVkY2FkZjM3NTNiZWYxM2Y1NDNkNTcyMjg", "commit": {"author": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-24T20:09:16Z"}, "committer": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-27T17:08:20Z"}, "message": "Add const generics to doctest names for structt", "tree": {"sha": "f7cf853ef5c14ec84f842aa2e95f91a6144de492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cf853ef5c14ec84f842aa2e95f91a6144de492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9957bb361dac0f1edcadf3753bef13f543d57228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9957bb361dac0f1edcadf3753bef13f543d57228", "html_url": "https://github.com/rust-lang/rust/commit/9957bb361dac0f1edcadf3753bef13f543d57228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9957bb361dac0f1edcadf3753bef13f543d57228/comments", "author": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc75c4c28eff4664979905a7b75b890b3f84437", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc75c4c28eff4664979905a7b75b890b3f84437", "html_url": "https://github.com/rust-lang/rust/commit/8bc75c4c28eff4664979905a7b75b890b3f84437"}], "stats": {"total": 143, "additions": 141, "deletions": 2}, "files": [{"sha": "369f9192d15c0915f36cd866d9f86e2126b7b193", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9957bb361dac0f1edcadf3753bef13f543d57228/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9957bb361dac0f1edcadf3753bef13f543d57228/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9957bb361dac0f1edcadf3753bef13f543d57228", "patch": "@@ -42,7 +42,7 @@ use hir_def::{\n     adt::VariantData,\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, ExprOrPatId, LabelId, Pat, PatId},\n-    generics::{LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n+    generics::{ConstParamData, LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n@@ -1189,6 +1189,31 @@ impl Adt {\n             .map(|arena| arena.1.clone())\n     }\n \n+    /// Returns an iterator of all `const` generic paramaters\n+    ///\n+    /// This method is not well optimized, I could not statisfy the borrow\n+    /// checker. I'm sure there are smarter ways to return the consts names\n+    pub fn consts(&self, db: &dyn HirDatabase) -> impl Iterator<Item = ConstParamData> {\n+        let resolver = match self {\n+            Adt::Struct(s) => s.id.resolver(db.upcast()),\n+            Adt::Union(u) => u.id.resolver(db.upcast()),\n+            Adt::Enum(e) => e.id.resolver(db.upcast()),\n+        };\n+        resolver\n+            .generic_params()\n+            .map_or(vec![], |gp| {\n+                gp.as_ref()\n+                    .type_or_consts\n+                    .iter()\n+                    .filter_map(|arena| match arena.1 {\n+                        TypeOrConstParamData::ConstParamData(consts) => Some(consts.clone()),\n+                        _ => None,\n+                    })\n+                    .collect::<Vec<ConstParamData>>()\n+            })\n+            .into_iter()\n+    }\n+\n     pub fn as_enum(&self) -> Option<Enum> {\n         if let Self::Enum(v) = self {\n             Some(*v)\n@@ -3358,15 +3383,21 @@ impl Type {\n             .map(move |ty| self.derived(ty))\n     }\n \n-    /// Combines lifetime indicators and type arguments into a single `Iterator`\n+    /// Combines lifetime indicators, type and constant parameters into a single `Iterator`\n     pub fn lifetime_and_type_arguments<'a>(\n         &'a self,\n         db: &'a dyn HirDatabase,\n     ) -> impl Iterator<Item = SmolStr> + 'a {\n+        // iterate the lifetime\n         self.as_adt()\n             .and_then(|a| a.lifetime(db).and_then(|lt| Some((&lt.name).to_smol_str())))\n             .into_iter()\n+            // add the type paramaters\n             .chain(self.type_arguments().map(|ty| SmolStr::new(ty.display(db).to_string())))\n+            // add const paramameters\n+            .chain(self.as_adt().map_or(vec![], |a| {\n+                a.consts(db).map(|cs| cs.name.to_smol_str()).collect::<Vec<SmolStr>>()\n+            }))\n     }\n \n     pub fn iterate_method_candidates_with_traits<T>("}, {"sha": "7af969c5d096f8c6400a47cce106ec572613304e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/9957bb361dac0f1edcadf3753bef13f543d57228/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9957bb361dac0f1edcadf3753bef13f543d57228/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=9957bb361dac0f1edcadf3753bef13f543d57228", "patch": "@@ -1102,6 +1102,114 @@ impl<T, U> Data<'a, T, U> {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_const() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<const N: usize>;\n+impl<const N: usize> Data<N> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 79..133,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<N>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_types_and_const() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, T, const N: usize>;\n+impl<'a, T, const N: usize> Data<'a, T, N> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 100..154,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,T,N>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n     #[test]\n     fn test_runnables_module() {\n         check("}]}