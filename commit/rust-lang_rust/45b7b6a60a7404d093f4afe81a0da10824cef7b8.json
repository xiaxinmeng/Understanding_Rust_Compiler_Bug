{"sha": "45b7b6a60a7404d093f4afe81a0da10824cef7b8", "node_id": "C_kwDOAAsO6NoAKDQ1YjdiNmE2MGE3NDA0ZDA5M2Y0YWZlODFhMGRhMTA4MjRjZWY3Yjg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-19T06:52:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-19T06:54:53Z"}, "message": "Implement lsp extension for cancelling running flychecks", "tree": {"sha": "5c8e63d7611468d98a1965da9483e8f7289f3903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8e63d7611468d98a1965da9483e8f7289f3903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b7b6a60a7404d093f4afe81a0da10824cef7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b7b6a60a7404d093f4afe81a0da10824cef7b8", "html_url": "https://github.com/rust-lang/rust/commit/45b7b6a60a7404d093f4afe81a0da10824cef7b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b7b6a60a7404d093f4afe81a0da10824cef7b8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917bd68b37de4e60e7203061a0a9c23b74d2b5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/917bd68b37de4e60e7203061a0a9c23b74d2b5c2", "html_url": "https://github.com/rust-lang/rust/commit/917bd68b37de4e60e7203061a0a9c23b74d2b5c2"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "c22945c81fcb93b1971721c6d5f6446cf950142c", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -77,8 +77,13 @@ impl FlycheckHandle {\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n-    pub fn update(&self) {\n-        self.sender.send(Restart).unwrap();\n+    pub fn restart(&self) {\n+        self.sender.send(Restart::Yes).unwrap();\n+    }\n+\n+    /// Stop this cargo check worker.\n+    pub fn cancel(&self) {\n+        self.sender.send(Restart::No).unwrap();\n     }\n \n     pub fn id(&self) -> usize {\n@@ -122,7 +127,10 @@ pub enum Progress {\n     DidCancel,\n }\n \n-struct Restart;\n+enum Restart {\n+    Yes,\n+    No,\n+}\n \n struct FlycheckActor {\n     id: usize,\n@@ -149,6 +157,7 @@ impl FlycheckActor {\n         config: FlycheckConfig,\n         workspace_root: AbsPathBuf,\n     ) -> FlycheckActor {\n+        tracing::info!(%id, ?workspace_root, \"Spawning flycheck\");\n         FlycheckActor { id, sender, config, workspace_root, cargo_handle: None }\n     }\n     fn progress(&self, progress: Progress) {\n@@ -164,10 +173,13 @@ impl FlycheckActor {\n     fn run(mut self, inbox: Receiver<Restart>) {\n         while let Some(event) = self.next_event(&inbox) {\n             match event {\n-                Event::Restart(Restart) => {\n+                Event::Restart(Restart::No) => {\n+                    self.cancel_check_process();\n+                }\n+                Event::Restart(Restart::Yes) => {\n                     // Cancel the previously spawned process\n                     self.cancel_check_process();\n-                    while let Ok(Restart) = inbox.recv_timeout(Duration::from_millis(50)) {}\n+                    while let Ok(_) = inbox.recv_timeout(Duration::from_millis(50)) {}\n \n                     let command = self.check_command();\n                     tracing::debug!(?command, \"will restart flycheck\");\n@@ -223,6 +235,10 @@ impl FlycheckActor {\n \n     fn cancel_check_process(&mut self) {\n         if let Some(cargo_handle) = self.cargo_handle.take() {\n+            tracing::debug!(\n+                command = ?self.check_command(),\n+                \"did  cancel flycheck\"\n+            );\n             cargo_handle.cancel();\n             self.progress(Progress::DidCancel);\n         }"}, {"sha": "fdb3205b0a9563e64e7d0660b65db6f3e6649885", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -51,6 +51,12 @@ pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<\n     Ok(())\n }\n \n+pub(crate) fn handle_cancel_flycheck(state: &mut GlobalState, _: ()) -> Result<()> {\n+    let _p = profile::span(\"handle_stop_flycheck\");\n+    state.flycheck.iter().for_each(|flycheck| flycheck.cancel());\n+    Ok(())\n+}\n+\n pub(crate) fn handle_analyzer_status(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::AnalyzerStatusParams,"}, {"sha": "e61c8b643d2dee940af7ae4fdcad4c7974d3583b", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -129,6 +129,14 @@ pub struct ExpandedMacro {\n     pub expansion: String,\n }\n \n+pub enum CancelFlycheck {}\n+\n+impl Request for CancelFlycheck {\n+    type Params = ();\n+    type Result = ();\n+    const METHOD: &'static str = \"rust-analyzer/cancelFlycheck\";\n+}\n+\n pub enum MatchingBrace {}\n \n impl Request for MatchingBrace {"}, {"sha": "f187547019a13524416a7676c72c30e85fa748b9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -288,7 +288,7 @@ impl GlobalState {\n \n             if became_quiescent {\n                 // Project has loaded properly, kick off initial flycheck\n-                self.flycheck.iter().for_each(FlycheckHandle::update);\n+                self.flycheck.iter().for_each(FlycheckHandle::restart);\n                 if self.config.prefill_caches() {\n                     self.prime_caches_queue.request_op(\"became quiescent\".to_string());\n                 }\n@@ -590,6 +590,7 @@ impl GlobalState {\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n+            .on_sync_mut::<lsp_ext::CancelFlycheck>(handlers::handle_cancel_flycheck)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n             .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)\n@@ -779,7 +780,7 @@ impl GlobalState {\n                             for (id, _) in workspace_ids.clone() {\n                                 if id == flycheck.id() {\n                                     updated = true;\n-                                    flycheck.update();\n+                                    flycheck.restart();\n                                     continue;\n                                 }\n                             }\n@@ -798,7 +799,7 @@ impl GlobalState {\n                 // No specific flycheck was triggered, so let's trigger all of them.\n                 if !updated {\n                     for flycheck in &this.flycheck {\n-                        flycheck.update();\n+                        flycheck.restart();\n                     }\n                 }\n                 Ok(())"}, {"sha": "6d2c7d7b06349aa0ac63493351107cfe350303dc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 2a188defec26cc7c\n+lsp_ext.rs hash: 7b710095d773b978\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "2e38c0573025e6af7305724c855ab9de1ea07995", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -235,6 +235,11 @@\n                 \"command\": \"rust-analyzer.moveItemDown\",\n                 \"title\": \"Move item down\",\n                 \"category\": \"rust-analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.cancelFlycheck\",\n+                \"title\": \"Cancel running flychecks\",\n+                \"category\": \"rust-analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "a21b304bbdaa0d92242924779cdc99ee995b4e27", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -817,6 +817,12 @@ export function openDocs(ctx: Ctx): Cmd {\n     };\n }\n \n+export function cancelFlycheck(ctx: Ctx): Cmd {\n+    return async () => {\n+        await ctx.client.sendRequest(ra.cancelFlycheck);\n+    };\n+}\n+\n export function resolveCodeAction(ctx: Ctx): Cmd {\n     const client = ctx.client;\n     return async (params: lc.CodeAction) => {"}, {"sha": "875261c48a60e4f4c22c7b35865267aa5de5f8f4", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -75,6 +75,23 @@ export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro |\n     \"rust-analyzer/expandMacro\"\n );\n \n+export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\n+    \"rust-analyzer/relatedTests\"\n+);\n+\n+export const cancelFlycheck = new lc.RequestType0<void, void>(\"rust-analyzer/cancelFlycheck\");\n+\n+// Experimental extensions\n+\n+export interface SsrParams {\n+    query: string;\n+    parseOnly: boolean;\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Position;\n+    selections: readonly lc.Range[];\n+}\n+export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>(\"experimental/ssr\");\n+\n export interface MatchingBraceParams {\n     textDocument: lc.TextDocumentIdentifier;\n     positions: lc.Position[];\n@@ -127,19 +144,6 @@ export interface TestInfo {\n     runnable: Runnable;\n }\n \n-export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\n-    \"rust-analyzer/relatedTests\"\n-);\n-\n-export interface SsrParams {\n-    query: string;\n-    parseOnly: boolean;\n-    textDocument: lc.TextDocumentIdentifier;\n-    position: lc.Position;\n-    selections: readonly lc.Range[];\n-}\n-export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>(\"experimental/ssr\");\n-\n export interface CommandLink extends lc.Command {\n     /**\n      * A tooltip for the command, when represented in the UI."}, {"sha": "a9847dd2a6521ba013d76b4c7562ff89334397c9", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45b7b6a60a7404d093f4afe81a0da10824cef7b8/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=45b7b6a60a7404d093f4afe81a0da10824cef7b8", "patch": "@@ -163,6 +163,7 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     ctx.registerCommand(\"peekTests\", commands.peekTests);\n     ctx.registerCommand(\"moveItemUp\", commands.moveItemUp);\n     ctx.registerCommand(\"moveItemDown\", commands.moveItemDown);\n+    ctx.registerCommand(\"cancelFlycheck\", commands.cancelFlycheck);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand(\"onEnter\", commands.onEnter);"}]}