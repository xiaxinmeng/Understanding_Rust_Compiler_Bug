{"sha": "5a90537b62573721c42a83c024d3d7ad031b758b", "node_id": "C_kwDOAAsO6NoAKDVhOTA1MzdiNjI1NzM3MjFjNDJhODNjMDI0ZDNkN2FkMDMxYjc1OGI", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-28T17:37:00Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "add: `lints.rs`\n\nadd: `lints.rs`\nrefactor: move `InvalidAtomicOrderingDiag` to `lints.rs`", "tree": {"sha": "d5eab190f7fe09b4616efd09018a5a39dc450c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5eab190f7fe09b4616efd09018a5a39dc450c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a90537b62573721c42a83c024d3d7ad031b758b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a90537b62573721c42a83c024d3d7ad031b758b", "html_url": "https://github.com/rust-lang/rust/commit/5a90537b62573721c42a83c024d3d7ad031b758b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a90537b62573721c42a83c024d3d7ad031b758b/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3020239de947ec52677e9b4e853a6a9fc073d1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3020239de947ec52677e9b4e853a6a9fc073d1f9", "html_url": "https://github.com/rust-lang/rust/commit/3020239de947ec52677e9b4e853a6a9fc073d1f9"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "afcf8b54322f601b4c851cc0a15752c6fce97845", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5a90537b62573721c42a83c024d3d7ad031b758b", "patch": "@@ -38,6 +38,8 @@\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n+// #![deny(rustc::untranslatable_diagnostic)]\n+// #![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -60,6 +62,7 @@ mod internal;\n mod late;\n mod let_underscore;\n mod levels;\n+mod lints;\n mod methods;\n mod non_ascii_idents;\n mod non_fmt_panic;"}, {"sha": "1dc23ad9e921b0d948bccc1e7f2176083412c051", "filename": "compiler/rustc_lint/src/lints.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=5a90537b62573721c42a83c024d3d7ad031b758b", "patch": "@@ -0,0 +1,11 @@\n+use rustc_macros::LintDiagnostic;\n+use rustc_span::{Symbol, Span};\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_atomic_ordering_invalid)]\n+#[help]\n+pub struct InvalidAtomicOrderingDiag {\n+    pub method: Symbol,\n+    #[label]\n+    pub fail_order_arg_span: Span,\n+}"}, {"sha": "7f3a501aeb0d14dec30d852bfa2a758dfde2c731", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90537b62573721c42a83c024d3d7ad031b758b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=5a90537b62573721c42a83c024d3d7ad031b758b", "patch": "@@ -1,11 +1,11 @@\n+use crate::lints::InvalidAtomicOrderingDiag;\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{fluent, Applicability, DiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n-use rustc_macros::LintDiagnostic;\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n@@ -1550,15 +1550,6 @@ impl InvalidAtomicOrdering {\n         let Some(fail_ordering) = Self::match_ordering(cx, fail_order_arg) else { return };\n \n         if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n-            #[derive(LintDiagnostic)]\n-            #[diag(lint_atomic_ordering_invalid)]\n-            #[help]\n-            struct InvalidAtomicOrderingDiag {\n-                method: Symbol,\n-                #[label]\n-                fail_order_arg_span: Span,\n-            }\n-\n             cx.emit_spanned_lint(\n                 INVALID_ATOMIC_ORDERING,\n                 fail_order_arg.span,"}]}