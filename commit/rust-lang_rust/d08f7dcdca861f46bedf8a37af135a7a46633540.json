{"sha": "d08f7dcdca861f46bedf8a37af135a7a46633540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOGY3ZGNkY2E4NjFmNDZiZWRmOGEzN2FmMTM1YTdhNDY2MzM1NDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-02T12:15:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-03T22:13:03Z"}, "message": "Address review comments", "tree": {"sha": "ab436345ff9e0f5edcfe0797c2873afe477b25dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab436345ff9e0f5edcfe0797c2873afe477b25dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08f7dcdca861f46bedf8a37af135a7a46633540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08f7dcdca861f46bedf8a37af135a7a46633540", "html_url": "https://github.com/rust-lang/rust/commit/d08f7dcdca861f46bedf8a37af135a7a46633540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08f7dcdca861f46bedf8a37af135a7a46633540/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d415844f5e82944dc1907ff4b66f9f74fcbaf6ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d415844f5e82944dc1907ff4b66f9f74fcbaf6ff", "html_url": "https://github.com/rust-lang/rust/commit/d415844f5e82944dc1907ff4b66f9f74fcbaf6ff"}], "stats": {"total": 41, "additions": 14, "deletions": 27}, "files": [{"sha": "872257118714e55930bd45ad21bb76319a7cd006", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d08f7dcdca861f46bedf8a37af135a7a46633540", "patch": "@@ -105,17 +105,6 @@ impl Path {\n         }\n     }\n \n-    // Make a \"crate root\" segment for this path unless it already has it\n-    // or starts with something like `self`/`super`/`$crate`/etc.\n-    pub fn make_root(&self) -> Option<PathSegment> {\n-        if let Some(ident) = self.segments.get(0).map(|seg| seg.ident) {\n-            if ident.is_path_segment_keyword() {\n-                return None;\n-            }\n-        }\n-        Some(PathSegment::crate_root(self.span.shrink_to_lo()))\n-    }\n-\n     pub fn is_global(&self) -> bool {\n         !self.segments.is_empty() && self.segments[0].ident.name == keywords::PathRoot.name()\n     }\n@@ -144,7 +133,7 @@ impl PathSegment {\n     pub fn from_ident(ident: Ident) -> Self {\n         PathSegment { ident, id: DUMMY_NODE_ID, args: None }\n     }\n-    pub fn crate_root(span: Span) -> Self {\n+    pub fn path_root(span: Span) -> Self {\n         PathSegment::from_ident(Ident::new(keywords::PathRoot.name(), span))\n     }\n }"}, {"sha": "5770f6bb8a28c442f10fd76f8065f65d1696742c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d08f7dcdca861f46bedf8a37af135a7a46633540", "patch": "@@ -318,9 +318,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n+        assert!(!idents.is_empty());\n+        let add_root = global && !idents[0].is_path_segment_keyword();\n+        let mut segments = Vec::with_capacity(idents.len() + add_root as usize);\n+        if add_root {\n+            segments.push(ast::PathSegment::path_root(span));\n+        }\n         let last_ident = idents.pop().unwrap();\n-        let mut segments: Vec<ast::PathSegment> = vec![];\n-\n         segments.extend(idents.into_iter().map(|ident| {\n             ast::PathSegment::from_ident(ident.with_span_pos(span))\n         }));\n@@ -334,13 +338,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             args,\n         });\n-        let mut path = ast::Path { span, segments };\n-        if global {\n-            if let Some(seg) = path.make_root() {\n-                path.segments.insert(0, seg);\n-            }\n-        }\n-        path\n+        ast::Path { span, segments }\n     }\n \n     /// Constructs a qualified path."}, {"sha": "8165c0e44c413a3469fe8f2de6c8fc706857902c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d08f7dcdca861f46bedf8a37af135a7a46633540", "patch": "@@ -2082,7 +2082,7 @@ impl<'a> Parser<'a> {\n         let mut segments = Vec::new();\n         let mod_sep_ctxt = self.span.ctxt();\n         if self.eat(&token::ModSep) {\n-            segments.push(PathSegment::crate_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n+            segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n         }\n         self.parse_path_segments(&mut segments, style, enable_warning)?;\n \n@@ -7685,7 +7685,7 @@ impl<'a> Parser<'a> {\n             let mod_sep_ctxt = self.span.ctxt();\n             if self.eat(&token::ModSep) {\n                 prefix.segments.push(\n-                    PathSegment::crate_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt))\n+                    PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt))\n                 );\n             }\n "}, {"sha": "4f2eb74c0722766a3181ff9559fd8e205636e9b0", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f7dcdca861f46bedf8a37af135a7a46633540/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=d08f7dcdca861f46bedf8a37af135a7a46633540", "patch": "@@ -353,7 +353,7 @@ declare_keywords! {\n     (2,  DollarCrate,        \"$crate\")\n     (3,  Underscore,         \"_\")\n \n-    // Keywords used in the language.\n+    // Keywords that are used in stable Rust.\n     (4,  As,                 \"as\")\n     (5,  Box,                \"box\")\n     (6,  Break,              \"break\")\n@@ -391,7 +391,7 @@ declare_keywords! {\n     (38, Where,              \"where\")\n     (39, While,              \"while\")\n \n-    // Keywords reserved for future use.\n+    // Keywords that are used in unstable Rust or reserved for future use.\n     (40, Abstract,           \"abstract\")\n     (41, Become,             \"become\")\n     (42, Do,                 \"do\")\n@@ -404,10 +404,10 @@ declare_keywords! {\n     (49, Virtual,            \"virtual\")\n     (50, Yield,              \"yield\")\n \n-    // Edition-specific keywords used in the language.\n+    // Edition-specific keywords that are used in stable Rust.\n     (51, Dyn,                \"dyn\") // >= 2018 Edition only\n \n-    // Edition-specific keywords reserved for future use.\n+    // Edition-specific keywords that are used in unstable Rust or reserved for future use.\n     (52, Async,              \"async\") // >= 2018 Edition only\n     (53, Try,                \"try\") // >= 2018 Edition only\n "}]}