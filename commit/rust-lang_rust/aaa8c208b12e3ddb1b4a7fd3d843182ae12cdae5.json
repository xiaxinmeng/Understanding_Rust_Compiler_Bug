{"sha": "aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYThjMjA4YjEyZTNkZGIxYjRhN2ZkM2Q4NDMxODJhZTEyY2RhZTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-05T19:30:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T09:33:19Z"}, "message": "internal: do not drop errors from cargo metadata/check\n\nWork towards #3155", "tree": {"sha": "a5833c960096a22e38beab5dda78cd4ddd3f736b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5833c960096a22e38beab5dda78cd4ddd3f736b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "html_url": "https://github.com/rust-lang/rust/commit/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047b5313013383fc4fafaef6d6d8d6a64549e3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/047b5313013383fc4fafaef6d6d8d6a64549e3cb", "html_url": "https://github.com/rust-lang/rust/commit/047b5313013383fc4fafaef6d6d8d6a64549e3cb"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "c2c87b207b1e42553614e84f5b3b3f01645ce4f8", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "patch": "@@ -52,7 +52,7 @@ pub struct BuildDataCollector {\n     configs: FxHashMap<AbsPathBuf, BuildDataConfig>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq)]\n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n pub struct BuildDataResult {\n     data: FxHashMap<AbsPathBuf, BuildDataMap>,\n }"}, {"sha": "b9be1e7b8a0fb991c8893741978533653e6feec7", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "patch": "@@ -82,11 +82,16 @@ pub(crate) struct GlobalState {\n     pub(crate) source_root_config: SourceRootConfig,\n     pub(crate) proc_macro_client: Option<ProcMacroClient>,\n \n+    /// For both `workspaces` and `workspace_build_data`, the field stores the\n+    /// data we actually use, while the `OpQueue` stores the result of the last\n+    /// fetch.\n+    ///\n+    /// If the fetch (partially) fails, we do not update the values.\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n-    pub(crate) fetch_workspaces_queue: OpQueue<(), ()>,\n-\n+    pub(crate) fetch_workspaces_queue: OpQueue<(), Vec<anyhow::Result<ProjectWorkspace>>>,\n     pub(crate) workspace_build_data: Option<BuildDataResult>,\n-    pub(crate) fetch_build_data_queue: OpQueue<BuildDataCollector, ()>,\n+    pub(crate) fetch_build_data_queue:\n+        OpQueue<BuildDataCollector, Option<anyhow::Result<BuildDataResult>>>,\n \n     latest_requests: Arc<RwLock<LatestRequests>>,\n }\n@@ -140,10 +145,12 @@ impl GlobalState {\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: None,\n+\n             workspaces: Arc::new(Vec::new()),\n             fetch_workspaces_queue: OpQueue::default(),\n             workspace_build_data: None,\n             fetch_build_data_queue: OpQueue::default(),\n+\n             latest_requests: Default::default(),\n         }\n     }"}, {"sha": "eec6676e08ee15fb5daf2e4f6a7811171cd76c88", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "patch": "@@ -12,6 +12,7 @@ use ide::{Canceled, FileId};\n use ide_db::base_db::VfsPath;\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n+use project_model::BuildDataCollector;\n use vfs::ChangeKind;\n \n use crate::{\n@@ -227,8 +228,15 @@ impl GlobalState {\n                                     (Progress::Report, Some(msg))\n                                 }\n                                 ProjectWorkspaceProgress::End(workspaces) => {\n-                                    self.fetch_workspaces_completed();\n-                                    self.switch_workspaces(workspaces, None);\n+                                    self.fetch_workspaces_completed(workspaces);\n+                                    self.switch_workspaces();\n+                                    if self.config.run_build_scripts() {\n+                                        let mut collector = BuildDataCollector::default();\n+                                        for ws in self.workspaces.iter() {\n+                                            ws.collect_build_data_configs(&mut collector);\n+                                        }\n+                                        self.fetch_build_data_request(collector)\n+                                    }\n                                     (Progress::End, None)\n                                 }\n                             };\n@@ -240,11 +248,9 @@ impl GlobalState {\n                                 BuildDataProgress::Report(msg) => {\n                                     (Some(Progress::Report), Some(msg))\n                                 }\n-                                BuildDataProgress::End(collector) => {\n-                                    self.fetch_build_data_completed();\n-                                    let workspaces =\n-                                        (*self.workspaces).clone().into_iter().map(Ok).collect();\n-                                    self.switch_workspaces(workspaces, Some(collector));\n+                                BuildDataProgress::End(build_data_result) => {\n+                                    self.fetch_build_data_completed(build_data_result);\n+                                    self.switch_workspaces();\n                                     (Some(Progress::End), None)\n                                 }\n                             };"}, {"sha": "cdd6eae699dbc8782a1a7359659b188b7da13f07", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=aaa8c208b12e3ddb1b4a7fd3d843182ae12cdae5", "patch": "@@ -139,8 +139,11 @@ impl GlobalState {\n             sender.send(Task::FetchBuildData(BuildDataProgress::End(res))).unwrap();\n         });\n     }\n-    pub(crate) fn fetch_build_data_completed(&mut self) {\n-        self.fetch_build_data_queue.op_completed(())\n+    pub(crate) fn fetch_build_data_completed(\n+        &mut self,\n+        build_data: anyhow::Result<BuildDataResult>,\n+    ) {\n+        self.fetch_build_data_queue.op_completed(Some(build_data))\n     }\n \n     pub(crate) fn fetch_workspaces_request(&mut self) {\n@@ -194,54 +197,55 @@ impl GlobalState {\n             }\n         });\n     }\n-    pub(crate) fn fetch_workspaces_completed(&mut self) {\n-        self.fetch_workspaces_queue.op_completed(())\n-    }\n-\n-    pub(crate) fn switch_workspaces(\n+    pub(crate) fn fetch_workspaces_completed(\n         &mut self,\n         workspaces: Vec<anyhow::Result<ProjectWorkspace>>,\n-        workspace_build_data: Option<anyhow::Result<BuildDataResult>>,\n     ) {\n+        self.fetch_workspaces_queue.op_completed(workspaces)\n+    }\n+\n+    pub(crate) fn switch_workspaces(&mut self) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n+        let workspaces = self.fetch_workspaces_queue.last_op_result();\n         log::info!(\"will switch workspaces: {:?}\", workspaces);\n \n-        let mut has_errors = false;\n+        let mut error_message = None;\n         let workspaces = workspaces\n-            .into_iter()\n-            .filter_map(|res| {\n-                res.map_err(|err| {\n-                    has_errors = true;\n+            .iter()\n+            .filter_map(|res| match res {\n+                Ok(it) => Some(it.clone()),\n+                Err(err) => {\n                     log::error!(\"failed to load workspace: {:#}\", err);\n-                    if self.workspaces.is_empty() {\n-                        self.show_message(\n-                            lsp_types::MessageType::Error,\n-                            format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n-                        );\n-                    }\n-                })\n-                .ok()\n+                    let message = error_message.get_or_insert_with(String::new);\n+                    stdx::format_to!(\n+                        message,\n+                        \"rust-analyzer failed to load workspace: {:#}\\n\",\n+                        err\n+                    );\n+                    None\n+                }\n             })\n             .collect::<Vec<_>>();\n \n-        let workspace_build_data = match workspace_build_data {\n-            Some(Ok(it)) => Some(it),\n+        let workspace_build_data = match self.fetch_build_data_queue.last_op_result() {\n+            Some(Ok(it)) => Some(it.clone()),\n+            None => None,\n             Some(Err(err)) => {\n                 log::error!(\"failed to fetch build data: {:#}\", err);\n-                self.show_message(\n-                    lsp_types::MessageType::Error,\n-                    format!(\"rust-analyzer failed to fetch build data: {:#}\", err),\n-                );\n-                return;\n+                let message = error_message.get_or_insert_with(String::new);\n+                stdx::format_to!(message, \"rust-analyzer failed to fetch build data: {:#}\\n\", err);\n+                None\n             }\n-            None => None,\n         };\n \n-        if *self.workspaces == workspaces && self.workspace_build_data == workspace_build_data {\n-            return;\n+        if let Some(error_message) = error_message {\n+            self.show_message(lsp_types::MessageType::Error, error_message);\n+            if !self.workspaces.is_empty() {\n+                return;\n+            }\n         }\n \n-        if !self.workspaces.is_empty() && has_errors {\n+        if *self.workspaces == workspaces && self.workspace_build_data == workspace_build_data {\n             return;\n         }\n \n@@ -337,14 +341,6 @@ impl GlobalState {\n         };\n         change.set_crate_graph(crate_graph);\n \n-        if self.config.run_build_scripts() && workspace_build_data.is_none() {\n-            let mut collector = BuildDataCollector::default();\n-            for ws in &workspaces {\n-                ws.collect_build_data_configs(&mut collector);\n-            }\n-            self.fetch_build_data_request(collector)\n-        }\n-\n         self.source_root_config = project_folders.source_root_config;\n         self.workspaces = Arc::new(workspaces);\n         self.workspace_build_data = workspace_build_data;"}]}