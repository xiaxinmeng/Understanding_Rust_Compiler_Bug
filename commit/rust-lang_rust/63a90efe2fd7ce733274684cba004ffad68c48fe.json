{"sha": "63a90efe2fd7ce733274684cba004ffad68c48fe", "node_id": "C_kwDOAAsO6NoAKDYzYTkwZWZlMmZkN2NlNzMzMjc0Njg0Y2JhMDA0ZmZhZDY4YzQ4ZmU", "commit": {"author": {"name": "Austin Kiekintveld", "email": "akiekintveld@icloud.com", "date": "2022-05-01T22:55:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-01T22:55:54Z"}, "message": "Relax memory ordering used in `min_stack`\n\n`min_stack` does not provide any synchronization guarantees to its callers, and only requires atomicity for `MIN` itself, so relaxed memory ordering is sufficient.", "tree": {"sha": "4e161ff2074abda75ebd407ce83c6f1d534c7702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e161ff2074abda75ebd407ce83c6f1d534c7702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a90efe2fd7ce733274684cba004ffad68c48fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibw/6CRBK7hj4Ov3rIwAApzIIAJRrdFTIKKE7e7HQOQPf5d3J\nfJV/bT5d5qgamDmZk8hQe93EDmM0xq4dEm2j8dYhffHcP5BcK5UBI11BP7JzAJ3e\nHXp7Ey5YueLqr0LG9C3siGZXVM04Bqoh9P5lyU/Q4ynL6k45OIAnYm5InSENpJlg\nPuRIdqTc4T4gjKqSrB3YyLyAoD6NXs9TD+Ao6hqmBFDnZpHl3pzTBIe90S4O2zbF\nuSNNXhPSI46JP4byCHIFezXKSHSTZbVrn4VRYP7EJrnk81iYWelqLMDokdLf8R/2\nVLC8rt9OBifZrgMn86tdkMSY2Qzyf06cE1ql3EyOeAG73dyasYPxUhOFzLaILj4=\n=1/Iz\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e161ff2074abda75ebd407ce83c6f1d534c7702\nparent a933de83989471ac444a13d62996d30621542654\nauthor Austin Kiekintveld <akiekintveld@icloud.com> 1651445754 -0700\ncommitter GitHub <noreply@github.com> 1651445754 -0700\n\nRelax memory ordering used in `min_stack`\n\n`min_stack` does not provide any synchronization guarantees to its callers, and only requires atomicity for `MIN` itself, so relaxed memory ordering is sufficient."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a90efe2fd7ce733274684cba004ffad68c48fe", "html_url": "https://github.com/rust-lang/rust/commit/63a90efe2fd7ce733274684cba004ffad68c48fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a90efe2fd7ce733274684cba004ffad68c48fe/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a933de83989471ac444a13d62996d30621542654", "url": "https://api.github.com/repos/rust-lang/rust/commits/a933de83989471ac444a13d62996d30621542654", "html_url": "https://github.com/rust-lang/rust/commit/a933de83989471ac444a13d62996d30621542654"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "76466b2b37beb4b9318e50e146284c75da9fa37a", "filename": "library/std/src/sys_common/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a90efe2fd7ce733274684cba004ffad68c48fe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a90efe2fd7ce733274684cba004ffad68c48fe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs?ref=63a90efe2fd7ce733274684cba004ffad68c48fe", "patch": "@@ -4,7 +4,7 @@ use crate::sys::thread as imp;\n \n pub fn min_stack() -> usize {\n     static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n-    match MIN.load(Ordering::SeqCst) {\n+    match MIN.load(Ordering::Relaxed) {\n         0 => {}\n         n => return n - 1,\n     }\n@@ -13,6 +13,6 @@ pub fn min_stack() -> usize {\n \n     // 0 is our sentinel value, so ensure that we'll never see 0 after\n     // initialization has run\n-    MIN.store(amt + 1, Ordering::SeqCst);\n+    MIN.store(amt + 1, Ordering::Relaxed);\n     amt\n }"}]}