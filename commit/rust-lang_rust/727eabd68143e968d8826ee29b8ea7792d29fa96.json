{"sha": "727eabd68143e968d8826ee29b8ea7792d29fa96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyN2VhYmQ2ODE0M2U5NjhkODgyNmVlMjliOGVhNzc5MmQyOWZhOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-24T17:02:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-24T17:02:23Z"}, "message": "Auto merge of #53662 - kennytm:rollup, r=kennytm\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #53311 (Window Mutex: Document that we properly initialize the SRWLock)\n - #53503 (Discourage overuse of mem::forget)\n - #53545 (Fix #50865: ICE on impl-trait returning functions reaching private items)\n - #53559 (add macro check for lint)\n - #53562 (Lament the invincibility of the Turbofish)\n - #53563 (use String::new() instead of String::from(\"\"), \"\".to_string(), \"\".to_owned() or \"\".into())\n - #53592 (docs: minor stylistic changes to str/string docs)\n - #53594 (Update RELEASES.md to include clippy-preview)\n - #53600 (Fix a grammatical mistake in \"expected generic arguments\" errors)\n - #53614 (update nomicon and book)\n - #53617 (tidy: Stop requiring a license header)\n - #53618 (Add missing fmt examples)\n - #53636 (Prefer `.nth(n)` over `.skip(n).next()`.)\n - #53644 (Use SmallVec for SmallCStr)\n - #53664 (Remove unnecessary closure in rustc_mir/build/mod.rs)\n - #53666 (Added rustc_codegen_llvm to compiler documentation.)", "tree": {"sha": "39ed93235d768258148e640411fc823c98657225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39ed93235d768258148e640411fc823c98657225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/727eabd68143e968d8826ee29b8ea7792d29fa96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/727eabd68143e968d8826ee29b8ea7792d29fa96", "html_url": "https://github.com/rust-lang/rust/commit/727eabd68143e968d8826ee29b8ea7792d29fa96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/727eabd68143e968d8826ee29b8ea7792d29fa96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b00727076ce251b54bdefa18779a13819d2209", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b00727076ce251b54bdefa18779a13819d2209", "html_url": "https://github.com/rust-lang/rust/commit/61b00727076ce251b54bdefa18779a13819d2209"}, {"sha": "c6039de546301cc8ad94637d0d9e24860d39832b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6039de546301cc8ad94637d0d9e24860d39832b", "html_url": "https://github.com/rust-lang/rust/commit/c6039de546301cc8ad94637d0d9e24860d39832b"}], "stats": {"total": 687, "additions": 382, "deletions": 305}, "files": [{"sha": "7e727e0d41bb3546a6aad39c6052a4c92003627e", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -39,6 +39,8 @@ Misc\n   will demote `deny` and `forbid` lints to `warn`.\n - [`rustc` and `rustdoc` will now have the exit code of `1` if compilation\n   fails, and `101` if there is a panic.][52197]\n+- [A preview of clippy has been made available through rustup.][51122]\n+  You can install the preview with `rustup component add clippy-preview`\n \n Compatibility Notes\n -------------------\n@@ -64,6 +66,7 @@ Compatibility Notes\n [51619]: https://github.com/rust-lang/rust/pull/51619/\n [51656]: https://github.com/rust-lang/rust/pull/51656/\n [51178]: https://github.com/rust-lang/rust/pull/51178/\n+[51122]: https://github.com/rust-lang/rust/pull/51122\n [50494]: https://github.com/rust-lang/rust/pull/50494/\n [cargo/5614]: https://github.com/rust-lang/cargo/pull/5614/\n [cargo/5723]: https://github.com/rust-lang/cargo/pull/5723/"}, {"sha": "9a5d78e58ea3fcfa7e529b87e56868dcb7de6aaa", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -712,7 +712,7 @@ impl Step for Rustc {\n \n         // Find dependencies for top level crates.\n         let mut compiler_crates = HashSet::new();\n-        for root_crate in &[\"rustc\", \"rustc_driver\"] {\n+        for root_crate in &[\"rustc\", \"rustc_driver\", \"rustc_codegen_llvm\"] {\n             let interned_root_crate = INTERNER.intern_str(root_crate);\n             find_compiler_crates(builder, &interned_root_crate, &mut compiler_crates);\n         }"}, {"sha": "16c9dee7666c2b2766fd98d89003e028679d1207", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1 +1 @@\n-Subproject commit 88cdde350fd3a90c93f3bac8b4f168f105d28060\n+Subproject commit 16c9dee7666c2b2766fd98d89003e028679d1207"}, {"sha": "ae42ad7aa4d7907cca941371c9eee8de8c2ee40d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1 +1 @@\n-Subproject commit 790e96b87f4b5817cac310e73a524d25c3d076d8\n+Subproject commit ae42ad7aa4d7907cca941371c9eee8de8c2ee40d"}, {"sha": "c451a051c74dcbfc2a7c92b209d05238ef92d3b6", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -513,7 +513,7 @@ impl str {\n         unsafe { String::from_utf8_unchecked(slice.into_vec()) }\n     }\n \n-    /// Create a [`String`] by repeating a string `n` times.\n+    /// Creates a new [`String`] by repeating a string `n` times.\n     ///\n     /// [`String`]: string/struct.String.html\n     ///"}, {"sha": "aa821abb34cdfe5f38e3880f28b71b522b2d972a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -752,7 +752,7 @@ impl String {\n         self.vec\n     }\n \n-    /// Extracts a string slice containing the entire string.\n+    /// Extracts a string slice containing the entire `String`.\n     ///\n     /// # Examples\n     ///\n@@ -1454,8 +1454,8 @@ impl String {\n         self.vec.clear()\n     }\n \n-    /// Creates a draining iterator that removes the specified range in the string\n-    /// and yields the removed chars.\n+    /// Creates a draining iterator that removes the specified range in the `String`\n+    /// and yields the removed `chars`.\n     ///\n     /// Note: The element range is removed even if the iterator is not\n     /// consumed until the end."}, {"sha": "7d131b5c99dc09c66b9bf6af2c9adab0d6423f65", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1132,6 +1132,36 @@ impl<'a> Formatter<'a> {\n     ///\n     /// This function will correctly account for the flags provided as well as\n     /// the minimum width. It will not take precision into account.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo { nb: i32 };\n+    ///\n+    /// impl Foo {\n+    ///     fn new(nb: i32) -> Foo {\n+    ///         Foo {\n+    ///             nb,\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         // We need to remove \"-\" from the number output.\n+    ///         let tmp = self.nb.abs().to_string();\n+    ///\n+    ///         formatter.pad_integral(self.nb > 0, \"Foo \", &tmp)\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo::new(2)), \"2\");\n+    /// assert_eq!(&format!(\"{}\", Foo::new(-1)), \"-1\");\n+    /// assert_eq!(&format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n+    /// assert_eq!(&format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad_integral(&mut self,\n                         is_nonnegative: bool,\n@@ -1232,7 +1262,7 @@ impl<'a> Formatter<'a> {\n             // If our string is longer that the precision, then we must have\n             // truncation. However other flags like `fill`, `width` and `align`\n             // must act as always.\n-            if let Some((i, _)) = s.char_indices().skip(max).next() {\n+            if let Some((i, _)) = s.char_indices().nth(max) {\n                 // LLVM here can't prove that `..i` won't panic `&s[..i]`, but\n                 // we know that it can't panic. Use `get` + `unwrap_or` to avoid\n                 // `unsafe` and otherwise don't emit any panic-related code\n@@ -1381,12 +1411,48 @@ impl<'a> Formatter<'a> {\n \n     /// Writes some data to the underlying buffer contained within this\n     /// formatter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo;\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         formatter.write_str(\"Foo\")\n+    ///         // This is equivalent to:\n+    ///         // write!(formatter, \"Foo\")\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo), \"Foo\");\n+    /// assert_eq!(&format!(\"{:0>8}\", Foo), \"Foo\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_str(&mut self, data: &str) -> Result {\n         self.buf.write_str(data)\n     }\n \n     /// Writes some formatted information into this instance.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo(-1)), \"Foo -1\");\n+    /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_fmt(&mut self, fmt: Arguments) -> Result {\n         write(self.buf, fmt)"}, {"sha": "67cceb9d5360590d420374229a6bb943101b55e5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -29,13 +29,15 @@ use ops::{Deref, DerefMut, CoerceUnsized};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n \n-/// Leaks a value: takes ownership and \"forgets\" about the value **without running\n-/// its destructor**.\n+/// Takes ownership and \"forgets\" about the value **without running its destructor**.\n ///\n /// Any resources the value manages, such as heap memory or a file handle, will linger\n-/// forever in an unreachable state.\n+/// forever in an unreachable state. However, it does not guarantee that pointers\n+/// to this memory will remain valid.\n ///\n-/// If you want to dispose of a value properly, running its destructor, see\n+/// * If you want to leak memory, see [`Box::leak`][leak].\n+/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`][into_raw].\n+/// * If you want to dispose of a value properly, running its destructor, see\n /// [`mem::drop`][drop].\n ///\n /// # Safety\n@@ -59,15 +61,6 @@ pub use intrinsics::transmute;\n ///\n /// # Examples\n ///\n-/// Leak some heap memory by never deallocating it:\n-///\n-/// ```\n-/// use std::mem;\n-///\n-/// let heap_memory = Box::new(3);\n-/// mem::forget(heap_memory);\n-/// ```\n-///\n /// Leak an I/O object, never closing the file:\n ///\n /// ```no_run\n@@ -137,38 +130,13 @@ pub use intrinsics::transmute;\n /// }\n /// ```\n ///\n-/// ## Use case 3\n-///\n-/// You are transferring ownership across a [FFI] boundary to code written in\n-/// another language. You need to `forget` the value on the Rust side because Rust\n-/// code is no longer responsible for it.\n-///\n-/// ```no_run\n-/// use std::mem;\n-///\n-/// extern \"C\" {\n-///     fn my_c_function(x: *const u32);\n-/// }\n-///\n-/// let x: Box<u32> = Box::new(3);\n-///\n-/// // Transfer ownership into C code.\n-/// unsafe {\n-///     my_c_function(&*x);\n-/// }\n-/// mem::forget(x);\n-/// ```\n-///\n-/// In this case, C code must call back into Rust to free the object. Calling C's `free`\n-/// function on a [`Box`][box] is *not* safe! Also, `Box` provides an [`into_raw`][into_raw]\n-/// method which is the preferred way to do this in practice.\n-///\n /// [drop]: fn.drop.html\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n /// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n+/// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[inline]"}, {"sha": "f4c46b6ce09e12bceb846f7ae4bc60254a47dc01", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1091,6 +1091,7 @@ impl_stable_hash_for!(enum traits::Reveal {\n });\n \n impl_stable_hash_for!(enum ::middle::privacy::AccessLevel {\n+    ReachableFromImplTrait,\n     Reachable,\n     Exported,\n     Public"}, {"sha": "b05ea9a5ed4b0c424da114335e582151e1729c46", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1330,7 +1330,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             s\n         };\n         let var_description = match var_origin {\n-            infer::MiscVariable(_) => \"\".to_string(),\n+            infer::MiscVariable(_) => String::new(),\n             infer::PatternRegion(_) => \" for pattern\".to_string(),\n             infer::AddrOfRegion(_) => \" for borrow expression\".to_string(),\n             infer::Autoref(_) => \" for autoref\".to_string(),"}, {"sha": "70fed9af92128367700c4fc9b8a8aebf84436cd7", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,6 +21,8 @@ use syntax::ast::NodeId;\n // Accessibility levels, sorted in ascending order\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum AccessLevel {\n+    // Superset of Reachable used to mark impl Trait items.\n+    ReachableFromImplTrait,\n     // Exported items + items participating in various kinds of public interfaces,\n     // but not directly nameable. For example, if function `fn f() -> T {...}` is\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n@@ -40,7 +42,7 @@ pub struct AccessLevels<Id = NodeId> {\n \n impl<Id: Hash + Eq> AccessLevels<Id> {\n     pub fn is_reachable(&self, id: Id) -> bool {\n-        self.map.contains_key(&id)\n+        self.map.get(&id) >= Some(&AccessLevel::Reachable)\n     }\n     pub fn is_exported(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Exported)"}, {"sha": "0328b5f1fd5e57c727b1a617db55326b273ea900", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -434,6 +434,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     reachable_context.propagate();\n \n+    debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n+\n     // Return the set of reachable symbols.\n     ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n }"}, {"sha": "6da6ef92c9f55682d7df410f3f55f7857d75cd3d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -2105,7 +2105,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     region\n                 } else {\n                     // Do not even print 'static\n-                    \"\".to_owned()\n+                    String::new()\n                 };\n                 write!(fmt, \"&{}{}{:?}\", region, kind_str, place)\n             }"}, {"sha": "a58bb4724d2e27fd85bfb4a1362bfdff70fa2f95", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1051,7 +1051,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (rustc --print target-cpus for details)\"),\n-    target_feature: String = (\"\".to_string(), parse_string, [TRACKED],\n+    target_feature: String = (String::new(), parse_string, [TRACKED],\n         \"target specific attributes (rustc --print target-features for details)\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n@@ -1085,7 +1085,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n          \"metadata to mangle symbol names with\"),\n-    extra_filename: String = (\"\".to_string(), parse_string, [UNTRACKED],\n+    extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n          \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n@@ -1992,7 +1992,7 @@ pub fn build_session_options_and_crate_config(\n     };\n     if cg.target_feature == \"help\" {\n         prints.push(PrintRequest::TargetFeatures);\n-        cg.target_feature = \"\".to_string();\n+        cg.target_feature = String::new();\n     }\n     if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::RelocationModels);"}, {"sha": "405b320f3feaf29486afa68a7c81d64dc32999b5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                           if len > 5 {\n                               format!(\"\\nand {} others\", len - 4)\n                           } else {\n-                              \"\".to_owned()\n+                              String::new()\n                           }\n                           ));\n     }\n@@ -917,7 +917,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                  remove_refs);\n \n                         err.span_suggestion_short_with_applicability(\n-                            sp, &format_str, String::from(\"\"), Applicability::MachineApplicable\n+                            sp, &format_str, String::new(), Applicability::MachineApplicable\n                         );\n                         break;\n                     }\n@@ -1116,7 +1116,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         .collect::<Vec<String>>()\n                                         .join(\", \"))\n                         } else {\n-                            \"\".to_owned()\n+                            String::new()\n                         },\n                     );\n                     err.span_suggestion_with_applicability("}, {"sha": "69bdeec6eea230099bd209572893ea8542b7753a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -120,13 +120,13 @@ impl IntercrateAmbiguityCause {\n             &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n                 let self_desc = if let &Some(ref ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n-                } else { \"\".to_string() };\n+                } else { String::new() };\n                 format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n             }\n             &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n                 let self_desc = if let &Some(ref ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n-                } else { \"\".to_string() };\n+                } else { String::new() };\n                 format!(\"upstream crates may add new impl of trait `{}`{} \\\n                          in future versions\",\n                         trait_desc, self_desc)"}, {"sha": "bdfba7c3e3a37665c7132c22eb1c15b416191210", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -213,7 +213,7 @@ fn print_time_passes_entry_internal(what: &str, dur: Duration) {\n             let mb = n as f64 / 1_000_000.0;\n             format!(\"; rss: {}MB\", mb.round() as usize)\n         }\n-        None => \"\".to_owned(),\n+        None => String::new(),\n     };\n     println!(\"{}time: {}{}\\t{}\",\n              \"  \".repeat(indentation),"}, {"sha": "74ff1a5f4fd0d395ef5121a025c5589a7679370e", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -73,7 +73,7 @@ macro_rules! define_categories {\n                         (format!(\"{:.2}\",\n                         (((hits as f32) / (total as f32)) * 100.0)), total.to_string())\n                     } else {\n-                        (\"\".into(), \"\".into())\n+                        (String::new(), String::new())\n                     };\n \n                     writeln!("}, {"sha": "f10361cb076bd2fd1e02bc4cac45ebc6856e46bb", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n                 .span_suggestion_short_with_applicability(\n                     mut_span,\n                     \"remove this `mut`\",\n-                    \"\".to_owned(),\n+                    String::new(),\n                     Applicability::MachineApplicable)\n                 .emit();\n         }"}, {"sha": "640c23ebf9ddc4c295fa9f561129c88ca3743b25", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -140,21 +140,21 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n             let gens_str = if gens.iter().any(|&u| u != 0) {\n                 format!(\" gen: {}\", bits_to_string(gens))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             let action_kills = &self.action_kills[start .. end];\n             let action_kills_str = if action_kills.iter().any(|&u| u != 0) {\n                 format!(\" action_kill: {}\", bits_to_string(action_kills))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             let scope_kills = &self.scope_kills[start .. end];\n             let scope_kills_str = if scope_kills.iter().any(|&u| u != 0) {\n                 format!(\" scope_kill: {}\", bits_to_string(scope_kills))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             ps.synth_comment("}, {"sha": "c177ed85c3482ce49f419ecc7ac8a5961990a723", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n     fn dataflow_for(&self, e: EntryOrExit, n: &Node<'a>) -> String {\n         let id = n.1.data.id();\n         debug!(\"dataflow_for({:?}, id={:?}) {:?}\", e, id, self.variants);\n-        let mut sets = \"\".to_string();\n+        let mut sets = String::new();\n         let mut seen_one = false;\n         for &variant in &self.variants {\n             if seen_one { sets.push_str(\" \"); } else { seen_one = true; }"}, {"sha": "0221cfd9b2c28c3601eea39627cf22260f52b3e3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1191,7 +1191,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                               member_descriptions);\n                 vec![\n                     MemberDescription {\n-                        name: \"\".to_string(),\n+                        name: String::new(),\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: self.layout.size,\n@@ -1220,7 +1220,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                                   variant_type_metadata,\n                                                   member_descriptions);\n                     MemberDescription {\n-                        name: \"\".to_string(),\n+                        name: String::new(),\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: variant.size,"}, {"sha": "08794fbec8dc5df7adb7ae66083e137e94b85b64", "filename": "src/librustc_data_structures/small_c_str.rs", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_data_structures%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_data_structures%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_c_str.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -11,69 +11,61 @@\n use std::ffi;\n use std::ops::Deref;\n \n-const SIZE: usize = 38;\n+use smallvec::SmallVec;\n+\n+const SIZE: usize = 36;\n \n /// Like SmallVec but for C strings.\n #[derive(Clone)]\n-pub enum SmallCStr {\n-    OnStack {\n-        data: [u8; SIZE],\n-        len_with_nul: u8,\n-    },\n-    OnHeap {\n-        data: ffi::CString,\n-    }\n+pub struct SmallCStr {\n+    data: SmallVec<[u8; SIZE]>,\n }\n \n impl SmallCStr {\n     #[inline]\n     pub fn new(s: &str) -> SmallCStr {\n-        if s.len() < SIZE {\n-            let mut data = [0; SIZE];\n-            data[.. s.len()].copy_from_slice(s.as_bytes());\n-            let len_with_nul = s.len() + 1;\n-\n-            // Make sure once that this is a valid CStr\n-            if let Err(e) = ffi::CStr::from_bytes_with_nul(&data[.. len_with_nul]) {\n-                panic!(\"The string \\\"{}\\\" cannot be converted into a CStr: {}\", s, e);\n-            }\n-\n-            SmallCStr::OnStack {\n-                data,\n-                len_with_nul: len_with_nul as u8,\n-            }\n+        let len = s.len();\n+        let len1 = len + 1;\n+        let data = if len < SIZE {\n+            let mut buf = [0; SIZE];\n+            buf[..len].copy_from_slice(s.as_bytes());\n+            SmallVec::from_buf_and_len(buf, len1)\n         } else {\n-            SmallCStr::OnHeap {\n-                data: ffi::CString::new(s).unwrap()\n-            }\n+            let mut data = Vec::with_capacity(len1);\n+            data.extend_from_slice(s.as_bytes());\n+            data.push(0);\n+            SmallVec::from_vec(data)\n+        };\n+        if let Err(e) = ffi::CStr::from_bytes_with_nul(&data) {\n+            panic!(\"The string \\\"{}\\\" cannot be converted into a CStr: {}\", s, e);\n         }\n+        SmallCStr { data }\n     }\n \n+    #[inline]\n+    pub fn new_with_nul(s: &str) -> SmallCStr {\n+        let b = s.as_bytes();\n+        if let Err(e) = ffi::CStr::from_bytes_with_nul(b) {\n+            panic!(\"The string \\\"{}\\\" cannot be converted into a CStr: {}\", s, e);\n+        }\n+        SmallCStr { data: SmallVec::from_slice(s.as_bytes()) }\n+    }\n+\n+\n     #[inline]\n     pub fn as_c_str(&self) -> &ffi::CStr {\n-        match *self {\n-            SmallCStr::OnStack { ref data, len_with_nul } => {\n-                unsafe {\n-                    let slice = &data[.. len_with_nul as usize];\n-                    ffi::CStr::from_bytes_with_nul_unchecked(slice)\n-                }\n-            }\n-            SmallCStr::OnHeap { ref data } => {\n-                data.as_c_str()\n-            }\n+        unsafe {\n+            ffi::CStr::from_bytes_with_nul_unchecked(&self.data[..])\n         }\n     }\n \n     #[inline]\n     pub fn len_with_nul(&self) -> usize {\n-        match *self {\n-            SmallCStr::OnStack { len_with_nul, .. } => {\n-                len_with_nul as usize\n-            }\n-            SmallCStr::OnHeap { ref data } => {\n-                data.as_bytes_with_nul().len()\n-            }\n-        }\n+        self.data.len()\n+    }\n+\n+    pub fn spilled(&self) -> bool {\n+        self.data.spilled()\n     }\n }\n \n@@ -85,7 +77,6 @@ impl Deref for SmallCStr {\n     }\n }\n \n-\n #[test]\n fn short() {\n     const TEXT: &str = \"abcd\";\n@@ -95,7 +86,7 @@ fn short() {\n \n     assert_eq!(scs.len_with_nul(), TEXT.len() + 1);\n     assert_eq!(scs.as_c_str(), reference.as_c_str());\n-    assert!(if let SmallCStr::OnStack { .. } = scs { true } else { false });\n+    assert!(!scs.spilled());\n }\n \n #[test]\n@@ -107,7 +98,7 @@ fn empty() {\n \n     assert_eq!(scs.len_with_nul(), TEXT.len() + 1);\n     assert_eq!(scs.as_c_str(), reference.as_c_str());\n-    assert!(if let SmallCStr::OnStack { .. } = scs { true } else { false });\n+    assert!(!scs.spilled());\n }\n \n #[test]\n@@ -121,7 +112,7 @@ fn long() {\n \n     assert_eq!(scs.len_with_nul(), TEXT.len() + 1);\n     assert_eq!(scs.as_c_str(), reference.as_c_str());\n-    assert!(if let SmallCStr::OnHeap { .. } = scs { true } else { false });\n+    assert!(scs.spilled());\n }\n \n #[test]"}, {"sha": "56cb3e9dbb829feacb179ebc2aa59b98e717f261", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -85,7 +85,7 @@ pub fn html_of_effect(eff: &Effect) -> (String, String) {\n fn html_of_duration(_start: &Instant, dur: &Duration) -> (String, String) {\n     use rustc::util::common::duration_to_secs_str;\n     (duration_to_secs_str(dur.clone()),\n-     \"\".to_string()\n+     String::new()\n     )\n }\n "}, {"sha": "c08cf3d039df53ec68a345d97fe86911924395f6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -798,7 +798,7 @@ impl EmitterWriter {\n                                                          // at by \"in this macro invocation\"\n                                                          format!(\" (#{})\", i + 1)\n                                                      } else {\n-                                                         \"\".to_string()\n+                                                         String::new()\n                                                      })));\n                         }\n                         // Check to make sure we're not in any <*macros>\n@@ -813,7 +813,7 @@ impl EmitterWriter {\n                                                          // backtrace is multiple levels deep\n                                                          format!(\" (#{})\", i + 1)\n                                                      } else {\n-                                                         \"\".to_string()\n+                                                         String::new()\n                                                      })));\n                             if !always_backtrace {\n                                 break;\n@@ -1065,7 +1065,7 @@ impl EmitterWriter {\n                     let col = if let Some(first_annotation) = first_line.annotations.first() {\n                         format!(\":{}\", first_annotation.start_col + 1)\n                     } else {\n-                        \"\".to_string()\n+                        String::new()\n                     };\n                     format!(\"{}:{}{}\",\n                             annotated_file.file.name,"}, {"sha": "92a2ea2bf2d7eac14d23a74403fa353a21bd2971", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -295,7 +295,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n declare_lint! {\n     pub MISSING_DOCS,\n     Allow,\n-    \"detects missing documentation for public members\"\n+    \"detects missing documentation for public members\",\n+    report_in_external_macro: true\n }\n \n pub struct MissingDoc {\n@@ -794,7 +795,7 @@ impl EarlyLintPass for DeprecatedAttr {\n                     err.span_suggestion_short_with_applicability(\n                         attr.span,\n                         \"remove this attribute\",\n-                        \"\".to_owned(),\n+                        String::new(),\n                         Applicability::MachineApplicable\n                     );\n                     err.emit();\n@@ -1250,7 +1251,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                                 err.span_suggestion_short_with_applicability(\n                                     no_mangle_attr.span,\n                                     \"remove this attribute\",\n-                                    \"\".to_owned(),\n+                                    String::new(),\n                                     // Use of `#[no_mangle]` suggests FFI intent; correct\n                                     // fix may be to monomorphize source by hand\n                                     Applicability::MaybeIncorrect"}, {"sha": "8219ec3df248aaebdbb096987fe6fae2cb5339d7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1111,7 +1111,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n                     let trait_def = tcx.trait_def(trait_ref.def_id);\n-                    trait_def.ancestors(tcx, def_id).skip(1).next().and_then(|node| {\n+                    trait_def.ancestors(tcx, def_id).nth(1).and_then(|node| {\n                         match node {\n                             specialization_graph::Node::Impl(parent) => Some(parent),\n                             _ => None,"}, {"sha": "6181eae5f602e72b9e8ef83f382e058ba6cdeca2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -327,7 +327,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             err.span_suggestion_short_with_applicability(\n                 mut_span,\n                 \"remove this `mut`\",\n-                \"\".to_owned(),\n+                String::new(),\n                 Applicability::MachineApplicable);\n \n             err.buffer(&mut mbcx.errors_buffer);"}, {"sha": "251586cd7949d43183901d5d32dbbb0f3b882de3", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     } else {\n                         item_msg = format!(\"data in a {}\", pointer_type);\n-                        reason = \"\".to_string();\n+                        reason = String::new();\n                     }\n                 }\n             }\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             Place::Static(box Static { def_id, ty: _ }) => {\n                 if let Place::Static(_) = access_place {\n                     item_msg = format!(\"immutable static item `{}`\", access_place_desc.unwrap());\n-                    reason = \"\".to_string();\n+                    reason = String::new();\n                 } else {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     let static_name = &self.tcx.item_name(*def_id);"}, {"sha": "dc88446319cf380da90c407a90c1bb75e4758ca1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -37,9 +37,6 @@ use util as mir_util;\n /// Construct the MIR for a given def-id.\n pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'tcx> {\n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let unsupported = || {\n-        span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id);\n-    };\n \n     // Figure out what primary body this item has.\n     let body_id = match tcx.hir.get(id) {\n@@ -50,7 +47,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n         _ => match tcx.hir.maybe_body_owned_by(id) {\n             Some(body) => body,\n-            None => unsupported(),\n+            None => span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id),\n         },\n     };\n "}, {"sha": "b67780ccdbc10282d2cb654ff884e3bba319fc34", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -474,7 +474,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     ) -> DiagnosticBuilder<'cx> {\n         let moved_path = moved_path\n             .map(|mp| format!(\": `{}`\", mp))\n-            .unwrap_or(\"\".to_owned());\n+            .unwrap_or(String::new());\n \n         let err = struct_span_err!(\n             self,"}, {"sha": "f68f2d0da6850d7694e06a300c965c6affceb7a9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -82,6 +82,7 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n }\n \n struct ReachEverythingInTheInterfaceVisitor<'b, 'a: 'b, 'tcx: 'a> {\n+    access_level: Option<AccessLevel>,\n     item_def_id: DefId,\n     ev: &'b mut EmbargoVisitor<'a, 'tcx>,\n }\n@@ -132,6 +133,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn reach<'b>(&'b mut self, item_id: ast::NodeId)\n                  -> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n         ReachEverythingInTheInterfaceVisitor {\n+            access_level: self.prev_level.map(|l| l.min(AccessLevel::Reachable)),\n             item_def_id: self.tcx.hir.local_def_id(item_id),\n             ev: self,\n         }\n@@ -214,7 +216,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Existential(..) |\n+            // Impl trait return types mark their parent function.\n+            // It (and its children) are revisited if the change applies.\n+            hir::ItemKind::Existential(ref ty_data) => {\n+                if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n+                    if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n+                        self.update(node_id, Some(AccessLevel::ReachableFromImplTrait));\n+                    }\n+                }\n+            }\n             hir::ItemKind::Use(..) |\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n@@ -226,6 +236,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(..) => {}\n         }\n \n+        // Store this node's access level here to propagate the correct\n+        // reachability level through interfaces and children.\n+        let orig_level = replace(&mut self.prev_level, item_level);\n+\n         // Mark all items in interfaces of reachable items as reachable\n         match item.node {\n             // The interface is empty\n@@ -324,9 +338,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let orig_level = self.prev_level;\n-        self.prev_level = item_level;\n-\n         intravisit::walk_item(self, item);\n \n         self.prev_level = orig_level;\n@@ -462,7 +473,7 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn check_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>) {\n         if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(trait_ref.def_id) {\n             let item = self.ev.tcx.hir.expect_item(node_id);\n-            self.ev.update(item.id, Some(AccessLevel::Reachable));\n+            self.ev.update(item.id, self.access_level);\n         }\n     }\n }\n@@ -483,7 +494,7 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n \n         if let Some(def_id) = ty_def_id {\n             if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(def_id) {\n-                self.ev.update(node_id, Some(AccessLevel::Reachable));\n+                self.ev.update(node_id, self.access_level);\n             }\n         }\n "}, {"sha": "c60f9293d58e71428481cec776465b558a81d418", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -994,7 +994,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 let lev_suggestion =\n                     match find_best_match_for_name(names, &ident.as_str(), None) {\n                         Some(name) => format!(\". Did you mean to use `{}`?\", name),\n-                        None => \"\".to_owned(),\n+                        None => String::new(),\n                     };\n                 let msg = match module {\n                     ModuleOrUniformRoot::Module(module) => {"}, {"sha": "1549634e9b590c91f9c3a9c27003165b0c7e1852", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1050,7 +1050,7 @@ impl<'a> DumpHandler<'a> {\n                     .iter()\n                     .any(|ct| *ct == CrateType::Executable);\n                 let mut out_name = if executable {\n-                    \"\".to_owned()\n+                    String::new()\n                 } else {\n                     \"lib\".to_owned()\n                 };"}, {"sha": "16dd27887faad8a254a269357e2772e570700d26", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "8f7ee11d575eee8412d08292704091a715149ad2", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -22,8 +22,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "540aac2c3383238f8408e5007ec0c22e93c56b1a", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "087b0fa543f0d61e5864565efd041a11b918b3a7", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "541f0564a01e2cfd82f1db1efdc24e8d75cfb3dd", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "32fb7002026eb3057f6e5d5505dc294cfbd7ff77", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"hermit\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c4afd1143fc21c952ed867de356bfc6d47ebf075", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "1cf214d09cc7cea47091c062ffae84dce09777ae", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -36,8 +36,8 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),"}, {"sha": "81c24fa10fac601e27ec091873da879c1223920a", "filename": "src/librustc_target/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c5e3385a91ca1bd70853c4fd1ba4414e78c7f4d4", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "c111d2ffe8b4aee12503c8fed8e28ce09857c198", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -22,8 +22,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "0f7b2ad7630e85145f1d6d1e6c87bcc699ec4d65", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "06abe0b2c9e4f3aca8a20a64451b743a2cb760d5", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -28,7 +28,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "44e611f04b48eab684130b00d8977479f8438f33", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a5f35d0a773675eabf6dda72ff033a3e351e9466", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "da70a3ad04d46b77249069b4b805767b4d8152e9", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -40,7 +40,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"asmjs\".to_string(),"}, {"sha": "15fd384f9ced389543633cb7e353659f721265a3", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "a298b550fea6570d45ad3e3cb488df3b65e17d9d", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"macos\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "6aa139893eba1af85a40ec35fa093a82298417c5", "filename": "src/librustc_target/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -31,7 +31,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "637bca71add71e22321100831017e1450d16ea7c", "filename": "src/librustc_target/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "fa02f0dd634519f7082b0ea633c0a8900885c81a", "filename": "src/librustc_target/spec/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "e11a455911d75b4441838e7d1f21abc4be62eac1", "filename": "src/librustc_target/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "775d80b0cfd7e345d7a2cbee1637b81e3d31fa20", "filename": "src/librustc_target/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"haiku\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a9c0c11aab5c6220d6e00d0138dd6fe6f0fc0357", "filename": "src/librustc_target/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "471d6bd475603739b9ec43b80e569f85c0af4649", "filename": "src/librustc_target/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "7608ccab66f3d17ac4f53075c3d5ddbc0e6f2b15", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -686,7 +686,7 @@ impl Default for TargetOptions {\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n-            features: \"\".to_string(),\n+            features: String::new(),\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n@@ -698,7 +698,7 @@ impl Default for TargetOptions {\n             function_sections: true,\n             dll_prefix: \"lib\".to_string(),\n             dll_suffix: \".so\".to_string(),\n-            exe_suffix: \"\".to_string(),\n+            exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,"}, {"sha": "0958a958986933d589232710c7e7fb9eda4e7e89", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -19,8 +19,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".to_string(),\n         arch: \"msp430\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "740222c9608054400464792a6e1901b732297cf9", "filename": "src/librustc_target/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "ce56cdd44bb2ff2c87d0937d79211d11b21be00c", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> TargetResult {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         arch: \"riscv32\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,"}, {"sha": "c663aa344daf8c080665be9ca22278df74b18763", "filename": "src/librustc_target/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "8bc233107b8bb5bf1c49616c65392bb7c76e2c5c", "filename": "src/librustc_target/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -30,7 +30,7 @@ pub fn target() -> TargetResult {\n         // just be confusing.\n         arch: \"sparc64\".to_string(),\n         target_os: \"solaris\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "bfac1ba45e1c7b89016270ebb7265f1da4add78a", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,8 +21,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "0207f38dea848b82c3c6907e84abc54903e5bd15", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -30,8 +30,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "bb1a42f0e289ec89109daa2f71c804059f660824", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -29,8 +29,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "1eac13afd9ae55e6c550ad3b7a9baa8a47242963", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,8 +21,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "60ad2d232493324c8208480036be3310fe76e6fb", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -43,7 +43,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "b4c09f86b8a97c96c34bd96513a8e20b02b5c38d", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -40,7 +40,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "6c368e09003a39afc7a9aeed62242944a3908735", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> Result<Target, String> {\n \n         // relatively self-explanatory!\n         exe_suffix: \".wasm\".to_string(),\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".wasm\".to_string(),\n         linker_is_gnu: false,\n \n@@ -65,7 +65,7 @@ pub fn target() -> Result<Target, String> {\n         // This is basically guaranteed to change in the future, don't rely on\n         // this. Use `not(target_os = \"emscripten\")` for now.\n         target_os: \"unknown\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "29049b1427570ce4616541f40baab69dd8c4e83c", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -77,10 +77,10 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"gcc\".to_string()),\n         dynamic_linking: true,\n         executables: true,\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"\".to_string(),\n+        staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         no_default_libraries: true,\n         target_family: Some(\"windows\".to_string()),"}, {"sha": "27879de9ab55678ab651c14655d7fe146373d186", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,10 +21,10 @@ pub fn opts() -> TargetOptions {\n         function_sections: true,\n         dynamic_linking: true,\n         executables: true,\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"\".to_string(),\n+        staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,"}, {"sha": "150590ba68d7656df426a5d97d1d1e301917c8bc", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"macos\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "e184ec2435878a5233f593728e79114a194af36b", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "62148a740dff56833b1495b1f823d7652c429d96", "filename": "src/librustc_target/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,8 +25,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })"}, {"sha": "ea67dc6bdef12fa8af328193aeb8ce21c2b84825", "filename": "src/librustc_target/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "af846653af7274eecad7aeef551bc9fd3bee3946", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -33,7 +33,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"rumprun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "beb23dce06249a6782d681f6237514ef947e16ed", "filename": "src/librustc_target/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"solaris\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a98fc80716bcb40d069941b374aa2b29658bab60", "filename": "src/librustc_target/spec/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"bitrig\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "16df9000683b7d9972b49bef979ac53def99ed68", "filename": "src/librustc_target/spec/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "4c14a321febe6159865635e03dc29608fe3d79c3", "filename": "src/librustc_target/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "4515b3308717eaa0234e5361ad067555c12575fe", "filename": "src/librustc_target/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "7e6b56866e4c70e250619cc65bdf2f7246831661", "filename": "src/librustc_target/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"haiku\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c879e94e6e65a67f83bcb29405318e94c9b03cdf", "filename": "src/librustc_target/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"hermit\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "de53c9e99ed86a5d900c2a0b211bb62bd3820fb7", "filename": "src/librustc_target/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "de22c77d1e0561b316e56c3a565afc6c858f83dd", "filename": "src/librustc_target/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "12a354b499efa871cae21abb7526ab824c29756a", "filename": "src/librustc_target/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"redox\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "d0778a729adb0c39a49cfb58fd62830f54f115bc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -371,7 +371,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     quantifier,\n                     bound,\n                     kind,\n-                    if required != 1 { \"s\" } else { \"\" },\n+                    if bound != 1 { \"s\" } else { \"\" },\n                 )\n             };\n "}, {"sha": "b2c324d260e64bcf7fe2dd8986650345de27b72e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1434,7 +1434,7 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         hir::ImplItemKind::Type(_) => ty::AssociatedKind::Type\n     };\n \n-    let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).skip(1).next()\n+    let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).nth(1)\n         .map(|node_item| node_item.map(|parent| parent.defaultness));\n \n     if let Some(parent) = parent {\n@@ -3471,7 +3471,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             displayable_field_names.sort();\n \n             let truncated_fields_error = if len <= 3 {\n-                \"\".to_string()\n+                String::new()\n             } else {\n                 format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 {\"\"} else {\"s\"})\n             };\n@@ -4783,7 +4783,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         err.span_suggestion_with_applicability(\n             span_semi,\n             \"consider removing this semicolon\",\n-            \"\".to_string(),\n+            String::new(),\n             Applicability::MachineApplicable);\n     }\n "}, {"sha": "52e6663792b26935f6fd704c524809a33eb8d00e", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -142,7 +142,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n                 .span_suggestion_short_with_applicability(\n                     span,\n                     \"remove it\",\n-                    \"\".to_string(),\n+                    String::new(),\n                     Applicability::MachineApplicable)\n                 .emit();\n             continue;"}, {"sha": "5c23d0f6b399083a1172e7ee631ca9d5f721fde1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -568,7 +568,7 @@ impl Clean<Item> for doctree::Module {\n         let name = if self.name.is_some() {\n             self.name.expect(\"No name provided\").clean(cx)\n         } else {\n-            \"\".to_string()\n+            String::new()\n         };\n \n         // maintain a stack of mod ids, for doc comment path resolution\n@@ -1760,7 +1760,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                 values: sig.skip_binder().inputs().iter().map(|t| {\n                     Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map_or(\"\".to_string(), |name| name.to_string()),\n+                        name: names.next().map_or(String::new(), |name| name.to_string()),\n                     }\n                 }).collect(),\n             },\n@@ -3596,7 +3596,7 @@ impl Clean<Item> for hir::ForeignItem {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n                     mutability: if mutbl {Mutable} else {Immutable},\n-                    expr: \"\".to_string(),\n+                    expr: String::new(),\n                 })\n             }\n             hir::ForeignItemKind::Type => {\n@@ -3628,7 +3628,7 @@ impl ToSource for syntax_pos::Span {\n         debug!(\"converting span {:?} to snippet\", self.clean(cx));\n         let sn = match cx.sess().source_map().span_to_snippet(*self) {\n             Ok(x) => x.to_string(),\n-            Err(_) => \"\".to_string()\n+            Err(_) => String::new()\n         };\n         debug!(\"got snippet {}\", sn);\n         sn\n@@ -3824,19 +3824,19 @@ impl Clean<Stability> for attr::Stability {\n             feature: self.feature.to_string(),\n             since: match self.level {\n                 attr::Stable {ref since} => since.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             deprecated_since: match self.rustc_depr {\n                 Some(attr::RustcDeprecation {ref since, ..}) => since.to_string(),\n-                _=> \"\".to_string(),\n+                _=> String::new(),\n             },\n             deprecated_reason: match self.rustc_depr {\n                 Some(ref depr) => depr.reason.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             unstable_reason: match self.level {\n                 attr::Unstable { reason: Some(ref reason), .. } => reason.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             issue: match self.level {\n                 attr::Unstable {issue, ..} => Some(issue),\n@@ -3855,8 +3855,8 @@ impl<'a> Clean<Stability> for &'a attr::Stability {\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext) -> Deprecation {\n         Deprecation {\n-            since: self.since.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n-            note: self.note.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n+            since: self.since.as_ref().map_or(String::new(), |s| s.to_string()),\n+            note: self.note.as_ref().map_or(String::new(), |s| s.to_string()),\n         }\n     }\n }"}, {"sha": "7643aade83b7df8f48c99db21990565fefe27631", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -620,7 +620,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n             let lt = match *l {\n                 Some(ref l) => format!(\"{} \", *l),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             };\n             let m = MutableSpace(mutability);\n             let amp = if f.alternate() {"}, {"sha": "582f31ce7c716620ff05e973024444984061ac2d", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -156,13 +156,13 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                 root_path = page.root_path,\n                 suffix=page.resource_suffix)\n     } else {\n-        \"\".to_owned()\n+        String::new()\n     },\n     content   = *t,\n     root_path = page.root_path,\n     css_class = page.css_class,\n     logo      = if layout.logo.is_empty() {\n-        \"\".to_string()\n+        String::new()\n     } else {\n         format!(\"<a href='{}{}/index.html'>\\\n                  <img src='{}' alt='logo' width='100'></a>\",\n@@ -173,7 +173,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     description = page.description,\n     keywords = page.keywords,\n     favicon   = if layout.favicon.is_empty() {\n-        \"\".to_string()\n+        String::new()\n     } else {\n         format!(r#\"<link rel=\"shortcut icon\" href=\"{}\">\"#, layout.favicon)\n     },"}, {"sha": "8fb3b570f8a4b38f83818e8e1e1bb99d7ece235d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -504,8 +504,8 @@ pub fn run(mut krate: clean::Crate,\n         local_sources: FxHashMap(),\n         issue_tracker_base_url: None,\n         layout: layout::Layout {\n-            logo: \"\".to_string(),\n-            favicon: \"\".to_string(),\n+            logo: String::new(),\n+            favicon: String::new(),\n             external_html: external_html.clone(),\n             krate: krate.name.clone(),\n         },\n@@ -2183,7 +2183,7 @@ fn shorter<'a>(s: Option<&'a str>) -> String {\n                 !chr.is_whitespace()\n             })\n         }).collect::<Vec<_>>().join(\"\\n\"),\n-        None => \"\".to_string()\n+        None => String::new()\n     }\n }\n \n@@ -2479,7 +2479,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        stab_docs = stab_docs,\n                        docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n                        class = myitem.type_(),\n-                       stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n+                       stab = myitem.stability_class().unwrap_or(String::new()),\n                        unsafety_flag = unsafety_flag,\n                        href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n                        title_type = myitem.type_(),"}, {"sha": "b0e7331e2b6513a20a55623300836c9303b19001", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -58,6 +58,8 @@ pub unsafe fn raw(m: &Mutex) -> c::PSRWLOCK {\n impl Mutex {\n     pub const fn new() -> Mutex {\n         Mutex {\n+            // This works because SRWLOCK_INIT is 0 (wrapped in a struct), so we are also properly\n+            // initializing an SRWLOCK here.\n             lock: AtomicUsize::new(0),\n             held: UnsafeCell::new(false),\n         }"}, {"sha": "e4b9e3216b13b7cf06c064a1d0276a5e2ca9be4e", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -184,7 +184,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n         Ok(..) => {\n             // Add this input file to the code map to make it available as\n             // dependency information, but don't enter it's contents\n-            cx.source_map().new_source_file(file.into(), \"\".to_string());\n+            cx.source_map().new_source_file(file.into(), String::new());\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         }"}, {"sha": "172a48ddba2d94382e011d6e4488c3b6addc2c85", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -230,7 +230,7 @@ fn trim_whitespace_prefix_and_push_line(lines: &mut Vec<String>, s: String, col:\n             if col < len {\n                 (&s[col..len]).to_string()\n             } else {\n-                \"\".to_string()\n+                String::new()\n             }\n         }\n         None => s,"}, {"sha": "725360b842d43822408b6d7828ac9c85c2044e15", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -684,7 +684,7 @@ impl<'a> Parser<'a> {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on Iterator.\n             let b = i.next()\n-                     .map_or(\"\".to_string(), |t| t.to_string());\n+                     .map_or(String::new(), |t| t.to_string());\n             i.enumerate().fold(b, |mut b, (i, a)| {\n                 if tokens.len() > 2 && i == tokens.len() - 2 {\n                     b.push_str(\", or \");\n@@ -786,7 +786,7 @@ impl<'a> Parser<'a> {\n         } else {\n             err.span_label(self.span, \"expected identifier\");\n             if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                err.span_suggestion(self.span, \"remove this comma\", \"\".into());\n+                err.span_suggestion(self.span, \"remove this comma\", String::new());\n             }\n         }\n         err\n@@ -2518,7 +2518,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion_short_with_applicability(\n                         self.span,\n                         \"remove this comma\",\n-                        \"\".to_owned(),\n+                        String::new(),\n                         Applicability::MachineApplicable\n                     );\n                     err.note(\"the base struct must always be the last field\");\n@@ -3485,7 +3485,7 @@ impl<'a> Parser<'a> {\n                 e.span_suggestion_short_with_applicability(\n                     match_span,\n                     \"try removing this `match`\",\n-                    \"\".to_owned(),\n+                    String::new(),\n                     Applicability::MaybeIncorrect // speculative\n                 );\n             }\n@@ -3862,7 +3862,7 @@ impl<'a> Parser<'a> {\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n-                        err.span_suggestion_short(sp, \"remove this comma\", \"\".into());\n+                        err.span_suggestion_short(sp, \"remove this comma\", String::new());\n                     }\n                     err.emit();\n                     break;\n@@ -3902,7 +3902,7 @@ impl<'a> Parser<'a> {\n                 err.multipart_suggestion(\n                     \"move the `..` to the end of the field list\",\n                     vec![\n-                        (etc_span, \"\".into()),\n+                        (etc_span, String::new()),\n                         (self.span, format!(\"{}.. }}\", if ate_comma { \"\" } else { \", \" })),\n                     ],\n                 );\n@@ -6210,7 +6210,7 @@ impl<'a> Parser<'a> {\n             if token_str == \";\" {\n                 let msg = \"consider removing this semicolon\";\n                 err.span_suggestion_short_with_applicability(\n-                    self.span, msg, \"\".to_string(), Applicability::MachineApplicable\n+                    self.span, msg, String::new(), Applicability::MachineApplicable\n                 );\n                 if !items.is_empty() {  // Issue #51603\n                     let previous_item = &items[items.len()-1];"}, {"sha": "8f91db8efa71a66a9096560dd73557040a29f0a3", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1030,7 +1030,7 @@ mod tests {\n         cm.new_source_file(PathBuf::from(\"blork.rs\").into(),\n                        \"first line.\\nsecond line\".to_string());\n         cm.new_source_file(PathBuf::from(\"empty.rs\").into(),\n-                       \"\".to_string());\n+                       String::new());\n         cm.new_source_file(PathBuf::from(\"blork2.rs\").into(),\n                        \"first line.\\nsecond line\".to_string());\n         cm"}, {"sha": "f7e0788a884c3a60586decd5d7e2d67c4db16344", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -102,7 +102,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 let deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n \n                 let mbps = if bs.mb_s == 0 {\n-                    \"\".into()\n+                    String::new()\n                 } else {\n                     format!(r#\", \"mib_per_second\": {}\"#, bs.mb_s)\n                 };"}, {"sha": "b9c565a9d3c23c590726725405e4f1bbf209aeff", "filename": "src/test/run-pass-fulldeps/auxiliary/proc_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -19,7 +19,7 @@ use proc_macro::*;\n \n #[proc_macro_attribute]\n pub fn attr_tru(_attr: TokenStream, item: TokenStream) -> TokenStream {\n-    let name = item.into_iter().skip(1).next().unwrap();\n+    let name = item.into_iter().nth(1).unwrap();\n     quote!(fn $name() -> bool { true })\n }\n "}, {"sha": "c4fc9ee53fd7fbde976b50d682d728cc48dbd5a5", "filename": "src/test/run-pass/command-before-exec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -24,7 +24,7 @@ use std::sync::Arc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n fn main() {\n-    if let Some(arg) = env::args().skip(1).next() {\n+    if let Some(arg) = env::args().nth(1) {\n         match &arg[..] {\n             \"test1\" => println!(\"hello2\"),\n             \"test2\" => assert_eq!(env::var(\"FOO\").unwrap(), \"BAR\"),"}, {"sha": "306256d53d38c6f4803748d70f1a4944d56f96b7", "filename": "src/test/run-pass/issue-50865-private-impl-trait/auxiliary/lib.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn bar<P>( // Error won't happen if \"bar\" is not generic\n+    _baz: P,\n+) {\n+    hide_foo()();\n+}\n+\n+fn hide_foo() -> impl Fn() { // Error won't happen if \"iterate\" hasn't impl Trait or has generics\n+    foo\n+}\n+\n+fn foo() { // Error won't happen if \"foo\" isn't used in \"iterate\" or has generics\n+}"}, {"sha": "bc347edf8a765b2c286b40cd4b81c0b9be0255a2", "filename": "src/test/run-pass/issue-50865-private-impl-trait/main.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lib.rs\n+\n+// Regression test for #50865.\n+// When using generics or specifying the type directly, this example\n+// codegens `foo` internally. However, when using a private `impl Trait`\n+// function which references another private item, `foo` (in this case)\n+// wouldn't be codegenned until main.rs used `bar`, as with impl Trait\n+// it is not cast to `fn()` automatically to satisfy e.g.\n+// `fn foo() -> fn() { ... }`.\n+\n+extern crate lib;\n+\n+fn main() {\n+    lib::bar(()); // Error won't happen if bar is called from same crate\n+}"}, {"sha": "eadd23896095da11d33f87f02b0b24a7d5f5d014", "filename": "src/test/ui/bastion-of-the-turbofish.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -36,6 +36,10 @@\n // My heart aches in sorrow, for I know I am defeated. Let this be a warning\n // to all those who come after. Here stands the bastion of the Turbofish.\n \n+// See https://github.com/rust-lang/rust/pull/53562\n+// and https://github.com/rust-lang/rfcs/pull/2527\n+// for context.\n+\n fn main() {\n     let (oh, woe, is, me) = (\"the\", \"Turbofish\", \"remains\", \"undefeated\");\n     let _: (bool, bool) = (oh<woe, is>(me));"}, {"sha": "6b54baefb1dd3b7ceb862001cd35a560d3916dc9", "filename": "src/test/ui/generic/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-impl-more-params-with-defaults.stderr?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected at most 2, found 3\n   --> $DIR/generic-impl-more-params-with-defaults.rs:23:5\n    |\n LL |     Vec::<isize, Heap, bool>::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type argument\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n \n error: aborting due to previous error\n "}, {"sha": "684a22ce45c927f34e09ed2a0deb02a90abf557f", "filename": "src/test/ui/generic/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected at most 2, found 3\n   --> $DIR/generic-type-more-params-with-defaults.rs:19:12\n    |\n LL |     let _: Vec<isize, Heap, bool>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type argument\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n \n error: aborting due to previous error\n "}, {"sha": "3785968df871ad292aa32947948b39832622da1f", "filename": "src/test/ui/lint/lints-in-foreign-macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -11,7 +11,8 @@\n // aux-build:lints-in-foreign-macros.rs\n // compile-pass\n \n-#![warn(unused_imports)]\n+#![warn(unused_imports)] //~ missing documentation for crate [missing_docs]\n+#![warn(missing_docs)]\n \n #[macro_use]\n extern crate lints_in_foreign_macros;\n@@ -24,5 +25,7 @@ mod a { foo!(); }\n mod b { bar!(); }\n mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n+baz!(pub fn undocumented() {}); //~ WARN: missing documentation for a function\n+baz2!(pub fn undocumented2() {}); //~ WARN: missing documentation for a function\n \n fn main() {}"}, {"sha": "2ddca7781231fb00e5e64ed10f119a3e1a1fd8e3", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -1,5 +1,5 @@\n warning: unused import: `std::string::ToString`\n-  --> $DIR/lints-in-foreign-macros.rs:20:16\n+  --> $DIR/lints-in-foreign-macros.rs:21:16\n    |\n LL |     () => {use std::string::ToString;} //~ WARN: unused import\n    |                ^^^^^^^^^^^^^^^^^^^^^\n@@ -10,18 +10,48 @@ LL | mod a { foo!(); }\n note: lint level defined here\n   --> $DIR/lints-in-foreign-macros.rs:14:9\n    |\n-LL | #![warn(unused_imports)]\n+LL | #![warn(unused_imports)] //~ missing documentation for crate [missing_docs]\n    |         ^^^^^^^^^^^^^^\n \n warning: unused import: `std::string::ToString`\n-  --> $DIR/lints-in-foreign-macros.rs:25:18\n+  --> $DIR/lints-in-foreign-macros.rs:26:18\n    |\n LL | mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused import: `std::string::ToString`\n-  --> $DIR/lints-in-foreign-macros.rs:26:19\n+  --> $DIR/lints-in-foreign-macros.rs:27:19\n    |\n LL | mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n \n+warning: missing documentation for crate\n+  --> $DIR/lints-in-foreign-macros.rs:14:1\n+   |\n+LL | / #![warn(unused_imports)] //~ missing documentation for crate [missing_docs]\n+LL | | #![warn(missing_docs)]\n+LL | |\n+LL | | #[macro_use]\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+   |\n+note: lint level defined here\n+  --> $DIR/lints-in-foreign-macros.rs:15:9\n+   |\n+LL | #![warn(missing_docs)]\n+   |         ^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+  --> $DIR/lints-in-foreign-macros.rs:28:6\n+   |\n+LL | baz!(pub fn undocumented() {}); //~ WARN: missing documentation for a function\n+   |      ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+  --> $DIR/lints-in-foreign-macros.rs:29:7\n+   |\n+LL | baz2!(pub fn undocumented2() {}); //~ WARN: missing documentation for a function\n+   |       ^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "db856a1dcf94fe4fc2defe721673bd1c76c5fd2e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -559,7 +559,7 @@ impl Config {\n             let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n \n             match strs.len() {\n-                1 => (strs.pop().unwrap(), \"\".to_owned()),\n+                1 => (strs.pop().unwrap(), String::new()),\n                 2 => {\n                     let end = strs.pop().unwrap();\n                     (strs.pop().unwrap(), end)"}, {"sha": "74f66c0a0516921deebd4d8d54e2993b4f35ecec", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -252,7 +252,7 @@ pub fn collect_lib_features(base_src_path: &Path) -> Features {\n     // add it to the set of known library features so we can still generate docs.\n     lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n         level: Status::Unstable,\n-        since: \"\".to_owned(),\n+        since: String::new(),\n         has_gate_test: false,\n         tracking_issue: None,\n     });"}, {"sha": "6b431ccda0883e9abc8d3a50bd12d86fc8857f4f", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727eabd68143e968d8826ee29b8ea7792d29fa96/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=727eabd68143e968d8826ee29b8ea7792d29fa96", "patch": "@@ -17,7 +17,6 @@\n //! * No trailing whitespace\n //! * No CR characters\n //! * No `TODO` or `XXX` directives\n-//! * A valid license header is at the top\n //! * No unexplained ` ```ignore ` or ` ```rust,ignore ` doc tests\n //!\n //! A number of these checks can be opted-out of with various directives like\n@@ -28,16 +27,6 @@ use std::io::prelude::*;\n use std::path::Path;\n \n const COLS: usize = 100;\n-const LICENSE: &'static str = \"\\\n-Copyright <year> The Rust Project Developers. See the COPYRIGHT\n-file at the top-level directory of this distribution and at\n-http://rust-lang.org/COPYRIGHT.\n-\n-Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-<LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-option. This file may not be copied, modified, or distributed\n-except according to those terms.\";\n \n const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest; try one:\n \n@@ -168,52 +157,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 trailing_new_lines = 0;\n             }\n         }\n-        if !licenseck(file, &contents) {\n-            tidy_error!(bad, \"{}: incorrect license\", file.display());\n-        }\n         match trailing_new_lines {\n             0 => tidy_error!(bad, \"{}: missing trailing newline\", file.display()),\n             1 | 2 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n     })\n }\n-\n-fn licenseck(file: &Path, contents: &str) -> bool {\n-    if contents.contains(\"ignore-license\") {\n-        return true\n-    }\n-    let exceptions = [\n-        \"libstd/sync/mpsc/mpsc_queue.rs\",\n-        \"libstd/sync/mpsc/spsc_queue.rs\",\n-    ];\n-    if exceptions.iter().any(|f| file.ends_with(f)) {\n-        return true\n-    }\n-\n-    // Skip the BOM if it's there\n-    let bom = \"\\u{feff}\";\n-    let contents = if contents.starts_with(bom) {&contents[3..]} else {contents};\n-\n-    // See if the license shows up in the first 100 lines\n-    let lines = contents.lines().take(100).collect::<Vec<_>>();\n-    lines.windows(LICENSE.lines().count()).any(|window| {\n-        let offset = if window.iter().all(|w| w.starts_with(\"//\")) {\n-            2\n-        } else if window.iter().all(|w| w.starts_with('#')) {\n-            1\n-        } else if window.iter().all(|w| w.starts_with(\" *\")) {\n-            2\n-        } else {\n-            return false\n-        };\n-        window.iter().map(|a| a[offset..].trim())\n-              .zip(LICENSE.lines()).all(|(a, b)| {\n-            a == b || match b.find(\"<year>\") {\n-                Some(i) => a.starts_with(&b[..i]) && a.ends_with(&b[i+6..]),\n-                None => false,\n-            }\n-        })\n-    })\n-\n-}"}]}