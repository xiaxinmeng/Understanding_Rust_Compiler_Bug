{"sha": "2c2add6e0259efd9b375c849d1bde187972b65b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMmFkZDZlMDI1OWVmZDliMzc1Yzg0OWQxYmRlMTg3OTcyYjY1YjM=", "commit": {"author": {"name": "Kevin Zajler", "email": "kevin.zajler@gmx.de", "date": "2018-07-08T16:07:17Z"}, "committer": {"name": "Kevin Zajler", "email": "kevin.zajler@gmx.de", "date": "2018-07-08T16:07:17Z"}, "message": "Update std::ascii::ASCIIExt deprecation notes", "tree": {"sha": "9343244fe9f96fff100d1bd29fa8647d9fefda76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9343244fe9f96fff100d1bd29fa8647d9fefda76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2add6e0259efd9b375c849d1bde187972b65b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2add6e0259efd9b375c849d1bde187972b65b3", "html_url": "https://github.com/rust-lang/rust/commit/2c2add6e0259efd9b375c849d1bde187972b65b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2add6e0259efd9b375c849d1bde187972b65b3/comments", "author": {"login": "zajlerke", "id": 40733193, "node_id": "MDQ6VXNlcjQwNzMzMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/40733193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zajlerke", "html_url": "https://github.com/zajlerke", "followers_url": "https://api.github.com/users/zajlerke/followers", "following_url": "https://api.github.com/users/zajlerke/following{/other_user}", "gists_url": "https://api.github.com/users/zajlerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/zajlerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zajlerke/subscriptions", "organizations_url": "https://api.github.com/users/zajlerke/orgs", "repos_url": "https://api.github.com/users/zajlerke/repos", "events_url": "https://api.github.com/users/zajlerke/events{/privacy}", "received_events_url": "https://api.github.com/users/zajlerke/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zajlerke", "id": 40733193, "node_id": "MDQ6VXNlcjQwNzMzMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/40733193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zajlerke", "html_url": "https://github.com/zajlerke", "followers_url": "https://api.github.com/users/zajlerke/followers", "following_url": "https://api.github.com/users/zajlerke/following{/other_user}", "gists_url": "https://api.github.com/users/zajlerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/zajlerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zajlerke/subscriptions", "organizations_url": "https://api.github.com/users/zajlerke/orgs", "repos_url": "https://api.github.com/users/zajlerke/repos", "events_url": "https://api.github.com/users/zajlerke/events{/privacy}", "received_events_url": "https://api.github.com/users/zajlerke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0315cfd9750db7793b83bc59dfd353c5dd1624", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0315cfd9750db7793b83bc59dfd353c5dd1624", "html_url": "https://github.com/rust-lang/rust/commit/0c0315cfd9750db7793b83bc59dfd353c5dd1624"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "376410677346cea1be104a402d4334d0e734880f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2c2add6e0259efd9b375c849d1bde187972b65b3/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2add6e0259efd9b375c849d1bde187972b65b3/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=2c2add6e0259efd9b375c849d1bde187972b65b3", "patch": "@@ -163,7 +163,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphabetic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphabetic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphabetic(&self) -> bool { unimplemented!(); }\n@@ -176,7 +178,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_uppercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_uppercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_uppercase(&self) -> bool { unimplemented!(); }\n@@ -189,7 +193,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_lowercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_lowercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_lowercase(&self) -> bool { unimplemented!(); }\n@@ -203,7 +209,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphanumeric)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphanumeric)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphanumeric(&self) -> bool { unimplemented!(); }\n@@ -216,7 +224,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_digit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_digit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_digit(&self) -> bool { unimplemented!(); }\n@@ -230,7 +240,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_hexdigit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_hexdigit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n@@ -248,7 +260,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_punctuation)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_punctuation)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_punctuation(&self) -> bool { unimplemented!(); }\n@@ -261,7 +275,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_graphic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_graphic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_graphic(&self) -> bool { unimplemented!(); }\n@@ -291,7 +307,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_whitespace)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_whitespace)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_whitespace(&self) -> bool { unimplemented!(); }\n@@ -304,7 +322,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_control)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_control)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_control(&self) -> bool { unimplemented!(); }"}]}