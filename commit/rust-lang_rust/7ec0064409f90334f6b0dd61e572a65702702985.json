{"sha": "7ec0064409f90334f6b0dd61e572a65702702985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzAwNjQ0MDlmOTAzMzRmNmIwZGQ2MWU1NzJhNjU3MDI3MDI5ODU=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-11T11:41:42Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-18T07:15:43Z"}, "message": "Remove AdtOrTrait", "tree": {"sha": "4a97c35ea8f6defd4718fdfdc801f3646105de7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a97c35ea8f6defd4718fdfdc801f3646105de7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec0064409f90334f6b0dd61e572a65702702985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec0064409f90334f6b0dd61e572a65702702985", "html_url": "https://github.com/rust-lang/rust/commit/7ec0064409f90334f6b0dd61e572a65702702985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec0064409f90334f6b0dd61e572a65702702985/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e986d1504e6fd6dc1fc9b64f5fb9eac2bef952a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e986d1504e6fd6dc1fc9b64f5fb9eac2bef952a", "html_url": "https://github.com/rust-lang/rust/commit/7e986d1504e6fd6dc1fc9b64f5fb9eac2bef952a"}], "stats": {"total": 89, "additions": 39, "deletions": 50}, "files": [{"sha": "5137a16e64c7a8532c8975e6d956e4dad1b35d29", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7ec0064409f90334f6b0dd61e572a65702702985", "patch": "@@ -186,6 +186,22 @@ impl ModuleDef {\n \n         module.visibility_of(db, self)\n     }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n+        match self {\n+            ModuleDef::Adt(it) => Some(it.name(db)),\n+            ModuleDef::Trait(it) => Some(it.name(db)),\n+            ModuleDef::Function(it) => Some(it.name(db)),\n+            ModuleDef::EnumVariant(it) => Some(it.name(db)),\n+            ModuleDef::TypeAlias(it) => Some(it.name(db)),\n+\n+            ModuleDef::Module(it) => it.name(db),\n+            ModuleDef::Const(it) => it.name(db),\n+            ModuleDef::Static(it) => it.name(db),\n+\n+            ModuleDef::BuiltinType(it) => Some(it.as_name()),\n+        }\n+    }\n }\n \n pub use hir_def::{\n@@ -1382,8 +1398,8 @@ impl Type {\n     }\n \n     /// Returns a flattened list of all ADTs and Traits mentioned in the type\n-    pub fn flattened_type_items(&self, db: &dyn HirDatabase) -> Vec<AdtOrTrait> {\n-        fn push_new_item(item: AdtOrTrait, acc: &mut Vec<AdtOrTrait>) {\n+    pub fn flattened_type_items(&self, db: &dyn HirDatabase) -> Vec<ModuleDef> {\n+        fn push_new_item(item: ModuleDef, acc: &mut Vec<ModuleDef>) {\n             if !acc.contains(&item) {\n                 acc.push(item);\n             }\n@@ -1392,7 +1408,7 @@ impl Type {\n         fn push_bounds(\n             db: &dyn HirDatabase,\n             predicates: &[GenericPredicate],\n-            acc: &mut Vec<AdtOrTrait>,\n+            acc: &mut Vec<ModuleDef>,\n         ) {\n             for p in predicates.iter() {\n                 match p {\n@@ -1407,13 +1423,13 @@ impl Type {\n         }\n \n         // TypeWalk::walk does not preserve items order!\n-        fn walk_substs(db: &dyn HirDatabase, substs: &Substs, acc: &mut Vec<AdtOrTrait>) {\n+        fn walk_substs(db: &dyn HirDatabase, substs: &Substs, acc: &mut Vec<ModuleDef>) {\n             for ty in substs.iter() {\n                 walk_type(db, ty, acc);\n             }\n         }\n \n-        fn walk_type(db: &dyn HirDatabase, ty: &Ty, acc: &mut Vec<AdtOrTrait>) {\n+        fn walk_type(db: &dyn HirDatabase, ty: &Ty, acc: &mut Vec<ModuleDef>) {\n             match ty.strip_references() {\n                 Ty::Apply(ApplicationTy { ctor, parameters, .. }) => {\n                     match ctor {\n@@ -1468,7 +1484,7 @@ impl Type {\n             }\n         }\n \n-        let mut res: Vec<AdtOrTrait> = Vec::new(); // not a Set to preserve the order\n+        let mut res: Vec<ModuleDef> = Vec::new(); // not a Set to preserve the order\n         walk_type(db, &self.ty.value, &mut res);\n         res\n     }\n@@ -1580,26 +1596,3 @@ pub trait HasVisibility {\n         vis.is_visible_from(db.upcast(), module.id)\n     }\n }\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum AdtOrTrait {\n-    Adt(Adt),\n-    Trait(Trait),\n-}\n-impl_froms!(AdtOrTrait: Adt, Trait);\n-\n-impl AdtOrTrait {\n-    pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        match self {\n-            AdtOrTrait::Adt(adt) => adt.module(db),\n-            AdtOrTrait::Trait(trait_) => trait_.module(db),\n-        }\n-    }\n-\n-    pub fn name(self, db: &dyn HirDatabase) -> Name {\n-        match self {\n-            AdtOrTrait::Adt(adt) => adt.name(db),\n-            AdtOrTrait::Trait(trait_) => trait_.name(db),\n-        }\n-    }\n-}"}, {"sha": "3364a822f431cf3067589fe2f3824451802edd87", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7ec0064409f90334f6b0dd61e572a65702702985", "patch": "@@ -51,10 +51,10 @@ mod has_source;\n \n pub use crate::{\n     code_model::{\n-        Adt, AdtOrTrait, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate,\n-        CrateDependency, DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasAttrs, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef,\n-        Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n+        DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function, GenericDef, HasAttrs,\n+        HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "c7bb1e69f8a575765da2aeb9b82d7dbb25904577", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=7ec0064409f90334f6b0dd61e572a65702702985", "patch": "@@ -321,15 +321,6 @@ impl ToNav for hir::Adt {\n     }\n }\n \n-impl ToNav for hir::AdtOrTrait {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        match self {\n-            hir::AdtOrTrait::Adt(adt) => adt.to_nav(db),\n-            hir::AdtOrTrait::Trait(trait_) => trait_.to_nav(db),\n-        }\n-    }\n-}\n-\n impl ToNav for hir::AssocItem {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         match self {"}, {"sha": "045713519e50c6493c64f7816809af769972a58d", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec0064409f90334f6b0dd61e572a65702702985/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=7ec0064409f90334f6b0dd61e572a65702702985", "patch": "@@ -1,8 +1,8 @@\n use std::iter::once;\n \n use hir::{\n-    Adt, AdtOrTrait, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource,\n-    HirDisplay, Module, ModuleDef, ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n+    Module, ModuleDef, ModuleSource, Semantics,\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n@@ -13,7 +13,9 @@ use ra_ide_db::{\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n-    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav},\n+    display::{\n+        macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav, TryToNav,\n+    },\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n@@ -238,9 +240,11 @@ fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n                 .ty(db)\n                 .flattened_type_items(db)\n                 .into_iter()\n-                .map(|it| HoverGotoTypeData {\n-                    mod_path: adt_or_trait_mod_path(db, &it),\n-                    nav: it.to_nav(db),\n+                .filter_map(|it| {\n+                    Some(HoverGotoTypeData {\n+                        mod_path: mod_path(db, &it)?,\n+                        nav: it.try_to_nav(db)?,\n+                    })\n                 })\n                 .collect_vec();\n \n@@ -294,8 +298,9 @@ fn determine_mod_path(db: &RootDatabase, module: Module, name: Option<String>) -\n         .join(\"::\")\n }\n \n-fn adt_or_trait_mod_path(db: &RootDatabase, item: &AdtOrTrait) -> String {\n-    determine_mod_path(db, item.module(db), Some(item.name(db).to_string()))\n+// returns None only for ModuleDef::BuiltinType\n+fn mod_path(db: &RootDatabase, item: &ModuleDef) -> Option<String> {\n+    Some(determine_mod_path(db, item.module(db)?, item.name(db).map(|name| name.to_string())))\n }\n \n fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {"}]}