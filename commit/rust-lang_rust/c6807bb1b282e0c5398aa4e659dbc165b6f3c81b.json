{"sha": "c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ODA3YmIxYjI4MmUwYzUzOThhYTRlNjU5ZGJjMTY1YjZmM2M4MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T14:29:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T14:29:59Z"}, "message": "Auto merge of #52159 - SimonSapin:alloc-prelude, r=alexcrichton\n\nAdd the `alloc::prelude` module\n\nIt contains the re-exports that are in `std::prelude::v1` but not in `core::prelude::v1`.\n\nCalling it prelude is somewhat of a misnomer since (unlike those modules in `std` or `core`) its contents are never implicitly imported in modules. Rather it is intended to be used with an explicit glob import like `use alloc::prelude::*;`. However there is precedent for the same misnomer with `std::io::prelude`, for example.\n\nThis new module is unstable with the same feature name as the `alloc` care. They are proposed for stabilization together in RFC https://github.com/rust-lang/rfcs/pull/2480.", "tree": {"sha": "bf6777921022043285a1cb13f97b903b7ffbfdb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6777921022043285a1cb13f97b903b7ffbfdb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "html_url": "https://github.com/rust-lang/rust/commit/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c30acc7187fe5ab9ca8a34411bb89bfe241a0662", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30acc7187fe5ab9ca8a34411bb89bfe241a0662", "html_url": "https://github.com/rust-lang/rust/commit/c30acc7187fe5ab9ca8a34411bb89bfe241a0662"}, {"sha": "5b795cf57e42aa31da7cb175d8ff27633085b5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b795cf57e42aa31da7cb175d8ff27633085b5d7", "html_url": "https://github.com/rust-lang/rust/commit/5b795cf57e42aa31da7cb175d8ff27633085b5d7"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "ef619527e064a34d2f8f387881619570393cde5d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "patch": "@@ -169,7 +169,7 @@ pub mod collections;\n pub mod sync;\n pub mod rc;\n pub mod raw_vec;\n-\n+pub mod prelude;\n pub mod borrow;\n pub mod fmt;\n pub mod slice;"}, {"sha": "53b5e93a66e26d923d25d9d1d7ea94f2e0f8807c", "filename": "src/liballoc/prelude.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Fliballoc%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Fliballoc%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fprelude.rs?ref=c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The alloc Prelude\n+//!\n+//! The purpose of this module is to alleviate imports of commonly-used\n+//! items of the `alloc` crate by adding a glob import to the top of modules:\n+//!\n+//! ```\n+//! # #![allow(unused_imports)]\n+//! # #![feature(alloc)]\n+//! extern crate alloc;\n+//! use alloc::prelude::*;\n+//! ```\n+\n+#![unstable(feature = \"alloc\", issue = \"27783\")]\n+\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use borrow::ToOwned;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use boxed::Box;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use slice::SliceConcatExt;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use string::{String, ToString};\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use vec::Vec;"}, {"sha": "53763da5e288646d3216c7cb142a9159479dbd87", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6807bb1b282e0c5398aa4e659dbc165b6f3c81b/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=c6807bb1b282e0c5398aa4e659dbc165b6f3c81b", "patch": "@@ -12,42 +12,68 @@\n //!\n //! See the [module-level documentation](../index.html) for more.\n \n+\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Re-exported core operators\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n+#[doc(no_inline)]\n+pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n+#[doc(no_inline)]\n+pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Re-exported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use mem::drop;\n+#[doc(no_inline)]\n+pub use mem::drop;\n \n // Re-exported types and traits\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use boxed::Box;\n+#[doc(no_inline)]\n+pub use clone::Clone;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use borrow::ToOwned;\n+#[doc(no_inline)]\n+pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use clone::Clone;\n+#[doc(no_inline)]\n+pub use convert::{AsRef, AsMut, Into, From};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+#[doc(no_inline)]\n+pub use default::Default;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use convert::{AsRef, AsMut, Into, From};\n+#[doc(no_inline)]\n+pub use iter::{Iterator, Extend, IntoIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use default::Default;\n+#[doc(no_inline)]\n+pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::{Iterator, Extend, IntoIterator};\n+#[doc(no_inline)]\n+pub use option::Option::{self, Some, None};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n+#[doc(no_inline)]\n+pub use result::Result::{self, Ok, Err};\n+\n+\n+// The file so far is equivalent to src/libcore/prelude/v1.rs,\n+// and below to src/liballoc/prelude.rs.\n+// Those files are duplicated rather than using glob imports\n+// because we want docs to show these re-exports as pointing to within `std`.\n+\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use option::Option::{self, Some, None};\n+#[doc(no_inline)]\n+pub use boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use result::Result::{self, Ok, Err};\n+#[doc(no_inline)]\n+pub use borrow::ToOwned;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use slice::SliceConcatExt;\n+#[doc(no_inline)]\n+pub use slice::SliceConcatExt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use string::{String, ToString};\n+#[doc(no_inline)]\n+pub use string::{String, ToString};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use vec::Vec;\n+#[doc(no_inline)]\n+pub use vec::Vec;"}]}