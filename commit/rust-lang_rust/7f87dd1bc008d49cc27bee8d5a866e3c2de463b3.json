{"sha": "7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmODdkZDFiYzAwOGQ0OWNjMjdiZWU4ZDVhODY2ZTNjMmRlNDYzYjM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T19:49:46Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T19:49:46Z"}, "message": "Some small readability improvements", "tree": {"sha": "1951551190e515820d1b6a87da95c0f076fd54f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1951551190e515820d1b6a87da95c0f076fd54f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "html_url": "https://github.com/rust-lang/rust/commit/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b957a17c1abba979aa41234ce0993a61030e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b957a17c1abba979aa41234ce0993a61030e67", "html_url": "https://github.com/rust-lang/rust/commit/90b957a17c1abba979aa41234ce0993a61030e67"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "5c63eebf595f9e59d32690b46488513db72ddade", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "patch": "@@ -553,8 +553,7 @@ impl char {\n     pub fn is_alphabetic(self) -> bool {\n         match self {\n             'a'..='z' | 'A'..='Z' => true,\n-            c if c > '\\x7f' => derived_property::Alphabetic(c),\n-            _ => false,\n+            c => c > '\\x7f' && derived_property::Alphabetic(c),\n         }\n     }\n \n@@ -585,8 +584,7 @@ impl char {\n     pub fn is_lowercase(self) -> bool {\n         match self {\n             'a'..='z' => true,\n-            c if c > '\\x7f' => derived_property::Lowercase(c),\n-            _ => false,\n+            c => c > '\\x7f' && derived_property::Lowercase(c),\n         }\n     }\n \n@@ -617,8 +615,7 @@ impl char {\n     pub fn is_uppercase(self) -> bool {\n         match self {\n             'A'..='Z' => true,\n-            c if c > '\\x7f' => derived_property::Uppercase(c),\n-            _ => false,\n+            c => c > '\\x7f' && derived_property::Uppercase(c),\n         }\n     }\n \n@@ -646,8 +643,7 @@ impl char {\n     pub fn is_whitespace(self) -> bool {\n         match self {\n             ' ' | '\\x09'..='\\x0d' => true,\n-            c if c > '\\x7f' => property::White_Space(c),\n-            _ => false,\n+            c => c > '\\x7f' && property::White_Space(c),\n         }\n     }\n \n@@ -744,8 +740,7 @@ impl char {\n     pub fn is_numeric(self) -> bool {\n         match self {\n             '0'..='9' => true,\n-            c if c > '\\x7f' => general_category::N(c),\n-            _ => false,\n+            c => c > '\\x7f' && general_category::N(c),\n         }\n     }\n "}, {"sha": "1037da14b5f627371d6678d799639d023590dee2", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f87dd1bc008d49cc27bee8d5a866e3c2de463b3/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=7f87dd1bc008d49cc27bee8d5a866e3c2de463b3", "patch": "@@ -296,12 +296,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n         loop {\n             // get the haystack after the last character found\n-            let bytes = if let Some(slice) = self.haystack.as_bytes()\n-                                                 .get(self.finger..self.finger_back) {\n-                slice\n-            } else {\n-                return None;\n-            };\n+            let bytes = self.haystack.as_bytes().get(self.finger..self.finger_back)?;\n             // the last byte of the utf8 encoded needle\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n             if let Some(index) = memchr::memchr(last_byte, bytes) {"}]}