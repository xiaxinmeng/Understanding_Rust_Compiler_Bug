{"sha": "47df71722923474014f26510d59968f063d8ecdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZGY3MTcyMjkyMzQ3NDAxNGYyNjUxMGQ1OTk2OGYwNjNkOGVjZGQ=", "commit": {"author": {"name": "PizzaIter", "email": "pizzaiter@gmail.com", "date": "2017-10-02T15:23:24Z"}, "committer": {"name": "PizzaIter", "email": "pizzaiter@gmail.com", "date": "2017-10-03T12:27:42Z"}, "message": "Add lints `transmute_int_to_*`", "tree": {"sha": "dbfebe4fd2dc0954c978f04bf6127fc7526eb3cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbfebe4fd2dc0954c978f04bf6127fc7526eb3cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47df71722923474014f26510d59968f063d8ecdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47df71722923474014f26510d59968f063d8ecdd", "html_url": "https://github.com/rust-lang/rust/commit/47df71722923474014f26510d59968f063d8ecdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47df71722923474014f26510d59968f063d8ecdd/comments", "author": {"login": "pizzaiter", "id": 31826657, "node_id": "MDQ6VXNlcjMxODI2NjU3", "avatar_url": "https://avatars.githubusercontent.com/u/31826657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pizzaiter", "html_url": "https://github.com/pizzaiter", "followers_url": "https://api.github.com/users/pizzaiter/followers", "following_url": "https://api.github.com/users/pizzaiter/following{/other_user}", "gists_url": "https://api.github.com/users/pizzaiter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pizzaiter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pizzaiter/subscriptions", "organizations_url": "https://api.github.com/users/pizzaiter/orgs", "repos_url": "https://api.github.com/users/pizzaiter/repos", "events_url": "https://api.github.com/users/pizzaiter/events{/privacy}", "received_events_url": "https://api.github.com/users/pizzaiter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pizzaiter", "id": 31826657, "node_id": "MDQ6VXNlcjMxODI2NjU3", "avatar_url": "https://avatars.githubusercontent.com/u/31826657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pizzaiter", "html_url": "https://github.com/pizzaiter", "followers_url": "https://api.github.com/users/pizzaiter/followers", "following_url": "https://api.github.com/users/pizzaiter/following{/other_user}", "gists_url": "https://api.github.com/users/pizzaiter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pizzaiter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pizzaiter/subscriptions", "organizations_url": "https://api.github.com/users/pizzaiter/orgs", "repos_url": "https://api.github.com/users/pizzaiter/repos", "events_url": "https://api.github.com/users/pizzaiter/events{/privacy}", "received_events_url": "https://api.github.com/users/pizzaiter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f36f214a536d57e6f7f4e71d9499d99f5e54e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f36f214a536d57e6f7f4e71d9499d99f5e54e8f", "html_url": "https://github.com/rust-lang/rust/commit/6f36f214a536d57e6f7f4e71d9499d99f5e54e8f"}], "stats": {"total": 166, "additions": 165, "deletions": 1}, "files": [{"sha": "933ec1a8e70c1be4d29e1ca83531ac7cf7d78365", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47df71722923474014f26510d59968f063d8ecdd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47df71722923474014f26510d59968f063d8ecdd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=47df71722923474014f26510d59968f063d8ecdd", "patch": "@@ -544,6 +544,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n+        transmute::TRANSMUTE_INT_TO_CHAR,\n+        transmute::TRANSMUTE_INT_TO_BOOL,\n+        transmute::TRANSMUTE_INT_TO_FLOAT,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,"}, {"sha": "a97c24166b48dc5ecfcd71195ec58056dc0c2d1e", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/47df71722923474014f26510d59968f063d8ecdd/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47df71722923474014f26510d59968f063d8ecdd/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=47df71722923474014f26510d59968f063d8ecdd", "patch": "@@ -1,6 +1,8 @@\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;\n+use std::borrow::Cow;\n+use syntax::ast;\n use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use utils::{sugg, opt_def_id};\n \n@@ -76,11 +78,73 @@ declare_lint! {\n     \"transmutes from a pointer to a reference type\"\n }\n \n+/// **What it does:** Checks for transmutes from an integer to a `char`.\n+///\n+/// **Why is this bad?** Not every integer is a unicode scalar value.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: char = std::mem::transmute(x); // where x: u32\n+/// // should be:\n+/// let _: Option<char> = std::char::from_u32(x);\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_CHAR,\n+    Warn,\n+    \"transmutes from an integer to a `char`\"\n+}\n+\n+/// **What it does:** Checks for transmutes from an integer to a `bool`.\n+///\n+/// **Why is this bad?** This might result in an invalid in-memory representation of a `bool`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: bool = std::mem::transmute(x); // where x: u8\n+/// // should be:\n+/// let _: bool = x != 0;\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_BOOL,\n+    Warn,\n+    \"transmutes from an integer to a `bool`\"\n+}\n+\n+/// **What it does:** Checks for transmutes from an integer to a float.\n+///\n+/// **Why is this bad?** This might result in an invalid in-memory representation of a float.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: f32 = std::mem::transmute(x); // where x: u32\n+/// // should be:\n+/// let _: f32 = f32::from_bits(x);\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_FLOAT,\n+    Warn,\n+    \"transmutes from an integer to a float\"\n+}\n+\n pub struct Transmute;\n \n impl LintPass for Transmute {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(CROSSPOINTER_TRANSMUTE, TRANSMUTE_PTR_TO_REF, USELESS_TRANSMUTE, WRONG_TRANSMUTE)\n+        lint_array!(\n+            CROSSPOINTER_TRANSMUTE,\n+            TRANSMUTE_PTR_TO_REF,\n+            USELESS_TRANSMUTE,\n+            WRONG_TRANSMUTE,\n+            TRANSMUTE_INT_TO_CHAR,\n+            TRANSMUTE_INT_TO_BOOL,\n+            TRANSMUTE_INT_TO_FLOAT\n+        )\n     }\n }\n \n@@ -177,6 +241,50 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n                                 },\n                             ),\n+                            (&ty::TyInt(ast::IntTy::I32), &ty::TyChar) |\n+                            (&ty::TyUint(ast::UintTy::U32), &ty::TyChar) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_CHAR,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let arg = if let ty::TyInt(_) = from_ty.sty {\n+                                        arg.as_ty(ty::TyUint(ast::UintTy::U32))\n+                                    } else {\n+                                        arg\n+                                    };\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({})\", arg.to_string()));\n+                                }\n+                            ),\n+                            (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) |\n+                            (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_BOOL,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n+                                    db.span_suggestion(e.span, \"consider using\", sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string());\n+                                }\n+                            ),\n+                            (&ty::TyInt(_), &ty::TyFloat(_)) |\n+                            (&ty::TyUint(_), &ty::TyFloat(_)) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_FLOAT,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let arg = if let ty::TyInt(int_ty) = from_ty.sty {\n+                                        arg.as_ty(format!(\"u{}\", int_ty.bit_width().map_or_else(|| \"size\".to_string(), |v| v.to_string())))\n+                                    } else {\n+                                        arg\n+                                    };\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"{}::from_bits({})\", to_ty, arg.to_string()));\n+                                }\n+                            ),\n                             _ => return,\n                         };\n                     }"}, {"sha": "81582b5a15fa2a505ce0b69584331bda6b2d244b", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47df71722923474014f26510d59968f063d8ecdd/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47df71722923474014f26510d59968f063d8ecdd/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=47df71722923474014f26510d59968f063d8ecdd", "patch": "@@ -118,4 +118,21 @@ fn crosspointer() {\n     }\n }\n \n+#[warn(transmute_int_to_char)]\n+fn int_to_char() {\n+    let _: char = unsafe { std::mem::transmute(0_u32) };\n+    let _: char = unsafe { std::mem::transmute(0_i32) };\n+}\n+\n+#[warn(transmute_int_to_bool)]\n+fn int_to_bool() {\n+    let _: bool = unsafe { std::mem::transmute(0_u8) };\n+}\n+\n+#[warn(transmute_int_to_float)]\n+fn int_to_float() {\n+    let _: f32 = unsafe { std::mem::transmute(0_u32) };\n+    let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+}\n+\n fn main() { }"}, {"sha": "c81ec5260be237f0df506e8ffc767808cdbd41b5", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47df71722923474014f26510d59968f063d8ecdd/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47df71722923474014f26510d59968f063d8ecdd/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=47df71722923474014f26510d59968f063d8ecdd", "patch": "@@ -154,3 +154,39 @@ error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n 117 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: transmute from a `u32` to a `char`\n+   --> $DIR/transmute.rs:123:28\n+    |\n+123 |     let _: char = unsafe { std::mem::transmute(0_u32) };\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32)`\n+    |\n+    = note: `-D transmute-int-to-char` implied by `-D warnings`\n+\n+error: transmute from a `i32` to a `char`\n+   --> $DIR/transmute.rs:124:28\n+    |\n+124 |     let _: char = unsafe { std::mem::transmute(0_i32) };\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32)`\n+\n+error: transmute from a `u8` to a `bool`\n+   --> $DIR/transmute.rs:129:28\n+    |\n+129 |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n+    |\n+    = note: `-D transmute-int-to-bool` implied by `-D warnings`\n+\n+error: transmute from a `u32` to a `f32`\n+   --> $DIR/transmute.rs:134:27\n+    |\n+134 |     let _: f32 = unsafe { std::mem::transmute(0_u32) };\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n+    |\n+    = note: `-D transmute-int-to-float` implied by `-D warnings`\n+\n+error: transmute from a `i32` to a `f32`\n+   --> $DIR/transmute.rs:135:27\n+    |\n+135 |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n+"}]}