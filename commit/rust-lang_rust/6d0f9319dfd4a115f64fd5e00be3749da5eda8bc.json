{"sha": "6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGY5MzE5ZGZkNGExMTVmNjRmZDVlMDBiZTM3NDlkYTVlZGE4YmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-10T18:18:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:30Z"}, "message": "refactor `ParamEnv::empty(Reveal)` into two distinct methods\n\n- `ParamEnv::empty()` -- does not reveal all, good for typeck\n- `ParamEnv::reveal_all()` -- does, good for trans\n- `param_env.with_reveal_all()` -- converts an existing parameter environment", "tree": {"sha": "eb01c85e38cb513a2fabc6689f7e64040ed34851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb01c85e38cb513a2fabc6689f7e64040ed34851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "html_url": "https://github.com/rust-lang/rust/commit/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d377d10a1c86152a49b46f446557c150fda655d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d377d10a1c86152a49b46f446557c150fda655d", "html_url": "https://github.com/rust-lang/rust/commit/1d377d10a1c86152a49b46f446557c150fda655d"}], "stats": {"total": 149, "additions": 77, "deletions": 72}, "files": [{"sha": "5f0c2d1e76bcc2ab7b0379ffa92b5c5e12b99ee9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -28,7 +28,7 @@ use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n-use traits::{self, ObligationCause, PredicateObligations, Reveal};\n+use traits::{self, ObligationCause, PredicateObligations};\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::BTreeMap;\n@@ -563,7 +563,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         debug!(\"fully_normalize_associated_types_in(t={:?})\", value);\n \n-        let param_env = ty::ParamEnv::empty(Reveal::All);\n+        let param_env = ty::ParamEnv::reveal_all();\n         let value = self.erase_regions(value);\n \n         if !value.has_projections() {\n@@ -593,7 +593,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n \n         self.infer_ctxt().enter(|infcx| {\n-            value.trans_normalize(&infcx, env.reveal_all())\n+            value.trans_normalize(&infcx, env.with_reveal_all())\n        })\n     }\n }"}, {"sha": "4fa6594df169cd4af5f33efb3b9172410b6e7cba", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -34,7 +34,6 @@ use lint::levels::{LintLevelSets, LintLevelsBuilder};\n use middle::privacy::AccessLevels;\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use session::{config, early_error, Session};\n-use traits::Reveal;\n use ty::{self, TyCtxt, Ty};\n use ty::layout::{LayoutError, LayoutOf, TyLayout};\n use util::nodemap::FxHashMap;\n@@ -1055,7 +1054,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut cx = LateContext {\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n-        param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+        param_env: ty::ParamEnv::empty(),\n         access_levels,\n         lint_sess: LintSession::new(&tcx.sess.lint_store),\n         last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,"}, {"sha": "06926b1648df5ed67acb09754865599c3e64e088", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -16,7 +16,7 @@\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;\n-use traits::{self, Normalized, SelectionContext, Obligation, ObligationCause, Reveal};\n+use traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n use traits::IntercrateMode;\n use traits::select::IntercrateAmbiguityCause;\n use ty::{self, Ty, TyCtxt};\n@@ -125,7 +125,7 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n     // empty environment.\n-    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+    let param_env = ty::ParamEnv::empty();\n \n     let a_impl_header = with_fresh_ty_vars(selcx, param_env, a_def_id);\n     let b_impl_header = with_fresh_ty_vars(selcx, param_env, b_def_id);"}, {"sha": "b8455b97fa41f3eb7f514475eff5ceb954df1376", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -21,7 +21,6 @@ use super::{\n     TraitNotObjectSafe,\n     ConstEvalFailure,\n     PredicateObligation,\n-    Reveal,\n     SelectionContext,\n     SelectionError,\n     ObjectSafetyViolation,\n@@ -140,7 +139,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // FIXME: I'm just not taking associated types at all here.\n                 // Eventually I'll need to implement param-env-aware\n                 // `\u0393\u2081 \u22a6 \u03c6\u2081 => \u0393\u2082 \u22a6 \u03c6\u2082` logic.\n-                let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                let param_env = ty::ParamEnv::empty();\n                 if let Ok(_) = self.can_sub(param_env, error, implication) {\n                     debug!(\"error_implies: {:?} -> {:?} -> {:?}\", cond, error, implication);\n                     return true"}, {"sha": "4450c60b68d3b6a8f68d92b8845545ae71d50d3f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -695,7 +695,7 @@ fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            predicates);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = ty::ParamEnv::empty(Reveal::All);\n+        let param_env = ty::ParamEnv::reveal_all();\n         let mut selcx = SelectionContext::new(&infcx);\n         let mut fulfill_cx = FulfillmentContext::new();\n         let cause = ObligationCause::dummy();"}, {"sha": "728702ef61fd10cfe95da5fb49546ccd7eaab954", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -777,7 +777,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             // value in order to work, so we can clear out the param env and get better\n             // caching. (If the current param env is inconsistent, we don't care what happens).\n             debug!(\"evaluate_trait_predicate_recursively({:?}) - in global\", obligation);\n-            obligation.param_env = ty::ParamEnv::empty(obligation.param_env.reveal);\n+            obligation.param_env = obligation.param_env.without_caller_bounds();\n         }\n \n         let stack = self.push_stack(previous_stack, &obligation);"}, {"sha": "5ea089abb8e86ac6be8e413515d73671ab23f737", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -26,7 +26,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use ty::subst::{Subst, Substs};\n-use traits::{self, Reveal, ObligationCause};\n+use traits::{self, ObligationCause};\n use traits::select::IntercrateAmbiguityCause;\n use ty::{self, TyCtxt, TypeFoldable};\n use syntax_pos::DUMMY_SP;\n@@ -132,7 +132,7 @@ pub fn find_associated_item<'a, 'tcx>(\n     match ancestors.defs(tcx, item.name, item.kind, trait_def_id).next() {\n         Some(node_item) => {\n             let substs = tcx.infer_ctxt().enter(|infcx| {\n-                let param_env = ty::ParamEnv::empty(Reveal::All);\n+                let param_env = ty::ParamEnv::reveal_all();\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n                 let substs = translate_substs(&infcx, param_env, impl_data.impl_def_id,\n                                               substs, node_item.node);"}, {"sha": "a2d98a456f49a0ea39b00b7e2eb7b226208b3bb9", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -425,5 +425,3 @@ BraceStructTypeFoldableImpl! {\n         obligations\n     } where T: TypeFoldable<'tcx>\n }\n-\n-"}, {"sha": "ebb058c5d292904fa3a8d03493451f711459631e", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n                 _ => {\n                     if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n                         let ty = substs.type_at(0);\n-                        if ty.needs_drop(tcx, ty::ParamEnv::empty(traits::Reveal::All)) {\n+                        if ty.needs_drop(tcx, ty::ParamEnv::reveal_all()) {\n                             debug!(\" => nontrivial drop glue\");\n                             ty::InstanceDef::DropGlue(def_id, Some(ty))\n                         } else {"}, {"sha": "9ce232ba17303638dbc936fd6eb55ba5b407e304", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -2058,7 +2058,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        let param_env = self.param_env.reveal_all();\n+        let param_env = self.param_env.with_reveal_all();\n         let ty = self.tcx.normalize_associated_type_in_env(&ty, param_env);\n         let details = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyLayout {\n@@ -2084,9 +2084,9 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        let param_env = self.param_env.reveal_all();\n-        let ty = self.tcx.normalize_associated_type_in_env(&ty, param_env.reveal_all());\n-        let details = self.tcx.layout_raw(param_env.reveal_all().and(ty))?;\n+        let param_env = self.param_env.with_reveal_all();\n+        let ty = self.tcx.normalize_associated_type_in_env(&ty, param_env);\n+        let details = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyLayout {\n             ty,\n             details"}, {"sha": "40d7aa9556df9598c3e682dbf2a55a34c779b051", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -1420,7 +1420,7 @@ impl<'tcx> ParamEnv<'tcx> {\n             }\n         } else {\n             ParamEnvAnd {\n-                param_env: ParamEnv::empty(self.reveal),\n+                param_env: self.without_caller_bounds(),\n                 value,\n             }\n         }\n@@ -1829,7 +1829,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         expr_did: DefId,\n     ) -> Option<Discr<'tcx>> {\n-        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n+        let param_env = ParamEnv::empty();\n         let repr_type = self.repr.discr_type();\n         let bit_size = layout::Integer::from_attr(tcx, repr_type).size().bits();\n         let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);"}, {"sha": "72e7d16b64dcec2da31f3930c3e0b23eb7112107", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -15,7 +15,6 @@\n \n use hir::def_id::DefId;\n use middle::const_val::ConstVal;\n-use traits::Reveal;\n use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n@@ -473,7 +472,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                     ConstVal::Value(Value::ByVal(prim)) => Ok(prim.to_u64().unwrap()),\n                     ConstVal::Unevaluated(def_id, substs) => {\n                         // FIXME(eddyb) get the right param_env.\n-                        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                        let param_env = ty::ParamEnv::empty();\n                         match tcx.lift_to_global(&substs) {\n                             Some(substs) => {\n                                 let instance = ty::Instance::resolve("}, {"sha": "ca6817d992b6e2e41f67e7e4967054095d16bbf1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -183,9 +183,22 @@ pub enum Representability {\n \n impl<'tcx> ty::ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n-    /// there are no where clauses in scope.\n-    pub fn empty(reveal: Reveal) -> Self {\n-        Self::new(ty::Slice::empty(), reveal, ty::UniverseIndex::ROOT)\n+    /// there are no where clauses in scope. Hidden types (like `impl\n+    /// Trait`) are left hidden, so this is suitable for ordinary\n+    /// type-checking.\n+    pub fn empty() -> Self {\n+        Self::new(ty::Slice::empty(), Reveal::UserFacing, ty::UniverseIndex::ROOT)\n+    }\n+\n+    /// Construct a trait environment with no where clauses in scope\n+    /// where the values of all `impl Trait` and other hidden types\n+    /// are revealed. This is suitable for monomorphized, post-typeck\n+    /// environments like trans or doing optimizations.\n+    ///\n+    /// NB. If you want to have predicates in scope, use `ParamEnv::new`,\n+    /// or invoke `param_env.with_reveal_all()`.\n+    pub fn reveal_all() -> Self {\n+        Self::new(ty::Slice::empty(), Reveal::All, ty::UniverseIndex::ROOT)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n@@ -202,10 +215,15 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n     /// the desired behavior during trans and certain other special\n     /// contexts; normally though we want to use `Reveal::UserFacing`,\n     /// which is the default.\n-    pub fn reveal_all(self) -> Self {\n+    pub fn with_reveal_all(self) -> Self {\n         ty::ParamEnv { reveal: Reveal::All, ..self }\n     }\n \n+    /// Returns this same environment but with no caller bounds.\n+    pub fn without_caller_bounds(self) -> Self {\n+        ty::ParamEnv { caller_bounds: ty::Slice::empty(), ..self }\n+    }\n+\n     pub fn can_type_implement_copy<'a>(self,\n                                        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>, span: Span)"}, {"sha": "06610609ebdbddb3c6036ddb4f53e34a6ed20cac", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -18,7 +18,7 @@ use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n use rustc::middle::region;\n use rustc::ty::subst::Subst;\n-use rustc::traits::{ObligationCause, Reveal};\n+use rustc::traits::ObligationCause;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::maps::OnDiskCache;\n use rustc::infer::{self, InferOk, InferResult};\n@@ -153,7 +153,7 @@ fn test_env<F>(source_string: &str,\n                              |tcx| {\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut region_scope_tree = region::ScopeTree::default();\n-            let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+            let param_env = ty::ParamEnv::empty();\n             body(Env {\n                 infcx: &infcx,\n                 region_scope_tree: &mut region_scope_tree,"}, {"sha": "031033f7208e1dff4767e43afdec28e79e56ffbb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -33,7 +33,7 @@ use rustc::hir::def_id::DefId;\n use rustc::cfg;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n-use rustc::traits::{self, Reveal};\n+use rustc::traits;\n use rustc::hir::map as hir_map;\n use util::nodemap::NodeSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -525,7 +525,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n-        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+        let param_env = ty::ParamEnv::empty();\n         if !ty.moves_by_default(cx.tcx, param_env, item.span) {\n             return;\n         }"}, {"sha": "d766ea3e2bd0d233c417e87f6a21d3fc1fa04b01", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -949,8 +949,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n     pub fn const_eval(&self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n         let param_env = if self.tcx.is_static(gid.instance.def_id()).is_some() {\n-            use rustc::traits;\n-            ty::ParamEnv::empty(traits::Reveal::All)\n+            ty::ParamEnv::reveal_all()\n         } else {\n             self.param_env\n         };"}, {"sha": "561500a3f3c5f69b5f83adb4ac629c57bac73775", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -196,7 +196,6 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::interpret::{Value, PrimVal, AllocId, Pointer};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::traits;\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n@@ -383,7 +382,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 instance,\n                 promoted: None,\n             };\n-            let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+            let param_env = ty::ParamEnv::reveal_all();\n \n             match tcx.const_eval(param_env.and(cid)) {\n                 Ok(val) => collect_const(tcx, val, instance.substs, &mut neighbors),\n@@ -654,7 +653,7 @@ fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     if let ty::TyFnDef(def_id, substs) = ty.sty {\n         let instance = ty::Instance::resolve(tcx,\n-                                             ty::ParamEnv::empty(traits::Reveal::All),\n+                                             ty::ParamEnv::reveal_all(),\n                                              def_id,\n                                              substs).unwrap();\n         visit_instance_use(tcx, instance, is_direct_call, output);\n@@ -776,7 +775,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         let type_has_metadata = |ty: Ty<'tcx>| -> bool {\n             use syntax_pos::DUMMY_SP;\n-            if ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::empty(traits::Reveal::All)) {\n+            if ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n                 return false;\n             }\n             let tail = tcx.struct_tail(ty);\n@@ -859,7 +858,7 @@ fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let methods = methods.iter().cloned().filter_map(|method| method)\n                 .map(|(def_id, substs)| ty::Instance::resolve(\n                         tcx,\n-                        ty::ParamEnv::empty(traits::Reveal::All),\n+                        ty::ParamEnv::reveal_all(),\n                         def_id,\n                         substs).unwrap())\n                 .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n@@ -1013,7 +1012,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n \n         let start_instance = Instance::resolve(\n             self.tcx,\n-            ty::ParamEnv::empty(traits::Reveal::All),\n+            ty::ParamEnv::reveal_all(),\n             start_def_id,\n             self.tcx.mk_substs(iter::once(Kind::from(main_ret_ty)))\n         ).unwrap();\n@@ -1062,7 +1061,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     }\n \n                     let instance = ty::Instance::resolve(tcx,\n-                                                         ty::ParamEnv::empty(traits::Reveal::All),\n+                                                         ty::ParamEnv::reveal_all(),\n                                                          method.def_id,\n                                                          callee_substs).unwrap();\n \n@@ -1120,7 +1119,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         output,\n         param_substs: instance.substs,\n     }.visit_mir(&mir);\n-    let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+    let param_env = ty::ParamEnv::reveal_all();\n     for (i, promoted) in mir.promoted.iter().enumerate() {\n         use rustc_data_structures::indexed_vec::Idx;\n         let cid = GlobalId {\n@@ -1155,7 +1154,7 @@ fn collect_const<'a, 'tcx>(\n \n     let val = match constant.val {\n         ConstVal::Unevaluated(def_id, substs) => {\n-            let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+            let param_env = ty::ParamEnv::reveal_all();\n             let substs = tcx.trans_apply_param_substs(param_substs,\n                                                         &substs);\n             let instance = ty::Instance::resolve(tcx,"}, {"sha": "4c9789782a6e1dd020beaacf5cb54002cbeccdd2", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -154,7 +154,7 @@ pub fn resolve_drop_in_place<'a, 'tcx>(\n {\n     let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n     let substs = tcx.intern_substs(&[ty.into()]);\n-    Instance::resolve(tcx, ty::ParamEnv::empty(traits::Reveal::All), def_id, substs).unwrap()\n+    Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n }\n \n pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -168,7 +168,7 @@ pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n     });\n \n-    match tcx.trans_fulfill_obligation( (ty::ParamEnv::empty(traits::Reveal::All), trait_ref)) {\n+    match tcx.trans_fulfill_obligation( (ty::ParamEnv::reveal_all(), trait_ref)) {\n         traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n             tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }"}, {"sha": "94446a98e63fe1c46969f365c77f817c9f9353f9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n-use rustc::traits::{self, Reveal};\n+use rustc::traits;\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n@@ -1237,7 +1237,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             }\n             let ty = mir.return_ty();\n             tcx.infer_ctxt().enter(|infcx| {\n-                let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                let param_env = ty::ParamEnv::empty();\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n                 fulfillment_cx.register_bound(&infcx,"}, {"sha": "356ad9ec11bb70c0b6e4883e8d22af3c0eb690c0", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -34,7 +34,6 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::subst::Substs;\n-use rustc::traits::Reveal;\n use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n@@ -87,7 +86,7 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         in_static: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n-        param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+        param_env: ty::ParamEnv::empty(),\n         identity_substs: Substs::empty(),\n         result: ItemLocalSet(),\n     };"}, {"sha": "1dcf349e23bd882028b1cd37a63f0828e48c1712", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -25,7 +25,6 @@ use type_of::LayoutLlvmExt;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::LayoutOf;\n-use rustc::traits;\n use rustc::ty::subst::Substs;\n use rustc_back::PanicStrategy;\n \n@@ -185,7 +184,7 @@ pub fn resolve_and_get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         cx,\n         ty::Instance::resolve(\n             cx.tcx,\n-            ty::ParamEnv::empty(traits::Reveal::All),\n+            ty::ParamEnv::reveal_all(),\n             def_id,\n             substs\n         ).unwrap()"}, {"sha": "c71c0cc0ebf2c9ee3a98b25a649b6d0bfd5004c0", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -25,7 +25,6 @@ use declare;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n@@ -40,15 +39,15 @@ use syntax_pos::{Span, DUMMY_SP};\n pub use context::CodegenCx;\n \n pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.needs_drop(tcx, ty::ParamEnv::empty(traits::Reveal::All))\n+    ty.needs_drop(tcx, ty::ParamEnv::reveal_all())\n }\n \n pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::empty(traits::Reveal::All))\n+    ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all())\n }\n \n pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_freeze(tcx, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n+    ty.is_freeze(tcx, ty::ParamEnv::reveal_all(), DUMMY_SP)\n }\n \n /*"}, {"sha": "1f2c3cc883c682fcf3e3283ce434d11fb6091115", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -14,7 +14,6 @@ use llvm::{ContextRef, ModuleRef, ValueRef};\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::traits;\n use debuginfo;\n use callee;\n use base;\n@@ -435,7 +434,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n \n     pub fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n         use syntax_pos::DUMMY_SP;\n-        if ty.is_sized(self.tcx.at(DUMMY_SP), ty::ParamEnv::empty(traits::Reveal::All)) {\n+        if ty.is_sized(self.tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n             return false;\n         }\n \n@@ -464,7 +463,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for &'a CodegenCx<'a, 'tcx> {\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        self.tcx.layout_of(ty::ParamEnv::empty(traits::Reveal::All).and(ty))\n+        self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n             .unwrap_or_else(|e| match e {\n                 LayoutError::SizeOverflow(_) => self.sess().fatal(&e.to_string()),\n                 _ => bug!(\"failed to get layout for `{}`: {}\", ty, e)"}, {"sha": "606c1396c1dafa589fc74e7d79c259122657e9ba", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -12,7 +12,6 @@ use llvm::{self, ValueRef, BasicBlockRef};\n use rustc::middle::lang_items;\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf};\n-use rustc::traits;\n use rustc::mir;\n use abi::{Abi, FnType, ArgType, PassMode};\n use base;\n@@ -419,7 +418,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 let (instance, mut llfn) = match callee.layout.ty.sty {\n                     ty::TyFnDef(def_id, substs) => {\n                         (Some(ty::Instance::resolve(bx.cx.tcx,\n-                                                    ty::ParamEnv::empty(traits::Reveal::All),\n+                                                    ty::ParamEnv::reveal_all(),\n                                                     def_id,\n                                                     substs).unwrap()),\n                          None)"}, {"sha": "977c7c983d6f2458dd4eb0e08b54897de84f2837", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -12,7 +12,6 @@ use llvm::{self, ValueRef};\n use rustc::middle::const_val::{ConstVal, ConstEvalErr};\n use rustc_mir::interpret::{read_target_uint, const_val_field};\n use rustc::hir::def_id::DefId;\n-use rustc::traits;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::mir::interpret::{Allocation, GlobalId, MemoryPointer, PrimVal, Value as MiriValue};\n@@ -126,7 +125,7 @@ pub fn trans_static_initializer<'a, 'tcx>(\n         instance,\n         promoted: None\n     };\n-    let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+    let param_env = ty::ParamEnv::reveal_all();\n     cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc_id = cx\n@@ -152,7 +151,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         match constant.val {\n             ConstVal::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n-                let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+                let param_env = ty::ParamEnv::reveal_all();\n                 let instance = ty::Instance::resolve(tcx, param_env, def_id, substs).unwrap();\n                 let cid = GlobalId {\n                     instance,\n@@ -172,7 +171,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     ) -> Result<MiriValue, ConstEvalErr<'tcx>> {\n         match constant.literal {\n             mir::Literal::Promoted { index } => {\n-                let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+                let param_env = ty::ParamEnv::reveal_all();\n                 let cid = mir::interpret::GlobalId {\n                     instance: self.instance,\n                     promoted: Some(index),\n@@ -201,7 +200,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 let values: Result<Vec<ValueRef>, _> = (0..fields).map(|field| {\n                     let field = const_val_field(\n                         bx.tcx(),\n-                        ty::ParamEnv::empty(traits::Reveal::All),\n+                        ty::ParamEnv::reveal_all(),\n                         self.instance,\n                         None,\n                         mir::Field::new(field as usize),"}, {"sha": "b6459b624104fd038e8e7875433226ba0a7d78df", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -501,7 +501,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ty::TraitContainer(_) => tcx.mk_self_type()\n         };\n         let self_arg_ty = *tcx.fn_sig(method.def_id).input(0).skip_binder();\n-        let param_env = ty::ParamEnv::empty(Reveal::All);\n+        let param_env = ty::ParamEnv::reveal_all();\n \n         tcx.infer_ctxt().enter(|infcx| {\n             let self_arg_ty = tcx.liberate_late_bound_regions(\n@@ -759,7 +759,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+        let param_env = ty::ParamEnv::empty();\n         let inh = Inherited::new(infcx, impl_c.def_id);\n         let infcx = &inh.infcx;\n "}, {"sha": "f33536227a0ba4308b255d92cab1f31c8bed1857", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -16,7 +16,7 @@ use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{self, Reveal, ObligationCause};\n+use rustc::traits::{self, ObligationCause};\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n \n@@ -126,7 +126,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         // it did the wrong thing, so I chose to preserve existing\n         // behavior, since it ought to be simply more\n         // conservative. -nmatsakis\n-        let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty(Reveal::UserFacing));\n+        let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n \n         infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env);\n         Ok(())"}, {"sha": "48591998a1fb8972eeccfb76dae25aa578374fe9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -3997,7 +3997,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprRepeat(ref element, count) => {\n             let count_def_id = tcx.hir.body_owner_def_id(count);\n-            let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n+            let param_env = ty::ParamEnv::empty();\n             let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n             let instance = ty::Instance::resolve(\n                 tcx.global_tcx(),"}, {"sha": "ea90c35cb8f2ef548608a8dca7be8ae12e14092d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "patch": "@@ -110,7 +110,7 @@ use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::traits::{FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n+use rustc::traits::{FulfillmentContext, ObligationCause, ObligationCauseCode};\n use session::{CompileIncomplete, config};\n use util::common::time;\n \n@@ -158,7 +158,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 actual: Ty<'tcx>)\n                                 -> bool {\n     tcx.infer_ctxt().enter(|ref infcx| {\n-        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+        let param_env = ty::ParamEnv::empty();\n         let mut fulfill_cx = FulfillmentContext::new();\n         match infcx.at(&cause, param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, .. }) => {"}]}