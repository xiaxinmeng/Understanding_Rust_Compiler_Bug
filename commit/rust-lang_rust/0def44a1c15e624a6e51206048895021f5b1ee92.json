{"sha": "0def44a1c15e624a6e51206048895021f5b1ee92", "node_id": "C_kwDOAAsO6NoAKDBkZWY0NGExYzE1ZTYyNGE2ZTUxMjA2MDQ4ODk1MDIxZjViMWVlOTI", "commit": {"author": {"name": "Evan Typanski", "email": "evantypanski@gmail.com", "date": "2022-05-12T23:06:23Z"}, "committer": {"name": "Evan Typanski", "email": "evantypanski@gmail.com", "date": "2022-05-12T23:15:08Z"}, "message": "Catch other thinning allocations using Ty", "tree": {"sha": "b60cd8fe5eeef83e859838112f012d89cd902efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b60cd8fe5eeef83e859838112f012d89cd902efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0def44a1c15e624a6e51206048895021f5b1ee92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0def44a1c15e624a6e51206048895021f5b1ee92", "html_url": "https://github.com/rust-lang/rust/commit/0def44a1c15e624a6e51206048895021f5b1ee92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0def44a1c15e624a6e51206048895021f5b1ee92/comments", "author": {"login": "evantypanski", "id": 22875724, "node_id": "MDQ6VXNlcjIyODc1NzI0", "avatar_url": "https://avatars.githubusercontent.com/u/22875724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evantypanski", "html_url": "https://github.com/evantypanski", "followers_url": "https://api.github.com/users/evantypanski/followers", "following_url": "https://api.github.com/users/evantypanski/following{/other_user}", "gists_url": "https://api.github.com/users/evantypanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/evantypanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evantypanski/subscriptions", "organizations_url": "https://api.github.com/users/evantypanski/orgs", "repos_url": "https://api.github.com/users/evantypanski/repos", "events_url": "https://api.github.com/users/evantypanski/events{/privacy}", "received_events_url": "https://api.github.com/users/evantypanski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "evantypanski", "id": 22875724, "node_id": "MDQ6VXNlcjIyODc1NzI0", "avatar_url": "https://avatars.githubusercontent.com/u/22875724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evantypanski", "html_url": "https://github.com/evantypanski", "followers_url": "https://api.github.com/users/evantypanski/followers", "following_url": "https://api.github.com/users/evantypanski/following{/other_user}", "gists_url": "https://api.github.com/users/evantypanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/evantypanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evantypanski/subscriptions", "organizations_url": "https://api.github.com/users/evantypanski/orgs", "repos_url": "https://api.github.com/users/evantypanski/repos", "events_url": "https://api.github.com/users/evantypanski/events{/privacy}", "received_events_url": "https://api.github.com/users/evantypanski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631b4ee7a26e4e68469a607376005eb4064b3e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/631b4ee7a26e4e68469a607376005eb4064b3e6f", "html_url": "https://github.com/rust-lang/rust/commit/631b4ee7a26e4e68469a607376005eb4064b3e6f"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "6c231fa25101ad4e3a762a01ba1293bbd23a6a42", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0def44a1c15e624a6e51206048895021f5b1ee92/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0def44a1c15e624a6e51206048895021f5b1ee92/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=0def44a1c15e624a6e51206048895021f5b1ee92", "patch": "@@ -2,9 +2,10 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_errors::Applicability;\n-use rustc_hir::{self as hir, def, def_id::DefId, PrimTy, QPath, TyKind};\n+use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n+use rustc_typeck::hir_ty_to_ty;\n \n use super::{utils, REDUNDANT_ALLOCATION};\n \n@@ -54,7 +55,8 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     };\n     let inner_span = match qpath_generic_tys(inner_qpath).next() {\n         Some(ty) => {\n-            if alloc_makes_pointer_thin(cx, ty) {\n+            // Reallocation of a fat pointer causes it to become thin\n+            if !hir_ty_to_ty(cx.tcx, ty).is_sized(cx.tcx.at(ty.span), cx.param_env) {\n                 return false;\n             }\n             ty.span\n@@ -109,20 +111,3 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     }\n     true\n }\n-\n-/// Returns `true` if the allocation would make `hir_ty` go from fat to thin.\n-fn alloc_makes_pointer_thin(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) -> bool {\n-    match &hir_ty.kind {\n-        TyKind::TraitObject(..) => true,\n-        TyKind::Path(ty_qpath) => {\n-            let ty_res = cx.qpath_res(ty_qpath, hir_ty.hir_id);\n-            if let def::Res::PrimTy(prim_ty) = ty_res {\n-                if matches!(prim_ty, PrimTy::Str) {\n-                    return true;\n-                }\n-            }\n-            false\n-        },\n-        _ => false,\n-    }\n-}"}, {"sha": "cf7d8c6e349af2c685037126830a6bf0ac2eb029", "filename": "tests/ui/redundant_allocation.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0def44a1c15e624a6e51206048895021f5b1ee92/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0def44a1c15e624a6e51206048895021f5b1ee92/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=0def44a1c15e624a6e51206048895021f5b1ee92", "patch": "@@ -98,21 +98,38 @@ mod box_dyn {\n }\n \n // https://github.com/rust-lang/rust-clippy/issues/8604\n-mod box_str {\n+mod box_fat_ptr {\n     use std::boxed::Box;\n+    use std::path::Path;\n     use std::rc::Rc;\n     use std::sync::Arc;\n \n+    pub struct DynSized {\n+        foo: [usize],\n+    }\n+\n     struct S {\n         a: Box<Box<str>>,\n         b: Rc<Box<str>>,\n         c: Arc<Box<str>>,\n+\n+        e: Box<Box<[usize]>>,\n+        f: Box<Box<Path>>,\n+        g: Box<Box<DynSized>>,\n     }\n \n-    pub fn test_box(_: Box<Box<str>>) {}\n-    pub fn test_rc(_: Rc<Box<str>>) {}\n-    pub fn test_arc(_: Arc<Box<str>>) {}\n-    pub fn test_rc_box(_: Rc<Box<Box<str>>>) {}\n+    pub fn test_box_str(_: Box<Box<str>>) {}\n+    pub fn test_rc_str(_: Rc<Box<str>>) {}\n+    pub fn test_arc_str(_: Arc<Box<str>>) {}\n+\n+    pub fn test_box_slice(_: Box<Box<[usize]>>) {}\n+    pub fn test_box_path(_: Box<Box<Path>>) {}\n+    pub fn test_box_custom(_: Box<Box<DynSized>>) {}\n+\n+    pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+    pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+    pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+    pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n }\n \n fn main() {}"}, {"sha": "fab1b069fcbc72462394b367508cb6f34137c22d", "filename": "tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0def44a1c15e624a6e51206048895021f5b1ee92/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0def44a1c15e624a6e51206048895021f5b1ee92/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=0def44a1c15e624a6e51206048895021f5b1ee92", "patch": "@@ -144,13 +144,40 @@ LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n    = help: consider using just `Rc<Box<dyn T>>` or `Box<Box<dyn T>>`\n \n error: usage of `Rc<Box<Box<str>>>`\n-  --> $DIR/redundant_allocation.rs:115:27\n+  --> $DIR/redundant_allocation.rs:129:31\n    |\n-LL |     pub fn test_rc_box(_: Rc<Box<Box<str>>>) {}\n-   |                           ^^^^^^^^^^^^^^^^^\n+LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+   |                               ^^^^^^^^^^^^^^^^^\n    |\n    = note: `Box<Box<str>>` is already on the heap, `Rc<Box<Box<str>>>` makes an extra allocation\n    = help: consider using just `Rc<Box<str>>` or `Box<Box<str>>`\n \n-error: aborting due to 17 previous errors\n+error: usage of `Rc<Box<Box<[usize]>>>`\n+  --> $DIR/redundant_allocation.rs:130:33\n+   |\n+LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<[usize]>>` is already on the heap, `Rc<Box<Box<[usize]>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<[usize]>>` or `Box<Box<[usize]>>`\n+\n+error: usage of `Rc<Box<Box<Path>>>`\n+  --> $DIR/redundant_allocation.rs:131:32\n+   |\n+LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+   |                                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<Path>>` is already on the heap, `Rc<Box<Box<Path>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<Path>>` or `Box<Box<Path>>`\n+\n+error: usage of `Rc<Box<Box<DynSized>>>`\n+  --> $DIR/redundant_allocation.rs:132:34\n+   |\n+LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<DynSized>>` is already on the heap, `Rc<Box<Box<DynSized>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<DynSized>>` or `Box<Box<DynSized>>`\n+\n+error: aborting due to 20 previous errors\n "}]}