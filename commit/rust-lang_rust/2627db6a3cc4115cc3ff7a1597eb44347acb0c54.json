{"sha": "2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjdkYjZhM2NjNDExNWNjM2ZmN2ExNTk3ZWI0NDM0N2FjYjBjNTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-08-22T18:52:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-22T18:52:50Z"}, "message": "Rollup merge of #86747 - FabianWolff:issue-86653, r=GuillaumeGomez\n\nImprove wording of the `drop_bounds` lint\n\nThis PR addresses #86653. The issue is sort of a false positive of the `drop_bounds` lint, but I would argue that the best solution for #86653 is simply a rewording of the warning message and lint description, because even if the lint is _technically_ wrong, it still forces the programmer to think about what they are doing, and they can always use `#[allow(drop_bounds)]` if they think that they really need the `Drop` bound.\n\nThere are two issues with the current warning message and lint description:\n- First, it says that `Drop` bounds are \"useless\", which is technically incorrect because they actually do have the effect of allowing you e.g. to call methods that also have a `Drop` bound on their generic arguments for some reason. I have changed the wording to emphasize not that the bound is \"useless\", but that it is most likely not what was intended.\n- Second, it claims that `std::mem::needs_drop` detects whether a type has a destructor. But I think this is also technically wrong: The `Drop` bound says whether the type has a destructor or not, whereas `std::mem::needs_drop` also takes nested types with destructors into account, even if the top-level type does not itself have one (although I'm not 100% sure about the exact terminology here, i.e. whether the \"drop glue\" of the top-level type counts as a destructor or not).\n\ncc `@jonhoo,` does this solve the issue for you?\n\nr? `@GuillaumeGomez`", "tree": {"sha": "c11313e20d1f9925e6dfc9dd3913cc193cefabbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c11313e20d1f9925e6dfc9dd3913cc193cefabbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIp0DCRBK7hj4Ov3rIwAA4vQIAEUxZdzonc8plXecMClQKoLA\nlxnjNddu7zeFea6arrUzGm/BDDdDGpGNmIa6juNeJINoW41tWy75udoixTWAyU5x\nls12a5PVK9KcoupHOiwrtYVy9frH1NCV3N3tjYr4pX6Z7DAnLiCWL2TfCZss7oPM\nFpGIi2Ht+XXjtB1MMTztZmg8KtG0uWZ37X5CoR1ngqUhz7f+qNSTjaaYWAMJVRez\nEpLmlJIW2QRnMxjfyixjBUsHAAeT2yi2U6pBU/WVV2Wf7uHKc6MLxJgUy3sn6KXs\nlNoYuSH6cBnd/4G9/gaVlmROIpQHUnTYQtHvW7mZp8bzmkSevWVsqkXZBJ1hh64=\n=2Qhv\n-----END PGP SIGNATURE-----\n", "payload": "tree c11313e20d1f9925e6dfc9dd3913cc193cefabbb\nparent 7481e6d1a415853a96dcec11a052caaa02859b5a\nparent 644529bdf133ce0f86dc93b4942f9d16960c84ea\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1629658370 +0200\ncommitter GitHub <noreply@github.com> 1629658370 +0200\n\nRollup merge of #86747 - FabianWolff:issue-86653, r=GuillaumeGomez\n\nImprove wording of the `drop_bounds` lint\n\nThis PR addresses #86653. The issue is sort of a false positive of the `drop_bounds` lint, but I would argue that the best solution for #86653 is simply a rewording of the warning message and lint description, because even if the lint is _technically_ wrong, it still forces the programmer to think about what they are doing, and they can always use `#[allow(drop_bounds)]` if they think that they really need the `Drop` bound.\n\nThere are two issues with the current warning message and lint description:\n- First, it says that `Drop` bounds are \"useless\", which is technically incorrect because they actually do have the effect of allowing you e.g. to call methods that also have a `Drop` bound on their generic arguments for some reason. I have changed the wording to emphasize not that the bound is \"useless\", but that it is most likely not what was intended.\n- Second, it claims that `std::mem::needs_drop` detects whether a type has a destructor. But I think this is also technically wrong: The `Drop` bound says whether the type has a destructor or not, whereas `std::mem::needs_drop` also takes nested types with destructors into account, even if the top-level type does not itself have one (although I'm not 100% sure about the exact terminology here, i.e. whether the \"drop glue\" of the top-level type counts as a destructor or not).\n\ncc `@jonhoo,` does this solve the issue for you?\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "html_url": "https://github.com/rust-lang/rust/commit/2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2627db6a3cc4115cc3ff7a1597eb44347acb0c54/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7481e6d1a415853a96dcec11a052caaa02859b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7481e6d1a415853a96dcec11a052caaa02859b5a", "html_url": "https://github.com/rust-lang/rust/commit/7481e6d1a415853a96dcec11a052caaa02859b5a"}, {"sha": "644529bdf133ce0f86dc93b4942f9d16960c84ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/644529bdf133ce0f86dc93b4942f9d16960c84ea", "html_url": "https://github.com/rust-lang/rust/commit/644529bdf133ce0f86dc93b4942f9d16960c84ea"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "edb158dd378063228b0376003854828459ac59f2", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2627db6a3cc4115cc3ff7a1597eb44347acb0c54/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627db6a3cc4115cc3ff7a1597eb44347acb0c54/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "patch": "@@ -18,23 +18,27 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// `Drop` bounds do not really accomplish anything. A type may have\n-    /// compiler-generated drop glue without implementing the `Drop` trait\n-    /// itself. The `Drop` trait also only has one method, `Drop::drop`, and\n-    /// that function is by fiat not callable in user code. So there is really\n-    /// no use case for using `Drop` in trait bounds.\n+    /// A generic trait bound of the form `T: Drop` is most likely misleading\n+    /// and not what the programmer intended (they probably should have used\n+    /// `std::mem::needs_drop` instead).\n     ///\n-    /// The most likely use case of a drop bound is to distinguish between\n-    /// types that have destructors and types that don't. Combined with\n-    /// specialization, a naive coder would write an implementation that\n-    /// assumed a type could be trivially dropped, then write a specialization\n-    /// for `T: Drop` that actually calls the destructor. Except that doing so\n-    /// is not correct; String, for example, doesn't actually implement Drop,\n-    /// but because String contains a Vec, assuming it can be trivially dropped\n-    /// will leak memory.\n+    /// `Drop` bounds do not actually indicate whether a type can be trivially\n+    /// dropped or not, because a composite type containing `Drop` types does\n+    /// not necessarily implement `Drop` itself. Na\u00efvely, one might be tempted\n+    /// to write an implementation that assumes that a type can be trivially\n+    /// dropped while also supplying a specialization for `T: Drop` that\n+    /// actually calls the destructor. However, this breaks down e.g. when `T`\n+    /// is `String`, which does not implement `Drop` itself but contains a\n+    /// `Vec`, which does implement `Drop`, so assuming `T` can be trivially\n+    /// dropped would lead to a memory leak here.\n+    ///\n+    /// Furthermore, the `Drop` trait only contains one method, `Drop::drop`,\n+    /// which may not be called explicitly in user code (`E0040`), so there is\n+    /// really no use case for using `Drop` in trait bounds, save perhaps for\n+    /// some obscure corner cases, which can use `#[allow(drop_bounds)]`.\n     pub DROP_BOUNDS,\n     Warn,\n-    \"bounds of the form `T: Drop` are useless\"\n+    \"bounds of the form `T: Drop` are most likely incorrect\"\n }\n \n declare_lint! {\n@@ -102,8 +106,8 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         None => return,\n                     };\n                     let msg = format!(\n-                        \"bounds on `{}` are useless, consider instead \\\n-                         using `{}` to detect if a type has a destructor\",\n+                        \"bounds on `{}` are most likely incorrect, consider instead \\\n+                         using `{}` to detect whether a type can be trivially dropped\",\n                         predicate,\n                         cx.tcx.def_path_str(needs_drop)\n                     );"}, {"sha": "3ffb855a55dc854c69252ee1925fc24c9228f752", "filename": "src/test/ui/drop-bounds/drop-bounds.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2627db6a3cc4115cc3ff7a1597eb44347acb0c54/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2627db6a3cc4115cc3ff7a1597eb44347acb0c54/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr?ref=2627db6a3cc4115cc3ff7a1597eb44347acb0c54", "patch": "@@ -1,4 +1,4 @@\n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:2:11\n    |\n LL | fn foo<T: Drop>() {}\n@@ -10,37 +10,37 @@ note: the lint level is defined here\n LL | #![deny(drop_bounds)]\n    |         ^^^^^^^^^^^\n \n-error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `U: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:5:8\n    |\n LL |     U: Drop,\n    |        ^^^^\n \n-error: bounds on `impl Drop: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `impl Drop: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:8:17\n    |\n LL | fn baz(_x: impl Drop) {}\n    |                 ^^^^\n \n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:9:15\n    |\n LL | struct Foo<T: Drop> {\n    |               ^^^^\n \n-error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `U: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:12:24\n    |\n LL | struct Bar<U> where U: Drop {\n    |                        ^^^^\n \n-error: bounds on `Self: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `Self: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:15:12\n    |\n LL | trait Baz: Drop {\n    |            ^^^^\n \n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:17:9\n    |\n LL | impl<T: Drop> Baz for T {"}]}