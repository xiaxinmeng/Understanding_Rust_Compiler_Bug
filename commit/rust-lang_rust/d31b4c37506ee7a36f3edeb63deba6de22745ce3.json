{"sha": "d31b4c37506ee7a36f3edeb63deba6de22745ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMWI0YzM3NTA2ZWU3YTM2ZjNlZGViNjNkZWJhNmRlMjI3NDVjZTM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T21:46:46Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:55:34Z"}, "message": "Remove fishy condition\n\nThat condition was leftover from a refactor, and was probably not\nintended. In fact it can't trigger: it would require a ConstantValue of\nan integral type for which `try_eval_bits` fails. But since we only\napply `subtract_ctors` to the output of `all_ctors`, this won't happen.", "tree": {"sha": "53a43d3763156309c9bfd01dc63c575bf51ef79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a43d3763156309c9bfd01dc63c575bf51ef79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31b4c37506ee7a36f3edeb63deba6de22745ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31b4c37506ee7a36f3edeb63deba6de22745ce3", "html_url": "https://github.com/rust-lang/rust/commit/d31b4c37506ee7a36f3edeb63deba6de22745ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31b4c37506ee7a36f3edeb63deba6de22745ce3/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47d631ca0eebb2e5b7f0d40230f78ba7b92592e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47d631ca0eebb2e5b7f0d40230f78ba7b92592e", "html_url": "https://github.com/rust-lang/rust/commit/e47d631ca0eebb2e5b7f0d40230f78ba7b92592e"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "be268738da8d2e48452b7fe25d20d83dd3c52fed", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d31b4c37506ee7a36f3edeb63deba6de22745ce3/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31b4c37506ee7a36f3edeb63deba6de22745ce3/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d31b4c37506ee7a36f3edeb63deba6de22745ce3", "patch": "@@ -611,13 +611,6 @@ impl<'tcx> Constructor<'tcx> {\n         }\n     }\n \n-    fn is_integral_range(&self) -> bool {\n-        match self {\n-            IntRange(_) => return true,\n-            _ => return false,\n-        };\n-    }\n-\n     fn variant_index_for_adt<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n@@ -639,12 +632,8 @@ impl<'tcx> Constructor<'tcx> {\n     fn subtract_ctors(&self, other_ctors: &Vec<Constructor<'tcx>>) -> Vec<Constructor<'tcx>> {\n         match self {\n             // Those constructors can only match themselves.\n-            Single | Variant(_) => {\n-                if other_ctors.iter().any(|c| c == self) {\n-                    vec![]\n-                } else {\n-                    vec![self.clone()]\n-                }\n+            Single | Variant(_) | ConstantValue(..) | ConstantRange(..) => {\n+                if other_ctors.iter().any(|c| c == self) { vec![] } else { vec![self.clone()] }\n             }\n             &FixedLenSlice(self_len) => {\n                 let overlaps = |c: &Constructor<'_>| match *c {\n@@ -741,17 +730,6 @@ impl<'tcx> Constructor<'tcx> {\n                 // Convert the ranges back into constructors\n                 remaining_ranges.into_iter().map(IntRange).collect()\n             }\n-            ConstantRange(..) | ConstantValue(..) => {\n-                if other_ctors.iter().any(|c| {\n-                    c == self\n-                        // FIXME(Nadrieril): This condition looks fishy\n-                        || c.is_integral_range()\n-                }) {\n-                    vec![]\n-                } else {\n-                    vec![self.clone()]\n-                }\n-            }\n             // This constructor is never covered by anything else\n             NonExhaustive => vec![NonExhaustive],\n         }"}]}