{"sha": "65e253966693a1c222badf977dc133df028f2351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTI1Mzk2NjY5M2ExYzIyMmJhZGY5NzdkYzEzM2RmMDI4ZjIzNTE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-03T20:50:56Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-13T08:01:18Z"}, "message": "Don't suggest adding a synthesized region name.", "tree": {"sha": "cb87a8a23863edfc373f1f61bdafa8634f9130af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb87a8a23863edfc373f1f61bdafa8634f9130af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e253966693a1c222badf977dc133df028f2351", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluaGU4ACgkQAXYLT59T\n8VThzhAAtzcBR9tO4qQ0pk0JCeZRxObXZ5/695jMsSTknzPdPIemV/BMZijvWlsn\nBPMZiPGDoFPJWaRAsaVmUy0pijyjFhe8atXwNiiZVzQg3SArwst8MekiKJ/jJxwx\nulO3HvUBMvHY8I4/W+mKPlSM9JQE8HX8KYpGSOxFTO+dam9TR7pLT56qTSMG8ZvX\nAjb5l8M9byjRC1m7vMo9Ry63GfN4cDAF1jfLfpZ8iD6n/x0Fewtk3qlVFOwVUS41\nmEELVRqjQ2+TSP7JyOgQiD3zBHY483xTVuRG+BFbHPjyE0gQ22wi8tmhjQUge5C3\neZu/mXfUj2HLPMOKg+b6tTGGg7/Ck3twW3KOP7nwhnv3dXGGKbH1HUns/HJT+RTl\nB2SC2TxOU87WS9C3hzi1mALf4LxdZaEQj3N6+3c5ulSqZx57ieclqiHv8/zAasuP\nHGXXpVOc5T/4TdKJzQr4dSVtANcwniY14+CmO1KVesM5HF+A0PMr2na99NvqiYCR\n5BnEDRCwKsRsiHlh08OR3nkLnXio7k+SIB6ZWjMlbjMtV0MwCEuI0JV3kfb2g2E7\n9TZplNmWFKUcmtYJcQxl+QiaFOMSsQVmhedm9TXm5VF4tOWeMluIJSOxbarL9bcc\nEKUmBx2aKEh/xzsOTg5TXvlUtIK7+vKmG63c3tI25Et4fl1sKtY=\n=keMD\n-----END PGP SIGNATURE-----", "payload": "tree cb87a8a23863edfc373f1f61bdafa8634f9130af\nparent 6bf131f3f4c978b93e709533d8d7ff4cb22e4769\nauthor David Wood <david@davidtw.co> 1536007856 +0200\ncommitter David Wood <david@davidtw.co> 1536825678 +0200\n\nDon't suggest adding a synthesized region name.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e253966693a1c222badf977dc133df028f2351", "html_url": "https://github.com/rust-lang/rust/commit/65e253966693a1c222badf977dc133df028f2351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e253966693a1c222badf977dc133df028f2351/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "html_url": "https://github.com/rust-lang/rust/commit/6bf131f3f4c978b93e709533d8d7ff4cb22e4769"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "bf3b5e2a17c6e9ca61b250de39e18952b4b4d452", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65e253966693a1c222badf977dc133df028f2351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e253966693a1c222badf977dc133df028f2351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=65e253966693a1c222badf977dc133df028f2351", "patch": "@@ -17,14 +17,17 @@ use rustc::infer::InferCtxt;\n use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKind};\n use rustc::ty::{TyCtxt, Ty, TyS, TyKind, Region, RegionKind, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_errors::Diagnostic;\n+use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use std::collections::VecDeque;\n use std::fmt;\n+use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n mod region_name;\n mod var_name;\n \n+use self::region_name::RegionName;\n+\n /// Constraints that are considered interesting can be categorized to\n /// determine why they are interesting. Order of variants indicates\n /// sort order of the category, thereby influencing diagnostic output.\n@@ -473,27 +476,44 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             },\n         }\n \n+        self.add_static_impl_trait_suggestion(\n+            infcx, &mut diag, fr_name, fr_region, outlived_fr_region\n+        );\n+\n+        diag.buffer(errors_buffer);\n+    }\n+\n+    fn add_static_impl_trait_suggestion(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        diag: &mut DiagnosticBuilder<'_>,\n+        fr_name: RegionName,\n+        fr_region: Option<Region<'tcx>>,\n+        outlived_fr_region: Option<Region<'tcx>>,\n+    ) {\n         if let (Some(f), Some(RegionKind::ReStatic)) = (fr_region, outlived_fr_region) {\n             if let Some(TyS {\n                 sty: TyKind::Anon(did, _),\n                 ..\n             }) = self.return_type_impl_trait(infcx, f) {\n+                let static_str = keywords::StaticLifetime.name();\n                 let span = infcx.tcx.def_span(*did);\n                 if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n                     diag.span_suggestion(\n                         span,\n                         &format!(\n                             \"you can add a constraint to the return type to make it last \\\n-                             less than `'static` and match {}\",\n-                            fr_name,\n+                             less than `{}` and match `{}`\",\n+                            static_str, fr_name,\n                         ),\n-                        format!(\"{} + {}\", snippet, fr_name),\n+                        match fr_name {\n+                            RegionName::Named(name) => format!(\"{} + {}\", snippet, name),\n+                            RegionName::Synthesized(_) => format!(\"{} + '_\", snippet),\n+                        },\n                     );\n                 }\n             }\n         }\n-\n-        diag.buffer(errors_buffer);\n     }\n \n     // Finds some region R such that `fr1: R` and `R` is live at"}, {"sha": "136f660fe8daad7c804cfd119b3bdf5bf157632f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/65e253966693a1c222badf977dc133df028f2351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e253966693a1c222badf977dc133df028f2351/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=65e253966693a1c222badf977dc133df028f2351", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fmt::{self, Display};\n use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::universal_regions::DefiningTy;\n use borrow_check::nll::ToRegionVid;\n@@ -23,6 +24,24 @@ use syntax::ast::{Name, DUMMY_NODE_ID};\n use syntax::symbol::keywords;\n use syntax_pos::symbol::InternedString;\n \n+/// Name of a region used in error reporting. Variants denote the source of the region name -\n+/// whether it was synthesized for the error message and therefore should not be used in\n+/// suggestions; or whether it was found from the region.\n+#[derive(Debug)]\n+pub(crate) enum RegionName {\n+    Named(InternedString),\n+    Synthesized(InternedString),\n+}\n+\n+impl Display for RegionName {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self {\n+            RegionName::Named(name) | RegionName::Synthesized(name) =>\n+                write!(f, \"{}\", name),\n+        }\n+    }\n+}\n+\n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Maps from an internal MIR region vid to something that we can\n     /// report to the user. In some cases, the region vids will map\n@@ -57,7 +76,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder,\n-    ) -> InternedString {\n+    ) -> RegionName {\n         debug!(\"give_region_a_name(fr={:?}, counter={})\", fr, counter);\n \n         assert!(self.universal_regions.is_universal_region(fr));\n@@ -95,27 +114,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let error_region = self.to_error_region(fr)?;\n \n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n                     self.highlight_named_span(tcx, error_region, &ebr.name, diag);\n-                    Some(ebr.name)\n+                    Some(RegionName::Named(ebr.name))\n                 } else {\n                     None\n                 }\n             }\n \n-            ty::ReStatic => Some(keywords::StaticLifetime.name().as_interned_str()),\n+            ty::ReStatic => Some(RegionName::Named(\n+                keywords::StaticLifetime.name().as_interned_str()\n+            )),\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(_, name) => {\n                     self.highlight_named_span(tcx, error_region, &name, diag);\n-                    Some(name)\n-                }\n+                    Some(RegionName::Named(name))\n+                },\n \n                 ty::BoundRegion::BrEnv => {\n                     let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n@@ -132,7 +153,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         let region_name = self.synthesize_region_name(counter);\n                         diag.span_label(\n                             args_span,\n-                            format!(\"lifetime `{}` represents this closure's body\", region_name),\n+                            format!(\n+                                \"lifetime `{}` represents this closure's body\",\n+                                region_name\n+                            ),\n                         );\n \n                         let closure_kind_ty = substs.closure_kind_ty(def_id, tcx);\n@@ -227,7 +251,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let implicit_inputs = self.universal_regions.defining_ty.implicit_inputs();\n         let argument_index = self.get_argument_index_for_region(infcx.tcx, fr)?;\n \n@@ -259,7 +283,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_index: usize,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id)?;\n         let fn_decl = infcx.tcx.hir.fn_decl(mir_node_id)?;\n         let argument_hir_ty: &hir::Ty = &fn_decl.inputs[argument_index];\n@@ -306,7 +330,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_ty: Ty<'tcx>,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let type_name = with_highlight_region(needle_fr, *counter, || {\n             infcx.extract_type_name(&argument_ty)\n         });\n@@ -361,7 +385,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_hir_ty: &hir::Ty,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let search_stack: &mut Vec<(Ty<'tcx>, &hir::Ty)> = &mut Vec::new();\n \n         search_stack.push((argument_ty, argument_hir_ty));\n@@ -457,7 +481,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n         search_stack: &mut Vec<(Ty<'tcx>, &'hir hir::Ty)>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         // Did the user give explicit arguments? (e.g., `Foo<..>`)\n         let args = last_segment.args.as_ref()?;\n         let lifetime = self.try_match_adt_and_generic_args(substs, needle_fr, args, search_stack)?;\n@@ -467,7 +491,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | hir::LifetimeName::Underscore => {\n                 let region_name = self.synthesize_region_name(counter);\n                 let ampersand_span = lifetime.span;\n-                diag.span_label(ampersand_span, format!(\"let's call this `{}`\", region_name));\n+                diag.span_label(\n+                    ampersand_span,\n+                    format!(\"let's call this `{}`\", region_name)\n+                );\n                 return Some(region_name);\n             }\n \n@@ -544,7 +571,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let upvar_index = self.get_upvar_index_for_region(tcx, fr)?;\n         let (upvar_name, upvar_span) =\n             self.get_upvar_name_and_span_for_region(tcx, mir, upvar_index);\n@@ -573,7 +600,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n-    ) -> Option<InternedString> {\n+    ) -> Option<RegionName> {\n         let tcx = infcx.tcx;\n \n         let return_ty = self.universal_regions.unnormalized_output_ty;\n@@ -622,10 +649,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     /// Create a synthetic region named `'1`, incrementing the\n     /// counter.\n-    fn synthesize_region_name(&self, counter: &mut usize) -> InternedString {\n+    fn synthesize_region_name(&self, counter: &mut usize) -> RegionName {\n         let c = *counter;\n         *counter += 1;\n \n-        Name::intern(&format!(\"'{:?}\", c)).as_interned_str()\n+        RegionName::Synthesized(Name::intern(&format!(\"'{:?}\", c)).as_interned_str())\n     }\n }"}, {"sha": "e95fc7663710e0fb8f680bdeb8b85b10c7cc616c", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65e253966693a1c222badf977dc133df028f2351/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65e253966693a1c222badf977dc133df028f2351/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=65e253966693a1c222badf977dc133df028f2351", "patch": "@@ -11,7 +11,7 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             -- lifetime `'a` defined here  ^ returning this value requires that `'a` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+help: you can add a constraint to the return type to make it last less than `'static` and match `'a`\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -21,7 +21,7 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+help: you can add a constraint to the return type to make it last less than `'static` and match `'a`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}