{"sha": "d31027d3bf9003f376d7f73df90cb4592d81084a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTAyN2QzYmY5MDAzZjM3NmQ3ZjczZGY5MGNiNDU5MmQ4MTA4NGE=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-20T22:14:00Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-21T21:47:11Z"}, "message": "Introduce and use TypedConstVal for Repeat", "tree": {"sha": "4cb4ad95ad266084849abb8f371b45e1d5130c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb4ad95ad266084849abb8f371b45e1d5130c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31027d3bf9003f376d7f73df90cb4592d81084a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31027d3bf9003f376d7f73df90cb4592d81084a", "html_url": "https://github.com/rust-lang/rust/commit/d31027d3bf9003f376d7f73df90cb4592d81084a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31027d3bf9003f376d7f73df90cb4592d81084a/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78609134c7cef5a616943e5ec79cfc0ce946140", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78609134c7cef5a616943e5ec79cfc0ce946140", "html_url": "https://github.com/rust-lang/rust/commit/c78609134c7cef5a616943e5ec79cfc0ce946140"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "ed6b174e463f2d7aa0e39bfcc33943ef5666f1bb", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -683,7 +683,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     // [x; 32]\n-    Repeat(Operand<'tcx>, Constant<'tcx>),\n+    Repeat(Operand<'tcx>, TypedConstVal<'tcx>),\n \n     // &x or &mut x\n     Ref(Region, BorrowKind, Lvalue<'tcx>),\n@@ -891,6 +891,13 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct TypedConstVal<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub span: Span,\n+    pub value: ConstVal\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ItemKind {\n     Constant,"}, {"sha": "a38ef078c6f8e713592f4de73350d4df3ce10f8a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -213,9 +213,8 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::Repeat(ref $($mutability)* value,\n-                                   ref $($mutability)* len) => {\n+                                   _) => {\n                         self.visit_operand(value);\n-                        self.visit_constant(len);\n                     }\n \n                     Rvalue::Ref(r, bk, ref $($mutability)* path) => {"}, {"sha": "d8a1930fd5c046688854f548f9239bbcbd10efe1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -15,6 +15,7 @@ use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use rustc::front::map;\n use rustc::middle::def::Def;\n+use rustc::middle::const_eval;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::pat_util;\n use rustc::middle::ty::{self, VariantDef, Ty};\n@@ -325,10 +326,10 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             hir::ExprRepeat(ref v, ref c) => ExprKind::Repeat {\n                 value: v.to_ref(),\n-                count: Constant {\n+                count: TypedConstVal {\n                     ty: cx.tcx.expr_ty(c),\n                     span: c.span,\n-                    literal: cx.const_eval_literal(c)\n+                    value: const_eval::eval_const_expr(cx.tcx, c)\n                 }\n             },\n             hir::ExprRet(ref v) =>"}, {"sha": "d87b25a094e2f0fc5fd5e7664516fff95ce6d784", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -14,7 +14,8 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::repr::{Constant, BinOp, BorrowKind, Field, Literal, Mutability, UnOp, ItemKind};\n+use rustc::mir::repr::{BinOp, BorrowKind, Field, Literal, Mutability, UnOp, ItemKind,\n+    TypedConstVal};\n use rustc::middle::const_eval::ConstVal;\n use rustc::middle::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n@@ -213,7 +214,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n-        count: Constant<'tcx>,\n+        count: TypedConstVal<'tcx>,\n     },\n     Vec {\n         fields: Vec<ExprRef<'tcx>>,\n@@ -338,6 +339,7 @@ pub struct FieldPattern<'tcx> {\n     pub field: Field,\n     pub pattern: Pattern<'tcx>,\n }\n+\n ///////////////////////////////////////////////////////////////////////////\n // The Mirror trait\n "}, {"sha": "a964f9ccf0c100a32d99eb0d64422826e086b45d", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -143,9 +143,8 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n             Rvalue::Use(ref mut operand) => {\n                 self.erase_regions_operand(operand)\n             }\n-            Rvalue::Repeat(ref mut operand, ref mut constant) => {\n+            Rvalue::Repeat(ref mut operand, _) => {\n                 self.erase_regions_operand(operand);\n-                self.erase_regions_constant(constant);\n             }\n             Rvalue::Ref(ref mut region, _, ref mut lvalue) => {\n                 *region = ty::ReStatic;"}, {"sha": "fa925241c72cd3734f2151b54e2f8c65e8e08dc8", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31027d3bf9003f376d7f73df90cb4592d81084a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=d31027d3bf9003f376d7f73df90cb4592d81084a", "patch": "@@ -89,7 +89,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let elem = self.trans_operand(bcx, elem);\n-                let size = self.trans_constant(bcx, count).immediate();\n+                let size = self.trans_constval(bcx, &count.value, count.ty).immediate();\n                 let base = expr::get_dataptr(bcx, dest.llval);\n                 tvec::iter_vec_raw(bcx, base, elem.ty, size, |bcx, llslot, _| {\n                     self.store_operand(bcx, llslot, elem);"}]}