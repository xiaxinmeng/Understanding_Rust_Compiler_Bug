{"sha": "d6a2dd9912e762fb0029c4463002d674686c1159", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTJkZDk5MTJlNzYyZmIwMDI5YzQ0NjMwMDJkNjc0Njg2YzExNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T10:30:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T10:30:57Z"}, "message": "Auto merge of #49433 - varkor:metadata-skip-mir-opt, r=michaelwoerister\n\nSkip MIR encoding for cargo check\n\nResolves #48662.\n\nr? @michaelwoerister", "tree": {"sha": "da714c22c8135a75b616a107fa2bd2bc297b2f4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da714c22c8135a75b616a107fa2bd2bc297b2f4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a2dd9912e762fb0029c4463002d674686c1159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2dd9912e762fb0029c4463002d674686c1159", "html_url": "https://github.com/rust-lang/rust/commit/d6a2dd9912e762fb0029c4463002d674686c1159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2dd9912e762fb0029c4463002d674686c1159/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532764cb791718dc4c1102814b47c4ef1c6d1e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/532764cb791718dc4c1102814b47c4ef1c6d1e24", "html_url": "https://github.com/rust-lang/rust/commit/532764cb791718dc4c1102814b47c4ef1c6d1e24"}, {"sha": "5576ce84cf13a32ebcf9a08366e3117da9832c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/5576ce84cf13a32ebcf9a08366e3117da9832c84", "html_url": "https://github.com/rust-lang/rust/commit/5576ce84cf13a32ebcf9a08366e3117da9832c84"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "0f7de0ffffedc26a72119b2b7871971c13a34955", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -246,6 +246,10 @@ impl OutputTypes {\n         self.0.values()\n     }\n \n+    pub fn len(&self) -> usize {\n+        self.0.len()\n+    }\n+\n     // True if any of the output types require codegen or linking.\n     pub fn should_trans(&self) -> bool {\n         self.0.keys().any(|k| match *k {"}, {"sha": "fe89be11764e83e1ea1eca135aa038189aa4a2b5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -168,7 +168,7 @@ pub fn compile_input(trans: Box<TransCrate>,\n \n         write_out_deps(sess, &outputs, &output_paths);\n         if sess.opts.output_types.contains_key(&OutputType::DepInfo) &&\n-            sess.opts.output_types.keys().count() == 1 {\n+            sess.opts.output_types.len() == 1 {\n             return Ok(())\n         }\n "}, {"sha": "67c180e94caff01129e6ba91540bb1724413dfd7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -864,6 +864,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n+    fn metadata_output_only(&self) -> bool {\n+        // MIR optimisation can be skipped when we're just interested in the metadata.\n+        !self.tcx.sess.opts.output_types.should_trans()\n+    }\n+\n     fn encode_info_for_impl_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_impl_item({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -908,7 +913,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         } else if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n             let generics = self.tcx.generics_of(def_id);\n             let types = generics.parent_types as usize + generics.types.len();\n-            let needs_inline = types > 0 || tcx.trans_fn_attrs(def_id).requests_inline();\n+            let needs_inline = (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n+                !self.metadata_output_only();\n             let is_const_fn = sig.constness == hir::Constness::Const;\n             let ast = if is_const_fn { Some(body) } else { None };\n             let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n@@ -1199,7 +1205,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemConst(..) => self.encode_optimized_mir(def_id),\n                 hir::ItemFn(_, _, constness, _, ref generics, _) => {\n                     let has_tps = generics.ty_params().next().is_some();\n-                    let needs_inline = has_tps || tcx.trans_fn_attrs(def_id).requests_inline();\n+                    let needs_inline = (has_tps || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n+                        !self.metadata_output_only();\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     if needs_inline || constness == hir::Constness::Const || always_encode_mir {\n                         self.encode_optimized_mir(def_id)"}]}