{"sha": "76d4862fdd131b6f79dc0a31857f888d26bcdb27", "node_id": "C_kwDOAAsO6NoAKDc2ZDQ4NjJmZGQxMzFiNmY3OWRjMGEzMTg1N2Y4ODhkMjZiY2RiMjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T07:52:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T07:52:18Z"}, "message": "Auto merge of #95776 - cjgillot:ast-lifetimes-static, r=petrochenkov\n\nEnforce static lifetimes in consts during late resolution\n\nThis PR moves the handling of implicitly and explicitly static lifetimes in constants from HIR to the AST.", "tree": {"sha": "fa699104ad1098a95d9e25d704d517ddeb465a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa699104ad1098a95d9e25d704d517ddeb465a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "html_url": "https://github.com/rust-lang/rust/commit/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a98c63b30bd8419be662b8fb3f3b22ba33d72c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a98c63b30bd8419be662b8fb3f3b22ba33d72c5", "html_url": "https://github.com/rust-lang/rust/commit/9a98c63b30bd8419be662b8fb3f3b22ba33d72c5"}, {"sha": "7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "html_url": "https://github.com/rust-lang/rust/commit/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3"}], "stats": {"total": 460, "additions": 314, "deletions": 146}, "files": [{"sha": "53bd589fdcde147aefd630bcf862ca8e37bd0645", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -199,6 +199,16 @@ enum LifetimeRibKind {\n     /// This rib declares generic parameters.\n     Generics { parent: NodeId, span: Span, kind: LifetimeBinderKind },\n \n+    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n+    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n+    /// lifetimes in const generics. See issue #74052 for discussion.\n+    ConstGeneric,\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    AnonConst,\n+\n     /// For **Modern** cases, create a new anonymous region parameter\n     /// and reference that.\n     ///\n@@ -527,7 +537,9 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         // We deal with repeat expressions explicitly in `resolve_expr`.\n-        self.resolve_anon_const(constant, IsRepeatExpr::No);\n+        self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n+            this.resolve_anon_const(constant, IsRepeatExpr::No);\n+        })\n     }\n     fn visit_expr(&mut self, expr: &'ast Expr) {\n         self.resolve_expr(expr, None);\n@@ -1102,14 +1114,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n                         this.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n                         this.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n-                        this.visit_ty(ty);\n+                        this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n+                            this.visit_ty(ty)\n+                        });\n                         this.ribs[TypeNS].pop().unwrap();\n                         this.ribs[ValueNS].pop().unwrap();\n \n                         if let Some(ref expr) = default {\n                             this.ribs[TypeNS].push(forward_ty_ban_rib);\n                             this.ribs[ValueNS].push(forward_const_ban_rib);\n-                            this.visit_anon_const(expr);\n+                            this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n+                                this.resolve_anon_const(expr, IsRepeatExpr::No)\n+                            });\n                             forward_const_ban_rib = this.ribs[ValueNS].pop().unwrap();\n                             forward_ty_ban_rib = this.ribs[TypeNS].pop().unwrap();\n                         }\n@@ -1158,8 +1174,19 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 return;\n             }\n \n-            if let LifetimeRibKind::Item = rib.kind {\n-                break;\n+            match rib.kind {\n+                LifetimeRibKind::Item => break,\n+                LifetimeRibKind::ConstGeneric => {\n+                    self.emit_non_static_lt_in_const_generic_error(lifetime);\n+                    self.r.lifetimes_res_map.insert(lifetime.id, LifetimeRes::Error);\n+                    return;\n+                }\n+                LifetimeRibKind::AnonConst => {\n+                    self.maybe_emit_forbidden_non_static_lifetime_error(lifetime);\n+                    self.r.lifetimes_res_map.insert(lifetime.id, LifetimeRes::Error);\n+                    return;\n+                }\n+                _ => {}\n             }\n         }\n \n@@ -3065,9 +3092,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             is_repeat,\n             constant.value.is_potential_trivial_const_param(),\n             None,\n-            |this| {\n-                visit::walk_anon_const(this, constant);\n-            },\n+            |this| visit::walk_anon_const(this, constant),\n         );\n     }\n \n@@ -3218,7 +3243,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);\n-                self.resolve_anon_const(ct, IsRepeatExpr::Yes);\n+                self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n+                    this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n+                });\n+            }\n+            ExprKind::ConstBlock(ref ct) => {\n+                self.resolve_anon_const(ct, IsRepeatExpr::No);\n             }\n             ExprKind::Index(ref elem, ref idx) => {\n                 self.resolve_expr(elem, Some(expr));"}, {"sha": "894ff0f17f8a1c6ee3b3552318e5034b77ba4944", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 46, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -1886,6 +1886,37 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         err.emit();\n     }\n+\n+    crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &ast::Lifetime) {\n+        struct_span_err!(\n+            self.r.session,\n+            lifetime_ref.ident.span,\n+            E0771,\n+            \"use of non-static lifetime `{}` in const generic\",\n+            lifetime_ref.ident\n+        )\n+        .note(\n+            \"for more information, see issue #74052 \\\n+            <https://github.com/rust-lang/rust/issues/74052>\",\n+        )\n+        .emit();\n+    }\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    crate fn maybe_emit_forbidden_non_static_lifetime_error(&self, lifetime_ref: &ast::Lifetime) {\n+        let feature_active = self.r.session.features_untracked().generic_const_exprs;\n+        if !feature_active {\n+            feature_err(\n+                &self.r.session.parse_sess,\n+                sym::generic_const_exprs,\n+                lifetime_ref.ident.span,\n+                \"a non-static lifetime is not allowed in a `const`\",\n+            )\n+            .emit();\n+        }\n+    }\n }\n \n impl<'tcx> LifetimeContext<'_, 'tcx> {\n@@ -1982,24 +2013,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n     }\n \n-    // FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n-    // generics. We are disallowing this until we can decide on how we want to handle non-'static\n-    // lifetimes in const generics. See issue #74052 for discussion.\n-    crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &hir::Lifetime) {\n-        let mut err = struct_span_err!(\n-            self.tcx.sess,\n-            lifetime_ref.span,\n-            E0771,\n-            \"use of non-static lifetime `{}` in const generic\",\n-            lifetime_ref\n-        );\n-        err.note(\n-            \"for more information, see issue #74052 \\\n-            <https://github.com/rust-lang/rust/issues/74052>\",\n-        );\n-        err.emit();\n-    }\n-\n     crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n         if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n             if [\n@@ -2401,32 +2414,4 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             _ => unreachable!(),\n         }\n     }\n-\n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n-    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    crate fn maybe_emit_forbidden_non_static_lifetime_error(\n-        &self,\n-        body_id: hir::BodyId,\n-        lifetime_ref: &'tcx hir::Lifetime,\n-    ) {\n-        let is_anon_const = matches!(\n-            self.tcx.def_kind(self.tcx.hir().body_owner_def_id(body_id)),\n-            hir::def::DefKind::AnonConst\n-        );\n-        let is_allowed_lifetime = matches!(\n-            lifetime_ref.name,\n-            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n-        );\n-\n-        if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {\n-            feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::generic_const_exprs,\n-                lifetime_ref.span,\n-                \"a non-static lifetime is not allowed in a `const`\",\n-            )\n-            .emit();\n-        }\n-    }\n }"}, {"sha": "35a40a0a32131823047d5c398971d63f00b4c32d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -164,8 +164,6 @@ crate struct LifetimeContext<'a, 'tcx> {\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n-    is_in_const_generic: bool,\n-\n     /// Indicates that we only care about the definition of a trait. This should\n     /// be false if the `Item` we are resolving lifetimes for is not a trait or\n     /// we eventually need lifetimes resolve for trait items.\n@@ -452,7 +450,6 @@ fn do_resolve(\n         tcx,\n         map: &mut named_region_map,\n         scope: ROOT_SCOPE,\n-        is_in_const_generic: false,\n         trait_definition_only,\n         labels_in_fn: vec![],\n         xcrate_object_lifetime_defaults: Default::default(),\n@@ -1266,10 +1263,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.insert_lifetime(lifetime_ref, Region::Static);\n             return;\n         }\n-        if self.is_in_const_generic && lifetime_ref.name != LifetimeName::Error {\n-            self.emit_non_static_lt_in_const_generic_error(lifetime_ref);\n-            return;\n-        }\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n \n@@ -1341,14 +1334,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         }\n                     }\n                     GenericParamKind::Const { ref ty, default } => {\n-                        let was_in_const_generic = this.is_in_const_generic;\n-                        this.is_in_const_generic = true;\n                         walk_list!(this, visit_param_bound, param.bounds);\n                         this.visit_ty(&ty);\n                         if let Some(default) = default {\n                             this.visit_body(this.tcx.hir().body(default.body));\n                         }\n-                        this.is_in_const_generic = was_in_const_generic;\n                     }\n                 }\n             }\n@@ -1798,7 +1788,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             tcx: *tcx,\n             map,\n             scope: &wrap_scope,\n-            is_in_const_generic: self.is_in_const_generic,\n             trait_definition_only: self.trait_definition_only,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n@@ -2254,10 +2243,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let result = loop {\n             match *scope {\n                 Scope::Body { id, s } => {\n-                    // Non-static lifetimes are prohibited in anonymous constants without\n-                    // `generic_const_exprs`.\n-                    self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n-\n                     outermost_body = Some(id);\n                     scope = s;\n                 }"}, {"sha": "88d9ed46e1ad3a8251b2924881bf1d089be35778", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 212, "deletions": 63, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -16,53 +16,8 @@ LL |     let _: [u8; bar::<N>()];\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n-   |\n-LL |     let _ = [0; bar::<N>()];\n-   |                       ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:29:24\n-   |\n-LL |     let _: Foo<{ foo::<T>() }>;\n-   |                        ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:30:24\n-   |\n-LL |     let _: Foo<{ bar::<N>() }>;\n-   |                        ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:35:27\n-   |\n-LL |     let _ = Foo::<{ foo::<T>() }>;\n-   |                           ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:36:27\n-   |\n-LL |     let _ = Foo::<{ bar::<N>() }>;\n-   |                           ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -71,7 +26,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n@@ -80,7 +35,7 @@ LL |     let _: [u8; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:17:23\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -89,16 +44,25 @@ LL |     let _: [u8; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:24:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:25:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -107,7 +71,7 @@ LL |     let _ = [0; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n@@ -116,7 +80,7 @@ LL |     let _ = [0; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -125,16 +89,34 @@ LL |     let _ = [0; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:28:23\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:32:24\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |                        ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:31:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -143,7 +125,7 @@ LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:32:24\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n@@ -152,7 +134,7 @@ LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -161,16 +143,34 @@ LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:34:24\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:41:27\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                           ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:42:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:37:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -179,7 +179,7 @@ LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:38:27\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n@@ -188,7 +188,7 @@ LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:39:27\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n@@ -197,14 +197,163 @@ LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:40:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n-error: aborting due to 23 previous errors\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:14:23\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |                       ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _: [u8; bar::<{ N }>()];\n+   |                       +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:24:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _ = [0; bar::<{ N }>()];\n+   |                       +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _: Foo<{ bar::<{ N }>() }>;\n+   |                        +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/const-arg-in-const-arg.rs:23:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:42:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n+   |                           +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: aborting due to 36 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0747.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "b9daadb547493fcebb7c55d7d0011b5646102eb8", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -12,31 +12,40 @@ struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n     let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n     let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n+                             //~^ ERROR unresolved item provided when a constant was expected\n     let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n     let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n \n-    // NOTE: This can be a future compat warning instead of an error,\n-    // so we stop compilation before emitting this error in this test.\n-    let _ = [0; foo::<T>()];\n-\n+    let _ = [0; foo::<T>()]; //~ ERROR constant expression depends on a generic parameter\n     let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n+                             //~^ ERROR unresolved item provided when a constant was expected\n     let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n     let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n     let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n     let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+                                //~^ ERROR unresolved item provided when a constant was expected\n     let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+                                    //~^ ERROR cannot specify lifetime arguments\n     let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n     let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+                                    //~^ ERROR cannot specify lifetime arguments\n     let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n     let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n     let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+                                   //~^ ERROR unresolved item provided when a constant was expected\n     let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+                                       //~^ ERROR cannot specify lifetime arguments\n     let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n     let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+                                       //~^ ERROR cannot specify lifetime arguments\n     let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n }\n "}, {"sha": "43a5df117fdc740fbcf9fb9f84e9e2f10b6c56d9", "filename": "src/test/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -6,6 +6,15 @@ LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |\n    = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n \n-error: aborting due to previous error\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-56445-1.rs:9:25\n+   |\n+LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n+   |                         ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0771`."}, {"sha": "13eb2ea9f69d508ae164189ecf09b0d4380322fe", "filename": "src/test/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -8,5 +8,6 @@ use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n //~^ ERROR: use of non-static lifetime `'a` in const generic\n+//[min]~| ERROR: `&'static str` is forbidden as the type of a const generic parameter\n \n impl Bug<'_, \"\"> {}"}, {"sha": "3ab727f5f69dacfc9e3ab2ca60901c91a64edb6f", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d4862fdd131b6f79dc0a31857f888d26bcdb27/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=76d4862fdd131b6f79dc0a31857f888d26bcdb27", "patch": "@@ -1,3 +1,11 @@\n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/E0771.rs:4:41\n+   |\n+LL | fn function_with_str<'a, const STRING: &'a str>() {}\n+   |                                         ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/E0771.rs:1:12\n    |\n@@ -7,14 +15,6 @@ LL | #![feature(adt_const_params)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n \n-error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/E0771.rs:4:41\n-   |\n-LL | fn function_with_str<'a, const STRING: &'a str>() {}\n-   |                                         ^^\n-   |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n-\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0771`."}]}