{"sha": "bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZTFmYmQxNzg2YjQxNjkwOGQzYzZiYzM0YzhjZjgwNWIzOWI3NjE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-14T12:50:57Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Qualify autoimport completion suggestions", "tree": {"sha": "dd11219a9e5d2f48d7c6e28e0f6554ccff5c0096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd11219a9e5d2f48d7c6e28e0f6554ccff5c0096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "html_url": "https://github.com/rust-lang/rust/commit/bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe1fbd1786b416908d3c6bc34c8cf805b39b761/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "html_url": "https://github.com/rust-lang/rust/commit/38ef1fd4ad7fd26439201a1a4147a7d90a13601f"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "fca8d3a72215d050fc2117369364a3680f1307d0", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bbe1fbd1786b416908d3c6bc34c8cf805b39b761/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe1fbd1786b416908d3c6bc34c8cf805b39b761/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "patch": "@@ -71,7 +71,6 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n     }\n }\n \n-// TODO kb add a setting toggle for this feature?\n fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let _p = profile::span(\"fuzzy_completion\u00ae\");\n     let current_module = ctx.scope.module()?;\n@@ -97,23 +96,35 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n             })\n             .filter(|(mod_path, _)| mod_path.len() > 1)\n             .filter_map(|(mod_path, definition)| {\n-                let mut resolution_with_missing_import = render_resolution(\n-                    RenderContext::new(ctx),\n-                    mod_path.segments.last()?.to_string(),\n-                    &definition,\n-                )?;\n+                let use_to_insert = mod_path_to_ast(&mod_path);\n+                let mut mod_path_without_last_segment = mod_path;\n+                let name_after_import = mod_path_without_last_segment.segments.pop()?.to_string();\n+\n+                let resolution_with_missing_import =\n+                    render_resolution(RenderContext::new(ctx), name_after_import, &definition)?;\n+                let lookup_string = resolution_with_missing_import.lookup().to_owned();\n \n                 let mut text_edits =\n                     resolution_with_missing_import.text_edit().to_owned().into_builder();\n-\n-                let rewriter =\n-                    insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n+                let rewriter = insert_use(&import_scope, use_to_insert, ctx.config.merge);\n                 let old_ast = rewriter.rewrite_root()?;\n                 algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n \n-                resolution_with_missing_import.update_text_edit(text_edits.finish());\n-\n-                Some(resolution_with_missing_import)\n+                let qualifier_string = mod_path_without_last_segment.to_string();\n+                let qualified_label = if qualifier_string.is_empty() {\n+                    resolution_with_missing_import.label().to_owned()\n+                } else {\n+                    format!(\"{}::{}\", qualifier_string, resolution_with_missing_import.label())\n+                };\n+\n+                Some(\n+                    resolution_with_missing_import\n+                        .into_builder()\n+                        .text_edit(text_edits.finish())\n+                        .label(qualified_label)\n+                        .lookup_by(lookup_string)\n+                        .build(),\n+                )\n             })\n             .take(20);\n "}, {"sha": "24b9d036a31368ccd442152486dfe259db80a9da", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bbe1fbd1786b416908d3c6bc34c8cf805b39b761/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe1fbd1786b416908d3c6bc34c8cf805b39b761/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=bbe1fbd1786b416908d3c6bc34c8cf805b39b761", "patch": "@@ -202,6 +202,26 @@ impl CompletionItem {\n             ref_match: None,\n         }\n     }\n+\n+    pub(crate) fn into_builder(self) -> Builder {\n+        Builder {\n+            source_range: self.source_range,\n+            completion_kind: self.completion_kind,\n+            label: self.label,\n+            insert_text: None,\n+            insert_text_format: self.insert_text_format,\n+            detail: self.detail,\n+            documentation: self.documentation,\n+            lookup: self.lookup,\n+            kind: self.kind,\n+            text_edit: Some(self.text_edit),\n+            deprecated: Some(self.deprecated),\n+            trigger_call_info: Some(self.trigger_call_info),\n+            score: self.score,\n+            ref_match: self.ref_match,\n+        }\n+    }\n+\n     /// What user sees in pop-up in the UI.\n     pub fn label(&self) -> &str {\n         &self.label\n@@ -218,10 +238,6 @@ impl CompletionItem {\n         &self.text_edit\n     }\n \n-    pub fn update_text_edit(&mut self, new_text_edit: TextEdit) {\n-        self.text_edit = new_text_edit;\n-    }\n-\n     /// Short one-line additional information, like a type\n     pub fn detail(&self) -> Option<&str> {\n         self.detail.as_deref()"}]}