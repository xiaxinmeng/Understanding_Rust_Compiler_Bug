{"sha": "f531abcef52c3c3ab283eb82a9487d5e9192bf12", "node_id": "C_kwDOAAsO6NoAKGY1MzFhYmNlZjUyYzNjM2FiMjgzZWI4MmE5NDg3ZDVlOTE5MmJmMTI", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-19T10:54:12Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-19T10:59:02Z"}, "message": "Do not suggest using Self in const generic parameters", "tree": {"sha": "d9bd5bd4c46f924dad2f160c95fbd54888a216f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9bd5bd4c46f924dad2f160c95fbd54888a216f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f531abcef52c3c3ab283eb82a9487d5e9192bf12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f531abcef52c3c3ab283eb82a9487d5e9192bf12", "html_url": "https://github.com/rust-lang/rust/commit/f531abcef52c3c3ab283eb82a9487d5e9192bf12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f531abcef52c3c3ab283eb82a9487d5e9192bf12/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d4b5ac4855433fdb7584285db4f0af65805041", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d4b5ac4855433fdb7584285db4f0af65805041", "html_url": "https://github.com/rust-lang/rust/commit/85d4b5ac4855433fdb7584285db4f0af65805041"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "8f2b4a7eafbd05c83cc395a780fd9334b6a93eaf", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f531abcef52c3c3ab283eb82a9487d5e9192bf12/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f531abcef52c3c3ab283eb82a9487d5e9192bf12/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f531abcef52c3c3ab283eb82a9487d5e9192bf12", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath,\n-    TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // avoid linting on nested items, we push `StackItem::NoCheck` on the stack to signal, that\n         // we're in an `impl` or nested item, that we don't want to lint\n         let stack_item = if_chain! {\n-            if let ItemKind::Impl(Impl { self_ty, .. }) = item.kind;\n+            if let ItemKind::Impl(Impl { self_ty, generics,.. }) = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n@@ -105,10 +105,17 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n+                // Self cannot be used inside const generic parameters\n+                let types_to_skip = generics.params.iter().filter_map(|param| {\n+                    match param {\n+                        GenericParam { kind: GenericParamKind::Const { ty: Ty { hir_id, ..}, ..}, ..} => Some(*hir_id),\n+                        _ => None,\n+                    }\n+                }).chain(std::iter::once(self_ty.hir_id)).collect();\n                 StackItem::Check {\n                     impl_id: item.owner_id.def_id,\n                     in_body: 0,\n-                    types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n+                    types_to_skip,\n                 }\n             } else {\n                 StackItem::NoCheck"}, {"sha": "3ac6217312a8c3be3be598dc4d319f6dffa1ec9a", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f531abcef52c3c3ab283eb82a9487d5e9192bf12/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f531abcef52c3c3ab283eb82a9487d5e9192bf12/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=f531abcef52c3c3ab283eb82a9487d5e9192bf12", "patch": "@@ -647,3 +647,13 @@ fn msrv_1_37() {\n         }\n     }\n }\n+\n+mod issue_10371 {\n+    struct Val<const V: i32> {}\n+\n+    impl<const V: i32> From<Val<V>> for i32 {\n+        fn from(_: Val<V>) -> Self {\n+            todo!()\n+        }\n+    }\n+}"}, {"sha": "9dc5d1e3f9b23c66d60f519bb8c2d374e1256c70", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f531abcef52c3c3ab283eb82a9487d5e9192bf12/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f531abcef52c3c3ab283eb82a9487d5e9192bf12/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=f531abcef52c3c3ab283eb82a9487d5e9192bf12", "patch": "@@ -647,3 +647,13 @@ fn msrv_1_37() {\n         }\n     }\n }\n+\n+mod issue_10371 {\n+    struct Val<const V: i32> {}\n+\n+    impl<const V: i32> From<Val<V>> for i32 {\n+        fn from(_: Val<V>) -> Self {\n+            todo!()\n+        }\n+    }\n+}"}]}