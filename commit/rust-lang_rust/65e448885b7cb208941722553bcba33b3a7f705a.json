{"sha": "65e448885b7cb208941722553bcba33b3a7f705a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTQ0ODg4NWI3Y2IyMDg5NDE3MjI1NTNiY2JhMzNiM2E3ZjcwNWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-04T02:44:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T02:44:57Z"}, "message": "Rollup merge of #76768 - workingjubilee:reject-oob-shuffles, r=ralfjung\n\nTest and reject out-of-bounds shuffle vectors\n\nFixes #73542.", "tree": {"sha": "a8563f80bfd144b5598bfb13c087a7909ed247fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8563f80bfd144b5598bfb13c087a7909ed247fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e448885b7cb208941722553bcba33b3a7f705a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfeTcqCRBK7hj4Ov3rIwAAdHIIAEz+/j097E9D5JEEfTHbTfRO\npcHsdn4gMIE5YP+4tT4EH7Q7FPTFvZ3Ik2em7eaMFDkGMjVs75XZRyA2XUPGAc/8\nQ/bYITh7Wxdbh/b1WR8F77VcNvAbo713aLVJ3RwmbDPPrpxqnuVKcGVbeoAVtKK5\nIrs7EqngynGt5zmwcvcYSA6Xzf+TFYw3Snhk1ZHGaqt1GsBHwaiaagruajt95yoU\n9nJ2xdBTN7NzNVR+F9BzhNtGlOBDg9adPJeOlMM7HcARLuoo29A0WIorYKGTwH8p\n9a2MAg5CtKVhtPUUwglHcW40fewrWDWSat3vX1RRsAszknO3WkwaYHC6BdOsRMk=\n=LKp9\n-----END PGP SIGNATURE-----\n", "payload": "tree a8563f80bfd144b5598bfb13c087a7909ed247fd\nparent b654555a32baa44872587ac170fe02af14db0b74\nparent 2fcd1838ed428af379f9f91ece56f2a129466e24\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601779497 +0900\ncommitter GitHub <noreply@github.com> 1601779497 +0900\n\nRollup merge of #76768 - workingjubilee:reject-oob-shuffles, r=ralfjung\n\nTest and reject out-of-bounds shuffle vectors\n\nFixes #73542.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e448885b7cb208941722553bcba33b3a7f705a", "html_url": "https://github.com/rust-lang/rust/commit/65e448885b7cb208941722553bcba33b3a7f705a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e448885b7cb208941722553bcba33b3a7f705a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b654555a32baa44872587ac170fe02af14db0b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/b654555a32baa44872587ac170fe02af14db0b74", "html_url": "https://github.com/rust-lang/rust/commit/b654555a32baa44872587ac170fe02af14db0b74"}, {"sha": "2fcd1838ed428af379f9f91ece56f2a129466e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcd1838ed428af379f9f91ece56f2a129466e24", "html_url": "https://github.com/rust-lang/rust/commit/2fcd1838ed428af379f9f91ece56f2a129466e24"}], "stats": {"total": 267, "additions": 267, "deletions": 0}, "files": [{"sha": "8a533453e75fdac4582bd294a131e09b63e6f674", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/65e448885b7cb208941722553bcba33b3a7f705a/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e448885b7cb208941722553bcba33b3a7f705a/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=65e448885b7cb208941722553bcba33b3a7f705a", "patch": "@@ -0,0 +1,191 @@\n+// build-fail\n+#![allow(non_camel_case_types)]\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// Test for #73542 to verify out-of-bounds shuffle vectors do not compile.\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x2(u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x4(u8, u8, u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x16(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x32(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x64(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+// Test vectors by lane size. Since LLVM does not distinguish between a shuffle\n+// over two f32s and a shuffle over two u64s, or any other such combination,\n+// it is not necessary to test every possible vector, only lane counts.\n+macro_rules! test_shuffle_lanes {\n+    ($n:literal, $x:ident, $y:ident, $t:tt) => {\n+        unsafe {\n+                let shuffle: $x = {\n+                    const ARR: [u32; $n] = {\n+                        let mut arr = [0; $n];\n+                        arr[0] = $n * 2;\n+                        arr\n+                    };\n+                    extern \"platform-intrinsic\" {\n+                        pub fn $y<T, U>(x: T, y: T, idx: [u32; $n]) -> U;\n+                    }\n+                    let vec1 = $x$t;\n+                    let vec2 = $x$t;\n+                    $y(vec1, vec2, ARR)\n+                };\n+        }\n+    }\n+}\n+//~^^^^^ ERROR: invalid monomorphization of `simd_shuffle2` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle4` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle8` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle16` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle32` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle64` intrinsic\n+// Because the test is mostly embedded in a macro, all the errors have the same origin point.\n+// And unfortunately, standard comments, as in the UI test harness, disappear in macros!\n+\n+fn main() {\n+    test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n+    test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n+    test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n+        (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n+        (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n+         15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n+        (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n+         48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n+         32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n+         16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+}"}, {"sha": "4806f2ca27b9eeb94f3e611c8aff15bcd5f0db5b", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/65e448885b7cb208941722553bcba33b3a7f705a/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65e448885b7cb208941722553bcba33b3a7f705a/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=65e448885b7cb208941722553bcba33b3a7f705a", "patch": "@@ -0,0 +1,76 @@\n+error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: shuffle index #0 is out of bounds (limit 4)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n+   |     ---------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: shuffle index #0 is out of bounds (limit 8)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n+   |     ---------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: shuffle index #0 is out of bounds (limit 16)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n+   |     ---------------------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle16` intrinsic: shuffle index #0 is out of bounds (limit 32)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n+LL | |         (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_________________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle32` intrinsic: shuffle index #0 is out of bounds (limit 64)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n+LL | |         (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n+LL | |          15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_____________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle64` intrinsic: shuffle index #0 is out of bounds (limit 128)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n+LL | |         (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n+LL | |          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n+LL | |          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n+LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_________________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}]}