{"sha": "083a4546f6a93be70da2538bf9bd73a0b88c8236", "node_id": "C_kwDOAAsO6NoAKDA4M2E0NTQ2ZjZhOTNiZTcwZGEyNTM4YmY5YmQ3M2EwYjg4YzgyMzY", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-10-20T05:41:44Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-10-20T05:41:44Z"}, "message": "Small refactor on `question_mark` condition checks", "tree": {"sha": "368551a9690f05f3ddd6b3ddc047b0721a069bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368551a9690f05f3ddd6b3ddc047b0721a069bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083a4546f6a93be70da2538bf9bd73a0b88c8236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083a4546f6a93be70da2538bf9bd73a0b88c8236", "html_url": "https://github.com/rust-lang/rust/commit/083a4546f6a93be70da2538bf9bd73a0b88c8236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083a4546f6a93be70da2538bf9bd73a0b88c8236/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fc99b6a3376a568adc2030e93b82ad3f99eb189", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc99b6a3376a568adc2030e93b82ad3f99eb189", "html_url": "https://github.com/rust-lang/rust/commit/3fc99b6a3376a568adc2030e93b82ad3f99eb189"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "4d616e26bfc1da1dab23a26aaaf0dcbc3b009cf5", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/083a4546f6a93be70da2538bf9bd73a0b88c8236/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083a4546f6a93be70da2538bf9bd73a0b88c8236/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=083a4546f6a93be70da2538bf9bd73a0b88c8236", "patch": "@@ -60,13 +60,8 @@ impl QuestionMark {\n             if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n             if let ExprKind::MethodCall(segment, _, args, _) = &cond.kind;\n             if let Some(subject) = args.get(0);\n-            if (Self::is_option(cx, subject)\n-                && Self::expression_returns_none(cx, then)\n-                && segment.ident.name == sym!(is_none))\n-                ||\n-                (Self::is_result(cx, subject)\n-                && Self::expression_returns_unmodified_err(cx, then, subject)\n-                && segment.ident.name == sym!(is_err));\n+            if (Self::option_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_none)) ||\n+                (Self::result_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_err));\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let receiver_str = &Sugg::hir_with_applicability(cx, subject, \"..\", &mut applicability);\n@@ -109,13 +104,8 @@ impl QuestionMark {\n             if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else: Some(if_else) })\n                 = higher::IfLet::hir(cx, expr);\n             if let PatKind::TupleStruct(ref path1, fields, None) = let_pat.kind;\n-            if (Self::is_option(cx, let_expr)\n-                && Self::expression_returns_none(cx, if_else)\n-                && is_lang_ctor(cx, path1, OptionSome))\n-                ||\n-                (Self::is_result(cx, let_expr)\n-                 && Self::expression_returns_unmodified_err(cx, if_else, let_expr)\n-                 && is_lang_ctor(cx, path1, ResultOk));\n+            if (Self::option_check_and_early_return(cx, let_expr, if_else) && is_lang_ctor(cx, path1, OptionSome)) ||\n+                (Self::result_check_and_early_return(cx, let_expr, if_else) && is_lang_ctor(cx, path1, ResultOk));\n \n             if let PatKind::Binding(annot, bind_id, _, _) = fields[0].kind;\n             let by_ref = matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n@@ -141,6 +131,14 @@ impl QuestionMark {\n         }\n     }\n \n+    fn result_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n+        Self::is_result(cx, expr) && Self::expression_returns_unmodified_err(cx, nested_expr, expr)\n+    }\n+\n+    fn option_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n+        Self::is_option(cx, expr) && Self::expression_returns_none(cx, nested_expr)\n+    }\n+\n     fn moves_by_default(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.typeck_results().expr_ty(expression);\n "}]}