{"sha": "e5984640e63d2e9f613d857ad2d48ff57b310655", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OTg0NjQwZTYzZDJlOWY2MTNkODU3YWQyZDQ4ZmY1N2IzMTA2NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T07:46:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T07:46:12Z"}, "message": "auto merge of #15961 : pcwalton/rust/fn-pointer-in-iterator, r=huonw\n\nThis breaks code like:\r\n\r\n    struct A<'a> {\r\n        func: &'a fn() -> Option<int>\r\n    }\r\n\r\n    fn foo() -> Option<int> { ... }\r\n\r\n    fn create() -> A<'static> {\r\n        A {\r\n            func: &foo\r\n        }\r\n    }\r\n\r\nChange this code to not take functions by reference. For example:\r\n\r\n    struct A {\r\n        func: extern \"Rust\" fn() -> Option<int>\r\n    }\r\n\r\n    fn foo() -> Option<int> { ... }\r\n\r\n    fn create() -> A {\r\n        A {\r\n            func: foo\r\n        }\r\n    }\r\n\r\nCloses #13595.\r\n\r\n[breaking-change]\r\n\r\nr? @huonw", "tree": {"sha": "73f74ca586a4c1ab3f6c816ae3d59592ef264204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f74ca586a4c1ab3f6c816ae3d59592ef264204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5984640e63d2e9f613d857ad2d48ff57b310655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5984640e63d2e9f613d857ad2d48ff57b310655", "html_url": "https://github.com/rust-lang/rust/commit/e5984640e63d2e9f613d857ad2d48ff57b310655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5984640e63d2e9f613d857ad2d48ff57b310655/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e388859a2e12f4019a09224d626eb07b8333651", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e388859a2e12f4019a09224d626eb07b8333651", "html_url": "https://github.com/rust-lang/rust/commit/4e388859a2e12f4019a09224d626eb07b8333651"}, {"sha": "d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "html_url": "https://github.com/rust-lang/rust/commit/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "a690d5882141fcee5ecddb942aa3ec0dcdbf1562", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e5984640e63d2e9f613d857ad2d48ff57b310655", "patch": "@@ -499,11 +499,11 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                id, expr_ty.repr(self.tcx()), def);\n \n         match def {\n-          def::DefStruct(..) | def::DefVariant(..) => {\n+          def::DefStruct(..) | def::DefVariant(..) | def::DefFn(..) |\n+          def::DefStaticMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n-          def::DefFn(..) | def::DefStaticMethod(..) | def::DefMod(_) |\n-          def::DefForeignMod(_) | def::DefStatic(_, false) |\n+          def::DefMod(_) | def::DefForeignMod(_) | def::DefStatic(_, false) |\n           def::DefUse(_) | def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) => {"}, {"sha": "c0d430908a137a32dad184070512f61bbadba296", "filename": "src/test/compile-fail/static-reference-to-fn-1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs?ref=e5984640e63d2e9f613d857ad2d48ff57b310655", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A<'a> {\n+    func: &'a fn() -> Option<int>\n+}\n+\n+impl<'a> A<'a> {\n+    fn call(&self) -> Option<int> {\n+        (*self.func)()\n+    }\n+}\n+\n+fn foo() -> Option<int> {\n+    None\n+}\n+\n+fn create() -> A<'static> {\n+    A {\n+        func: &foo, //~ ERROR borrowed value does not live long enough\n+    }\n+}\n+\n+fn main() {\n+    let a = create();\n+    a.call();\n+}"}, {"sha": "3a0f0a193cfe11f11ed7364ec9afc2278ed5fb3b", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5984640e63d2e9f613d857ad2d48ff57b310655/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=e5984640e63d2e9f613d857ad2d48ff57b310655", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct StateMachineIter<'a> {\n+    statefn: &'a fn(&mut StateMachineIter<'a>) -> Option<&'static str>\n+}\n+\n+impl<'a> Iterator<&'static str> for StateMachineIter<'a> {\n+    fn next(&mut self) -> Option<&'static str> {\n+        return  (*self.statefn)(self);\n+    }\n+}\n+\n+fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n+    self_.statefn = &state2;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state1\");\n+}\n+\n+fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    self_.statefn = &state3;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state2\");\n+}\n+\n+fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    self_.statefn = &finished;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state3\");\n+}\n+\n+fn finished(_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    return None;\n+}\n+\n+fn state_iter() -> StateMachineIter<'static> {\n+    StateMachineIter {\n+        statefn: &state1 //~ ERROR borrowed value does not live long enough\n+    }\n+}\n+\n+\n+fn main() {\n+    let mut it = state_iter();\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+}\n+"}]}