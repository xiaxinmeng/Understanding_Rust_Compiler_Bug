{"sha": "7e682d3f6f5761471e05fefc21e5de6ce4a52444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjgyZDNmNmY1NzYxNDcxZTA1ZmVmYzIxZTVkZTZjZTRhNTI0NDQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-29T15:01:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-30T09:15:28Z"}, "message": "Stabilize casts and coercions to `&[T]` in const fn", "tree": {"sha": "6efa90a5c3e1e6c81e513fda4580098ee9588f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efa90a5c3e1e6c81e513fda4580098ee9588f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e682d3f6f5761471e05fefc21e5de6ce4a52444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e682d3f6f5761471e05fefc21e5de6ce4a52444", "html_url": "https://github.com/rust-lang/rust/commit/7e682d3f6f5761471e05fefc21e5de6ce4a52444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e682d3f6f5761471e05fefc21e5de6ce4a52444/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86039b33343de264d8b3b1a9e3591b10d5615e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86039b33343de264d8b3b1a9e3591b10d5615e8", "html_url": "https://github.com/rust-lang/rust/commit/c86039b33343de264d8b3b1a9e3591b10d5615e8"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "f6788e317aeee6a9c59e78e179f462850d5a5f22", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -527,7 +527,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 size: Size::ZERO,\n             }),\n \n-            // Potentially-fat pointers.\n+            // Potentially-wide pointers.\n             ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n                 let mut data_ptr = scalar_unit(Pointer);\n                 if !ty.is_unsafe_ptr() {"}, {"sha": "28d9a3ad63c898a22b6673344c44b7f0b8d85773", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -191,8 +191,17 @@ fn check_rvalue(\n             _,\n             _,\n         ) => Err((span, \"function pointer casts are not allowed in const fn\".into())),\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n-            Err((span, \"unsizing casts are not allowed in const fn\".into()))\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), op, cast_ty) => {\n+            let pointee_ty = cast_ty.builtin_deref(true).unwrap().ty;\n+            let unsized_ty = tcx.struct_tail_erasing_lifetimes(pointee_ty, tcx.param_env(def_id));\n+            if let ty::Slice(_) | ty::Str = unsized_ty.kind {\n+                check_operand(tcx, op, span, def_id, body)?;\n+                // Casting/coercing things to slices is fine.\n+                Ok(())\n+            } else {\n+                // We just can't allow trait objects until we have figured out trait method calls.\n+                Err((span, \"unsizing casts are not allowed in const fn\".into()))\n+            }\n         }\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {"}, {"sha": "796f9d1b71f76cfacad59565994e7ba9b3d1e188", "filename": "src/test/ui/consts/array-to-slice-cast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Farray-to-slice-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Farray-to-slice-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-to-slice-cast.rs?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn main() {}\n+\n+const fn foo() {\n+    let x = [1, 2, 3, 4, 5];\n+    let y: &[_] = &x;\n+\n+    struct Foo<T: ?Sized>(bool, T);\n+\n+    let x: Foo<[u8; 3]> = Foo(true, [1, 2, 3]);\n+    let y: &Foo<[u8]> = &x;\n+}"}, {"sha": "2854c086657168b61cbd6cd32aefa90cae1818d0", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -1,7 +1,6 @@\n #![feature(const_extern_fn)]\n \n const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n-//~^ ERROR unsizing casts are not allowed in const fn\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n //~^ ERROR function pointers in const fn are unstable\n const unsafe extern fn use_float() { 1.0 + 1.0; }"}, {"sha": "146d119fc8f7fcdd43878cbcf5d282133b5ccd18", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -1,14 +1,5 @@\n-error[E0723]: unsizing casts are not allowed in const fn\n-  --> $DIR/const-extern-fn-min-const-fn.rs:3:48\n-   |\n-LL | const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n-   |                                                ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/const-extern-fn-min-const-fn.rs:5:41\n+  --> $DIR/const-extern-fn-min-const-fn.rs:4:41\n    |\n LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    |                                         ^^^^\n@@ -17,7 +8,7 @@ LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/const-extern-fn-min-const-fn.rs:7:38\n+  --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n    |\n LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    |                                      ^^^^^^^^^\n@@ -26,14 +17,14 @@ LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n+  --> $DIR/const-extern-fn-min-const-fn.rs:8:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0723`."}, {"sha": "8d730df16b0d1c9b3c6712aa8e886dad632b8ca3", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -1,7 +1,6 @@\n fn main() {}\n \n const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n-//~^ ERROR unsizing casts are not allowed in const fn\n const fn closure() -> fn() { || {} }\n //~^ ERROR function pointers in const fn are unstable\n const fn closure2() {"}, {"sha": "583cb4e9720cc63419e6f4f0deff408dfc68592e", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e682d3f6f5761471e05fefc21e5de6ce4a52444/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=7e682d3f6f5761471e05fefc21e5de6ce4a52444", "patch": "@@ -1,14 +1,5 @@\n-error[E0723]: unsizing casts are not allowed in const fn\n-  --> $DIR/cast_errors.rs:3:41\n-   |\n-LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n-   |                                         ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/cast_errors.rs:5:23\n+  --> $DIR/cast_errors.rs:4:23\n    |\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n@@ -17,7 +8,7 @@ LL | const fn closure() -> fn() { || {} }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/cast_errors.rs:8:5\n+  --> $DIR/cast_errors.rs:7:5\n    |\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n@@ -26,7 +17,7 @@ LL |     (|| {}) as fn();\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/cast_errors.rs:11:28\n+  --> $DIR/cast_errors.rs:10:28\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n@@ -35,14 +26,14 @@ LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/cast_errors.rs:13:21\n+  --> $DIR/cast_errors.rs:12:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0723`."}]}