{"sha": "c9819ceda2b87a481ba08e045f73bfade915b41d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ODE5Y2VkYTJiODdhNDgxYmEwOGUwNDVmNzNiZmFkZTkxNWI0MWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-08-29T03:01:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-29T03:01:48Z"}, "message": "Merge pull request #1135 from sinkuu/clippy\n\nRun clippy", "tree": {"sha": "8cf978b6b17fb6338d1fb9b46e9f1cad3347109d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf978b6b17fb6338d1fb9b46e9f1cad3347109d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9819ceda2b87a481ba08e045f73bfade915b41d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9819ceda2b87a481ba08e045f73bfade915b41d", "html_url": "https://github.com/rust-lang/rust/commit/c9819ceda2b87a481ba08e045f73bfade915b41d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9819ceda2b87a481ba08e045f73bfade915b41d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bce26d51bd3c0e93dad827fafd3827124fe8993d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce26d51bd3c0e93dad827fafd3827124fe8993d", "html_url": "https://github.com/rust-lang/rust/commit/bce26d51bd3c0e93dad827fafd3827124fe8993d"}, {"sha": "a3c63fdef95e0be5f09b7479765e54830b4ae250", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c63fdef95e0be5f09b7479765e54830b4ae250", "html_url": "https://github.com/rust-lang/rust/commit/a3c63fdef95e0be5f09b7479765e54830b4ae250"}], "stats": {"total": 218, "additions": 104, "deletions": 114}, "files": [{"sha": "9d2733f58201874ce467a1c78a43aedebb983a96", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -123,15 +123,15 @@ enum TargetKind {\n \n impl TargetKind {\n     fn is_lib(&self) -> bool {\n-        match self {\n-            &TargetKind::Lib => true,\n+        match *self {\n+            TargetKind::Lib => true,\n             _ => false,\n         }\n     }\n \n     fn is_bin(&self) -> bool {\n-        match self {\n-            &TargetKind::Bin => true,\n+        match *self {\n+            TargetKind::Bin => true,\n             _ => false,\n         }\n     }\n@@ -180,8 +180,8 @@ fn target_from_json(jtarget: &Json) -> Target {\n     }\n }\n \n-fn format_files(files: &Vec<PathBuf>,\n-                fmt_args: &Vec<String>,\n+fn format_files(files: &[PathBuf],\n+                fmt_args: &[String],\n                 verbosity: Verbosity)\n                 -> Result<ExitStatus, std::io::Error> {\n     let stdout = if verbosity == Verbosity::Quiet {"}, {"sha": "ab41fbb7de71d041a06ab14d1b3e206e20f48cf1", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -198,7 +198,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n     match try!(determine_operation(&matches)) {\n         Operation::Help => {\n-            print_usage(&opts, \"\");\n+            print_usage(opts, \"\");\n             Ok(Summary::new())\n         }\n         Operation::Version => {"}, {"sha": "77835d0414ea682197c6351c1002bc93545bb7a6", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -186,7 +186,7 @@ pub fn rewrite_chain(expr: &ast::Expr,\n         format!(\"\\n{}\", indent.to_string(context.config))\n     };\n \n-    let first_connector = if extend || subexpr_list.len() == 0 {\n+    let first_connector = if extend || subexpr_list.is_empty() {\n         \"\"\n     } else if let ast::ExprKind::Try(_) = subexpr_list[0].node {\n         \"\""}, {"sha": "3fc117904c718ebf3cd2bdc716e2b0bf993bf9df", "filename": "src/checkstyle.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -45,18 +45,14 @@ pub fn output_checkstyle_file<T>(mut writer: T,\n     try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n     for mismatch in diff {\n         for line in mismatch.lines {\n-            match line {\n-                DiffLine::Expected(ref str) => {\n-                    let message = xml_escape_str(&str);\n-                    try!(write!(writer,\n-                                \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be \\\n-                                 `{}`\\\" />\",\n-                                mismatch.line_number,\n-                                message));\n-                }\n-                _ => {\n-                    // Do nothing with context and expected.\n-                }\n+            // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n+            if let DiffLine::Expected(ref str) = line {\n+                let message = xml_escape_str(str);\n+                try!(write!(writer,\n+                            \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n+                             />\",\n+                            mismatch.line_number,\n+                            message));\n             }\n         }\n     }"}, {"sha": "979d3bef90e230aec9a58eadf5a85c465c7e22db", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -94,7 +94,7 @@ pub fn rewrite_comment(orig: &str,\n     let mut result = opener.to_owned();\n     for line in lines {\n         if result == opener {\n-            if line.len() == 0 {\n+            if line.is_empty() {\n                 continue;\n             }\n         } else {\n@@ -107,7 +107,7 @@ pub fn rewrite_comment(orig: &str,\n             let rewrite = rewrite_string(line, &fmt).unwrap_or(line.to_owned());\n             result.push_str(&rewrite);\n         } else {\n-            if line.len() == 0 {\n+            if line.is_empty() {\n                 // Remove space if this is an empty comment or a doc comment.\n                 result.pop();\n             }\n@@ -136,7 +136,7 @@ fn left_trim_comment_line(line: &str) -> &str {\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") ||\n               line.starts_with(\"**\") {\n         &line[2..]\n-    } else if line.starts_with(\"*\") {\n+    } else if line.starts_with('*') {\n         &line[1..]\n     } else {\n         line\n@@ -524,7 +524,7 @@ pub fn recover_comment_removed(new: String,\n     if changed_comment_content(&snippet, &new) {\n         // We missed some comments\n         // Keep previous formatting if it satisfies the constrains\n-        return wrap_str(snippet, context.config.max_width, width, offset);\n+        wrap_str(snippet, context.config.max_width, width, offset)\n     } else {\n         Some(new)\n     }"}, {"sha": "0f0526dba6dd8f2ed8af0e15ec0a8bc6cb8aebef", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -298,7 +298,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n                              // 1 = [\n-                             |item| item.rewrite(&inner_context, max_item_width, offset),\n+                             |item| item.rewrite(inner_context, max_item_width, offset),\n                              span.lo,\n                              span.hi)\n         .collect::<Vec<_>>();\n@@ -493,7 +493,7 @@ fn and_one_line(x: Option<String>) -> Option<String> {\n \n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     block_str.map(|block_str| {\n-        if block_str.starts_with(\"{\") && budget >= 2 &&\n+        if block_str.starts_with('{') && budget >= 2 &&\n            (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() == block_str.len() - 2) {\n             \"{}\".to_owned()\n         } else {\n@@ -772,7 +772,7 @@ fn rewrite_if_else(context: &RewriteContext,\n                                 pat.map_or(cond.span.lo,\n                                            |_| context.codemap.span_before(span, \"let\")));\n \n-    let between_if_cond_comment = extract_comment(between_if_cond, &context, offset, width);\n+    let between_if_cond_comment = extract_comment(between_if_cond, context, offset, width);\n \n     let after_cond_comment = extract_comment(mk_sp(cond.span.hi, if_block.span.lo),\n                                              context,\n@@ -831,13 +831,13 @@ fn rewrite_if_else(context: &RewriteContext,\n             mk_sp(if_block.span.hi,\n                   context.codemap.span_before(mk_sp(if_block.span.hi, else_block.span.lo), \"else\"));\n         let between_if_else_block_comment =\n-            extract_comment(between_if_else_block, &context, offset, width);\n+            extract_comment(between_if_else_block, context, offset, width);\n \n         let after_else = mk_sp(context.codemap\n                                    .span_after(mk_sp(if_block.span.hi, else_block.span.lo),\n                                                \"else\"),\n                                else_block.span.lo);\n-        let after_else_comment = extract_comment(after_else, &context, offset, width);\n+        let after_else_comment = extract_comment(after_else, context, offset, width);\n \n         let between_sep = match context.config.else_if_brace_style {\n             ElseIfBraceStyle::AlwaysNextLine |\n@@ -854,7 +854,7 @@ fn rewrite_if_else(context: &RewriteContext,\n                             .map_or(between_sep, |str| &**str),\n                         after_else_comment.as_ref().map_or(after_sep, |str| &**str))\n             .ok());\n-        result.push_str(&&try_opt!(rewrite));\n+        result.push_str(&try_opt!(rewrite));\n     }\n \n     Some(result)\n@@ -1021,7 +1021,7 @@ fn rewrite_match(context: &RewriteContext,\n             // We couldn't format the arm, just reproduce the source.\n             let snippet = context.snippet(mk_sp(arm_start_pos(arm), arm_end_pos(arm)));\n             result.push_str(&snippet);\n-            result.push_str(arm_comma(&context.config, &arm, &arm.body));\n+            result.push_str(arm_comma(context.config, arm, &arm.body));\n         }\n     }\n     // BytePos(1) = closing match brace.\n@@ -1102,7 +1102,7 @@ impl Rewrite for ast::Arm {\n             .map(|p| p.rewrite(context, pat_budget, offset))\n             .collect::<Option<Vec<_>>>());\n \n-        let all_simple = pat_strs.iter().all(|p| pat_is_simple(&p));\n+        let all_simple = pat_strs.iter().all(|p| pat_is_simple(p));\n         let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n         let fmt = ListFormatting {\n             tactic: if all_simple {\n@@ -1145,7 +1145,7 @@ impl Rewrite for ast::Arm {\n             ref x => x,\n         };\n \n-        let comma = arm_comma(&context.config, self, body);\n+        let comma = arm_comma(context.config, self, body);\n         let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n \n         // Let's try and get the arm body on the same line as the condition.\n@@ -1305,7 +1305,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n         expr.rewrite(context,\n                      try_opt!(context.config.max_width.checked_sub(pat_offset.width())),\n                      pat_offset);\n-    result.push_str(&&try_opt!(expr_rewrite));\n+    result.push_str(&try_opt!(expr_rewrite));\n \n     Some(result)\n }\n@@ -1433,7 +1433,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                              \")\",\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n-                             |item| item.rewrite(&inner_context, remaining_width, offset),\n+                             |item| item.rewrite(inner_context, remaining_width, offset),\n                              span.lo,\n                              span.hi);\n     let mut item_vec: Vec<_> = items.collect();\n@@ -1454,7 +1454,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     // first arguments.\n     if overflow_last {\n         let inner_context = &RewriteContext { block_indent: context.block_indent, ..*context };\n-        let rewrite = args.last().unwrap().rewrite(&inner_context, remaining_width, offset);\n+        let rewrite = args.last().unwrap().rewrite(inner_context, remaining_width, offset);\n \n         if let Some(rewrite) = rewrite {\n             let rewrite_first_line = Some(rewrite[..first_line_width(&rewrite)].to_owned());\n@@ -1557,8 +1557,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              \"}\",\n                              |item| {\n         match *item {\n-            StructLitField::Regular(ref field) => field.span.lo,\n-            StructLitField::Base(ref expr) => {\n+            StructLitField::Regular(field) => field.span.lo,\n+            StructLitField::Base(expr) => {\n                 let last_field_hi = fields.last().map_or(span.lo, |field| field.span.hi);\n                 let snippet = context.snippet(mk_sp(last_field_hi, expr.span.lo));\n                 let pos = snippet.find_uncommented(\"..\").unwrap();\n@@ -1568,19 +1568,19 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     },\n                              |item| {\n                                  match *item {\n-                                     StructLitField::Regular(ref field) => field.span.hi,\n-                                     StructLitField::Base(ref expr) => expr.span.hi,\n+                                     StructLitField::Regular(field) => field.span.hi,\n+                                     StructLitField::Base(expr) => expr.span.hi,\n                                  }\n                              },\n                              |item| {\n         match *item {\n-            StructLitField::Regular(ref field) => {\n+            StructLitField::Regular(field) => {\n                 rewrite_field(inner_context,\n-                              &field,\n+                              field,\n                               v_budget.checked_sub(1).unwrap_or(0),\n                               indent)\n             }\n-            StructLitField::Base(ref expr) => {\n+            StructLitField::Base(expr) => {\n                 // 2 = ..\n                 expr.rewrite(inner_context, try_opt!(v_budget.checked_sub(2)), indent + 2)\n                     .map(|s| format!(\"..{}\", s))\n@@ -1678,7 +1678,7 @@ fn rewrite_field(context: &RewriteContext,\n     match expr {\n         Some(e) => Some(format!(\"{}{}{}\", name, separator, e)),\n         None => {\n-            let expr_offset = offset.block_indent(&context.config);\n+            let expr_offset = offset.block_indent(context.config);\n             let expr = field.expr.rewrite(context,\n                                           try_opt!(context.config\n                                               .max_width\n@@ -1843,7 +1843,7 @@ fn rewrite_assignment(context: &RewriteContext,\n                           try_opt!(lhs.rewrite(context, max_width, offset)),\n                           operator_str);\n \n-    rewrite_assign_rhs(&context, lhs_str, rhs, width, offset)\n+    rewrite_assign_rhs(context, lhs_str, rhs, width, offset)\n }\n \n // The left hand side must contain everything up to, and including, the\n@@ -1863,7 +1863,7 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n     };\n     // 1 = space between operator and rhs.\n     let max_width = try_opt!(width.checked_sub(last_line_width + 1));\n-    let rhs = ex.rewrite(&context, max_width, offset + last_line_width + 1);\n+    let rhs = ex.rewrite(context, max_width, offset + last_line_width + 1);\n \n     fn count_line_breaks(src: &str) -> usize {\n         src.chars().filter(|&x| x == '\\n').count()"}, {"sha": "8ae3b06e28b62db58ce0201c87b87d2b706b97d5", "filename": "src/imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -21,10 +21,10 @@ use std::cmp::{self, Ordering};\n use syntax::{ast, ptr};\n \n fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n-    match a {\n-        &ast::ViewPath_::ViewPathSimple(_, ref p) => p,\n-        &ast::ViewPath_::ViewPathGlob(ref p) => p,\n-        &ast::ViewPath_::ViewPathList(ref p, _) => p,\n+    match *a {\n+        ast::ViewPath_::ViewPathSimple(_, ref p) => p,\n+        ast::ViewPath_::ViewPathGlob(ref p) => p,\n+        ast::ViewPath_::ViewPathList(ref p, _) => p,\n     }\n }\n \n@@ -203,7 +203,7 @@ impl<'a> FmtVisitor<'a> {\n             // Fake out the formatter by setting `self.last_pos` to the appropriate location before\n             // each item before visiting it.\n             self.last_pos = ordered.1;\n-            self.visit_item(&ordered.0);\n+            self.visit_item(ordered.0);\n         }\n         self.last_pos = pos_after_last_use_item;\n     }"}, {"sha": "5282ee603acf246d3cfb57b9d3db374b6b1934d6", "filename": "src/issues.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -22,11 +22,7 @@ const FIX_ME_CHARS: &'static [char] = &['F', 'I', 'X', 'M', 'E'];\n // irrelevant outside the issues module\n impl ReportTactic {\n     fn is_enabled(&self) -> bool {\n-        match *self {\n-            ReportTactic::Always => true,\n-            ReportTactic::Unnumbered => true,\n-            ReportTactic::Never => false,\n-        }\n+        *self != ReportTactic::Never\n     }\n }\n "}, {"sha": "b8fde7fbb0bc23806c95313d1d30b413a4f99ca6", "filename": "src/items.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -276,7 +276,7 @@ impl<'a> FmtVisitor<'a> {\n                                  self.block_indent)\n                         .map(|s| s + suffix)\n                         .or_else(|| Some(self.snippet(e.span)))\n-                } else if let Some(ref stmt) = block.stmts.first() {\n+                } else if let Some(stmt) = block.stmts.first() {\n                     stmt.rewrite(&self.get_context(),\n                                  self.config.max_width - self.block_indent.width(),\n                                  self.block_indent)\n@@ -324,7 +324,7 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_indent(self.config);\n         let variant_list = self.format_variant_list(enum_def, body_start, span.hi - BytePos(1));\n         match variant_list {\n-            Some(ref body_str) => self.buffer.push_str(&body_str),\n+            Some(ref body_str) => self.buffer.push_str(body_str),\n             None => {\n                 if contains_comment(&enum_snippet[brace_pos..]) {\n                     self.format_missing_no_indent(span.hi - BytePos(1))\n@@ -554,7 +554,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n             for item in items {\n-                visitor.visit_impl_item(&item);\n+                visitor.visit_impl_item(item);\n             }\n \n             visitor.format_missing(item.span.hi - BytePos(1));\n@@ -564,7 +564,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(&trim_newlines(&visitor.buffer.to_string().trim()));\n+            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         }\n@@ -581,7 +581,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n }\n \n fn is_impl_single_line(context: &RewriteContext,\n-                       items: &Vec<ImplItem>,\n+                       items: &[ImplItem],\n                        result: &str,\n                        where_clause_str: &str,\n                        item: &ast::Item)\n@@ -713,7 +713,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n                 if !where_clause_str.is_empty() &&\n-                   (trait_items.len() > 0 || result.contains('\\n')) {\n+                   (!trait_items.is_empty() || result.contains('\\n')) {\n                     result.push('\\n');\n                     result.push_str(&offset.to_string(context.config));\n                 } else {\n@@ -732,7 +732,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n             for item in trait_items {\n-                visitor.visit_trait_item(&item);\n+                visitor.visit_trait_item(item);\n             }\n \n             visitor.format_missing(item.span.hi - BytePos(1));\n@@ -742,7 +742,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(&trim_newlines(&visitor.buffer.to_string().trim()));\n+            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         } else if result.contains('\\n') {\n@@ -876,7 +876,7 @@ fn format_tuple_struct(context: &RewriteContext,\n     };\n \n     let where_clause_str = match generics {\n-        Some(ref generics) => {\n+        Some(generics) => {\n             let generics_str = try_opt!(rewrite_generics(context,\n                                                          generics,\n                                                          offset,\n@@ -951,7 +951,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                           -> Option<String> {\n     let mut result = String::new();\n \n-    result.push_str(&format_visibility(&vis));\n+    result.push_str(&format_visibility(vis));\n     result.push_str(\"type \");\n     result.push_str(&ident.to_string());\n \n@@ -1069,7 +1069,7 @@ pub fn rewrite_static(prefix: &str,\n                                      prefix.len() - 2,\n                                      context.block_indent));\n \n-    if let Some(ref expr) = expr_opt {\n+    if let Some(expr) = expr_opt {\n         let lhs = format!(\"{}{} =\", prefix, ty_str);\n         // 1 = ;\n         let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n@@ -1090,7 +1090,7 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n     let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n-        let bounds: &[_] = &ty_param_bounds;\n+        let bounds: &[_] = ty_param_bounds;\n         let bound_str = try_opt!(bounds.iter()\n             .map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n             .intersperse(Some(\" + \".to_string()))\n@@ -1374,7 +1374,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n         FnArgLayoutStyle::Block => multi_line_arg_str,\n         FnArgLayoutStyle::BlockAlways => true,\n         _ => false,\n-    } && fd.inputs.len() > 0;\n+    } && !fd.inputs.is_empty();\n \n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n@@ -1410,7 +1410,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n                 let overlong_sig = sig_length > context.config.max_width;\n \n-                result.contains(\"\\n\") || multi_line_ret_str || overlong_sig\n+                result.contains('\\n') || multi_line_ret_str || overlong_sig\n             }\n         };\n         let ret_indent = if ret_should_indent {\n@@ -1647,7 +1647,7 @@ fn compute_budgets_for_args(context: &RewriteContext,\n                             newline_brace: bool)\n                             -> Option<((usize, usize, Indent))> {\n     // Try keeping everything on the same line.\n-    if !result.contains(\"\\n\") {\n+    if !result.contains('\\n') {\n         // 3 = `() `, space is before ret_string.\n         let mut used_space = indent.width() + result.len() + ret_str_len + 3;\n         if !newline_brace {\n@@ -1710,8 +1710,8 @@ fn rewrite_generics(context: &RewriteContext,\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n-    let lt_strs = lifetimes.iter().map(|lt| lt.rewrite(&context, h_budget, offset));\n-    let ty_strs = tys.iter().map(|ty_param| ty_param.rewrite(&context, h_budget, offset));\n+    let lt_strs = lifetimes.iter().map(|lt| lt.rewrite(context, h_budget, offset));\n+    let ty_strs = tys.iter().map(|ty_param| ty_param.rewrite(context, h_budget, offset));\n \n     // Extract comments between generics.\n     let lt_spans = lifetimes.iter().map(|l| {\n@@ -1743,7 +1743,7 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n                         indent: Indent,\n                         width: usize)\n                         -> Option<String> {\n-    let bounds: &[_] = &type_param_bounds;\n+    let bounds: &[_] = type_param_bounds;\n \n     if bounds.is_empty() {\n         return Some(String::new());\n@@ -1801,7 +1801,7 @@ fn rewrite_where_clause(context: &RewriteContext,\n                              terminator,\n                              |pred| span_for_where_pred(pred).lo,\n                              |pred| span_for_where_pred(pred).hi,\n-                             |pred| pred.rewrite(&context, budget, offset),\n+                             |pred| pred.rewrite(context, budget, offset),\n                              span_start,\n                              span_end);\n     let item_vec = items.collect::<Vec<_>>();\n@@ -1825,9 +1825,9 @@ fn rewrite_where_clause(context: &RewriteContext,\n         // If the brace is on the next line we don't need to count it otherwise it needs two\n         // characters \" {\"\n         match brace_style {\n-            BraceStyle::AlwaysNextLine => 0,\n-            BraceStyle::PreferSameLine => 2,\n+            BraceStyle::AlwaysNextLine |\n             BraceStyle::SameLineWhere => 0,\n+            BraceStyle::PreferSameLine => 2,\n         }\n     } else if terminator == \"=\" {\n         2"}, {"sha": "dd6a2a5d0796ab5aab1dc59232711c687cea867c", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -254,7 +254,7 @@ impl FormatReport {\n     }\n \n     pub fn warning_count(&self) -> usize {\n-        self.file_error_map.iter().map(|(_, ref errors)| errors.len()).fold(0, |acc, x| acc + x)\n+        self.file_error_map.iter().map(|(_, errors)| errors.len()).fold(0, |acc, x| acc + x)\n     }\n \n     pub fn has_warnings(&self) -> bool {\n@@ -392,9 +392,9 @@ fn parse_input(input: Input,\n                parse_session: &ParseSess)\n                -> Result<ast::Crate, Option<DiagnosticBuilder>> {\n     let result = match input {\n-        Input::File(file) => parse::parse_crate_from_file(&file, Vec::new(), &parse_session),\n+        Input::File(file) => parse::parse_crate_from_file(&file, Vec::new(), parse_session),\n         Input::Text(text) => {\n-            parse::parse_crate_from_source_str(\"stdin\".to_owned(), text, Vec::new(), &parse_session)\n+            parse::parse_crate_from_source_str(\"stdin\".to_owned(), text, Vec::new(), parse_session)\n         }\n     };\n "}, {"sha": "9607039e1d24827961f7ecf8f66a677159c39816", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -357,7 +357,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n \n             // Post-comment\n             let next_start = match self.inner.peek() {\n-                Some(ref next_item) => (self.get_lo)(next_item),\n+                Some(next_item) => (self.get_lo)(next_item),\n                 None => self.next_span_start,\n             };\n             let post_snippet = self.codemap\n@@ -420,7 +420,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n \n             let post_snippet_trimmed = if post_snippet.starts_with(',') {\n                 post_snippet[1..].trim_matches(white_space)\n-            } else if post_snippet.ends_with(\",\") {\n+            } else if post_snippet.ends_with(',') {\n                 post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n             } else {\n                 post_snippet"}, {"sha": "5b87f6cc7ec512d9af6de84de3b4c79782a6fdbf", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -111,7 +111,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n                 _ => return None,\n             }\n \n-            let _ = parser.bump();\n+            parser.bump();\n \n             if parser.token == Token::Eof {\n                 return None;"}, {"sha": "98d87ba4963c61d7794ec07349927c9882a79a5a", "filename": "src/missed_spans.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -118,7 +118,7 @@ impl<'a> FmtVisitor<'a> {\n                 let last_char = big_snippet[..(offset + big_diff)]\n                     .chars()\n                     .rev()\n-                    .skip_while(|rev_c| [' ', '\\t'].contains(&rev_c))\n+                    .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n                     .next();\n \n                 let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n@@ -174,19 +174,17 @@ impl<'a> FmtVisitor<'a> {\n                     line_start = i + 1;\n                     last_wspace = None;\n                     rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n-                } else {\n-                    if c.is_whitespace() {\n-                        if last_wspace.is_none() {\n-                            last_wspace = Some(i);\n-                        }\n-                    } else {\n-                        rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n-                        last_wspace = None;\n+                } else if c.is_whitespace() {\n+                    if last_wspace.is_none() {\n+                        last_wspace = Some(i);\n                     }\n+                } else {\n+                    rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n+                    last_wspace = None;\n                 }\n             }\n         }\n \n-        process_last_snippet(self, &snippet[line_start..], &snippet);\n+        process_last_snippet(self, &snippet[line_start..], snippet);\n     }\n }"}, {"sha": "6ea2248ed3cf0eb753d0878476b14c3c2ee5887c", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -64,11 +64,11 @@ fn module_file(id: ast::Ident,\n                dir_path: &Path,\n                codemap: &codemap::CodeMap)\n                -> PathBuf {\n-    if let Some(path) = parser::Parser::submod_path_from_attr(attrs, &dir_path) {\n+    if let Some(path) = parser::Parser::submod_path_from_attr(attrs, dir_path) {\n         return path;\n     }\n \n-    match parser::Parser::default_submod_path(id, &dir_path, codemap).result {\n+    match parser::Parser::default_submod_path(id, dir_path, codemap).result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n         Err(_) => panic!(\"Couldn't find module {}\", id),\n     }"}, {"sha": "c35dd25672d10d0f57247572d585a2a547d4c8ee", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -153,7 +153,7 @@ impl Rewrite for Pat {\n                         field_string.push_str(&offset.to_string(context.config));\n                         field_string.push_str(\"..\");\n                     } else {\n-                        if field_string.len() > 0 {\n+                        if !field_string.is_empty() {\n                             field_string.push_str(\", \");\n                         }\n                         field_string.push_str(\"..\");"}, {"sha": "fff46b0750db9a750013121157de2a7f25a727ed", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -43,7 +43,7 @@ pub fn rewrite_path(context: &RewriteContext,\n \n     let mut span_lo = path.span.lo;\n \n-    if let Some(ref qself) = qself {\n+    if let Some(qself) = qself {\n         result.push('<');\n         let fmt_ty = try_opt!(qself.ty.rewrite(context, width, offset));\n         result.push_str(&fmt_ty);\n@@ -131,19 +131,19 @@ enum SegmentParam<'a> {\n impl<'a> SegmentParam<'a> {\n     fn get_span(&self) -> Span {\n         match *self {\n-            SegmentParam::LifeTime(ref lt) => lt.span,\n-            SegmentParam::Type(ref ty) => ty.span,\n-            SegmentParam::Binding(ref binding) => binding.span,\n+            SegmentParam::LifeTime(lt) => lt.span,\n+            SegmentParam::Type(ty) => ty.span,\n+            SegmentParam::Binding(binding) => binding.span,\n         }\n     }\n }\n \n impl<'a> Rewrite for SegmentParam<'a> {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {\n-            SegmentParam::LifeTime(ref lt) => lt.rewrite(context, width, offset),\n-            SegmentParam::Type(ref ty) => ty.rewrite(context, width, offset),\n-            SegmentParam::Binding(ref binding) => {\n+            SegmentParam::LifeTime(lt) => lt.rewrite(context, width, offset),\n+            SegmentParam::Type(ty) => ty.rewrite(context, width, offset),\n+            SegmentParam::Binding(binding) => {\n                 let mut result = format!(\"{} = \", binding.ident);\n                 let budget = try_opt!(width.checked_sub(result.len()));\n                 let rewrite = try_opt!(binding.ty.rewrite(context, budget, offset + result.len()));\n@@ -306,7 +306,7 @@ fn format_function_type<'a, I>(inputs: I,\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n-    let infix = if output.len() > 0 && output.len() + list_str.len() > width {\n+    let infix = if !output.is_empty() && output.len() + list_str.len() > width {\n         format!(\"\\n{}\", (offset - 1).to_string(context.config))\n     } else {\n         String::new()\n@@ -622,7 +622,7 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         result.push_str(\"> \");\n     }\n \n-    result.push_str(&::utils::format_unsafety(bare_fn.unsafety));\n+    result.push_str(::utils::format_unsafety(bare_fn.unsafety));\n \n     if bare_fn.abi != abi::Abi::Rust {\n         result.push_str(&::utils::format_abi(bare_fn.abi, context.config.force_explicit_abi));"}, {"sha": "70f16386ec2d95d918d3ba2a30b19924c4f35409", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -251,7 +251,7 @@ pub fn wrap_str<S: AsRef<str>>(s: S, max_width: usize, width: usize, offset: Ind\n             }\n \n             // The other lines must fit within the maximum width.\n-            if lines.find(|line| line.len() > max_width).is_some() {\n+            if lines.any(|line| line.len() > max_width) {\n                 return None;\n             }\n "}, {"sha": "237866ed9ece5452a4fc927502a21b3db8d19745", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9819ceda2b87a481ba08e045f73bfade915b41d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c9819ceda2b87a481ba08e045f73bfade915b41d", "patch": "@@ -85,15 +85,15 @@ impl<'a> FmtVisitor<'a> {\n \n         // Check if this block has braces.\n         let snippet = self.snippet(b.span);\n-        let has_braces = snippet.starts_with(\"{\") || snippet.starts_with(\"unsafe\");\n+        let has_braces = snippet.starts_with('{') || snippet.starts_with(\"unsafe\");\n         let brace_compensation = if has_braces { BytePos(1) } else { BytePos(0) };\n \n         self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent = self.block_indent.block_indent(self.config);\n         self.buffer.push_str(\"{\");\n \n         for stmt in &b.stmts {\n-            self.visit_stmt(&stmt)\n+            self.visit_stmt(stmt)\n         }\n \n         if let Some(ref e) = b.expr {\n@@ -144,7 +144,7 @@ impl<'a> FmtVisitor<'a> {\n                 defaultness: ast::Defaultness) {\n         let indent = self.block_indent;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, ref generics, unsafety, constness, abi, vis) => {\n+            visit::FnKind::ItemFn(ident, generics, unsafety, constness, abi, vis) => {\n                 self.rewrite_fn(indent,\n                                 ident,\n                                 fd,\n@@ -155,9 +155,9 @@ impl<'a> FmtVisitor<'a> {\n                                 abi,\n                                 vis,\n                                 codemap::mk_sp(s.lo, b.span.lo),\n-                                &b)\n+                                b)\n             }\n-            visit::FnKind::Method(ident, ref sig, vis) => {\n+            visit::FnKind::Method(ident, sig, vis) => {\n                 self.rewrite_fn(indent,\n                                 ident,\n                                 fd,\n@@ -168,7 +168,7 @@ impl<'a> FmtVisitor<'a> {\n                                 sig.abi,\n                                 vis.unwrap_or(&ast::Visibility::Inherited),\n                                 codemap::mk_sp(s.lo, b.span.lo),\n-                                &b)\n+                                b)\n             }\n             visit::FnKind::Closure => None,\n         };\n@@ -374,7 +374,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::TraitItemKind::Method(ref sig, Some(ref body)) => {\n                 self.visit_fn(visit::FnKind::Method(ti.ident, sig, None),\n                               &sig.decl,\n-                              &body,\n+                              body,\n                               ti.span,\n                               ti.id,\n                               ast::Defaultness::Final);\n@@ -516,7 +516,7 @@ impl<'a> FmtVisitor<'a> {\n                 // `unwrap()` is safe here because we know `items_left`\n                 // has elements from the loop condition\n                 let (item, rest) = items_left.split_first().unwrap();\n-                self.visit_item(&item);\n+                self.visit_item(item);\n                 items_left = rest;\n             }\n         }"}]}