{"sha": "7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOGY0ZjdlYWJlODc2MDU3ZDg1NWEyZjVjMDA4YmVkYjZmNDc3YTQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-18T20:48:07Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-18T20:55:34Z"}, "message": "Remove needless hir Map ref", "tree": {"sha": "e75a16d46d9d816ca83c7072d9d0b7261800a82d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e75a16d46d9d816ca83c7072d9d0b7261800a82d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "html_url": "https://github.com/rust-lang/rust/commit/7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c8f2612ffea42cc09350accdba934e85a19f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c8f2612ffea42cc09350accdba934e85a19f35", "html_url": "https://github.com/rust-lang/rust/commit/35c8f2612ffea42cc09350accdba934e85a19f35"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "23c002ce18cc27d8b098358ac9e6a968fbcac82e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "patch": "@@ -82,12 +82,12 @@ pub struct Map<'hir> {\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n /// Constructed using `tcx.hir().parent_iter(hir_id)`.\n-pub struct ParentHirIterator<'map, 'hir> {\n+pub struct ParentHirIterator<'hir> {\n     current_id: HirId,\n-    map: &'map Map<'hir>,\n+    map: Map<'hir>,\n }\n \n-impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n+impl<'hir> Iterator for ParentHirIterator<'hir> {\n     type Item = (HirId, Node<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -114,12 +114,12 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.\n-pub struct ParentOwnerIterator<'map, 'hir> {\n+pub struct ParentOwnerIterator<'hir> {\n     current_id: HirId,\n-    map: &'map Map<'hir>,\n+    map: Map<'hir>,\n }\n \n-impl<'hir> Iterator for ParentOwnerIterator<'_, 'hir> {\n+impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n     type Item = (HirId, OwnerNode<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -560,13 +560,13 @@ impl<'hir> Map<'hir> {\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n-    pub fn parent_iter(&self, current_id: HirId) -> ParentHirIterator<'_, 'hir> {\n+    pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n-    pub fn parent_owner_iter(&self, current_id: HirId) -> ParentOwnerIterator<'_, 'hir> {\n+    pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }\n "}, {"sha": "c7cd435312f32898059568b4b8b419fd342208b0", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "patch": "@@ -522,8 +522,7 @@ fn item_for(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> LocalDefId {\n         _ => {}\n     }\n     let item = {\n-        let hir = tcx.hir();\n-        let mut parent_iter = hir.parent_iter(hir_id);\n+        let mut parent_iter = tcx.hir().parent_iter(hir_id);\n         loop {\n             let node = parent_iter.next().map(|n| n.1);\n             match node {"}, {"sha": "94b3cd371bd08ab0113eb96fd24255c9d43b6945", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "patch": "@@ -105,8 +105,7 @@ impl<'hir> IfLet<'hir> {\n             if_else,\n         ) = expr.kind\n         {\n-            let hir = cx.tcx.hir();\n-            let mut iter = hir.parent_iter(expr.hir_id);\n+            let mut iter = cx.tcx.hir().parent_iter(expr.hir_id);\n             if let Some((_, Node::Block(Block { stmts: [], .. }))) = iter.next() {\n                 if let Some((\n                     _,"}, {"sha": "7f5a1bf9c0741707f0e4e34a66cb0fb6a6e199d7", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8f4f7eabe876057d855a2f5c008bedb6f477a4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=7c8f4f7eabe876057d855a2f5c008bedb6f477a4", "patch": "@@ -833,12 +833,11 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n         ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n     ));\n \n-    let map = cx.tcx.hir();\n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;\n     let mut capture_expr_ty = e;\n \n-    for (parent_id, parent) in map.parent_iter(e.hir_id) {\n+    for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n         if let [Adjustment {\n             kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n             target,\n@@ -1224,8 +1223,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n \n /// Gets the loop or closure enclosing the given expression, if any.\n pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    let map = tcx.hir();\n-    for (_, node) in map.parent_iter(expr.hir_id) {\n+    for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n                 e\n@@ -1244,8 +1242,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n \n /// Gets the parent node if it's an impl block.\n pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n-    let map = tcx.hir();\n-    match map.parent_iter(id).next() {\n+    match tcx.hir().parent_iter(id).next() {\n         Some((\n             _,\n             Node::Item(Item {\n@@ -1259,8 +1256,7 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n \n /// Checks if the given expression is the else clause of either an `if` or `if let` expression.\n pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n-    let map = tcx.hir();\n-    let mut iter = map.parent_iter(expr.hir_id);\n+    let mut iter = tcx.hir().parent_iter(expr.hir_id);\n     match iter.next() {\n         Some((\n             _,\n@@ -1794,9 +1790,8 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n \n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n-    let map = tcx.hir();\n     let mut child_id = expr.hir_id;\n-    let mut iter = map.parent_iter(child_id);\n+    let mut iter = tcx.hir().parent_iter(child_id);\n     loop {\n         match iter.next() {\n             None => break None,"}]}