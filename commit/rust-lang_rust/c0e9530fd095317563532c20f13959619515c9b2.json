{"sha": "c0e9530fd095317563532c20f13959619515c9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTk1MzBmZDA5NTMxNzU2MzUzMmMyMGYxMzk1OTYxOTUxNWM5YjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-12T09:23:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-12T09:23:04Z"}, "message": "Merge #7978\n\n7978: Unify naming r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9bb8c4b78a4525ecf758a2106254bf135d8a68f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb8c4b78a4525ecf758a2106254bf135d8a68f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e9530fd095317563532c20f13959619515c9b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSzL4CRBK7hj4Ov3rIwAAdHIIAH1/Ro3C6MqFZKjltMAoyQqp\n4MJBBvSHI89NGNuOK3l7SWhYzbqN/JJOJcC0HM2jhktTkv/km/61FkaT/59ycKG9\nb7qw9d1rQdfeXajoIvSuPlRhMHgxMQ2vUV5PXE/VjgvXcO5WQNoArvnypxle1CwX\n3JsDCxl3U1B71d/90/8EdAOZTsgwC9urIyHYD5kOnmhx0MR0XxItmnGWsWO0lmW3\nxzhoi2QJ/BGDmd9UbnrAikZlEFnRC7bRZJXSUkXfY79EJMdZzixEc7ZQcV1+9s3X\nveCdM7Dn5Hry5U+fs195/51i0MyQChRPs+G41cEaW8HMBDlrpoZPGVynvUurwHU=\n=GITp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bb8c4b78a4525ecf758a2106254bf135d8a68f3\nparent c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed\nparent 7e217a42e1c2dfd26defb9f448d8b0c57c7fc1a4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615540984 +0000\ncommitter GitHub <noreply@github.com> 1615540984 +0000\n\nMerge #7978\n\n7978: Unify naming r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e9530fd095317563532c20f13959619515c9b2", "html_url": "https://github.com/rust-lang/rust/commit/c0e9530fd095317563532c20f13959619515c9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e9530fd095317563532c20f13959619515c9b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "html_url": "https://github.com/rust-lang/rust/commit/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed"}, {"sha": "7e217a42e1c2dfd26defb9f448d8b0c57c7fc1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e217a42e1c2dfd26defb9f448d8b0c57c7fc1a4", "html_url": "https://github.com/rust-lang/rust/commit/7e217a42e1c2dfd26defb9f448d8b0c57c7fc1a4"}], "stats": {"total": 193, "additions": 90, "deletions": 103}, "files": [{"sha": "e846678b4b9736c87b26ea7109dddf0d881d2bd8", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -168,20 +168,20 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n             );\n             let lookup = components.join(\", \");\n             let label = components.iter().rev().join(\", \");\n-            let mut builder =\n+            let mut item =\n                 CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            builder.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n-            builder.add_to(acc);\n+            item.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n+            item.add_to(acc);\n         }\n \n         for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            let mut builder = CompletionItem::new(\n+            let mut item = CompletionItem::new(\n                 CompletionKind::Attribute,\n                 ctx.source_range(),\n                 custom_derive_name,\n             );\n-            builder.kind(CompletionItemKind::Attribute);\n-            builder.add_to(acc);\n+            item.kind(CompletionItemKind::Attribute);\n+            item.add_to(acc);\n         }\n     }\n }\n@@ -197,13 +197,13 @@ fn complete_lint(\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n-            let mut builder = CompletionItem::new(\n+            let mut item = CompletionItem::new(\n                 CompletionKind::Attribute,\n                 ctx.source_range(),\n                 lint_completion.label,\n             );\n-            builder.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n-            builder.add_to(acc)\n+            item.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n+            item.add_to(acc)\n         }\n     }\n }"}, {"sha": "0243dce569b743581451b36d5b6176e0bd6b9680", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -54,9 +54,9 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     params.into_iter().for_each(|(label, lookup)| {\n-        let mut builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n-        builder.kind(CompletionItemKind::Binding).lookup_by(lookup);\n-        builder.add_to(acc)\n+        let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n+        item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n+        item.add_to(acc)\n     });\n }\n "}, {"sha": "b635e0ca358cedc00d23a2a3015ddbd1f7fb74f0", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -12,32 +12,30 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n \n     if ctx.use_item_syntax.is_some() {\n         if ctx.path_qual.is_none() {\n-            let mut crate_builder =\n-                CompletionItem::new(CompletionKind::Keyword, source_range, \"crate::\");\n-            crate_builder.kind(CompletionItemKind::Keyword).insert_text(\"crate::\");\n-            crate_builder.add_to(acc);\n+            let mut item = CompletionItem::new(CompletionKind::Keyword, source_range, \"crate::\");\n+            item.kind(CompletionItemKind::Keyword).insert_text(\"crate::\");\n+            item.add_to(acc);\n         }\n-        let mut self_builder = CompletionItem::new(CompletionKind::Keyword, source_range, \"self\");\n-        self_builder.kind(CompletionItemKind::Keyword);\n-        self_builder.add_to(acc);\n+        let mut item = CompletionItem::new(CompletionKind::Keyword, source_range, \"self\");\n+        item.kind(CompletionItemKind::Keyword);\n+        item.add_to(acc);\n         if iter::successors(ctx.path_qual.clone(), |p| p.qualifier())\n             .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n         {\n-            let mut super_builder =\n-                CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\");\n-            super_builder.kind(CompletionItemKind::Keyword).insert_text(\"super::\");\n-            super_builder.add_to(acc);\n+            let mut item = CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\");\n+            item.kind(CompletionItemKind::Keyword).insert_text(\"super::\");\n+            item.add_to(acc);\n         }\n     }\n \n     // Suggest .await syntax for types that implement Future trait\n     if let Some(receiver) = &ctx.dot_receiver {\n         if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n             if ty.impls_future(ctx.db) {\n-                let mut builder =\n+                let mut item =\n                     CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n-                builder.kind(CompletionItemKind::Keyword).detail(\"expr.await\").insert_text(\"await\");\n-                builder.add_to(acc);\n+                item.kind(CompletionItemKind::Keyword).detail(\"expr.await\").insert_text(\"await\");\n+                item.add_to(acc);\n             }\n         };\n     }\n@@ -164,8 +162,8 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n }\n \n fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n-    let mut builder = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw);\n-    builder.kind(CompletionItemKind::Keyword);\n+    let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw);\n+    item.kind(CompletionItemKind::Keyword);\n \n     match ctx.config.snippet_cap {\n         Some(cap) => {\n@@ -177,13 +175,13 @@ fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet\n             } else {\n                 snippet\n             };\n-            builder.insert_snippet(cap, snippet);\n+            item.insert_snippet(cap, snippet);\n         }\n         None => {\n-            builder.insert_text(if snippet.contains('$') { kw } else { snippet });\n+            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n         }\n     };\n-    acc.add(builder.build());\n+    item.add_to(acc);\n }\n \n #[cfg(test)]"}, {"sha": "4f941573664593b77987e2ba80f86f91185a13ab", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -80,10 +80,9 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             if mod_under_caret.semicolon_token().is_none() {\n                 label.push(';');\n             }\n-            let mut builder =\n-                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label);\n-            builder.kind(SymbolKind::Module);\n-            builder.add_to(acc)\n+            let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label);\n+            item.kind(SymbolKind::Module);\n+            item.add_to(acc)\n         });\n \n     Some(())"}, {"sha": "ac69b720a8deef98fd038ee05bd5fd04a2e6d108", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -297,11 +297,9 @@ fn postfix_snippet(\n         let delete_range = TextRange::new(receiver_range.start(), ctx.source_range().end());\n         TextEdit::replace(delete_range, snippet.to_string())\n     };\n-    CompletionItem::new(CompletionKind::Postfix, ctx.source_range(), label)\n-        .detail(detail)\n-        .kind(CompletionItemKind::Snippet)\n-        .snippet_edit(cap, edit)\n-        .clone()\n+    let mut item = CompletionItem::new(CompletionKind::Postfix, ctx.source_range(), label);\n+    item.detail(detail).kind(CompletionItemKind::Snippet).snippet_edit(cap, edit);\n+    item\n }\n \n #[cfg(test)]"}, {"sha": "2f95b868743da57eb157c7ebb4f384b169f56179", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -22,13 +22,13 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                 let completion_text = completion_text\n                     .strip_prefix(ctx.token.to_string().as_str())\n                     .unwrap_or(completion_text);\n-                let mut builder = CompletionItem::new(\n+                let mut item = CompletionItem::new(\n                     CompletionKind::Snippet,\n                     ctx.source_range(),\n                     \"..Default::default()\",\n                 );\n-                builder.insert_text(completion_text).kind(SymbolKind::Field);\n-                acc.add(builder.build());\n+                item.insert_text(completion_text).kind(SymbolKind::Field);\n+                item.add_to(acc);\n             }\n \n             missing_fields"}, {"sha": "7f7830976b50fa44e4dac6cfdcf0df917a2de20d", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -8,8 +8,9 @@ use crate::{\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n-    let mut builder = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label);\n-    builder.insert_snippet(cap, snippet).kind(CompletionItemKind::Snippet).clone()\n+    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label);\n+    item.insert_snippet(cap, snippet).kind(CompletionItemKind::Snippet);\n+    item\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -34,7 +35,7 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n-    let mut test_module_builder = snippet(\n+    let mut item = snippet(\n         ctx,\n         cap,\n         \"tmod (Test module)\",\n@@ -49,10 +50,10 @@ mod tests {\n     }\n }\",\n     );\n-    test_module_builder.lookup_by(\"tmod\");\n-    test_module_builder.add_to(acc);\n+    item.lookup_by(\"tmod\");\n+    item.add_to(acc);\n \n-    let mut test_function_builder = snippet(\n+    let mut item = snippet(\n         ctx,\n         cap,\n         \"tfn (Test function)\",\n@@ -62,12 +63,11 @@ fn ${1:feature}() {\n     $0\n }\",\n     );\n-    test_function_builder.lookup_by(\"tfn\");\n-    test_function_builder.add_to(acc);\n+    item.lookup_by(\"tfn\");\n+    item.add_to(acc);\n \n-    let macro_rules_builder =\n-        snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\");\n-    macro_rules_builder.add_to(acc);\n+    let item = snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\");\n+    item.add_to(acc);\n }\n \n #[cfg(test)]"}, {"sha": "5a7361f8e56759233acde9f9d38d4e2200cef071", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -145,8 +145,8 @@ fn add_function_impl(\n         format!(\"fn {}(..)\", fn_name)\n     };\n \n-    let mut builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n-    builder.lookup_by(fn_name).set_documentation(func.docs(ctx.db));\n+    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n+    item.lookup_by(fn_name).set_documentation(func.docs(ctx.db));\n \n     let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n@@ -160,15 +160,15 @@ fn add_function_impl(\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n                 let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n-                builder.snippet_edit(cap, TextEdit::replace(range, snippet));\n+                item.snippet_edit(cap, TextEdit::replace(range, snippet));\n             }\n             None => {\n                 let header = format!(\"{} {{\", function_decl);\n-                builder.text_edit(TextEdit::replace(range, header));\n+                item.text_edit(TextEdit::replace(range, header));\n             }\n         };\n-        builder.kind(completion_kind);\n-        builder.add_to(acc);\n+        item.kind(completion_kind);\n+        item.add_to(acc);\n     }\n }\n \n@@ -184,14 +184,12 @@ fn add_type_alias_impl(\n \n     let range = TextRange::new(type_def_node.text_range().start(), ctx.source_range().end());\n \n-    let mut builder =\n-        CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n-    builder\n-        .text_edit(TextEdit::replace(range, snippet))\n+    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n+    item.text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n         .kind(SymbolKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db));\n-    builder.add_to(acc);\n+    item.add_to(acc);\n }\n \n fn add_const_impl(\n@@ -209,14 +207,13 @@ fn add_const_impl(\n             let range =\n                 TextRange::new(const_def_node.text_range().start(), ctx.source_range().end());\n \n-            let mut builder =\n+            let mut item =\n                 CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n-            builder\n-                .text_edit(TextEdit::replace(range, snippet))\n+            item.text_edit(TextEdit::replace(range, snippet))\n                 .lookup_by(const_name)\n                 .kind(SymbolKind::Const)\n                 .set_documentation(const_.docs(ctx.db));\n-            builder.add_to(acc);\n+            item.add_to(acc);\n         }\n     }\n }"}, {"sha": "f7f9084d90ef105cb85030114677f6658ec1f535", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -145,34 +145,33 @@ impl<'a> Render<'a> {\n     fn add_field(&mut self, field: hir::Field, ty: &Type) -> CompletionItem {\n         let is_deprecated = self.ctx.is_deprecated(field);\n         let name = field.name(self.ctx.db());\n-        let mut builder = CompletionItem::new(\n+        let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             name.to_string(),\n         );\n-        builder\n-            .kind(SymbolKind::Field)\n+        item.kind(SymbolKind::Field)\n             .detail(ty.display(self.ctx.db()).to_string())\n             .set_documentation(field.docs(self.ctx.db()))\n             .set_deprecated(is_deprecated);\n \n         if let Some(relevance) = compute_relevance(&self.ctx, &ty, &name.to_string()) {\n-            builder.set_relevance(relevance);\n+            item.set_relevance(relevance);\n         }\n \n-        builder.build()\n+        item.build()\n     }\n \n     fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n-        let mut builder = CompletionItem::new(\n+        let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             field.to_string(),\n         );\n \n-        builder.kind(SymbolKind::Field).detail(ty.display(self.ctx.db()).to_string());\n+        item.kind(SymbolKind::Field).detail(ty.display(self.ctx.db()).to_string());\n \n-        builder.build()\n+        item.build()\n     }\n \n     fn render_resolution("}, {"sha": "e8cfcc0c7b4029a446e1bba4dc71a14314078c4f", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -55,13 +55,12 @@ impl<'a> EnumRender<'a> {\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n-        let mut builder = CompletionItem::new(\n+        let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             self.qualified_name.clone(),\n         );\n-        builder\n-            .kind(SymbolKind::Variant)\n+        item.kind(SymbolKind::Variant)\n             .set_documentation(self.variant.docs(self.ctx.db()))\n             .set_deprecated(self.ctx.is_deprecated(self.variant))\n             .add_import(import_to_add)\n@@ -70,12 +69,12 @@ impl<'a> EnumRender<'a> {\n         if self.variant_kind == StructKind::Tuple {\n             cov_mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(self.variant.fields(self.ctx.db()).len());\n-            builder.add_call_parens(self.ctx.completion, self.short_qualified_name, params);\n+            item.add_call_parens(self.ctx.completion, self.short_qualified_name, params);\n         } else if self.path.is_some() {\n-            builder.lookup_by(self.short_qualified_name);\n+            item.lookup_by(self.short_qualified_name);\n         }\n \n-        builder.build()\n+        item.build()\n     }\n \n     fn detail(&self) -> String {"}, {"sha": "f4dabe3d10ac17e0173e2ba5c2e11e2ba5eb76f0", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -41,13 +41,12 @@ impl<'a> FunctionRender<'a> {\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n-        let mut builder = CompletionItem::new(\n+        let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             self.name.clone(),\n         );\n-        builder\n-            .kind(self.kind())\n+        item.kind(self.kind())\n             .set_documentation(self.ctx.docs(self.func))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n@@ -56,7 +55,7 @@ impl<'a> FunctionRender<'a> {\n             .add_call_parens(self.ctx.completion, self.name, params)\n             .add_import(import_to_add);\n \n-        builder.build()\n+        item.build()\n     }\n \n     fn detail(&self) -> String {"}, {"sha": "3fa21ba7c9dcaf56a73cbf246133d10787d3cb87", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -39,10 +39,9 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n-        let mut builder =\n+        let mut item =\n             CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label());\n-        builder\n-            .kind(SymbolKind::Macro)\n+        item.kind(SymbolKind::Macro)\n             .set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n             .add_import(import_to_add)\n@@ -53,18 +52,18 @@ impl<'a> MacroRender<'a> {\n             Some(cap) if needs_bang => {\n                 let snippet = self.snippet();\n                 let lookup = self.lookup();\n-                builder.insert_snippet(cap, snippet).lookup_by(lookup);\n+                item.insert_snippet(cap, snippet).lookup_by(lookup);\n             }\n             None if needs_bang => {\n-                builder.insert_text(self.banged_name());\n+                item.insert_text(self.banged_name());\n             }\n             _ => {\n                 cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n-                builder.insert_text(&self.name);\n+                item.insert_text(&self.name);\n             }\n         };\n \n-        Some(builder.build())\n+        Some(item.build())\n     }\n \n     fn needs_bang(&self) -> bool {"}, {"sha": "ca2926125446fa2928db66c3098a200ae1c69d71", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e9530fd095317563532c20f13959619515c9b2/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=c0e9530fd095317563532c20f13959619515c9b2", "patch": "@@ -69,20 +69,19 @@ fn build_completion(\n     ctx: RenderContext<'_>,\n     name: String,\n     pat: String,\n-    item: impl HasAttrs + Copy,\n+    def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name);\n-    completion\n-        .kind(CompletionItemKind::Binding)\n-        .set_documentation(ctx.docs(item))\n-        .set_deprecated(ctx.is_deprecated(item))\n+    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name);\n+    item.kind(CompletionItemKind::Binding)\n+        .set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n         .detail(&pat);\n     if let Some(snippet_cap) = ctx.snippet_cap() {\n-        completion.insert_snippet(snippet_cap, pat);\n+        item.insert_snippet(snippet_cap, pat);\n     } else {\n-        completion.insert_text(pat);\n+        item.insert_text(pat);\n     };\n-    completion.build()\n+    item.build()\n }\n \n fn render_pat("}]}