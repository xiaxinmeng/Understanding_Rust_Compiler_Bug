{"sha": "0832364946654a576383bdc49245fb22445bf069", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzIzNjQ5NDY2NTRhNTc2MzgzYmRjNDkyNDVmYjIyNDQ1YmYwNjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-31T02:02:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-31T02:02:57Z"}, "message": "std: Stabilize Atomic{Isize,Usize} methods\n\nThese methods were intended to be stable as of #16258 but the tags have since\nbeen lost in various refactorings. This commit re-adds the `#[stable]`\nattributes to each of these functions.", "tree": {"sha": "bf1fa8239f74ba21fe734e5bac8926378253ba47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1fa8239f74ba21fe734e5bac8926378253ba47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0832364946654a576383bdc49245fb22445bf069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0832364946654a576383bdc49245fb22445bf069", "html_url": "https://github.com/rust-lang/rust/commit/0832364946654a576383bdc49245fb22445bf069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0832364946654a576383bdc49245fb22445bf069/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d00c545ede609b9d43fdf9f252c15da5a66dac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d00c545ede609b9d43fdf9f252c15da5a66dac7", "html_url": "https://github.com/rust-lang/rust/commit/1d00c545ede609b9d43fdf9f252c15da5a66dac7"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "0f3823eb7a5b0df76d8e4d1933f4ac4da1a084a1", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0832364946654a576383bdc49245fb22445bf069/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0832364946654a576383bdc49245fb22445bf069/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=0832364946654a576383bdc49245fb22445bf069", "patch": "@@ -415,6 +415,7 @@ impl AtomicIsize {\n     /// let atomic_forty_two  = AtomicIsize::new(42);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(v: isize) -> AtomicIsize {\n         AtomicIsize {v: UnsafeCell::new(v)}\n     }\n@@ -437,6 +438,7 @@ impl AtomicIsize {\n     /// let value = some_isize.load(Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> isize {\n         unsafe { atomic_load(self.v.get(), order) }\n     }\n@@ -459,6 +461,7 @@ impl AtomicIsize {\n     ///\n     /// Panics if `order` is `Acquire` or `AcqRel`.\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: isize, order: Ordering) {\n         unsafe { atomic_store(self.v.get(), val, order); }\n     }\n@@ -477,6 +480,7 @@ impl AtomicIsize {\n     /// let value = some_isize.swap(10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn swap(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_swap(self.v.get(), val, order) }\n     }\n@@ -498,6 +502,7 @@ impl AtomicIsize {\n     /// let value = some_isize.compare_and_swap(5, 10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn compare_and_swap(&self, old: isize, new: isize, order: Ordering) -> isize {\n         unsafe { atomic_compare_and_swap(self.v.get(), old, new, order) }\n     }\n@@ -514,6 +519,7 @@ impl AtomicIsize {\n     /// assert_eq!(10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_add(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_add(self.v.get(), val, order) }\n     }\n@@ -530,6 +536,7 @@ impl AtomicIsize {\n     /// assert_eq!(-10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_sub(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n@@ -545,6 +552,7 @@ impl AtomicIsize {\n     /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_and(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_and(self.v.get(), val, order) }\n     }\n@@ -560,6 +568,7 @@ impl AtomicIsize {\n     /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_or(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_or(self.v.get(), val, order) }\n     }\n@@ -575,6 +584,7 @@ impl AtomicIsize {\n     /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_xor(&self, val: isize, order: Ordering) -> isize {\n         unsafe { atomic_xor(self.v.get(), val, order) }\n     }\n@@ -592,6 +602,7 @@ impl AtomicUsize {\n     /// let atomic_forty_two = AtomicUsize::new(42);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(v: usize) -> AtomicUsize {\n         AtomicUsize { v: UnsafeCell::new(v) }\n     }\n@@ -614,6 +625,7 @@ impl AtomicUsize {\n     /// let value = some_usize.load(Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> usize {\n         unsafe { atomic_load(self.v.get(), order) }\n     }\n@@ -636,6 +648,7 @@ impl AtomicUsize {\n     ///\n     /// Panics if `order` is `Acquire` or `AcqRel`.\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: usize, order: Ordering) {\n         unsafe { atomic_store(self.v.get(), val, order); }\n     }\n@@ -654,6 +667,7 @@ impl AtomicUsize {\n     /// let value = some_usize.swap(10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn swap(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_swap(self.v.get(), val, order) }\n     }\n@@ -675,6 +689,7 @@ impl AtomicUsize {\n     /// let value = some_usize.compare_and_swap(5, 10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn compare_and_swap(&self, old: usize, new: usize, order: Ordering) -> usize {\n         unsafe { atomic_compare_and_swap(self.v.get(), old, new, order) }\n     }\n@@ -691,6 +706,7 @@ impl AtomicUsize {\n     /// assert_eq!(10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_add(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_add(self.v.get(), val, order) }\n     }\n@@ -707,6 +723,7 @@ impl AtomicUsize {\n     /// assert_eq!(0, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_sub(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n@@ -722,6 +739,7 @@ impl AtomicUsize {\n     /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_and(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_and(self.v.get(), val, order) }\n     }\n@@ -737,6 +755,7 @@ impl AtomicUsize {\n     /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_or(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_or(self.v.get(), val, order) }\n     }\n@@ -752,6 +771,7 @@ impl AtomicUsize {\n     /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_xor(&self, val: usize, order: Ordering) -> usize {\n         unsafe { atomic_xor(self.v.get(), val, order) }\n     }"}]}