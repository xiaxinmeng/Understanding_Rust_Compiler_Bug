{"sha": "c8fb5b491a172efed308ba1f15843fbc93815fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZmI1YjQ5MWExNzJlZmVkMzA4YmExZjE1ODQzZmJjOTM4MTVmYzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-18T19:57:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-18T19:57:06Z"}, "message": "Merge #2307\n\n2307: Support hover through macro r=matklad a=kjeremy\n\nAllows hover to work through macros like `match_ast!`.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "0c6d2ea15471a4be005546df7065fb55948d7d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6d2ea15471a4be005546df7065fb55948d7d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8fb5b491a172efed308ba1f15843fbc93815fc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd0veSCRBK7hj4Ov3rIwAAdHIIAKrqTf2VV5n1jux9EfTuX6Ey\ntzqg/YKn6Ah4fQ5BjRyTh4LpglNt/AV4ifNQHPBKUzQ348IVprc/EWB5DWuXIKOV\n3m8/o7wJQWge0a3siCMMSkCNQCPBci/tMYYrIccFj84KF+KGuOp+9RCoJLwUGsKA\nvY8r06sI7QrXWc05ArqyZlEzJXeDtS59U4oAXP4qg+CUffsVQ7aibggwlDZyPWzH\nntiusmdvJBsKFmIfLNSDnqrahikF1GAdnPC7i2S2GvgAv1DBNWrVYeO6SkE/B3SD\nAUuqrEzQLDf3qOg1wXfUaAXsv4LkRUCiQsx5TlykrCBS16nIPZzUJfb+Kbaeo6A=\n=FG2B\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c6d2ea15471a4be005546df7065fb55948d7d23\nparent a4f21801c54c65eafa337edc5e86de2c46b37544\nparent 90f6f6080ea5f3f8588ed4a10056820e418e78d0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574107026 +0000\ncommitter GitHub <noreply@github.com> 1574107026 +0000\n\nMerge #2307\n\n2307: Support hover through macro r=matklad a=kjeremy\n\nAllows hover to work through macros like `match_ast!`.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fb5b491a172efed308ba1f15843fbc93815fc5", "html_url": "https://github.com/rust-lang/rust/commit/c8fb5b491a172efed308ba1f15843fbc93815fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8fb5b491a172efed308ba1f15843fbc93815fc5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f21801c54c65eafa337edc5e86de2c46b37544", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f21801c54c65eafa337edc5e86de2c46b37544", "html_url": "https://github.com/rust-lang/rust/commit/a4f21801c54c65eafa337edc5e86de2c46b37544"}, {"sha": "90f6f6080ea5f3f8588ed4a10056820e418e78d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f6f6080ea5f3f8588ed4a10056820e418e78d0", "html_url": "https://github.com/rust-lang/rust/commit/90f6f6080ea5f3f8588ed4a10056820e418e78d0"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "787b714b3ada73b7020907a6cee3ce20ab900784", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c8fb5b491a172efed308ba1f15843fbc93815fc5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fb5b491a172efed308ba1f15843fbc93815fc5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=c8fb5b491a172efed308ba1f15843fbc93815fc5", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay, Source};\n+use hir::{db::AstDatabase, Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n+    algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n-    AstNode,\n+    match_ast, AstNode,\n };\n \n use crate::{\n@@ -14,6 +14,7 @@ use crate::{\n         description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n         rust_code_markup_with_doc, ShortLabel,\n     },\n+    expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n@@ -162,55 +163,55 @@ fn hover_text_from_name_kind(\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let parse = db.parse(position.file_id);\n-    let file = parse.tree();\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     let mut res = HoverResult::new();\n \n-    let mut range = if let Some(name_ref) =\n-        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n-    {\n-        let mut no_fallback = false;\n-        if let Some(name_kind) =\n-            classify_name_ref(db, Source::new(position.file_id.into(), &name_ref)).map(|d| d.kind)\n-        {\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n-        }\n+    let mut range = match_ast! {\n+        match (token.ast.parent()) {\n+            ast::NameRef(name_ref) => {\n+                let mut no_fallback = false;\n+                if let Some(name_kind) =\n+                    classify_name_ref(db, token.with_ast(&name_ref)).map(|d| d.kind)\n+                {\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n+                }\n \n-        if res.is_empty() && !no_fallback {\n-            // Fallback index based approach:\n-            let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n-            for sym in symbols {\n-                let docs = docs_from_symbol(db, &sym);\n-                let desc = description_from_symbol(db, &sym);\n-                res.extend(hover_text(docs, desc));\n-            }\n-        }\n+                if res.is_empty() && !no_fallback {\n+                    // Fallback index based approach:\n+                    let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n+                    for sym in symbols {\n+                        let docs = docs_from_symbol(db, &sym);\n+                        let desc = description_from_symbol(db, &sym);\n+                        res.extend(hover_text(docs, desc));\n+                    }\n+                }\n \n-        if !res.is_empty() {\n-            Some(name_ref.syntax().text_range())\n-        } else {\n-            None\n-        }\n-    } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if let Some(name_kind) =\n-            classify_name(db, Source::new(position.file_id.into(), &name)).map(|d| d.kind)\n-        {\n-            let mut _b: bool = true;\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n-        }\n+                if !res.is_empty() {\n+                    Some(name_ref.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            ast::Name(name) => {\n+                if let Some(name_kind) = classify_name(db, token.with_ast(&name)).map(|d| d.kind) {\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut true));\n+                }\n \n-        if !res.is_empty() {\n-            Some(name.syntax().text_range())\n-        } else {\n-            None\n+                if !res.is_empty() {\n+                    Some(name.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n         }\n-    } else {\n-        None\n     };\n \n     if range.is_none() {\n-        let node = ancestors_at_offset(file.syntax(), position.offset).find(|n| {\n+        let node = token.ast.ancestors().find(|n| {\n             ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n@@ -716,4 +717,23 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_through_macro() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo() {}\n+            id! {\n+                fn bar() {\n+                    fo<|>o();\n+                }\n+            }\n+            \",\n+            &[\"fn foo()\"],\n+        );\n+    }\n }"}]}