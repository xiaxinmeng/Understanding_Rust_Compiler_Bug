{"sha": "f88162654df187923d87254cbb36806976f81771", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ODE2MjY1NGRmMTg3OTIzZDg3MjU0Y2JiMzY4MDY5NzZmODE3NzE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-10T14:45:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:12:21Z"}, "message": "Rename `Span::empty` to `Span::shrink_to_lo`, add `Span::shrink_to_hi`", "tree": {"sha": "b73d5707c6c514d25bb7a3ec402b04a7575ce4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b73d5707c6c514d25bb7a3ec402b04a7575ce4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88162654df187923d87254cbb36806976f81771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88162654df187923d87254cbb36806976f81771", "html_url": "https://github.com/rust-lang/rust/commit/f88162654df187923d87254cbb36806976f81771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88162654df187923d87254cbb36806976f81771/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fb13897d947e13a1322a055b71632e30357eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb13897d947e13a1322a055b71632e30357eff", "html_url": "https://github.com/rust-lang/rust/commit/e5fb13897d947e13a1322a055b71632e30357eff"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "1439410f7e9aa2ac025f2d23b92363cc77a1f9ff", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -879,7 +879,7 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Slice(ref ty) => hir::TySlice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n-                let span = t.span.with_hi(t.span.lo());\n+                let span = t.span.shrink_to_lo();\n                 let lifetime = match *region {\n                     Some(ref lt) => self.lower_lifetime(lt),\n                     None => self.elided_lifetime(span)"}, {"sha": "02e704b6841856779af8b5c5696d04caa96eaf0a", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -99,7 +99,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n             f.cx.item_extern_crate(f.span, f.alloc),\n             f.cx.item_use_simple(\n                 f.span,\n-                respan(f.span.empty(), VisibilityKind::Inherited),\n+                respan(f.span.shrink_to_lo(), VisibilityKind::Inherited),\n                 super_path,\n             ),\n         ];"}, {"sha": "bffa8628ff3530f527ff72589df83e826bcc9e76", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -1082,7 +1082,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     if !cx.access_levels.is_reachable(it.id) {\n                         let msg = \"function is marked #[no_mangle], but not exported\";\n                         let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n-                        let insertion_span = it.span.with_hi(it.span.lo());\n+                        let insertion_span = it.span.shrink_to_lo();\n                         if it.vis == hir::Visibility::Inherited {\n                             err.span_suggestion(insertion_span,\n                                                 \"try making it public\",\n@@ -1107,7 +1107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                    !cx.access_levels.is_reachable(it.id) {\n                        let msg = \"static is marked #[no_mangle], but not exported\";\n                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n-                       let insertion_span = it.span.with_hi(it.span.lo());\n+                       let insertion_span = it.span.shrink_to_lo();\n                        if it.vis == hir::Visibility::Inherited {\n                            err.span_suggestion(insertion_span,\n                                                \"try making it public\","}, {"sha": "30ff03a26538b2fa13a5d01170729c10875e5542", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -523,7 +523,7 @@ impl CrateStore for cstore::CStore {\n                 tokens: body.into(),\n                 legacy: def.legacy,\n             }),\n-            vis: codemap::respan(local_span.empty(), ast::VisibilityKind::Inherited),\n+            vis: codemap::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             tokens: None,\n         })\n     }"}, {"sha": "8494c043f90fcd28ef2e6ea3b3b20a0d0a1dceca", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -422,7 +422,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n             builder.args_and_body(block, &arguments, arg_scope, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace\n-        let fn_end = span.with_lo(span.hi());\n+        let fn_end = span.shrink_to_hi();\n         let source_info = builder.source_info(fn_end);\n         let return_block = builder.return_block();\n         builder.cfg.terminate(block, source_info,"}, {"sha": "dc22c23271d63855639e095e76df63fc701f8a18", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -756,7 +756,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n                     if item.span.ctxt().outer().expn_info().is_none() {\n-                        self.span = Some(item.span.with_hi(item.span.lo()));\n+                        self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n                     }\n@@ -768,12 +768,12 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                     if item.span.ctxt().outer().expn_info().is_none() {\n                         // don't insert between attributes and an item\n                         if item.attrs.is_empty() {\n-                            self.span = Some(item.span.with_hi(item.span.lo()));\n+                            self.span = Some(item.span.shrink_to_lo());\n                         } else {\n                             // find the first attribute on the item\n                             for attr in &item.attrs {\n                                 if self.span.map_or(true, |span| attr.span < span) {\n-                                    self.span = Some(attr.span.with_hi(attr.span.lo()));\n+                                    self.span = Some(attr.span.shrink_to_lo());\n                                 }\n                             }\n                         }"}, {"sha": "3d4d8571c6e4242283bea932777f3e3c30ae9b4a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -1209,7 +1209,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {\n         self.process_macro_use(trait_item.span);\n-        let vis_span = trait_item.span.empty();\n+        let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.node {\n             ast::TraitItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const("}, {"sha": "61afac97d6409b337a19522d934bc35519645f9e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -767,7 +767,7 @@ impl<'a, 'tcx, 'gcx> hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'a, '\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n                     if item.span.ctxt().outer().expn_info().is_none() {\n-                        self.span = Some(item.span.with_hi(item.span.lo()));\n+                        self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n                     }\n@@ -779,12 +779,12 @@ impl<'a, 'tcx, 'gcx> hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'a, '\n                     if item.span.ctxt().outer().expn_info().is_none() {\n                         // don't insert between attributes and an item\n                         if item.attrs.is_empty() {\n-                            self.span = Some(item.span.with_hi(item.span.lo()));\n+                            self.span = Some(item.span.shrink_to_lo());\n                         } else {\n                             // find the first attribute on the item\n                             for attr in &item.attrs {\n                                 if self.span.map_or(true, |span| attr.span < span) {\n-                                    self.span = Some(attr.span.with_hi(attr.span.lo()));\n+                                    self.span = Some(attr.span.shrink_to_lo());\n                                 }\n                             }\n                         }"}, {"sha": "4a685cfddb7a42f5e760d8a4427d26b622064335", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -2520,7 +2520,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if sugg_unit {\n                 let sugg_span = sess.codemap().end_point(expr_sp);\n                 // remove closing `)` from the span\n-                let sugg_span = sugg_span.with_hi(sugg_span.lo());\n+                let sugg_span = sugg_span.shrink_to_lo();\n                 err.span_suggestion(\n                     sugg_span,\n                     \"expected the unit value `()`; create it with empty parentheses\","}, {"sha": "eef7a6f8b4d6141d43d34bd50337e6db141afdd6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -117,7 +117,7 @@ impl Path {\n                 return None;\n             }\n         }\n-        Some(PathSegment::crate_root(self.span.with_hi(self.span.lo())))\n+        Some(PathSegment::crate_root(self.span.shrink_to_lo()))\n     }\n \n     pub fn is_global(&self) -> bool {"}, {"sha": "97cb6b492d73a7b5557e5c37e6412cbd8c950b9d", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -220,7 +220,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                 ty,\n                 expr,\n             ),\n-            vis: codemap::respan(span.empty(), ast::VisibilityKind::Public),\n+            vis: codemap::respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n             span,\n             tokens: None,\n         })"}, {"sha": "9b53553bf69d723b6d921078f60f4124180e06b3", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -987,7 +987,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs,\n             id: ast::DUMMY_NODE_ID,\n             node,\n-            vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n+            vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             span,\n             tokens: None,\n         })\n@@ -1033,7 +1033,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 span: ty.span,\n                 ty,\n                 ident: None,\n-                vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n+                vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n             }"}, {"sha": "34dd7696168a6d431ba160010d3ff3b17d00f2d1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             node: ast::ItemKind::Mod(krate.module),\n             ident: keywords::Invalid.ident(),\n             id: ast::DUMMY_NODE_ID,\n-            vis: respan(krate.span.empty(), ast::VisibilityKind::Public),\n+            vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n             tokens: None,\n         })));\n "}, {"sha": "b322fd9df3ec03f7e4e04b2f6c2c1b57df5b2c0d", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -858,7 +858,7 @@ fn expand_wrapper(cx: &ExtCtxt,\n         let path = path.iter().map(|s| s.to_string()).collect();\n         let use_item = cx.item_use_glob(\n             sp,\n-            respan(sp.empty(), ast::VisibilityKind::Inherited),\n+            respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             ids_ext(path),\n         );\n         cx.stmt_item(sp, use_item)"}, {"sha": "46e6027b094bc2d7a8e94713e1df71ef3081d59b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -1019,7 +1019,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n         ident: keywords::Invalid.ident(),\n         attrs,\n         id: ast::DUMMY_NODE_ID,\n-        vis: respan(span.empty(), ast::VisibilityKind::Public),\n+        vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n         span,\n         node: ast::ItemKind::Mod(module),\n         tokens: None,"}, {"sha": "5b8887f3536e800d95a8eb653413719e029b011c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -214,7 +214,7 @@ impl<'a> StringReader<'a> {\n \n         // Make the range zero-length if the span is invalid.\n         if span.lo() > span.hi() || begin.fm.start_pos != end.fm.start_pos {\n-            span = span.with_hi(span.lo());\n+            span = span.shrink_to_lo();\n         }\n \n         let mut sr = StringReader::new_raw_internal(sess, begin.fm);"}, {"sha": "cb7f165dbd44ae9735452fb5671803684d2afd54", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -1512,7 +1512,7 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::RArrow) {\n             Ok(FunctionRetTy::Ty(self.parse_ty_common(allow_plus, true)?))\n         } else {\n-            Ok(FunctionRetTy::Default(self.span.with_hi(self.span.lo())))\n+            Ok(FunctionRetTy::Default(self.span.shrink_to_lo()))\n         }\n     }\n "}, {"sha": "e6ed6d7b84ab3315c1d2e15b2825b63a7a7c38c9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -1568,7 +1568,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     ty,\n                     default.as_ref().map(|expr| &**expr),\n-                    &codemap::respan(ti.span.empty(), ast::VisibilityKind::Inherited),\n+                    &codemap::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 )?;\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n@@ -1579,7 +1579,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     &ti.generics,\n                     sig,\n-                    &codemap::respan(ti.span.empty(), ast::VisibilityKind::Inherited),\n+                    &codemap::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 )?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;"}, {"sha": "fdbc795b2d365500e81ac29da08ba6733008de8f", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -76,7 +76,7 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>\n             is_sugared_doc: false,\n             span,\n         }],\n-        vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n+        vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n         node: ast::ItemKind::Use(P(ast::UseTree {\n             prefix: ast::Path {\n                 segments: [name, \"prelude\", \"v1\"].into_iter().map(|name| {"}, {"sha": "49c372b751b506d4b694807aefddaf20810a2bda", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -530,7 +530,7 @@ impl<'a> TraitDef<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n-                vis: respan(self.span.empty(), ast::VisibilityKind::Inherited),\n+                vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n@@ -977,7 +977,7 @@ impl<'a> MethodDef<'a> {\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n             span: trait_.span,\n-            vis: respan(trait_.span.empty(), ast::VisibilityKind::Inherited),\n+            vis: respan(trait_.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {"}, {"sha": "f01a0aacb0a734a5cc2337d55bd82779b796d409", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -60,7 +60,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n             asm,\n             ctxt: cx.backtrace(),\n         })),\n-        vis: respan(sp.empty(), ast::VisibilityKind::Inherited),\n+        vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n         span: sp,\n         tokens: None,\n     })))"}, {"sha": "9b83d5510fb7d836dec3d37406c80dc7b21ef566", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88162654df187923d87254cbb36806976f81771/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=f88162654df187923d87254cbb36806976f81771", "patch": "@@ -239,8 +239,15 @@ impl Span {\n \n     /// Returns a new span representing an empty span at the beginning of this span\n     #[inline]\n-    pub fn empty(self) -> Span {\n-        self.with_hi(self.lo())\n+    pub fn shrink_to_lo(self) -> Span {\n+        let span = self.data();\n+        span.with_hi(span.lo)\n+    }\n+    /// Returns a new span representing an empty span at the end of this span\n+    #[inline]\n+    pub fn shrink_to_hi(self) -> Span {\n+        let span = self.data();\n+        span.with_lo(span.hi)\n     }\n \n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise."}]}