{"sha": "95f32f1ebddae26ac6610040ea93ea3de440089a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjMyZjFlYmRkYWUyNmFjNjYxMDA0MGVhOTNlYTNkZTQ0MDA4OWE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-11-30T15:38:30Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-02T07:18:46Z"}, "message": "arena: improve common patterns", "tree": {"sha": "55aabab5b05b5f9bce5aee9ecc439b345c1c1dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55aabab5b05b5f9bce5aee9ecc439b345c1c1dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f32f1ebddae26ac6610040ea93ea3de440089a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f32f1ebddae26ac6610040ea93ea3de440089a", "html_url": "https://github.com/rust-lang/rust/commit/95f32f1ebddae26ac6610040ea93ea3de440089a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f32f1ebddae26ac6610040ea93ea3de440089a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0806c70320093a37dbe52ba2442d1e047c9c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0806c70320093a37dbe52ba2442d1e047c9c8d", "html_url": "https://github.com/rust-lang/rust/commit/ca0806c70320093a37dbe52ba2442d1e047c9c8d"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "e926a886d634287f8ceee3b1ab805e14925f2a72", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95f32f1ebddae26ac6610040ea93ea3de440089a/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f32f1ebddae26ac6610040ea93ea3de440089a/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=95f32f1ebddae26ac6610040ea93ea3de440089a", "patch": "@@ -310,13 +310,8 @@ impl Default for DroplessArena {\n impl DroplessArena {\n     pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n         let ptr = ptr as *const u8 as *mut u8;\n-        for chunk in &*self.chunks.borrow() {\n-            if chunk.start() <= ptr && ptr < chunk.end() {\n-                return true;\n-            }\n-        }\n \n-        false\n+        self.chunks.borrow().iter().any(|chunk| chunk.start() <= ptr && ptr < chunk.end())\n     }\n \n     fn align(&self, align: usize) {\n@@ -408,7 +403,7 @@ impl DroplessArena {\n     {\n         assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n-        assert!(slice.len() != 0);\n+        assert!(!slice.is_empty());\n \n         let mem = self.alloc_raw(\n             slice.len() * mem::size_of::<T>(),"}]}