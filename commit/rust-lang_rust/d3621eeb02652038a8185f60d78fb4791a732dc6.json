{"sha": "d3621eeb02652038a8185f60d78fb4791a732dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjIxZWViMDI2NTIwMzhhODE4NWY2MGQ3OGZiNDc5MWE3MzJkYzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:35:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:35:30Z"}, "message": "internal: refactor unimplemented builtin macro diagnostic", "tree": {"sha": "0e200e563949977ffd0a857555d4ff874ab758dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e200e563949977ffd0a857555d4ff874ab758dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3621eeb02652038a8185f60d78fb4791a732dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3621eeb02652038a8185f60d78fb4791a732dc6", "html_url": "https://github.com/rust-lang/rust/commit/d3621eeb02652038a8185f60d78fb4791a732dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3621eeb02652038a8185f60d78fb4791a732dc6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec207f56a7b16075f68dcb89138d93a7eecdf43", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec207f56a7b16075f68dcb89138d93a7eecdf43", "html_url": "https://github.com/rust-lang/rust/commit/dec207f56a7b16075f68dcb89138d93a7eecdf43"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "3908e67a28448f29579d121a5222973cf845976b", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=d3621eeb02652038a8185f60d78fb4791a732dc6", "patch": "@@ -32,14 +32,15 @@ macro_rules! diagnostics {\n }\n \n diagnostics![\n-    UnresolvedModule,\n+    InactiveCode,\n+    MacroError,\n+    MissingFields,\n+    UnimplementedBuiltinMacro,\n     UnresolvedExternCrate,\n     UnresolvedImport,\n     UnresolvedMacroCall,\n+    UnresolvedModule,\n     UnresolvedProcMacro,\n-    MacroError,\n-    MissingFields,\n-    InactiveCode,\n ];\n \n #[derive(Debug)]\n@@ -88,26 +89,7 @@ pub struct MacroError {\n \n #[derive(Debug)]\n pub struct UnimplementedBuiltinMacro {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n-}\n-\n-impl Diagnostic for UnimplementedBuiltinMacro {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unimplemented-builtin-macro\")\n-    }\n-\n-    fn message(&self) -> String {\n-        \"unimplemented built-in macro\".to_string()\n-    }\n-\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n+    pub node: InFile<SyntaxNodePtr>,\n }\n \n // Diagnostic: no-such-field"}, {"sha": "a361158e0ddf622f61cc5e97802667fdaf03f047", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d3621eeb02652038a8185f60d78fb4791a732dc6", "patch": "@@ -606,8 +606,12 @@ impl Module {\n                     let node = ast.to_node(db.upcast());\n                     // Must have a name, otherwise we wouldn't emit it.\n                     let name = node.name().expect(\"unimplemented builtin macro with no name\");\n-                    let ptr = SyntaxNodePtr::from(AstPtr::new(&name));\n-                    sink.push(UnimplementedBuiltinMacro { file: ast.file_id, node: ptr });\n+                    acc.push(\n+                        UnimplementedBuiltinMacro {\n+                            node: ast.with_value(SyntaxNodePtr::from(AstPtr::new(&name))),\n+                        }\n+                        .into(),\n+                    );\n                 }\n             }\n         }"}, {"sha": "3fbd21c300ae5cbf14d2a749015ce8fab04cdbc0", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=d3621eeb02652038a8185f60d78fb4791a732dc6", "patch": "@@ -9,6 +9,7 @@ mod unresolved_extern_crate;\n mod unresolved_import;\n mod unresolved_macro_call;\n mod unresolved_proc_macro;\n+mod unimplemented_builtin_macro;\n mod macro_error;\n mod inactive_code;\n mod missing_fields;\n@@ -185,11 +186,6 @@ pub(crate) fn diagnostics(\n                     .with_code(Some(d.code())),\n             );\n         })\n-        .on::<hir::diagnostics::UnimplementedBuiltinMacro, _>(|d| {\n-            let display_range = sema.diagnostics_display_range(d.display_source()).range;\n-            res.borrow_mut()\n-                .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n-        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));\n@@ -229,6 +225,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::UnresolvedProcMacro(d) => unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n+            AnyDiagnostic::UnimplementedBuiltinMacro(d) => unimplemented_builtin_macro::unimplemented_builtin_macro(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n "}, {"sha": "09faa3bbc714f18c02d4c59873bf135f924a513d", "filename": "crates/ide/src/diagnostics/unimplemented_builtin_macro.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fide%2Fsrc%2Fdiagnostics%2Funimplemented_builtin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3621eeb02652038a8185f60d78fb4791a732dc6/crates%2Fide%2Fsrc%2Fdiagnostics%2Funimplemented_builtin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funimplemented_builtin_macro.rs?ref=d3621eeb02652038a8185f60d78fb4791a732dc6", "patch": "@@ -0,0 +1,19 @@\n+use crate::{\n+    diagnostics::{Diagnostic, DiagnosticsContext},\n+    Severity,\n+};\n+\n+// Diagnostic: unimplemented-builtin-macro\n+//\n+// This diagnostic is shown for builtin macros which are not yet implemented by rust-analyzer\n+pub(super) fn unimplemented_builtin_macro(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnimplementedBuiltinMacro,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"unimplemented-builtin-macro\",\n+        \"unimplemented built-in macro\".to_string(),\n+        ctx.sema.diagnostics_display_range(d.node.clone()).range,\n+    )\n+    .severity(Severity::WeakWarning)\n+}"}]}