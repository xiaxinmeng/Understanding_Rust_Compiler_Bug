{"sha": "9e59d744acb256d908d9532c8c6dd4a60638f48b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNTlkNzQ0YWNiMjU2ZDkwOGQ5NTMyYzhjNmRkNGE2MDYzOGY0OGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-30T04:51:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-30T20:28:35Z"}, "message": "fix tests", "tree": {"sha": "8abc7224696923bb3978dd6ce17e30086f6aba26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abc7224696923bb3978dd6ce17e30086f6aba26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e59d744acb256d908d9532c8c6dd4a60638f48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e59d744acb256d908d9532c8c6dd4a60638f48b", "html_url": "https://github.com/rust-lang/rust/commit/9e59d744acb256d908d9532c8c6dd4a60638f48b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e59d744acb256d908d9532c8c6dd4a60638f48b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "762f6452b96d93f4f108bf7101189f2688a9dcde", "url": "https://api.github.com/repos/rust-lang/rust/commits/762f6452b96d93f4f108bf7101189f2688a9dcde", "html_url": "https://github.com/rust-lang/rust/commit/762f6452b96d93f4f108bf7101189f2688a9dcde"}], "stats": {"total": 333, "additions": 187, "deletions": 146}, "files": [{"sha": "e2ddb8810e90a64cd58ed4076b5613ec745152fb", "filename": "src/libfmt_macros/tests.rs", "status": "modified", "additions": 187, "deletions": 146, "changes": 333, "blob_url": "https://github.com/rust-lang/rust/blob/9e59d744acb256d908d9532c8c6dd4a60638f48b/src%2Flibfmt_macros%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e59d744acb256d908d9532c8c6dd4a60638f48b/src%2Flibfmt_macros%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Ftests.rs?ref=9e59d744acb256d908d9532c8c6dd4a60638f48b", "patch": "@@ -12,6 +12,8 @@ fn fmtdflt() -> FormatSpec<'static> {\n         flags: 0,\n         precision: CountImplied,\n         width: CountImplied,\n+        precision_span: None,\n+        width_span: None,\n         ty: \"\",\n     };\n }\n@@ -79,165 +81,204 @@ fn format_position_nothing_else() {\n }\n #[test]\n fn format_type() {\n-    same(\"{3:a}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentIs(3),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"a\",\n-               },\n-           })]);\n+    same(\n+        \"{3:a}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"a\",\n+            },\n+        })]);\n }\n #[test]\n fn format_align_fill() {\n-    same(\"{3:>}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentIs(3),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignRight,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"\",\n-               },\n-           })]);\n-    same(\"{3:0<}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentIs(3),\n-               format: FormatSpec {\n-                   fill: Some('0'),\n-                   align: AlignLeft,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"\",\n-               },\n-           })]);\n-    same(\"{3:*<abcd}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentIs(3),\n-               format: FormatSpec {\n-                   fill: Some('*'),\n-                   align: AlignLeft,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"abcd\",\n-               },\n-           })]);\n+    same(\n+        \"{3:>}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignRight,\n+                flags: 0,\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"\",\n+            },\n+        })]);\n+    same(\n+        \"{3:0<}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3),\n+            format: FormatSpec {\n+                fill: Some('0'),\n+                align: AlignLeft,\n+                flags: 0,\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"\",\n+            },\n+        })]);\n+    same(\n+        \"{3:*<abcd}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(3),\n+            format: FormatSpec {\n+                fill: Some('*'),\n+                align: AlignLeft,\n+                flags: 0,\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"abcd\",\n+            },\n+        })]);\n }\n #[test]\n fn format_counts() {\n     use syntax_pos::{GLOBALS, Globals, edition};\n     GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n-    same(\"{:10s}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountIs(10),\n-                   ty: \"s\",\n-               },\n-           })]);\n-    same(\"{:10$.10s}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountIs(10),\n-                   width: CountIsParam(10),\n-                   ty: \"s\",\n-               },\n-           })]);\n-    same(\"{:.*s}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(1),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountIsParam(0),\n-                   width: CountImplied,\n-                   ty: \"s\",\n-               },\n-           })]);\n-    same(\"{:.10$s}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountIsParam(10),\n-                   width: CountImplied,\n-                   ty: \"s\",\n-               },\n-           })]);\n-    same(\"{:a$.b$s}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountIsName(Symbol::intern(\"b\")),\n-                   width: CountIsName(Symbol::intern(\"a\")),\n-                   ty: \"s\",\n-               },\n-           })]);\n+    same(\n+        \"{:10s}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountImplied,\n+                width: CountIs(10),\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"s\",\n+            },\n+        })]);\n+    same(\n+        \"{:10$.10s}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIs(10),\n+                width: CountIsParam(10),\n+                precision_span: None,\n+                width_span: Some(InnerSpan::new(3, 6)),\n+                ty: \"s\",\n+            },\n+        })]);\n+    same(\n+        \"{:.*s}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(1),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIsParam(0),\n+                width: CountImplied,\n+                precision_span: Some(InnerSpan::new(3, 5)),\n+                width_span: None,\n+                ty: \"s\",\n+            },\n+        })]);\n+    same(\n+        \"{:.10$s}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIsParam(10),\n+                width: CountImplied,\n+                precision_span: Some(InnerSpan::new(3, 7)),\n+                width_span: None,\n+                ty: \"s\",\n+            },\n+        })]);\n+    same(\n+        \"{:a$.b$s}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIsName(Symbol::intern(\"b\")),\n+                width: CountIsName(Symbol::intern(\"a\")),\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"s\",\n+            },\n+        })]);\n     });\n }\n #[test]\n fn format_flags() {\n-    same(\"{:-}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: (1 << FlagSignMinus as u32),\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"\",\n-               },\n-           })]);\n-    same(\"{:+#}\",\n-         &[NextArgument(Argument {\n-               position: ArgumentImplicitlyIs(0),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: (1 << FlagSignPlus as u32) | (1 << FlagAlternate as u32),\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"\",\n-               },\n-           })]);\n+    same(\n+        \"{:-}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: (1 << FlagSignMinus as u32),\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"\",\n+            },\n+        })]);\n+    same(\n+        \"{:+#}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: (1 << FlagSignPlus as u32) | (1 << FlagAlternate as u32),\n+                precision: CountImplied,\n+                width: CountImplied,\n+                precision_span: None,\n+                width_span: None,\n+                ty: \"\",\n+            },\n+        })]);\n }\n #[test]\n fn format_mixture() {\n-    same(\"abcd {3:a} efg\",\n-         &[String(\"abcd \"),\n-           NextArgument(Argument {\n-               position: ArgumentIs(3),\n-               format: FormatSpec {\n-                   fill: None,\n-                   align: AlignUnknown,\n-                   flags: 0,\n-                   precision: CountImplied,\n-                   width: CountImplied,\n-                   ty: \"a\",\n-               },\n-           }),\n-           String(\" efg\")]);\n+    same(\n+        \"abcd {3:a} efg\",\n+        &[\n+            String(\"abcd \"),\n+            NextArgument(Argument {\n+                position: ArgumentIs(3),\n+                format: FormatSpec {\n+                    fill: None,\n+                    align: AlignUnknown,\n+                    flags: 0,\n+                    precision: CountImplied,\n+                    width: CountImplied,\n+                    precision_span: None,\n+                    width_span: None,\n+                    ty: \"a\",\n+                },\n+            }),\n+            String(\" efg\"),\n+        ],\n+    );\n }"}]}