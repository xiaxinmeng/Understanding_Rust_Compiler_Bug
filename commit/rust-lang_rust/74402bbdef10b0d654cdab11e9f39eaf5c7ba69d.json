{"sha": "74402bbdef10b0d654cdab11e9f39eaf5c7ba69d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NDAyYmJkZWYxMGIwZDY1NGNkYWIxMWU5ZjM5ZWFmNWM3YmE2OWQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-01T10:39:41Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-01T11:24:53Z"}, "message": "Move logic for doc comments to ast::Attribute::rewrite()", "tree": {"sha": "21c11ad4195b9a277ed1d4bec78e98766d029d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c11ad4195b9a277ed1d4bec78e98766d029d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d", "html_url": "https://github.com/rust-lang/rust/commit/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74a0f960a6cecec889d8fff46921e621d5b81f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74a0f960a6cecec889d8fff46921e621d5b81f6", "html_url": "https://github.com/rust-lang/rust/commit/b74a0f960a6cecec889d8fff46921e621d5b81f6"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "bd799b5ce0de33ba7aa8e9e641015550902dfa82", "filename": "src/visitor.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74402bbdef10b0d654cdab11e9f39eaf5c7ba69d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=74402bbdef10b0d654cdab11e9f39eaf5c7ba69d", "patch": "@@ -822,10 +822,11 @@ impl Rewrite for ast::MetaItem {\n             ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n             ast::MetaItemKind::List(ref list) => {\n                 let name = self.name.as_str();\n-                // 3 = `#[` and `(`, 2 = `]` and `)`\n+                // 1 = `(`, 2 = `]` and `)`\n                 let item_shape = try_opt!(\n                     shape\n-                        .shrink_left(name.len() + 3)\n+                        .visual_indent(0)\n+                        .shrink_left(name.len() + 1)\n                         .and_then(|s| s.sub_width(2))\n                 );\n                 let items = itemize_list(\n@@ -854,41 +855,40 @@ impl Rewrite for ast::MetaItem {\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n                 let name = self.name.as_str();\n-                let value = context.snippet(literal.span);\n-                if &*name == \"doc\" && contains_comment(&value) {\n-                    let doc_shape = Shape {\n-                        width: cmp::min(shape.width, context.config.comment_width())\n-                            .checked_sub(shape.indent.width())\n-                            .unwrap_or(0),\n-                        ..shape\n-                    };\n-                    try_opt!(rewrite_comment(&value, false, doc_shape, context.config))\n-                } else {\n-                    format!(\"{} = {}\", name, value)\n-                }\n+                // 3 = ` = `\n+                let lit_shape = try_opt!(shape.shrink_left(name.len() + 3));\n+                let value = try_opt!(rewrite_literal(context, literal, lit_shape));\n+                format!(\"{} = {}\", name, value)\n             }\n         })\n     }\n }\n \n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        try_opt!(self.meta())\n-            .rewrite(context, shape)\n-            .map(|rw| if self.is_sugared_doc {\n-                rw\n-            } else {\n-                let original = context.snippet(self.span);\n-                let prefix = match self.style {\n-                    ast::AttrStyle::Inner => \"#!\",\n-                    ast::AttrStyle::Outer => \"#\",\n-                };\n-                if contains_comment(&original) {\n-                    original\n-                } else {\n-                    format!(\"{}[{}]\", prefix, rw)\n-                }\n-            })\n+        let prefix = match self.style {\n+            ast::AttrStyle::Inner => \"#!\",\n+            ast::AttrStyle::Outer => \"#\",\n+        };\n+        let snippet = context.snippet(self.span);\n+        if self.is_sugared_doc {\n+            let doc_shape = Shape {\n+                width: cmp::min(shape.width, context.config.comment_width())\n+                    .checked_sub(shape.indent.width())\n+                    .unwrap_or(0),\n+                ..shape\n+            };\n+            rewrite_comment(&snippet, false, doc_shape, context.config)\n+        } else {\n+            if contains_comment(&snippet) {\n+                return Some(snippet);\n+            }\n+            // 1 = `[`\n+            let shape = try_opt!(shape.offset_left(prefix.len() + 1));\n+            try_opt!(self.meta())\n+                .rewrite(context, shape)\n+                .map(|rw| format!(\"{}[{}]\", prefix, rw))\n+        }\n     }\n }\n "}]}