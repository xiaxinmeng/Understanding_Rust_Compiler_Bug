{"sha": "17e0089856de145b10485c9a96bcf4f39e5b7f71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZTAwODk4NTZkZTE0NWIxMDQ4NWM5YTk2YmNmNGYzOWU1YjdmNzE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-07T16:42:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T22:45:16Z"}, "message": "std: remove use of cast module from os.", "tree": {"sha": "08d21c622971e1c44ff7fe5fa356a8691549167a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d21c622971e1c44ff7fe5fa356a8691549167a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e0089856de145b10485c9a96bcf4f39e5b7f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e0089856de145b10485c9a96bcf4f39e5b7f71", "html_url": "https://github.com/rust-lang/rust/commit/17e0089856de145b10485c9a96bcf4f39e5b7f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e0089856de145b10485c9a96bcf4f39e5b7f71/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "html_url": "https://github.com/rust-lang/rust/commit/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "b6c9979cc7d3df525b1ef412dd656df7187ec2bd", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17e0089856de145b10485c9a96bcf4f39e5b7f71/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e0089856de145b10485c9a96bcf4f39e5b7f71/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=17e0089856de145b10485c9a96bcf4f39e5b7f71", "patch": "@@ -29,7 +29,6 @@\n #[allow(missing_doc)];\n \n use c_str::ToCStr;\n-use cast;\n use clone::Clone;\n use container::Container;\n use io;\n@@ -246,10 +245,10 @@ pub fn getenv(n: &str) -> Option<~str> {\n             let s = do n.to_c_str().with_ref |buf| {\n                 libc::getenv(buf)\n             };\n-            if ptr::null::<u8>() == cast::transmute(s) {\n+            if s.is_null() {\n                 None\n             } else {\n-                Some(str::raw::from_buf(cast::transmute(s)))\n+                Some(str::raw::from_c_str(s))\n             }\n         }\n     }\n@@ -643,8 +642,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n             use os::win32::as_utf16_p;\n             // FIXME: turn mode into something useful? #2623\n             do as_utf16_p(p.to_str()) |buf| {\n-                libc::CreateDirectoryW(buf, cast::transmute(0))\n-                    != (0 as libc::BOOL)\n+                libc::CreateDirectoryW(buf, ptr::null()) != (0 as libc::BOOL)\n             }\n         }\n     }\n@@ -748,10 +746,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             do as_utf16_p(star(p).to_str()) |path_ptr| {\n                 let mut strings = ~[];\n                 let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n-                let find_handle =\n-                    FindFirstFileW(\n-                        path_ptr,\n-                        ::cast::transmute(wfd_ptr));\n+                let find_handle = FindFirstFileW(path_ptr, wfd_ptr as HANDLE);\n                 if find_handle as libc::c_int != INVALID_HANDLE_VALUE {\n                     let mut more_files = 1 as libc::c_int;\n                     while more_files != 0 {\n@@ -765,9 +760,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                             let fp_str = str::from_utf16(fp_vec);\n                             strings.push(fp_str);\n                         }\n-                        more_files = FindNextFileW(\n-                            find_handle,\n-                            ::cast::transmute(wfd_ptr));\n+                        more_files = FindNextFileW(find_handle, wfd_ptr as HANDLE);\n                     }\n                     FindClose(find_handle);\n                     free(wfd_ptr)\n@@ -1195,7 +1188,7 @@ pub fn real_args() -> ~[~str] {\n     }\n \n     unsafe {\n-        LocalFree(cast::transmute(szArgList));\n+        LocalFree(szArgList as *c_void);\n     }\n \n     return args;"}]}