{"sha": "5abc45982b5558d4c5f8753cb531a4a0858faa0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYmM0NTk4MmI1NTU4ZDRjNWY4NzUzY2I1MzFhNGEwODU4ZmFhMGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-03T17:55:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T17:55:25Z"}, "message": "Merge #3428\n\n3428: Move reference classification to ra_ide_db r=matklad a=matklad\n\nLost some marks along the way :-(\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c22bce8448c1b61e3c00cf8d7bb6f55d94204280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22bce8448c1b61e3c00cf8d7bb6f55d94204280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5abc45982b5558d4c5f8753cb531a4a0858faa0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXpoNCRBK7hj4Ov3rIwAAdHIIAJLt0bxiTZymbxSgHc5hD0rn\nPgANkab3SRX69bhV5I4pHD6g6pjRvbuhj0Ze3S7gcoPYsj3oM7qEFemjAkKkKmDj\n+nR07+0X5cYtV/xGur/pua+P04K7ObDx/qFETJ2c3WdYX0UIH02G/A3CcejOx4rf\n08nt6kaur+LPZiPBUwNKo+DMWi5gDEBYjaCaAqPcZm6oaGvNpr2D5qf1pv500YH7\nuT0xi7o94xndizoLKpgPAVEtNAM172NkS4BlnwFv2H7SkzjbfNj7RiJ8VVwBLGEL\ngT95a0jzJXRZv0ZduZSLWszL3ba1EvPWtN3GTAktFeol1v6KWeJxpmGLjFjOX5Q=\n=ZTZp\n-----END PGP SIGNATURE-----\n", "payload": "tree c22bce8448c1b61e3c00cf8d7bb6f55d94204280\nparent 074474fe00a08d394cbdcac2a136bca825d93377\nparent 53cab1cd21aa817a3588e64415a26b507ca00edd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583258125 +0000\ncommitter GitHub <noreply@github.com> 1583258125 +0000\n\nMerge #3428\n\n3428: Move reference classification to ra_ide_db r=matklad a=matklad\n\nLost some marks along the way :-(\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5abc45982b5558d4c5f8753cb531a4a0858faa0f", "html_url": "https://github.com/rust-lang/rust/commit/5abc45982b5558d4c5f8753cb531a4a0858faa0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5abc45982b5558d4c5f8753cb531a4a0858faa0f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074474fe00a08d394cbdcac2a136bca825d93377", "url": "https://api.github.com/repos/rust-lang/rust/commits/074474fe00a08d394cbdcac2a136bca825d93377", "html_url": "https://github.com/rust-lang/rust/commit/074474fe00a08d394cbdcac2a136bca825d93377"}, {"sha": "53cab1cd21aa817a3588e64415a26b507ca00edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/53cab1cd21aa817a3588e64415a26b507ca00edd", "html_url": "https://github.com/rust-lang/rust/commit/53cab1cd21aa817a3588e64415a26b507ca00edd"}], "stats": {"total": 212, "additions": 90, "deletions": 122}, "files": [{"sha": "d57451cc8cf8ec87142e4545295d80a79aa15714", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -3,19 +3,15 @@\n use either::Either;\n use hir::{original_range, AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{defs::Definition, RootDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, BIND_PAT, TYPE_PARAM},\n     TextRange,\n };\n \n-use crate::{\n-    // expand::original_range,\n-    references::Definition,\n-    FileSymbol,\n-};\n+use crate::FileSymbol;\n \n use super::short_label::ShortLabel;\n "}, {"sha": "4a8107d60e79df2e1c6b986ca6995870c2eb6701", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -1,7 +1,10 @@\n //! FIXME: write short doc here\n \n use hir::Semantics;\n-use ra_ide_db::{defs::classify_name, symbol_index, RootDatabase};\n+use ra_ide_db::{\n+    defs::{classify_name, classify_name_ref},\n+    symbol_index, RootDatabase,\n+};\n use ra_syntax::{\n     ast::{self},\n     match_ast, AstNode,\n@@ -11,7 +14,6 @@ use ra_syntax::{\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    references::classify_name_ref,\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n@@ -94,7 +96,7 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{assert_eq_text, covers};\n+    use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::analysis_and_position;\n \n@@ -206,7 +208,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros() {\n-        covers!(goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -223,7 +224,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros_from_other_crates() {\n-        covers!(goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -335,7 +335,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_methods() {\n-        covers!(goto_def_for_methods);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -355,7 +354,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_fields() {\n-        covers!(goto_def_for_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -374,7 +372,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_fields() {\n-        covers!(goto_def_for_record_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -787,7 +784,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n-        covers!(goto_def_for_field_init_shorthand);\n         check_goto(\n             \"\n             //- /lib.rs"}, {"sha": "e9c68255706cc367224ddb9f118334f057e98e77", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -2,7 +2,7 @@\n \n use hir::{Adt, HasSource, HirDisplay, Semantics};\n use ra_ide_db::{\n-    defs::{classify_name, Definition},\n+    defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n };\n use ra_syntax::{\n@@ -14,7 +14,6 @@ use ra_syntax::{\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n-    references::classify_name_ref,\n     FilePosition, RangeInfo,\n };\n "}, {"sha": "1236cb773c8b22fa839cf3a0319c095d5c40cee8", "filename": "crates/ra_ide/src/marks.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmarks.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -3,11 +3,6 @@\n test_utils::marks!(\n     inserts_angle_brackets_for_generics\n     inserts_parens_for_function_calls\n-    goto_def_for_macros\n-    goto_def_for_methods\n-    goto_def_for_fields\n-    goto_def_for_record_fields\n-    goto_def_for_field_init_shorthand\n     call_info_bad_offset\n     dont_complete_current_use\n     test_resolve_parent_module_on_module_decl"}, {"sha": "67be3f6c9bb611b67821929aff5eedfcb57a9298", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -9,14 +9,16 @@\n //! at the index that the match starts at and its tree parent is\n //! resolved to the search element definition, we get a reference.\n \n-mod classify;\n mod rename;\n mod search_scope;\n \n use hir::Semantics;\n use once_cell::unsync::Lazy;\n use ra_db::SourceDatabaseExt;\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{\n+    defs::{classify_name, classify_name_ref, Definition},\n+    RootDatabase,\n+};\n use ra_prof::profile;\n use ra_syntax::{\n     algo::find_node_at_offset,\n@@ -27,11 +29,7 @@ use test_utils::tested_by;\n \n use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n-pub(crate) use self::{\n-    classify::{classify_name_ref, NameRefClass},\n-    rename::rename,\n-};\n-pub(crate) use ra_ide_db::defs::{classify_name, Definition};\n+pub(crate) use self::rename::rename;\n \n pub use self::search_scope::SearchScope;\n "}, {"sha": "0bbf893f876650a07dc4ad72dc0d705a026cdc1c", "filename": "crates/ra_ide/src/references/classify.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/074474fe00a08d394cbdcac2a136bca825d93377/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074474fe00a08d394cbdcac2a136bca825d93377/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=074474fe00a08d394cbdcac2a136bca825d93377", "patch": "@@ -1,84 +0,0 @@\n-//! Functions that are used to classify an element from its definition or reference.\n-\n-use hir::{Local, PathResolution, Semantics};\n-use ra_ide_db::defs::Definition;\n-use ra_ide_db::RootDatabase;\n-use ra_prof::profile;\n-use ra_syntax::{ast, AstNode};\n-use test_utils::tested_by;\n-\n-pub enum NameRefClass {\n-    Definition(Definition),\n-    FieldShorthand { local: Local, field: Definition },\n-}\n-\n-impl NameRefClass {\n-    pub fn definition(self) -> Definition {\n-        match self {\n-            NameRefClass::Definition(def) => def,\n-            NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n-        }\n-    }\n-}\n-\n-pub(crate) fn classify_name_ref(\n-    sema: &Semantics<RootDatabase>,\n-    name_ref: &ast::NameRef,\n-) -> Option<NameRefClass> {\n-    let _p = profile(\"classify_name_ref\");\n-\n-    let parent = name_ref.syntax().parent()?;\n-\n-    if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_methods);\n-        if let Some(func) = sema.resolve_method_call(&method_call) {\n-            return Some(NameRefClass::Definition(Definition::ModuleDef(func.into())));\n-        }\n-    }\n-\n-    if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_fields);\n-        if let Some(field) = sema.resolve_field(&field_expr) {\n-            return Some(NameRefClass::Definition(Definition::StructField(field)));\n-        }\n-    }\n-\n-    if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n-        tested_by!(goto_def_for_record_fields);\n-        tested_by!(goto_def_for_field_init_shorthand);\n-        if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n-            let field = Definition::StructField(field);\n-            let res = match local {\n-                None => NameRefClass::Definition(field),\n-                Some(local) => NameRefClass::FieldShorthand { field, local },\n-            };\n-            return Some(res);\n-        }\n-    }\n-\n-    if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n-        tested_by!(goto_def_for_macros);\n-        if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n-            return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n-        }\n-    }\n-\n-    let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n-    let resolved = sema.resolve_path(&path)?;\n-    let res = match resolved {\n-        PathResolution::Def(def) => Definition::ModuleDef(def),\n-        PathResolution::AssocItem(item) => {\n-            let def = match item {\n-                hir::AssocItem::Function(it) => it.into(),\n-                hir::AssocItem::Const(it) => it.into(),\n-                hir::AssocItem::TypeAlias(it) => it.into(),\n-            };\n-            Definition::ModuleDef(def)\n-        }\n-        PathResolution::Local(local) => Definition::Local(local),\n-        PathResolution::TypeParam(par) => Definition::TypeParam(par),\n-        PathResolution::Macro(def) => Definition::Macro(def),\n-        PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n-    };\n-    Some(NameRefClass::Definition(res))\n-}"}, {"sha": "7fc94d3cdbcebc93c5b1866f2a22bd2897b57a08", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -7,7 +7,7 @@ mod tests;\n \n use hir::{Name, Semantics};\n use ra_ide_db::{\n-    defs::{classify_name, Definition, NameClass},\n+    defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use ra_prof::profile;\n@@ -19,11 +19,7 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::{\n-    call_info::call_info_for_token,\n-    references::{classify_name_ref, NameRefClass},\n-    Analysis, FileId,\n-};\n+use crate::{call_info::call_info_for_token, Analysis, FileId};\n \n pub(crate) use html::highlight_as_html;\n pub use tags::{Highlight, HighlightModifier, HighlightModifiers, HighlightTag};"}, {"sha": "f057435bf6fa07b949b63acbfff4762c639efa6b", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abc45982b5558d4c5f8753cb531a4a0858faa0f/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=5abc45982b5558d4c5f8753cb531a4a0858faa0f", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, FieldSource, HasSource, ImplDef, Local, MacroDef, Module, ModuleDef, Name, Semantics,\n-    StructField, TypeParam,\n+    Adt, FieldSource, HasSource, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Semantics, StructField, TypeParam,\n };\n use ra_prof::profile;\n use ra_syntax::{\n@@ -117,6 +117,8 @@ impl NameClass {\n }\n \n pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n+    let _p = profile(\"classify_name\");\n+\n     if let Some(bind_pat) = name.syntax().parent().and_then(ast::BindPat::cast) {\n         if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n             return Some(NameClass::ConstReference(Definition::ModuleDef(def)));\n@@ -127,7 +129,6 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n }\n \n fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<Definition> {\n-    let _p = profile(\"classify_name\");\n     let parent = name.syntax().parent()?;\n \n     match_ast! {\n@@ -192,3 +193,74 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n         }\n     }\n }\n+\n+pub enum NameRefClass {\n+    Definition(Definition),\n+    FieldShorthand { local: Local, field: Definition },\n+}\n+\n+impl NameRefClass {\n+    pub fn definition(self) -> Definition {\n+        match self {\n+            NameRefClass::Definition(def) => def,\n+            NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n+        }\n+    }\n+}\n+\n+pub fn classify_name_ref(\n+    sema: &Semantics<RootDatabase>,\n+    name_ref: &ast::NameRef,\n+) -> Option<NameRefClass> {\n+    let _p = profile(\"classify_name_ref\");\n+\n+    let parent = name_ref.syntax().parent()?;\n+\n+    if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n+        if let Some(func) = sema.resolve_method_call(&method_call) {\n+            return Some(NameRefClass::Definition(Definition::ModuleDef(func.into())));\n+        }\n+    }\n+\n+    if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n+        if let Some(field) = sema.resolve_field(&field_expr) {\n+            return Some(NameRefClass::Definition(Definition::StructField(field)));\n+        }\n+    }\n+\n+    if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n+        if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n+            let field = Definition::StructField(field);\n+            let res = match local {\n+                None => NameRefClass::Definition(field),\n+                Some(local) => NameRefClass::FieldShorthand { field, local },\n+            };\n+            return Some(res);\n+        }\n+    }\n+\n+    if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n+        if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n+            return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n+        }\n+    }\n+\n+    let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n+    let resolved = sema.resolve_path(&path)?;\n+    let res = match resolved {\n+        PathResolution::Def(def) => Definition::ModuleDef(def),\n+        PathResolution::AssocItem(item) => {\n+            let def = match item {\n+                hir::AssocItem::Function(it) => it.into(),\n+                hir::AssocItem::Const(it) => it.into(),\n+                hir::AssocItem::TypeAlias(it) => it.into(),\n+            };\n+            Definition::ModuleDef(def)\n+        }\n+        PathResolution::Local(local) => Definition::Local(local),\n+        PathResolution::TypeParam(par) => Definition::TypeParam(par),\n+        PathResolution::Macro(def) => Definition::Macro(def),\n+        PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n+    };\n+    Some(NameRefClass::Definition(res))\n+}"}]}