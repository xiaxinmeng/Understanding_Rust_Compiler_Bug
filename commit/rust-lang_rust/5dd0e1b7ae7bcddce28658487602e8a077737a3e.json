{"sha": "5dd0e1b7ae7bcddce28658487602e8a077737a3e", "node_id": "C_kwDOAAsO6NoAKDVkZDBlMWI3YWU3YmNkZGNlMjg2NTg0ODc2MDJlOGEwNzc3MzdhM2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-07T13:29:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-07T13:29:45Z"}, "message": "Auto merge of #107671 - CastilloDel:master, r=estebank\n\nFix suggestions rendering when the diff span is multiline\n\nFixes #92741\n\ncc `@estebank`\n\nI think, I finally fixed. I still want to go back and try to clean up the code a bit. I'm open to suggestions.\n\nSome examples of the new suggestions:\n\n```\nhelp: consider removing the borrow\n  |\n2 -     &\n  |\n```\n```\nhelp: consider removing the borrow\n  |\n2 -     &\n3 -     mut\n  |\n```\n```\nhelp: consider removing the borrow\n  |\n2 -     &\n3 -     mut if true { true } else { false }\n2 +     if true { true } else { false }\n  |\n```\n\nShould we add a test to ensure this behavior doesn't disappear in the future?", "tree": {"sha": "fd3ad0ec39c4a54bd81b46688c14dc59701584c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3ad0ec39c4a54bd81b46688c14dc59701584c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dd0e1b7ae7bcddce28658487602e8a077737a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0e1b7ae7bcddce28658487602e8a077737a3e", "html_url": "https://github.com/rust-lang/rust/commit/5dd0e1b7ae7bcddce28658487602e8a077737a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0e1b7ae7bcddce28658487602e8a077737a3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb", "html_url": "https://github.com/rust-lang/rust/commit/e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb"}, {"sha": "f0830c0ade39c76142118fc6f8fe7375173af7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0830c0ade39c76142118fc6f8fe7375173af7c7", "html_url": "https://github.com/rust-lang/rust/commit/f0830c0ade39c76142118fc6f8fe7375173af7c7"}], "stats": {"total": 176, "additions": 137, "deletions": 39}, "files": [{"sha": "9768526a2f47d52088fc500e6643b7efad8eca8e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 57, "deletions": 38, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0e1b7ae7bcddce28658487602e8a077737a3e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0e1b7ae7bcddce28658487602e8a077737a3e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=5dd0e1b7ae7bcddce28658487602e8a077737a3e", "patch": "@@ -1882,9 +1882,8 @@ impl EmitterWriter {\n                             &mut buffer,\n                             &mut row_num,\n                             &Vec::new(),\n-                            p,\n+                            p + line_start,\n                             l,\n-                            line_start,\n                             show_code_change,\n                             max_line_num_len,\n                             &file_lines,\n@@ -1907,9 +1906,8 @@ impl EmitterWriter {\n                                 &mut buffer,\n                                 &mut row_num,\n                                 &Vec::new(),\n-                                p,\n+                                p + line_start,\n                                 l,\n-                                line_start,\n                                 show_code_change,\n                                 max_line_num_len,\n                                 &file_lines,\n@@ -1925,9 +1923,8 @@ impl EmitterWriter {\n                                 &mut buffer,\n                                 &mut row_num,\n                                 &Vec::new(),\n-                                p,\n+                                p + line_start,\n                                 l,\n-                                line_start,\n                                 show_code_change,\n                                 max_line_num_len,\n                                 &file_lines,\n@@ -1941,9 +1938,8 @@ impl EmitterWriter {\n                     &mut buffer,\n                     &mut row_num,\n                     highlight_parts,\n-                    line_pos,\n+                    line_pos + line_start,\n                     line,\n-                    line_start,\n                     show_code_change,\n                     max_line_num_len,\n                     &file_lines,\n@@ -2167,40 +2163,63 @@ impl EmitterWriter {\n         buffer: &mut StyledBuffer,\n         row_num: &mut usize,\n         highlight_parts: &Vec<SubstitutionHighlight>,\n-        line_pos: usize,\n-        line: &str,\n-        line_start: usize,\n+        line_num: usize,\n+        line_to_add: &str,\n         show_code_change: DisplaySuggestion,\n         max_line_num_len: usize,\n         file_lines: &FileLines,\n         is_multiline: bool,\n     ) {\n-        // Print the span column to avoid confusion\n-        buffer.puts(*row_num, 0, &self.maybe_anonymized(line_start + line_pos), Style::LineNumber);\n         if let DisplaySuggestion::Diff = show_code_change {\n-            // Add the line number for both addition and removal to drive the point home.\n-            //\n-            // N - fn foo<A: T>(bar: A) {\n-            // N + fn foo(bar: impl T) {\n-            buffer.puts(\n-                *row_num - 1,\n-                0,\n-                &self.maybe_anonymized(line_start + line_pos),\n-                Style::LineNumber,\n-            );\n-            buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n-            buffer.puts(\n-                *row_num - 1,\n-                max_line_num_len + 3,\n-                &normalize_whitespace(\n-                    &file_lines.file.get_line(file_lines.lines[line_pos].line_index).unwrap(),\n-                ),\n-                Style::NoStyle,\n-            );\n-            buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+            // We need to print more than one line if the span we need to remove is multiline.\n+            // For more info: https://github.com/rust-lang/rust/issues/92741\n+            let lines_to_remove = file_lines.lines.iter().take(file_lines.lines.len() - 1);\n+            for (index, line_to_remove) in lines_to_remove.enumerate() {\n+                buffer.puts(\n+                    *row_num - 1,\n+                    0,\n+                    &self.maybe_anonymized(line_num + index),\n+                    Style::LineNumber,\n+                );\n+                buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+                let line = normalize_whitespace(\n+                    &file_lines.file.get_line(line_to_remove.line_index).unwrap(),\n+                );\n+                buffer.puts(*row_num - 1, max_line_num_len + 3, &line, Style::NoStyle);\n+                *row_num += 1;\n+            }\n+            // If the last line is exactly equal to the line we need to add, we can skip both of them.\n+            // This allows us to avoid output like the following:\n+            // 2 - &\n+            // 2 + if true { true } else { false }\n+            // 3 - if true { true } else { false }\n+            // If those lines aren't equal, we print their diff\n+            let last_line_index = file_lines.lines[file_lines.lines.len() - 1].line_index;\n+            let last_line = &file_lines.file.get_line(last_line_index).unwrap();\n+            if last_line != line_to_add {\n+                buffer.puts(\n+                    *row_num - 1,\n+                    0,\n+                    &self.maybe_anonymized(line_num + file_lines.lines.len() - 1),\n+                    Style::LineNumber,\n+                );\n+                buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+                buffer.puts(\n+                    *row_num - 1,\n+                    max_line_num_len + 3,\n+                    &normalize_whitespace(last_line),\n+                    Style::NoStyle,\n+                );\n+                buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n+                buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+                buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n+            } else {\n+                *row_num -= 2;\n+            }\n         } else if is_multiline {\n+            buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n             match &highlight_parts[..] {\n-                [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n+                [SubstitutionHighlight { start: 0, end }] if *end == line_to_add.len() => {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 }\n                 [] => {\n@@ -2210,17 +2229,17 @@ impl EmitterWriter {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n                 }\n             }\n+            buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n         } else {\n+            buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n             draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n+            buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n         }\n \n-        // print the suggestion\n-        buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n-\n         // Colorize addition/replacements with green.\n         for &SubstitutionHighlight { start, end } in highlight_parts {\n             // Account for tabs when highlighting (#87972).\n-            let tabs: usize = line\n+            let tabs: usize = line_to_add\n                 .chars()\n                 .take(start)\n                 .map(|ch| match ch {"}, {"sha": "83551a1d820abe0c5c30ce395dd968100f813638", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0e1b7ae7bcddce28658487602e8a077737a3e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0e1b7ae7bcddce28658487602e8a077737a3e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=5dd0e1b7ae7bcddce28658487602e8a077737a3e", "patch": "@@ -10,7 +10,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 939;\n-const ISSUES_ENTRY_LIMIT: usize = 1998;\n+const ISSUES_ENTRY_LIMIT: usize = 2001;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     for dir in Walk::new(&path.join(\"ui\")) {"}, {"sha": "d07aeb6c029fe57d5e92084d97f2f574dab75524", "filename": "tests/ui/issues/issue-92741.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-92741.fixed?ref=5dd0e1b7ae7bcddce28658487602e8a077737a3e", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+fn main() {}\n+fn _foo() -> bool {\n+    if true { true } else { false }\n+}\n+\n+fn _bar() -> bool {\n+    if true { true } else { false }\n+}\n+\n+fn _baz() -> bool {\n+    if true { true } else { false }\n+}"}, {"sha": "413d5bf047853a1fb056e8557b70b43d1570318c", "filename": "tests/ui/issues/issue-92741.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-92741.rs?ref=5dd0e1b7ae7bcddce28658487602e8a077737a3e", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+fn main() {}\n+fn _foo() -> bool {\n+    &  //~ ERROR 4:5: 6:36: mismatched types [E0308]\n+    mut\n+    if true { true } else { false }\n+}\n+\n+fn _bar() -> bool {\n+    &  //~ ERROR 10:5: 11:40: mismatched types [E0308]\n+    mut if true { true } else { false }\n+}\n+\n+fn _baz() -> bool {\n+    & mut //~ ERROR 15:5: 16:36: mismatched types [E0308]\n+    if true { true } else { false }\n+}"}, {"sha": "49315e7a8bf6bc9ae748acc46965d414f02825fe", "filename": "tests/ui/issues/issue-92741.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0e1b7ae7bcddce28658487602e8a077737a3e/tests%2Fui%2Fissues%2Fissue-92741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-92741.stderr?ref=5dd0e1b7ae7bcddce28658487602e8a077737a3e", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-92741.rs:4:5\n+   |\n+LL |   fn _foo() -> bool {\n+   |                ---- expected `bool` because of return type\n+LL | /     &\n+LL | |     mut\n+LL | |     if true { true } else { false }\n+   | |___________________________________^ expected `bool`, found `&mut bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     &\n+LL -     mut\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-92741.rs:10:5\n+   |\n+LL |   fn _bar() -> bool {\n+   |                ---- expected `bool` because of return type\n+LL | /     &\n+LL | |     mut if true { true } else { false }\n+   | |_______________________________________^ expected `bool`, found `&mut bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     &\n+LL -     mut if true { true } else { false }\n+LL +     if true { true } else { false }\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-92741.rs:15:5\n+   |\n+LL |   fn _baz() -> bool {\n+   |                ---- expected `bool` because of return type\n+LL | /     & mut\n+LL | |     if true { true } else { false }\n+   | |___________________________________^ expected `bool`, found `&mut bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     & mut\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}