{"sha": "20eaf168c5b40c003bd7d28fe4c071b24118410e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZWFmMTY4YzViNDBjMDAzYmQ3ZDI4ZmU0YzA3MWIyNDExODQxMGU=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-12-09T19:05:51Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-12-09T19:05:51Z"}, "message": "Add a proper `Hash` implementation for `VecMap`\n\nAlso re-add the previously deleted test with an additional test that would have\nfailed before, when the hash function depended on the capacity.", "tree": {"sha": "8d2a08c5784960ed0caa0cf85dee0fd28b11a549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2a08c5784960ed0caa0cf85dee0fd28b11a549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20eaf168c5b40c003bd7d28fe4c071b24118410e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20eaf168c5b40c003bd7d28fe4c071b24118410e", "html_url": "https://github.com/rust-lang/rust/commit/20eaf168c5b40c003bd7d28fe4c071b24118410e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20eaf168c5b40c003bd7d28fe4c071b24118410e/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ae3a49e4864133784cd745a9a8866889f3ae15", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ae3a49e4864133784cd745a9a8866889f3ae15", "html_url": "https://github.com/rust-lang/rust/commit/67ae3a49e4864133784cd745a9a8866889f3ae15"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "e2efcb62ba90d7b798f831b23c3f1fd82b855e54", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/20eaf168c5b40c003bd7d28fe4c071b24118410e/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20eaf168c5b40c003bd7d28fe4c071b24118410e/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=20eaf168c5b40c003bd7d28fe4c071b24118410e", "patch": "@@ -21,6 +21,7 @@ use core::iter;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n+use hash::{Hash, Writer};\n use {vec, slice};\n use vec::Vec;\n \n@@ -81,6 +82,19 @@ impl<V:Clone> Clone for VecMap<V> {\n     }\n }\n \n+impl<S: Writer, V: Hash<S>> Hash<S> for VecMap<V> {\n+    fn hash(&self, state: &mut S) {\n+        // In order to not traverse the `VecMap` twice, count the elements\n+        // during iteration.\n+        let mut count: uint = 0;\n+        for elt in self.iter() {\n+            elt.hash(state);\n+            count += 1;\n+        }\n+        count.hash(state);\n+    }\n+}\n+\n impl<V> VecMap<V> {\n     /// Creates an empty `VecMap`.\n     ///\n@@ -605,6 +619,7 @@ pub type MoveItems<V> =\n mod test_map {\n     use std::prelude::*;\n     use vec::Vec;\n+    use hash::hash;\n \n     use super::VecMap;\n \n@@ -918,6 +933,28 @@ mod test_map {\n         assert!(a < b && a <= b);\n     }\n \n+    #[test]\n+    fn test_hash() {\n+        let mut x = VecMap::new();\n+        let mut y = VecMap::new();\n+\n+        assert!(hash(&x) == hash(&y));\n+        x.insert(1, 'a');\n+        x.insert(2, 'b');\n+        x.insert(3, 'c');\n+\n+        y.insert(3, 'c');\n+        y.insert(2, 'b');\n+        y.insert(1, 'a');\n+\n+        assert!(hash(&x) == hash(&y));\n+\n+        x.insert(1000, 'd');\n+        x.remove(&1000);\n+\n+        assert!(hash(&x) == hash(&y));\n+    }\n+\n     #[test]\n     fn test_from_iter() {\n         let xs: Vec<(uint, char)> = vec![(1u, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')];"}]}