{"sha": "133859d680ffe31072b80f518377fa0c487359d9", "node_id": "C_kwDOAAsO6NoAKDEzMzg1OWQ2ODBmZmUzMTA3MmI4MGY1MTgzNzdmYTBjNDg3MzU5ZDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T05:24:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T05:24:20Z"}, "message": "Auto merge of #88672 - camelid:inc-parser-sugg, r=davidtwco\n\nSuggest `i += 1` when we see `i++` or `++i`\n\nCloses #83502 (for `i++` and `++i`; `--i` should be covered by #82987, and `i--`\nis tricky to handle).\n\nThis is a continuation of #83536.\n\nr? `@estebank`", "tree": {"sha": "75fc76dceb5fb4b8e0088f0b9a256ea4b40b83b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75fc76dceb5fb4b8e0088f0b9a256ea4b40b83b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133859d680ffe31072b80f518377fa0c487359d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133859d680ffe31072b80f518377fa0c487359d9", "html_url": "https://github.com/rust-lang/rust/commit/133859d680ffe31072b80f518377fa0c487359d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133859d680ffe31072b80f518377fa0c487359d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c", "html_url": "https://github.com/rust-lang/rust/commit/c1550e3f8c57b0ebb0edb3a7ea64727e668f669c"}, {"sha": "4943688e9d0d0f34f2fda188e9a9d2777f90d186", "url": "https://api.github.com/repos/rust-lang/rust/commits/4943688e9d0d0f34f2fda188e9a9d2777f90d186", "html_url": "https://github.com/rust-lang/rust/commit/4943688e9d0d0f34f2fda188e9a9d2777f90d186"}], "stats": {"total": 515, "additions": 514, "deletions": 1}, "files": [{"sha": "3ac226114cdb2a4f7351ca259eb7bb7949139565", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 213, "deletions": 1, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -156,6 +156,89 @@ impl AttemptLocalParseRecovery {\n     }\n }\n \n+/// Information for emitting suggestions and recovering from\n+/// C-style `i++`, `--i`, etc.\n+#[derive(Debug, Copy, Clone)]\n+struct IncDecRecovery {\n+    /// Is this increment/decrement its own statement?\n+    standalone: IsStandalone,\n+    /// Is this an increment or decrement?\n+    op: IncOrDec,\n+    /// Is this pre- or postfix?\n+    fixity: UnaryFixity,\n+}\n+\n+/// Is an increment or decrement expression its own statement?\n+#[derive(Debug, Copy, Clone)]\n+enum IsStandalone {\n+    /// It's standalone, i.e., its own statement.\n+    Standalone,\n+    /// It's a subexpression, i.e., *not* standalone.\n+    Subexpr,\n+    /// It's maybe standalone; we're not sure.\n+    Maybe,\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+enum IncOrDec {\n+    Inc,\n+    // FIXME: `i--` recovery isn't implemented yet\n+    #[allow(dead_code)]\n+    Dec,\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+enum UnaryFixity {\n+    Pre,\n+    Post,\n+}\n+\n+impl IncOrDec {\n+    fn chr(&self) -> char {\n+        match self {\n+            Self::Inc => '+',\n+            Self::Dec => '-',\n+        }\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        match self {\n+            Self::Inc => \"increment\",\n+            Self::Dec => \"decrement\",\n+        }\n+    }\n+}\n+\n+impl std::fmt::Display for UnaryFixity {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            Self::Pre => write!(f, \"prefix\"),\n+            Self::Post => write!(f, \"postfix\"),\n+        }\n+    }\n+}\n+\n+struct MultiSugg {\n+    msg: String,\n+    patches: Vec<(Span, String)>,\n+    applicability: Applicability,\n+}\n+\n+impl MultiSugg {\n+    fn emit<G: EmissionGuarantee>(self, err: &mut DiagnosticBuilder<'_, G>) {\n+        err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n+    }\n+\n+    /// Overrides individual messages and applicabilities.\n+    fn emit_many<G: EmissionGuarantee>(\n+        err: &mut DiagnosticBuilder<'_, G>,\n+        msg: &str,\n+        applicability: Applicability,\n+        suggestions: impl Iterator<Item = Self>,\n+    ) {\n+        err.multipart_suggestions(msg, suggestions.map(|s| s.patches), applicability);\n+    }\n+}\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1171,6 +1254,135 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    pub(super) fn recover_from_prefix_increment(\n+        &mut self,\n+        operand_expr: P<Expr>,\n+        op_span: Span,\n+        prev_is_semi: bool,\n+    ) -> PResult<'a, P<Expr>> {\n+        let standalone =\n+            if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n+        let kind = IncDecRecovery { standalone, op: IncOrDec::Inc, fixity: UnaryFixity::Pre };\n+\n+        self.recover_from_inc_dec(operand_expr, kind, op_span)\n+    }\n+\n+    pub(super) fn recover_from_postfix_increment(\n+        &mut self,\n+        operand_expr: P<Expr>,\n+        op_span: Span,\n+    ) -> PResult<'a, P<Expr>> {\n+        let kind = IncDecRecovery {\n+            standalone: IsStandalone::Maybe,\n+            op: IncOrDec::Inc,\n+            fixity: UnaryFixity::Post,\n+        };\n+\n+        self.recover_from_inc_dec(operand_expr, kind, op_span)\n+    }\n+\n+    fn recover_from_inc_dec(\n+        &mut self,\n+        base: P<Expr>,\n+        kind: IncDecRecovery,\n+        op_span: Span,\n+    ) -> PResult<'a, P<Expr>> {\n+        let mut err = self.struct_span_err(\n+            op_span,\n+            &format!(\"Rust has no {} {} operator\", kind.fixity, kind.op.name()),\n+        );\n+        err.span_label(op_span, &format!(\"not a valid {} operator\", kind.fixity));\n+\n+        let help_base_case = |mut err: DiagnosticBuilder<'_, _>, base| {\n+            err.help(&format!(\"use `{}= 1` instead\", kind.op.chr()));\n+            err.emit();\n+            Ok(base)\n+        };\n+\n+        // (pre, post)\n+        let spans = match kind.fixity {\n+            UnaryFixity::Pre => (op_span, base.span.shrink_to_hi()),\n+            UnaryFixity::Post => (base.span.shrink_to_lo(), op_span),\n+        };\n+\n+        match kind.standalone {\n+            IsStandalone::Standalone => self.inc_dec_standalone_suggest(kind, spans).emit(&mut err),\n+            IsStandalone::Subexpr => {\n+                let Ok(base_src) = self.span_to_snippet(base.span)\n+                    else { return help_base_case(err, base) };\n+                match kind.fixity {\n+                    UnaryFixity::Pre => {\n+                        self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                    }\n+                    UnaryFixity::Post => {\n+                        self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                    }\n+                }\n+            }\n+            IsStandalone::Maybe => {\n+                let Ok(base_src) = self.span_to_snippet(base.span)\n+                    else { return help_base_case(err, base) };\n+                let sugg1 = match kind.fixity {\n+                    UnaryFixity::Pre => self.prefix_inc_dec_suggest(base_src, kind, spans),\n+                    UnaryFixity::Post => self.postfix_inc_dec_suggest(base_src, kind, spans),\n+                };\n+                let sugg2 = self.inc_dec_standalone_suggest(kind, spans);\n+                MultiSugg::emit_many(\n+                    &mut err,\n+                    \"use `+= 1` instead\",\n+                    Applicability::Unspecified,\n+                    [sugg1, sugg2].into_iter(),\n+                )\n+            }\n+        }\n+        Err(err)\n+    }\n+\n+    fn prefix_inc_dec_suggest(\n+        &mut self,\n+        base_src: String,\n+        kind: IncDecRecovery,\n+        (pre_span, post_span): (Span, Span),\n+    ) -> MultiSugg {\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![\n+                (pre_span, \"{ \".to_string()),\n+                (post_span, format!(\" {}= 1; {} }}\", kind.op.chr(), base_src)),\n+            ],\n+            applicability: Applicability::MachineApplicable,\n+        }\n+    }\n+\n+    fn postfix_inc_dec_suggest(\n+        &mut self,\n+        base_src: String,\n+        kind: IncDecRecovery,\n+        (pre_span, post_span): (Span, Span),\n+    ) -> MultiSugg {\n+        let tmp_var = if base_src.trim() == \"tmp\" { \"tmp_\" } else { \"tmp\" };\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![\n+                (pre_span, format!(\"{{ let {} = \", tmp_var)),\n+                (post_span, format!(\"; {} {}= 1; {} }}\", base_src, kind.op.chr(), tmp_var)),\n+            ],\n+            applicability: Applicability::HasPlaceholders,\n+        }\n+    }\n+\n+    fn inc_dec_standalone_suggest(\n+        &mut self,\n+        kind: IncDecRecovery,\n+        (pre_span, post_span): (Span, Span),\n+    ) -> MultiSugg {\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![(pre_span, String::new()), (post_span, format!(\" {}= 1\", kind.op.chr()))],\n+            applicability: Applicability::MachineApplicable,\n+        }\n+    }\n+\n     /// Tries to recover from associated item paths like `[T]::AssocItem` / `(T, U)::AssocItem`.\n     /// Attempts to convert the base expression/pattern/type into a type, parses the `::AssocItem`\n     /// tail, and combines them into a `<Ty>::AssocItem` expression/pattern/type."}, {"sha": "7c407cbe465f86d9e3db6a62961c649cc6c6aa54", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -267,6 +267,17 @@ impl<'a> Parser<'a> {\n                 self.bump();\n             }\n \n+            if self.prev_token == token::BinOp(token::Plus)\n+                && self.token == token::BinOp(token::Plus)\n+                && self.prev_token.span.between(self.token.span).is_empty()\n+            {\n+                let op_span = self.prev_token.span.to(self.token.span);\n+                // Eat the second `+`\n+                self.bump();\n+                lhs = self.recover_from_postfix_increment(lhs, op_span)?;\n+                continue;\n+            }\n+\n             let op = op.node;\n             // Special cases:\n             if op == AssocOp::As {\n@@ -580,6 +591,19 @@ impl<'a> Parser<'a> {\n                 this.bump();\n                 this.parse_prefix_expr(None)\n             } // `+expr`\n+            // Recover from `++x`:\n+            token::BinOp(token::Plus)\n+                if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n+            {\n+                let prev_is_semi = this.prev_token == token::Semi;\n+                let pre_span = this.token.span.to(this.look_ahead(1, |t| t.span));\n+                // Eat both `+`s.\n+                this.bump();\n+                this.bump();\n+\n+                let operand_expr = this.parse_dot_or_call_expr(Default::default())?;\n+                this.recover_from_prefix_increment(operand_expr, pre_span, prev_is_semi)\n+            }\n             token::Ident(..) if this.token.is_keyword(kw::Box) => {\n                 make_it!(this, attrs, |this, _| this.parse_box_expr(lo))\n             }"}, {"sha": "7a426badfc2d3b5571a541e03e8410b8e1ebc701", "filename": "src/test/ui/parser/increment-autofix.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+pub fn pre_regular() {\n+    let mut i = 0;\n+    i += 1; //~ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", i);\n+}\n+\n+pub fn pre_while() {\n+    let mut i = 0;\n+    while { i += 1; i } < 5 {\n+        //~^ ERROR Rust has no prefix increment operator\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+pub fn pre_regular_tmp() {\n+    let mut tmp = 0;\n+    tmp += 1; //~ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", tmp);\n+}\n+\n+pub fn pre_while_tmp() {\n+    let mut tmp = 0;\n+    while { tmp += 1; tmp } < 5 {\n+        //~^ ERROR Rust has no prefix increment operator\n+        println!(\"{}\", tmp);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d38603697a7a6c019236ab0fbc83081292fb9c96", "filename": "src/test/ui/parser/increment-autofix.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+pub fn pre_regular() {\n+    let mut i = 0;\n+    ++i; //~ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", i);\n+}\n+\n+pub fn pre_while() {\n+    let mut i = 0;\n+    while ++i < 5 {\n+        //~^ ERROR Rust has no prefix increment operator\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+pub fn pre_regular_tmp() {\n+    let mut tmp = 0;\n+    ++tmp; //~ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", tmp);\n+}\n+\n+pub fn pre_while_tmp() {\n+    let mut tmp = 0;\n+    while ++tmp < 5 {\n+        //~^ ERROR Rust has no prefix increment operator\n+        println!(\"{}\", tmp);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "593592ba4ab742f96f7ee3b205d0133c8e49934e", "filename": "src/test/ui/parser/increment-autofix.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -0,0 +1,52 @@\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-autofix.rs:5:5\n+   |\n+LL |     ++i;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   | \n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-autofix.rs:11:11\n+   |\n+LL |     while ++i < 5 {\n+   |     ----- ^^ not a valid prefix operator\n+   |     |\n+   |     while parsing the condition of this `while` expression\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     while { i += 1; i } < 5 {\n+   |           ~   +++++++++\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-autofix.rs:19:5\n+   |\n+LL |     ++tmp;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++tmp;\n+LL +     tmp += 1;\n+   | \n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-autofix.rs:25:11\n+   |\n+LL |     while ++tmp < 5 {\n+   |     ----- ^^ not a valid prefix operator\n+   |     |\n+   |     while parsing the condition of this `while` expression\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     while { tmp += 1; tmp } < 5 {\n+   |           ~     +++++++++++\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "15f159e53d2942e8b74096da51deda980e2f5623", "filename": "src/test/ui/parser/increment-notfixed.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -0,0 +1,61 @@\n+struct Foo {\n+    bar: Bar,\n+}\n+\n+struct Bar {\n+    qux: i32,\n+}\n+\n+pub fn post_regular() {\n+    let mut i = 0;\n+    i++; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", i);\n+}\n+\n+pub fn post_while() {\n+    let mut i = 0;\n+    while i++ < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+pub fn post_regular_tmp() {\n+    let mut tmp = 0;\n+    tmp++; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", tmp);\n+}\n+\n+pub fn post_while_tmp() {\n+    let mut tmp = 0;\n+    while tmp++ < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", tmp);\n+    }\n+}\n+\n+pub fn post_field() {\n+    let foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux++;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+pub fn post_field_tmp() {\n+    struct S {\n+        tmp: i32\n+    }\n+    let s = S { tmp: 0 };\n+    s.tmp++;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", s.tmp);\n+}\n+\n+pub fn pre_field() {\n+    let foo = Foo { bar: Bar { qux: 0 } };\n+    ++foo.bar.qux;\n+    //~^ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+fn main() {}"}, {"sha": "f23595da32ac8b37acd256f7e9c1887f7161598f", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/133859d680ffe31072b80f518377fa0c487359d9/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=133859d680ffe31072b80f518377fa0c487359d9", "patch": "@@ -0,0 +1,102 @@\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:11:6\n+   |\n+LL |     i++;\n+   |      ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     { let tmp = i; i += 1; tmp };\n+   |     +++++++++++  ~~~~~~~~~~~~~~~\n+LL -     i++;\n+LL +     i += 1;\n+   | \n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:17:12\n+   |\n+LL |     while i++ < 5 {\n+   |     -----  ^^ not a valid postfix operator\n+   |     |\n+   |     while parsing the condition of this `while` expression\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     while { let tmp = i; i += 1; tmp } < 5 {\n+   |           +++++++++++  ~~~~~~~~~~~~~~~\n+LL -     while i++ < 5 {\n+LL +     while i += 1 < 5 {\n+   | \n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:25:8\n+   |\n+LL |     tmp++;\n+   |        ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n+   |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n+LL -     tmp++;\n+LL +     tmp += 1;\n+   | \n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:31:14\n+   |\n+LL |     while tmp++ < 5 {\n+   |     -----    ^^ not a valid postfix operator\n+   |     |\n+   |     while parsing the condition of this `while` expression\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n+   |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n+LL -     while tmp++ < 5 {\n+LL +     while tmp += 1 < 5 {\n+   | \n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:39:16\n+   |\n+LL |     foo.bar.qux++;\n+   |                ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n+   |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL -     foo.bar.qux++;\n+LL +     foo.bar.qux += 1;\n+   | \n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:49:10\n+   |\n+LL |     s.tmp++;\n+   |          ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n+   |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n+LL -     s.tmp++;\n+LL +     s.tmp += 1;\n+   | \n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-notfixed.rs:56:5\n+   |\n+LL |     ++foo.bar.qux;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++foo.bar.qux;\n+LL +     foo.bar.qux += 1;\n+   | \n+\n+error: aborting due to 7 previous errors\n+"}]}