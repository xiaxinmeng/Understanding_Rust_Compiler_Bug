{"sha": "acf50ee236abae0ad416360eda2a3afa8873d2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjUwZWUyMzZhYmFlMGFkNDE2MzYwZWRhMmEzYWZhODg3M2QyYTA=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-10-12T22:00:30Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-11-03T18:13:21Z"}, "message": "Add tests for `auto trait`, fix parsing bug\n\nNow we can do the well formedness checks in the parser, yay!", "tree": {"sha": "c7f27bbc25abda902bba285a40c1214c70debf8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f27bbc25abda902bba285a40c1214c70debf8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf50ee236abae0ad416360eda2a3afa8873d2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf50ee236abae0ad416360eda2a3afa8873d2a0", "html_url": "https://github.com/rust-lang/rust/commit/acf50ee236abae0ad416360eda2a3afa8873d2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf50ee236abae0ad416360eda2a3afa8873d2a0/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37dfc0c5982029ea0793699eead1d8ec4c5cef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/37dfc0c5982029ea0793699eead1d8ec4c5cef73", "html_url": "https://github.com/rust-lang/rust/commit/37dfc0c5982029ea0793699eead1d8ec4c5cef73"}], "stats": {"total": 173, "additions": 141, "deletions": 32}, "files": [{"sha": "e354d56f5afc276c622eec3fc1f1dc260df60323", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -1394,7 +1394,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    i.span,\n                                    \"auto traits are experimental and possibly buggy\");\n             }\n-            \n+\n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n                 let msg = \"`macro` is experimental\";\n                 gate_feature_post!(&self, decl_macro, i.span, msg);"}, {"sha": "1376102568b68352c89048337660bacb6c1cc248", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -6014,6 +6014,37 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n+        if self.eat_keyword(keywords::Auto) {\n+            self.expect_keyword(keywords::Trait)?;\n+            // AUTO TRAIT ITEM\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Normal)?;\n+            let prev_span = self.prev_span;\n+            let item = self.mk_item(lo.to(prev_span),\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n+        if self.check_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) {\n+            self.expect_keyword(keywords::Unsafe)?;\n+            self.expect_keyword(keywords::Auto)?;\n+            self.expect_keyword(keywords::Trait)?;\n+            // UNSAFE AUTO TRAIT ITEM\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Unsafe)?;\n+            let prev_span = self.prev_span;\n+            let item = self.mk_item(lo.to(prev_span),\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n         if (self.check_keyword(keywords::Unsafe) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Impl))) ||\n            (self.check_keyword(keywords::Default) &&\n@@ -6138,37 +6169,6 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.eat_keyword(keywords::Auto) {\n-            self.expect_keyword(keywords::Trait)?;\n-            // AUTO TRAIT ITEM\n-            let (ident,\n-                 item_,\n-                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Normal)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n-        }\n-        if self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) {\n-            self.expect_keyword(keywords::Unsafe)?;\n-            self.expect_keyword(keywords::Auto)?;\n-            self.expect_keyword(keywords::Trait)?;\n-            // UNSAFE AUTO TRAIT ITEM\n-            let (ident,\n-                 item_,\n-                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Unsafe)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n-        }\n         if self.eat_keyword(keywords::Struct) {\n             // STRUCT ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_struct()?;"}, {"sha": "3d3cb9ab1047bf6fe5ab611742b31e63f32fd43a", "filename": "src/test/compile-fail/auto-is-contextual.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type A0 = auto;\n+//~^ ERROR cannot find type `auto` in this scope\n+type A1 = auto::auto;\n+//~^ ERROR Use of undeclared type or module `auto`\n+type A2 = auto<auto, auto>;\n+//~^ ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+type A3 = auto<<auto as auto>::auto>;\n+//~^ ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+//~| ERROR Use of undeclared type or module `auto`\n+type A4 = auto(auto, auto) -> auto;\n+//~^ ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+//~| ERROR cannot find type `auto` in this scope\n+\n+fn main() {}"}, {"sha": "6f57266b3e10233eae9094e3dd241c65bf499b6f", "filename": "src/test/compile-fail/feature-gate-optin-builtin-traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -17,6 +17,9 @@ trait DummyTrait {\n     fn dummy(&self) {}\n }\n \n+auto trait AutoDummyTrait {}\n+//~^ ERROR auto traits are experimental and possibly buggy\n+\n impl DummyTrait for .. {}\n //~^ ERROR auto trait implementations are experimental and possibly buggy\n "}, {"sha": "59c88691bb65c27bb9bd1f3a8e5c0354aa6b9cd4", "filename": "src/test/parse-fail/auto-trait-no-generics.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fauto-trait-no-generics.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+auto trait Auto<T> { }\n+//~^ ERROR: expected `{`, found `<`"}, {"sha": "2754546779df906f59712d81c68b81de18eb2937", "filename": "src/test/parse-fail/auto-trait-no-rename.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+auto trait Auto { fn item() }\n+//~^ ERROR: expected `}`, found `fn`"}, {"sha": "bc0d9c1aa09641655014221a4667457830e19e3a", "filename": "src/test/parse-fail/auto-trait-no-super.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+auto trait Auto : Send { }\n+//~^ ERROR: expected `{`, found `:`"}, {"sha": "94fa104e5b2bee924be576b4fcc01851e8548713", "filename": "src/test/run-pass/auto-traits.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf50ee236abae0ad416360eda2a3afa8873d2a0/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=acf50ee236abae0ad416360eda2a3afa8873d2a0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Auto {}\n+// Redundant but accepted until we remove it.\n+impl Auto for .. {}\n+\n+unsafe auto trait AutoUnsafe {}\n+\n+impl !Auto for bool {}\n+impl !AutoUnsafe for bool {}\n+\n+struct AutoBool(bool);\n+\n+impl Auto for AutoBool {}\n+unsafe impl AutoUnsafe for AutoBool {}\n+\n+fn take_auto<T: Auto>(_: T) {}\n+fn take_auto_unsafe<T: AutoUnsafe>(_: T) {}\n+\n+fn main() {\n+    take_auto(0);\n+    take_auto(AutoBool(true));\n+    take_auto_unsafe(0);\n+    take_auto_unsafe(AutoBool(true));\n+}"}]}