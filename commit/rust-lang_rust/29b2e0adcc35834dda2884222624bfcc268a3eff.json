{"sha": "29b2e0adcc35834dda2884222624bfcc268a3eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjJlMGFkY2MzNTgzNGRkYTI4ODQyMjI2MjRiZmNjMjY4YTNlZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-13T08:55:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-13T08:55:03Z"}, "message": "G: allow self & super in paths", "tree": {"sha": "0838a22c27bba0361dcde3660075175f243a4d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0838a22c27bba0361dcde3660075175f243a4d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b2e0adcc35834dda2884222624bfcc268a3eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b2e0adcc35834dda2884222624bfcc268a3eff", "html_url": "https://github.com/rust-lang/rust/commit/29b2e0adcc35834dda2884222624bfcc268a3eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b2e0adcc35834dda2884222624bfcc268a3eff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31d85860771b0c4c8d232d79e4a3489a051ba9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31d85860771b0c4c8d232d79e4a3489a051ba9d", "html_url": "https://github.com/rust-lang/rust/commit/f31d85860771b0c4c8d232d79e4a3489a051ba9d"}], "stats": {"total": 228, "additions": 156, "deletions": 72}, "files": [{"sha": "ca6299f239eb62c4f391adcbdf19469b8003406e", "filename": "grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -15,6 +15,7 @@ Grammar(\n         \"pub\",\n         \"self\",\n         \"super\",\n+        \"in\",\n     ],\n     tokens: [\n         \"ERROR\","}, {"sha": "d6887a9baaa18e70f235aca0c73406f9787bb8ca", "filename": "src/parser/event_parser/grammar/paths.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n pub(crate) fn use_path(p: &mut Parser) {\n-    if !AnyOf(&[IDENT, COLONCOLON]).is_ahead(p) {\n+    if !AnyOf(&[IDENT, SELF_KW, SUPER_KW, COLONCOLON]).is_ahead(p) {\n         return;\n     }\n     let mut prev = p.mark();\n@@ -23,6 +23,15 @@ fn path_segment(p: &mut Parser, first: bool) {\n         if first {\n             p.eat(COLONCOLON);\n         }\n-        p.expect(IDENT);\n+        match p.current() {\n+            IDENT | SELF_KW | SUPER_KW => {\n+                p.bump();\n+            },\n+            _ => {\n+                p.error()\n+                    .message(\"expected identifier\")\n+                    .emit();\n+            }\n+        };\n     })\n }\n\\ No newline at end of file"}, {"sha": "48f55fa97e1816f74b08515766eee1096a502885", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 69, "deletions": 66, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -16,73 +16,74 @@ pub const MOD_KW: SyntaxKind = SyntaxKind(11);\n pub const PUB_KW: SyntaxKind = SyntaxKind(12);\n pub const SELF_KW: SyntaxKind = SyntaxKind(13);\n pub const SUPER_KW: SyntaxKind = SyntaxKind(14);\n-pub const ERROR: SyntaxKind = SyntaxKind(15);\n-pub const IDENT: SyntaxKind = SyntaxKind(16);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(17);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(18);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(19);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(20);\n-pub const SEMI: SyntaxKind = SyntaxKind(21);\n-pub const COMMA: SyntaxKind = SyntaxKind(22);\n-pub const DOT: SyntaxKind = SyntaxKind(23);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(24);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(25);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(26);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(27);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(28);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(29);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(30);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(31);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(32);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(33);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(34);\n-pub const AT: SyntaxKind = SyntaxKind(35);\n-pub const POUND: SyntaxKind = SyntaxKind(36);\n-pub const TILDE: SyntaxKind = SyntaxKind(37);\n-pub const QUESTION: SyntaxKind = SyntaxKind(38);\n-pub const COLON: SyntaxKind = SyntaxKind(39);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(40);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(41);\n-pub const EQ: SyntaxKind = SyntaxKind(42);\n-pub const EQEQ: SyntaxKind = SyntaxKind(43);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(44);\n-pub const NEQ: SyntaxKind = SyntaxKind(45);\n-pub const EXCL: SyntaxKind = SyntaxKind(46);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(47);\n-pub const CHAR: SyntaxKind = SyntaxKind(48);\n-pub const BYTE: SyntaxKind = SyntaxKind(49);\n-pub const STRING: SyntaxKind = SyntaxKind(50);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(51);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(52);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(53);\n-pub const PLUS: SyntaxKind = SyntaxKind(54);\n-pub const MINUS: SyntaxKind = SyntaxKind(55);\n-pub const STAR: SyntaxKind = SyntaxKind(56);\n-pub const SLASH: SyntaxKind = SyntaxKind(57);\n-pub const CARET: SyntaxKind = SyntaxKind(58);\n-pub const PERCENT: SyntaxKind = SyntaxKind(59);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(60);\n-pub const PIPE: SyntaxKind = SyntaxKind(61);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(62);\n-pub const COMMENT: SyntaxKind = SyntaxKind(63);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(64);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(65);\n-pub const FILE: SyntaxKind = SyntaxKind(66);\n-pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(67);\n-pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(68);\n-pub const FN_ITEM: SyntaxKind = SyntaxKind(69);\n-pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(70);\n-pub const ATTR: SyntaxKind = SyntaxKind(71);\n-pub const META_ITEM: SyntaxKind = SyntaxKind(72);\n-pub const MOD_ITEM: SyntaxKind = SyntaxKind(73);\n-pub const USE_ITEM: SyntaxKind = SyntaxKind(74);\n-pub const PATH: SyntaxKind = SyntaxKind(75);\n-pub const PATH_SEGMENT: SyntaxKind = SyntaxKind(76);\n-pub const LITERAL: SyntaxKind = SyntaxKind(77);\n-pub const ALIAS: SyntaxKind = SyntaxKind(78);\n-pub const VISIBILITY: SyntaxKind = SyntaxKind(79);\n+pub const IN_KW: SyntaxKind = SyntaxKind(15);\n+pub const ERROR: SyntaxKind = SyntaxKind(16);\n+pub const IDENT: SyntaxKind = SyntaxKind(17);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(18);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(19);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(20);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(21);\n+pub const SEMI: SyntaxKind = SyntaxKind(22);\n+pub const COMMA: SyntaxKind = SyntaxKind(23);\n+pub const DOT: SyntaxKind = SyntaxKind(24);\n+pub const DOTDOT: SyntaxKind = SyntaxKind(25);\n+pub const DOTDOTDOT: SyntaxKind = SyntaxKind(26);\n+pub const DOTDOTEQ: SyntaxKind = SyntaxKind(27);\n+pub const L_PAREN: SyntaxKind = SyntaxKind(28);\n+pub const R_PAREN: SyntaxKind = SyntaxKind(29);\n+pub const L_CURLY: SyntaxKind = SyntaxKind(30);\n+pub const R_CURLY: SyntaxKind = SyntaxKind(31);\n+pub const L_BRACK: SyntaxKind = SyntaxKind(32);\n+pub const R_BRACK: SyntaxKind = SyntaxKind(33);\n+pub const L_ANGLE: SyntaxKind = SyntaxKind(34);\n+pub const R_ANGLE: SyntaxKind = SyntaxKind(35);\n+pub const AT: SyntaxKind = SyntaxKind(36);\n+pub const POUND: SyntaxKind = SyntaxKind(37);\n+pub const TILDE: SyntaxKind = SyntaxKind(38);\n+pub const QUESTION: SyntaxKind = SyntaxKind(39);\n+pub const COLON: SyntaxKind = SyntaxKind(40);\n+pub const COLONCOLON: SyntaxKind = SyntaxKind(41);\n+pub const DOLLAR: SyntaxKind = SyntaxKind(42);\n+pub const EQ: SyntaxKind = SyntaxKind(43);\n+pub const EQEQ: SyntaxKind = SyntaxKind(44);\n+pub const FAT_ARROW: SyntaxKind = SyntaxKind(45);\n+pub const NEQ: SyntaxKind = SyntaxKind(46);\n+pub const EXCL: SyntaxKind = SyntaxKind(47);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(48);\n+pub const CHAR: SyntaxKind = SyntaxKind(49);\n+pub const BYTE: SyntaxKind = SyntaxKind(50);\n+pub const STRING: SyntaxKind = SyntaxKind(51);\n+pub const RAW_STRING: SyntaxKind = SyntaxKind(52);\n+pub const BYTE_STRING: SyntaxKind = SyntaxKind(53);\n+pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(54);\n+pub const PLUS: SyntaxKind = SyntaxKind(55);\n+pub const MINUS: SyntaxKind = SyntaxKind(56);\n+pub const STAR: SyntaxKind = SyntaxKind(57);\n+pub const SLASH: SyntaxKind = SyntaxKind(58);\n+pub const CARET: SyntaxKind = SyntaxKind(59);\n+pub const PERCENT: SyntaxKind = SyntaxKind(60);\n+pub const AMPERSAND: SyntaxKind = SyntaxKind(61);\n+pub const PIPE: SyntaxKind = SyntaxKind(62);\n+pub const THIN_ARROW: SyntaxKind = SyntaxKind(63);\n+pub const COMMENT: SyntaxKind = SyntaxKind(64);\n+pub const DOC_COMMENT: SyntaxKind = SyntaxKind(65);\n+pub const SHEBANG: SyntaxKind = SyntaxKind(66);\n+pub const FILE: SyntaxKind = SyntaxKind(67);\n+pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(68);\n+pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(69);\n+pub const FN_ITEM: SyntaxKind = SyntaxKind(70);\n+pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(71);\n+pub const ATTR: SyntaxKind = SyntaxKind(72);\n+pub const META_ITEM: SyntaxKind = SyntaxKind(73);\n+pub const MOD_ITEM: SyntaxKind = SyntaxKind(74);\n+pub const USE_ITEM: SyntaxKind = SyntaxKind(75);\n+pub const PATH: SyntaxKind = SyntaxKind(76);\n+pub const PATH_SEGMENT: SyntaxKind = SyntaxKind(77);\n+pub const LITERAL: SyntaxKind = SyntaxKind(78);\n+pub const ALIAS: SyntaxKind = SyntaxKind(79);\n+pub const VISIBILITY: SyntaxKind = SyntaxKind(80);\n \n-static INFOS: [SyntaxInfo; 80] = [\n+static INFOS: [SyntaxInfo; 81] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -98,6 +99,7 @@ static INFOS: [SyntaxInfo; 80] = [\n     SyntaxInfo { name: \"PUB_KW\" },\n     SyntaxInfo { name: \"SELF_KW\" },\n     SyntaxInfo { name: \"SUPER_KW\" },\n+    SyntaxInfo { name: \"IN_KW\" },\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -186,6 +188,7 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n        \"pub\" => Some(PUB_KW),\n        \"self\" => Some(SELF_KW),\n        \"super\" => Some(SUPER_KW),\n+       \"in\" => Some(IN_KW),\n        _ => None,\n    }\n }"}, {"sha": "aa729cdbdae0f1aa8366737d9e86bf4218a1c7ab", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -1,2 +1 @@\n-fn use struct trait enum impl true false as extern crate mod pub self super\n-\n+fn use struct trait enum impl true false as extern crate mod pub self super in"}, {"sha": "8a1f525ac438982f576d152ff7764e3abe98db53", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -27,4 +27,6 @@ WHITESPACE 1 \" \"\n SELF_KW 4 \"self\"\n WHITESPACE 1 \" \"\n SUPER_KW 5 \"super\"\n-WHITESPACE 2 \"\\n\\n\"\n+WHITESPACE 1 \" \"\n+IN_KW 2 \"in\"\n+WHITESPACE 1 \"\\n\""}, {"sha": "060e65d06d2e06b57cde0f9669ee94206955cec1", "filename": "tests/data/parser/err/0004_use_path_bad_segment.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.rs?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -0,0 +1 @@\n+use foo::92;\n\\ No newline at end of file"}, {"sha": "241ee85624baebc68581926ce4fe42cd6775a20f", "filename": "tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -0,0 +1,16 @@\n+FILE@[0; 12)\n+  USE_ITEM@[0; 9)\n+    USE_KW@[0; 3)\n+    PATH@[3; 9)\n+      PATH@[3; 7)\n+        PATH_SEGMENT@[3; 7)\n+          WHITESPACE@[3; 4)\n+          IDENT@[4; 7)\n+      COLONCOLON@[7; 9)\n+      PATH_SEGMENT@[9; 9)\n+      err: `expected identifier`\n+    err: `expected SEMI`\n+  ERROR@[9; 12)\n+  err: `expected item`\n+    INT_NUMBER@[9; 11)\n+    SEMI@[11; 12)"}, {"sha": "0e091724da82f098961a1ae04bd112a67ff52d10", "filename": "tests/data/parser/ok/0012_visibility.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0012_visibility.txt", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0012_visibility.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0012_visibility.txt?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -58,7 +58,7 @@ FILE@[0; 98)\n     VISIBILITY@[66; 88)\n       PUB_KW@[66; 69)\n       L_PAREN@[69; 70)\n-      IDENT@[70; 72)\n+      IN_KW@[70; 72)\n       PATH@[72; 86)\n         PATH@[72; 81)\n           PATH@[72; 76)"}, {"sha": "faf6a42c7bb6b1497f96e9f7d87b9f63e8f411f7", "filename": "tests/data/parser/ok/0013_use_path_self_super.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.rs?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -0,0 +1,3 @@\n+use self::foo;\n+use super::super::bar;\n+use ::self::a::super::bar;"}, {"sha": "90bbb9b2da51dba241e6dba9cb6980006f39460b", "filename": "tests/data/parser/ok/0013_use_path_self_super.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.txt", "raw_url": "https://github.com/rust-lang/rust/raw/29b2e0adcc35834dda2884222624bfcc268a3eff/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0013_use_path_self_super.txt?ref=29b2e0adcc35834dda2884222624bfcc268a3eff", "patch": "@@ -0,0 +1,50 @@\n+FILE@[0; 65)\n+  USE_ITEM@[0; 15)\n+    USE_KW@[0; 3)\n+    PATH@[3; 13)\n+      PATH@[3; 8)\n+        PATH_SEGMENT@[3; 8)\n+          WHITESPACE@[3; 4)\n+          SELF_KW@[4; 8)\n+      COLONCOLON@[8; 10)\n+      PATH_SEGMENT@[10; 13)\n+        IDENT@[10; 13)\n+    SEMI@[13; 14)\n+    WHITESPACE@[14; 15)\n+  USE_ITEM@[15; 38)\n+    USE_KW@[15; 18)\n+    PATH@[18; 36)\n+      PATH@[18; 31)\n+        PATH@[18; 24)\n+          PATH_SEGMENT@[18; 24)\n+            WHITESPACE@[18; 19)\n+            SUPER_KW@[19; 24)\n+        COLONCOLON@[24; 26)\n+        PATH_SEGMENT@[26; 31)\n+          SUPER_KW@[26; 31)\n+      COLONCOLON@[31; 33)\n+      PATH_SEGMENT@[33; 36)\n+        IDENT@[33; 36)\n+    SEMI@[36; 37)\n+    WHITESPACE@[37; 38)\n+  USE_ITEM@[38; 65)\n+    USE_KW@[38; 41)\n+    PATH@[41; 63)\n+      PATH@[41; 58)\n+        PATH@[41; 51)\n+          PATH@[41; 48)\n+            PATH_SEGMENT@[41; 48)\n+              WHITESPACE@[41; 42)\n+              COLONCOLON@[42; 44)\n+              SELF_KW@[44; 48)\n+          COLONCOLON@[48; 50)\n+          PATH_SEGMENT@[50; 51)\n+            IDENT@[50; 51)\n+        COLONCOLON@[51; 53)\n+        PATH_SEGMENT@[53; 58)\n+          SUPER_KW@[53; 58)\n+      COLONCOLON@[58; 60)\n+      PATH_SEGMENT@[60; 63)\n+        IDENT@[60; 63)\n+    SEMI@[63; 64)\n+    WHITESPACE@[64; 65)"}]}