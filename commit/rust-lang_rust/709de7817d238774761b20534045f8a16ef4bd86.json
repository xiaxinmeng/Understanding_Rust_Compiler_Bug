{"sha": "709de7817d238774761b20534045f8a16ef4bd86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWRlNzgxN2QyMzg3NzQ3NjFiMjA1MzQwNDVmOGExNmVmNGJkODY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-23T09:26:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T09:26:28Z"}, "message": "Rollup merge of #78098 - camelid:fixup-docs, r=steveklabnik\n\nClean up and improve some docs\n\n* compiler docs\n  * Don't format list as part of a code block\n  * Clean up some other formatting\n* rustdoc book\n  * Update CommonMark spec version to latest (0.28 -> 0.29)\n  * Clean up some various wording and formatting", "tree": {"sha": "bd844e0998295435bf9f60b4609743041f9f02af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd844e0998295435bf9f60b4609743041f9f02af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709de7817d238774761b20534045f8a16ef4bd86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkqHECRBK7hj4Ov3rIwAAdHIIADDXlObYYk1rOOAAqMyaLfjZ\nxfAmvDEWwbyY9ngm/aJbEOP/XKB0g9T/mPo4ljYRPMpkMUWQymijVWVGz2+GiEzX\nGqHr+0a3hrzldZuoiWqGyDP3b4gGQoqAgozDBpXYkew9WXOTYQRRlwVe5TUR2M0Y\nuoV44eMlxCTgsFcoiGOq5D3t0ce+ggzz8BundaQV0UVHsBToFEY4lBnet0xbFOSB\nnrSVG/p7x4YbohxrfE3FFgkcJtrv0aP9QaOTB1OHl0E7jM6Rto3YYEEAOQyepqjP\n8ZWRMZ9ssU5JB6bdSlvU7+Wj6cGquPdCpCyDDY7W4zA+Kw9hA4RY3CtokzVAyRA=\n=iI8m\n-----END PGP SIGNATURE-----\n", "payload": "tree bd844e0998295435bf9f60b4609743041f9f02af\nparent 39f8289e38b6fc289395c8c83b7d60a611c787f5\nparent d725da129e76963ec4309edc49a34471a2b21038\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603445188 +0900\ncommitter GitHub <noreply@github.com> 1603445188 +0900\n\nRollup merge of #78098 - camelid:fixup-docs, r=steveklabnik\n\nClean up and improve some docs\n\n* compiler docs\n  * Don't format list as part of a code block\n  * Clean up some other formatting\n* rustdoc book\n  * Update CommonMark spec version to latest (0.28 -> 0.29)\n  * Clean up some various wording and formatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709de7817d238774761b20534045f8a16ef4bd86", "html_url": "https://github.com/rust-lang/rust/commit/709de7817d238774761b20534045f8a16ef4bd86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709de7817d238774761b20534045f8a16ef4bd86/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f8289e38b6fc289395c8c83b7d60a611c787f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f8289e38b6fc289395c8c83b7d60a611c787f5", "html_url": "https://github.com/rust-lang/rust/commit/39f8289e38b6fc289395c8c83b7d60a611c787f5"}, {"sha": "d725da129e76963ec4309edc49a34471a2b21038", "url": "https://api.github.com/repos/rust-lang/rust/commits/d725da129e76963ec4309edc49a34471a2b21038", "html_url": "https://github.com/rust-lang/rust/commit/d725da129e76963ec4309edc49a34471a2b21038"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "d060549ca8137191c73eae593251900541d7ae23", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/709de7817d238774761b20534045f8a16ef4bd86/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709de7817d238774761b20534045f8a16ef4bd86/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=709de7817d238774761b20534045f8a16ef4bd86", "patch": "@@ -292,20 +292,20 @@ pub struct ScopeTree {\n     ///\n     /// Then:\n     ///\n-    ///     1. From the ordering guarantee of HIR visitors (see\n-    ///     `rustc_hir::intravisit`), `D` does not dominate `U`.\n+    ///   1. From the ordering guarantee of HIR visitors (see\n+    ///   `rustc_hir::intravisit`), `D` does not dominate `U`.\n     ///\n-    ///     2. Therefore, `D` is *potentially* storage-dead at `U` (because\n-    ///     we might visit `U` without ever getting to `D`).\n+    ///   2. Therefore, `D` is *potentially* storage-dead at `U` (because\n+    ///   we might visit `U` without ever getting to `D`).\n     ///\n-    ///     3. However, we guarantee that at each HIR point, each\n-    ///     binding/temporary is always either always storage-live\n-    ///     or always storage-dead. This is what is being guaranteed\n-    ///     by `terminating_scopes` including all blocks where the\n-    ///     count of executions is not guaranteed.\n+    ///   3. However, we guarantee that at each HIR point, each\n+    ///   binding/temporary is always either always storage-live\n+    ///   or always storage-dead. This is what is being guaranteed\n+    ///   by `terminating_scopes` including all blocks where the\n+    ///   count of executions is not guaranteed.\n     ///\n-    ///     4. By `2.` and `3.`, `D` is *statically* storage-dead at `U`,\n-    ///     QED.\n+    ///   4. By `2.` and `3.`, `D` is *statically* storage-dead at `U`,\n+    ///   QED.\n     ///\n     /// This property ought to not on (3) in an essential way -- it\n     /// is probably still correct even if we have \"unrestricted\" terminating"}, {"sha": "7216d1305fd4bddeabc513820637057bba30d474", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/709de7817d238774761b20534045f8a16ef4bd86/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709de7817d238774761b20534045f8a16ef4bd86/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=709de7817d238774761b20534045f8a16ef4bd86", "patch": "@@ -78,20 +78,26 @@\n //! new pattern `p`.\n //!\n //! For example, say we have the following:\n+//!\n //! ```\n-//!     // x: (Option<bool>, Result<()>)\n-//!     match x {\n-//!         (Some(true), _) => {}\n-//!         (None, Err(())) => {}\n-//!         (None, Err(_)) => {}\n-//!     }\n+//! // x: (Option<bool>, Result<()>)\n+//! match x {\n+//!     (Some(true), _) => {}\n+//!     (None, Err(())) => {}\n+//!     (None, Err(_)) => {}\n+//! }\n //! ```\n+//!\n //! Here, the matrix `P` starts as:\n+//!\n+//! ```\n //! [\n //!     [(Some(true), _)],\n //!     [(None, Err(()))],\n //!     [(None, Err(_))],\n //! ]\n+//! ```\n+//!\n //! We can tell it's not exhaustive, because `U(P, _)` is true (we're not covering\n //! `[(Some(false), _)]`, for instance). In addition, row 3 is not useful, because\n //! all the values it covers are already covered by row 2.\n@@ -178,10 +184,14 @@\n //! This special case is handled in `is_useful_specialized`.\n //!\n //! For example, if `P` is:\n+//!\n+//! ```\n //! [\n-//! [Some(true), _],\n-//! [None, 0],\n+//!     [Some(true), _],\n+//!     [None, 0],\n //! ]\n+//! ```\n+//!\n //! and `p` is [Some(false), 0], then we don't care about row 2 since we know `p` only\n //! matches values that row 2 doesn't. For row 1 however, we need to dig into the\n //! arguments of `Some` to know whether some new value is covered. So we compute\n@@ -198,10 +208,14 @@\n //! `U(P, p) := U(D(P), D(p))`\n //!\n //! For example, if `P` is:\n+//!\n+//! ```\n //! [\n //!     [_, true, _],\n //!     [None, false, 1],\n //! ]\n+//! ```\n+//!\n //! and `p` is [_, false, _], the `Some` constructor doesn't appear in `P`. So if we\n //! only had row 2, we'd know that `p` is useful. However row 1 starts with a\n //! wildcard, so we need to check whether `U([[true, _]], [false, 1])`.\n@@ -215,10 +229,14 @@\n //! `U(P, p) := \u2203(k \u03f5 constructors) U(S(k, P), S(k, p))`\n //!\n //! For example, if `P` is:\n+//!\n+//! ```\n //! [\n //!     [Some(true), _],\n //!     [None, false],\n //! ]\n+//! ```\n+//!\n //! and `p` is [_, false], both `None` and `Some` constructors appear in the first\n //! components of `P`. We will therefore try popping both constructors in turn: we\n //! compute `U([[true, _]], [_, false])` for the `Some` constructor, and `U([[false]],\n@@ -1496,6 +1514,7 @@ struct PatCtxt<'tcx> {\n /// multiple patterns.\n ///\n /// For example, if we are constructing a witness for the match against\n+///\n /// ```\n /// struct Pair(Option<(u32, u32)>, bool);\n ///\n@@ -1619,12 +1638,14 @@ fn all_constructors<'a, 'tcx>(\n             // actually match against them all themselves. So we always return only the fictitious\n             // constructor.\n             // E.g., in an example like:\n+            //\n             // ```\n             //     let err: io::ErrorKind = ...;\n             //     match err {\n             //         io::ErrorKind::NotFound => {},\n             //     }\n             // ```\n+            //\n             // we don't want to show every possible IO error, but instead have only `_` as the\n             // witness.\n             let is_declared_nonexhaustive = cx.is_foreign_non_exhaustive_enum(pcx.ty);\n@@ -2017,6 +2038,7 @@ crate fn is_useful<'p, 'tcx>(\n         let mut unreachable_branches = Vec::new();\n         // Subpatterns that are unreachable from all branches. E.g. in the following case, the last\n         // `true` is unreachable only from one branch, so it is overall reachable.\n+        //\n         // ```\n         // match (true, true) {\n         //     (true, true) => {}\n@@ -2161,10 +2183,12 @@ crate fn is_useful<'p, 'tcx>(\n             // to do this and instead report a single `_` witness:\n             // if the user didn't actually specify a constructor\n             // in this arm, e.g., in\n+            //\n             // ```\n             //     let x: (Direction, Direction, bool) = ...;\n             //     let (_, _, false) = x;\n             // ```\n+            //\n             // we don't want to show all 16 possible witnesses\n             // `(<direction-1>, <direction-2>, true)` - we are\n             // satisfied with `(_, _, true)`. In this case,"}, {"sha": "387d86189b08f1cdf0dd41a08efcd88ea9672284", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/709de7817d238774761b20534045f8a16ef4bd86/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/709de7817d238774761b20534045f8a16ef4bd86/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=709de7817d238774761b20534045f8a16ef4bd86", "patch": "@@ -16,8 +16,8 @@ The basic idea is this:\n The triple backticks start and end code blocks. If this were in a file named `foo.rs`,\n running `rustdoc --test foo.rs` will extract this example, and then run it as a test.\n \n-Please note that by default, if no language is set for the block code, `rustdoc`\n-assumes it is `Rust` code. So the following:\n+Please note that by default, if no language is set for the block code, rustdoc\n+assumes it is Rust code. So the following:\n \n ``````markdown\n ```rust\n@@ -44,7 +44,6 @@ the `assert!` family of macros works the same as other Rust code:\n \n ```rust\n let foo = \"foo\";\n-\n assert_eq!(foo, \"foo\");\n ```\n \n@@ -55,8 +54,9 @@ the code panics and the doctest fails.\n \n In the example above, you'll note something strange: there's no `main`\n function! Forcing you to write `main` for every example, no matter how small,\n-adds friction. So `rustdoc` processes your examples slightly before\n-running them. Here's the full algorithm rustdoc uses to preprocess examples:\n+adds friction and clutters the output. So `rustdoc` processes your examples\n+slightly before running them. Here's the full algorithm `rustdoc` uses to\n+preprocess examples:\n \n 1. Some common `allow` attributes are inserted, including\n    `unused_variables`, `unused_assignments`, `unused_mut`,\n@@ -78,10 +78,12 @@ Sometimes, you need some setup code, or other things that would distract\n from your example, but are important to make the tests work. Consider\n an example block that looks like this:\n \n-```text\n+```ignore\n+/// ```\n /// /// Some documentation.\n /// # fn foo() {} // this function will be hidden\n /// println!(\"Hello, World!\");\n+/// ```\n ```\n \n It will render like this:\n@@ -251,7 +253,7 @@ disambiguate the error type:\n This is an unfortunate consequence of the `?` operator adding an implicit\n conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n-so that rustdoc understands you want an implicit `Result`-returning function.\n+so that `rustdoc` understands you want an implicit `Result`-returning function.\n \n ## Documenting macros\n \n@@ -359,7 +361,7 @@ the code with the 2015 edition.\n ## Syntax reference\n \n The *exact* syntax for code blocks, including the edge cases, can be found\n-in the [Fenced Code Blocks](https://spec.commonmark.org/0.28/#fenced-code-blocks)\n+in the [Fenced Code Blocks](https://spec.commonmark.org/0.29/#fenced-code-blocks)\n section of the CommonMark specification.\n \n Rustdoc also accepts *indented* code blocks as an alternative to fenced\n@@ -372,7 +374,7 @@ can indent each line by four or more spaces.\n ``````\n \n These, too, are documented in the CommonMark specification, in the\n-[Indented Code Blocks](https://spec.commonmark.org/0.28/#indented-code-blocks)\n+[Indented Code Blocks](https://spec.commonmark.org/0.29/#indented-code-blocks)\n section.\n \n However, it's preferable to use fenced code blocks over indented code blocks.\n@@ -388,7 +390,7 @@ documentation. To this end, Rustdoc allows you to have certain items only appear\n collecting doctests, so you can utilize doctest functionality without forcing the test to appear in\n docs, or to find an arbitrary private item to include it on.\n \n-When compiling a crate for use in doctests (with `--test` option), rustdoc will set `cfg(doctest)`.\n+When compiling a crate for use in doctests (with `--test` option), `rustdoc` will set `#[cfg(doctest)]`.\n Note that they will still link against only the public items of your crate; if you need to test\n private items, you need to write a unit test.\n \n@@ -407,18 +409,18 @@ pub struct MyStructOnlyTakesUsize;\n ```\n \n Note that the struct `MyStructOnlyTakesUsize` here isn't actually part of your public crate\n-API. The use of `#[cfg(doctest)]` makes sure that this struct only exists while rustdoc is\n+API. The use of `#[cfg(doctest)]` makes sure that this struct only exists while `rustdoc` is\n collecting doctests. This means that its doctest is executed when `--test` is passed to rustdoc,\n but is hidden from the public documentation.\n \n-Another possible use of `cfg(doctest)` is to test doctests that are included in your README file\n+Another possible use of `#[cfg(doctest)]` is to test doctests that are included in your README file\n without including it in your main documentation. For example, you could write this into your\n `lib.rs` to test your README as part of your doctests:\n \n ```rust,ignore\n #![feature(external_doc)]\n \n-#[doc(include=\"../README.md\")]\n+#[doc(include = \"../README.md\")]\n #[cfg(doctest)]\n pub struct ReadmeDoctests;\n ```"}]}