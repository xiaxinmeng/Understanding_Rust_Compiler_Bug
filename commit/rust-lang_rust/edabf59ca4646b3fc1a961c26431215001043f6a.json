{"sha": "edabf59ca4646b3fc1a961c26431215001043f6a", "node_id": "C_kwDOAAsO6NoAKGVkYWJmNTljYTQ2NDZiM2ZjMWE5NjFjMjY0MzEyMTUwMDEwNDNmNmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T01:28:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T01:28:06Z"}, "message": "Auto merge of #103026 - matthiaskrgr:rollup-gfmlfkt, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #103000 (Add suggestion to the \"missing native library\" error)\n - #103006 (rustdoc: don't ICE on `TyKind::Typeof`)\n - #103008 (replace ReErased with fresh region vars in opaque types)\n - #103011 (Improve rustdoc `unsafe-fn` GUI test)\n - #103013 (Add new bootstrap entrypoints to triagebot)\n - #103016 (Ensure enum cast moves)\n - #103021 (Add links to relevant pages to find constraint information)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "515e1d73921c795c293e93e654e252cced0b9358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515e1d73921c795c293e93e654e252cced0b9358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edabf59ca4646b3fc1a961c26431215001043f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edabf59ca4646b3fc1a961c26431215001043f6a", "html_url": "https://github.com/rust-lang/rust/commit/edabf59ca4646b3fc1a961c26431215001043f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edabf59ca4646b3fc1a961c26431215001043f6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bd3f96779dbe6bd206dae09395e9af7d580552", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bd3f96779dbe6bd206dae09395e9af7d580552", "html_url": "https://github.com/rust-lang/rust/commit/60bd3f96779dbe6bd206dae09395e9af7d580552"}, {"sha": "3f12e4bd21a32db319ad66f1db29a603798226d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f12e4bd21a32db319ad66f1db29a603798226d2", "html_url": "https://github.com/rust-lang/rust/commit/3f12e4bd21a32db319ad66f1db29a603798226d2"}], "stats": {"total": 459, "additions": 392, "deletions": 67}, "files": [{"sha": "017513721b75bee6326b757f1e3408aaf07d97b6", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -551,6 +551,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n                 format!(\"{{{}}}\", reg.name())\n             }\n         }\n+        // The constraints can be retrieved from\n+        // https://llvm.org/docs/LangRef.html#supported-constraint-code-list\n         InlineAsmRegOrRegClass::RegClass(reg) => match reg {\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => \"w\",\n@@ -624,6 +626,8 @@ fn modifier_to_llvm(\n     reg: InlineAsmRegClass,\n     modifier: Option<char>,\n ) -> Option<char> {\n+    // The modifiers can be retrieved from\n+    // https://llvm.org/docs/LangRef.html#asm-template-argument-modifiers\n     match reg {\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => modifier,\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg)"}, {"sha": "08e553d9f15896b7e473e12c26eaef6f9b740976", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -165,6 +165,8 @@ metadata_failed_write_error =\n metadata_missing_native_library =\n     could not find native static library `{$libname}`, perhaps an -L flag is missing?\n \n+metadata_only_provide_library_name = only provide the library name `{$suggested_name}`, not the full filename\n+\n metadata_failed_create_tempdir =\n     couldn't create a temp dir: {$err}\n "}, {"sha": "c3583eeb430be53112ce4d32064ddd9e912f3250", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -732,8 +732,6 @@ fn check_opaque_meets_bounds<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    let hidden_type = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let defining_use_anchor = match *origin {\n         hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n@@ -748,14 +746,26 @@ fn check_opaque_meets_bounds<'tcx>(\n     let ocx = ObligationCtxt::new(&infcx);\n     let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n \n+    // `ReErased` regions appear in the \"parent_substs\" of closures/generators.\n+    // We're ignoring them here and replacing them with fresh region variables.\n+    // See tests in ui/type-alias-impl-trait/closure_{parent_substs,wf_outlives}.rs.\n+    //\n+    // FIXME: Consider wrapping the hidden type in an existential `Binder` and instantiating it\n+    // here rather than using ReErased.\n+    let hidden_ty = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n+    let hidden_ty = tcx.fold_regions(hidden_ty, |re, _dbi| match re.kind() {\n+        ty::ReErased => infcx.next_region_var(RegionVariableOrigin::MiscVariable(span)),\n+        _ => re,\n+    });\n+\n     let misc_cause = traits::ObligationCause::misc(span, hir_id);\n \n-    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_type) {\n+    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_ty) {\n         Ok(infer_ok) => ocx.register_infer_ok_obligations(infer_ok),\n         Err(ty_err) => {\n             tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\"could not unify `{hidden_type}` with revealed type:\\n{ty_err}\"),\n+                &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n             );\n         }\n     }\n@@ -764,7 +774,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n     let predicate =\n-        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_type.into())).to_predicate(tcx);\n+        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into())).to_predicate(tcx);\n     ocx.register_obligation(Obligation::new(misc_cause, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's"}, {"sha": "dbfa22aaff0749042360bee1a47661d307cb426b", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -372,7 +372,41 @@ pub struct FailedWriteError {\n #[derive(Diagnostic)]\n #[diag(metadata::missing_native_library)]\n pub struct MissingNativeLibrary<'a> {\n-    pub libname: &'a str,\n+    libname: &'a str,\n+    #[subdiagnostic]\n+    suggest_name: Option<SuggestLibraryName<'a>>,\n+}\n+\n+impl<'a> MissingNativeLibrary<'a> {\n+    pub fn new(libname: &'a str, verbatim: bool) -> Self {\n+        // if it looks like the user has provided a complete filename rather just the bare lib name,\n+        // then provide a note that they might want to try trimming the name\n+        let suggested_name = if !verbatim {\n+            if let Some(libname) = libname.strip_prefix(\"lib\") && let Some(libname) = libname.strip_suffix(\".a\") {\n+                // this is a unix style filename so trim prefix & suffix\n+                Some(libname)\n+            } else if let Some(libname) = libname.strip_suffix(\".lib\") {\n+                // this is a Windows style filename so just trim the suffix\n+                Some(libname)\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            libname,\n+            suggest_name: suggested_name\n+                .map(|suggested_name| SuggestLibraryName { suggested_name }),\n+        }\n+    }\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(metadata::only_provide_library_name)]\n+pub struct SuggestLibraryName<'a> {\n+    suggested_name: &'a str,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "676c67bad827f79b741532cd1ee2fec9114d069d", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -52,7 +52,7 @@ pub fn find_native_static_library(\n         }\n     }\n \n-    sess.emit_fatal(MissingNativeLibrary { libname: name });\n+    sess.emit_fatal(MissingNativeLibrary::new(name, verbatim.unwrap_or(false)));\n }\n \n fn find_bundled_library("}, {"sha": "3dafdcb788710ba99c583c10b4f050d02324b8f4", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -197,13 +197,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // create all the steps directly in MIR with operations all backends need to support anyway.\n                 let (source, ty) = if let ty::Adt(adt_def, ..) = source.ty.kind() && adt_def.is_enum() {\n                     let discr_ty = adt_def.repr().discr_type().to_ty(this.tcx);\n-                    let place = unpack!(block = this.as_place(block, source));\n+                    let temp = unpack!(block = this.as_temp(block, scope, source, Mutability::Not));\n                     let discr = this.temp(discr_ty, source.span);\n                     this.cfg.push_assign(\n                         block,\n                         source_info,\n                         discr,\n-                        Rvalue::Discriminant(place),\n+                        Rvalue::Discriminant(temp.into()),\n                     );\n \n                     (Operand::Move(discr), discr_ty)"}, {"sha": "d61567cd134a38075dcb80baa5d5ca3c6f4e5cf0", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -1 +1 @@\n-0.12.2\n\\ No newline at end of file\n+0.12.3\n\\ No newline at end of file"}, {"sha": "7f82dfbd3d6fffec218223de4817436db726658f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -1543,8 +1543,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n-        TyKind::Infer | TyKind::Err => Infer,\n-        TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", ty.kind),\n+        TyKind::Infer | TyKind::Err | TyKind::Typeof(..) => Infer,\n     }\n }\n "}, {"sha": "e58085f701ac26975c6e82c0be88bc0a3feca9db", "filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -3,11 +3,15 @@\n fn bar(_1: Bar) -> usize {\n     debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Bar;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "525c6234ed31de432f11b761cdf404cf8cb6187a", "filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -3,11 +3,15 @@\n fn boo(_1: Boo) -> usize {\n     debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Boo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "bb5faa48047a95b737b95218544ea0d7b154271c", "filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -4,8 +4,9 @@ fn droppy() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13\n     let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n     let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n-    let mut _4: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let _5: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+    let _4: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n+    let mut _5: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n+    let _6: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n     scope 1 {\n         debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14\n         scope 2 {\n@@ -16,7 +17,7 @@ fn droppy() -> () {\n         }\n     }\n     scope 4 {\n-        debug z => _5;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n+        debug z => _6;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n     }\n \n     bb0: {\n@@ -25,30 +26,41 @@ fn droppy() -> () {\n         _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:+2:17: +2:26\n         FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n         StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n-        _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _3 = move _4 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        StorageLive(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n+        _4 = move _2;                    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n+        _5 = discriminant(_4);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _3 = move _5 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        drop(_4) -> [return: bb1, unwind: bb4]; // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n         FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n         StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6\n-        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n     }\n \n-    bb1: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n         StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n-        StorageLive(_5);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n-        _5 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n-        FakeRead(ForLet(None), _5);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        StorageLive(_6);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        _6 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n+        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n         _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2\n-        drop(_5) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        drop(_6) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n     }\n \n-    bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+    bb3: {\n+        StorageDead(_6);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n         return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2\n     }\n \n-    bb3 (cleanup): {\n+    bb4 (cleanup): {\n+        drop(_2) -> bb5;                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+    }\n+\n+    bb5 (cleanup): {\n         resume;                          // scope 0 at $DIR/enum_cast.rs:+0:1: +8:2\n     }\n }"}, {"sha": "a1d29a0b9032065d7cf6d4e6f04eecd0feb06452", "filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -3,11 +3,15 @@\n fn foo(_1: Foo) -> usize {\n     debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let _2: Foo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "f7ef92df8fbec3a4f89a5dd2436ee6ca61d35a17", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     {\n         let e = E::C;\n         assert_eq!(e as u32, 2);\n-        assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n+        assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n     }\n     assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n }"}, {"sha": "5e43b85fce08410eecf07e4ec32af48ecda6fa97", "filename": "src/test/rustdoc-gui/unsafe-fn.goml", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -1,37 +1,28 @@\n+// Check position and color of the `<sup>` for unsafe elements.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n-\n-compare-elements-property: (\n-\t\"//a[@title='test_docs::safe_fn fn']/..\",\n-\t\"//a[@title='test_docs::unsafe_fn fn']/..\",\n-\t[\"clientHeight\"]\n-)\n-\n // If the text isn't displayed, the browser doesn't compute color style correctly...\n show-text: true\n \n-// Set the theme to dark.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n-\n-assert-css: (\".item-left sup\", {\n-\t\"color\": \"rgb(221, 221, 221)\"\n-})\n-\n-// Set the theme to ayu.\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n-\n-assert-css: (\".item-left sup\", {\n-\t\"color\": \"rgb(197, 197, 197)\"\n-})\n+compare-elements-property: (\n+    \"//a[@title='test_docs::safe_fn fn']/..\",\n+    \"//a[@title='test_docs::unsafe_fn fn']/..\",\n+    [\"clientHeight\"]\n+)\n \n-// Set the theme to light.\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-preferred-dark-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n+define-function: (\n+    \"sup-check\",\n+    // `theme` is the theme being tested.\n+    // `color` is the expected color of the `<sup>` element.\n+    (theme, color),\n+    [\n+        // Set the theme.\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        // We reload the page so the local storage settings are being used.\n+        (\"reload\"),\n+        (\"assert-css\", (\".item-left sup\", {\"color\": |color|})),\n+    ],\n+)\n \n-assert-css: (\".item-left sup\", {\n-\t\"color\": \"rgb(0, 0, 0)\"\n-})\n+call-function: (\"sup-check\", (\"dark\", \"rgb(221, 221, 221)\"))\n+call-function: (\"sup-check\", (\"ayu\", \"rgb(197, 197, 197)\"))\n+call-function: (\"sup-check\", (\"light\", \"rgb(0, 0, 0)\"))"}, {"sha": "001784ac28561000f390c9b08d1f6a353896acdd", "filename": "src/test/rustdoc-ui/issue-102986.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-ui%2Fissue-102986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-ui%2Fissue-102986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-102986.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,4 @@\n+struct Struct {\n+    y: (typeof(\"hey\"),),\n+    //~^ `typeof` is a reserved keyword but unimplemented\n+}"}, {"sha": "3a573726c9727a4ce2edde9a190ed8a4b85d257c", "filename": "src/test/rustdoc-ui/issue-102986.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-ui%2Fissue-102986.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Frustdoc-ui%2Fissue-102986.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-102986.stderr?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,14 @@\n+error[E0516]: `typeof` is a reserved keyword but unimplemented\n+  --> $DIR/issue-102986.rs:2:9\n+   |\n+LL |     y: (typeof(\"hey\"),),\n+   |         ^^^^^^^^^^^^^ reserved keyword\n+   |\n+help: consider replacing `typeof(...)` with an actual type\n+   |\n+LL |     y: (&'static str,),\n+   |         ~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0516`."}, {"sha": "8b27d5e55743d4ce617d00bd082897c88b454f38", "filename": "src/test/ui/mir/issue-102389.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-102389.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,8 @@\n+enum Enum { A, B, C }\n+\n+fn func(inbounds: &Enum, array: &[i16; 3]) -> i16 {\n+    array[*inbounds as usize]\n+    //~^ ERROR [E0507]\n+}\n+\n+fn main() {}"}, {"sha": "925dc258a4c3c8ac1dc44f479ac4b57ede3801b7", "filename": "src/test/ui/mir/issue-102389.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-102389.stderr?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of `*inbounds` which is behind a shared reference\n+  --> $DIR/issue-102389.rs:4:11\n+   |\n+LL |     array[*inbounds as usize]\n+   |           ^^^^^^^^^ move occurs because `*inbounds` has type `Enum`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "abf988a7c1ed380e23957ec3bd31bd6b00cdfe87", "filename": "src/test/ui/native-library-link-flags/suggest-libname-only-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// compile-flags: --crate-type rlib\n+// error-pattern: could not find native static library `libfoo.a`\n+// error-pattern: only provide the library name `foo`, not the full filename\n+\n+#[link(name = \"libfoo.a\", kind = \"static\")]\n+extern { }\n+\n+pub fn main() { }"}, {"sha": "64d0a9077ed1516e66002aaddc23dfb0ea0942aa", "filename": "src/test/ui/native-library-link-flags/suggest-libname-only-1.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-1.stderr?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,6 @@\n+error: could not find native static library `libfoo.a`, perhaps an -L flag is missing?\n+   |\n+   = help: only provide the library name `foo`, not the full filename\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfa70e56db73ce8a1145a7adfe7340ec24a1b9ab", "filename": "src/test/ui/native-library-link-flags/suggest-libname-only-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// compile-flags: --crate-type rlib\n+// error-pattern: could not find native static library `bar.lib`\n+// error-pattern: only provide the library name `bar`, not the full filename\n+\n+#[link(name = \"bar.lib\", kind = \"static\")]\n+extern { }\n+\n+pub fn main() { }"}, {"sha": "e166af9ed8f0393f1955ec34b81850706a6c1d0e", "filename": "src/test/ui/native-library-link-flags/suggest-libname-only-2.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fsuggest-libname-only-2.stderr?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,6 @@\n+error: could not find native static library `bar.lib`, perhaps an -L flag is missing?\n+   |\n+   = help: only provide the library name `bar`, not the full filename\n+\n+error: aborting due to previous error\n+"}, {"sha": "475f4724ff28f4c4bc24a81ac1c63e2ecc61f1bb", "filename": "src/test/ui/type-alias-impl-trait/closure_parent_substs.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,65 @@\n+// When WF checking the hidden type in the ParamEnv of the opaque type,\n+// one complication arises when the hidden type is a closure/generator:\n+// the \"parent_substs\" of the type may reference lifetime parameters\n+// not present in the opaque type.\n+// These region parameters are not really useful in this check.\n+// So here we ignore them and replace them with fresh region variables.\n+\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// Basic test\n+mod test1 {\n+    // Hidden type = Closure['_#0r]\n+    type Opaque = impl Sized;\n+\n+    fn define<'a: 'a>() -> Opaque {\n+        || {}\n+    }\n+}\n+\n+// the region vars cannot both be equal to `'static` or `'empty`\n+mod test2 {\n+    trait Trait {}\n+\n+    // Hidden type = Closure['a, '_#0r, '_#1r]\n+    // Constraints = [('_#0r: 'a), ('a: '_#1r)]\n+    type Opaque<'a>\n+    where\n+        &'a (): Trait,\n+    = impl Sized + 'a;\n+\n+    fn define<'a, 'x, 'y>() -> Opaque<'a>\n+    where\n+        &'a (): Trait,\n+        'x: 'a,\n+        'a: 'y,\n+    {\n+        || {}\n+    }\n+}\n+\n+// the region var cannot be equal to `'a` or `'b`\n+mod test3 {\n+    trait Trait {}\n+\n+    // Hidden type = Closure['a, 'b, '_#0r]\n+    // Constraints = [('_#0r: 'a), ('_#0r: 'b)]\n+    type Opaque<'a, 'b>\n+    where\n+        (&'a (), &'b ()): Trait,\n+    = impl Sized + 'a + 'b;\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        (&'a (), &'b ()): Trait,\n+        'x: 'a,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "53974dbb36bdfb453983e43c2e65055332a9e397", "filename": "src/test/ui/type-alias-impl-trait/closure_wf_outlives.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,65 @@\n+// If the hidden type is a closure, we require the \"outlives\" bounds that appear on the\n+// defining site to also appear on the opaque type.\n+//\n+// It's not clear if this is the desired behavior but at least\n+// it's consistent and has no back-compat risk.\n+\n+// check-fail\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// requires `'a: 'b` bound\n+mod test1 {\n+    type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+    //~^ ERROR lifetime bound not satisfied\n+\n+    fn define<'a, 'b>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// Same as the above but through indirection `'x`\n+mod test2 {\n+    type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+    //~^ ERROR cannot infer an appropriate lifetime\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'x,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// fixed version of the above\n+mod test2_fixed {\n+    type Opaque<'a: 'b, 'b> = impl Sized + 'a + 'b;\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'x,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// requires `T: 'static`\n+mod test3 {\n+    type Opaque<T> = impl Sized;\n+    //~^ ERROR the parameter type `T` may not live long enough\n+\n+    fn define<T>() -> Opaque<T>\n+    where\n+        T: 'static,\n+    {\n+        || {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ae6462bb62ce57e2f6aa5df29eb89847241a4f22", "filename": "src/test/ui/type-alias-impl-trait/closure_wf_outlives.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -0,0 +1,64 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/closure_wf_outlives.rs:14:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n+  --> $DIR/closure_wf_outlives.rs:14:17\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                 ^^\n+note: but lifetime parameter must outlive the lifetime `'b` as defined here\n+  --> $DIR/closure_wf_outlives.rs:14:21\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                     ^^\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n+  --> $DIR/closure_wf_outlives.rs:27:17\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                 ^^\n+note: ...so that the declared lifetime parameter bounds are satisfied\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n+  --> $DIR/closure_wf_outlives.rs:27:21\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                     ^^\n+note: ...so that the declared lifetime parameter bounds are satisfied\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/closure_wf_outlives.rs:54:22\n+   |\n+LL |     type Opaque<T> = impl Sized;\n+   |                      ^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/closure_wf_outlives.rs:59:12\n+   |\n+LL |         T: 'static,\n+   |            ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     type Opaque<T: 'static> = impl Sized;\n+   |                  +++++++++\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0310, E0478, E0495.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "69bd49394099de3146837345edd68aad4515112c", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edabf59ca4646b3fc1a961c26431215001043f6a/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/edabf59ca4646b3fc1a961c26431215001043f6a/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=edabf59ca4646b3fc1a961c26431215001043f6a", "patch": "@@ -179,6 +179,8 @@ exclude_labels = [\n [autolabel.\"A-bootstrap\"]\n trigger_files = [\n     \"x.py\",\n+    \"x\",\n+    \"x.ps1\",\n     \"src/bootstrap\",\n     \"src/tools/rust-installer\",\n ]"}]}