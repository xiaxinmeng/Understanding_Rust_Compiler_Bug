{"sha": "6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2RlYjBhZTA0YzRjYjY0MDBiMzBmZWNkMWNiYmVlMDUwNjM0OGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-11T20:02:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-11T20:02:14Z"}, "message": "Suggest using `'static` in assoc consts and suggest when multiple lts are needed", "tree": {"sha": "f8fbe36545beda6580ad94cc5f0742cfb7d95965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8fbe36545beda6580ad94cc5f0742cfb7d95965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "html_url": "https://github.com/rust-lang/rust/commit/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "becd479482935a63633861595e276bae6533b25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/becd479482935a63633861595e276bae6533b25b", "html_url": "https://github.com/rust-lang/rust/commit/becd479482935a63633861595e276bae6533b25b"}], "stats": {"total": 156, "additions": 144, "deletions": 12}, "files": [{"sha": "6e7a004f853e582f71e3f0dda81ccb8dcebfbf98", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "patch": "@@ -33,6 +33,7 @@ enum AssocSuggestion {\n crate enum MissingLifetimeSpot<'tcx> {\n     Generics(&'tcx hir::Generics<'tcx>),\n     HigherRanked { span: Span, span_type: ForLifetimeSpanType },\n+    Static,\n }\n \n crate enum ForLifetimeSpanType {\n@@ -1186,6 +1187,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n                     );\n                 }\n+                _ => {}\n             }\n         }\n         if nightly_options::is_nightly_build()\n@@ -1358,6 +1360,42 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         );\n                         (*span, span_type.suggestion(\"'a\"))\n                     }\n+                    MissingLifetimeSpot::Static => {\n+                        let (span, sugg) = match snippet.as_deref() {\n+                            Some(\"&\") => (span.shrink_to_hi(), \"'static \".to_owned()),\n+                            Some(\"'_\") => (span, \"'static\".to_owned()),\n+                            Some(snippet) if !snippet.ends_with('>') => {\n+                                if snippet == \"\" {\n+                                    (\n+                                        span,\n+                                        std::iter::repeat(\"'static\")\n+                                            .take(count)\n+                                            .collect::<Vec<_>>()\n+                                            .join(\", \"),\n+                                    )\n+                                } else {\n+                                    (\n+                                        span.shrink_to_hi(),\n+                                        format!(\n+                                            \"<{}>\",\n+                                            std::iter::repeat(\"'static\")\n+                                                .take(count)\n+                                                .collect::<Vec<_>>()\n+                                                .join(\", \")\n+                                        ),\n+                                    )\n+                                }\n+                            }\n+                            _ => continue,\n+                        };\n+                        err.span_suggestion_verbose(\n+                            span,\n+                            \"consider using the `'static` lifetime\",\n+                            sugg.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        continue;\n+                    }\n                 });\n                 for param in params {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n@@ -1408,13 +1446,23 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             ([], Some(\"'_\")) if count == 1 => {\n                 suggest_new(err, \"'a\");\n             }\n-            ([], Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n+            ([], Some(snippet)) if !snippet.ends_with('>') => {\n                 if snippet == \"\" {\n                     // This happens when we have `type Bar<'a> = Foo<T>` where we point at the space\n                     // before `T`. We will suggest `type Bar<'a> = Foo<'a, T>`.\n-                    suggest_new(err, \"'a, \");\n+                    suggest_new(\n+                        err,\n+                        &std::iter::repeat(\"'a, \").take(count).collect::<Vec<_>>().join(\"\"),\n+                    );\n                 } else {\n-                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n+                    suggest_new(\n+                        err,\n+                        &format!(\n+                            \"{}<{}>\",\n+                            snippet,\n+                            std::iter::repeat(\"'a\").take(count).collect::<Vec<_>>().join(\", \")\n+                        ),\n+                    );\n                 }\n             }\n             (lts, ..) if lts.len() > 1 => {"}, {"sha": "2046419d984d0fd0be20c2e0fb0fe87f793cb2a2", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "patch": "@@ -764,26 +764,30 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(trait_item.generics.params.is_empty());\n+                self.missing_named_lifetime_spots.push(MissingLifetimeSpot::Static);\n                 intravisit::walk_trait_item(self, trait_item);\n+                self.missing_named_lifetime_spots.pop();\n             }\n         }\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n-        self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n         match impl_item.kind {\n             Fn(ref sig, _) => {\n+                self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(impl_item.hir_id)),\n                     &sig.decl,\n                     &impl_item.generics,\n                     |this| intravisit::walk_impl_item(this, impl_item),\n-                )\n+                );\n+                self.missing_named_lifetime_spots.pop();\n             }\n             TyAlias(ref ty) => {\n                 let generics = &impl_item.generics;\n+                self.missing_named_lifetime_spots.push(generics.into());\n                 let mut index = self.next_early_index();\n                 let mut non_lifetime_count = 0;\n                 debug!(\"visit_ty: index = {}\", index);\n@@ -812,14 +816,16 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.visit_generics(generics);\n                     this.visit_ty(ty);\n                 });\n+                self.missing_named_lifetime_spots.pop();\n             }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(impl_item.generics.params.is_empty());\n+                self.missing_named_lifetime_spots.push(MissingLifetimeSpot::Static);\n                 intravisit::walk_impl_item(self, impl_item);\n+                self.missing_named_lifetime_spots.pop();\n             }\n         }\n-        self.missing_named_lifetime_spots.pop();\n     }\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {"}, {"sha": "ac70e887626ab8348a1cdb7963064c1525c4cb99", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "patch": "@@ -51,6 +51,15 @@ error[E0106]: missing lifetime specifiers\n    |\n LL |     buzz: Buzz,\n    |           ^^^^ expected 2 lifetime parameters\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Quux<'a> {\n+LL |     baz: Baz,\n+LL |\n+LL |\n+LL |     buzz: Buzz<'a, 'a>,\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "38332627f4c87a86a2a819151f6d0c40769bb9b7", "filename": "src/test/ui/suggestions/missing-lifetime-in-assoc-const-type.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs?ref=6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "patch": "@@ -1,5 +1,16 @@\n trait ZstAssert: Sized {\n-    const TYPE_NAME: &str = \"\"; //~ ERROR missing lifetime specifier\n+    const A: &str = \"\"; //~ ERROR missing lifetime specifier\n+    const B: S = S { s: &() }; //~ ERROR missing lifetime specifier\n+    const C: &'_ str = \"\"; //~ ERROR missing lifetime specifier\n+    const D: T = T { a: &(), b: &() }; //~ ERROR missing lifetime specifier\n+}\n+\n+struct S<'a> {\n+    s: &'a (),\n+}\n+struct T<'a, 'b> {\n+    a: &'a (),\n+    b: &'b (),\n }\n \n fn main() {}"}, {"sha": "b20778ce208176346db23b7fc4c09d294c16bc48", "filename": "src/test/ui/suggestions/missing-lifetime-in-assoc-const-type.stderr", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a3deb0ae04c4cb6400b30fecd1cbbee0506348b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr?ref=6a3deb0ae04c4cb6400b30fecd1cbbee0506348b", "patch": "@@ -1,15 +1,73 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-in-assoc-const-type.rs:2:22\n+  --> $DIR/missing-lifetime-in-assoc-const-type.rs:2:14\n    |\n-LL |     const TYPE_NAME: &str = \"\";\n-   |                      ^ expected named lifetime parameter\n+LL |     const A: &str = \"\";\n+   |              ^ expected named lifetime parameter\n    |\n+help: consider using the `'static` lifetime\n+   |\n+LL |     const A: &'static str = \"\";\n+   |               ^^^^^^^\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | trait ZstAssert<'a>: Sized {\n+LL |     const A: &'a str = \"\";\n+   |\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-in-assoc-const-type.rs:3:14\n+   |\n+LL |     const B: S = S { s: &() };\n+   |              ^ expected named lifetime parameter\n+   |\n+help: consider using the `'static` lifetime\n+   |\n+LL |     const B: S<'static> = S { s: &() };\n+   |               ^^^^^^^^^\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | trait ZstAssert<'a>: Sized {\n+LL |     const A: &str = \"\";\n+LL |     const B: S<'a> = S { s: &() };\n+   |\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-in-assoc-const-type.rs:4:15\n+   |\n+LL |     const C: &'_ str = \"\";\n+   |               ^^ expected named lifetime parameter\n+   |\n+help: consider using the `'static` lifetime\n+   |\n+LL |     const C: &'static str = \"\";\n+   |               ^^^^^^^\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | trait ZstAssert<'a>: Sized {\n+LL |     const A: &str = \"\";\n+LL |     const B: S = S { s: &() };\n+LL |     const C: &'a str = \"\";\n+   |\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-in-assoc-const-type.rs:5:14\n+   |\n+LL |     const D: T = T { a: &(), b: &() };\n+   |              ^ expected 2 lifetime parameters\n+   |\n+help: consider using the `'static` lifetime\n+   |\n+LL |     const D: T<'static, 'static> = T { a: &(), b: &() };\n+   |               ^^^^^^^^^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | trait ZstAssert<'a>: Sized {\n-LL |     const TYPE_NAME: &'a str = \"\";\n+LL |     const A: &str = \"\";\n+LL |     const B: S = S { s: &() };\n+LL |     const C: &'_ str = \"\";\n+LL |     const D: T<'a, 'a> = T { a: &(), b: &() };\n    |\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}]}