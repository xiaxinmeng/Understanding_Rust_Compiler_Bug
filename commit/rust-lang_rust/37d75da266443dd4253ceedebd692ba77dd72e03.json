{"sha": "37d75da266443dd4253ceedebd692ba77dd72e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDc1ZGEyNjY0NDNkZDQyNTNjZWVkZWJkNjkyYmE3N2RkNzJlMDM=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-07-08T16:04:51Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-07-08T16:37:20Z"}, "message": "make match_like_matches_macro only apply to matches with a wildcard", "tree": {"sha": "d5571403ee9bfdf3270e932af5faa66f157b858a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5571403ee9bfdf3270e932af5faa66f157b858a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d75da266443dd4253ceedebd692ba77dd72e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d75da266443dd4253ceedebd692ba77dd72e03", "html_url": "https://github.com/rust-lang/rust/commit/37d75da266443dd4253ceedebd692ba77dd72e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d75da266443dd4253ceedebd692ba77dd72e03/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1740dda76386aff7205b2a709a32c95e8cbc0d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/1740dda76386aff7205b2a709a32c95e8cbc0d57", "html_url": "https://github.com/rust-lang/rust/commit/1740dda76386aff7205b2a709a32c95e8cbc0d57"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "bc6e868823f77c78a158c0d1fdac6a14958069f3", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -237,7 +237,6 @@ fn is_commutative(op: hir::BinOpKind) -> bool {\n     use rustc_hir::BinOpKind::{\n         Add, And, BitAnd, BitOr, BitXor, Div, Eq, Ge, Gt, Le, Lt, Mul, Ne, Or, Rem, Shl, Shr, Sub,\n     };\n-    #[allow(clippy::match_like_matches_macro)]\n     match op {\n         Add | Mul | And | Or | BitXor | BitAnd | BitOr | Eq | Ne => true,\n         Sub | Div | Rem | Shl | Shr | Lt | Le | Ge | Gt => false,"}, {"sha": "aeabb99a30d11e3ba070ce386db2a248a86d23ff", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -446,11 +446,12 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `match` expressions producing a `bool` that could be written using `matches!`\n+    /// **What it does:** Checks for `match`  or `if let` expressions producing a\n+    /// `bool` that could be written using `matches!`\n     ///\n     /// **Why is this bad?** Readability and needless complexity.\n     ///\n-    /// **Known problems:** This can turn an intentionally exhaustive match into a non-exhaustive one.\n+    /// **Known problems:** None\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -462,8 +463,14 @@ declare_clippy_lint! {\n     ///     _ => false,\n     /// };\n     ///\n+    /// let a = if let Some(0) = x {\n+    ///     true\n+    /// } else {\n+    ///     false\n+    /// };\n+    ///\n     /// // Good\n-    /// let a = matches!(x, Some(5));\n+    /// let a = matches!(x, Some(0));\n     /// ```\n     pub MATCH_LIKE_MATCHES_MACRO,\n     style,\n@@ -499,9 +506,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             return;\n         }\n \n-        if !redundant_pattern_match::check(cx, expr) {\n-            check_match_like_matches(cx, expr);\n-        }\n+        redundant_pattern_match::check(cx, expr);\n+        check_match_like_matches(cx, expr);\n \n         if let ExprKind::Match(ref ex, ref arms, MatchSource::Normal) = expr.kind {\n             check_single_match(cx, ex, arms, expr);\n@@ -1068,6 +1074,7 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n     if_chain! {\n         if arms.len() == 2;\n         if cx.tables().expr_ty(expr).is_bool();\n+        if is_wild(&arms[1].pat);\n         if let Some(first) = find_bool_lit(&arms[0].body.kind, desugared);\n         if let Some(second) = find_bool_lit(&arms[1].body.kind, desugared);\n         if first != second;\n@@ -1437,16 +1444,14 @@ mod redundant_pattern_match {\n     use rustc_mir::const_eval::is_const_fn;\n     use rustc_span::source_map::Symbol;\n \n-    pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+    pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Match(op, arms, ref match_source) = &expr.kind {\n             match match_source {\n                 MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n                 MatchSource::IfLetDesugar { .. } => find_sugg_for_if_let(cx, expr, op, arms, \"if\"),\n                 MatchSource::WhileLetDesugar => find_sugg_for_if_let(cx, expr, op, arms, \"while\"),\n-                _ => false,\n+                _ => {},\n             }\n-        } else {\n-            false\n         }\n     }\n \n@@ -1456,7 +1461,7 @@ mod redundant_pattern_match {\n         op: &Expr<'_>,\n         arms: &[Arm<'_>],\n         keyword: &'static str,\n-    ) -> bool {\n+    ) {\n         fn find_suggestion(cx: &LateContext<'_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n             if match_qpath(path, &paths::RESULT_OK) && can_suggest(cx, hir_id, sym!(result_type), \"is_ok\") {\n                 return Some(\"is_ok()\");\n@@ -1487,7 +1492,7 @@ mod redundant_pattern_match {\n         };\n         let good_method = match good_method {\n             Some(method) => method,\n-            None => return false,\n+            None => return,\n         };\n \n         // check that `while_let_on_iterator` lint does not trigger\n@@ -1497,7 +1502,7 @@ mod redundant_pattern_match {\n             if method_path.ident.name == sym!(next);\n             if match_trait_method(cx, op, &paths::ITERATOR);\n             then {\n-                return false;\n+                return;\n             }\n         }\n \n@@ -1526,15 +1531,9 @@ mod redundant_pattern_match {\n                 );\n             },\n         );\n-        true\n     }\n \n-    fn find_sugg_for_match<'tcx>(\n-        cx: &LateContext<'tcx>,\n-        expr: &'tcx Expr<'_>,\n-        op: &Expr<'_>,\n-        arms: &[Arm<'_>],\n-    ) -> bool {\n+    fn find_sugg_for_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op: &Expr<'_>, arms: &[Arm<'_>]) {\n         if arms.len() == 2 {\n             let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n@@ -1599,10 +1598,8 @@ mod redundant_pattern_match {\n                         );\n                     },\n                 );\n-                return true;\n             }\n         }\n-        false\n     }\n \n     #[allow(clippy::too_many_arguments)]"}, {"sha": "f3e19092480ad12483c9d6a91ddd36abaaa2ff8e", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -1,32 +1,36 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n+#![allow(unreachable_patterns)]\n \n fn main() {\n     let x = Some(5);\n \n     // Lint\n     let _y = matches!(x, Some(0));\n \n+    // Lint\n+    let _w = matches!(x, Some(_));\n+\n     // Turn into is_none\n     let _z = x.is_none();\n \n     // Lint\n-    let _z = !matches!(x, Some(r) if r == 0);\n+    let _zz = !matches!(x, Some(r) if r == 0);\n \n     // Lint\n-    let _zz = matches!(x, Some(5));\n+    let _zzz = matches!(x, Some(5));\n \n     // No lint\n     let _a = match x {\n         Some(_) => false,\n-        None => false,\n+        _ => false,\n     };\n \n     // No lint\n-    let _a = match x {\n+    let _ab = match x {\n         Some(0) => false,\n-        Some(_) => true,\n+        _ => true,\n         None => false,\n     };\n }"}, {"sha": "fbae7c18b92392f2bf494a59d3efcb684983962a", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n+#![allow(unreachable_patterns)]\n \n fn main() {\n     let x = Some(5);\n@@ -11,31 +12,37 @@ fn main() {\n         _ => false,\n     };\n \n+    // Lint\n+    let _w = match x {\n+        Some(_) => true,\n+        _ => false,\n+    };\n+\n     // Turn into is_none\n     let _z = match x {\n         Some(_) => false,\n         None => true,\n     };\n \n     // Lint\n-    let _z = match x {\n+    let _zz = match x {\n         Some(r) if r == 0 => false,\n         _ => true,\n     };\n \n     // Lint\n-    let _zz = if let Some(5) = x { true } else { false };\n+    let _zzz = if let Some(5) = x { true } else { false };\n \n     // No lint\n     let _a = match x {\n         Some(_) => false,\n-        None => false,\n+        _ => false,\n     };\n \n     // No lint\n-    let _a = match x {\n+    let _ab = match x {\n         Some(0) => false,\n-        Some(_) => true,\n+        _ => true,\n         None => false,\n     };\n }"}, {"sha": "4668f8565a656f54740ecb3eb0a21f2a63f12386", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -1,5 +1,5 @@\n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:9:14\n+  --> $DIR/match_expr_like_matches_macro.rs:10:14\n    |\n LL |       let _y = match x {\n    |  ______________^\n@@ -10,8 +10,18 @@ LL | |     };\n    |\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:16:14\n+   |\n+LL |       let _w = match x {\n+   |  ______________^\n+LL | |         Some(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `matches!(x, Some(_))`\n+\n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_expr_like_matches_macro.rs:15:14\n+  --> $DIR/match_expr_like_matches_macro.rs:22:14\n    |\n LL |       let _z = match x {\n    |  ______________^\n@@ -23,20 +33,20 @@ LL | |     };\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:21:14\n+  --> $DIR/match_expr_like_matches_macro.rs:28:15\n    |\n-LL |       let _z = match x {\n-   |  ______________^\n+LL |       let _zz = match x {\n+   |  _______________^\n LL | |         Some(r) if r == 0 => false,\n LL | |         _ => true,\n LL | |     };\n    | |_____^ help: try this: `!matches!(x, Some(r) if r == 0)`\n \n error: if let .. else expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:27:15\n+  --> $DIR/match_expr_like_matches_macro.rs:34:16\n    |\n-LL |     let _zz = if let Some(5) = x { true } else { false };\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `matches!(x, Some(5))`\n+LL |     let _zzz = if let Some(5) = x { true } else { false };\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `matches!(x, Some(5))`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "11dff94a288657d0c662f383616e2e9b5175509b", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -23,7 +23,10 @@ pub enum SeemsOption<T> {\n \n impl<T> SeemsOption<T> {\n     pub fn is_none(&self) -> bool {\n-        matches!(*self, SeemsOption::None)\n+        match *self {\n+            SeemsOption::None => true,\n+            SeemsOption::Some(_) => false,\n+        }\n     }\n }\n "}, {"sha": "1d0ee82b4f7787b5e56445c334b2115066804d67", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -25,7 +25,10 @@ pub enum SeemsOption<T> {\n \n impl<T> SeemsOption<T> {\n     pub fn is_none(&self) -> bool {\n-        matches!(*self, SeemsOption::None)\n+        match *self {\n+            SeemsOption::None => true,\n+            SeemsOption::Some(_) => false,\n+        }\n     }\n }\n "}, {"sha": "502615fb175a1857b088db3468bccc16d3917992", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37d75da266443dd4253ceedebd692ba77dd72e03/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=37d75da266443dd4253ceedebd692ba77dd72e03", "patch": "@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:47:9\n+  --> $DIR/question_mark.rs:50:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:51:9\n+  --> $DIR/question_mark.rs:54:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:55:17\n+  --> $DIR/question_mark.rs:58:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -36,7 +36,7 @@ LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:61:17\n+  --> $DIR/question_mark.rs:64:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,31 +47,31 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:78:9\n+  --> $DIR/question_mark.rs:81:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:86:9\n+  --> $DIR/question_mark.rs:89:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:94:9\n+  --> $DIR/question_mark.rs:97:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:101:26\n+  --> $DIR/question_mark.rs:104:26\n    |\n LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n    |  __________________________^\n@@ -82,7 +82,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:111:17\n+  --> $DIR/question_mark.rs:114:17\n    |\n LL |           let v = if let Some(v) = self.opt {\n    |  _________________^\n@@ -93,7 +93,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:126:5\n+  --> $DIR/question_mark.rs:129:5\n    |\n LL | /     if f().is_none() {\n LL | |         return None;"}]}