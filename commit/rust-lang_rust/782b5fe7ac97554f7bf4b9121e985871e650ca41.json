{"sha": "782b5fe7ac97554f7bf4b9121e985871e650ca41", "node_id": "C_kwDOAAsO6NoAKDc4MmI1ZmU3YWM5NzU1NGY3YmY0YjkxMjFlOTg1ODcxZTY1MGNhNDE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:13:36Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:13:36Z"}, "message": "Implement simd_saturating_{add,sub}", "tree": {"sha": "3cb76f3866073280704fa2b6fda5adcb36b190d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb76f3866073280704fa2b6fda5adcb36b190d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/782b5fe7ac97554f7bf4b9121e985871e650ca41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/782b5fe7ac97554f7bf4b9121e985871e650ca41", "html_url": "https://github.com/rust-lang/rust/commit/782b5fe7ac97554f7bf4b9121e985871e650ca41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/782b5fe7ac97554f7bf4b9121e985871e650ca41/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0980596271fd99665921052c8f666f7fb718a3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0980596271fd99665921052c8f666f7fb718a3cc", "html_url": "https://github.com/rust-lang/rust/commit/0980596271fd99665921052c8f666f7fb718a3cc"}], "stats": {"total": 145, "additions": 39, "deletions": 106}, "files": [{"sha": "e23dea976944bb3955de08144694a27932bf70df", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/782b5fe7ac97554f7bf4b9121e985871e650ca41/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/782b5fe7ac97554f7bf4b9121e985871e650ca41/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=782b5fe7ac97554f7bf4b9121e985871e650ca41", "patch": "@@ -11,110 +11,6 @@ Subject: [PATCH] Disable unsupported tests\n  crates/core_simd/tests/masks.rs          | 3 ---\n  5 files changed, 20 insertions(+), 3 deletions(-)\n \n-diff --git a/crates/core_simd/src/elements/int.rs b/crates/core_simd/src/elements/int.rs\n-index 9b8c37e..ea95f08 100644\n---- a/crates/core_simd/src/elements/int.rs\n-+++ b/crates/core_simd/src/elements/int.rs\n-@@ -11,6 +11,7 @@ pub trait SimdInt: Copy + Sealed {\n-     /// Scalar type contained by this SIMD vector type.\n-     type Scalar;\n- \n-+    /*\n-     /// Lanewise saturating add.\n-     ///\n-     /// # Examples\n-@@ -45,6 +46,7 @@ pub trait SimdInt: Copy + Sealed {\n-     /// assert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));\n-     /// assert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));\n-     fn saturating_sub(self, second: Self) -> Self;\n-+    */\n- \n-     /// Lanewise absolute value, implemented in Rust.\n-     /// Every lane becomes its absolute value.\n-@@ -61,6 +63,7 @@ pub trait SimdInt: Copy + Sealed {\n-     /// ```\n-     fn abs(self) -> Self;\n- \n-+    /*\n-     /// Lanewise saturating absolute value, implemented in Rust.\n-     /// As abs(), except the MIN value becomes MAX instead of itself.\n-     ///\n-@@ -96,6 +99,7 @@ pub trait SimdInt: Copy + Sealed {\n-     /// assert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1]));\n-     /// ```\n-     fn saturating_neg(self) -> Self;\n-+    */\n- \n-     /// Returns true for each positive lane and false if it is zero or negative.\n-     fn is_positive(self) -> Self::Mask;\n-@@ -199,6 +203,7 @@ macro_rules! impl_trait {\n-             type Mask = Mask<<$ty as SimdElement>::Mask, LANES>;\n-             type Scalar = $ty;\n- \n-+            /*\n-             #[inline]\n-             fn saturating_add(self, second: Self) -> Self {\n-                 // Safety: `self` is a vector\n-@@ -210,6 +215,7 @@ macro_rules! impl_trait {\n-                 // Safety: `self` is a vector\n-                 unsafe { intrinsics::simd_saturating_sub(self, second) }\n-             }\n-+            */\n- \n-             #[inline]\n-             fn abs(self) -> Self {\n-@@ -218,6 +224,7 @@ macro_rules! impl_trait {\n-                 (self^m) - m\n-             }\n- \n-+            /*\n-             #[inline]\n-             fn saturating_abs(self) -> Self {\n-                 // arith shift for -1 or 0 mask based on sign bit, giving 2s complement\n-@@ -230,6 +237,7 @@ macro_rules! impl_trait {\n-             fn saturating_neg(self) -> Self {\n-                 Self::splat(0).saturating_sub(self)\n-             }\n-+            */\n- \n-             #[inline]\n-             fn is_positive(self) -> Self::Mask {\n-diff --git a/crates/core_simd/src/elements/uint.rs b/crates/core_simd/src/elements/uint.rs\n-index 21e7e76..0d6dee2 100644\n---- a/crates/core_simd/src/elements/uint.rs\n-+++ b/crates/core_simd/src/elements/uint.rs\n-@@ -6,6 +6,7 @@ pub trait SimdUint: Copy + Sealed {\n-     /// Scalar type contained by this SIMD vector type.\n-     type Scalar;\n- \n-+    /*\n-     /// Lanewise saturating add.\n-     ///\n-     /// # Examples\n-@@ -40,6 +41,7 @@ pub trait SimdUint: Copy + Sealed {\n-     /// assert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\n-     /// assert_eq!(sat, Simd::splat(0));\n-     fn saturating_sub(self, second: Self) -> Self;\n-+    */\n- \n-     /// Returns the sum of the lanes of the vector, with wrapping addition.\n-     fn reduce_sum(self) -> Self::Scalar;\n-@@ -78,6 +80,7 @@ macro_rules! impl_trait {\n-         {\n-             type Scalar = $ty;\n- \n-+            /*\n-             #[inline]\n-             fn saturating_add(self, second: Self) -> Self {\n-                 // Safety: `self` is a vector\n-@@ -89,6 +92,7 @@ macro_rules! impl_trait {\n-                 // Safety: `self` is a vector\n-                 unsafe { intrinsics::simd_saturating_sub(self, second) }\n-             }\n-+            */\n- \n-             #[inline]\n-             fn reduce_sum(self) -> Self::Scalar {\n diff --git a/crates/core_simd/src/masks/full_masks.rs b/crates/core_simd/src/masks/full_masks.rs\n index adf0fcb..e7e657e 100644\n --- a/crates/core_simd/src/masks/full_masks.rs"}, {"sha": "1e47ccbd49fa861253b9de6f06ca85c6ae922b98", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/782b5fe7ac97554f7bf4b9121e985871e650ca41/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b5fe7ac97554f7bf4b9121e985871e650ca41/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=782b5fe7ac97554f7bf4b9121e985871e650ca41", "patch": "@@ -84,6 +84,30 @@ fn simd_for_each_lane<'tcx>(\n     }\n }\n \n+fn simd_pair_for_each_lane_typed<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    x: CValue<'tcx>,\n+    y: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, CValue<'tcx>, CValue<'tcx>) -> CValue<'tcx>,\n+) {\n+    assert_eq!(x.layout(), y.layout());\n+    let layout = x.layout();\n+\n+    let (lane_count, _lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+    let (ret_lane_count, _ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n+    assert_eq!(lane_count, ret_lane_count);\n+\n+    for lane_idx in 0..lane_count {\n+        let x_lane = x.value_lane(fx, lane_idx);\n+        let y_lane = y.value_lane(fx, lane_idx);\n+\n+        let res_lane = f(fx, x_lane, y_lane);\n+\n+        ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n+    }\n+}\n+\n fn simd_pair_for_each_lane<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     x: CValue<'tcx>,"}, {"sha": "a70ced7472f5ad6044d2dc34f678e10740b1557c", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/782b5fe7ac97554f7bf4b9121e985871e650ca41/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b5fe7ac97554f7bf4b9121e985871e650ca41/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=782b5fe7ac97554f7bf4b9121e985871e650ca41", "patch": "@@ -730,9 +730,22 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, res);\n         }\n \n+        sym::simd_saturating_add | sym::simd_saturating_sub => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            let bin_op = match intrinsic {\n+                sym::simd_saturating_add => BinOp::Add,\n+                sym::simd_saturating_sub => BinOp::Sub,\n+                _ => unreachable!(),\n+            };\n+\n+            // FIXME use vector instructions when possible\n+            simd_pair_for_each_lane_typed(fx, x, y, ret, &|fx, x_lane, y_lane| {\n+                crate::num::codegen_saturating_int_binop(fx, bin_op, x_lane, y_lane)\n+            });\n+        }\n+\n         // simd_arith_offset\n-        // simd_saturating_add\n-        // simd_saturating_sub\n         // simd_scatter\n         // simd_gather\n         // simd_select_bitmask"}]}