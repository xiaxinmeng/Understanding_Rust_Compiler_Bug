{"sha": "6212950ceb9add443db7450f2e4790fbb2fbddd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTI5NTBjZWI5YWRkNDQzZGI3NDUwZjJlNDc5MGZiYjJmYmRkZDc=", "commit": {"author": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-26T21:50:13Z"}, "committer": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-26T22:00:10Z"}, "message": "Explain why 'run-rustfix' is not defined", "tree": {"sha": "5e06d4fb60e097cc9ed6318976abeea0d0ee2dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e06d4fb60e097cc9ed6318976abeea0d0ee2dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6212950ceb9add443db7450f2e4790fbb2fbddd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6212950ceb9add443db7450f2e4790fbb2fbddd7", "html_url": "https://github.com/rust-lang/rust/commit/6212950ceb9add443db7450f2e4790fbb2fbddd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6212950ceb9add443db7450f2e4790fbb2fbddd7/comments", "author": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8337c467e9968b91277f0c0ae113e2d4917ac55e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8337c467e9968b91277f0c0ae113e2d4917ac55e", "html_url": "https://github.com/rust-lang/rust/commit/8337c467e9968b91277f0c0ae113e2d4917ac55e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "b2c275d68afa16169ad78ac3b64562d766a88ca7", "filename": "tests/ui/ref_option_ref.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6212950ceb9add443db7450f2e4790fbb2fbddd7/tests%2Fui%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212950ceb9add443db7450f2e4790fbb2fbddd7/tests%2Fui%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.rs?ref=6212950ceb9add443db7450f2e4790fbb2fbddd7", "patch": "@@ -1,6 +1,11 @@\n #![allow(unused)]\n #![warn(clippy::ref_option_ref)]\n \n+// This lint is not tagged as run-rustfix because automatically\n+// changing the type of a variable would also means changing\n+// all usages of this variable to match and This is not handled\n+// by this lint.\n+\n static THRESHOLD: i32 = 10;\n static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n const CONST_THRESHOLD: &i32 = &10;"}, {"sha": "10f196612682c49168fa95cfc401953ddc675b88", "filename": "tests/ui/ref_option_ref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6212950ceb9add443db7450f2e4790fbb2fbddd7/tests%2Fui%2Fref_option_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6212950ceb9add443db7450f2e4790fbb2fbddd7/tests%2Fui%2Fref_option_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.stderr?ref=6212950ceb9add443db7450f2e4790fbb2fbddd7", "patch": "@@ -1,67 +1,67 @@\n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:5:23\n+  --> $DIR/ref_option_ref.rs:10:23\n    |\n LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n    |                       ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n    |\n    = note: `-D clippy::ref-option-ref` implied by `-D warnings`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:7:18\n+  --> $DIR/ref_option_ref.rs:12:18\n    |\n LL | const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n    |                  ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:9:25\n+  --> $DIR/ref_option_ref.rs:14:25\n    |\n LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;\n    |                         ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:10:25\n+  --> $DIR/ref_option_ref.rs:15:25\n    |\n LL | type RefOptRef<'a, T> = &'a Option<&'a T>;\n    |                         ^^^^^^^^^^^^^^^^^ help: try: `Option<&'a T>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:12:14\n+  --> $DIR/ref_option_ref.rs:17:14\n    |\n LL | fn foo(data: &Option<&u32>) {}\n    |              ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:14:23\n+  --> $DIR/ref_option_ref.rs:19:23\n    |\n LL | fn bar(data: &u32) -> &Option<&u32> {\n    |                       ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:19:11\n+  --> $DIR/ref_option_ref.rs:24:11\n    |\n LL |     data: &'a Option<&'a u32>,\n    |           ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:22:32\n+  --> $DIR/ref_option_ref.rs:27:32\n    |\n LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n    |                                ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:26:14\n+  --> $DIR/ref_option_ref.rs:31:14\n    |\n LL |     Variant2(&'a Option<&'a u32>),\n    |              ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:35:14\n+  --> $DIR/ref_option_ref.rs:40:14\n    |\n LL |     type A = &'static Option<&'static Self>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'static Self>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:41:12\n+  --> $DIR/ref_option_ref.rs:46:12\n    |\n LL |     let x: &Option<&u32> = &None;\n    |            ^^^^^^^^^^^^^ help: try: `Option<&u32>`"}]}