{"sha": "5053db7c006a22060fc87c227339ddc6ee8d8ec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNTNkYjdjMDA2YTIyMDYwZmM4N2MyMjczMzlkZGM2ZWU4ZDhlYzA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-30T18:49:28Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-15T21:08:28Z"}, "message": "Don't make tools responsible for checking unknown and renamed lints\n\nPreviously, clippy (and any other tool emitting lints) had to have their\nown separate UNKNOWN_LINTS pass, because the compiler assumed any tool\nlint could be valid. Now, as long as any lint starting with the tool\nprefix exists, the compiler will warn when an unknown lint is present.", "tree": {"sha": "5b691b8f9cb77b0774a29593d411b84cf1140bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b691b8f9cb77b0774a29593d411b84cf1140bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5053db7c006a22060fc87c227339ddc6ee8d8ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5053db7c006a22060fc87c227339ddc6ee8d8ec0", "html_url": "https://github.com/rust-lang/rust/commit/5053db7c006a22060fc87c227339ddc6ee8d8ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5053db7c006a22060fc87c227339ddc6ee8d8ec0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48eb37b9470a26748c916f7153569906f3c67bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48eb37b9470a26748c916f7153569906f3c67bf", "html_url": "https://github.com/rust-lang/rust/commit/e48eb37b9470a26748c916f7153569906f3c67bf"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "c4df0acbbb0f9fc3101df144d5b92160a6360b69", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5053db7c006a22060fc87c227339ddc6ee8d8ec0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5053db7c006a22060fc87c227339ddc6ee8d8ec0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=5053db7c006a22060fc87c227339ddc6ee8d8ec0", "patch": "@@ -354,10 +354,23 @@ impl LintStore {\n             lint_name.to_string()\n         };\n         // If the lint was scoped with `tool::` check if the tool lint exists\n-        if tool_name.is_some() {\n+        if let Some(tool_name) = tool_name {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n-                    None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n+                    // If the lint isn't registered, there are two possibilities:\n+                    None => {\n+                        // 1. The tool is currently running, so this lint really doesn't exist.\n+                        // FIXME: should this handle tools that never register a lint, like rustfmt?\n+                        tracing::debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n+                        let tool_prefix = format!(\"{}::\", tool_name);\n+                        return if self.by_name.keys().any(|lint| lint.starts_with(&tool_prefix)) {\n+                            self.no_lint_suggestion(&complete_name)\n+                        } else {\n+                            // 2. The tool isn't currently running, so no lints will be registered.\n+                            // To avoid giving a false positive, ignore all unknown lints.\n+                            CheckLintNameResult::Tool(Err((None, String::new())))\n+                        };\n+                    }\n                     Some(LintGroup { lint_ids, .. }) => {\n                         return CheckLintNameResult::Tool(Ok(&lint_ids));\n                     }\n@@ -398,6 +411,15 @@ impl LintStore {\n         }\n     }\n \n+    fn no_lint_suggestion(&self, lint_name: &str) -> CheckLintNameResult<'_> {\n+        let symbols = self.by_name.keys().map(|name| Symbol::intern(&name)).collect::<Vec<_>>();\n+\n+        let suggestion =\n+            find_best_match_for_name(&symbols, Symbol::intern(&lint_name.to_lowercase()), None);\n+\n+        CheckLintNameResult::NoLint(suggestion)\n+    }\n+\n     fn check_tool_name_for_backwards_compat(\n         &self,\n         lint_name: &str,\n@@ -407,18 +429,7 @@ impl LintStore {\n         match self.by_name.get(&complete_name) {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n-                None => {\n-                    let symbols =\n-                        self.by_name.keys().map(|name| Symbol::intern(&name)).collect::<Vec<_>>();\n-\n-                    let suggestion = find_best_match_for_name(\n-                        &symbols,\n-                        Symbol::intern(&lint_name.to_lowercase()),\n-                        None,\n-                    );\n-\n-                    CheckLintNameResult::NoLint(suggestion)\n-                }\n+                None => self.no_lint_suggestion(lint_name),\n                 Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Reaching this would be weird, but let's cover this case anyway\n                     if let Some(LintAlias { name, silent }) = depr {"}, {"sha": "fc8f84461f9912dfd10483c439809dda9fb3f1a0", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5053db7c006a22060fc87c227339ddc6ee8d8ec0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5053db7c006a22060fc87c227339ddc6ee8d8ec0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=5053db7c006a22060fc87c227339ddc6ee8d8ec0", "patch": "@@ -381,6 +381,11 @@ impl<'s> LintLevelsBuilder<'s> {\n                             src,\n                             Some(li.span().into()),\n                             |lint| {\n+                                let name = if let Some(tool_name) = tool_name {\n+                                    format!(\"{}::{}\", tool_name, name)\n+                                } else {\n+                                    name.to_string()\n+                                };\n                                 let mut db = lint.build(&format!(\"unknown lint: `{}`\", name));\n                                 if let Some(suggestion) = suggestion {\n                                     db.span_suggestion("}]}