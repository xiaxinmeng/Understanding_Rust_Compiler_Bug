{"sha": "81e754c359c471f91263813c46c67955071716a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTc1NGMzNTljNDcxZjkxMjYzODEzYzQ2YzY3OTU1MDcxNzE2YTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T22:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T22:07:32Z"}, "message": "Auto merge of #75070 - Manishearth:rollup-2kgcaw5, r=Manishearth\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #74980 (pprust: adjust mixed comment printing and add regression test for #74745)\n - #75009 (Document the discrepancy in the mask type for _mm_shuffle_ps)\n - #75031 (Do not trigger `unused_{braces,parens}` lints with `yield`)\n - #75059 (fix typos)\n - #75064 (compiletest: Support ignoring tests requiring missing LLVM components)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fc272232dd959d3a94e8a767b0cacf32d5604271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc272232dd959d3a94e8a767b0cacf32d5604271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e754c359c471f91263813c46c67955071716a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e754c359c471f91263813c46c67955071716a7", "html_url": "https://github.com/rust-lang/rust/commit/81e754c359c471f91263813c46c67955071716a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e754c359c471f91263813c46c67955071716a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f042d749b0fc212bff6bdc44b84e134b878bff64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f042d749b0fc212bff6bdc44b84e134b878bff64", "html_url": "https://github.com/rust-lang/rust/commit/f042d749b0fc212bff6bdc44b84e134b878bff64"}, {"sha": "0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "html_url": "https://github.com/rust-lang/rust/commit/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee"}], "stats": {"total": 247, "additions": 191, "deletions": 56}, "files": [{"sha": "1c61050147d817d4c8f5ecbe0189463b7fcf7240", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -2101,7 +2101,7 @@ impl<T: ?Sized> Unpin for Rc<T> {}\n ///\n /// - This function is safe for any argument if `T` is sized, and\n /// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   aquired from the real instance that you are getting this offset for.\n+///   acquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `RcBox`.\n     // Because it is ?Sized, it will always be the last field in memory."}, {"sha": "343a17b002f57d8281f9b55d007c872da17a1f60", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -2255,7 +2255,7 @@ impl<T: ?Sized> Unpin for Arc<T> {}\n ///\n /// - This function is safe for any argument if `T` is sized, and\n /// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   aquired from the real instance that you are getting this offset for.\n+///   acquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `ArcInner`.\n     // Because it is `?Sized`, it will always be the last field in memory."}, {"sha": "851ca17a365484370abe8d14971221533330ac84", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -37,7 +37,7 @@ fn box_clone_and_clone_from_equivalence() {\n /// This test might give a false positive in case the box realocates, but the alocator keeps the\n /// original pointer.\n ///\n-/// On the other hand it won't give a false negative, if it fails than the memory was definitly not\n+/// On the other hand it won't give a false negative, if it fails than the memory was definitely not\n /// reused\n #[test]\n fn box_clone_from_ptr_stability() {"}, {"sha": "c44ce9873d508a44ef3bb40fe82515e858c162c3", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -189,7 +189,7 @@ unsafe impl AllocRef for System {\n             ReallocPlacement::MayMove if layout.size() == 0 => {\n                 let new_layout =\n                     // SAFETY: The new size and layout alignement guarantees\n-                    // are transfered to the caller (they come from parameters).\n+                    // are transferred to the caller (they come from parameters).\n                     //\n                     // See the preconditions for `Layout::from_size_align` to\n                     // see what must be checked.\n@@ -254,7 +254,7 @@ unsafe impl AllocRef for System {\n                 //\n                 // See `GlobalAlloc::realloc` for more informations about the\n                 // guarantees expected by this method. `ptr`, `layout` and\n-                // `new_size` are parameters and the responsability for their\n+                // `new_size` are parameters and the responsibility for their\n                 // correctness is left to the caller.\n                 //\n                 // `realloc` probably checks for `new_size < size` or something"}, {"sha": "c98008688ab4f078d39f7511e3b522faddb8601a", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1363,7 +1363,7 @@ mod self_upper_keyword {}\n ///\n /// let r1 = &FOO as *const _;\n /// let r2 = &FOO as *const _;\n-/// // With a strictly read-only static, references will have the same adress\n+/// // With a strictly read-only static, references will have the same address\n /// assert_eq!(r1, r2);\n /// // A static item can be used just like a variable in many cases\n /// println!(\"{:?}\", FOO);"}, {"sha": "714ec3e878617adfad8c2308741d9f599d8e2c84", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -81,7 +81,7 @@\n //   see the changes to drop the `Waiter` struct correctly.\n // * There is one place where the two atomics `Once.state_and_queue` and\n //   `Waiter.signaled` come together, and might be reordered by the compiler or\n-//   processor. Because both use Aquire ordering such a reordering is not\n+//   processor. Because both use Acquire ordering such a reordering is not\n //   allowed, so no need for SeqCst.\n \n use crate::cell::Cell;"}, {"sha": "d6822f9c433bd70f786b157f17beaf64ee28d83a", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1 +1 @@\n-Subproject commit 311d56cd91609c1c1c0370cbd2ece8e3048653a5\n+Subproject commit d6822f9c433bd70f786b157f17beaf64ee28d83a"}, {"sha": "bb5b9296c0aa73e2c5e2b822abf5036ad95834df", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1158,13 +1158,19 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n+        let mut llvm_components_passed = false;\n+        let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n             if !builder.config.dry_run {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 // Remove trailing newline from llvm-config output.\n-                let llvm_version = llvm_version.trim_end();\n-                cmd.arg(\"--llvm-version\").arg(llvm_version);\n+                cmd.arg(\"--llvm-version\")\n+                    .arg(llvm_version.trim())\n+                    .arg(\"--llvm-components\")\n+                    .arg(llvm_components.trim());\n+                llvm_components_passed = true;\n             }\n             if !builder.is_rust_llvm(target) {\n                 cmd.arg(\"--system-llvm\");\n@@ -1182,15 +1188,13 @@ impl Step for Compiletest {\n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n             if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n-                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n                     .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n-                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n-                    .arg(\"--llvm-components\")\n-                    .arg(llvm_components.trim());\n+                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n+                copts_passed = true;\n                 if let Some(ar) = builder.ar(target) {\n                     cmd.arg(\"--ar\").arg(ar);\n                 }\n@@ -1220,15 +1224,11 @@ impl Step for Compiletest {\n             }\n         }\n \n-        if suite != \"run-make-fulldeps\" {\n-            cmd.arg(\"--cc\")\n-                .arg(\"\")\n-                .arg(\"--cxx\")\n-                .arg(\"\")\n-                .arg(\"--cflags\")\n-                .arg(\"\")\n-                .arg(\"--llvm-components\")\n-                .arg(\"\");\n+        if !llvm_components_passed {\n+            cmd.arg(\"--llvm-components\").arg(\"\");\n+        }\n+        if !copts_passed {\n+            cmd.arg(\"--cc\").arg(\"\").arg(\"--cxx\").arg(\"\").arg(\"--cflags\").arg(\"\");\n         }\n \n         if builder.remote_tested(target) {"}, {"sha": "4b228629ad719e2e2bac4a58687b2a5a00398326", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -450,7 +450,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn print_comment(&mut self, cmnt: &comments::Comment) {\n         match cmnt.style {\n             comments::Mixed => {\n-                self.zerobreak();\n+                if !self.is_beginning_of_line() {\n+                    self.zerobreak();\n+                }\n                 if let Some((last, lines)) = cmnt.lines.split_last() {\n                     self.ibox(0);\n "}, {"sha": "133c4bf2db5f7a869c8ecd8a6db3654dcc67f9eb", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -166,15 +166,15 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n                     relation.const_equate_obligation(a, b);\n                 }\n                 return Ok(b);\n             }\n             (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n                     relation.const_equate_obligation(a, b);"}, {"sha": "0125e0f48e8852944dc4e5ecdacbf3b42b75c023", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n         if let (Some(ident), true) = (override_error_code, fn_returns.is_empty()) {\n-            // Provide a more targetted error code and description.\n+            // Provide a more targeted error code and description.\n             err.code(rustc_errors::error_code!(E0772));\n             err.set_primary_message(&format!(\n                 \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\"}, {"sha": "a33f920603592691d95881aa371ebc80b2d565f7", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -422,7 +422,7 @@ trait UnusedDelimLint {\n         lhs_needs_parens\n             || (followed_by_block\n                 && match inner.kind {\n-                    ExprKind::Ret(_) | ExprKind::Break(..) => true,\n+                    ExprKind::Ret(_) | ExprKind::Break(..) | ExprKind::Yield(..) => true,\n                     _ => parser::contains_exterior_struct_lit(&inner),\n                 })\n     }"}, {"sha": "352b8bff7e2fb80df0428685f901b70a5f850154", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx> SpecializedEncoder<Span> for EncodeContext<'a, 'tcx> {\n         // real code should never need to care about this.\n         //\n         // 2. Using `Span::def_site` or `Span::mixed_site` will not\n-        // include any hygiene information associated with the defintion\n+        // include any hygiene information associated with the definition\n         // site. This means that a proc-macro cannot emit a `$crate`\n         // identifier which resolves to one of its dependencies,\n         // which also should never come up in practice."}, {"sha": "07221082048fbc3603a8995e98d7f670e3e374e1", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -585,7 +585,7 @@ struct OpaqueTypeExpander<'tcx> {\n     found_recursion: bool,\n     /// Whether or not to check for recursive opaque types.\n     /// This is `true` when we're explicitly checking for opaque type\n-    /// recursion, and 'false' otherwise to avoid unecessary work.\n+    /// recursion, and 'false' otherwise to avoid unnecessary work.\n     check_recursion: bool,\n     tcx: TyCtxt<'tcx>,\n }"}, {"sha": "f1a7338d11fd966180551bf5078984e23c5aae18", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -524,7 +524,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                         // The `is_empty` predicate is introduced to exclude the case\n                                         // where the projection operations are [ .field, * ].\n                                         // The reason is because promotion will be illegal if field\n-                                        // accesses preceed the dereferencing.\n+                                        // accesses precede the dereferencing.\n                                         // Discussion can be found at\n                                         // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247\n                                         // There may be opportunity for generalization, but this needs to be"}, {"sha": "daff10eb194f83fa15c6003f8f34094ef4533f61", "filename": "src/librustc_mir_build/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -133,7 +133,7 @@ crate enum PatKind<'tcx> {\n         var: hir::HirId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pat<'tcx>>,\n-        /// Is this the leftmost occurance of the binding, i.e., is `var` the\n+        /// Is this the leftmost occurrence of the binding, i.e., is `var` the\n         /// `HirId` of this pattern?\n         is_primary: bool,\n     },"}, {"sha": "9fcdd46539c46f15aee8c50306f9f58af128ea18", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1717,7 +1717,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         // `-Z instrument-coverage` implies:\n-        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversable name mangling.\n+        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversible name mangling.\n         //     Note, LLVM coverage tools can analyze coverage over multiple runs, including some\n         //     changes to source code; so mangled names must be consistent across compilations.\n         //   * `-C link-dead-code` - so unexecuted code is still counted as zero, rather than be"}, {"sha": "9cdb7e966fef860d41608cca0e6a46e594cda302", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -63,7 +63,7 @@ impl GatedSpans {\n \n #[derive(Default)]\n pub struct SymbolGallery {\n-    /// All symbols occurred and their first occurrance span.\n+    /// All symbols occurred and their first occurrence span.\n     pub symbols: Lock<BTreeMap<Symbol, Span>>,\n }\n "}, {"sha": "a03ac4e1fdba1638c7f5adff9bcb76f2094db332", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -891,7 +891,7 @@ impl UseSpecializedDecodable for ExpnId {}\n \n #[derive(Default)]\n pub struct HygieneEncodeContext {\n-    /// All `SyntaxContexts` for which we have writen `SyntaxContextData` into crate metadata.\n+    /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.\n     /// This is `None` after we finish encoding `SyntaxContexts`, to ensure\n     /// that we don't accidentally try to encode any more `SyntaxContexts`\n     serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,\n@@ -961,7 +961,7 @@ pub struct HygieneDecodeContext {\n     // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current\n     // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create\n     // a new id in the global `HygieneData`. This map tracks the ID we end up picking,\n-    // so that multiple occurences of the same serialized id are decoded to the same\n+    // so that multiple occurrences of the same serialized id are decoded to the same\n     // `SyntaxContext`\n     remapped_ctxts: Lock<Vec<Option<SyntaxContext>>>,\n     // The same as `remapepd_ctxts`, but for `ExpnId`s"}, {"sha": "db8cdfc5b20d65ea7160c9b6f3bcc3637d38762f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -456,7 +456,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         //\n         // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n         //\n-        // We can take advantage of this fact to avoid performing unecessary work.\n+        // We can take advantage of this fact to avoid performing unnecessary work.\n         // If either `source` or `target` is a type variable, then any applicable impl\n         // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n         // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for"}, {"sha": "150997ee807da21abb5527548edaa0fe87111e5d", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "b78a8cbb559b4f93cf750959d2d3b0b511938d54", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "ad4ab63f265a73958be28c45a0742bdeac4a809f", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "07e25a38e458321e45704c8fb13cc2b8e9a8ccb1", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "b6b3b54cd710125ff104d9145b83c521d02cc8f2", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target hexagon-unknown-linux-musl\n+// needs-llvm-components: hexagon\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "77fd5141357e259216ff24496cf0916b7e1ae4c1", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target nvptx64-nvidia-cuda\n // compile-flags: --crate-type cdylib\n+// needs-llvm-components: nvptx\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![no_core]"}, {"sha": "b6735153b5dcf7e25939acb100ee8273a7a803fb", "filename": "src/test/assembly/asm/riscv-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target riscv64gc-unknown-linux-gnu\n // compile-flags: -C target-feature=+f\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "0ff0bf1f94982162ced5ef181d4856eb85d8f1e2", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -4,6 +4,7 @@\n //[riscv64] compile-flags: --target riscv64imac-unknown-none-elf\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n // compile-flags: -C target-feature=+d\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "1c0b77ad9c72727dc998da104d9edb9ba3958476", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,12 +1,14 @@\n // Checks if the correct annotation for the efiapi ABI is passed to llvm.\n \n-// revisions:x86_64 i686 arm\n-\n+// revisions:x86_64 i686 aarch64 arm riscv\n // min-llvm-version: 9.0\n+// needs-llvm-components: aarch64 arm riscv\n \n //[x86_64] compile-flags: --target x86_64-unknown-uefi\n //[i686] compile-flags: --target i686-unknown-linux-musl\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n //[arm] compile-flags: --target armv7r-none-eabi\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n@@ -22,6 +24,8 @@ trait Copy { }\n \n //x86_64: define win64cc void @has_efiapi\n //i686: define void @has_efiapi\n+//aarch64: define void @has_efiapi\n //arm: define void @has_efiapi\n+//riscv: define void @has_efiapi\n #[no_mangle]\n pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "6d25ca56f1488340855427af287ed4f724e0f2da", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O --target=avr-unknown-unknown --crate-type=rlib\n+// needs-llvm-components: avr\n \n // This test validates that function pointers can be stored in global variables\n // and called upon. It ensures that Rust emits function pointers in the correct"}, {"sha": "2bfcdd75e15cff94d54007075bcacc3d586c6238", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -73,15 +73,13 @@\n     */\n \n \n-\n     /* */\n \n     /*\n       Hello from offset 6\n       Space 6+2:                     compare A\n       Ogham Space Mark 6+2: compare B\n     */\n-\n     /*\u1680*/\n \n     /*"}, {"sha": "e255cd6caa8654c97021d22dc427cffe23172960", "filename": "src/test/pretty/issue-74745.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fpretty%2Fissue-74745.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fpretty%2Fissue-74745.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-74745.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -0,0 +1,5 @@\n+// ignore-tidy-trailing-newlines\n+// pretty-compare-only\n+\n+/*\n+*/\n\\ No newline at end of file"}, {"sha": "51e1af359cdcc6d42839b57679f671b40681d1d4", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -10,7 +10,7 @@\n // const-evaluator computes a value that *does* meet the conditions for\n // structural-match, but the const expression itself has abstractions (like\n // calls to const functions) that may fit better with a type-based analysis\n-// rather than a committment to a specific value.\n+// rather than a commitment to a specific value.\n \n #![warn(indirect_structural_match)]\n "}, {"sha": "b3d8610ff51730d9ef791c8fdfdff4255cdc8a7e", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,5 +1,5 @@\n // This test is from #73976. We previously did not check if a type is monomorphized\n-// before calculating its type id, which leads to the bizzare behaviour below that\n+// before calculating its type id, which leads to the bizarre behaviour below that\n // TypeId of a generic type does not match itself.\n //\n // This test case should either run-pass or be rejected at compile time."}, {"sha": "ac2d1d1ed8b733cc6cc402aef47926ec0039642a", "filename": "src/test/ui/issues/issue-37131.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags: --target=thumbv6m-none-eabi\n // ignore-arm\n+// needs-llvm-components: arm\n \n // error-pattern:target may not be installed\n fn main() { }"}, {"sha": "ddb070ddf9fae8838ac1df8fcdeeedb1a0877a4b", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n \n // compile-flags: --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n #![deny(unsafe_code)]\n #![deny(warnings)]\n #![no_std]"}, {"sha": "e6a9451a060cdfdcb741dd017e788d1331263bd0", "filename": "src/test/ui/issues/issue-50993.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --crate-type dylib --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n // build-pass\n // error-pattern: dropping unsupported crate type `dylib` for target `thumbv7em-none-eabihf`\n "}, {"sha": "02182ec299321fedb2d0593714b251f624039022", "filename": "src/test/ui/lint/issue-74883-unused-paren-baren-yield.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generator_trait)]\n+#![feature(generators)]\n+#![deny(unused_braces, unused_parens)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut x = |_| {\n+        while let Some(_) = (yield) {}\n+        while let Some(_) = {yield} {}\n+\n+        // Only warn these cases\n+        while let Some(_) = ({yield}) {} //~ ERROR: unnecessary parentheses\n+        while let Some(_) = ((yield)) {} //~ ERROR: unnecessary parentheses\n+        {{yield}}; //~ ERROR: unnecessary braces\n+        {( yield )}; //~ ERROR: unnecessary parentheses\n+\n+        // FIXME: Reduce duplicate warnings.\n+        // Perhaps we should tweak checks in `BlockRetValue`?\n+        while let Some(_) = {(yield)} {}\n+        //~^ ERROR: unnecessary braces\n+        //~| ERROR: unnecessary parentheses\n+        while let Some(_) = {{yield}} {}\n+        //~^ ERROR: unnecessary braces\n+        //~| ERROR: unnecessary braces\n+\n+        // FIXME: It'd be great if we could also warn them.\n+        ((yield));\n+        ({ yield });\n+    };\n+    let _ = Pin::new(&mut x).resume(Some(5));\n+}"}, {"sha": "267cc9e031a11f96aaa23d4891639e9db47a761e", "filename": "src/test/ui/lint/issue-74883-unused-paren-baren-yield.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-74883-unused-paren-baren-yield.stderr?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -0,0 +1,62 @@\n+error: unnecessary parentheses around `let` scrutinee expression\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:14:29\n+   |\n+LL |         while let Some(_) = ({yield}) {}\n+   |                             ^^^^^^^^^ help: remove these parentheses\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:3:24\n+   |\n+LL | #![deny(unused_braces, unused_parens)]\n+   |                        ^^^^^^^^^^^^^\n+\n+error: unnecessary parentheses around `let` scrutinee expression\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:15:29\n+   |\n+LL |         while let Some(_) = ((yield)) {}\n+   |                             ^^^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary braces around block return value\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:16:10\n+   |\n+LL |         {{yield}};\n+   |          ^^^^^^^ help: remove these braces\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:3:9\n+   |\n+LL | #![deny(unused_braces, unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary parentheses around block return value\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:17:10\n+   |\n+LL |         {( yield )};\n+   |          ^^^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary braces around `let` scrutinee expression\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:21:29\n+   |\n+LL |         while let Some(_) = {(yield)} {}\n+   |                             ^^^^^^^^^ help: remove these braces\n+\n+error: unnecessary parentheses around block return value\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:21:30\n+   |\n+LL |         while let Some(_) = {(yield)} {}\n+   |                              ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary braces around `let` scrutinee expression\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:24:29\n+   |\n+LL |         while let Some(_) = {{yield}} {}\n+   |                             ^^^^^^^^^ help: remove these braces\n+\n+error: unnecessary braces around block return value\n+  --> $DIR/issue-74883-unused-paren-baren-yield.rs:24:30\n+   |\n+LL |         while let Some(_) = {{yield}} {}\n+   |                              ^^^^^^^ help: remove these braces\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "034499145b78051dc57619c7732dce70d79692b9", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -23,7 +23,7 @@ struct _\u30d2b;\n struct __\u03c7a;\n //~^ ERROR type `__\u03c7a` should have an upper camel case name\n \n-// Besides this, we cannot have two continous underscores in the middle.\n+// Besides this, we cannot have two continuous underscores in the middle.\n \n struct \u5bf9__\u5426;\n //~^ ERROR type `\u5bf9__\u5426` should have an upper camel case name"}, {"sha": "0b52a5fde35dc8bb96108c89aad2cb7962a04f90", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -18,7 +18,7 @@ fn \u7f16\u7a0b() {}\n fn \u0426() {}\n //~^ ERROR function `\u0426` should have a snake case name\n \n-// besides this, you cannot use continous underscores in the middle\n+// besides this, you cannot use continuous underscores in the middle\n \n fn \u5206__\u9694() {}\n //~^ ERROR function `\u5206__\u9694` should have a snake case name"}, {"sha": "4f11f81b00bfab4b294036b46f8a720824a7907a", "filename": "src/test/ui/proc-macro/crt-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,4 +1,4 @@\n-// Test proc-macro crate can be built without addtional RUSTFLAGS\n+// Test proc-macro crate can be built without additional RUSTFLAGS\n // on musl target\n // override -Ctarget-feature=-crt-static from compiletest\n // compile-flags: -Ctarget-feature="}, {"sha": "f54b3f2bfe28a2f7d9debb79f04b5df486047ea3", "filename": "src/tools/clippy/tests/ui/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -149,7 +149,7 @@ fn main() {\n         1 + 2, 3 \n                 - 4, 5\n     ];\n-    // lint if it doesnt\n+    // lint if it doesn't\n     let _ = &[\n         -1\n         -4,"}, {"sha": "047fbe9da14fe08e2cfcfc1f3f8b52f2e1af2876", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::HashSet;\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n@@ -186,6 +187,17 @@ impl EarlyProps {\n             if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n                 return true;\n             }\n+            if let Some(needed_components) =\n+                config.parse_name_value_directive(line, \"needs-llvm-components\")\n+            {\n+                let components: HashSet<_> = config.llvm_components.split_whitespace().collect();\n+                if !needed_components\n+                    .split_whitespace()\n+                    .all(|needed_component| components.contains(needed_component))\n+                {\n+                    return true;\n+                }\n+            }\n             if let Some(actual_version) = config.llvm_version {\n                 if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n                     let min_version = extract_llvm_version(rest).unwrap();"}, {"sha": "940e16720f6a98fef2a4ad503819b7245e2c81ad", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e754c359c471f91263813c46c67955071716a7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=81e754c359c471f91263813c46c67955071716a7", "patch": "@@ -178,27 +178,30 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n     results\n }\n \n-fn print_diff(expected: &str, actual: &str, context_size: usize) {\n+fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n     let diff_results = make_diff(expected, actual, context_size);\n     for result in diff_results {\n         let mut line_number = result.line_number;\n         for line in result.lines {\n             match line {\n                 DiffLine::Expected(e) => {\n-                    println!(\"-\\t{}\", e);\n+                    writeln!(output, \"-\\t{}\", e).unwrap();\n                     line_number += 1;\n                 }\n                 DiffLine::Context(c) => {\n-                    println!(\"{}\\t{}\", line_number, c);\n+                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n                     line_number += 1;\n                 }\n                 DiffLine::Resulting(r) => {\n-                    println!(\"+\\t{}\", r);\n+                    writeln!(output, \"+\\t{}\", r).unwrap();\n                 }\n             }\n         }\n-        println!();\n+        writeln!(output, \"\").unwrap();\n     }\n+    output\n }\n \n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n@@ -655,8 +658,12 @@ impl<'test> TestCx<'test> {\n                  ------------------------------------------\\n\\\n                  {}\\n\\\n                  ------------------------------------------\\n\\\n-                 \\n\",\n-                expected, actual\n+                 diff:\\n\\\n+                 ------------------------------------------\\n\\\n+                 {}\\n\",\n+                expected,\n+                actual,\n+                write_diff(expected, actual, 3),\n             ));\n         }\n     }\n@@ -3227,7 +3234,7 @@ impl<'test> TestCx<'test> {\n                     }\n                     let expected_string = fs::read_to_string(&expected_file).unwrap();\n                     if dumped_string != expected_string {\n-                        print_diff(&expected_string, &dumped_string, 3);\n+                        print!(\"{}\", write_diff(&expected_string, &dumped_string, 3));\n                         panic!(\n                             \"Actual MIR output differs from expected MIR output {}\",\n                             expected_file.display()\n@@ -3452,7 +3459,7 @@ impl<'test> TestCx<'test> {\n                 println!(\"normalized {}:\\n{}\\n\", kind, actual);\n             } else {\n                 println!(\"diff of {}:\\n\", kind);\n-                print_diff(expected, actual, 3);\n+                print!(\"{}\", write_diff(expected, actual, 3));\n             }\n         }\n "}]}