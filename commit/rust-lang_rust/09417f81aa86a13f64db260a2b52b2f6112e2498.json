{"sha": "09417f81aa86a13f64db260a2b52b2f6112e2498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NDE3ZjgxYWE4NmExM2Y2NGRiMjYwYTJiNTJiMmY2MTEyZTI0OTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T01:36:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T01:36:49Z"}, "message": "Typecheck function patterns", "tree": {"sha": "4a93d30cb91d57212be19aa327a2e2d98665dbe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a93d30cb91d57212be19aa327a2e2d98665dbe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09417f81aa86a13f64db260a2b52b2f6112e2498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09417f81aa86a13f64db260a2b52b2f6112e2498", "html_url": "https://github.com/rust-lang/rust/commit/09417f81aa86a13f64db260a2b52b2f6112e2498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09417f81aa86a13f64db260a2b52b2f6112e2498/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40fed5804f523cc90389941f1a16e5ee956ce5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40fed5804f523cc90389941f1a16e5ee956ce5f", "html_url": "https://github.com/rust-lang/rust/commit/c40fed5804f523cc90389941f1a16e5ee956ce5f"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "acbd30bcb46f205c99d1e3a18a03a839f33741ee", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09417f81aa86a13f64db260a2b52b2f6112e2498/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/09417f81aa86a13f64db260a2b52b2f6112e2498/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=09417f81aa86a13f64db260a2b52b2f6112e2498", "patch": "@@ -264,11 +264,12 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n           Hashtbl.replace cx.Semant.ctxt_all_defns defn_id\n             (Semant.DEFN_slot new_slot);\n           inferred\n+      | TYPAT_fn arg_tys, Some actual ->\n+          ignore (demand_fn (Array.map (fun ty -> Some ty) arg_tys) actual);\n+          actual\n       | TYPAT_wild, Some actual -> actual\n-      | TYPAT_wild, None ->\n+      | TYPAT_fn _, None | TYPAT_wild, None ->\n           Common.err None \"can't infer any type for this slot\"\n-      | TYPAT_fn _, _ ->\n-          Common.unimpl None \"sorry, fn type patterns aren't implemented\"\n   in\n \n   let internal_check_mod_item_decl\n@@ -493,11 +494,9 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | TYPAT_ty expected, LTYPE_mono actual ->\n           demand expected actual;\n           yield_ty actual\n-      | TYPAT_fn _, LTYPE_mono _ ->\n-          (* FIXME: typecheck *)\n-          Common.unimpl\n-            None\n-            \"sorry, function type patterns aren't typechecked yet\"\n+      | TYPAT_fn arg_tys, LTYPE_mono actual ->\n+          ignore (demand_fn (Array.map (fun ty -> Some ty) arg_tys) actual);\n+          yield_ty actual\n       | TYPAT_wild, (LTYPE_poly _ as lty) ->\n           Common.err\n             None\n@@ -661,7 +660,13 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n    * returns the return type. *)\n   let check_fn (callee:Ast.lval) (args:Ast.atom array) : Ast.ty =\n     let arg_tys = Array.map check_atom args in\n-    let callee_ty = check_lval callee in\n+    let callee_ty =\n+      generic_check_lval\n+        ~mut:Ast.MUT_immutable\n+        ~deref:false\n+        (TYPAT_fn arg_tys)\n+        callee\n+    in\n     demand_fn (Array.map (fun ty -> Some ty) arg_tys) callee_ty\n   in\n "}]}