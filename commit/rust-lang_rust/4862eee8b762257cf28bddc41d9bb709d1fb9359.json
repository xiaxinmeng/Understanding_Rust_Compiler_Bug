{"sha": "4862eee8b762257cf28bddc41d9bb709d1fb9359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjJlZWU4Yjc2MjI1N2NmMjhiZGRjNDFkOWJiNzA5ZDFmYjkzNTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-15T06:50:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-08-07T03:26:21Z"}, "message": "Suggest comma when writing `println!(\"{}\" a);`", "tree": {"sha": "bbac725e00dc03816a310717106e09add7a2bde7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbac725e00dc03816a310717106e09add7a2bde7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4862eee8b762257cf28bddc41d9bb709d1fb9359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4862eee8b762257cf28bddc41d9bb709d1fb9359", "html_url": "https://github.com/rust-lang/rust/commit/4862eee8b762257cf28bddc41d9bb709d1fb9359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4862eee8b762257cf28bddc41d9bb709d1fb9359/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c78734bae8f2947a4bfdeabebeeb84ccf0b0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c78734bae8f2947a4bfdeabebeeb84ccf0b0e1", "html_url": "https://github.com/rust-lang/rust/commit/73c78734bae8f2947a4bfdeabebeeb84ccf0b0e1"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "e7e94614ac8658e1683332953703486e2139e8e6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4862eee8b762257cf28bddc41d9bb709d1fb9359", "patch": "@@ -174,7 +174,32 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    cx.span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    let mut err = cx.struct_span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+\n+    // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n+    if let Some((arg, comma_span)) = arg.add_comma() {\n+        for lhs in lhses { // try each arm's matchers\n+            let lhs_tt = match *lhs {\n+                quoted::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n+                _ => cx.span_bug(sp, \"malformed macro lhs\")\n+            };\n+            match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n+                Success(_) => {\n+                    if comma_span == DUMMY_SP {\n+                        err.note(\"you might be missing a comma\");\n+                    } else {\n+                        err.span_suggestion_short(\n+                            comma_span,\n+                            \"missing comma here\",\n+                            \",\".to_string(),\n+                        );\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+    err.emit();\n     cx.trace_macros_diag();\n     DummyResult::any(sp)\n }"}, {"sha": "ef914e8de53f3af101d4dd1058913f9176917aad", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=4862eee8b762257cf28bddc41d9bb709d1fb9359", "patch": "@@ -182,6 +182,31 @@ pub struct TokenStream {\n     kind: TokenStreamKind,\n }\n \n+impl TokenStream {\n+    /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`\n+    /// separating the two arguments with a comma for diagnostic suggestions.\n+    pub(crate) fn add_comma(&self) -> Option<(TokenStream, Span)> {\n+        // Used ot suggest if a user writes `println!(\"{}\" a);`\n+        if let TokenStreamKind::Stream(ref slice) = self.kind {\n+            if slice.len() == 2 {\n+                let comma_span = match slice[0] {\n+                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Token(sp, _)) } |\n+                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Delimited(sp, _)) } => {\n+                        sp.shrink_to_hi()\n+                    }\n+                    _ => DUMMY_SP,\n+                };\n+                let comma = TokenStream {\n+                    kind: TokenStreamKind::Tree(TokenTree::Token(comma_span, token::Comma)),\n+                };\n+                let slice = RcSlice::new(vec![slice[0].clone(), comma, slice[1].clone()]);\n+                return Some((TokenStream { kind: TokenStreamKind::Stream(slice) }, comma_span));\n+            }\n+        }\n+        None\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n enum TokenStreamKind {\n     Empty,"}, {"sha": "e69b1ff5a4db70e23b9e33021765e38870df7f16", "filename": "src/test/ui/macros/missing-comma.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs?ref=4862eee8b762257cf28bddc41d9bb709d1fb9359", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\" a);\n+    //~^ ERROR no rules expected the token `a`\n+}"}, {"sha": "cc12e43fc27bf5f88a0171c48a664ebacf5739e2", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4862eee8b762257cf28bddc41d9bb709d1fb9359/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=4862eee8b762257cf28bddc41d9bb709d1fb9359", "patch": "@@ -0,0 +1,10 @@\n+error: no rules expected the token `a`\n+  --> $DIR/missing-comma.rs:12:19\n+   |\n+LL |     println!(\"{}\" a);\n+   |                  -^\n+   |                  |\n+   |                  help: missing comma here\n+\n+error: aborting due to previous error\n+"}]}