{"sha": "1f853d25b8465e61209035393eebb765968e6173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODUzZDI1Yjg0NjVlNjEyMDkwMzUzOTNlZWJiNzY1OTY4ZTYxNzM=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-23T21:11:35Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-29T17:07:06Z"}, "message": "improve lifetime errors with implicit trait object lifetimes", "tree": {"sha": "8e8e006a1e377d13d1ec69ccfb20870de2deec6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8e006a1e377d13d1ec69ccfb20870de2deec6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f853d25b8465e61209035393eebb765968e6173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f853d25b8465e61209035393eebb765968e6173", "html_url": "https://github.com/rust-lang/rust/commit/1f853d25b8465e61209035393eebb765968e6173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f853d25b8465e61209035393eebb765968e6173/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4375c9dfdd7f31de909f6e9384bac1bf37b44da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4375c9dfdd7f31de909f6e9384bac1bf37b44da", "html_url": "https://github.com/rust-lang/rust/commit/c4375c9dfdd7f31de909f6e9384bac1bf37b44da"}], "stats": {"total": 212, "additions": 114, "deletions": 98}, "files": [{"sha": "9b3ec599062898771b8cc1171b122859f88b6bf3", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -69,7 +69,7 @@ pub enum BoundRegion {\n impl BoundRegion {\n     pub fn is_named(&self) -> bool {\n         match *self {\n-            BoundRegion::BrNamed(..) => true,\n+            BoundRegion::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n             _ => false,\n         }\n     }"}, {"sha": "907119dd2036f2bfebd4727f9939ef4d1ef51cdd", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -78,17 +78,7 @@ impl OutlivesSuggestionBuilder<'a> {\n         match name.source {\n             RegionNameSource::NamedEarlyBoundRegion(..)\n             | RegionNameSource::NamedFreeRegion(..)\n-            | RegionNameSource::Static => {\n-                // FIXME: This is a bit hacky. We should ideally have a semantic way for checking\n-                // if the name is `'_`...\n-                if name.name().with(|name| name != \"'_\") {\n-                    debug!(\"Region {:?} is suggestable\", name);\n-                    true\n-                } else {\n-                    debug!(\"Region {:?} is NOT suggestable\", name);\n-                    false\n-                }\n-            }\n+            | RegionNameSource::Static => true,\n \n             // Don't give suggestions for upvars, closure return types, or other unnamable\n             // regions.\n@@ -98,7 +88,8 @@ impl OutlivesSuggestionBuilder<'a> {\n             | RegionNameSource::MatchedAdtAndSegment(..)\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n-            | RegionNameSource::AnonRegionFromYieldTy(..) => {\n+            | RegionNameSource::AnonRegionFromYieldTy(..)\n+            | RegionNameSource::AnonRegionFromTraitObjAsync(..) => {\n                 debug!(\"Region {:?} is NOT suggestable\", name);\n                 false\n             }"}, {"sha": "519991e815b2721e3fcff69c81c95d4781326c79", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -55,7 +55,10 @@ crate enum RegionNameSource {\n     AnonRegionFromUpvar(Span, String),\n     /// The region corresponding to the return type of a closure.\n     AnonRegionFromOutput(Span, String, String),\n+    /// The region from a type yielded by a generator.\n     AnonRegionFromYieldTy(Span, String),\n+    /// An anonymous region from a trait object in an async fn.\n+    AnonRegionFromTraitObjAsync(Span),\n }\n \n /// Records region names that have been assigned before so that we can use the same ones in later\n@@ -113,7 +116,8 @@ impl RegionName {\n             RegionNameSource::MatchedAdtAndSegment(..) |\n             RegionNameSource::AnonRegionFromUpvar(..) |\n             RegionNameSource::AnonRegionFromOutput(..) |\n-            RegionNameSource::AnonRegionFromYieldTy(..) => false,\n+            RegionNameSource::AnonRegionFromYieldTy(..) |\n+            RegionNameSource::AnonRegionFromTraitObjAsync(..) => false,\n         }\n     }\n \n@@ -137,7 +141,8 @@ impl RegionName {\n             RegionNameSource::CannotMatchHirTy(span, type_name) => {\n                 diag.span_label(*span, format!(\"has type `{}`\", type_name));\n             }\n-            RegionNameSource::MatchedHirTy(span) => {\n+            RegionNameSource::MatchedHirTy(span) |\n+            RegionNameSource::AnonRegionFromTraitObjAsync(span) => {\n                 diag.span_label(\n                     *span,\n                     format!(\"let's call the lifetime of this reference `{}`\", self),\n@@ -287,11 +292,30 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(_, name) => {\n+                    // Get the span to point to, even if we don't use the name.\n                     let span = self.get_named_span(tcx, error_region, name);\n-                    Some(RegionName {\n-                        name,\n-                        source: RegionNameSource::NamedFreeRegion(span),\n-                    })\n+                    debug!(\"bound region named: {:?}, is_named: {:?}\",\n+                        name, free_region.bound_region.is_named());\n+\n+                    if free_region.bound_region.is_named() {\n+                        // A named region that is actually named.\n+                        Some(RegionName {\n+                            name,\n+                            source: RegionNameSource::NamedFreeRegion(span),\n+                        })\n+                    } else {\n+                        // If we spuriously thought that the region is named, we should let the\n+                        // system generate a true name for error messages. Currently this can\n+                        // happen if we have an elided name in a trait object used in an async fn\n+                        // for example: the compiler will generate a region named `'_`, but\n+                        // reporting such a name is not actually useful, so we synthesize a name\n+                        // for it instead.\n+                        let name = self.synthesize_region_name(renctx);\n+                        Some(RegionName {\n+                            name,\n+                            source: RegionNameSource::AnonRegionFromTraitObjAsync(span),\n+                        })\n+                    }\n                 }\n \n                 ty::BoundRegion::BrEnv => {"}, {"sha": "4ae3971e90eae7265f6637c290c25e4ecbd3db5e", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -12,12 +12,12 @@ error: lifetime may not live long enough\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here\n LL |           &'a self, foo: &dyn Foo\n-   |                          - lifetime `'_` defined here\n+   |                          - let's call the lifetime of this reference `'1`\n LL |       ) -> &dyn Foo\n LL | /     {\n LL | |         foo\n LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'_`\n+   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a63553adc5c8f5262477a42cb3d425bf6ab0995", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -2,11 +2,11 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n+   |                          -                     ^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n    |                          |\n-   |                          lifetime `'_` defined here\n+   |                          let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "b16c01de0afc1bf8b3f4902ad678b6d12d7df6e5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -10,19 +10,19 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -                         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          -                         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |\n-   |                          lifetime `'_` defined here\n-   |                          lifetime `'_` defined here\n+   |                          let's call the lifetime of this reference `'1`\n+   |                          let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -                                                ^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          -                                                ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |\n-   |                          lifetime `'_` defined here\n-   |                          lifetime `'_` defined here\n+   |                          let's call the lifetime of this reference `'1`\n+   |                          let's call the lifetime of this reference `'2`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n@@ -36,8 +36,9 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              - lifetime `'_` defined here  ^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n-   |                  |\n+   |                  --              -                             ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  |               |\n+   |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here\n \n error: aborting due to 5 previous errors"}, {"sha": "0bf7f63ca236071dfebf2ba967a60f54927cfac8", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -12,10 +12,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -\n    |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n+   |                       let's call the lifetime of this reference `'1`\n+   |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:18:48\n@@ -31,10 +31,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -\n    |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n+   |                             let's call the lifetime of this reference `'1`\n+   |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:22:57\n@@ -50,10 +50,10 @@ error: lifetime may not live long enough\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'1`\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:26:57\n@@ -69,10 +69,10 @@ error: lifetime may not live long enough\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'1`\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:30:66\n@@ -88,10 +88,10 @@ error: lifetime may not live long enough\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'1`\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:34:62\n@@ -107,10 +107,10 @@ error: lifetime may not live long enough\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -\n    |                                         |\n-   |                                         lifetime `'_` defined here\n-   |                                         lifetime `'_` defined here\n+   |                                         let's call the lifetime of this reference `'1`\n+   |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "f0987e0d033724424ce806da6f20e9945ef1bfdc", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -12,10 +12,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       -\n    |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n+   |                       let's call the lifetime of this reference `'1`\n+   |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:18:52\n@@ -31,10 +31,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             -\n    |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n+   |                             let's call the lifetime of this reference `'1`\n+   |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:22:61\n@@ -50,10 +50,10 @@ error: lifetime may not live long enough\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'1`\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:26:61\n@@ -69,10 +69,10 @@ error: lifetime may not live long enough\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'1`\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:30:70\n@@ -88,10 +88,10 @@ error: lifetime may not live long enough\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'1`\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:34:70\n@@ -107,10 +107,10 @@ error: lifetime may not live long enough\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'1`\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "5c0261c2f60d2d1158136fc80d237d6d754a66a0", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -12,10 +12,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -\n    |                               |\n-   |                               lifetime `'_` defined here\n-   |                               lifetime `'_` defined here\n+   |                               let's call the lifetime of this reference `'1`\n+   |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:16:65\n@@ -31,10 +31,10 @@ error: lifetime may not live long enough\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'1`\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:20:65\n@@ -50,10 +50,10 @@ error: lifetime may not live long enough\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'1`\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:24:74\n@@ -69,10 +69,10 @@ error: lifetime may not live long enough\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'1`\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:28:74\n@@ -88,10 +88,10 @@ error: lifetime may not live long enough\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'1`\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "440facb9be180b62c3295a888c8ad0709bb6eb98", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f853d25b8465e61209035393eebb765968e6173/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=1f853d25b8465e61209035393eebb765968e6173", "patch": "@@ -12,10 +12,10 @@ error: lifetime may not live long enough\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -\n    |                               |\n-   |                               lifetime `'_` defined here\n-   |                               lifetime `'_` defined here\n+   |                               let's call the lifetime of this reference `'1`\n+   |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:16:61\n@@ -31,10 +31,10 @@ error: lifetime may not live long enough\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'1`\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:20:61\n@@ -50,10 +50,10 @@ error: lifetime may not live long enough\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'1`\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:24:70\n@@ -69,10 +69,10 @@ error: lifetime may not live long enough\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'1`\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:28:66\n@@ -88,10 +88,10 @@ error: lifetime may not live long enough\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -\n    |                                           |\n-   |                                           lifetime `'_` defined here\n-   |                                           lifetime `'_` defined here\n+   |                                           let's call the lifetime of this reference `'1`\n+   |                                           let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 10 previous errors\n "}]}