{"sha": "0387981f2b5e41c982ec4a1b102f0c54997361ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODc5ODFmMmI1ZTQxYzk4MmVjNGExYjEwMmYwYzU0OTk3MzYxZmY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-17T17:48:40Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-11-27T16:41:50Z"}, "message": "Add --no-deps command-line argument", "tree": {"sha": "79476c42154e048897db06bceccd504c96479128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79476c42154e048897db06bceccd504c96479128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0387981f2b5e41c982ec4a1b102f0c54997361ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0387981f2b5e41c982ec4a1b102f0c54997361ff", "html_url": "https://github.com/rust-lang/rust/commit/0387981f2b5e41c982ec4a1b102f0c54997361ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0387981f2b5e41c982ec4a1b102f0c54997361ff/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ba08f391508722231566a68edda80d7061ed7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ba08f391508722231566a68edda80d7061ed7c", "html_url": "https://github.com/rust-lang/rust/commit/84ba08f391508722231566a68edda80d7061ed7c"}], "stats": {"total": 120, "additions": 104, "deletions": 16}, "files": [{"sha": "85a91cd2decd59ffdad366977375be13f2fe52a5", "filename": "clippy_workspace_tests/path_dep/Cargo.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fpath_dep%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fpath_dep%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fpath_dep%2FCargo.toml?ref=0387981f2b5e41c982ec4a1b102f0c54997361ff", "patch": "@@ -0,0 +1,3 @@\n+[package]\n+name = \"path_dep\"\n+version = \"0.1.0\""}, {"sha": "35ce524f2b10c367c0b3d71e4449f05458542261", "filename": "clippy_workspace_tests/path_dep/src/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fpath_dep%2Fsrc%2Flib.rs?ref=0387981f2b5e41c982ec4a1b102f0c54997361ff", "patch": "@@ -0,0 +1,6 @@\n+#![deny(clippy::empty_loop)]\n+\n+#[cfg(feature = \"primary_package_test\")]\n+pub fn lint_me() {\n+    loop {}\n+}"}, {"sha": "45362c11b856e3615cfa77348c12b251d127526b", "filename": "clippy_workspace_tests/subcrate/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0387981f2b5e41c982ec4a1b102f0c54997361ff/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2FCargo.toml?ref=0387981f2b5e41c982ec4a1b102f0c54997361ff", "patch": "@@ -1,3 +1,6 @@\n [package]\n name = \"subcrate\"\n version = \"0.1.0\"\n+\n+[dependencies]\n+path_dep = { path = \"../path_dep\" }"}, {"sha": "bbe9ce739368e3fd2971db453a1e299f9bab1ac8", "filename": "src/driver.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0387981f2b5e41c982ec4a1b102f0c54997361ff/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0387981f2b5e41c982ec4a1b102f0c54997361ff/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0387981f2b5e41c982ec4a1b102f0c54997361ff", "patch": "@@ -277,27 +277,34 @@ pub fn main() {\n             args.extend(vec![\"--sysroot\".into(), sys_root]);\n         };\n \n+        let mut no_deps = false;\n+        let clippy_args = env::var(\"CLIPPY_ARGS\")\n+            .unwrap_or_default()\n+            .split(\"__CLIPPY_HACKERY__\")\n+            .filter_map(|s| match s {\n+                \"\" => None,\n+                \"--no-deps\" => {\n+                    no_deps = true;\n+                    None\n+                },\n+                _ => Some(s.to_string()),\n+            })\n+            .chain(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()])\n+            .collect::<Vec<String>>();\n+\n         // this check ensures that dependencies are built but not linted and the final\n         // crate is linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\")\n-            || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_none();\n-\n-        if clippy_enabled {\n-            args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n-            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                    if s.is_empty() {\n-                        None\n-                    } else {\n-                        Some(s.to_string())\n-                    }\n-                }));\n-            }\n+        let clippy_disabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val != \"true\")\n+            || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_some()\n+            || no_deps && env::var(\"CARGO_PRIMARY_PACKAGE\").is_err();\n+\n+        if !clippy_disabled {\n+            args.extend(clippy_args);\n         }\n         let mut clippy = ClippyCallbacks;\n         let mut default = DefaultCallbacks;\n         let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n-            if clippy_enabled { &mut clippy } else { &mut default };\n+            if clippy_disabled { &mut default } else { &mut clippy };\n         rustc_driver::RunCompiler::new(&args, callbacks).run()\n     }))\n }"}, {"sha": "b166a6b7c1ffe2337e86b1ad48aea23bb6306254", "filename": "tests/dogfood.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0387981f2b5e41c982ec4a1b102f0c54997361ff/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0387981f2b5e41c982ec4a1b102f0c54997361ff/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=0387981f2b5e41c982ec4a1b102f0c54997361ff", "patch": "@@ -3,7 +3,7 @@\n #![feature(once_cell)]\n \n use std::lazy::SyncLazy;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n mod cargo;\n@@ -41,12 +41,77 @@ fn dogfood_clippy() {\n \n #[test]\n fn dogfood_subprojects() {\n+    fn test_no_deps_ignores_path_deps_in_workspaces() {\n+        fn clean(cwd: &Path, target_dir: &Path) {\n+            Command::new(\"cargo\")\n+                .current_dir(cwd)\n+                .env(\"CARGO_TARGET_DIR\", target_dir)\n+                .arg(\"clean\")\n+                .args(&[\"-p\", \"subcrate\"])\n+                .args(&[\"-p\", \"path_dep\"])\n+                .output()\n+                .unwrap();\n+        }\n+\n+        if cargo::is_rustc_test_suite() {\n+            return;\n+        }\n+        let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+        let target_dir = root.join(\"target\").join(\"dogfood\");\n+        let cwd = root.join(\"clippy_workspace_tests\");\n+\n+        // Make sure we start with a clean state\n+        clean(&cwd, &target_dir);\n+\n+        // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n+        // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+        let output = Command::new(&*CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"--no-deps\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(output.status.success());\n+\n+        // Make sure we start with a clean state\n+        clean(&cwd, &target_dir);\n+\n+        // Test that without the `--no-deps` argument, `path_dep` is linted.\n+        let output = Command::new(&*CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(!output.status.success());\n+    }\n+\n     // run clippy on remaining subprojects and fail the test if lint warnings are reported\n     if cargo::is_rustc_test_suite() {\n         return;\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n+    // NOTE: `path_dep` crate is omitted on purpose here\n     for d in &[\n         \"clippy_workspace_tests\",\n         \"clippy_workspace_tests/src\",\n@@ -72,4 +137,8 @@ fn dogfood_subprojects() {\n \n         assert!(output.status.success());\n     }\n+\n+    // NOTE: Since tests run in parallel we can't run cargo commands on the same workspace at the\n+    // same time, so we test this immediately after the dogfood for workspaces.\n+    test_no_deps_ignores_path_deps_in_workspaces();\n }"}]}