{"sha": "c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "node_id": "C_kwDOAAsO6NoAKGMxYTVlYzdmYWY2YzMyYWYyZjBhYWUxYWY0NDIwZTFiYjFhM2E3ZmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T15:04:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T15:04:10Z"}, "message": "Rollup merge of #99957 - chotchki:ip-globally-reachable_rebase, r=Mark-Simulacrum\n\nRework Ipv6Addr::is_global to check for global reachability rather than global scope - rebase\n\nRebasing of pull request #86634 off of master to try and get the feature \"ip\" stabilized.\n\nI also found a test failure in the rebase that is_global was considering the benchmark space to be globally reachable.\n\nThis is related to my other rebasing pull request #99947", "tree": {"sha": "a8181c330205de709d134d018d4a45fa2d5f18d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8181c330205de709d134d018d4a45fa2d5f18d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5rqCRBK7hj4Ov3rIwAA0NMIACwLY1rLb3J8X5jEjKGpCXKd\noJBQ3bkD8C3cwVagM7KkcnWQWVLCMNMdPoN1llMZkq6JVmm+4VFVgCFnqCt/1q1U\nOSfRB/+RkSee+eiDW68bcVmWI/AvbqlyODxiKDjVZHV90U0BGJGcbXHdtFyf9G7l\nWFWILekuW6Ex48XpMabDXiiu1kpnv+4FmiB+JehH7L4gQEbQhiUXABkBGfIcVRru\npcgrVJfMT1JSFcd3dgOYZEAj6qpPTAoYq0H9vBKZtmsP7Lrw6nIWkQNZkK3XmLCH\nSjpFM13QszG7SOuiZoK58fb1bzxBsFnDJ7bgsqPx9y7tJ7fhhgrW+K/WYz9wNDM=\n=xGrj\n-----END PGP SIGNATURE-----\n", "payload": "tree a8181c330205de709d134d018d4a45fa2d5f18d7\nparent e77c2084c682b10acbd359f448525ed96891f8d6\nparent f6590887df24f91a883da511d0a24d17ac4283e6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661180650 +0530\ncommitter GitHub <noreply@github.com> 1661180650 +0530\n\nRollup merge of #99957 - chotchki:ip-globally-reachable_rebase, r=Mark-Simulacrum\n\nRework Ipv6Addr::is_global to check for global reachability rather than global scope - rebase\n\nRebasing of pull request #86634 off of master to try and get the feature \"ip\" stabilized.\n\nI also found a test failure in the rebase that is_global was considering the benchmark space to be globally reachable.\n\nThis is related to my other rebasing pull request #99947\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "html_url": "https://github.com/rust-lang/rust/commit/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77c2084c682b10acbd359f448525ed96891f8d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77c2084c682b10acbd359f448525ed96891f8d6", "html_url": "https://github.com/rust-lang/rust/commit/e77c2084c682b10acbd359f448525ed96891f8d6"}, {"sha": "f6590887df24f91a883da511d0a24d17ac4283e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6590887df24f91a883da511d0a24d17ac4283e6", "html_url": "https://github.com/rust-lang/rust/commit/f6590887df24f91a883da511d0a24d17ac4283e6"}], "stats": {"total": 302, "additions": 217, "deletions": 85}, "files": [{"sha": "6004810655ebb65ac9c2c725eb7cb767357b1730", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 133, "deletions": 71, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "patch": "@@ -620,25 +620,31 @@ impl Ipv4Addr {\n         matches!(self.octets(), [169, 254, ..])\n     }\n \n-    /// Returns [`true`] if the address appears to be globally routable.\n-    /// See [iana-ipv4-special-registry][ipv4-sr].\n+    /// Returns [`true`] if the address appears to be globally reachable\n+    /// as specified by the [IANA IPv4 Special-Purpose Address Registry].\n+    /// Whether or not an address is practically reachable will depend on your network configuration.\n+    ///\n+    /// Most IPv4 addresses are globally reachable;\n+    /// unless they are specifically defined as *not* globally reachable.\n     ///\n-    /// The following return [`false`]:\n+    /// Non-exhaustive list of notable addresses that are not globally reachable:\n     ///\n-    /// - private addresses (see [`Ipv4Addr::is_private()`])\n-    /// - the loopback address (see [`Ipv4Addr::is_loopback()`])\n-    /// - the link-local address (see [`Ipv4Addr::is_link_local()`])\n-    /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n-    /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n-    /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n-    ///   `0.0.0.0/8` block\n-    /// - addresses reserved for future protocols, except\n-    /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n-    /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n-    /// - addresses reserved for networking devices benchmarking (see\n-    /// [`Ipv4Addr::is_benchmarking()`])\n+    /// - The [unspecified address] ([`is_unspecified`](Ipv4Addr::is_unspecified))\n+    /// - Addresses reserved for private use ([`is_private`](Ipv4Addr::is_private))\n+    /// - Addresses in the shared address space ([`is_shared`](Ipv4Addr::is_shared))\n+    /// - Loopback addresses ([`is_loopback`](Ipv4Addr::is_loopback))\n+    /// - Link-local addresses ([`is_link_local`](Ipv4Addr::is_link_local))\n+    /// - Addresses reserved for documentation ([`is_documentation`](Ipv4Addr::is_documentation))\n+    /// - Addresses reserved for benchmarking ([`is_benchmarking`](Ipv4Addr::is_benchmarking))\n+    /// - Reserved addresses ([`is_reserved`](Ipv4Addr::is_reserved))\n+    /// - The [broadcast address] ([`is_broadcast`](Ipv4Addr::is_broadcast))\n     ///\n-    /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n+    /// For the complete overview of which addresses are globally reachable, see the table at the [IANA IPv4 Special-Purpose Address Registry].\n+    ///\n+    /// [IANA IPv4 Special-Purpose Address Registry]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n+    /// [unspecified address]: Ipv4Addr::UNSPECIFIED\n+    /// [broadcast address]: Ipv4Addr::BROADCAST\n+\n     ///\n     /// # Examples\n     ///\n@@ -647,71 +653,61 @@ impl Ipv4Addr {\n     ///\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// // private addresses are not global\n+    /// // Most IPv4 addresses are globally reachable:\n+    /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n+    ///\n+    /// // However some addresses have been assigned a special meaning\n+    /// // that makes them not globally reachable. Some examples are:\n+    ///\n+    /// // The unspecified address (`0.0.0.0`)\n+    /// assert_eq!(Ipv4Addr::UNSPECIFIED.is_global(), false);\n+    ///\n+    /// // Addresses reserved for private use (`10.0.0.0/8`, `172.16.0.0/12`, 192.168.0.0/16)\n     /// assert_eq!(Ipv4Addr::new(10, 254, 0, 0).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(192, 168, 10, 65).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_global(), false);\n     ///\n-    /// // the 0.0.0.0/8 block is not global\n-    /// assert_eq!(Ipv4Addr::new(0, 1, 2, 3).is_global(), false);\n-    /// // in particular, the unspecified address is not global\n-    /// assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_global(), false);\n+    /// // Addresses in the shared address space (`100.64.0.0/10`)\n+    /// assert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n     ///\n-    /// // the loopback address is not global\n-    /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_global(), false);\n+    /// // The loopback addresses (`127.0.0.0/8`)\n+    /// assert_eq!(Ipv4Addr::LOCALHOST.is_global(), false);\n     ///\n-    /// // link local addresses are not global\n+    /// // Link-local addresses (`169.254.0.0/16`)\n     /// assert_eq!(Ipv4Addr::new(169, 254, 45, 1).is_global(), false);\n     ///\n-    /// // the broadcast address is not global\n-    /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_global(), false);\n-    ///\n-    /// // the address space designated for documentation is not global\n+    /// // Addresses reserved for documentation (`192.0.2.0/24`, `198.51.100.0/24`, `203.0.113.0/24`)\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_global(), false);\n     ///\n-    /// // shared addresses are not global\n-    /// assert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n-    ///\n-    /// // addresses reserved for protocol assignment are not global\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 0).is_global(), false);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 255).is_global(), false);\n+    /// // Addresses reserved for benchmarking (`198.18.0.0/15`)\n+    /// assert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n     ///\n-    /// // addresses reserved for future use are not global\n+    /// // Reserved addresses (`240.0.0.0/4`)\n     /// assert_eq!(Ipv4Addr::new(250, 10, 20, 30).is_global(), false);\n     ///\n-    /// // addresses reserved for network devices benchmarking are not global\n-    /// assert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n+    /// // The broadcast address (`255.255.255.255`)\n+    /// assert_eq!(Ipv4Addr::BROADCAST.is_global(), false);\n     ///\n-    /// // All the other addresses are global\n-    /// assert_eq!(Ipv4Addr::new(1, 1, 1, 1).is_global(), true);\n-    /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n+    /// // For a complete overview see the IANA IPv4 Special-Purpose Address Registry.\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n-        // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n-        // globally routable addresses in the 192.0.0.0/24 range.\n-        if u32::from_be_bytes(self.octets()) == 0xc0000009\n-            || u32::from_be_bytes(self.octets()) == 0xc000000a\n-        {\n-            return true;\n-        }\n-        !self.is_private()\n-            && !self.is_loopback()\n-            && !self.is_link_local()\n-            && !self.is_broadcast()\n-            && !self.is_documentation()\n-            && !self.is_shared()\n+        !(self.octets()[0] == 0 // \"This network\"\n+            || self.is_private()\n+            || self.is_shared()\n+            || self.is_loopback()\n+            || self.is_link_local()\n             // addresses reserved for future protocols (`192.0.0.0/24`)\n-            && !(self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0)\n-            && !self.is_reserved()\n-            && !self.is_benchmarking()\n-            // Make sure the address is not in 0.0.0.0/8\n-            && self.octets()[0] != 0\n+            ||(self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0)\n+            || self.is_documentation()\n+            || self.is_benchmarking()\n+            || self.is_reserved()\n+            || self.is_broadcast())\n     }\n \n     /// Returns [`true`] if this address is part of the Shared Address Space defined in\n@@ -1300,13 +1296,33 @@ impl Ipv6Addr {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n     }\n \n-    /// Returns [`true`] if the address appears to be globally routable.\n+    /// Returns [`true`] if the address appears to be globally reachable\n+    /// as specified by the [IANA IPv6 Special-Purpose Address Registry].\n+    /// Whether or not an address is practically reachable will depend on your network configuration.\n     ///\n-    /// The following return [`false`]:\n+    /// Most IPv6 addresses are globally reachable;\n+    /// unless they are specifically defined as *not* globally reachable.\n     ///\n-    /// - the loopback address\n-    /// - link-local and unique local unicast addresses\n-    /// - interface-, link-, realm-, admin- and site-local multicast addresses\n+    /// Non-exhaustive list of notable addresses that are not globally reachable:\n+    /// - The [unspecified address] ([`is_unspecified`](Ipv6Addr::is_unspecified))\n+    /// - The [loopback address] ([`is_loopback`](Ipv6Addr::is_loopback))\n+    /// - IPv4-mapped addresses\n+    /// - Addresses reserved for benchmarking\n+    /// - Addresses reserved for documentation ([`is_documentation`](Ipv6Addr::is_documentation))\n+    /// - Unique local addresses ([`is_unique_local`](Ipv6Addr::is_unique_local))\n+    /// - Unicast addresses with link-local scope ([`is_unicast_link_local`](Ipv6Addr::is_unicast_link_local))\n+    ///\n+    /// For the complete overview of which addresses are globally reachable, see the table at the [IANA IPv6 Special-Purpose Address Registry].\n+    ///\n+    /// Note that an address having global scope is not the same as being globally reachable,\n+    /// and there is no direct relation between the two concepts: There exist addresses with global scope\n+    /// that are not globally reachable (for example unique local addresses),\n+    /// and addresses that are globally reachable without having global scope\n+    /// (multicast addresses with non-global scope).\n+    ///\n+    /// [IANA IPv6 Special-Purpose Address Registry]: https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml\n+    /// [unspecified address]: Ipv6Addr::UNSPECIFIED\n+    /// [loopback address]: Ipv6Addr::LOCALHOST\n     ///\n     /// # Examples\n     ///\n@@ -1315,20 +1331,65 @@ impl Ipv6Addr {\n     ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_global(), true);\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_global(), false);\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n+    /// // Most IPv6 addresses are globally reachable:\n+    /// assert_eq!(Ipv6Addr::new(0x26, 0, 0x1c9, 0, 0, 0xafc8, 0x10, 0x1).is_global(), true);\n+    ///\n+    /// // However some addresses have been assigned a special meaning\n+    /// // that makes them not globally reachable. Some examples are:\n+    ///\n+    /// // The unspecified address (`::`)\n+    /// assert_eq!(Ipv6Addr::UNSPECIFIED.is_global(), false);\n+    ///\n+    /// // The loopback address (`::1`)\n+    /// assert_eq!(Ipv6Addr::LOCALHOST.is_global(), false);\n+    ///\n+    /// // IPv4-mapped addresses (`::ffff:0:0/96`)\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_global(), false);\n+    ///\n+    /// // Addresses reserved for benchmarking (`2001:2::/48`)\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 2, 0, 0, 0, 0, 0, 1,).is_global(), false);\n+    ///\n+    /// // Addresses reserved for documentation (`2001:db8::/32`)\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // Unique local addresses (`fc00::/7`)\n+    /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // Unicast addresses with link-local scope (`fe80::/10`)\n+    /// assert_eq!(Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // For a complete overview see the IANA IPv6 Special-Purpose Address Registry.\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n-        match self.multicast_scope() {\n-            Some(Ipv6MulticastScope::Global) => true,\n-            None => self.is_unicast_global(),\n-            _ => false,\n-        }\n+        !(self.is_unspecified()\n+            || self.is_loopback()\n+            // IPv4-mapped Address (`::ffff:0:0/96`)\n+            || matches!(self.segments(), [0, 0, 0, 0, 0, 0xffff, _, _])\n+            // IPv4-IPv6 Translat. (`64:ff9b:1::/48`)\n+            || matches!(self.segments(), [0x64, 0xff9b, 1, _, _, _, _, _])\n+            // Discard-Only Address Block (`100::/64`)\n+            || matches!(self.segments(), [0x100, 0, 0, 0, _, _, _, _])\n+            // IETF Protocol Assignments (`2001::/23`)\n+            || (matches!(self.segments(), [0x2001, b, _, _, _, _, _, _] if b < 0x200)\n+                && !(\n+                    // Port Control Protocol Anycast (`2001:1::1`)\n+                    u128::from_be_bytes(self.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0001\n+                    // Traversal Using Relays around NAT Anycast (`2001:1::2`)\n+                    || u128::from_be_bytes(self.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0002\n+                    // AMT (`2001:3::/32`)\n+                    || matches!(self.segments(), [0x2001, 3, _, _, _, _, _, _])\n+                    // AS112-v6 (`2001:4:112::/48`)\n+                    || matches!(self.segments(), [0x2001, 4, 0x112, _, _, _, _, _])\n+                    // ORCHIDv2 (`2001:20::/28`)\n+                    || matches!(self.segments(), [0x2001, b, _, _, _, _, _, _] if b >= 0x20 && b <= 0x2F)\n+                ))\n+            || self.is_documentation()\n+            || self.is_unique_local()\n+            || self.is_unicast_link_local())\n     }\n \n     /// Returns [`true`] if this is a unique local address (`fc00::/7`).\n@@ -1525,6 +1586,7 @@ impl Ipv6Addr {\n             && !self.is_unique_local()\n             && !self.is_unspecified()\n             && !self.is_documentation()\n+            && !self.is_benchmarking()\n     }\n \n     /// Returns the address's multicast scope if the address is multicast."}, {"sha": "7c3430b2b217c5b838e22a63bf3511e846bc0f56", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 84, "deletions": 14, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "patch": "@@ -321,15 +321,15 @@ fn ip_properties() {\n     check!(\"fe80:ffff::\");\n     check!(\"febf:ffff::\");\n     check!(\"fec0::\", global);\n-    check!(\"ff01::\", multicast);\n-    check!(\"ff02::\", multicast);\n-    check!(\"ff03::\", multicast);\n-    check!(\"ff04::\", multicast);\n-    check!(\"ff05::\", multicast);\n-    check!(\"ff08::\", multicast);\n+    check!(\"ff01::\", global | multicast);\n+    check!(\"ff02::\", global | multicast);\n+    check!(\"ff03::\", global | multicast);\n+    check!(\"ff04::\", global | multicast);\n+    check!(\"ff05::\", global | multicast);\n+    check!(\"ff08::\", global | multicast);\n     check!(\"ff0e::\", global | multicast);\n     check!(\"2001:db8:85a3::8a2e:370:7334\", doc);\n-    check!(\"2001:2::ac32:23ff:21\", global | benchmarking);\n+    check!(\"2001:2::ac32:23ff:21\", benchmarking);\n     check!(\"102:304:506:708:90a:b0c:d0e:f10\", global);\n }\n \n@@ -609,6 +609,60 @@ fn ipv6_properties() {\n \n     check!(\"1::\", &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], global | unicast_global);\n \n+    check!(\n+        \"::ffff:127.0.0.1\",\n+        &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, 0x7f, 0, 0, 1],\n+        unicast_global\n+    );\n+\n+    check!(\n+        \"64:ff9b:1::\",\n+        &[0, 0x64, 0xff, 0x9b, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        unicast_global\n+    );\n+\n+    check!(\"100::\", &[0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\"2001::\", &[0x20, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\n+        \"2001:1::1\",\n+        &[0x20, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:1::2\",\n+        &[0x20, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:3::\",\n+        &[0x20, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:4:112::\",\n+        &[0x20, 1, 0, 4, 1, 0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:20::\",\n+        &[0x20, 1, 0, 0x20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\"2001:30::\", &[0x20, 1, 0, 0x30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\n+        \"2001:200::\",\n+        &[0x20, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n     check!(\"fc00::\", &[0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unique_local);\n \n     check!(\n@@ -666,21 +720,37 @@ fn ipv6_properties() {\n     check!(\n         \"ff01::\",\n         &[0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        multicast_interface_local\n+        multicast_interface_local | global\n     );\n \n-    check!(\"ff02::\", &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_link_local);\n+    check!(\n+        \"ff02::\",\n+        &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_link_local | global\n+    );\n \n-    check!(\"ff03::\", &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_realm_local);\n+    check!(\n+        \"ff03::\",\n+        &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_realm_local | global\n+    );\n \n-    check!(\"ff04::\", &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_admin_local);\n+    check!(\n+        \"ff04::\",\n+        &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_admin_local | global\n+    );\n \n-    check!(\"ff05::\", &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_site_local);\n+    check!(\n+        \"ff05::\",\n+        &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_site_local | global\n+    );\n \n     check!(\n         \"ff08::\",\n         &[0xff, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        multicast_organization_local\n+        multicast_organization_local | global\n     );\n \n     check!(\n@@ -698,7 +768,7 @@ fn ipv6_properties() {\n     check!(\n         \"2001:2::ac32:23ff:21\",\n         &[0x20, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0xac, 0x32, 0x23, 0xff, 0, 0x21],\n-        global | unicast_global | benchmarking\n+        benchmarking\n     );\n \n     check!("}]}