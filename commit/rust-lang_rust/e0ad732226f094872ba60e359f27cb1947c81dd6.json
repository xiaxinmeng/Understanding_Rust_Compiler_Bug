{"sha": "e0ad732226f094872ba60e359f27cb1947c81dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYWQ3MzIyMjZmMDk0ODcyYmE2MGUzNTlmMjdjYjE5NDdjODFkZDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-08-29T18:24:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-29T18:24:00Z"}, "message": "Merge pull request #3105 from frewsxcv/frewsxcv-private\n\nMake clippy_lints::{utils,consts} modules private, remove unused items.", "tree": {"sha": "4e0ff0499ccbbe8a9a83f33819f3aa3b85ea704c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0ff0499ccbbe8a9a83f33819f3aa3b85ea704c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ad732226f094872ba60e359f27cb1947c81dd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbhuTACRBK7hj4Ov3rIwAAdHIIAEgi6LkxCeHEL6xtrtNQKOZ9\n8xmjJLBO5kf/Cwx71Cbvnrbyc9HsN9WpCg4qPf544DYoR+b8wO9HhhVlXyp9ZsjK\nkD/yH91UXZXvQSiz2wCs5no8XtOu43IeAQD34MpH5nHurLgFLLquf7OH82ODEaI/\njOYAT/RNlCQK5YJ6OKO7lpqTD2BCtzXI1W4KVfmWrTMpelHrWF/Y4jBFht0vwBO8\nHUMUnrhG+4+hK3RfUljnla1JYkktQJGZyd7zy1CZjU0+1HlnRsR8AFW6ZBPNhxUX\n0mdR0PPCBtJcsF6HTuvsBmZgQ+1KKjVkndNLz2rE03pzAWLEzsWCHBMyj1AXlzE=\n=pp9J\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e0ff0499ccbbe8a9a83f33819f3aa3b85ea704c\nparent 0f2eab6337350851d8eb06e2ef439a3540b85a9e\nparent d5534ca9db4f18a707ee7bc3edc1eb70647dca3b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1535567040 -0700\ncommitter GitHub <noreply@github.com> 1535567040 -0700\n\nMerge pull request #3105 from frewsxcv/frewsxcv-private\n\nMake clippy_lints::{utils,consts} modules private, remove unused items."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ad732226f094872ba60e359f27cb1947c81dd6", "html_url": "https://github.com/rust-lang/rust/commit/e0ad732226f094872ba60e359f27cb1947c81dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ad732226f094872ba60e359f27cb1947c81dd6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f2eab6337350851d8eb06e2ef439a3540b85a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eab6337350851d8eb06e2ef439a3540b85a9e", "html_url": "https://github.com/rust-lang/rust/commit/0f2eab6337350851d8eb06e2ef439a3540b85a9e"}, {"sha": "d5534ca9db4f18a707ee7bc3edc1eb70647dca3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5534ca9db4f18a707ee7bc3edc1eb70647dca3b", "html_url": "https://github.com/rust-lang/rust/commit/d5534ca9db4f18a707ee7bc3edc1eb70647dca3b"}], "stats": {"total": 455, "additions": 202, "deletions": 253}, "files": [{"sha": "f7c3342fe381667112fe6526247dc3a804a15bda", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -7,6 +7,7 @@ remark -f *.md > /dev/null\n # build clippy in debug mode and run tests\n cargo build --features debugging\n cargo test --features debugging\n+cd clippy_lints && cargo test && cd ..\n mkdir -p ~/rust/cargo/bin\n cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver"}, {"sha": "cf3ea0414daf8663fe18681d33b6f11c95cb6447", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -16,22 +16,6 @@ use syntax::ast::{FloatTy, LitKind};\n use syntax::ptr::P;\n use crate::utils::{sext, unsext, clip};\n \n-#[derive(Debug, Copy, Clone)]\n-pub enum FloatWidth {\n-    F32,\n-    F64,\n-    Any,\n-}\n-\n-impl From<FloatTy> for FloatWidth {\n-    fn from(ty: FloatTy) -> Self {\n-        match ty {\n-            FloatTy::F32 => FloatWidth::F32,\n-            FloatTy::F64 => FloatWidth::F64,\n-        }\n-    }\n-}\n-\n /// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n pub enum Constant {"}, {"sha": "8c03689df4361709c2bc8f1e8cb273862d68fef3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -48,9 +48,9 @@ macro_rules! declare_clippy_lint {\n     };\n }\n \n-pub mod consts;\n+mod consts;\n #[macro_use]\n-pub mod utils;\n+mod utils;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n pub mod approx_const;"}, {"sha": "e8a8d510fe5076ebfd64be18f3328bc0a84d4952", "filename": "clippy_lints/src/utils/camel_case.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -0,0 +1,114 @@\n+/// Return the index of the character after the first camel-case component of\n+/// `s`.\n+pub fn camel_case_until(s: &str) -> usize {\n+    let mut iter = s.char_indices();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_uppercase() {\n+            return 0;\n+        }\n+    } else {\n+        return 0;\n+    }\n+    let mut up = true;\n+    let mut last_i = 0;\n+    for (i, c) in iter {\n+        if up {\n+            if c.is_lowercase() {\n+                up = false;\n+            } else {\n+                return last_i;\n+            }\n+        } else if c.is_uppercase() {\n+            up = true;\n+            last_i = i;\n+        } else if !c.is_lowercase() {\n+            return i;\n+        }\n+    }\n+    if up {\n+        last_i\n+    } else {\n+        s.len()\n+    }\n+}\n+\n+/// Return index of the last camel-case component of `s`.\n+pub fn camel_case_from(s: &str) -> usize {\n+    let mut iter = s.char_indices().rev();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_lowercase() {\n+            return s.len();\n+        }\n+    } else {\n+        return s.len();\n+    }\n+    let mut down = true;\n+    let mut last_i = s.len();\n+    for (i, c) in iter {\n+        if down {\n+            if c.is_uppercase() {\n+                down = false;\n+                last_i = i;\n+            } else if !c.is_lowercase() {\n+                return last_i;\n+            }\n+        } else if c.is_lowercase() {\n+            down = true;\n+        } else {\n+            return last_i;\n+        }\n+    }\n+    last_i\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{camel_case_from, camel_case_until};\n+\n+    #[test]\n+    fn from_full() {\n+        assert_eq!(camel_case_from(\"AbcDef\"), 0);\n+        assert_eq!(camel_case_from(\"Abc\"), 0);\n+    }\n+\n+    #[test]\n+    fn from_partial() {\n+        assert_eq!(camel_case_from(\"abcDef\"), 3);\n+        assert_eq!(camel_case_from(\"aDbc\"), 1);\n+    }\n+\n+    #[test]\n+    fn from_not() {\n+        assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n+        assert_eq!(camel_case_from(\"AbcDD\"), 5);\n+    }\n+\n+    #[test]\n+    fn from_caps() {\n+        assert_eq!(camel_case_from(\"ABCD\"), 4);\n+    }\n+\n+    #[test]\n+    fn until_full() {\n+        assert_eq!(camel_case_until(\"AbcDef\"), 6);\n+        assert_eq!(camel_case_until(\"Abc\"), 3);\n+    }\n+\n+    #[test]\n+    fn until_not() {\n+        assert_eq!(camel_case_until(\"abcDef\"), 0);\n+        assert_eq!(camel_case_until(\"aDbc\"), 0);\n+    }\n+\n+    #[test]\n+    fn until_partial() {\n+        assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n+        assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n+        assert_eq!(camel_case_until(\"AbcDD\"), 3);\n+    }\n+\n+    #[test]\n+    fn until_caps() {\n+        assert_eq!(camel_case_until(\"ABCD\"), 0);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "f910080c229e38e739200768867b4e6f3d0d7927", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -38,28 +38,13 @@ pub enum Error {\n     Io(io::Error),\n     /// Not valid toml or doesn't fit the expected conf format\n     Toml(String),\n-    /// Type error.\n-    Type(\n-        /// The name of the key.\n-        &'static str,\n-        /// The expected type.\n-        &'static str,\n-        /// The type we got instead.\n-        &'static str,\n-    ),\n-    /// There is an unknown key is the file.\n-    UnknownKey(String),\n }\n \n impl fmt::Display for Error {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n             Error::Io(ref err) => err.fmt(f),\n             Error::Toml(ref err) => err.fmt(f),\n-            Error::Type(key, expected, got) => {\n-                write!(f, \"`{}` is expected to be a `{}` but is a `{}`\", key, expected, got)\n-            },\n-            Error::UnknownKey(ref key) => write!(f, \"unknown key `{}`\", key),\n         }\n     }\n }"}, {"sha": "650ea373d97e22ed0b915a319c199a7661d6b48f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 84, "deletions": 77, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -21,9 +21,11 @@ use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n-use syntax::ptr::P;\n use syntax::symbol::keywords;\n \n+mod camel_case;\n+pub use self::camel_case::{camel_case_from, camel_case_until};\n+\n pub mod comparisons;\n pub mod conf;\n pub mod constants;\n@@ -37,8 +39,6 @@ pub mod ptr;\n pub mod usage;\n pub use self::hir_utils::{SpanlessEq, SpanlessHash};\n \n-pub type MethodArgs = HirVec<P<Expr>>;\n-\n pub mod higher;\n \n /// Returns true if the two spans come from differing expansions (i.e. one is\n@@ -106,17 +106,6 @@ pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     }\n }\n \n-/// Check if the method call given in `expr` belongs to given type.\n-pub fn match_impl_method(cx: &LateContext<'_, '_>, expr: &Expr, path: &[&str]) -> bool {\n-    let method_call = cx.tables.type_dependent_defs()[expr.hir_id];\n-    let trt_id = cx.tcx.impl_of_method(method_call.def_id());\n-    if let Some(trt_id) = trt_id {\n-        match_def_path(cx.tcx, trt_id, path)\n-    } else {\n-        false\n-    }\n-}\n-\n /// Check if the method call given in `expr` belongs to given trait.\n pub fn match_trait_method(cx: &LateContext<'_, '_>, expr: &Expr, path: &[&str]) -> bool {\n     let method_call = cx.tables.type_dependent_defs()[expr.hir_id];\n@@ -755,69 +744,6 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n     }\n }\n \n-/// Return the index of the character after the first camel-case component of\n-/// `s`.\n-pub fn camel_case_until(s: &str) -> usize {\n-    let mut iter = s.char_indices();\n-    if let Some((_, first)) = iter.next() {\n-        if !first.is_uppercase() {\n-            return 0;\n-        }\n-    } else {\n-        return 0;\n-    }\n-    let mut up = true;\n-    let mut last_i = 0;\n-    for (i, c) in iter {\n-        if up {\n-            if c.is_lowercase() {\n-                up = false;\n-            } else {\n-                return last_i;\n-            }\n-        } else if c.is_uppercase() {\n-            up = true;\n-            last_i = i;\n-        } else if !c.is_lowercase() {\n-            return i;\n-        }\n-    }\n-    if up {\n-        last_i\n-    } else {\n-        s.len()\n-    }\n-}\n-\n-/// Return index of the last camel-case component of `s`.\n-pub fn camel_case_from(s: &str) -> usize {\n-    let mut iter = s.char_indices().rev();\n-    if let Some((_, first)) = iter.next() {\n-        if !first.is_lowercase() {\n-            return s.len();\n-        }\n-    } else {\n-        return s.len();\n-    }\n-    let mut down = true;\n-    let mut last_i = s.len();\n-    for (i, c) in iter {\n-        if down {\n-            if c.is_uppercase() {\n-                down = false;\n-                last_i = i;\n-            } else if !c.is_lowercase() {\n-                return last_i;\n-            }\n-        } else if c.is_lowercase() {\n-            down = true;\n-        } else {\n-            return last_i;\n-        }\n-    }\n-    last_i\n-}\n-\n /// Convenience function to get the return type of a function\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n@@ -1109,3 +1035,84 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_, '_, '_>, node: NodeId\n     }\n     false\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{trim_multiline, without_block_comments};\n+\n+    #[test]\n+    fn test_trim_multiline_single_line() {\n+        assert_eq!(\"\", trim_multiline(\"\".into(), false));\n+        assert_eq!(\"...\", trim_multiline(\"...\".into(), false));\n+        assert_eq!(\"...\", trim_multiline(\"    ...\".into(), false));\n+        assert_eq!(\"...\", trim_multiline(\"\\t...\".into(), false));\n+        assert_eq!(\"...\", trim_multiline(\"\\t\\t...\".into(), false));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_trim_multiline_block() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+    } else {\n+        z\n+    }\", trim_multiline(\"    if x {\n+            y\n+        } else {\n+            z\n+        }\".into(), false));\n+        assert_eq!(\"\\\n+    if x {\n+    \\ty\n+    } else {\n+    \\tz\n+    }\", trim_multiline(\"    if x {\n+        \\ty\n+        } else {\n+        \\tz\n+        }\".into(), false));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_trim_multiline_empty_line() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+\n+    } else {\n+        z\n+    }\", trim_multiline(\"    if x {\n+            y\n+\n+        } else {\n+            z\n+        }\".into(), false));\n+    }\n+\n+    #[test]\n+    fn test_without_block_comments_lines_without_block_comments() {\n+        let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+        println!(\"result: {:?}\", result);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n+        assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+        let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* one-line comment */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+        assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "3c03645cc1b39924f2cbf7bfb8cb2f4b8c162690", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -9,8 +9,6 @@ pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n-pub const BOX: [&str; 3] = [\"std\", \"boxed\", \"Box\"];\n-pub const BOX_NEW: [&str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n@@ -22,16 +20,13 @@ pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_NEW: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n pub const C_VOID: [&str; 4] = [\"std\", \"os\", \"raw\", \"c_void\"];\n pub const C_VOID_LIBC: [&str; 2] = [\"libc\", \"c_void\"];\n-pub const DEBUG_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n-pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n-pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n@@ -43,7 +38,6 @@ pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n-pub const IO_PRINT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n@@ -69,9 +63,7 @@ pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];\n pub const RANGE_FULL_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFull\"];\n-pub const RANGE_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeInclusive\"];\n pub const RANGE_INCLUSIVE_NEW: [&str; 4] = [\"core\", \"ops\", \"RangeInclusive\", \"new\"];\n-pub const RANGE_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeInclusive\"];\n pub const RANGE_INCLUSIVE_STD_NEW: [&str; 4] = [\"std\", \"ops\", \"RangeInclusive\", \"new\"];\n pub const RANGE_STD: [&str; 3] = [\"std\", \"ops\", \"Range\"];\n pub const RANGE_TO: [&str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n@@ -81,7 +73,6 @@ pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n-pub const REGEX_BYTES: [&str; 3] = [\"regex\", \"re_bytes\", \"Regex\"];\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];"}, {"sha": "8b1b8a31ac225e52e2f6b17a3e579e86527df018", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ad732226f094872ba60e359f27cb1947c81dd6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=e0ad732226f094872ba60e359f27cb1947c81dd6", "patch": "@@ -177,6 +177,7 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n+    #[allow(dead_code)]\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {\n             ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, end),"}, {"sha": "b7efbde6596a517a22a30032ff6ff0457daa654d", "filename": "tests/camel_case.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcamel_case.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -1,50 +0,0 @@\n-extern crate clippy_lints;\n-\n-use clippy_lints::utils::{camel_case_from, camel_case_until};\n-\n-#[test]\n-fn from_full() {\n-    assert_eq!(camel_case_from(\"AbcDef\"), 0);\n-    assert_eq!(camel_case_from(\"Abc\"), 0);\n-}\n-\n-#[test]\n-fn from_partial() {\n-    assert_eq!(camel_case_from(\"abcDef\"), 3);\n-    assert_eq!(camel_case_from(\"aDbc\"), 1);\n-}\n-\n-#[test]\n-fn from_not() {\n-    assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n-    assert_eq!(camel_case_from(\"AbcDD\"), 5);\n-}\n-\n-#[test]\n-fn from_caps() {\n-    assert_eq!(camel_case_from(\"ABCD\"), 4);\n-}\n-\n-#[test]\n-fn until_full() {\n-    assert_eq!(camel_case_until(\"AbcDef\"), 6);\n-    assert_eq!(camel_case_until(\"Abc\"), 3);\n-}\n-\n-#[test]\n-fn until_not() {\n-    assert_eq!(camel_case_until(\"abcDef\"), 0);\n-    assert_eq!(camel_case_until(\"aDbc\"), 0);\n-}\n-\n-#[test]\n-fn until_partial() {\n-    assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n-    assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n-    assert_eq!(camel_case_until(\"AbcDD\"), 3);\n-}\n-\n-#[test]\n-fn until_caps() {\n-    assert_eq!(camel_case_until(\"ABCD\"), 0);\n-}"}, {"sha": "a0db2e59a29ead3b367068e8d4e5259e3a784f8a", "filename": "tests/trim_multiline.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Ftrim_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Ftrim_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftrim_multiline.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -1,57 +0,0 @@\n-\n-\n-/// test the multiline-trim function\n-extern crate clippy_lints;\n-\n-use clippy_lints::utils::trim_multiline;\n-\n-#[test]\n-fn test_single_line() {\n-    assert_eq!(\"\", trim_multiline(\"\".into(), false));\n-    assert_eq!(\"...\", trim_multiline(\"...\".into(), false));\n-    assert_eq!(\"...\", trim_multiline(\"    ...\".into(), false));\n-    assert_eq!(\"...\", trim_multiline(\"\\t...\".into(), false));\n-    assert_eq!(\"...\", trim_multiline(\"\\t\\t...\".into(), false));\n-}\n-\n-#[test]\n-#[rustfmt::skip]\n-fn test_block() {\n-    assert_eq!(\"\\\n-if x {\n-    y\n-} else {\n-    z\n-}\", trim_multiline(\"    if x {\n-        y\n-    } else {\n-        z\n-    }\".into(), false));\n-    assert_eq!(\"\\\n-if x {\n-\\ty\n-} else {\n-\\tz\n-}\", trim_multiline(\"    if x {\n-    \\ty\n-    } else {\n-    \\tz\n-    }\".into(), false));\n-}\n-\n-#[test]\n-#[rustfmt::skip]\n-fn test_empty_line() {\n-    assert_eq!(\"\\\n-if x {\n-    y\n-\n-} else {\n-    z\n-}\", trim_multiline(\"    if x {\n-        y\n-\n-    } else {\n-        z\n-    }\".into(), false));\n-}"}, {"sha": "730c5cb128ffa3a89a3de1e6ce87ad4c5218cdd1", "filename": "tests/without_block_comments.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fwithout_block_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fwithout_block_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwithout_block_comments.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -1,27 +0,0 @@\n-extern crate clippy_lints;\n-use clippy_lints::utils::without_block_comments;\n-\n-#[test]\n-fn test_lines_without_block_comments() {\n-    let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n-    println!(\"result: {:?}\", result);\n-    assert!(result.is_empty());\n-\n-    let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n-    assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n-\n-    let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n-    assert!(result.is_empty());\n-\n-    let result = without_block_comments(vec![\"/* one-line comment */\"]);\n-    assert!(result.is_empty());\n-\n-    let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n-    assert!(result.is_empty());\n-\n-    let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n-    assert!(result.is_empty());\n-\n-    let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n-    assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n-}"}]}