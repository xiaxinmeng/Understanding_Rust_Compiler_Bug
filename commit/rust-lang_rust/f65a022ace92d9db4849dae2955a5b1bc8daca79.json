{"sha": "f65a022ace92d9db4849dae2955a5b1bc8daca79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWEwMjJhY2U5MmQ5ZGI0ODQ5ZGFlMjk1NWE1YjFiYzhkYWNhNzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T15:03:05Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T15:03:05Z"}, "message": "Fix #2245", "tree": {"sha": "1e85e7e7d79f21d0b241554172f5d63eb2ca1852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e85e7e7d79f21d0b241554172f5d63eb2ca1852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65a022ace92d9db4849dae2955a5b1bc8daca79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloezCkACgkQpp+NIls6\n19l4Tg//c65NyMRfFa9N5luEV438Wi/2QYmrbIrkzInHyMkv00YwLrvabgph2S4D\nwoO09tx2Nl3Xn8cBgByR97nVHb9LIE2cwVKB0pFvFJzo99B/srqKCky0N3pHhjcf\nObZfuen8N5ADDYro9iAI7u41Z8mcvstPcvZicPY/EA4LRPtnMBqYZTYeneVYqCAk\nC9dh2mAHJm+YcJmWf2p/S+6PsdFqa/4zwydv/jIay/+5lyjTslYT6iUQptV78UEK\n2hXDSRrOvg+EwrjXdb0CtvMZqXnqCotclvwtU75QKBYfXymSNLcLpFFQh4XEZs+7\nwWBeLfp1dIVSuN7gT2CIo4esPjIBaQ98xS/oqxoaQ+WzO7KY6j9+jkj71JRUlETN\nyx3ZjDc2m8RRZQ6uQ1ieQ4cUMXGI1ErUGBJS1FSWBbuWaexyVKKCdTt5aesCaXyW\nIfKgfpwkLRC7jbLXxVnsnAC7YpBOX3uFRzp7gsROfBZc8IGVYqwzAhG8F55UdOeG\nrhC+ANR2ppnrLPEe4pGUgy0Hf8vhor1WpRAc0D+MT9+7/rd1MAITVDmb5rA2R4S1\n8TWO9CL1Ctspqf8EpYPVbE6/eCGGC1TZrG6OWJt/+pL0fwSJAllfOVy+m03fknLy\nrLlM//N4x+94VR6rc2ka4XX7caRFvnj5kZpbV/NKrSnGnJG0APk=\n=ZWZD\n-----END PGP SIGNATURE-----", "payload": "tree 1e85e7e7d79f21d0b241554172f5d63eb2ca1852\nparent 0b0337d258857508995c8400272a637eec856a5a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511967785 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511967785 +0100\n\nFix #2245\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65a022ace92d9db4849dae2955a5b1bc8daca79", "html_url": "https://github.com/rust-lang/rust/commit/f65a022ace92d9db4849dae2955a5b1bc8daca79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65a022ace92d9db4849dae2955a5b1bc8daca79/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0337d258857508995c8400272a637eec856a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0337d258857508995c8400272a637eec856a5a", "html_url": "https://github.com/rust-lang/rust/commit/0b0337d258857508995c8400272a637eec856a5a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "50afd1b1e4f48ba7958a26e88d1cdd4118b30f1e", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f65a022ace92d9db4849dae2955a5b1bc8daca79/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65a022ace92d9db4849dae2955a5b1bc8daca79/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=f65a022ace92d9db4849dae2955a5b1bc8daca79", "patch": "@@ -167,8 +167,8 @@ struct SuggestContext<'a, 'tcx: 'a, 'v> {\n }\n \n impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n-    fn snip(&self, e: &Expr) -> String {\n-        snippet_opt(self.cx, e.span).expect(\"don't try to improve booleans created by macros\")\n+    fn snip(&self, e: &Expr) -> Option<String> {\n+        snippet_opt(self.cx, e.span)\n     }\n \n     fn simplify_not(&self, expr: &Expr) -> Option<String> {\n@@ -182,20 +182,20 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                     BiLe => Some(\" > \"),\n                     BiGe => Some(\" < \"),\n                     _ => None,\n-                }.map(|op| format!(\"{}{}{}\", self.snip(lhs), op, self.snip(rhs)))\n+                }.and_then(|op| Some(format!(\"{}{}{}\", self.snip(lhs)?, op, self.snip(rhs)?)))\n             },\n             ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n                 METHODS_WITH_NEGATION\n                     .iter().cloned()\n                     .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                     .find(|&(a, _)| a == path.name.as_str())\n-                    .map(|(_, neg_method)| format!(\"{}.{}()\", self.snip(&args[0]), neg_method))\n+                    .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", self.snip(&args[0])?, neg_method)))\n             },\n             _ => None,\n         }\n     }\n \n-    fn recurse(&mut self, suggestion: &Bool) {\n+    fn recurse(&mut self, suggestion: &Bool) -> Option<()> {\n         use quine_mc_cluskey::Bool::*;\n         match *suggestion {\n             True => {\n@@ -218,13 +218,13 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                         self.output.push_str(&str)\n                     } else {\n                         self.output.push('!');\n-                        let snip = self.snip(terminal);\n+                        let snip = self.snip(terminal)?;\n                         self.output.push_str(&snip);\n                     }\n                 },\n                 True | False | Not(_) => {\n                     self.output.push('!');\n-                    self.recurse(inner)\n+                    self.recurse(inner)?;\n                 },\n             },\n             And(ref v) => {\n@@ -250,10 +250,11 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }\n             },\n             Term(n) => {\n-                let snip = self.snip(self.terminals[n as usize]);\n+                let snip = self.snip(self.terminals[n as usize])?;\n                 self.output.push_str(&snip);\n             },\n         }\n+        Some(())\n     }\n }\n "}]}