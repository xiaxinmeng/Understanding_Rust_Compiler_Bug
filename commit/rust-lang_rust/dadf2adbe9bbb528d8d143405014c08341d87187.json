{"sha": "dadf2adbe9bbb528d8d143405014c08341d87187", "node_id": "C_kwDOAAsO6NoAKGRhZGYyYWRiZTliYmI1MjhkOGQxNDM0MDUwMTRjMDgzNDFkODcxODc", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-03T10:19:50Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-03T11:09:17Z"}, "message": "Rename JoinHandle::is_running to is_finished and update docs.\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "d3c4143abb4ac6f4ba8e16c07e98b6c13d83f95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c4143abb4ac6f4ba8e16c07e98b6c13d83f95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadf2adbe9bbb528d8d143405014c08341d87187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadf2adbe9bbb528d8d143405014c08341d87187", "html_url": "https://github.com/rust-lang/rust/commit/dadf2adbe9bbb528d8d143405014c08341d87187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadf2adbe9bbb528d8d143405014c08341d87187/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "html_url": "https://github.com/rust-lang/rust/commit/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "712df02de7569bc128394862e48ba18b87068b32", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dadf2adbe9bbb528d8d143405014c08341d87187/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadf2adbe9bbb528d8d143405014c08341d87187/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=dadf2adbe9bbb528d8d143405014c08341d87187", "patch": "@@ -1443,13 +1443,18 @@ impl<T> JoinHandle<T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}, {"sha": "9b2cc4cbc6e437dc936d0b7c0c45d8948d001dbb", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dadf2adbe9bbb528d8d143405014c08341d87187/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadf2adbe9bbb528d8d143405014c08341d87187/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=dadf2adbe9bbb528d8d143405014c08341d87187", "patch": "@@ -289,13 +289,18 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}]}