{"sha": "3f149a63d226cbdedd466d872677da765ada9df8", "node_id": "C_kwDOAAsO6NoAKDNmMTQ5YTYzZDIyNmNiZGVkZDQ2NmQ4NzI2NzdkYTc2NWFkYTlkZjg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-15T14:16:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-15T14:40:10Z"}, "message": "Simplify", "tree": {"sha": "f8fc106e6868cbd50623afbd834639abdfd37a0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8fc106e6868cbd50623afbd834639abdfd37a0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f149a63d226cbdedd466d872677da765ada9df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f149a63d226cbdedd466d872677da765ada9df8", "html_url": "https://github.com/rust-lang/rust/commit/3f149a63d226cbdedd466d872677da765ada9df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f149a63d226cbdedd466d872677da765ada9df8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f982c7616196b433bd65a1df1d07ee0d249701c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f982c7616196b433bd65a1df1d07ee0d249701c0", "html_url": "https://github.com/rust-lang/rust/commit/f982c7616196b433bd65a1df1d07ee0d249701c0"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "11c0a6764e9d89b745325a63537dd4dda1c10628", "filename": "crates/hir-expand/src/ast_id_map.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs?ref=3f149a63d226cbdedd466d872677da765ada9df8", "patch": "@@ -15,7 +15,7 @@ use std::{\n use la_arena::{Arena, Idx};\n use profile::Count;\n use rustc_hash::FxHasher;\n-use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n+use syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n pub struct FileAstId<N: AstNode> {\n@@ -92,18 +92,12 @@ impl AstIdMap {\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not change ids of top-level items, which helps caching.\n         bdfs(node, |it| {\n-            match_ast! {\n-                match it {\n-                    ast::Item(module_item) => {\n-                        res.alloc(module_item.syntax());\n-                        true\n-                    },\n-                    ast::BlockExpr(block) => {\n-                        res.alloc(block.syntax());\n-                        true\n-                    },\n-                    _ => false,\n-                }\n+            let kind = it.kind();\n+            if ast::Item::can_cast(kind) || ast::BlockExpr::can_cast(kind) {\n+                res.alloc(&it);\n+                true\n+            } else {\n+                false\n             }\n         });\n         res.map = hashbrown::HashMap::with_capacity_and_hasher(res.arena.len(), ());\n@@ -123,6 +117,7 @@ impl AstIdMap {\n         let raw = self.erased_ast_id(item.syntax());\n         FileAstId { raw, _ty: PhantomData }\n     }\n+\n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n         let hash = hash_ptr(&ptr);"}, {"sha": "bc97ee15c7d3030be56a04047cbace837f8261a6", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=3f149a63d226cbdedd466d872677da765ada9df8", "patch": "@@ -321,7 +321,11 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n                 ast::Item::cast(node.clone())?\n                     .attrs()\n                     .take(derive_attr_index as usize + 1)\n-                    // FIXME\n+                    // FIXME, this resolution should not be done syntactically\n+                    // derive is a proper macro now, no longer builtin\n+                    // But we do not have resolution at this stage, this means\n+                    // we need to know about all macro calls for the given ast item here\n+                    // so we require some kind of mapping...\n                     .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n                     .map(|it| it.syntax().clone())\n                     .collect()"}, {"sha": "f6b97fd5405af4b0b82e8efb26f5ce8c6dc7047b", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=3f149a63d226cbdedd466d872677da765ada9df8", "patch": "@@ -130,7 +130,6 @@ pub struct MacroDefId {\n pub enum MacroDefKind {\n     Declarative(AstId<ast::Macro>),\n     BuiltIn(BuiltinFnLikeExpander, AstId<ast::Macro>),\n-    // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n     BuiltInAttr(BuiltinAttrExpander, AstId<ast::Macro>),\n     BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n     BuiltInEager(EagerExpander, AstId<ast::Macro>),"}, {"sha": "fa2c6f09ab4beb39a9886e022ca88cb539a5de15", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f149a63d226cbdedd466d872677da765ada9df8/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3f149a63d226cbdedd466d872677da765ada9df8", "patch": "@@ -119,6 +119,8 @@ pub(crate) fn hover(\n     }\n \n     let in_attr = matches!(original_token.parent().and_then(ast::TokenTree::cast), Some(tt) if tt.syntax().ancestors().any(|it| ast::Meta::can_cast(it.kind())));\n+    // prefer descending the same token kind in attribute expansions, in normal macros text\n+    // equivalency is more important\n     let descended = if in_attr {\n         [sema.descend_into_macros_with_kind_preference(original_token.clone())].into()\n     } else {"}]}