{"sha": "3c62d90202ce3750d3278746c89f1a1d2908b6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjJkOTAyMDJjZTM3NTBkMzI3ODc0NmM4OWYxYTFkMjkwOGI2Zjk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-06T23:43:04Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T02:25:10Z"}, "message": "Reallow methods from traits that are shadowed by non-import items", "tree": {"sha": "7da6129df75dff418c96c8b8e81b844323540f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da6129df75dff418c96c8b8e81b844323540f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c62d90202ce3750d3278746c89f1a1d2908b6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c62d90202ce3750d3278746c89f1a1d2908b6f9", "html_url": "https://github.com/rust-lang/rust/commit/3c62d90202ce3750d3278746c89f1a1d2908b6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c62d90202ce3750d3278746c89f1a1d2908b6f9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7734aebeca4d2f230bdec631ffce1416740afa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7734aebeca4d2f230bdec631ffce1416740afa5", "html_url": "https://github.com/rust-lang/rust/commit/d7734aebeca4d2f230bdec631ffce1416740afa5"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "5fbe06a868f07f0d420fc5fb088f4e5b01a46673", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c62d90202ce3750d3278746c89f1a1d2908b6f9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c62d90202ce3750d3278746c89f1a1d2908b6f9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3c62d90202ce3750d3278746c89f1a1d2908b6f9", "patch": "@@ -818,6 +818,8 @@ pub struct ModuleS<'a> {\n     // entry block for `f`.\n     anonymous_children: RefCell<NodeMap<Module<'a>>>,\n \n+    shadowed_traits: RefCell<Vec<&'a NameBinding<'a>>>,\n+\n     // The number of unresolved globs that this module exports.\n     glob_count: Cell<usize>,\n \n@@ -848,6 +850,7 @@ impl<'a> ModuleS<'a> {\n             children: RefCell::new(HashMap::new()),\n             imports: RefCell::new(Vec::new()),\n             anonymous_children: RefCell::new(NodeMap()),\n+            shadowed_traits: RefCell::new(Vec::new()),\n             glob_count: Cell::new(0),\n             pub_count: Cell::new(0),\n             pub_glob_count: Cell::new(0),\n@@ -871,8 +874,19 @@ impl<'a> ModuleS<'a> {\n     // Define the name or return the existing binding if there is a collision.\n     fn try_define_child(&self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>)\n                         -> Result<(), &'a NameBinding<'a>> {\n-        self.children.borrow_mut().entry((name, ns)).or_insert_with(Default::default)\n-                                                    .try_define(binding)\n+        let mut children = self.children.borrow_mut();\n+        let resolution = children.entry((name, ns)).or_insert_with(Default::default);\n+\n+        // FIXME #31379: We can use methods from imported traits shadowed by non-import items\n+        if let Some(old_binding) = resolution.binding {\n+            if !old_binding.is_import() && binding.is_import() {\n+                if let Some(Def::Trait(_)) = binding.def() {\n+                    self.shadowed_traits.borrow_mut().push(binding);\n+                }\n+            }\n+        }\n+\n+        resolution.try_define(binding)\n     }\n \n     fn increment_outstanding_references_for(&self, name: Name, ns: Namespace) {\n@@ -3466,6 +3480,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             });\n \n+            // Look for shadowed traits.\n+            for binding in search_module.shadowed_traits.borrow().iter() {\n+                let did = binding.def().unwrap().def_id();\n+                if self.trait_item_map.contains_key(&(name, did)) {\n+                    add_trait_info(&mut found_traits, did, name);\n+                    let trait_name = self.get_trait_name(did);\n+                    self.record_use(trait_name, TypeNS, binding);\n+                }\n+            }\n+\n             match search_module.parent_link {\n                 NoParentLink | ModuleParentLink(..) => break,\n                 BlockParentLink(parent_module, _) => {"}]}