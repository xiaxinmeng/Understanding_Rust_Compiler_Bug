{"sha": "64edaec6b35ea32e8dffbe27ff123c4a090869a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWRhZWM2YjM1ZWEzMmU4ZGZmYmUyN2ZmMTIzYzRhMDkwODY5YTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-05-24T12:11:39Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-05-27T08:26:02Z"}, "message": "Always supply span to check_and_apply_linkage, sidestepping need to add `bug!`s to rustc.", "tree": {"sha": "3b796f3eb53e9f5e67a8b70a86d5322bd805668f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b796f3eb53e9f5e67a8b70a86d5322bd805668f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64edaec6b35ea32e8dffbe27ff123c4a090869a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64edaec6b35ea32e8dffbe27ff123c4a090869a8", "html_url": "https://github.com/rust-lang/rust/commit/64edaec6b35ea32e8dffbe27ff123c4a090869a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64edaec6b35ea32e8dffbe27ff123c4a090869a8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21aa149b0bc7f6321bf03f5f5df75b4d16bdb406", "url": "https://api.github.com/repos/rust-lang/rust/commits/21aa149b0bc7f6321bf03f5f5df75b4d16bdb406", "html_url": "https://github.com/rust-lang/rust/commit/21aa149b0bc7f6321bf03f5f5df75b4d16bdb406"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "23e2bfe1ad195436c9eb84df513cb3b255bbefef", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64edaec6b35ea32e8dffbe27ff123c4a090869a8/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64edaec6b35ea32e8dffbe27ff123c4a090869a8/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=64edaec6b35ea32e8dffbe27ff123c4a090869a8", "patch": "@@ -102,7 +102,7 @@ fn check_and_apply_linkage(\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n     sym: LocalInternedString,\n-    span: Option<Span>\n+    span: Span\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n     if let Some(linkage) = attrs.linkage {\n@@ -116,11 +116,7 @@ fn check_and_apply_linkage(\n         let llty2 = if let ty::RawPtr(ref mt) = ty.sty {\n             cx.layout_of(mt.ty).llvm_type(cx)\n         } else {\n-            if let Some(span) = span {\n-                cx.sess().span_fatal(span, \"must have type `*const T` or `*mut T`\")\n-            } else {\n-                bug!(\"must have type `*const T` or `*mut T`\")\n-            }\n+            cx.sess().span_fatal(span, \"must have type `*const T` or `*mut T`\")\n         };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n@@ -136,14 +132,7 @@ fn check_and_apply_linkage(\n             let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n             real_name.push_str(&sym);\n             let g2 = cx.define_global(&real_name, llty).unwrap_or_else(||{\n-                if let Some(span) = span {\n-                    cx.sess().span_fatal(\n-                        span,\n-                        &format!(\"symbol `{}` is already defined\", &sym)\n-                    )\n-                } else {\n-                    bug!(\"symbol `{}` is already defined\", &sym)\n-                }\n+                cx.sess().span_fatal(span, &format!(\"symbol `{}` is already defined\", &sym))\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n             llvm::LLVMSetInitializer(g2, g1);\n@@ -240,7 +229,7 @@ impl CodegenCx<'ll, 'tcx> {\n                     ref attrs, span, node: hir::ForeignItemKind::Static(..), ..\n                 }) => {\n                     let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n-                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, Some(span)), attrs)\n+                    (check_and_apply_linkage(&self, &fn_attrs, ty, sym, span), attrs)\n                 }\n \n                 item => bug!(\"get_static: expected static, found {:?}\", item)\n@@ -260,7 +249,8 @@ impl CodegenCx<'ll, 'tcx> {\n             debug!(\"get_static: sym={} item_attr={:?}\", sym, self.tcx.item_attrs(def_id));\n \n             let attrs = self.tcx.codegen_fn_attrs(def_id);\n-            let g = check_and_apply_linkage(&self, &attrs, ty, sym, None);\n+            let span = self.tcx.def_span(def_id);\n+            let g = check_and_apply_linkage(&self, &attrs, ty, sym, span);\n \n             // Thread-local statics in some other crate need to *always* be linked\n             // against in a thread-local fashion, so we need to be sure to apply the"}]}