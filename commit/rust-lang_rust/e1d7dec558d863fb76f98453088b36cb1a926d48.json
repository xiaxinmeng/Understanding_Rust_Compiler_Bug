{"sha": "e1d7dec558d863fb76f98453088b36cb1a926d48", "node_id": "C_kwDOAAsO6NoAKGUxZDdkZWM1NThkODYzZmI3NmY5ODQ1MzA4OGIzNmNiMWE5MjZkNDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T14:22:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T14:22:43Z"}, "message": "Auto merge of #102051 - pietroalbini:pa-bootstrap-update, r=Mark-Simulacrum\n\nUpdate bootstrap compiler to 1.65.0\n\nThis PR updates the bootstrap compiler to Rust 1.65.0, removing the various `cfg(bootstrap)`s.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "3a8cfcc9efe63d005f678b7296755f01f01d99c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8cfcc9efe63d005f678b7296755f01f01d99c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d7dec558d863fb76f98453088b36cb1a926d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7dec558d863fb76f98453088b36cb1a926d48", "html_url": "https://github.com/rust-lang/rust/commit/e1d7dec558d863fb76f98453088b36cb1a926d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7dec558d863fb76f98453088b36cb1a926d48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84946fe2412194418b838c34815b79d36b22d4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84946fe2412194418b838c34815b79d36b22d4f8", "html_url": "https://github.com/rust-lang/rust/commit/84946fe2412194418b838c34815b79d36b22d4f8"}, {"sha": "f7b0c858a5c50946537abf053549b3df98b7f76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b0c858a5c50946537abf053549b3df98b7f76a", "html_url": "https://github.com/rust-lang/rust/commit/f7b0c858a5c50946537abf053549b3df98b7f76a"}], "stats": {"total": 2063, "additions": 385, "deletions": 1678}, "files": [{"sha": "0efde1e7b212443f1879d998d795628437f759b0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3046,7 +3046,6 @@ mod size_asserts {\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 104);\n     static_assert_size!(ExprKind, 72);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Fn, 184);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);"}, {"sha": "eeb7e56e2b12448e3b465fd29cfd6c716a76b468", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -13,9 +13,7 @@\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "275ceed30d7da0cb70f93eaccb4c388ef9adb06c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -32,7 +32,6 @@\n \n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "f58fffc917200a2bcd1d605c02c58f7622b8cbf1", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -9,7 +9,6 @@\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "4580ffcc6d8be694004fcdcf3c1a673be14ee02e", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -5,7 +5,6 @@\n //! to this crate.\n \n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "a83840e10998ae594aa6f3294d53d655581644bc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "0de27d3d4070e70d83f7e784251ab15a4ec382f6", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -9,7 +9,6 @@\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "15bfa8430460fb338e0fbbc6f6bbe4759ca68ef6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(extern_types)]\n #![feature(once_cell)]\n #![feature(iter_intersperse)]"}, {"sha": "3ef9a634e18576b822989808706a069bf1f950d6", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(associated_type_bounds)]\n #![feature(strict_provenance)]"}, {"sha": "510adde62962bac35727514cbf9a57902c969865", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -784,7 +784,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\", not(bootstrap)))]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;"}, {"sha": "7a01b85381a3fc3c9866083267bf056ec29af385", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -890,8 +890,6 @@ mod size_asserts {\n     static_assert_size!(MemPlaceMeta, 24);\n     static_assert_size!(MemPlace, 40);\n     static_assert_size!(MPlaceTy<'_>, 64);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Place, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(PlaceTy<'_>, 64);\n }"}, {"sha": "7c4c7db1035b411cf29d6d832a721f1bb4fa835a", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -10,7 +10,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]"}, {"sha": "467ac401d086b3f35b21506bf2ec05167b47b548", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -13,7 +13,6 @@\n #![feature(cell_leak)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "fcd49f5d01567e8ff106784879055a26a8c3d0d3", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -5,7 +5,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "4d262ae0f5ec8ccc29e45567b6c7f1b22377332b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -7,7 +7,6 @@\n #![feature(if_let_guard)]\n #![feature(adt_const_params)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n@@ -69,7 +68,7 @@ pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n // (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\", not(bootstrap)))]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, Encodable, Decodable)]"}, {"sha": "b34de94fb7db4a43579cf08200ccf1b0399d012b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "8efb7ccc1c71c7f60fbcac255e816ed4516d7b69", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -162,7 +162,7 @@ declare_features! (\n     /// Allows capturing variables in scope using format_args!\n     (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (accepted, generic_associated_types, \"CURRENT_RUSTC_VERSION\", Some(44265), None),\n+    (accepted, generic_associated_types, \"1.65.0\", Some(44265), None),\n     /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n     (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n     /// Allows the `#[global_allocator]` attribute.\n@@ -189,9 +189,9 @@ declare_features! (\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     /// Allows `'a: { break 'a; }`.\n-    (accepted, label_break_value, \"CURRENT_RUSTC_VERSION\", Some(48594), None),\n+    (accepted, label_break_value, \"1.65.0\", Some(48594), None),\n     /// Allows `let...else` statements.\n-    (accepted, let_else, \"CURRENT_RUSTC_VERSION\", Some(87335), None),\n+    (accepted, let_else, \"1.65.0\", Some(87335), None),\n     /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     /// Allows use of `?` as the Kleene \"at most one\" operator in macros."}, {"sha": "71ad54291b2863f8b244e3b720d1fa714365194d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -341,7 +341,7 @@ declare_features! (\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n     (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n     /// Allows use of the `#[collapse_debuginfo]` attribute.\n-    (active, collapse_debuginfo, \"CURRENT_RUSTC_VERSION\", Some(100758), None),\n+    (active, collapse_debuginfo, \"1.65.0\", Some(100758), None),\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n     // Allows limiting the evaluation steps of const expressions\n@@ -387,7 +387,7 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n     /// Allows `dyn* Trait` objects.\n-    (incomplete, dyn_star, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n+    (incomplete, dyn_star, \"1.65.0\", Some(91611), None),\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n@@ -403,7 +403,7 @@ declare_features! (\n     /// Allows using `#[repr(align(...))]` on function items\n     (active, fn_align, \"1.53.0\", Some(82232), None),\n     /// Allows generators to be cloned.\n-    (active, generator_clone, \"CURRENT_RUSTC_VERSION\", Some(95360), None),\n+    (active, generator_clone, \"1.65.0\", Some(95360), None),\n     /// Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n     /// Infer generic args for both consts and types.\n@@ -484,7 +484,7 @@ declare_features! (\n     /// Allows macro attributes on expressions, statements and non-inline modules.\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n     /// Allows the use of raw-dylibs (RFC 2627).\n-    (active, raw_dylib, \"CURRENT_RUSTC_VERSION\", Some(58713), None),\n+    (active, raw_dylib, \"1.65.0\", Some(58713), None),\n     /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n     (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n     /// Allows using the `#[register_tool]` attribute.\n@@ -494,7 +494,7 @@ declare_features! (\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n-    (incomplete, return_position_impl_trait_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n+    (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n@@ -528,7 +528,7 @@ declare_features! (\n     /// not changed from prior instances of the same struct (RFC #2528)\n     (active, type_changing_struct_update, \"1.58.0\", Some(86555), None),\n     /// Enables rustc to generate code that instructs libstd to NOT ignore SIGPIPE.\n-    (active, unix_sigpipe, \"CURRENT_RUSTC_VERSION\", Some(97889), None),\n+    (active, unix_sigpipe, \"1.65.0\", Some(97889), None),\n     /// Allows unsized fn parameters.\n     (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n     /// Allows unsized rvalues at arguments and parameters."}, {"sha": "79a12801de29db5bf1d23615dd36cd28732a93ae", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -164,7 +164,7 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     (removed, reflect, \"1.0.0\", Some(27749), None, None),\n     /// Allows using the `#[register_attr]` attribute.\n-    (removed, register_attr, \"CURRENT_RUSTC_VERSION\", Some(66080), None,\n+    (removed, register_attr, \"1.65.0\", Some(66080), None,\n      Some(\"removed in favor of `#![register_tool]`\")),\n     /// Allows using the macros:\n     /// + `__diagnostic_used`"}, {"sha": "c1948052e3c513ca31bc0db03de9e7a7f5cf4550", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3520,14 +3520,11 @@ mod size_asserts {\n     static_assert_size!(FnDecl<'_>, 40);\n     static_assert_size!(ForeignItem<'_>, 72);\n     static_assert_size!(ForeignItemKind<'_>, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(GenericArg<'_>, 24);\n     static_assert_size!(GenericBound<'_>, 48);\n     static_assert_size!(Generics<'_>, 56);\n     static_assert_size!(Impl<'_>, 80);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(ImplItem<'_>, 80);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(ImplItemKind<'_>, 32);\n     static_assert_size!(Item<'_>, 80);\n     static_assert_size!(ItemKind<'_>, 48);\n@@ -3540,9 +3537,7 @@ mod size_asserts {\n     static_assert_size!(QPath<'_>, 24);\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItem<'_>, 88);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItemKind<'_>, 48);\n     static_assert_size!(Ty<'_>, 48);\n     static_assert_size!(TyKind<'_>, 32);"}, {"sha": "1c4aa420c9bf9bb59d116b0b8efa10ec484c846e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -5,7 +5,6 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_len)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "83dd9a67e61bc0f9b22325b38e6314366cb744fa", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "9753fb355308c2a0a829be4ba3224d569a8bfe7e", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(new_uninit)]\n #![feature(step_trait)]"}, {"sha": "b91c098ab03db2828718a7294dc0de51d773c5df", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -17,9 +17,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "a41a749ee68e5f240c49bbfd129301c49f4d4ab9", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(once_cell)]"}, {"sha": "4408f68dd63f3d4738363870baa6ec8507db7a70", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -34,7 +34,7 @@\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n+#![feature(min_specialization)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "36bda3e0f6bb26a115bd05db5889f8b781a9688c", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,5 +1,4 @@\n #![feature(allow_internal_unstable)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]"}, {"sha": "98cf6fef54a8ff7de77cae06948cba0318a2525b", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2,10 +2,8 @@\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(generators)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(macro_metavar_expr)]"}, {"sha": "a180706e1cf0f55d2cabdcd7a39263f8574d47b8", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -31,7 +31,6 @@\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(if_let_guard)]\n #![feature(map_first_last)]\n #![feature(negative_impls)]\n@@ -40,7 +39,6 @@\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "ee8377d1987c1ff7e54d4fab7b17f382626f7238", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1242,7 +1242,6 @@ pub enum BinOp {\n mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(AggregateKind<'_>, 40);\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);"}, {"sha": "84374a25ed85ea0128a41ef14009c5d94f870fd0", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -852,12 +852,8 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Pat<'_>, 72);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(PatKind<'_>, 56);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(Stmt<'_>, 48);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(StmtKind<'_>, 40);\n }"}, {"sha": "8236b1528c0ec1a6a586e27f8c1a7ebad5bd44f8", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -6,7 +6,6 @@\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "b471d04fd606f815bea91545683a9dedfad501ee", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n #![feature(associated_type_defaults)]\n #![feature(box_patterns)]\n #![feature(exact_size_is_empty)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "2230c3399f0f8f5022afbdc9aac1a0b3d073917c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "42781bd25f05beb0a56e31f00fa0f49434780915", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,6 +1,5 @@\n #![feature(array_windows)]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "06245380927c36c70839706e3548a845524249c9", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]"}, {"sha": "6e621b7eb5eb09c3d41870b7f5c04170100499a3", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -8,7 +8,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(try_blocks)]"}, {"sha": "41d5f54b3664f7072b619c58df5bc84e5bce6685", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]"}, {"sha": "8f6da73d1f2d205fc0d3917629bf159d53d08625", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n #![feature(assert_matches)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "583030b0e5048038f78da81bb9177992312848b1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -12,7 +12,6 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]"}, {"sha": "ad7aca3cb94947d7e8a2f4253f5df814f3a63182", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![feature(never_type)]"}, {"sha": "1f8d2336c4e58bb93ad92ec1592dad49e5f1a26c", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -14,7 +14,6 @@ Core encoding and decoding interfaces.\n #![feature(min_specialization)]\n #![feature(core_intrinsics)]\n #![feature(maybe_uninit_slice)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(new_uninit)]\n #![feature(allocator_api)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "39e871f532c4975c231de9445ff2f895cb6faf04", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,6 +1,5 @@\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "f8df4169715939695359c8d72c2c01dd23b2520e", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -15,7 +15,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(negative_impls)]\n #![feature(min_specialization)]"}, {"sha": "aaba0d7f093ae0c33b1e3f11078b157f5beffd43", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -11,7 +11,6 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "5d52aa07523012329dada901b8e2e2cebf978a0c", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -16,9 +16,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(never_type)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "0da28737f69bc9487344981c88cbd817e075fb28", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n \n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "10c18789f7476b731385062b831273932638613b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "1859473166a7890f1920edc626e78453a8115db4", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -64,9 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "f651cb02176986ef3dce8f14362e33bdab6bfe2e", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -151,7 +151,6 @@ use core::async_iter::AsyncIterator;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt;\n use core::future::Future;\n@@ -176,7 +175,6 @@ use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n #[cfg(not(no_global_oom_handling))]\n use crate::str::from_boxed_utf8_unchecked;\n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n use crate::string::String;\n #[cfg(not(no_global_oom_handling))]\n@@ -2090,7 +2088,6 @@ impl<S: ?Sized + AsyncIterator + Unpin> AsyncIterator for Box<S> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2108,7 +2105,6 @@ impl dyn Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error + Send {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2123,7 +2119,6 @@ impl dyn Error + Send {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl dyn Error + Send + Sync {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -2138,7 +2133,6 @@ impl dyn Error + Send + Sync {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n@@ -2172,7 +2166,6 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2212,7 +2205,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n@@ -2257,7 +2249,6 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n@@ -2280,7 +2271,6 @@ impl From<String> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2305,7 +2295,6 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<&str> for Box<dyn Error> {\n@@ -2328,7 +2317,6 @@ impl From<&str> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n@@ -2351,7 +2339,6 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n@@ -2373,7 +2360,6 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: core::error::Error> core::error::Error for Box<T> {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "c477c44906c97abce7164af4da82caf1a19ef295", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2,7 +2,6 @@\n // https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs\n // by matthieu-m\n use crate::alloc::{self, Layout, LayoutError};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt::{self, Debug, Display, Formatter};\n use core::marker::PhantomData;\n@@ -274,7 +273,6 @@ impl<H> WithHeader<H> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n impl<T: ?Sized + Error> Error for ThinBox<T> {\n     fn source(&self) -> Option<&(dyn Error + 'static)> {"}, {"sha": "370b58864af8f3f4f9d1d2c3af7bd054331f3c79", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -133,7 +133,6 @@ impl<'a, K: Debug + Ord, V: Debug, A: Allocator + Clone> fmt::Display\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: core::fmt::Debug + Ord, V: core::fmt::Debug> core::error::Error\n     for crate::collections::btree_map::OccupiedError<'a, K, V>"}, {"sha": "161a375736c65438e77b9e015448ec722594d436", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -153,6 +153,5 @@ trait SpecExtend<I: IntoIterator> {\n     fn spec_extend(&mut self, iter: I);\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl core::error::Error for TryReserveError {}"}, {"sha": "11bd4c4dc1ba88efbfce8199b73f48868caed155", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1122,7 +1122,6 @@ impl CStr {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl core::error::Error for NulError {\n     #[allow(deprecated)]\n@@ -1131,11 +1130,9 @@ impl core::error::Error for NulError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl core::error::Error for FromVecWithNulError {}\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl core::error::Error for IntoStringError {\n     #[allow(deprecated)]"}, {"sha": "7fde8f670a231a7cdb6bcf896776b60ebb7fb453", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -114,8 +114,8 @@\n #![feature(const_waker)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n-#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n-#![cfg_attr(not(bootstrap), feature(error_in_core))]\n+#![feature(error_generic_member_access)]\n+#![feature(error_in_core)]\n #![feature(exact_size_is_empty)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n@@ -132,7 +132,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]\n #![feature(pointer_byte_offsets)]\n-#![cfg_attr(not(bootstrap), feature(provide_any))]\n+#![feature(provide_any)]\n #![feature(ptr_internals)]\n #![feature(ptr_metadata)]\n #![feature(ptr_sub_ptr)]\n@@ -173,7 +173,6 @@\n #![cfg_attr(not(test), feature(generator_trait))]\n #![feature(hashmap_internals)]\n #![feature(lang_items)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "983376a282be585b90726739f4538c65945e5ddb", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -44,7 +44,6 @@\n \n #[cfg(not(no_global_oom_handling))]\n use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-#[cfg(not(bootstrap))]\n use core::error::Error;\n use core::fmt;\n use core::hash;\n@@ -1941,7 +1940,6 @@ impl fmt::Display for FromUtf16Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for FromUtf8Error {\n     #[allow(deprecated)]\n@@ -1950,7 +1948,6 @@ impl Error for FromUtf8Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for FromUtf16Error {\n     #[allow(deprecated)]"}, {"sha": "a5322953d49217e98cc95797f6e2be3f44f64ec7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2764,7 +2764,6 @@ fn data_offset_align(align: usize) -> usize {\n     layout.size() + layout.padding_needed_for(align)\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"arc_error\", since = \"1.52.0\")]\n impl<T: core::error::Error + ?Sized> core::error::Error for Arc<T> {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "5bb44b4085962d9dfd3ad499b3e2163cb4fcc584", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -5,7 +5,6 @@\n // Your performance intuition is useless. Run perf.\n \n use crate::cmp;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::mem::{self, ValidAlign};\n@@ -463,7 +462,6 @@ pub type LayoutErr = LayoutError;\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LayoutError;\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl Error for LayoutError {}\n "}, {"sha": "a4bf6a853a65022bc0f9863e2d351838c69ee8e9", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -21,7 +21,6 @@ pub use self::layout::LayoutErr;\n #[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n pub use self::layout::LayoutError;\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::ptr::{self, NonNull};\n@@ -34,7 +33,6 @@ use crate::ptr::{self, NonNull};\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct AllocError;\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\","}, {"sha": "b82bbf2267a963a02d470c5d03608e7bbd1cdb8d", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -7,7 +7,6 @@\n use crate::borrow::{Borrow, BorrowMut};\n use crate::cmp::Ordering;\n use crate::convert::{Infallible, TryFrom};\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::hash::{self, Hash};\n@@ -121,7 +120,6 @@ impl fmt::Display for TryFromSliceError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for TryFromSliceError {\n     #[allow(deprecated)]"}, {"sha": "11f1c30f6d55979752622d066b917c7356ef596f", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,6 +1,5 @@\n //! UTF-8 and UTF-16 decoding iterators\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -124,7 +123,6 @@ impl fmt::Display for DecodeUtf16Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for DecodeUtf16Error {\n     #[allow(deprecated)]"}, {"sha": "b34a7121631c176ecab7fd7ec4ff64b91ab10384", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -38,7 +38,6 @@ pub use self::methods::encode_utf16_raw;\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n pub use self::methods::encode_utf8_raw;\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n@@ -587,6 +586,5 @@ impl fmt::Display for TryFromCharError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n impl Error for TryFromCharError {}"}, {"sha": "c42adda8da5455e07e560add10b72e875c2def30", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -34,7 +34,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n@@ -724,7 +723,6 @@ impl fmt::Display for Infallible {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n impl Error for Infallible {\n     fn description(&self) -> &str {"}, {"sha": "12b43da5a428037bf4c39f2bdf21723ee241aedf", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -54,8 +54,6 @@\n )]\n #![allow(missing_docs)]\n \n-#[cfg(bootstrap)]\n-use crate::marker::Destruct;\n use crate::marker::DiscriminantKind;\n use crate::mem;\n \n@@ -1297,7 +1295,6 @@ extern \"rust-intrinsic\" {\n     /// any safety invariants.\n     ///\n     /// Consider using [`pointer::mask`] instead.\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n@@ -2022,17 +2019,8 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8;\n \n-    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(bootstrap)]\n-    pub fn ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;\n-\n-    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(bootstrap)]\n-    pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n-\n     /// Allocates a block of memory at compile time.\n     /// At runtime, just returns a null pointer.\n     ///\n@@ -2143,7 +2131,6 @@ extern \"rust-intrinsic\" {\n     /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n     /// which violates the principle that a `const fn` must behave the same at\n     /// compile-time and at run-time. The unsafe code in crate B is fine.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n     pub fn const_eval_select<ARG, F, G, RET>(arg: ARG, called_in_const: F, called_at_rt: G) -> RET\n     where\n@@ -2216,16 +2203,6 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n     diff >= size\n }\n \n-#[cfg(bootstrap)]\n-pub const fn ptr_guaranteed_cmp(a: *const (), b: *const ()) -> u8 {\n-    match (ptr_guaranteed_eq(a, b), ptr_guaranteed_ne(a, b)) {\n-        (false, false) => 2,\n-        (true, false) => 1,\n-        (false, true) => 0,\n-        (true, true) => unreachable!(),\n-    }\n-}\n-\n /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n /// and destination must *not* overlap.\n ///\n@@ -2484,45 +2461,3 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n         write_bytes(dst, val, count)\n     }\n }\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"const_eval_select\",\n-    issue = \"none\",\n-    reason = \"const_eval_select will never be stable\"\n-)]\n-#[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n-#[lang = \"const_eval_select\"]\n-#[rustc_do_not_const_check]\n-#[inline]\n-pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n-    arg: ARG,\n-    _called_in_const: F,\n-    called_at_rt: G,\n-) -> RET\n-where\n-    F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n-{\n-    called_at_rt.call_once(arg)\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"const_eval_select\",\n-    issue = \"none\",\n-    reason = \"const_eval_select will never be stable\"\n-)]\n-#[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n-#[lang = \"const_eval_select_ct\"]\n-pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n-    arg: ARG,\n-    called_in_const: F,\n-    _called_at_rt: G,\n-) -> RET\n-where\n-    F: ~const FnOnce<ARG, Output = RET>,\n-    G: FnOnce<ARG, Output = RET> + ~const Destruct,\n-{\n-    called_in_const.call_once(arg)\n-}"}, {"sha": "5690b5256e88c835293553d2d52f28f74758b316", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -310,7 +310,6 @@ pub mod clone;\n pub mod cmp;\n pub mod convert;\n pub mod default;\n-#[cfg(not(bootstrap))]\n pub mod error;\n pub mod marker;\n pub mod ops;"}, {"sha": "5cb5e4458cc68a18c16577d48bb16d5bd984196e", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -806,7 +806,7 @@ pub trait Destruct {}\n /// The implementation of this trait is built-in and cannot be implemented\n /// for any user type.\n #[unstable(feature = \"tuple_trait\", issue = \"none\")]\n-#[cfg_attr(not(bootstrap), lang = \"tuple_trait\")]\n+#[lang = \"tuple_trait\"]\n #[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n pub trait Tuple {}\n "}, {"sha": "3b98efff2938a104c2507aa0cfb999ac79d29b20", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -4,7 +4,7 @@\n /// any value of type `Self` are safely transmutable into a value of type `Dst`, in a given `Context`,\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[cfg_attr(not(bootstrap), lang = \"transmute_trait\")]\n+#[lang = \"transmute_trait\"]\n #[rustc_on_unimplemented(\n     message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n     label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n@@ -17,7 +17,7 @@ where\n \n /// What transmutation safety conditions shall the compiler assume that *you* are checking?\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[cfg_attr(not(bootstrap), lang = \"transmute_opts\")]\n+#[lang = \"transmute_opts\"]\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub struct Assume {\n     /// When `true`, the compiler assumes that *you* are ensuring (either dynamically or statically) that"}, {"sha": "768dd87816df763b6a1dada38760a5b10016f7d7", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n //! Error types for conversion to integral types.\n \n use crate::convert::Infallible;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -147,7 +146,6 @@ impl fmt::Display for ParseIntError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseIntError {\n     #[allow(deprecated)]\n@@ -156,7 +154,6 @@ impl Error for ParseIntError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for TryFromIntError {\n     #[allow(deprecated)]"}, {"sha": "c0be235c120bf6d65c5d22d7f60a6b9e584aa70c", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::intrinsics;\n use crate::mem;\n@@ -59,7 +58,6 @@ pub use wrapping::Wrapping;\n #[cfg(not(no_fp_fmt_parse))]\n pub use dec2flt::ParseFloatError;\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(no_fp_fmt_parse))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseFloatError {"}, {"sha": "fee4beb1e84bb029bf3a8a4c9b0573fe6ee16772", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -83,7 +83,6 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[cfg_attr(bootstrap, lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "d29ae35614c1c3b1976a0a789932ee4d280d65af", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -677,7 +677,7 @@ pub enum Bound<T> {\n impl<T> Bound<T> {\n     /// Converts from `&Bound<T>` to `Bound<&T>`.\n     #[inline]\n-    #[stable(feature = \"bound_as_ref_shared\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"bound_as_ref_shared\", since = \"1.65.0\")]\n     pub fn as_ref(&self) -> Bound<&T> {\n         match *self {\n             Included(ref x) => Included(x),"}, {"sha": "33df9e6c5cd48658868149e9a7804dd494bb4e7a", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -223,7 +223,7 @@ pub trait Try: ~const FromResidual {\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n-#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+#[rustc_on_unimplemented(\n     on(\n         all(\n             from_desugaring = \"QuestionMark\",\n@@ -302,87 +302,7 @@ pub trait Try: ~const FromResidual {\n         label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n         parent_label = \"this function should return `Result` or `Option` to accept `?`\"\n     ),\n-))]\n-#[cfg_attr(bootstrap, rustc_on_unimplemented(\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::result::Result<T, E>\",\n-            R = \"std::option::Option<std::convert::Infallible>\"\n-        ),\n-        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n-            in {ItemContext} that returns `Result`\",\n-        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `Result`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::result::Result<T, E>\",\n-        ),\n-        // There's a special error message in the trait selection code for\n-        // `From` in `?`, so this is not shown for result-in-result errors,\n-        // and thus it can be phrased more strongly than `ControlFlow`'s.\n-        message = \"the `?` operator can only be used on `Result`s \\\n-            in {ItemContext} that returns `Result`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `Result`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::option::Option<T>\",\n-            R = \"std::result::Result<T, E>\",\n-        ),\n-        message = \"the `?` operator can only be used on `Option`s, not `Result`s, \\\n-            in {ItemContext} that returns `Option`\",\n-        label = \"use `.ok()?` if you want to discard the `{R}` error information\",\n-        enclosing_scope = \"this function returns an `Option`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::option::Option<T>\",\n-        ),\n-        // `Option`-in-`Option` always works, as there's only one possible\n-        // residual, so this can also be phrased strongly.\n-        message = \"the `?` operator can only be used on `Option`s \\\n-            in {ItemContext} that returns `Option`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns an `Option`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::ops::ControlFlow<B, C>\",\n-            R = \"std::ops::ControlFlow<B, C>\",\n-        ),\n-        message = \"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n-            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `ControlFlow`\",\n-        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n-    ),\n-    on(\n-        all(\n-            from_desugaring = \"QuestionMark\",\n-            _Self = \"std::ops::ControlFlow<B, C>\",\n-            // `R` is not a `ControlFlow`, as that case was matched previously\n-        ),\n-        message = \"the `?` operator can only be used on `ControlFlow`s \\\n-            in {ItemContext} that returns `ControlFlow`\",\n-        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n-        enclosing_scope = \"this function returns a `ControlFlow`\",\n-    ),\n-    on(\n-        all(from_desugaring = \"QuestionMark\"),\n-        message = \"the `?` operator can only be used in {ItemContext} \\\n-                    that returns `Result` or `Option` \\\n-                    (or another type that implements `{FromResidual}`)\",\n-        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n-        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n-    ),\n-))]\n+)]\n #[rustc_diagnostic_item = \"FromResidual\"]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n #[const_trait]"}, {"sha": "d898108be580f3864499f9fdf2726fdca88a49e3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -98,8 +98,8 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n     /// refactored.\n-    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     pub const fn cast_mut(self) -> *mut T {\n         self as _\n     }\n@@ -568,7 +568,6 @@ impl<T: ?Sized> *const T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "543ab826c4eb90247bbf99a3641b7fc5dd3062e5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -103,8 +103,8 @@ impl<T: ?Sized> *mut T {\n     /// coercion.\n     ///\n     /// [`cast_mut`]: #method.cast_mut\n-    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     pub const fn cast_const(self) -> *const T {\n         self as _\n     }\n@@ -584,7 +584,6 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "a11b5add42ebf06d29cd6e92908927e2e28e95d9", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,6 +1,5 @@\n //! Defines utf8 error type.\n \n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt;\n \n@@ -124,7 +123,6 @@ impl fmt::Display for Utf8Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for Utf8Error {\n     #[allow(deprecated)]\n@@ -148,7 +146,6 @@ impl fmt::Display for ParseBoolError {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseBoolError {\n     #[allow(deprecated)]"}, {"sha": "fbc0fc397a5dfd0b1c41a546ba05af96bef6f970", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2642,5 +2642,4 @@ impl_fn_for_zst! {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(bootstrap))]\n impl !crate::error::Error for &str {}"}, {"sha": "5cf6ec8178928f710ff11c022271b4cac3488a48", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -58,7 +58,7 @@\n //! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n-#![stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"backtrace\", since = \"1.65.0\")]\n \n #[cfg(test)]\n mod tests;\n@@ -104,29 +104,29 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n \n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[non_exhaustive]\n #[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n     /// Capturing a backtrace is not supported, likely because it's not\n     /// implemented for the current platform.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Unsupported,\n     /// Capturing a backtrace has been disabled through either the\n     /// `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` environment variables.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Disabled,\n     /// A backtrace has been captured and the `Backtrace` should print\n     /// reasonable information when rendered.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Captured,\n }\n \n@@ -173,7 +173,7 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {\n@@ -289,7 +289,7 @@ impl Backtrace {\n     ///\n     /// To forcibly capture a backtrace regardless of environment variables, use\n     /// the `Backtrace::force_capture` function.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn capture() -> Backtrace {\n         if !Backtrace::enabled() {\n@@ -308,16 +308,16 @@ impl Backtrace {\n     /// Note that capturing a backtrace can be an expensive operation on some\n     /// platforms, so this should be used with caution in performance-sensitive\n     /// parts of code.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n         Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment\n     /// variable configuration.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"backtrace\", since = \"1.65.0\")]\n     pub const fn disabled() -> Backtrace {\n         Backtrace { inner: Inner::Disabled }\n     }\n@@ -361,7 +361,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n@@ -381,7 +381,7 @@ impl<'a> Backtrace {\n     }\n }\n \n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "d2db4bb7a46f5b0700aee34040ccce6c57d06d81", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -9,7 +9,6 @@ use crate::borrow::Borrow;\n use crate::cell::Cell;\n use crate::collections::TryReserveError;\n use crate::collections::TryReserveErrorKind;\n-#[cfg(not(bootstrap))]\n use crate::error::Error;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n@@ -2160,7 +2159,6 @@ impl<'a, K: Debug, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: fmt::Debug, V: fmt::Debug> Error for OccupiedError<'a, K, V> {\n     #[allow(deprecated)]"}, {"sha": "05f8fd8de327f2afa0444b858d3ca35085e79252", "filename": "library/std/src/error.rs", "status": "modified", "additions": 0, "deletions": 1023, "changes": 1023, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -4,242 +4,12 @@\n #[cfg(test)]\n mod tests;\n \n-#[cfg(bootstrap)]\n-use core::array;\n-#[cfg(bootstrap)]\n-use core::convert::Infallible;\n-\n-#[cfg(bootstrap)]\n-use crate::alloc::{AllocError, LayoutError};\n-#[cfg(bootstrap)]\n-use crate::any::Demand;\n-#[cfg(bootstrap)]\n-use crate::any::{Provider, TypeId};\n use crate::backtrace::Backtrace;\n-#[cfg(bootstrap)]\n-use crate::borrow::Cow;\n-#[cfg(bootstrap)]\n-use crate::cell;\n-#[cfg(bootstrap)]\n-use crate::char;\n-#[cfg(bootstrap)]\n-use crate::fmt::Debug;\n-#[cfg(bootstrap)]\n-use crate::fmt::Display;\n use crate::fmt::{self, Write};\n-#[cfg(bootstrap)]\n-use crate::io;\n-#[cfg(bootstrap)]\n-use crate::mem::transmute;\n-#[cfg(bootstrap)]\n-use crate::num;\n-#[cfg(bootstrap)]\n-use crate::str;\n-#[cfg(bootstrap)]\n-use crate::string;\n-#[cfg(bootstrap)]\n-use crate::sync::Arc;\n-#[cfg(bootstrap)]\n-use crate::time;\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::error::Error;\n \n-/// `Error` is a trait representing the basic expectations for error values,\n-/// i.e., values of type `E` in [`Result<T, E>`].\n-///\n-/// Errors must describe themselves through the [`Display`] and [`Debug`]\n-/// traits. Error messages are typically concise lowercase sentences without\n-/// trailing punctuation:\n-///\n-/// ```\n-/// let err = \"NaN\".parse::<u32>().unwrap_err();\n-/// assert_eq!(err.to_string(), \"invalid digit found in string\");\n-/// ```\n-///\n-/// Errors may provide cause information. [`Error::source()`] is generally\n-/// used when errors cross \"abstraction boundaries\". If one module must report\n-/// an error that is caused by an error from a lower-level module, it can allow\n-/// accessing that error via [`Error::source()`]. This makes it possible for the\n-/// high-level module to provide its own errors while also revealing some of the\n-/// implementation for debugging.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n-#[cfg(bootstrap)]\n-pub trait Error: Debug + Display {\n-    /// The lower-level source of this error, if any.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperError {\n-    ///     source: SuperErrorSideKick,\n-    /// }\n-    ///\n-    /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperError is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperError {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         Some(&self.source)\n-    ///     }\n-    /// }\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperErrorSideKick;\n-    ///\n-    /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperErrorSideKick is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperErrorSideKick {}\n-    ///\n-    /// fn get_super_error() -> Result<(), SuperError> {\n-    ///     Err(SuperError { source: SuperErrorSideKick })\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     match get_super_error() {\n-    ///         Err(e) => {\n-    ///             println!(\"Error: {e}\");\n-    ///             println!(\"Caused by: {}\", e.source().unwrap());\n-    ///         }\n-    ///         _ => println!(\"No error\"),\n-    ///     }\n-    /// }\n-    /// ```\n-    #[stable(feature = \"error_source\", since = \"1.30.0\")]\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        None\n-    }\n-\n-    /// Gets the `TypeId` of `self`.\n-    #[doc(hidden)]\n-    #[unstable(\n-        feature = \"error_type_id\",\n-        reason = \"this is memory-unsafe to override in user code\",\n-        issue = \"60784\"\n-    )]\n-    fn type_id(&self, _: private::Internal) -> TypeId\n-    where\n-        Self: 'static,\n-    {\n-        TypeId::of::<Self>()\n-    }\n-\n-    /// ```\n-    /// if let Err(e) = \"xc\".parse::<u32>() {\n-    ///     // Print `e` itself, no need for description().\n-    ///     eprintln!(\"Error: {e}\");\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]\n-    fn description(&self) -> &str {\n-        \"description() is deprecated; use Display\"\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(\n-        since = \"1.33.0\",\n-        note = \"replaced by Error::source, which can support downcasting\"\n-    )]\n-    #[allow(missing_docs)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        self.source()\n-    }\n-\n-    /// Provides type based access to context intended for error reports.\n-    ///\n-    /// Used in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\n-    /// references to member variables from `dyn Error` trait objects.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// #![feature(provide_any)]\n-    /// #![feature(error_generic_member_access)]\n-    /// use core::fmt;\n-    /// use core::any::Demand;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct MyBacktrace {\n-    ///     // ...\n-    /// }\n-    ///\n-    /// impl MyBacktrace {\n-    ///     fn new() -> MyBacktrace {\n-    ///         // ...\n-    ///         # MyBacktrace {}\n-    ///     }\n-    /// }\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SourceError {\n-    ///     // ...\n-    /// }\n-    ///\n-    /// impl fmt::Display for SourceError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"Example Source Error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl std::error::Error for SourceError {}\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct Error {\n-    ///     source: SourceError,\n-    ///     backtrace: MyBacktrace,\n-    /// }\n-    ///\n-    /// impl fmt::Display for Error {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"Example Error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl std::error::Error for Error {\n-    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand\n-    ///             .provide_ref::<MyBacktrace>(&self.backtrace)\n-    ///             .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n-    ///     }\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     let backtrace = MyBacktrace::new();\n-    ///     let source = SourceError {};\n-    ///     let error = Error { source, backtrace };\n-    ///     let dyn_error = &error as &dyn std::error::Error;\n-    ///     let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n-    ///\n-    ///     assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    #[allow(unused_variables)]\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {}\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-impl<'b> Provider for dyn Error + 'b {\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-        self.provide(demand)\n-    }\n-}\n-\n mod private {\n     // This is a hack to prevent `type_id` from being overridden by `Error`\n     // implementations, since that can enable unsound downcasting.\n@@ -248,799 +18,6 @@ mod private {\n     pub struct Internal;\n }\n \n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n-    /// Converts a type of [`Error`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    /// use std::mem;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct AnError;\n-    ///\n-    /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"An error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for AnError {}\n-    ///\n-    /// let an_error = AnError;\n-    /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<dyn Error>::from(an_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: E) -> Box<dyn Error + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n-    /// dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    /// use std::mem;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct AnError;\n-    ///\n-    /// impl fmt::Display for AnError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"An error\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for AnError {}\n-    ///\n-    /// unsafe impl Send for AnError {}\n-    ///\n-    /// unsafe impl Sync for AnError {}\n-    ///\n-    /// let an_error = AnError;\n-    /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<String> for Box<dyn Error + Send + Sync> {\n-    /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    #[inline]\n-    fn from(err: String) -> Box<dyn Error + Send + Sync> {\n-        struct StringError(String);\n-\n-        impl Error for StringError {\n-            #[allow(deprecated)]\n-            fn description(&self) -> &str {\n-                &self.0\n-            }\n-        }\n-\n-        impl Display for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                Display::fmt(&self.0, f)\n-            }\n-        }\n-\n-        // Purposefully skip printing \"StringError(..)\"\n-        impl Debug for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                Debug::fmt(&self.0, f)\n-            }\n-        }\n-\n-        Box::new(StringError(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<String> for Box<dyn Error> {\n-    /// Converts a [`String`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_string_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(str_err: String) -> Box<dyn Error> {\n-        let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n-        let err2: Box<dyn Error> = err1;\n-        err2\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// [`str`]: prim@str\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    #[inline]\n-    fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<&str> for Box<dyn Error> {\n-    /// Converts a [`str`] into a box of dyn [`Error`].\n-    ///\n-    /// [`str`]: prim@str\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    ///\n-    /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_str_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: &str) -> Box<dyn Error> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n-    /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    /// use std::borrow::Cow;\n-    ///\n-    /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\n-    /// assert!(\n-    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n-    /// Converts a [`Cow`] into a box of dyn [`Error`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::mem;\n-    /// use std::borrow::Cow;\n-    ///\n-    /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\n-    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n-    /// ```\n-    fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n-        From::from(String::from(err))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n-impl Error for ! {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(\n-    feature = \"allocator_api\",\n-    reason = \"the precise API and guarantees it provides may be tweaked.\",\n-    issue = \"32838\"\n-)]\n-impl Error for AllocError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-impl Error for LayoutError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for str::ParseBoolError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"failed to parse bool\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for str::Utf8Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-8: corrupt contents\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for num::ParseIntError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for num::TryFromIntError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for array::TryFromSliceError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for num::ParseFloatError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for string::FromUtf8Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-8\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for string::FromUtf16Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"invalid utf-16\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl Error for Infallible {\n-    fn description(&self) -> &str {\n-        match *self {}\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n-impl Error for char::DecodeUtf16Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"unpaired surrogate found\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n-impl Error for char::TryFromCharError {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n-impl<'a, K: Debug + Ord, V: Debug> Error\n-    for crate::collections::btree_map::OccupiedError<'a, K, V>\n-{\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"key already exists\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n-impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedError<'a, K, V> {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"key already exists\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"box_error\", since = \"1.8.0\")]\n-impl<T: Error> Error for Box<T> {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"thin_box\", issue = \"92791\")]\n-impl<T: ?Sized + crate::error::Error> crate::error::Error for crate::boxed::ThinBox<T> {\n-    fn source(&self) -> Option<&(dyn crate::error::Error + 'static)> {\n-        use core::ops::Deref;\n-        self.deref().source()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n-impl<'a, T: Error + ?Sized> Error for &'a T {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-\n-    fn provide<'b>(&'b self, demand: &mut Demand<'b>) {\n-        Error::provide(&**self, demand);\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"arc_error\", since = \"1.52.0\")]\n-impl<T: Error + ?Sized> Error for Arc<T> {\n-    #[allow(deprecated, deprecated_in_future)]\n-    fn description(&self) -> &str {\n-        Error::description(&**self)\n-    }\n-\n-    #[allow(deprecated)]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        Error::cause(&**self)\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Error::source(&**self)\n-    }\n-\n-    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-        Error::provide(&**self, demand);\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n-impl Error for fmt::Error {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"an error occurred when formatting an argument\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n-impl Error for cell::BorrowError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"already mutably borrowed\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n-impl Error for cell::BorrowMutError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"already borrowed\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for char::CharTryFromError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"converted integer out of range for `char`\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n-impl Error for char::ParseCharError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n-impl Error for alloc::collections::TryReserveError {}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-impl Error for time::FromFloatSecsError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for alloc::ffi::NulError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"nul byte found in data\"\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<alloc::ffi::NulError> for io::Error {\n-    /// Converts a [`alloc::ffi::NulError`] into a [`io::Error`].\n-    fn from(_: alloc::ffi::NulError) -> io::Error {\n-        io::const_io_error!(io::ErrorKind::InvalidInput, \"data provided contains a nul byte\")\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n-impl Error for core::ffi::FromBytesWithNulError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-impl Error for core::ffi::FromBytesUntilNulError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n-impl Error for alloc::ffi::FromVecWithNulError {}\n-\n-#[cfg(bootstrap)]\n-#[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n-impl Error for alloc::ffi::IntoStringError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"C string contained non-utf8 bytes\"\n-    }\n-\n-    fn source(&self) -> Option<&(dyn Error + 'static)> {\n-        Some(self.__source())\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl<'a> dyn Error + 'a {\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&'a self) -> Option<&'a T> {\n-        core::any::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&'a self) -> Option<T> {\n-        core::any::request_value(self)\n-    }\n-}\n-\n-// Copied from `any.rs`.\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static {\n-    /// Returns `true` if the inner type is the same as `T`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        // Get `TypeId` of the type this function is instantiated with.\n-        let t = TypeId::of::<T>();\n-\n-        // Get `TypeId` of the type in the trait object (`self`).\n-        let concrete = self.type_id(private::Internal);\n-\n-        // Compare both `TypeId`s on equality.\n-        t == concrete\n-    }\n-\n-    /// Returns some reference to the inner value if it is of type `T`, or\n-    /// `None` if it isn't.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        if self.is::<T>() {\n-            unsafe { Some(&*(self as *const dyn Error as *const T)) }\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Returns some mutable reference to the inner value if it is of type `T`, or\n-    /// `None` if it isn't.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        if self.is::<T>() {\n-            unsafe { Some(&mut *(self as *mut dyn Error as *mut T)) }\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static + Send {\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        <dyn Error + 'static>::is::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::downcast_ref::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <dyn Error + 'static>::downcast_mut::<T>(self)\n-    }\n-\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error>::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error>::request_value(self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + 'static + Send + Sync {\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn is<T: Error + 'static>(&self) -> bool {\n-        <dyn Error + 'static>::is::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::downcast_ref::<T>(self)\n-    }\n-\n-    /// Forwards to the method defined on the type `dyn Error`.\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    #[inline]\n-    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <dyn Error + 'static>::downcast_mut::<T>(self)\n-    }\n-\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error>::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error>::request_value(self)\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                let raw: *mut dyn Error = Box::into_raw(self);\n-                Ok(Box::from_raw(raw as *mut T))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-\n-    /// Returns an iterator starting with the current error and continuing with\n-    /// recursively calling [`Error::source`].\n-    ///\n-    /// If you want to omit the current error and only use its sources,\n-    /// use `skip(1)`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(error_iter)]\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct A;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct B(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"A\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"B\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for A {}\n-    ///\n-    /// impl Error for B {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// let b = B(Some(Box::new(A)));\n-    ///\n-    /// // let err : Box<Error> = b.into(); // or\n-    /// let err = &b as &(dyn Error);\n-    ///\n-    /// let mut iter = err.sources();\n-    ///\n-    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n-    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n-    /// assert!(iter.next().is_none());\n-    /// assert!(iter.next().is_none());\n-    /// ```\n-    #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-    #[inline]\n-    pub fn sources(&self) -> Sources<'_> {\n-        // You may think this method would be better in the Error trait, and you'd be right.\n-        // Unfortunately that doesn't work, not because of the object safety rules but because we\n-        // save a reference to self in Sources below as a trait object. If this method was\n-        // declared in Error, then self would have the type &T where T is some concrete type which\n-        // implements Error. We would need to coerce self to have type &dyn Error, but that requires\n-        // that Self has a known size (i.e., Self: Sized). We can't put that bound on Error\n-        // since that would forbid Error trait objects, and we can't put that bound on the method\n-        // because that means the method can't be called on trait objects (we'd also need the\n-        // 'static bound, but that isn't allowed because methods with bounds on Self other than\n-        // Sized are not object-safe). Requiring an Unsize bound is not backwards compatible.\n-\n-        Sources { current: Some(self) }\n-    }\n-}\n-\n-/// An iterator over an [`Error`] and its sources.\n-///\n-/// If you want to omit the initial error and only process\n-/// its sources, use `skip(1)`.\n-#[unstable(feature = \"error_iter\", issue = \"58520\")]\n-#[derive(Clone, Debug)]\n-#[cfg(bootstrap)]\n-pub struct Sources<'a> {\n-    current: Option<&'a (dyn Error + 'static)>,\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"error_iter\", issue = \"58520\")]\n-impl<'a> Iterator for Sources<'a> {\n-    type Item = &'a (dyn Error + 'static);\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        let current = self.current;\n-        self.current = self.current.and_then(Error::source);\n-        current\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + Send {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error + Send>> {\n-        let err: Box<dyn Error> = self;\n-        <dyn Error>::downcast(err).map_err(|s| unsafe {\n-            // Reapply the `Send` marker.\n-            transmute::<Box<dyn Error>, Box<dyn Error + Send>>(s)\n-        })\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl dyn Error + Send + Sync {\n-    #[inline]\n-    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n-    /// Attempts to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Self>> {\n-        let err: Box<dyn Error> = self;\n-        <dyn Error>::downcast(err).map_err(|s| unsafe {\n-            // Reapply the `Send + Sync` marker.\n-            transmute::<Box<dyn Error>, Box<dyn Error + Send + Sync>>(s)\n-        })\n-    }\n-}\n-\n /// An error reporter that prints an error and its sources.\n ///\n /// Report also exposes configuration options for formatting the error sources, either entirely on a"}, {"sha": "feb3fb989a7ac80621c1543900a1b28b1b3de319", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -76,7 +76,6 @@ impl fmt::Debug for Error {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<alloc::ffi::NulError> for Error {\n     /// Converts a [`alloc::ffi::NulError`] into a [`Error`]."}, {"sha": "eeace2c43c4a4240c5225fa78c0c6c26f478897d", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1045,7 +1045,7 @@ pub trait Read {\n ///     Ok(())\n /// }\n /// ```\n-#[stable(feature = \"io_read_to_string\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"io_read_to_string\", since = \"1.65.0\")]\n pub fn read_to_string<R: Read>(mut reader: R) -> Result<String> {\n     let mut buf = String::new();\n     reader.read_to_string(&mut buf)?;"}, {"sha": "c2b7a4d8648d06ae060a0ed2708c391bf4c161f6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -252,10 +252,8 @@\n #![feature(dropck_eyepatch)]\n #![feature(exhaustive_patterns)]\n #![feature(intra_doc_pointers)]\n-#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(lang_items)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(linkage)]\n #![feature(link_cfg)]\n #![feature(min_specialization)]\n@@ -282,9 +280,9 @@\n #![feature(cstr_internals)]\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]\n-#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n-#![cfg_attr(not(bootstrap), feature(error_in_core))]\n-#![cfg_attr(not(bootstrap), feature(error_iter))]\n+#![feature(error_generic_member_access)]\n+#![feature(error_in_core)]\n+#![feature(error_iter)]\n #![feature(exact_size_is_empty)]\n #![feature(exclusive_wrapper)]\n #![feature(extend_one)]"}, {"sha": "b8bcdbece0af3d0ed522626b4333173367cc602c", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -160,15 +160,12 @@ fn lang_start<T: crate::process::Termination + 'static>(\n     main: fn() -> T,\n     argc: isize,\n     argv: *const *const u8,\n-    #[cfg(not(bootstrap))] sigpipe: u8,\n+    sigpipe: u8,\n ) -> isize {\n     let Ok(v) = lang_start_internal(\n         &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report().to_i32(),\n         argc,\n         argv,\n-        #[cfg(bootstrap)]\n-        2, // Temporary inlining of sigpipe::DEFAULT until bootstrap stops being special\n-        #[cfg(not(bootstrap))]\n         sigpipe,\n     );\n     v"}, {"sha": "c83490316b657ae9e3b5ee620b697e0ac4cff68b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -198,6 +198,7 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     (None, \"bootstrap\", None),\n     (Some(Mode::Rustc), \"parallel_compiler\", None),\n     (Some(Mode::ToolRustc), \"parallel_compiler\", None),\n+    (Some(Mode::Codegen), \"parallel_compiler\", None),\n     (Some(Mode::Std), \"stdarch_intel_sde\", None),\n     (Some(Mode::Std), \"no_fp_fmt_parse\", None),\n     (Some(Mode::Std), \"no_global_oom_handling\", None),"}, {"sha": "f06d2cf108de30c05527bb4a1f6285ab16a6caa1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -2535,7 +2535,6 @@ mod size_asserts {\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(GenericArg, 56);\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);"}, {"sha": "23e3de45fa5106f322b0963057110f594f9309d1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -9,14 +9,12 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(test)]\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n-#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "72308d50c8ebe367197bfd80363df74e9f5f57a7", "filename": "src/stage0.json", "status": "modified", "additions": 338, "deletions": 338, "changes": 676, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -17,349 +17,349 @@\n     \"tool is executed.\"\n   ],\n   \"compiler\": {\n-    \"date\": \"2022-08-19\",\n+    \"date\": \"2022-09-20\",\n     \"version\": \"beta\"\n   },\n   \"rustfmt\": {\n-    \"date\": \"2022-08-20\",\n+    \"date\": \"2022-09-20\",\n     \"version\": \"nightly\"\n   },\n   \"checksums_sha256\": {\n-    \"dist/2022-08-19/cargo-beta-aarch64-apple-darwin.tar.gz\": \"79196736248e8e0f76a5d365a45fda39d5bdd815f0f2a8e4341acba31b183a22\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-apple-darwin.tar.xz\": \"2cad3b28e9ee50c01d031b9c0086f40ccc16845ff2496e91fb1adebc8560b1ec\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"c725c27d06a4201df716f50509651cf071708fc0860e2d482a8dcc7dc69011bc\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"f5e1c07a8043d5e94c0450e896069262f825fa534c7688465fb0e50424b052ab\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"4f07b76c98206ade5b18a89af56004adae0abd51be1c295f6725b6b24bd2dfa1\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"9ef70808f78032f2d2f60c529dd43354752df510e7eb9d7db09abc34898a0243\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"8c3fa219aad16a2c7a2858844bc3e9b39d2382907b5a145a21d88001d082b510\",\n-    \"dist/2022-08-19/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"60f18159e805894e5504d84999a33396cb27d32d2827ee6b903ed9efab5ae3e7\",\n-    \"dist/2022-08-19/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"66ae9ea36d30e5e027e452b5e4e76e7deaa0d5f7c601b781c02559a99e5a888b\",\n-    \"dist/2022-08-19/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"61c00674f1a33234f0622e7f2b770d641b8202d1e79ce231ad372c0c5e8a0cb2\",\n-    \"dist/2022-08-19/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"298e096659bf1a3903073f3c59bec22f763a2a8f8a9ee91f94589b8e9361bbc1\",\n-    \"dist/2022-08-19/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"dc57c0aea0ae45d781d9a000a36b9df66532b5434024cc6c4d99d8007a0bef8f\",\n-    \"dist/2022-08-19/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"cd21f821f8e6ff9e0b0c3d3e841192fb81a6fecb6ebffd09fa880ac07c9fe677\",\n-    \"dist/2022-08-19/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"8757bc726950c5e8507ad0d9ae518504a9467e8cfabe590b458714be3b6fc1bf\",\n-    \"dist/2022-08-19/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"4c3c891c19ab8990a892fc98ee5e1546b5a8626ebd769b1b6c26cfcc636f12b4\",\n-    \"dist/2022-08-19/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"2da6fa16707edccedc3fb37782ae2cbee1330cc89e646a16fbb288c07fe2502d\",\n-    \"dist/2022-08-19/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"76c4f8be3abfff215a9a565e378fe8e5853b164e2c1ea5f91c4791851457840b\",\n-    \"dist/2022-08-19/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"8f49f0ca8542ca72bfc05f4928a97ccc9e825a3b7f00dc7fadc58ba184169d07\",\n-    \"dist/2022-08-19/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"51b48101522af0cae055e01d025ca657fd7284fb4e3cf81839774fdef97d6c21\",\n-    \"dist/2022-08-19/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"63e34d3e51a99eac167f7567002026f63b830defcff364b3029d8819ccd4abb5\",\n-    \"dist/2022-08-19/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"2888d73ea48e9ca5ffb6f2db7d1ce665413229d38454e625cad4d4d9e2111feb\",\n-    \"dist/2022-08-19/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"cc361abd32f693e2b0d44d718c9d14cf4f4e9333eb965a888013abc1abf2e81d\",\n-    \"dist/2022-08-19/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"7c180166f2ab5c91ed218d2f9fa2ad552e47818a268347bf5be48cad36f14858\",\n-    \"dist/2022-08-19/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"1e5895d5ccd86c5fe13362d8763e9a75ec46909e7c4840dcc84286aa7bf4b367\",\n-    \"dist/2022-08-19/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"6890940f4e02979b6bb8496faf7e71d75c317be563b35c44fdaebdfe11b62cd1\",\n-    \"dist/2022-08-19/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"37bf3bed41ed98d1517d5e925ca22ca39c6d51ab1e65b2e7fd9e8f082364d258\",\n-    \"dist/2022-08-19/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"aaaef89dd7ef0cf07a400cecdd70851be23d066b0522d2e89f94358ea196ebeb\",\n-    \"dist/2022-08-19/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"17c883e6c59a892a4eceee482f27eef60a020f417e06e9c1282992fc085b6106\",\n-    \"dist/2022-08-19/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"722efeb58b8d6802ecc52bfc686b4a1a24fd7b9494e93ed7cb8e4ac974e5c161\",\n-    \"dist/2022-08-19/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"26b3572b77ff7faaf40c06204852683408fda2aa4256167611ac1d0c177789de\",\n-    \"dist/2022-08-19/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"93c504cbade48dc07b4e839d85fa6f477f28ab140c894e8f9acec6477f21e7db\",\n-    \"dist/2022-08-19/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"72354c21c154868a9b1c420047cf2a9eb5aaae20e93dde41f8283ad6e441a744\",\n-    \"dist/2022-08-19/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"ba4c589975b4ca7ae10c98d07c02bae50b7c5d0bcaded77f1ccfefbf555d4116\",\n-    \"dist/2022-08-19/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"fe9e8e7cbb9a1b00871e11b54ae3f64bc35dc4cc80ca49e59b4d8daf5fbdeea4\",\n-    \"dist/2022-08-19/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"287e7a014a6d8e650124c71c87bbd9655785564f4ee1f179a9226ce371e8d78c\",\n-    \"dist/2022-08-19/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"4e35f5a198bbcc06842569e2fda1985e77794425f2e85f1948d7a7664125099b\",\n-    \"dist/2022-08-19/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"05e091a433009843f0dcc295b5b53b46ba2f55a37f7057c777a9cd92c094cba3\",\n-    \"dist/2022-08-19/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"54202c092c265bff6be7f598ce1f6e96a84a5ba4c354d9bbd4986475cf0b809d\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-apple-darwin.tar.gz\": \"0ae9a6dde1693d33ff774f435bba3e18b67e2d8ce757df5e26ac3b757733cb29\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-apple-darwin.tar.xz\": \"d67c4c748443be773016d27a74e859428b404a7fb06e651b1fdbc205ea08c03b\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"fd617b76eb4d9d951ca9757a31fe92c8cfeb76b093e09262728c7737aa9d2970\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"14f263241b90e91fc40a75361e4b8de23165cf8b7c973bc7016a9bf337381ec0\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"c5440958cc976526109ef17b4883e27394d6ce087d90653956371837de5a7f8f\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"8e3c28a0e593651b530bed0fb5216ca8f04ebc54e98b8cb83cfae3ea13c1c8a1\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"c80991b59c39129fce5f775c5f1b530592d04060bfee7f7a7a443da698efc50f\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"81fe7a26762f503c04000f954986c25be1acbaa6687389b70a48e4230901fdfe\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"8b08d6c4c41c3ab05ea3310d44943a3453254c96df92b5f25cc888c4fb7d31fe\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"eb4705ba79bc9b7d2a3969748d966c7faf305ab196bd002856fe5a0499c11989\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"b0f14a0bfa064b4511dc34a71039af3c69b006b51906f9087bc7929014b9db76\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"3d8cdbc3679550a374e29b4a363b30048e2d65d3d4b9c9dbaeb0a907606afee3\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"2f564886b29fece08e8ccf4fdaf6035b5819d03fc963ce46cd6225a79e2d4da0\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"78f7ed8eb7e8d147113472f6402688e0127a41a1a26679c19c9e558bf39e8df7\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"3edff35d00c5af406b72db5e2ee33340c05d24a4bdf4658f172b7d74994825ff\",\n-    \"dist/2022-08-19/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"96b290796ea1781fb5a69838f969591b70e5e193efeab85f4e7c45dfb2c698f2\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"c7b09f59bdd2cf91a9aaf771257a474655ed5905f5455f9a3b47bb832d1f124c\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"b82c8c4a454f59218b22eb04a346b78215c10269c001e28395080abefaa9e6f4\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"cbccc251b16f41383845d5d1d6196f33d2769df7455f308c096e0af46b43d14c\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"99be53158e3ee2b467d75d26d461e7aa4330301c6dba74c048331b16e09188c5\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-ios.tar.gz\": \"bf94ccc4bc6a4c171cd60d7a62c34d32e09b242a7029b69feef6159cf4c22fee\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-apple-ios.tar.xz\": \"6a9a910573ea80de9618c7bf46e21e93341db652e4d82bee06e73544b92805f4\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-fuchsia.tar.gz\": \"27693e376c29e561844e43ef21d006942e44263076ab4144643827b671ea3339\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-fuchsia.tar.xz\": \"81d00752188815a7747f89ba76610d91d276459543e6c4362f1f86ecacc28f2d\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-linux-android.tar.gz\": \"6f076bd4565d9af83003e1165e24fb912eca0adaf40a40f1d87956ff8dff535a\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-linux-android.tar.xz\": \"a0f528910137d9b7e0e6dd371dad181f7d48d270e8ae289d8b7996440bef101b\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"6ac6afb78d0c3e55cffc6cc52bba51259fe83aac35075cebdb6940ad3d147b60\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"f1043c1fa0d0d75f8001d854967f2ec8be6def5845662505048742e6472ebb87\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"d3390a8cb0617551cdce7bb9348fc39a304c877bf5c5ce02ec9cdf636a69571d\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"81da17399275e43ec9b15983faa9828df2a8dbc72ea15d16671d0c31d4d0795c\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"3deca6def0ebb3476898e1ee7368592a034867d73948e51f24ad92445c6275b6\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"23bc4165841199f110293a627735624a2a37bc6d92019e9cb1533e006933f9d5\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"3360ea38f8d8bc84f2419b4ca90bfca7a9709a6fbec2ba209fe335090a534c0e\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"ce7643548eb6f797b7823795e27b748aaa09cd02baffaeee44bdc3c00ed796e3\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-none.tar.gz\": \"5f6cd59b283ac76709e7c76c89f352e92b6818b1606b585332f36ba3c4b6a87b\",\n-    \"dist/2022-08-19/rust-std-beta-aarch64-unknown-none.tar.xz\": \"60d00cacbd24576b0b247f2b12d6a63e9451912d874385b50165a312da080762\",\n-    \"dist/2022-08-19/rust-std-beta-arm-linux-androideabi.tar.gz\": \"15494aade74e5e29bb0d881d243da37d3b929bd98baab7c6b0345e0a6a0ed803\",\n-    \"dist/2022-08-19/rust-std-beta-arm-linux-androideabi.tar.xz\": \"d62cdfc5d0a41749ea90d6cabaa77f4f45630061a04dd3be9611cd5f0ea868d5\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"40e532cd37262e7280a7c0bdd54808815adba533a911bd46a1d9b76d0446b958\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"bb08d0ca767f257fb13f6a946e7c725dc877055f94d324128eab521d43cc552b\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"2f22a08cee234574c48e5022e0c5b1641c2ad01fad69537b03eb9f247e7877dd\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"8cb10237d87a4fcf2100b5aec0623ab04c2f1d976a0f30a1a89357cb41ce6d4e\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"811c691d678f08627758bba341e3ac06a2d465da78d819c49de494e0602073e6\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"50063b02901983e3ce37e98e57e664521cb5c99ab9a1015bb949a53dfda9b49c\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"2ca7a740767463e432b22b846f81ab9983751279b65b4488d07202b77e378afc\",\n-    \"dist/2022-08-19/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"8b56365bd261fb6a4c2984b51dce14d8e2c996667ba4af866153042855043916\",\n-    \"dist/2022-08-19/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"83ece7e0db0e1ddd44b104d52def00ce06fea37dd8c90b1c0a840d0561a76d54\",\n-    \"dist/2022-08-19/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"e3a343fa5f35372ace7f23e6775c8c01b9803fca9e1b686d3db695c2f754db5b\",\n-    \"dist/2022-08-19/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"874dec1039af060488f34be26ba54615a12ee4cb64f3a871932936e4e736fd76\",\n-    \"dist/2022-08-19/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"cdc6b9a375a40847ee4938f3609f8c49f3368394b46fa9dccf1b5b16468852f7\",\n-    \"dist/2022-08-19/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"28e72dd4c24716224b663d341d6f784f2b0deebbf52721709fb396240e327854\",\n-    \"dist/2022-08-19/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"5c8cf5b47b567b8bc41c3ce831f34d076396179d050bf982e1949bef74a2b2fb\",\n-    \"dist/2022-08-19/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"dcfd76d646b17521f5a7daf94a0617a731d914612368ff112345a03a2a5b5939\",\n-    \"dist/2022-08-19/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"7d43dfef571dc4c2e883bdf92e05dd3465b9233c30f34bf282b57826339e9e96\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"4bb1f0110629b7af1fbe09a6eb8387de9aa800a95053ef7177bba30a2d1b430c\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"55f97c5a16e8d65dcfa13adf989039ffcafc5a4a09aec92083d00d7e2786def9\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"e7fb4da36908d6cc0c13a93ec3f4b01ea1b2c515213005479da45712614c0a69\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"c727568116de82658335c3be93d51a7e2850cc2824b9818a166594649dd5b3ce\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"1a186dab35dba7fcf4982e717a1ac6d1d846b87e50e6815ac0f9b2c40e44f4d2\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"7f5d3c66c57ba75d3c91328f3ceccddeeebdc08f015e762e26af770a968ab14d\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"c0108882d6f80cb82a9fa016adfdca2478b4966c72c6d6d240c94c56fa668166\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"4f30e1114c7c4ca187f9a2e4b2ffdd4fa66cd2346534c80ff5a7278a846f2c8c\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"a69c55803776f8ccfc1685181209463ebbbd82252ba2cd47387d6ce8f8f09afb\",\n-    \"dist/2022-08-19/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"c12d6e9f9cec1aee0dcad3ac95a33dea0522a0e00c88e1d1e5ea4a0d98119128\",\n-    \"dist/2022-08-19/rust-std-beta-armv7a-none-eabi.tar.gz\": \"91cb7d15d30bea14c3f7b9ad19ccc3cf58b69abf8ff7ec2ebaf1ed60cab4940d\",\n-    \"dist/2022-08-19/rust-std-beta-armv7a-none-eabi.tar.xz\": \"887aad7c712055aca460a840bb1f5b69caf4fe11a458032df73038af94285abe\",\n-    \"dist/2022-08-19/rust-std-beta-armv7r-none-eabi.tar.gz\": \"54a4f38e30039211e0199bc25733572d24dd5ad9eb6fec524146c1dc08b745d4\",\n-    \"dist/2022-08-19/rust-std-beta-armv7r-none-eabi.tar.xz\": \"0b6b366e0380df3513f36eac4341d5562520eff0fc995280179c6424fcc4f5db\",\n-    \"dist/2022-08-19/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"76f33e20c3800f2a7cc53db4552a44b5269aa8678c7f3de970071ed0f3c66dfe\",\n-    \"dist/2022-08-19/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"e71d8e8a2144cd4ca220cb25218aaeca7d0ba776ef10d2adebd8745bc1fdf988\",\n-    \"dist/2022-08-19/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"50ba543bcfe3d1ca5d5606e7ea656968f70930ce074fb0110e65658e9cab9810\",\n-    \"dist/2022-08-19/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"b2498657da8c27464213afbbad1ff95db637236a9e0f88d2c9bf0c6940a0c583\",\n-    \"dist/2022-08-19/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"8275136f11ddad506a9569d3e6d1ad4b48688a1e7e498e22566ff3453675ff4b\",\n-    \"dist/2022-08-19/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"8c5fae3775152a3dd3d1bc47e1ab1861efa60b51f8087fb2a63da0eb45185a79\",\n-    \"dist/2022-08-19/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"628a29ee30489dc9bb6877a2aaccb4f5de05a5a58ef154be875643ce393776d4\",\n-    \"dist/2022-08-19/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"ff4f7ade08cb2337d20fbaa8a6e74f662b805cb2bf142a584e10b4aae66139a9\",\n-    \"dist/2022-08-19/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"3f7859c372943096d3f6a258561584cee28adb9cfeff5b98036dd7cab74dab7d\",\n-    \"dist/2022-08-19/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"40323fdb61ae453d42525ea13c41b5dedd322d859f9993315a798a87634ee386\",\n-    \"dist/2022-08-19/rust-std-beta-i686-linux-android.tar.gz\": \"b103802c800524bc1dc6f3d996ad47d2c03fe03b236588f8a9de3fc763ba2eff\",\n-    \"dist/2022-08-19/rust-std-beta-i686-linux-android.tar.xz\": \"ecb631362408d708e63093a0bec0b735b1cdc6bb7c0509ab5852e572f796812e\",\n-    \"dist/2022-08-19/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"3b7af769cb25b75fc5a657e4f3dd489e6745df2d383c5e78cc033fb46345d72e\",\n-    \"dist/2022-08-19/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"f1a65b9607cd153e421f27891b5ebcdc1e4a1571613ecead7402d8794eff3330\",\n-    \"dist/2022-08-19/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"e5214f670f981c7b95e690c8487323dc2a564d34f5ad4f589d2862ee11225b83\",\n-    \"dist/2022-08-19/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"efe17356f42fa47949151ebfdb75ee10d14cc5a279eb4361c79f36c5c322d9cb\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"35a3dcfd6df77ac71cd01bec57814d9153d1358409cab11e206b98e86e14c701\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"4dbeea93b2aa61076de0c84c2d5833474eec7adb66a96e90372b074e6c7790c7\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"e07c47100a8719e54176bb2465ae62d1156a4264695739039b901c6ad16e5bd9\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"2dab5f2fbc8c5900b0b4f35ffde00d0e6777c823b67a4632fddd19a3c3b5e20f\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"8b8131f8644c4cbf13003266dcfd5ff82f7b72aa8fdd14a27ff8281821ea6a5f\",\n-    \"dist/2022-08-19/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"b47f1cd70533ab2a59a8ee8c218e7d94406a552df5d23061f9cea714301d973b\",\n-    \"dist/2022-08-19/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"415d22301e698a355fbc1a32181b02a72b7ff36fe1779460d6f380fde1608500\",\n-    \"dist/2022-08-19/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"2f3524f5908f0570b843304dc11eb8d1f7285eab7cda18581043321f65e2a1dd\",\n-    \"dist/2022-08-19/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"6f25a53edc32d423752557cb65daf64f9e3a622ba5a6fdf3f07f95024b2348b6\",\n-    \"dist/2022-08-19/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"a6223971aa5679e3db6df2afbdd31db05b58563347d01ae8682f37236ef2c402\",\n-    \"dist/2022-08-19/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"756c7cd706d57fb766c0e255c9a10146f4d8c2bef0118196706f268a5b1ac65e\",\n-    \"dist/2022-08-19/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"b54706a7faa146e4144e7c66d0f19289bebb155bc0adfaba3c4356866514e830\",\n-    \"dist/2022-08-19/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"23fc1e3e7fd1b0f1ad210273090494246e45cf43d4c30076afd28925575a9447\",\n-    \"dist/2022-08-19/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"ada4af591dbac60a137d00c4030e240eca53874604b2a306db1fe8af10bf0332\",\n-    \"dist/2022-08-19/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"b9180c5bf936713c89f6f0f5f6a637810f72194a7742fdcbbf8fe6e4a6bfd358\",\n-    \"dist/2022-08-19/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"1c2940139107d3aa8f6616e90f68fa42e62fd965f9e22cc264655ad5935971b6\",\n-    \"dist/2022-08-19/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"3dee776bf2aa9bdaaa38235d88a1ca98f0418adc10ceb3d0e3d8999339925bb2\",\n-    \"dist/2022-08-19/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"85f16418e4edc3b2d087104c51e4de61d7d9cf5631ee48065eaef9d796f662f7\",\n-    \"dist/2022-08-19/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"ba374a6acaa1eee5beb9c234d2aa6e46b8b1fc7be65e0ffe8d55d9ff85cc4ff1\",\n-    \"dist/2022-08-19/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"70621189ef43a8034d9f96765e35c43b17b16e077f143d3994e5e6cfc089e14e\",\n-    \"dist/2022-08-19/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"143ab6fc7b3e57d551ada1d8335fdd77c4577d303d37663c4e7ce4b24557a752\",\n-    \"dist/2022-08-19/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"a81db30558c46f43ef4c8cbf3480407af54bb6ad1813f0e912bab6ab0baef8b6\",\n-    \"dist/2022-08-19/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"7def94fc92ad2ac6921d90efc821f37aa69bf59b6b6c8cddf958a7bc6e90ab51\",\n-    \"dist/2022-08-19/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"c39b30a1dbb8c6a828b860f4b0685a3c0498a65dfde880df21e505c7b4ab545d\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"184441ee82c9578b62f905e0e1fae2e27d63cc0729ddc4a58797905341a18c30\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"b7677f219cb8158ce4a9dc64dafffb63f5bda0752d14390ba52c609bac629fd7\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"e295a74c453bf003d02d0aab07aa4b8c609878975cea9795ef467150b01f3b62\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"5c45723e1047a502718365252f66aa376e1ba7702fbf1453dee3a288367b3208\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"c348be9b8846b158b21cd73542dcfb891401421ad5fd4e0a8eacdb49e56cdb4c\",\n-    \"dist/2022-08-19/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"f6036cb2c1fdb232016eb99f908a198c06bae44ac4d6d7536d3ebf42ba0b6db3\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"766ebdbc735cca0906a23683c5da5ada8a6e455dc12e49c7b34f71e66922f60a\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"83dc6727a20ac37273ad8b3ce043f005d5f2be7dab1d5d0c9658fe5897ee9ce2\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"5f059405fde4d25ff250c7219a5b7d8c009a69672f4255867d23ebd50539515e\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"2aad029aa8eaed74e95ac82d471bc750955323b2ef12066b5257e9779cdb9f79\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"734e92db50a3793eefba0378dfe2daceb37b6c06f5a6ed1692b83553406060ef\",\n-    \"dist/2022-08-19/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"f2278a4aa83e2cba6ccf32744c3ae8b55fd44f77bdc31f08bff36105b945d2b8\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"4ce4d1659cd7ae70705c8f4808226814df18bfdedc079c44484fe1ce0dc06f00\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"77e5962551433593e6ee3a2b1ab6766706acdb9c364f5adc8c5b99e84338d3a0\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"6a85f89c5211fc18f86cdea8874ce4ee4d5cf15299b3884dca207003715bb54d\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"cfe8149d98fa1e6d1b406a5f4133ff6bcc9fe3cc5cdb006eebd354537efa55db\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"45c5918df046c2ac5fdce3025eba539eac759d09fd1a134d51272647b829b3ba\",\n-    \"dist/2022-08-19/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"42d01adaa0a222270a303c10fe5b44e61817f317494595f09ab3101ab859e764\",\n-    \"dist/2022-08-19/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"09ca832cd73a5f995a76ce9e6c330095417d8802d2b3afdcf3c42f646dc9346b\",\n-    \"dist/2022-08-19/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"293fdda30521323f1cafe3cc0db92d80bca7fb25ec73a2b2e0c2cdcb48cc9564\",\n-    \"dist/2022-08-19/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"f74c4dd7526251aeab43172f5bf043bdd70b8819c899866086a98c45f7895583\",\n-    \"dist/2022-08-19/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"0de08e4670a7b5c3a4efd4b00ab6da6d2b3ceb37664d3adcc1050274b66f6a00\",\n-    \"dist/2022-08-19/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"4b88e96c15cbcdc66f200fd216715c73ad26e0cdd5920105a15ba44cc02d9a50\",\n-    \"dist/2022-08-19/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"819275f203ecff1bb37628dc0589b28a0667085f3e5115c3fcd26c4536b235aa\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"579d425d60bcb229cb61291caa8fcc99ea8a759b66c61b4f1c796d207ec08274\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"d2ebf00fda10f4f2e8476b5bcfce2be358f046f60a413b6e71aef4e76c6b55da\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"c898ca80eca184ed57125d8b463ca7bc60293bdedb6a3980a2c8da0d222f1869\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"01a73cb52d6fadb848eb672c567eedac339a6ebd432756c2a9e42c7273c4e9f4\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"cdb64f9439964310c7a35edcb36596fb68b5925b7bd2c89a048dbbd5cbbdd434\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"3f90031df2e3de1d423c327764cf7c83ff9b422414bceaeb8f4ca7786a17b6cd\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"626d6e503c6f72766d211faebb88cb8d8bba95775e8536eb181bd76e9a26434a\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"5bcd4b052b2699798c14bc2b50b40c9e538c24ed00bc7fc1f9c812816f47a965\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"90196536e30d2ae5e59ab0bceac283a1934170484c98c4672a86f8a3198307e5\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"8dbf82b8f8c9f5b054c5281bcb5429503d7e7f916aec7fbdd4e1422db6ccbee1\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"45010646984aa7d942288d74e60052a4da6a57312e56ec812ba34ee66ee32709\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"c2ced97a849a6600163ef798adcb8aa9f9b0800bc8554c02b635ce0c26b9dc16\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"3d4f2fc427971a1bfb7de12c876a03e553e8741887568fa8895996da84d96fd3\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"2f81f4c2168dae4a76f2705b88eead61dcdf805d6f3796c9f8fb4a0f8ace21c3\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"f045bb0963aeb3e4d4b08da616c4ef298f1916d7491ee624f334c21427e26e9e\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"b963e0af4532cba9611c9cfa62d816c45b9cac75e3d390772dcee1bbc0111408\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"133a35f0ff672356dab8413aa7958fe70e1987eb95c7adfd2362e1f77fa1a17f\",\n-    \"dist/2022-08-19/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"70ef699fe52f695bedce35910eb85527d492c8f663ce926e111522d3c70c62d2\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"386900d6fe52f807c20aa607cc76864406e096bc6282185bce4e1fe6c2e95350\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"7c40bb5d55bd01c865de037695ed088671318b2a1a5d7c1aeeb9fccdfce666bd\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"41a606a2e9148e288baa8548312c993bd82f8b288d558472ba6cc84938a2f61a\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"bceb44ce91d28547ac123d17f10788268c27c9af8c8da463260dd7c574a30de7\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-wasi.tar.gz\": \"1bd60b74b2e1555c669e273687b84db1da3818ef6c9b0dbe8168852c3e8810db\",\n-    \"dist/2022-08-19/rust-std-beta-wasm32-wasi.tar.xz\": \"d98e83775d0340d27f2deb0cb17a05250bca53f00c2c1039ae34f412dc1249c7\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"476760a9a396adbcf5312afc135f2eeb97c04da8654188726a63734ad8f88725\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"caccc07d4fff2d394f5aefbea589ade137a3154eba0a2562f7a1a036928fc8c4\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-apple-ios.tar.gz\": \"3fb5384aa267a2f4495483cf2857f7b33f7d1df0409539bc0735f78f5e8fa1a4\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-apple-ios.tar.xz\": \"e2383658b0dfc4bbdcea69eb42a9c75686d578c0f15adce039f46aa0f25297f4\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"6cc9433de637d2156ede6bd9620ab7a6895894d8ec848563620df131e30e79c5\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"408d1d1ceccc78df145f804bdd848d4b595274ff2e5a32c76e979134aadba2f8\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-fuchsia.tar.gz\": \"6ee5d79ba87acfa1f2093c1e9cfa26eb2851db48bec86d4f25654c40f9980900\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-fuchsia.tar.xz\": \"eb3e2e365edc084594666862345d903165630034e4c6fe97e206be68920d1657\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-linux-android.tar.gz\": \"1713831fd1675c317d7d6059a27181591b51d094b6c39978e1d52cc92fff4ba9\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-linux-android.tar.xz\": \"864c4f5edf3602ae629fe77f6d08d8ed49d354ce88bc5ea034858b77aebb2c1d\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"683bc54f134507fef80665397c3e2aff1b854d08cc8130b8cef2aa6e5b573561\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"86f037d022446e277dc92c007ed531da9e0ec5013b7c757f0810f1abaa7376be\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"312db623e7d4711eb965d4826c19986019194fdd8528086aed6a08d3f6457b5c\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"1581eaf570f86f49189b4f8f51cf84e535a2bc3cb41fbd8043719d0dcf5185eb\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"0cd8dc6a60623bc64410cac94e89abbddcc7b3cba1b89f8fb2fa56ccea4493c1\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"1831ca7a6ed59064a201cae8f2fe919e74c05e825ff67c671d57393506e95edc\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"9845a9ac85f716ab46d186696fc44993e701de7d89c2c5aad188d7b0fe1761a1\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"16fa497ccd7fd94a6f7ab03ba975d00c63b60f1786fe2da1a7eedca3da62642c\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"3c3e24897193e3feb947a387d09059d2ee495b642dd5a160cfd1ae61eb1ae155\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"2ffd051693a8e831ede8e93285da11b0fef127473d95fcdcc40b4e6ef811ae5b\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"4d32d311dc0c3350c329d2aff147529db13e537f8405ae0bf317b8a85e9242a4\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"fb9d10ef315f2555a0374903d66695078d5f483167c4df2c680d48af4312d109\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"67fa67de6bb7d34ca870a52346dc410084702705b1f9f9adf92d9b71afe11d1b\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"b8df9d518bf30a87633745430f41172d10fd833ee94d6331a73de3649866b62d\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"42f03a9aeff106f40f3d2ada7a02b1e91135adfc98be1acda0f9ebd63b388097\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"da4f0915a71736b3d3c2479440f8a9728250eb50234b39aedbc17d9d1b390651\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"06d00f30c2332d68a924b50e42e813f2f8479d568b74c5edf51b7fbdf57b66d5\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"1e3b5a879ddd2e4fdc31c3853783cbe8a5a4183250b909198553a4d95f1a7cd5\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"cc4e9cb8e856ee173eb028746487604f0436347223f163294aa1ad34c0d740a3\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"02a2ef7754af534e1fe6be3a04ef4446dc6abb6e6c57326ca460a5ba6c96f9d2\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-none.tar.gz\": \"62d55c2a36afbf210d0b9947ef2f05104e7da71bb7958509119b0336874f0f92\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-none.tar.xz\": \"86270ba78b8d74d0f3ac6c2f9a38906d25ec888a8ab604b0c593e99ba5128eed\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"194a933992ab2596af7966e1b10900b1a4627bfef99b0ff1fc87bdf0a4e2ca17\",\n-    \"dist/2022-08-19/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"1a2137c628946d1cb1a84e24abe3a44758425a7470ed4a48555f9c6dca8e7013\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-apple-darwin.tar.gz\": \"b4a4752c96d439c2977a148a40b63864041f903e5733419faacd96c5839bc8e5\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-apple-darwin.tar.xz\": \"f3f83489cd6890aed11a75f4b60d3edf2b32dfac023c93faa8cf1604a9e8fad3\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"5d012c23083429116ffb171923343169380559f3ee90fbaee0989f77da878487\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"15f3534ff3b881709eebaf55e55359d700686429bf55eb4b1c7292ad1a13ff54\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"d3aa46b9f2f052b080222a13e598ffa96227ec271c9db2efd2ddbeb0b1fef2ed\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"932d89e503d2b4fad90241c014c4b4f892ab8054d9555590819422abb51a999e\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"5c006e8324bc8a5b9039da7b61d1147575d0383a18deca3b75d01ebe684c7850\",\n-    \"dist/2022-08-19/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"0d03091ccefff702877e2c38d131932125f0b2d25c8a94e260601c277a3e494f\",\n-    \"dist/2022-08-19/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"373650c44db5568d8d2889b6002d3b5948acd0079773f257d9dc0e380de8c026\",\n-    \"dist/2022-08-19/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"0cbd356980688e816baf4c88b7c8963e4c4b009cdf3e9bac057a3fedccf0c552\",\n-    \"dist/2022-08-19/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"de83386be1885fad366b0b3379f41a8c9e30ca6cfcc5752a0bd917ec635954ba\",\n-    \"dist/2022-08-19/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"a605234a11f44a65b80554bbfd10b6fe83c20a2a62102aaa46f0febc5ad846b9\",\n-    \"dist/2022-08-19/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"22c323b69a4786bee149402c7c64d85795540e2143e0da1e48739b2dbb1a869a\",\n-    \"dist/2022-08-19/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"f9daad394d53aa405f783d9013916610b014d930a355fdb88757b47469619cf3\",\n-    \"dist/2022-08-19/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"275d21aafcc272b18bdefdd6adf28116a493beb053eb214b6ab842ccd31e9cbb\",\n-    \"dist/2022-08-19/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"5a032ea14e3845de2f39305a4fb5b9a4415939f6bd0ff79a0e527c4ebd9af669\",\n-    \"dist/2022-08-19/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"d892ad811e831b6f1cedf8d352dc71f9f86a26089fe4fce4d22b4f77482094eb\",\n-    \"dist/2022-08-19/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"ca16e42ea493c869b53031ea80b52c66c5771fc25531fb13529931d0740ec92a\",\n-    \"dist/2022-08-19/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"d3aa43cb3bef265d6d2fdb17c6962e906ff021c4ca0d638eba6a98f09324d942\",\n-    \"dist/2022-08-19/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"9dbd9e4a20535c8e19d9cee1218f2b3e0d3289d118b840b27e12aab3e48c80d8\",\n-    \"dist/2022-08-19/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"5c17afb542d3661dc31cd3d334de66706de956f45959404494f90cf73e6f6d21\",\n-    \"dist/2022-08-19/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"68fc729c47c290c09a14fe450ab0b82eba568a4e687554e0f87d095fe64d056f\",\n-    \"dist/2022-08-19/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"64e77868b050b0d237eae46f33a723daa2cac8c8736e3787664315e13d879629\",\n-    \"dist/2022-08-19/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"c3c339f17752f334dacf18c75837578d8bcd1020a59a8a21ad0b3cca0e58e49b\",\n-    \"dist/2022-08-19/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"45e586abdfb8a46f126b2327e64e115f8acfa861d183a276ef3688c148e99d46\",\n-    \"dist/2022-08-19/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"7be6e24c013bc03ae28d494d78e767488c38f7487557d5debd5a42eceaa49e34\",\n-    \"dist/2022-08-19/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"a3af91bc8d8179bd06d51615ee2ccbda0c838f99c2b30fb91c52c76304ce46e0\",\n-    \"dist/2022-08-19/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"948b7598e5c7648b02c39757e50ad9550f78fda4943b578b4d19831c2496e86c\",\n-    \"dist/2022-08-19/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"1f01de1fb0274b98424867fba7eef93e00485624a5fb6e21657d6591607d9f50\",\n-    \"dist/2022-08-19/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"879bf1abc548a1dee7fc6c26c0b0881fab064be58a1540b67730b8d3643f8ddd\",\n-    \"dist/2022-08-19/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"3303c7dcbdd1a38a8e32e4b96071be4afd191bb6403d6fbf17fbc65087b1f15b\",\n-    \"dist/2022-08-19/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"cf8693715e3d58e016c2dbe0bf77a3933765ea5fe0a65091cc427b694a490d60\",\n-    \"dist/2022-08-19/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"4ad0221a3df7e223d3bdf271f28f0a694aef8184cd377cae530fbca5c12d82d6\",\n-    \"dist/2022-08-19/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"ad1390820e4fcc426a27d18f97fc8f952c9e949327d8d6b60e6853e4dc9e2c04\",\n-    \"dist/2022-08-19/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"c9232ad8c52060c40ef35eae32e79585d550e2abc011d2b6562edb1b02244966\",\n-    \"dist/2022-08-19/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"3e937985bbf7ef5af05e96e82114fec6ee17bc04f784c3e7472224dae1ebb148\",\n-    \"dist/2022-08-19/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"f4dfa226259ce0d9f8fb9295f82a18a130470f11479811717ddb0f5064a9eb81\",\n-    \"dist/2022-08-19/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"919dd5fbfc80c77f270e1eefee8dbe1c76ed7cc94cc11dff34f54ee05fd415de\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-apple-darwin.tar.gz\": \"482c51eef00cc238872b5002f12c351259a666e8b1380b08f5536fb87b046f4a\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-apple-darwin.tar.xz\": \"3b78a63fb9d27e7960ea35d8bef3734789bd48d80ed1605ddb9f547859977260\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"4c7ec47ced7a7cbd9e6b038ac0f57d0e705801f42375011eac42a708808d75c5\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"6935fbe4de2b5712fe15c865ef2eb4c41959267b03afe4f276f8fcc6eee992bd\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"30b78a0ac0852bbb3aecea5d4f61f4e1737b5d4910e07a59c64e7cdfeb3da215\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"73d15af622a7accb4a04bd596acc95cd0856545fe6a386df18905cd221107fee\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"dc00c8c6f6121ac1ba112120b82215ce811a4c518025cdc4d1202c53db88f65e\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"e827aa07bff90fb978b1055826d9e672e1e40056caab3d8a182afa3c371f0f4f\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"05f6a99d63847d910e05a93d78944014c775c5b6e8b8bd742f2c74c39f7cd883\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"86cde423efde88155ce35514399897fcb2248ddac9f77244827ba4e10189038a\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"e2dea522d946db96791f651fdbb098bcf7285bdb0182e14c573f87826f6d99b2\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"399847ea81239d666acdd890b4407bf2f62f3a527a60515fa38fdfd3ff61d0d0\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"9e1511eb0704962ad3932578821bcfca877826cb18f14e4b7defbc08aaa9f0d8\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"1e0eb9eb917a1db99764b374844ab3ed2cbc83495c50b28f3dcf9512edcb035f\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"28651213923b8009c6317b59a2a15f6f202108efa0b604a590b735b0cd031202\",\n-    \"dist/2022-08-19/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"36591aefa17e1a4cb55625632bc97931db6f3c4252d457963353bbfa5e997a32\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"3f90dbf1c64d8b4cddd1fcb589b85e4b76fae6c3fed88483210bf5bddecd2bf6\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"1f850ef1e1a6ee89cbb862ec986cc3b5de2b4654db625a5da0906f3eff3e834c\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"3b1a7f2e5d380b58bd02fd1f28212869f9feeb2fbb971694425cb837f99f8f0f\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"f24153076383ad22da9cefd9073c1e6dc227c582ef7fb92c73cdfbd4cef6c295\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"e409988fc3bd50f2120d3f5828e8f5a5494fa0bc5296a97f1c26294fb2e1ade7\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"854e275ecd011e12606203f4b9737c373a678821b7f11df6bc08b774d670ada7\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"31bb41173b63d3aaae977b0ab48b0302d1ba2b7f6470fbd7b0206557e2dca2f3\",\n-    \"dist/2022-08-20/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"7f4e356dca11bfc4bcfc9ffa588640cd9321cd73bc70c16d55901f04a119ca2d\",\n-    \"dist/2022-08-20/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"1a8a63027aeaca5c9981567c862222b9c2d0de0456c4534213f5686862507890\",\n-    \"dist/2022-08-20/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"2d217c695886cd59bf7bf40091813d427eb302323650d3641439f050308b2660\",\n-    \"dist/2022-08-20/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"bc257cce6466ef7bfd30eb9790db3e72cc425ce78f763954861b28232dfe1d55\",\n-    \"dist/2022-08-20/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"3326acc5adcf63dde12937d1ad9be4eb8c01ed3f24b07e1df28d194754506a77\",\n-    \"dist/2022-08-20/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"14dc0a6e21cd6e7294995bf7c14238c97cccaf37910765602ca37292267060b0\",\n-    \"dist/2022-08-20/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"93628b8ea58d6484423ff58666520701702f36eab86846a19b205a9c8d737313\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"199dfdf436b9ae97aa7a4a081d6a88b29e825e0e3e24409a008531dc3ea3ae5b\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"cbce925e5bc323d970d7df1c714b31b693208eae0a00eb43a616da3ba499cca2\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"0c899e9273fb04c73c3abbd9483e74cf0312aa61d0818acbd2737a515432cb1c\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"bc3d2e850d77f13b563ce3b286fd781f49abc6ac17f046aea7397655c3955194\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"8940d2f6219a956521ef3c3c43001843cc5bd65706853e7b506848bf11c785d1\",\n-    \"dist/2022-08-20/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"bee2d0136087693ed3328b8264f4c652f843a18128bfbf3d679b6ce426b44d07\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"37f383823d76b2f88fe7c7950b96aad73b94ffe5bf74f7af05d0bbe18c492f66\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"832d60d4dad18f729638c5cea3b5a3a8577b1875977b8bf2110537a4b17a71e2\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"e060d1a8925f9b7f670244718fc0d84519a590cc630e832b27a0bd8149c009af\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"3743c798e26306d3f55afcf989221ade32e5174132e939bd4d3f0a2f1fd7523e\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"723509d619bb3f2c5423267afdbe082b426678d5d1df850b7e0d51cbcad99491\",\n-    \"dist/2022-08-20/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"da258b293fa651db38348eee14239171010b230e390074a65f5975bfd9a990f2\",\n-    \"dist/2022-08-20/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"6ad271d28309c92a76bdef40052c624b8d9e62e389ab14c8df372a6d0cfb8883\",\n-    \"dist/2022-08-20/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"b3e71cedf9df9ce72bdd9b559197fd3989e4d108cd71ff30806b75541c072c34\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"82e7f9cd8409e9eeb89166c8ff047910e24a45d65712cc4bef883bb5ccbeb51d\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"9e0da808f7a3c03b10b309b2a1d934e447bef877adbe78b8d5f9485b2464bb32\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"31841de97f5f7fef456205ab14b7cb568b7edd202f31fc8a4465105ab59ed413\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"bc55f15780a850f2fa19fa26d39edce194745235d6f209d21b86a2ab7924c4dd\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"bdb86ba6b1dfe3359823aa2be3ff1b945d7a34c21383fb2b2ec6f06122ef5587\",\n-    \"dist/2022-08-20/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"1df7664bd1f32e1a9b5d37a4eaaaac54ca7b71853edfed4b0ece2e256f17290b\",\n-    \"dist/2022-08-20/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"67727084e37de55a4cfa4ad2c1f3a834ef49379f949b50440aeb53d65c6dfc36\",\n-    \"dist/2022-08-20/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"820fdce7d561b7e0118b25093cf639eab304ed29852921286f0cbda62e3e8752\",\n-    \"dist/2022-08-20/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"8cf01738cb6e7450753000737c6b33acf7d433d32b28f6b278d6efb9513c4464\",\n-    \"dist/2022-08-20/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"3bb194f2d770934580d063b7f0939cea231dbd280a4df062f0309c3dcbcd1d32\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"95a42b3a88d411d7c2567f8532bf86d3bd8ee57ff2a5254c147f08502f5488a9\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"ed885440a7a03d81dfc6ba206c37afdcd4480368a11143805ca12d8df583172d\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"2d6aa369242b820621cddc095f833eb5bf9dda9127dbcea179d730b2e1fc0d09\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"49291adffb00f8f25e9dadfb8e8f530d6a151479e8024de4b0b42c52c7a21f7e\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"a61ebb7b049b8a8c8440acc7e8698896a3143c0e1f8b1c29084f680e12087d9b\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"8bde3268496729d1f5178863859fdad77fa94f85887b0c129e0517226e3bdfb4\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"08f4bcd90bc01fea5e0c6238d40fb59bd1160e6635b401f908c046e6446d2183\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"a13ad331d827666d8631b4b30a51b1b69de0a90e9cfecc1e8bfb559d52144353\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"2c7c0607392a0d2cf517cc4fcb726f443c85c26b7deca0f10cbc555de56d20d3\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"bbd31f2bd64b4cc2e11c0936787bb44d792d20ec303e3b55efd53e0bd8efe88c\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"27703699164e10526a32a6920eb8d0b71e3572d423defecd81cd6b24c2c5134a\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"e4d388af9bdfee7bb6470a4467e7743a9b7827cd9d4219174fd424c18204a6b6\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"e090c6410f3ded22065097b5839a80d1ca6c80a7657ca28b88244fe119977371\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"a00a785d87e64660165b56489f6709c0d0280ae728782356a3274e8c0be48c36\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"ab9736c80331f0febe42a0e1f29d758327c4c8035954111370ff2c568c784fe4\",\n-    \"dist/2022-08-20/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"ca8127aeae4e84a208ce9a5cdd04c497894e62c226c8bccd00713c1a41f99ddd\"\n+    \"dist/2022-09-20/cargo-beta-aarch64-apple-darwin.tar.gz\": \"3186f69cc7efaf3f933ad77798ddf58bf11c0719dc1dec53fadc502a236ef753\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-apple-darwin.tar.xz\": \"5ad195346a21a80c700ca08223060ea66298fe8e4cbac19148d14b92a9319b01\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"6a7647d761ce3adba9d4ceff2e6c1929e9d96d767961a7a062f41ec09a1abb85\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"13566a68dd2000fb33a990c21b62b82e77d1bd1f3384152f439cf96318f07f3e\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"cc698fe69e27a077c6d2aa8dc7319847b1ecd78ad4e3519161957c7cab90c592\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"1cd369b8ab90e85da78784cf08a92aee87f0804b448676637ee48cb3409dc026\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"856170acebfd7900448fe02bd835d633b2930e2401c4211d72e5dd8c38943606\",\n+    \"dist/2022-09-20/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"5bbc32a426071c84d39395c64e1f9cfe0db29ab10c255c2a8a8f748b624cdb7a\",\n+    \"dist/2022-09-20/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"50518c889d2408a7edf524c0340c8ff6881fd14f505dca0d419deefdb94c3afb\",\n+    \"dist/2022-09-20/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"8143057e446c169e614c153ffbe2428e94404af96d06b1d3103028f695388211\",\n+    \"dist/2022-09-20/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"987064edfdb30dde07ef9b2cbd072f66ca042bf95ae724909cafbc13bcf69885\",\n+    \"dist/2022-09-20/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"253161f50a399818a77360f97443ef818dfca3d384e86048655b08c8a799bafc\",\n+    \"dist/2022-09-20/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"7b9a0feee8f3e1e3c58df38f947904d76006c938a2395650e094337ede9918e9\",\n+    \"dist/2022-09-20/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"2194b642b8ed595b8534ded204a72f910215c8f42482ac64644f784a3b2ae8b3\",\n+    \"dist/2022-09-20/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"7cc2c490988dd1ae095198664317cb0b5c8071fc31bf49aed1eca21eb2766cd8\",\n+    \"dist/2022-09-20/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"32641252e12cdadf0a232b43103fc56af621a48056864ff2ee9a034dd2da8f1f\",\n+    \"dist/2022-09-20/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"32581e6bf22e7d2c7a147a87158161e3fa07f46ec0252e632a3bafb824382a28\",\n+    \"dist/2022-09-20/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"a9a68905a4540389d28e40cc2137cf2fcca77c425089cd99072a34ba15e3ab6a\",\n+    \"dist/2022-09-20/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"b5d9ecd7be4ab25919cd0731bb28a2612965943c5ccedf35ac09c169ed2c97db\",\n+    \"dist/2022-09-20/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"387f7d95d04503293f708f65821f55878449eb5a0efe3344005dca18b84e6563\",\n+    \"dist/2022-09-20/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"f8fbf21aac677276cdf246748d59d183e566bfcacabcd3eab6f19d6c857193ef\",\n+    \"dist/2022-09-20/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"70e561d77632d1463839a8ea9cb72ff49afb61dbba95fa321bdba74be384b21f\",\n+    \"dist/2022-09-20/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"e81b5a5fc70a1f7ed5920a3860b1259a2cecd9a1d981f2a564cd936de53ecf8a\",\n+    \"dist/2022-09-20/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"ef9de44d1d37812bfeb67b353f1e308bf46d62c9fe191980de3a62fbfe5167a4\",\n+    \"dist/2022-09-20/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"68c1cd309775626f19431f7dbb73789b17ee629b588e05bf0231313913cb6a8a\",\n+    \"dist/2022-09-20/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"db290a98987c8bd527f1efe9ff09055fdce8eea0673d2c5eba0640649396b8d0\",\n+    \"dist/2022-09-20/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"f4a7da60f164c03bd274f8c98b58a524d7a73476c726e2ef5695f2be950421c7\",\n+    \"dist/2022-09-20/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"8fc46e05ba0830eec88e1d764b02fb9a4836883fd180800a8edd3a4cf0acbdae\",\n+    \"dist/2022-09-20/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"5f528af9436bfa31d559544220fcb59001a90bff18363390f7fab82f259defde\",\n+    \"dist/2022-09-20/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"502d6da5158075cd997833314f9ca7a527aecc8e28c9e26ee9796c2e9ac91cf5\",\n+    \"dist/2022-09-20/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"16a7b922fa6c6019541e859386dbd38e64507d951376c847f83c6b983c72b417\",\n+    \"dist/2022-09-20/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"7f3e361f9bfcdb5fd765f86ed372e00df62af4ae5714d9a2b3324f3929518677\",\n+    \"dist/2022-09-20/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"f38265c64d6ac34d4632f38368d910bd9471aaf8736595623126cb53e810e307\",\n+    \"dist/2022-09-20/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"99e7f3795aea0abb019b80b1f35aa8e1638fee35e548424ca52fd23c5bf82c71\",\n+    \"dist/2022-09-20/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"bb9e89b65fca9a1fad5293e8a52b27331f08e9660237c0b1e7f750064d45ab1d\",\n+    \"dist/2022-09-20/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"ea81188084da2f2771a1d9414c20065a19544b1af0e56dc71eae7ca00ff72708\",\n+    \"dist/2022-09-20/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"745577c8c52065d84cedd32608ca0e17f1a46bb86b4d619cd01785486dc99480\",\n+    \"dist/2022-09-20/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"85944275d5d05943c89ebf8e487bee35ed8586aa9f1903f83490c12ba74ad8cf\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-apple-darwin.tar.gz\": \"6c3f841c718404d4917353c7fefee7491df62d7456633bfb99dc850a49aab285\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-apple-darwin.tar.xz\": \"0c5a5c3ceec9fcf3b8dbb9fd10172251622e873671049b042b55ede34b8797a8\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"385a01c7a11a5f51253e8182d82763295037d625e7bcf27d54b5f0349cea488c\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"fe498e30198a43586be82c6fbd794093299eddba51fd668d81aed88bef0471ae\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"3ee6926fd5f491eecf574aba631d09d97a9332b936eb7bb0ab348ac3fa02db02\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"d15a8c24d04b308b91d9114b583087e2a13e75920a1837a78fe330cf6892ce4e\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"89368ca5eae65a569ae98e66834e93b240ef43a007e02e768ae9bbd5de4a4cf6\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"20b46e126c900892d576e972e39409c9009bafa4b3c159e624179d77afa912a9\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"1712fd404274c993b95aa44dea6b9ff3b0f9857d8d1646e0cbf454d3386f5e32\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"bd3f848d22bfa19060d459167b6154cc79070e0066f8da79587390fb92404288\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"0e5869b406dbaab0ef123459a93d4d6a34e85e9bd72d8a206bef69aac9e84d5c\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"5b0b255fb82d0e751187c6cc6b64298ca014ef86782984ef9e57a0b2ab373f24\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"09dcaeb783d7c57aa8c708295cf46bdcb3873a20ca30794b3c1a8797b2cc9476\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"918ca6c81e9e19f9d84d80e508af0050f2ec2ce2d0d0aa40cd3afd524d69917b\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"e66e3ecf93bad48573cf34ed44d508908370a8cc0c2764001cddbef022fb6e73\",\n+    \"dist/2022-09-20/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"03514df0f9f2193824e227c19b84f282d7cb90145206bcfa21cf4f8223047462\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"7a6a03adcf6481d90d39e929f99a50ed170e98fe61c3fae5264c3aa4d99530ca\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"ccc8d4fb07a0a9c57b60d05bcf6d076a8b3cdb397930182ebfe99a2e5cd629da\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"3e70853d9fbc3dab4a39303b2281ad63d36a9ae2fd8d6bb7d96f184644e20531\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"59bb5bb6cd8d7269bfd29a952cd26280f5091fb24af4e7bf10cd59b80323d85a\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-ios.tar.gz\": \"da321d56c24e6c2aa326cc082912498c27231f0f0fea27ab925807108d6f329e\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-apple-ios.tar.xz\": \"21e78983abd4523ac9efb0405734ebfd6c8c09b9cc89b9d052b1a58bb7ab798c\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-fuchsia.tar.gz\": \"dd64a476c35b1a6aefed6bcc756cb4562a60ec0277e5661241018678d7a04268\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-fuchsia.tar.xz\": \"bcbb6f3457c9b6e1c9109094536445ff208e78b5a24485af6de580ba7e279861\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-linux-android.tar.gz\": \"63ab6db951f5cefbd1ab1661ffbac9749fec8d4165047dfbcb76b7dcb1468e48\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-linux-android.tar.xz\": \"f3e89fe21779ecd8373280f38e29db8941c0836cba7314414d854ba685e075e4\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"fa187421633e7ca45948258e804fd4a8177070b9a4b964ac95231018cd5e724c\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"af981f04545aca6d3fe301a22773ff38077e8c8d437b862a3d7f1e8040bfaebc\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"22fb1351c35e4d5b12d043cdf1de51a13176fc60518fa89226f3af9dc2e727b6\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"690a7880a563138bbd583b537ddb80bd738d8fceb4cab083bc8bbd1fa1ee2f99\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"2d5135344f76decf74633d95e2fc98c416093ca962cac608564abf600ff117bc\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"8f63623f1e0cae99c5d1c4bb1c636fb773ed06dc1d33a251c9253278f7bc1300\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"105123c48c7e0946872b8ca0fcc897c2a1fcccb9b71b1805eca01e713a509c0e\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"9c9ec824e1db607bfac14ce8a5d1e73aeb8670e655acb4577a8f6ee783202aeb\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-none.tar.gz\": \"b25fb3d1c41e193b724469898efe9d0f5d282de06d5224ae573c8870ccb5ed4d\",\n+    \"dist/2022-09-20/rust-std-beta-aarch64-unknown-none.tar.xz\": \"4f87a8fc869f80072ad2a07896e50ee97b3412badeb69bb37f67ef47ff0d00d5\",\n+    \"dist/2022-09-20/rust-std-beta-arm-linux-androideabi.tar.gz\": \"9ee992110e4bcf9a00bec8635cbe5bbeb241d2fb6b567060fa0507406708c8dd\",\n+    \"dist/2022-09-20/rust-std-beta-arm-linux-androideabi.tar.xz\": \"aa5981a138a103843462a5a6987fcf0c7c335a5896517505d2e54fb288d7af1e\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"854d0d7c9932d4533d642e663ffa465741a3d0ec400a2c4b74324debaa0da27f\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"83b7b2dc823608777dc0e2f290fb5a2f8e6e35f4930ce2170309c14a54f136b3\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"9c84cc8ff79098be62011d572cd928faa4cf76c9c3e94060babc042073f3b7a1\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"b34a7bdd0ddac9e8b4ea8e1db8d86389c623a6629edbbd0052f890df75465fa6\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"49ddce546458f47683928fe341f5eacaec11c3c5a378ce8802c4b97425100905\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"e64130a854017b921a086749550fe92339cef0890ee645acbe23a30f5169a8ad\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"770bab36bd3bbc07739f0cc89c09689189edf7518e740f794be9aa7aed0917f5\",\n+    \"dist/2022-09-20/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"b390f1111f5566b37d3f9384126a6d3dd0cdf9468dea19747394cdaae1c87c7c\",\n+    \"dist/2022-09-20/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"de22ffe26c7ef21d316933618b37c832353a7e5a1fb8b84af7bca98626fbc78e\",\n+    \"dist/2022-09-20/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"82b77c48fdb685b63bea0d40437d5dcee41500cec0360e393511b2c69d2c7381\",\n+    \"dist/2022-09-20/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"94d427c65134e1e208f662acb3eb65a455016e3bed162bc4fcea9c6455e0474e\",\n+    \"dist/2022-09-20/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"cdd71383ec150dbb2514a48300344a8547d7fee2c797e693cd7803354c5fca13\",\n+    \"dist/2022-09-20/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"0241f8f9ffd00c02860158da46e20290d2ba563f93e8fa22324da2b87c347a0d\",\n+    \"dist/2022-09-20/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"a780eb139416f2383f16fa63e72e56f0a77c67d2ac2f10f803802660e8ca30bc\",\n+    \"dist/2022-09-20/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"1628e0c7a8cd8fb2b90db0e3d30f0d36768dbdeca640af967a14b9031d2d4c3f\",\n+    \"dist/2022-09-20/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"4b06bbd8a0ae240bb19c93b54bd9da3bfe6c3f37a70d2b73dfcc9d1eff8fdaae\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"9aaeffdd99e9dedb2bffa79adef2096ef29b48ffd2681ede2ea8d63179082f89\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"d1d0ae4718eb43d4759cbe14a90b422edf0f451c8cb8624368800eff0f05c13e\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"5cf573ce6729200cc211924e45796a9aaf85001272a8690803944dbc91b5a2fb\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"51cecc72479f18c94620b2b022b89403e8ba519e36cb7a6f8c208a9ab6adb17c\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"c6e6962438e0a8ebdc7a7c74712d75642acfeb8c4b0753354a7d3b64da6948cc\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"4b812cfa63c380448b0e2ca2e03cfad73ba9951080eff1f76feaee25f67bdf39\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"89cdaf10019fc3ddb83ca1848adf8ac3411820a9095dc337b9a962f1e58be058\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"e21ac9106eae28b25270f6c1ce70e2c94273919c9c72d22f0fe3ad0b8f0a57f0\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"e218b7e7d148379411502023d6ede2831d76e29d5d2427d030f916a0c14c8ffa\",\n+    \"dist/2022-09-20/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"2797698cf0f218c17eb22f43f806663723f9c89084fdc08d40adbbcde5a79f88\",\n+    \"dist/2022-09-20/rust-std-beta-armv7a-none-eabi.tar.gz\": \"1d5c29d803cb8ef005baf44ca6a0b1fccc4227ab3585046f0d69cbf153be10d7\",\n+    \"dist/2022-09-20/rust-std-beta-armv7a-none-eabi.tar.xz\": \"50259e9b9672baf54e176c252e9068cf020c4a79a825bafc5ee21fb46b9af815\",\n+    \"dist/2022-09-20/rust-std-beta-armv7r-none-eabi.tar.gz\": \"805fc5ae72249f27ddbdd8afdc188b4f67dfe51822eb813e681259da51dbc75c\",\n+    \"dist/2022-09-20/rust-std-beta-armv7r-none-eabi.tar.xz\": \"75151349dc9b6fd3b3a78d38827e517adc6935356bae0c5bc93bae62e1759db8\",\n+    \"dist/2022-09-20/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"ad4e0347c3e9b3f4936f26798ae2a8c502a4599c3357baf0b0a4cc3516c471bf\",\n+    \"dist/2022-09-20/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"4de3e5a729597473759b2db1f7e2ab633c98bb1d8125de6f458fe3bd0ee7d8c7\",\n+    \"dist/2022-09-20/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"0b3c92539f3aec14501e09db3aa02854ef98fb4dc89721306798ea163041e669\",\n+    \"dist/2022-09-20/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"26deacf11e62187673718ea8805b23dc2dd352efdedc11b396e117637a96ceae\",\n+    \"dist/2022-09-20/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"a11ca7a7f67e225365423a704d7139d3c9193699493f1f193d579c126d492475\",\n+    \"dist/2022-09-20/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"08d8aad1d608d2ff626f4e7e4300a31fc3f96c0ef1e5bd0ec179b98d4194fca9\",\n+    \"dist/2022-09-20/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"3524e1ba92b9ccd1fcfd40a6018efa697d63177cc0a8c9cd016be833aff371f4\",\n+    \"dist/2022-09-20/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"a6df83285ba5732eca9adf3f39d0a4087249b29cd0c33ee2272f68930df43191\",\n+    \"dist/2022-09-20/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"6951d7aecd555a0dc485f57ad16703af65315c464aebcf73171bbda2273dba0a\",\n+    \"dist/2022-09-20/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"f07c4a267740e46a4013b130e9d1e10492e45dc0226a08f5c909076ade466737\",\n+    \"dist/2022-09-20/rust-std-beta-i686-linux-android.tar.gz\": \"dd47fbd29b3b025388352fafe693f25e43c1287f69c2185fecfb0d60e13a7fc3\",\n+    \"dist/2022-09-20/rust-std-beta-i686-linux-android.tar.xz\": \"0eebd41330762a4bad438c40f134601e59a7b73043952b2e090a801adff41727\",\n+    \"dist/2022-09-20/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"58cd47de74c201bfed62a8980c2447f97e7c129726d3d28c2140d880fa6d7975\",\n+    \"dist/2022-09-20/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"7fd68f0f9eea4d8256132af2f2c269c58a278b757888e591716a553b87ffcf8c\",\n+    \"dist/2022-09-20/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"816ef343a7ed908706d8f4e7cb915787a4e27c2390cc7c3f6e2210f3ad7c4cda\",\n+    \"dist/2022-09-20/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"2475326f3d32e8ae309750c1639cdc6cce3474fb5d4820b31b46c9c12401b63e\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"24a897b9916bcd4ad775d96f9751b06663eed599086d0665b83dd4c16af871ab\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"959725ac2f49d1944c53846d920ab4e8769976d4025bc32bc63e5372b751a8de\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"35eb28ff2d3b383ac1b34bf6eded87f824ef93eb2c2d12c300b136c7c735ced7\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"31085015fbfa608e6d0828a367d84b48679c6a33d55ae32affe37307818b1086\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"ef294d01caeba013cc3173b5fab5daac4f0c64e57410f778f2891dff03f23875\",\n+    \"dist/2022-09-20/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"4ad7915a9e54f7d911864adbc097941a9c051e0c97c8eee1c04158a5755e4e4a\",\n+    \"dist/2022-09-20/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"cd8e8fe2af17def5bf19a8a0993317af5c33833de850a489ef2dee54c61dbca7\",\n+    \"dist/2022-09-20/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"f2f95555e3564f7b16bcde9ae4c6a30752900519fba68304c4f74b7e508bacc3\",\n+    \"dist/2022-09-20/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"7d42b6d7f028c637f7f9a2f0c14fde880e00098bf4141289620232a263fa8eb0\",\n+    \"dist/2022-09-20/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"50dc97ba9ce28d4252f03f78e23bc05a702d5c1c5ad67b70a358406419f25721\",\n+    \"dist/2022-09-20/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"7c14decb2404c616319c99415f65c1383264151f3802ffedfdff4962db310828\",\n+    \"dist/2022-09-20/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"230849a3b6dff89671bf94c73391eee43107c81ff65c795eb1c9f30b9bb52176\",\n+    \"dist/2022-09-20/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"0a63c8f568d9ef12b75b9bcd53faf727bc029b4a1268c53fef913e58be94eff7\",\n+    \"dist/2022-09-20/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"5b1020d65f651cd1778448618bca55906eef981842b73c18be1b5ec785d6bf06\",\n+    \"dist/2022-09-20/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"3f747d83397942c88ad79a7bde1f98a57d0b416620f08ab57edb64f3b101f493\",\n+    \"dist/2022-09-20/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"babdc0c87bdc8146fc6645da34776be98575019eacb95529c00060f8afcbb1f4\",\n+    \"dist/2022-09-20/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"f0bc0b5fddf7ff8251fefa4068fdb623b47bbd1e81c2c732ce2304e4ce78bb20\",\n+    \"dist/2022-09-20/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"33e3cc3766f941f3668a93240d627c7357b22a13facff5937821d92a21afe444\",\n+    \"dist/2022-09-20/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"33ae5fdfab257ddb004eb80ff1a8d0351675df06b97951d5c47071ac8b18ba9a\",\n+    \"dist/2022-09-20/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"9f16e21c54944afe83a5e1a3e489a2dcad947f367cbb17c6ffcfd2c503e03f25\",\n+    \"dist/2022-09-20/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"065f8929bef2ff2ec0067c788fe64e0a08af0f5e11ac5d67e29e5225557d6d9a\",\n+    \"dist/2022-09-20/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"c3c54ba9dfee447e33d76ba8060bb9b6081103fa6809ad77c3221ea064ed3fc8\",\n+    \"dist/2022-09-20/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"5627e25a24792131e8c0a1c605908bd56ab5a55614b8e17c23233fdc14d25e81\",\n+    \"dist/2022-09-20/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"3ee1b5228665f2d5d7ac500d6fa6a2d0fd771eaafb5c393419713a11bf8d0875\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"cbf922bba400e798cd32e5404a804400f79ed03ba5cc433173eac96ba9e06976\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"bc573b0012568f0bf397870660f7527697b1c65e1a7387d2419c6f63ba001bdd\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"917b948988edd4e5c5e441102f55b1541318d47c0cd5d958a69ddc6fbfda84d1\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"23e45711ce82b6baf9d27d909d8fe4bc6a5f32c91dfbc280708abfe5c362bc89\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"448710ce6f3e72d0831ae882fa37196685a28dacb6f0f499370fc2882427044f\",\n+    \"dist/2022-09-20/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"831bc2bcb21ab9fe82fc64eb377d6d80b47198dc82677b7bd630d89819914e20\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"14a61cc3d6740a9033c6570264e6c9356120235f42e5ded8ebec1d592f17b47f\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"c73aa37081b4248324a459b48378b4a412a3561a12bad3ae064c8336ec862dd6\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"f78a367b9977471dae06fffd6049f03585e826fe648a2d1d8ee20ff19dfc913f\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"e8ef0dfd9d7df08fcdb7136619d8b9cd31435e0de130f87c799117dba9614a54\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"a7cd118c91f4de3a1e1c5d9326080bf39661f708c675272cf697ab9675001705\",\n+    \"dist/2022-09-20/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"58023f2bd169455d97537aca228749e9a980e18d72f67ae8c0caff4ad2d4fd64\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"726efb0f7cbac9d13deac41d0937ce5f707d8e858b3bf9096c40fd41b2663d4a\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"73395ddaa22a91a1de120704f22d86b0624de52af773755046ec809b76b88954\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"2504e53a04ab1360309dd9e733798a94fa3a92cc575148073dc4870bb26367e9\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"f182ac3b6222a333d73f3f612fb31f9d19d4e03456e16b0967cb55d1292ec05a\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"9612105b0d40225d54f6b02bcf75e0d7d232331fa22a24de4895f97519dfd6a6\",\n+    \"dist/2022-09-20/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"448b0cd5cc35096e0fd51a7cb1948e87b7c46eafe665dbfda802a4947e08665a\",\n+    \"dist/2022-09-20/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"72459d840371f7203e15622a82ccb5e3559db52934445943fc41b11a58b07302\",\n+    \"dist/2022-09-20/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"39ca5b49d6e909c81deb8c7391e01da9ef51cabea55fa55dc16cf654abb089a1\",\n+    \"dist/2022-09-20/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"ff74af39ca1446f06f891beb22f1e24fb0b450d97c889dc2e27e0f53fc19b26f\",\n+    \"dist/2022-09-20/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"f56aa4d390eb4b25aa51685ee773b589ebc87bbed7495a07d8af0d3b3cc7c715\",\n+    \"dist/2022-09-20/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"df727ef09f0549051ff5b4fcd04cb22d4244cea85f97e43880e563c45b558cd6\",\n+    \"dist/2022-09-20/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"f575d16acc0a8cc5b96e038d828ac023c302e38efed271d5101a885d3af35cfc\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"838be75f56d84d88ab01b0897d9b166b6ea26c527705df2d2a7368968439505f\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"b5b33e2de72e71ef5024fb50f0f6e91f32b4747f666aa7069e695b15119a1963\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"dbaffcc17215c4342a40c049a9538be44837bcf86a7d65fb2c877f831beca337\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"14fabdf3f4cda3bdb3ac139c95d31c2a20e3a88cd9f83e803f9c9bd6e3f9f83a\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"3acc833a086a9b46db81cbf03fcf2dc366a4b3d32eaeedcc2deee8ceea31449a\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"f6cf227b6da03855f1624bb325bd802b8ae6b15d7bbfbfbf8b9de1a74aedb6fe\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"e5054ca1e295709654b214847691f4fa9f031104725632dc056853382e74e733\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"b44f0462a5f44e762653fecd816dcd5ba5a2f9d8dd3efcec259b250f3af5237d\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"4fb8000ce077d346d85005343284f56ae936eac334c72cb8c170dbe810aad740\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"77955483882897980f4365bdc71fca9f39d675ff210519702b9cf3f2a6bcc2a8\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"566b9ea01182e6c7e3844911ed08fe5eb1d848c3de89d4f123d80fd70ff37ddd\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"33cc9c12d909bd4166be8570e27da8c1884ac1ce82d9548e16d926d9885ff62d\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"62a345ea2aa55b1a02053e7c49988c5f14d6b90d487b9c4916e40ad31957d1f5\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"37fd80af2188d837e870d3c8399767be15070344fc87d2b37b5126095252afc5\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"32a10d7eaaf2189d74700187fbc8c2ebde08b5efa06440c2b4f65fb85eac3ecc\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"dae8d6deecc5277be729803ed55dc134c1ef5bae49fa0fe7ea4f0eee9d7d19fb\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"44457f84d46ccd201771cdae9520caebf813d3283b08f73fabab59b52b485a98\",\n+    \"dist/2022-09-20/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"1e5bcc82a403c1c4c5fa41fa78de9aa4378a2901e3170d9542eb3b21d130e36a\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"b7d31d0ec6fd1355d1323555ec8d1cb4b9f30bab32a75d0d8efaf465ab2aedcc\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"a25b5c180ca97d074d563c6fe1d826db23eba9212d12cb3d60d39b7841a5618d\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"31aeed83d12732c40e51cf59a3dd8dd1fe7ba2ed047cab65f8bfca8c72d158ed\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"28757fc2c5304b3110b2358d252fb4aaa8d811999bd9881e118bc71b0e6b01a3\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-wasi.tar.gz\": \"b69ecad8480c2d33b854ba3387a0563df53546b8a2b55639fa20d1c104f35050\",\n+    \"dist/2022-09-20/rust-std-beta-wasm32-wasi.tar.xz\": \"a09185a76891928cc65e4139373df6f22fd0060388ccc4530cc0be5310f8aaa7\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"97f5a3dd01a7b5efe44662f2376826c184d212754c730bfaa21cd03235676142\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"131b37e9d3c2335fb51427a7e0ab43362efccf90a4e001ef52e54aa221634eb8\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-apple-ios.tar.gz\": \"d900fc396731c95a57d43519a109202cd2ed8e574df300cd6124c6390d1584a3\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-apple-ios.tar.xz\": \"694dc51239481fe8f5ec2291b62435e0a7622591f2709ea4709749c7d8c01db3\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"c2fad6b25e33e4e52fab6d20b6e1bbf78f230e9b387f260b48f940bff67386f5\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"c3fe305a1082cbf1f5bbdaab5a94c0ad88037a4f99e556cf06ff1270a806f437\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-fuchsia.tar.gz\": \"75b5aaf5206953d16a418c83f6e6d21a0adcbb0c81b5c1a8f467f3e5aa33c038\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-fuchsia.tar.xz\": \"7fc38dbfb7833e9b6336f4aa38706a92e1922231ee875100e16274c571110757\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-linux-android.tar.gz\": \"bc4a42ffc51bc3be27907a73de98fe4c8cf3b205fd1e7c75a9cb3bd30bcc5fbb\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-linux-android.tar.xz\": \"68e02875090c7d382e8b21d0102712e7c9d583d657b6c51b4f939e3a9b7f884c\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"11edbb1de67f00263f31635bdf006966143aa18423f574cb64ef966301a0fe3a\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"44743e8f113e3e5bc7ce66902533f6ac59538f8f61fa6ab6c311bbf2ebe75e43\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"a705945830b23a25f272600470d687a1a9f5d4f8a01c5fed9e495a444b2aa9ee\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"9e4a045a2e0f754ec6afd897f1bcb66bccfc2b5bb91f141fa8d3d47723eb6090\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"910de4547c1112170b0981fecfc926cff4c47cc622648b83fea9f79c171cb05a\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"f9be82ac8c5f64c17cfbf0270b8f71ec71e6b3ba7c9521980a73d6f848f6014c\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"e1097c0bd31baa61902be4a8a47a674faa15466ce9352213cf7808f50d5854ff\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"82866dc52808549acd683d5b7c47fe97c992ea70cb6fff941007960a25f3b645\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"2b7c60a6b830d557a6df8865bc8dd658c84037a5893b11db8e11dadb527b5d6f\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"14787b285c55ab885d1360897849882eac861f36029cc72ec9819d035998ee9f\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"4bfdf27eb12af6c4df132603a111ae26f4d06846af366a38e594e66c092373d5\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"66b602046eaa83cf2b69bc75af4dd11dbc5d0c6878537d0af451d17121fdbbe9\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"78d12361e71630978928896a63e6cf7e3e866c09de761029b4e8e959850ac025\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"d55f9cb4a8c47fc5d0123cedf622b94b33f57a59022129e31f451e1b80f1815e\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"74bbecb0f35ad8a1aae65fb09ef21e38bfbe6d5b4c6b1d741832eb8f40eb4b1f\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"135f19e88ac0fb7ed02072c82a17f0d12abaf40055efd0a6b43bbbbc9c4445cd\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"0b3abb866d7b82bc5add9fa01d59b9223d2124d69dfd78a13a4dfcc17196f510\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"ec5989076c015e5b7d1a307ecb19f2ed12df7b5e2836d3b410f3743f9066683d\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"1e236c2ad7aa296aa389751ce64d1cecf86053d23126e1211da71674603e6900\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"de43876b381f7b91f7a8e1d1df5b92a3d60b22a62333f9a645f3e6055e91be3b\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-none.tar.gz\": \"568e95b842c3d8f9f733fc3b5b59a8c673d200b4d16d5db36ce24ee355e18c1d\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-none.tar.xz\": \"557727f83c7998b9349bb2c05f5ac5fcb2f0bef28e55f27b165fb7a2d9347396\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"e3c00ab70a0a69a9567bc525cc283318186521a6d57ccf4a42e2eb640ed50ce6\",\n+    \"dist/2022-09-20/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"757f2208edb49f23adf702a34b093551f0e193f6a6cd8c24b2cf4f199f77b2dd\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-apple-darwin.tar.gz\": \"a036bf0b4d0c8ab907ef2cb8cf8eacff41f7b82d519a2988a529c3d926539ee8\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-apple-darwin.tar.xz\": \"3c49210d4b867cefb4050507104b2672fc70e15f42615ced22469831b34b3267\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"21fefdaa0b70d7f4839751926ce102e19164a373e4d310c0f0b3655f3adbff47\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"7c88775b4efbb2416deb2b0d9ba86d5178d34059b18165b276658973f29d5971\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"99e30eb1612fd18b42a1b89602f448788ddcbbac2430577fc963a2c0c4708c55\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"385eaeb8f260a187ef828904e5267551062210543614dbf98d1c1e392853b913\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"8f3b377a74c586cc8f7cc165eac0794bec560e04c885ae552af4e5cf42490a1b\",\n+    \"dist/2022-09-20/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"2fb2add792a9377cbe86aaedec389d023c35343ef801a97a2392f323e92c386f\",\n+    \"dist/2022-09-20/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"658ec925f51b2a5da9ab8cb193c33c05cc294915d8c0c5a2e93f9ade383375df\",\n+    \"dist/2022-09-20/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"75d19b64530691739654763b89468a7101457d638da04e25f549078594b67b68\",\n+    \"dist/2022-09-20/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"c167fb9f352fed99d427094a5c2b96da0486f30ccb4188756def7c232083319a\",\n+    \"dist/2022-09-20/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"ec1c19536b6fc3020ccfff727bddc934f89da0592797d49bf7149e96f7175451\",\n+    \"dist/2022-09-20/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"05c5e668d5b40db5cd18b21192d8f0f1401d2304f715eff08ff49c3c97d740dc\",\n+    \"dist/2022-09-20/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"ad620c5de3ae9a0b30b3c49dc89bfcd08a061da01f004a724ad5400efd4a7189\",\n+    \"dist/2022-09-20/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"2be9e0f5fe27b7085f65d32cb20875392bdcb177c582c58d1df842b316dcb9c5\",\n+    \"dist/2022-09-20/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"5841c0f4558d24ccd0c4e6996e399fe3ff13d5d1ffb2bda38bab6d60020fa649\",\n+    \"dist/2022-09-20/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"a19c5330c111ad4b19a724b22dc3381eb9f05a85bf9299dd13eefabbf6499504\",\n+    \"dist/2022-09-20/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"902811dec71e36989af12c8dc15b79759e5cf4e2250841bad2b9db2eb94195a1\",\n+    \"dist/2022-09-20/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"36474bb89e67bc867cb7a4a5101d00be221d7a8b6a625535a5b2a74f505d5af4\",\n+    \"dist/2022-09-20/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"4329562f89817b02e3eac219ad3051d9de5fab89e0678d91378c02a90fea7d59\",\n+    \"dist/2022-09-20/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"bb7f5c8abc99d07a337eaeb3c1dc3861a4f148c364f58b039886f43abf6a7d01\",\n+    \"dist/2022-09-20/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"0b02a4d1aac7c9d4b38fd760937020975e5de209ad23b7285cceae7992449d47\",\n+    \"dist/2022-09-20/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"7ceae3da1fb1f865df3315ca450ec3cb4657086dd61c7a47879f98188aa38100\",\n+    \"dist/2022-09-20/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"5a5273ed85d3012b8067dbc3e93f1af105e4cd80ed8055daade24f43dfb41977\",\n+    \"dist/2022-09-20/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"dbd12a141765f29be2a602531db7f9a02bc32617635448f602befc90f1a574c3\",\n+    \"dist/2022-09-20/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"e3abf34a09040149f8725ed1fca6e9c412c4cf290f9424541a819f0e2aa363b2\",\n+    \"dist/2022-09-20/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"e13b7057525302dc3585a71461aa022ea0c059c0b0069fec44f86549eea94d18\",\n+    \"dist/2022-09-20/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"b7bedce1d0ce44b4014e10122201c10443c0e8ced80084a6ebf1add1dbd3236f\",\n+    \"dist/2022-09-20/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"fa738ae0d068e85044d2fce10f6a8bebe7b608630b9b7a822b2d7b84c6c59002\",\n+    \"dist/2022-09-20/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"b53d773465368d9484cd36063d7ff202c1ca8d18422b4f6727cba54beb88f4bf\",\n+    \"dist/2022-09-20/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"9fad6a7ae30e5ccb4f0779ffdd117f6cb30e6c5f6efd5247c208f9ee3296a27f\",\n+    \"dist/2022-09-20/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"e8a92259aa371d350dc29171467c3e99fc178b636343ca82188c7b602a39ab58\",\n+    \"dist/2022-09-20/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"5b64e0924a705e267177c8d80970f510487de350dda47cbc9bb758ec1b212a17\",\n+    \"dist/2022-09-20/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"f6ca5a88f0ea25521e1135100cc7404547ffbbc4422b3c9a06177c94d7871ef4\",\n+    \"dist/2022-09-20/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"8db27ac2a1b8322f529428ee7278347263a9ff71101d37bfb04056137f63de78\",\n+    \"dist/2022-09-20/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"2475866ff4afe38755a27ffde9c09302066d0c936a4778883fee9a37c1b59f31\",\n+    \"dist/2022-09-20/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"4cd81c652fd3e59cbdd42872f2e37bdcc1fa61a550eb8ffed7783e7ad3350577\",\n+    \"dist/2022-09-20/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"1f8529e51192433d1a281484072f94d910ff81161efef230e6a2be82765f6f26\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-apple-darwin.tar.gz\": \"430311100511fe9fe176f01030b78fa8160840bf4d9b4ed798a2a7fe089b4f7c\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-apple-darwin.tar.xz\": \"57be1bb1dc7d7d0f0479d11e36d6315a9d19eb0102610b7f1dbd5151fe6ff5c2\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"826f3f6839c4e18e6d58a32de8f067bb57be2fb2c6cdf74f55d55ef76f5c5e21\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"5f8b9704071e6b372a5c67a29bcb9ba5978ffdedd62e057680aaba17dfc91ba1\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"06a29a85bfce9981504f1630c5f3ea86171948080a93d8dadb4a306dd678af80\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"36c2944aa3db18dfa1632c7b52c67e6bad9effb03960af8cbf82fdf32924019b\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"c20829efb9888d8097c9f5f472598b06868bf918a9d033d4b6fd031323878492\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"515b35360865016b7efe6f973730ce4c66021df0edeed8eb490b69f4bf50006d\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"e63231ee48425687c97c654faba961a1b12379696459f284b6a4ea7ea52fb2af\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"fae9048709741bcd21f4dc2ad8119576ba8dbe6b6442e79a443c207a4c52cc47\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"3785a8837c6fdf230b79992e4a3fd6a8b6faa269461bf908e427ffbd59728adb\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"a238209d54c2f9fea99a18bf43c4c0ae9bbc9cb10075e63d77af131728d64892\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"520ba16bf1b892f5c3d3fd6c1ba695ff48e0babd4ed5be97615887589e60c204\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"4251abe5dde29e9d2ffd7560e7f8eeb5c1b4ad6078b27896f63fcad5db6dabeb\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"ccdde196a376d8f06d3457a1b6d85b4b3692acc9e4bd055fb93dcb217ecd4494\",\n+    \"dist/2022-09-20/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"22f5defadc7b4b4231315b420b6ee102c188a03381580feb7e22b75e16661017\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"8fead022ff05d4112e4cf7e637a459651dc793d9c38f1e823437f6c0c1bf6791\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"5e5f06c2c7a0567bb096b676ecde4bc87cd56c1a60d5e99feb0ac0b679280e1a\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"f365e910e58e962526bc2ffc01b47ea7b99b2be199baeed82e3bb0609147994b\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"3e8a10a285b3c248691e20090d2805d0aabdfc0555a5463bc472899fba085759\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"4316414f83c30535f0c46efba5fd011755f4afa6cc3440b39e8ec154ae451b69\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"f3bf1d0198db6efb751fd61d096615d09dec94a2732b028728d74a3513e9bc47\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"d0f4c30d1ed5144ce0a2931290cb730efa5616375ff846692faba0f04b2fed4a\",\n+    \"dist/2022-09-20/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"3c20a791400f994ea5ae681700e9bd1773b9203821a5458448a038b70fe98794\",\n+    \"dist/2022-09-20/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"587eabfb4ab41ec7fc1f344f8d8674feb1787cb402dbc10754c43eb9352233f6\",\n+    \"dist/2022-09-20/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"0f5c05ce846c42f4afd9127fa5bc0af070e7a03911ed93630177d6304ec66fe9\",\n+    \"dist/2022-09-20/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"dfcab7b0d9b93e1ce639a7a1b9774a41e1e70b67fb91814393531476e7ff6d97\",\n+    \"dist/2022-09-20/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"aa66edb8208b73e3dc939ce82afb78b9104022427fc2278a50ca004c54b1fd5e\",\n+    \"dist/2022-09-20/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"9d31be70cf5aa67219bf85e303651b928e89f54831a14ad004ef606291206991\",\n+    \"dist/2022-09-20/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"8b1249489bbf015af1865ddeb83560fbbc52ca84937e14a2ae928eb4fa854322\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"4154363e7fc7888088ba020c7454a2e0ea75a64e01532ccc709dba3a16c48d78\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"48ba35bdfe87b78428fde9b7ff6fbd7682d7f94113b874e8308bd3c5e734154c\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"bf42294f1c3053b8ff6dcf13219056a5e83fb0680e5e53621c626f825f2f11c6\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"a08b27ac0b47af60618f07d884320e80665eab550536e19828b5fe139a59499d\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"748c42c63c3363d820b132a96bd95cd5203c5f808fb4885710065b9c609ae183\",\n+    \"dist/2022-09-20/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"a2bfe3e12d0ecb5881a749a3d11652d45efcd9ee3647ea7c6b6cbc94071e34e4\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"a26f46c9d777ca55db8ef595219aea45c3ff7547ee7cfe07d01b9535dc00e1dd\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"d3ba043430fb0177023d4028c90a797d9b469d4c2fb2c539bb52e2dd070723cb\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"1f7b83d238dcd63de150d5fe457b8c04347626a583f049cac7989644787c2432\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"25f682b00e0362c16cb8d9879854d0a9781dd7a1e0f980a0c5064fad3764e8ef\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"09aaccf92485ad1d69623410f947b264835236d20472f974e348015bb8d2353f\",\n+    \"dist/2022-09-20/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"cff865ff4979885f158af7b437ebe67ea2645489a6067abd97eeaa97b57041d8\",\n+    \"dist/2022-09-20/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"1ca400758f5e44fa8ed01d8fc6d5622259cde42597fe80dc5e0e1b4129270c77\",\n+    \"dist/2022-09-20/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"bd71382043ea4e934640a60660169d8785af453415d88945066bd6b8a42b0099\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"86feeca2cb543476419583bc1b10dbf8d91afd25ac77a9f04f789aff4f34e3e6\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"2ce655da2899200f9e4a331a45f005f4faea11cfdf5b74397a68d376dab88bf9\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"ed7e14c85bb1dd2900991775e812c56a76891a70dbea013bff06f73e7d1beaba\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"09710d4622fd7a9695d3907be6433c69f2ff590415fab776a05ba74ea5be63a9\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"02da320a5aac0eaffa83cd49b37d0cbcecab7686cef166f30dd5ed02fa9cb023\",\n+    \"dist/2022-09-20/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"1f4465079a5493ec23f433cae4af3f633885b38f6ba7693387ccd355010b955e\",\n+    \"dist/2022-09-20/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"a9a3bdba43897b0ab44c54537ce80fc969c378480348af715e293403b55b83be\",\n+    \"dist/2022-09-20/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"2d58863182dac199cde47e12d3d92a64b5d068afc7e97e1047ae8b369fbe6df9\",\n+    \"dist/2022-09-20/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"002667d802f1ff1224318c2090caaa3eefd18dabd1bcd40ad957b0c09acd047a\",\n+    \"dist/2022-09-20/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"a34aa6451cf5faf985967ec5df78a41b21ae317bba7f8836e09f87571a7f9c16\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"8950773a8433fcc68f16c1e07210c3cf07c9e9240df92b0a90c67ca285d932f8\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"1ce5bb4a0a3490f95037a1512f4b5539c65bfdc5d7f6d42005019345bedb71e8\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"cdbef502285d5eec5788299354f391a2263858d630466cd1cc6d48748aefb1af\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"d5e04d0abda5e8ec429794a58f6404a6b95cc66cb218a52299c3bfaf1ec35485\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"d1ec51e70918e4f50463839eb86528582424d69eecc6af5cd07987621acc713e\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"64a108e60c1ff0e1c004d63e13a8180e5b266382e8434aa94eaff3c654158e51\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"d439ce2780177b3123de9a4c6727ea19831a215d19363d12b0bcc3bc19fc5074\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"851adf8da102068b4195a78ba587e168b7c4471b5a2e66451385a503362d091d\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"7bad988696f60f49c0ab1929f8cfe843effaa455ab1d20b002dadd1e10bc4ded\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"8bee32774f9af0b6f382640592b65d4187401a59bd3bea4a139e2dc43471bc0c\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"16a3ff01a6bc471da2195c7e8d0a6623b911d956db388b66e39096a7c81ae1d4\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"721115ea0ec7902f74d203eaadc71c79c4489caf9a23b0a81c513fddce5fb9b2\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"9042aba5f18ef575cff2e106c34b707d8fe013f4140e4a066ce80f2103563809\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"9106ee07a9f173ae845ae2b5ce30798e15deffd46149430ec5aacceaed7848b8\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"9acb78526c40efdfa0087373d802b30b75238e4c46e0bb18262e16416be49b4b\",\n+    \"dist/2022-09-20/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"c7a73c5b9034417998800dabb08ba71e12713a299457381a4437ea454cead1bd\"\n   }\n }"}, {"sha": "8a357eb79951439987a08e1ad0a1dc2f8e4fe50d", "filename": "src/test/mir-opt/issue-101867.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fmir-opt%2Fissue-101867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fmir-opt%2Fissue-101867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-101867.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(bootstrap, feature(let_else))]\n-\n // EMIT_MIR issue_101867.main.mir_map.0.mir\n fn main() {\n     let x: Option<u8> = Some(1);"}, {"sha": "42a9e5587603d5af550c2a10143e12cedfcdd1ef", "filename": "src/test/mir-opt/issue_101867.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fmir-opt%2Fissue_101867.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fmir-opt%2Fissue_101867.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101867.main.mir_map.0.mir?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` 0 mir_map\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:5:12: 5:22, inferred_ty: std::option::Option<u8>\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:5:12: 5:22, inferred_ty: std::option::Option<u8>\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-101867.rs:+0:11: +0:11"}, {"sha": "a3921b8033fc01d3bdd45c79ab2bc1fb7a9f00bd", "filename": "src/test/ui/let-else/const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fconst-fn.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // issue #101932\n \n-#![cfg_attr(bootstrap, feature(let_else))]\n \n const fn foo(a: Option<i32>) -> i32 {\n     let Some(a) = a else {"}, {"sha": "80bb83af43b19106469fbee7523e575bf7e9543d", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,5 +1,4 @@\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]"}, {"sha": "00bf6445c12d2fea1f489d73c0f49568339a3dbb", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -5,7 +5,6 @@\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "b1abd3b04c92996c1fbcee585f04df9e7dc40b00", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -3,7 +3,6 @@\n #![feature(control_flow_enum)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]"}]}