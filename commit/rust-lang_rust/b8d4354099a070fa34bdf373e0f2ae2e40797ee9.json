{"sha": "b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDQzNTQwOTlhMDcwZmEzNGJkZjM3M2UwZjJhZTJlNDA3OTdlZTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:51Z"}, "message": "Rollup merge of #82128 - anall:feature/add_diagnostic_items, r=davidtwco\n\nadd diagnostic items for OsString/PathBuf/Owned as well as to_vec on slice\n\nThis is adding diagnostic items to be used by rust-lang/rust-clippy#6730, but my understanding is the clippy-side change does need to be done over there since I am adding a new clippy feature.\n\nAdd diagnostic items to the following types:\n  OsString (os_string_type)\n  PathBuf (path_buf_type)\n  Owned (to_owned_trait)\n\nAs well as the to_vec method on slice/[T]", "tree": {"sha": "f241ec15b23d05ba3d200f5cde4126fe44478a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f241ec15b23d05ba3d200f5cde4126fe44478a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+4CRBK7hj4Ov3rIwAAdHIIAHP/JhP17mRaMta8bBOM7tOv\n8sqe/DXDIH+/rI9L+JlX95TIr6GsD9fKCzYwUR1w6A2BL1ndtdWpyZS0r9vJ4pTD\nS7QgWF1ewkx2e8+kcgX6gqbOn5CtV8mZzy+UmPFf30LcFIejcYfCWa+in6XnGVtR\nakOLXoGNXQeXz01bE1UsNpMfd3/9TzNGCI0ANg+s1Xi7wFyasbtBO6+AqbQYsfpG\nRixuOBQBT6+EuVCLO3PIabgPzYjILLtGurs/IqoS4SmsxAi68UeNL9hVajtPlCfe\nDRJdVaQrAlNfdCFvIa3ZxG1UQlXJPP6wUYG+RpMFJZwKuBbSeQbJe/XcW97jG9M=\n=S6eU\n-----END PGP SIGNATURE-----\n", "payload": "tree f241ec15b23d05ba3d200f5cde4126fe44478a4e\nparent cc07061190713059dc533f68a450799dbfb70c5e\nparent 67fcaaaa7a9c393926e25db600a9976137425d68\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045111 +0100\ncommitter GitHub <noreply@github.com> 1614045111 +0100\n\nRollup merge of #82128 - anall:feature/add_diagnostic_items, r=davidtwco\n\nadd diagnostic items for OsString/PathBuf/Owned as well as to_vec on slice\n\nThis is adding diagnostic items to be used by rust-lang/rust-clippy#6730, but my understanding is the clippy-side change does need to be done over there since I am adding a new clippy feature.\n\nAdd diagnostic items to the following types:\n  OsString (os_string_type)\n  PathBuf (path_buf_type)\n  Owned (to_owned_trait)\n\nAs well as the to_vec method on slice/[T]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "html_url": "https://github.com/rust-lang/rust/commit/b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc07061190713059dc533f68a450799dbfb70c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc07061190713059dc533f68a450799dbfb70c5e", "html_url": "https://github.com/rust-lang/rust/commit/cc07061190713059dc533f68a450799dbfb70c5e"}, {"sha": "67fcaaaa7a9c393926e25db600a9976137425d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/67fcaaaa7a9c393926e25db600a9976137425d68", "html_url": "https://github.com/rust-lang/rust/commit/67fcaaaa7a9c393926e25db600a9976137425d68"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "4ed0262bf2cfe465bcc5d0c3b5e81862a0516012", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -169,10 +169,14 @@ symbols! {\n         Option,\n         Ord,\n         Ordering,\n+        OsStr,\n+        OsString,\n         Output,\n         Param,\n         PartialEq,\n         PartialOrd,\n+        Path,\n+        PathBuf,\n         Pending,\n         Pin,\n         Poll,\n@@ -198,6 +202,8 @@ symbols! {\n         StructuralPartialEq,\n         Sync,\n         Target,\n+        ToOwned,\n+        ToString,\n         Try,\n         Ty,\n         TyCtxt,"}, {"sha": "bdb2d67347e432af641d67de844c57104da83be3", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -31,6 +31,7 @@ where\n /// implementing the `Clone` trait. But `Clone` works only for going from `&T`\n /// to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\n /// from any borrow of a given type.\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ToOwned\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToOwned {\n     /// The resulting type after obtaining ownership."}, {"sha": "9924f60ff77e90985af26a7bec9cdf40141376d6", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -222,6 +222,7 @@ mod hack {\n }\n \n #[lang = \"slice_alloc\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"slice\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Sorts the slice."}, {"sha": "6fb3fcbb63be2aa645c0f41218cdb0265ef7a195", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -2175,6 +2175,7 @@ impl FromStr for String {\n /// implementation for free.\n ///\n /// [`Display`]: fmt::Display\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ToString\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToString {\n     /// Converts the given value to a `String`."}, {"sha": "272eccda89471a58d1f3ddc98c5771b5b3ec5c43", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -71,6 +71,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// [`CStr`]: crate::ffi::CStr\n /// [conversions]: super#conversions\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"OsString\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf,\n@@ -93,6 +94,7 @@ impl crate::sealed::Sealed for OsString {}\n ///\n /// [`&str`]: str\n /// [conversions]: super#conversions\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"OsStr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `OsStr::from_inner` current implementation relies"}, {"sha": "de3b57df44e1e2e10bc5d6b2dd4f4d44ae4d7dd4", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d4354099a070fa34bdf373e0f2ae2e40797ee9/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=b8d4354099a070fa34bdf373e0f2ae2e40797ee9", "patch": "@@ -1066,6 +1066,7 @@ impl FusedIterator for Ancestors<'_> {}\n ///\n /// Which method works best depends on what kind of situation you're in.\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"PathBuf\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `PathBuf::as_mut_vec` current implementation relies\n@@ -1719,6 +1720,7 @@ impl AsRef<OsStr> for PathBuf {\n /// let extension = path.extension();\n /// assert_eq!(extension, Some(OsStr::new(\"txt\")));\n /// ```\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Path\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `Path::new` current implementation relies"}]}