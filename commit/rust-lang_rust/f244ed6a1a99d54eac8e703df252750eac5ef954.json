{"sha": "f244ed6a1a99d54eac8e703df252750eac5ef954", "node_id": "C_kwDOAAsO6NoAKGYyNDRlZDZhMWE5OWQ1NGVhYzhlNzAzZGYyNTI3NTBlYWM1ZWY5NTQ", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T02:46:02Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T02:46:02Z"}, "message": "doxx", "tree": {"sha": "88ad7c5f0531ad50d3b4bb6287c9b93f1f151c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ad7c5f0531ad50d3b4bb6287c9b93f1f151c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f244ed6a1a99d54eac8e703df252750eac5ef954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f244ed6a1a99d54eac8e703df252750eac5ef954", "html_url": "https://github.com/rust-lang/rust/commit/f244ed6a1a99d54eac8e703df252750eac5ef954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f244ed6a1a99d54eac8e703df252750eac5ef954/comments", "author": null, "committer": null, "parents": [{"sha": "2e0610e64e7a573867eea29efcf59ae2fbad0251", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0610e64e7a573867eea29efcf59ae2fbad0251", "html_url": "https://github.com/rust-lang/rust/commit/2e0610e64e7a573867eea29efcf59ae2fbad0251"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "bb23699cad4df873fde806bc534006a94d73473b", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f244ed6a1a99d54eac8e703df252750eac5ef954/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f244ed6a1a99d54eac8e703df252750eac5ef954/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=f244ed6a1a99d54eac8e703df252750eac5ef954", "patch": "@@ -36,10 +36,11 @@ pub(crate) fn prepare_rename(\n     let mut defs = find_definitions(&sema, syntax, position)?;\n \n     // TODO:\n-    // - is \"No references found at position\" the right error? (why does it not get caught by `find_definitions`... hmm)\n+    // - `find_definitions` is implemented so that it returns a non-empty vec\n+    //   in the `Ok` case. But that's not expressed by the type signature, hence `unwrap()`\n+    //   here which ... wart.\n     // - is \"just take the first `name_like`\" correct? If not, what do?\n-    let (name_like, _def) =\n-        defs.next().ok_or_else(|| format_err!(\"No references found at position\"))?;\n+    let (name_like, _def) = defs.next().unwrap();\n     let frange = sema.original_range(name_like.syntax());\n     always!(frange.range.contains_inclusive(position.offset) && frange.file_id == position.file_id);\n     Ok(RangeInfo::new(frange.range, ()))\n@@ -168,7 +169,13 @@ fn find_definitions(\n     match v {\n         // remove duplicates\n         // TODO is \"unique by `Definition`\" correct?\n-        Ok(v) => Ok(v.into_iter().unique_by(|t| t.1)),\n+        Ok(v) => {\n+            if v.is_empty() {\n+                Err(format_err!(\"No references found at position\"))\n+            } else {\n+                Ok(v.into_iter().unique_by(|t| t.1))\n+            }\n+        }\n         Err(e) => Err(e),\n     }\n }"}]}