{"sha": "953a6b3da7016d41816951ad0930922f558c16d0", "node_id": "C_kwDOAAsO6NoAKDk1M2E2YjNkYTcwMTZkNDE4MTY5NTFhZDA5MzA5MjJmNTU4YzE2ZDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T15:18:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T15:18:36Z"}, "message": "Rollup merge of #101496 - spastorino:lower_lifetime_binder_api_changes, r=oli-obk\n\nAllow lower_lifetime_binder receive a closure\n\n``@oli-obk`` requested this and other changes as a way of simplifying https://github.com/rust-lang/rust/pull/101345. This is just going to make the diff of https://github.com/rust-lang/rust/pull/101345 smaller.\n\nr? ``@oli-obk`` ``@cjgillot``", "tree": {"sha": "0c4c114c099e434a5a1adf49633bbf989f05adf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4c114c099e434a5a1adf49633bbf989f05adf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953a6b3da7016d41816951ad0930922f558c16d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGgfMCRBK7hj4Ov3rIwAAs9wIAITzVrS5SILMiocnELb1rCGB\nBsEFki7bodOwSGPbJAriaGMZAnaENGJEmt0YJ/IgGxgvH+0PMNofRUQv3xINgEz7\nnhoE+HfRzNg/2yCPZnvoOGyV+9EdPdOWlPlDvKLPJlC+UcNBkXJ/qkMehgkazS2b\ns7vvuyoE6aVw/7KLIHjUkoxTHIbNE2VDrABkf+WWeW8zB3oB0VRPYSezwb347WSW\n/y5Xe7fL3P+4LZpux5txJ044DTz+vkZDxFpUQMFpdtdZPOhKh7ph6q+KiN8fcUcD\nWZJ43E46HAhPxosuxQhoKlVih8vYjAZywecEpYKyjAy9NZPePSQ2ypH6HrTYAnc=\n=ojXr\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c4c114c099e434a5a1adf49633bbf989f05adf6\nparent b5ffbd32d4838a460a73ce9aa106a4e1856e52c0\nparent 36fa12f1a4c638f4d48462bfe94721b1b843004a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662650316 +0530\ncommitter GitHub <noreply@github.com> 1662650316 +0530\n\nRollup merge of #101496 - spastorino:lower_lifetime_binder_api_changes, r=oli-obk\n\nAllow lower_lifetime_binder receive a closure\n\n``@oli-obk`` requested this and other changes as a way of simplifying https://github.com/rust-lang/rust/pull/101345. This is just going to make the diff of https://github.com/rust-lang/rust/pull/101345 smaller.\n\nr? ``@oli-obk`` ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953a6b3da7016d41816951ad0930922f558c16d0", "html_url": "https://github.com/rust-lang/rust/commit/953a6b3da7016d41816951ad0930922f558c16d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953a6b3da7016d41816951ad0930922f558c16d0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ffbd32d4838a460a73ce9aa106a4e1856e52c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ffbd32d4838a460a73ce9aa106a4e1856e52c0", "html_url": "https://github.com/rust-lang/rust/commit/b5ffbd32d4838a460a73ce9aa106a4e1856e52c0"}, {"sha": "36fa12f1a4c638f4d48462bfe94721b1b843004a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36fa12f1a4c638f4d48462bfe94721b1b843004a", "html_url": "https://github.com/rust-lang/rust/commit/36fa12f1a4c638f4d48462bfe94721b1b843004a"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "dfa331f542001558d58c7722d423f66122aa2265", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/953a6b3da7016d41816951ad0930922f558c16d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953a6b3da7016d41816951ad0930922f558c16d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=953a6b3da7016d41816951ad0930922f558c16d0", "patch": "@@ -849,21 +849,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n-        // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n-\n-        let c = self.arena.alloc(hir::Closure {\n-            binder: binder_clause,\n-            capture_clause,\n-            bound_generic_params,\n-            fn_decl,\n-            body: body_id,\n-            fn_decl_span: self.lower_span(fn_decl_span),\n-            movability: generator_option,\n-        });\n+        self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n+            // Lower outside new scope to preserve `is_in_loop_condition`.\n+            let fn_decl = lctx.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n+\n+            let c = lctx.arena.alloc(hir::Closure {\n+                binder: binder_clause,\n+                capture_clause,\n+                bound_generic_params,\n+                fn_decl,\n+                body: body_id,\n+                fn_decl_span: lctx.lower_span(fn_decl_span),\n+                movability: generator_option,\n+            });\n \n-        hir::ExprKind::Closure(c)\n+            hir::ExprKind::Closure(c)\n+        })\n     }\n \n     fn generator_movability_for_fn(\n@@ -950,23 +951,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n-\n-        // We need to lower the declaration outside the new scope, because we\n-        // have to conserve the state of being inside a loop condition for the\n-        // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n-\n-        let c = self.arena.alloc(hir::Closure {\n-            binder: binder_clause,\n-            capture_clause,\n-            bound_generic_params,\n-            fn_decl,\n-            body,\n-            fn_decl_span: self.lower_span(fn_decl_span),\n-            movability: None,\n-        });\n-        hir::ExprKind::Closure(c)\n+        self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n+            // We need to lower the declaration outside the new scope, because we\n+            // have to conserve the state of being inside a loop condition for the\n+            // closure argument types.\n+            let fn_decl = lctx.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n+\n+            let c = lctx.arena.alloc(hir::Closure {\n+                binder: binder_clause,\n+                capture_clause,\n+                bound_generic_params,\n+                fn_decl,\n+                body,\n+                fn_decl_span: lctx.lower_span(fn_decl_span),\n+                movability: None,\n+            });\n+            hir::ExprKind::Closure(c)\n+        })\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "495c3353aef3bbb42ea40af188d86982e31eaaa5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/953a6b3da7016d41816951ad0930922f558c16d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953a6b3da7016d41816951ad0930922f558c16d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=953a6b3da7016d41816951ad0930922f558c16d0", "patch": "@@ -810,23 +810,31 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// name resolver owing to lifetime elision; this also populates the resolver's node-id->def-id\n     /// map, so that later calls to `opt_node_id_to_def_id` that refer to these extra lifetime\n     /// parameters will be successful.\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self, in_binder))]\n     #[inline]\n-    fn lower_lifetime_binder(\n+    fn lower_lifetime_binder<R>(\n         &mut self,\n         binder: NodeId,\n         generic_params: &[GenericParam],\n-    ) -> &'hir [hir::GenericParam<'hir>] {\n-        let mut generic_params: Vec<_> = self.lower_generic_params_mut(generic_params).collect();\n+        in_binder: impl FnOnce(&mut Self, &'hir [hir::GenericParam<'hir>]) -> R,\n+    ) -> R {\n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(binder);\n         debug!(?extra_lifetimes);\n-        generic_params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n-            self.lifetime_res_to_generic_param(ident, node_id, res)\n-        }));\n+        let extra_lifetimes: Vec<_> = extra_lifetimes\n+            .into_iter()\n+            .filter_map(|(ident, node_id, res)| {\n+                self.lifetime_res_to_generic_param(ident, node_id, res)\n+            })\n+            .collect();\n+\n+        let generic_params: Vec<_> = self\n+            .lower_generic_params_mut(generic_params)\n+            .chain(extra_lifetimes.into_iter())\n+            .collect();\n         let generic_params = self.arena.alloc_from_iter(generic_params);\n         debug!(?generic_params);\n \n-        generic_params\n+        in_binder(self, generic_params)\n     }\n \n     fn with_dyn_type_scope<T>(&mut self, in_scope: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n@@ -1236,14 +1244,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => {\n-                let generic_params = self.lower_lifetime_binder(t.id, &f.generic_params);\n-                hir::TyKind::BareFn(self.arena.alloc(hir::BareFnTy {\n-                    generic_params,\n-                    unsafety: self.lower_unsafety(f.unsafety),\n-                    abi: self.lower_extern(f.ext),\n-                    decl: self.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n-                    param_names: self.lower_fn_params_to_names(&f.decl),\n-                }))\n+                self.lower_lifetime_binder(t.id, &f.generic_params, |lctx, generic_params| {\n+                    hir::TyKind::BareFn(lctx.arena.alloc(hir::BareFnTy {\n+                        generic_params,\n+                        unsafety: lctx.lower_unsafety(f.unsafety),\n+                        abi: lctx.lower_extern(f.ext),\n+                        decl: lctx.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n+                        param_names: lctx.lower_fn_params_to_names(&f.decl),\n+                    }))\n+                })\n             }\n             TyKind::Never => hir::TyKind::Never,\n             TyKind::Tup(ref tys) => hir::TyKind::Tup(\n@@ -2140,10 +2149,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         itctx: &mut ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n-        let bound_generic_params =\n-            self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n-        let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n-        hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n+        self.lower_lifetime_binder(\n+            p.trait_ref.ref_id,\n+            &p.bound_generic_params,\n+            |lctx, bound_generic_params| {\n+                let trait_ref = lctx.lower_trait_ref(&p.trait_ref, itctx);\n+                hir::PolyTraitRef { bound_generic_params, trait_ref, span: lctx.lower_span(p.span) }\n+            },\n+        )\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: &mut ImplTraitContext) -> hir::MutTy<'hir> {"}]}