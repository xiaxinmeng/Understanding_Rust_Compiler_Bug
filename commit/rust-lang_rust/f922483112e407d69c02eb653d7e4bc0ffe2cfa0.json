{"sha": "f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MjI0ODMxMTJlNDA3ZDY5YzAyZWI2NTNkN2U0YmMwZmZlMmNmYTA=", "commit": {"author": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-26T15:14:27Z"}, "committer": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-27T18:01:47Z"}, "message": "Print ParamTy span when accessing a field (#52082)", "tree": {"sha": "e7ef8818b2d387beb7dcded2a52729e3956ec409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ef8818b2d387beb7dcded2a52729e3956ec409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "html_url": "https://github.com/rust-lang/rust/commit/f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/comments", "author": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59367b074f1523353dddefa678ffe3cac9fd4e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/59367b074f1523353dddefa678ffe3cac9fd4e50", "html_url": "https://github.com/rust-lang/rust/commit/59367b074f1523353dddefa678ffe3cac9fd4e50"}], "stats": {"total": 187, "additions": 184, "deletions": 3}, "files": [{"sha": "c2beaddecd5c1e9658e06b689257151acc6ab933", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "patch": "@@ -1393,9 +1393,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut err = self.no_such_field_err(field.span, field, expr_t);\n \n             match expr_t.kind {\n-                ty::Adt(def, _) if !def.is_enum() => {\n-                    self.suggest_fields_on_recordish(&mut err, def, field);\n-                }\n                 ty::Array(_, len) => {\n                     self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n                 }\n@@ -1405,6 +1402,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {}\n             }\n \n+            let deref_t = match expr_t.kind {\n+                ty::Ref(_, ref_t, _) => ref_t,\n+                _ => &expr_t\n+            };\n+            match deref_t.kind {\n+                ty::Adt(def, _) if !def.is_enum() => {\n+                    self.suggest_fields_on_recordish(&mut err, def, field);\n+                }\n+                ty::Param(param_ty) => {\n+                    self.explain_param(&mut err, param_ty);\n+                }\n+                _ => {}\n+            }\n+\n             if field.name == kw::Await {\n                 // We know by construction that `<expr>.await` is either on Rust 2015\n                 // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n@@ -1491,6 +1502,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn explain_param(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        param: ty::ParamTy,\n+    ) {\n+        let generics = self.tcx.generics_of(self.body_id.owner_def_id());\n+        let param_def_id = generics.type_param(&param, self.tcx).def_id;\n+        let param_hir_id = match self.tcx.hir().as_local_hir_id(param_def_id) {\n+            Some(x) => x,\n+            None    => return,\n+        };\n+        let param_span = self.tcx.hir().span(param_hir_id);\n+        let param_name = self.tcx.hir().ty_param_name(param_hir_id);\n+\n+        err.span_note(param_span, &format!(\"Type parameter '{}' was declared here\", param_name));\n+    }\n+\n     fn suggest_fields_on_recordish(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "c57e8149574c94d3b2b90b050c1e9ce7de83f5cd", "filename": "src/test/ui/typeck/issue-52082.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.rs?ref=f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "patch": "@@ -0,0 +1,54 @@\n+// Fix issue 52082: Confusing error if accidentially defining a type paramter with the same name as\n+// an existing type\n+//\n+// To this end, make sure that when trying to retrieve a field of a (reference to) type parameter,\n+// rustc points to the point where the parameter was defined.\n+#[derive(Debug)]\n+struct Point\n+{\n+    x: i32,\n+    y: i32\n+}\n+\n+impl Point\n+{\n+    fn add(a: &Point, b: &Point) -> Point\n+    {\n+        Point {x: a.x + b.x, y: a.y + b.y}\n+    }\n+}\n+\n+trait Eq\n+{\n+    fn equals_ref<T>(a: &T, b: &T) -> bool;\n+    fn equals_val<T>(a: T, b: T) -> bool;\n+}\n+\n+impl Eq for Point\n+{\n+    fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+    }\n+\n+    fn equals_val<Point>(a: Point, b: Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+    }\n+}\n+\n+fn main()\n+{\n+    let p1 = Point {x:  0, y: 10};\n+    let p2 = Point {x: 20, y: 42};\n+    println!(\"{:?}\", Point::add(&p1, &p2));\n+    println!(\"p1: {:?}, p2: {:?}\", p1, p2);\n+    println!(\"&p1 == &p2: {:?}\", Point::equals_ref(&p1, &p2));\n+    println!(\"p1 == p2: {:?}\", Point::equals_val(p1, p2));\n+}"}, {"sha": "b6b616630d51f85a7fcea52b945c8e5c4ab391cd", "filename": "src/test/ui/typeck/issue-52082.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f922483112e407d69c02eb653d7e4bc0ffe2cfa0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082.stderr?ref=f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "patch": "@@ -0,0 +1,99 @@\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082.rs:31:11\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:29:19\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082.rs:31:18\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:29:19\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082.rs:31:25\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:29:19\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082.rs:31:32\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:29:19\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082.rs:39:11\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:37:19\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082.rs:39:18\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:37:19\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082.rs:39:25\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:37:19\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ^^^^^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082.rs:39:32\n+   |\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+   |\n+note: Type parameter 'Point' was declared here\n+  --> $DIR/issue-52082.rs:37:19\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ^^^^^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}]}