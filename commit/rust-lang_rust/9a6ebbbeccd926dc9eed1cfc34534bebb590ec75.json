{"sha": "9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNmViYmJlY2NkOTI2ZGM5ZWVkMWNmYzM0NTM0YmViYjU5MGVjNzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-05T05:28:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "librustdoc: Remove a couple of `Cell`s.", "tree": {"sha": "c7905c75709ff379499468fb912c105a9a090588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7905c75709ff379499468fb912c105a9a090588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "html_url": "https://github.com/rust-lang/rust/commit/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe8ac88a7492679846827f374effff46b070278", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8ac88a7492679846827f374effff46b070278", "html_url": "https://github.com/rust-lang/rust/commit/ebe8ac88a7492679846827f374effff46b070278"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "39f68ae59e844692c48b8452fe6f22571749a0e2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "patch": "@@ -33,7 +33,6 @@\n //! These tasks are not parallelized (they haven't been a bottleneck yet), and\n //! both occur before the crate is rendered.\n \n-use std::cell::Cell;\n use std::comm::{SharedPort, SharedChan};\n use std::comm;\n use std::fmt;\n@@ -814,9 +813,9 @@ impl Context {\n             // recurse into the items of the module as well.\n             clean::ModuleItem(..) => {\n                 let name = item.name.get_ref().to_owned();\n-                let item = Cell::new(item);\n+                let mut item = Some(item);\n                 self.recurse(name, |this| {\n-                    let item = item.take();\n+                    let item = item.take_unwrap();\n                     let dst = this.dst.join(\"index.html\");\n                     render(File::create(&dst).unwrap(), this, &item, false);\n "}, {"sha": "a3931f213ec0acf88ddddb928a3e9b2ee92281ae", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "patch": "@@ -646,7 +646,6 @@ impl Drop for UdpWatcher {\n \n #[cfg(test)]\n mod test {\n-    use std::cell::Cell;\n     use std::comm::oneshot;\n     use std::rt::test::*;\n     use std::rt::rtio::{RtioTcpStream, RtioTcpListener, RtioTcpAcceptor,\n@@ -1071,7 +1070,7 @@ mod test {\n \n             let handle1 = sched1.make_handle();\n             let handle2 = sched2.make_handle();\n-            let tasksFriendHandle = Cell::new(sched2.make_handle());\n+            let tasksFriendHandle = sched2.make_handle();\n \n             let on_exit: proc(UnwindResult) = proc(exit_status) {\n                 handle1.send(Shutdown);\n@@ -1095,11 +1094,13 @@ mod test {\n \n                 // block self on sched1\n                 let scheduler: ~Scheduler = Local::take();\n+                let mut tasksFriendHandle = Some(tasksFriendHandle);\n                 scheduler.deschedule_running_task_and_then(|_, task| {\n                     // unblock task\n                     task.wake().map(|task| {\n                         // send self to sched2\n-                        tasksFriendHandle.take().send(TaskFromFriend(task));\n+                        tasksFriendHandle.take_unwrap()\n+                                         .send(TaskFromFriend(task));\n                     });\n                     // sched1 should now sleep since it has nothing else to do\n                 })"}]}