{"sha": "979e788957ced1957ee9ac1da70fb97abf9fe2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OWU3ODg5NTdjZWQxOTU3ZWU5YWMxZGE3MGZiOTdhYmY5ZmUyYjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T14:54:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T14:54:12Z"}, "message": "Merge #8034\n\n8034: Implement Crate::transitive_reverse_dependencies r=matklad a=Veykril\n\nchangelog internal Implement Crate::transitive_reverse_dependencies\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1777ab043cb0750854b27a8aec805454de5c3277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1777ab043cb0750854b27a8aec805454de5c3277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979e788957ced1957ee9ac1da70fb97abf9fe2b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUMaUCRBK7hj4Ov3rIwAAdHIIAFTK6TOuUyBPhmoCx5DB0SrK\nCQ/oRLrgBjfQxK3Os+yfD2l8DDcqeLPTQAyl7HK5CmJTrE5O+Q3gNjDMADO5Wcuf\nXce/9lP90zcjPPlYBdtIx1sn6NzFz0sszFogzw1W9cyrV951/qvpkovcORjxzR45\noyeVLrjOV5Cn2aQiCSeMVvh4CttS9vqYCGxgFpJV7iZ4ky+k5b2Mh7fAlRRG6iXm\nq2QUgtht4rBHE9DMQ17Hj2UH9b9MmPDCHj9suu18Ug77SZihzUCcc/L/N9g0F5TL\nedMa1NnKfK0sUzNlHvT+0KH7OkzEDTCE8FLrgX4VigzsaYnSlZWolevMGS2UuMA=\n=HqxV\n-----END PGP SIGNATURE-----\n", "payload": "tree 1777ab043cb0750854b27a8aec805454de5c3277\nparent b4ed3e1551f828d44dcd8e0caf08420438e5eb1a\nparent bebee2106de7bbd20f54d7f55d5c56dba0d636b6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615906452 +0000\ncommitter GitHub <noreply@github.com> 1615906452 +0000\n\nMerge #8034\n\n8034: Implement Crate::transitive_reverse_dependencies r=matklad a=Veykril\n\nchangelog internal Implement Crate::transitive_reverse_dependencies\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979e788957ced1957ee9ac1da70fb97abf9fe2b1", "html_url": "https://github.com/rust-lang/rust/commit/979e788957ced1957ee9ac1da70fb97abf9fe2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979e788957ced1957ee9ac1da70fb97abf9fe2b1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ed3e1551f828d44dcd8e0caf08420438e5eb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ed3e1551f828d44dcd8e0caf08420438e5eb1a", "html_url": "https://github.com/rust-lang/rust/commit/b4ed3e1551f828d44dcd8e0caf08420438e5eb1a"}, {"sha": "bebee2106de7bbd20f54d7f55d5c56dba0d636b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebee2106de7bbd20f54d7f55d5c56dba0d636b6", "html_url": "https://github.com/rust-lang/rust/commit/bebee2106de7bbd20f54d7f55d5c56dba0d636b6"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "cad6866aa3bacad6232e4cef965647beca4a10b2", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -57,7 +57,7 @@\n //! fn insert_source_code_here() {}\n //! \"\n //! ```\n-use std::{str::FromStr, sync::Arc};\n+use std::{mem, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n@@ -148,6 +148,7 @@ impl ChangeFixture {\n         let mut file_set = FileSet::default();\n         let source_root_prefix = \"/\".to_string();\n         let mut file_id = FileId(0);\n+        let mut roots = Vec::new();\n \n         let mut file_position = None;\n \n@@ -168,6 +169,10 @@ impl ChangeFixture {\n             let meta = FileMeta::from(entry);\n             assert!(meta.path.starts_with(&source_root_prefix));\n \n+            if meta.introduce_new_source_root {\n+                roots.push(SourceRoot::new_local(mem::take(&mut file_set)));\n+            }\n+\n             if let Some(krate) = meta.krate {\n                 let crate_name = CrateName::normalize_dashes(&krate);\n                 let crate_id = crate_graph.add_crate_root(\n@@ -215,7 +220,8 @@ impl ChangeFixture {\n             }\n         }\n \n-        change.set_roots(vec![SourceRoot::new_local(file_set)]);\n+        roots.push(SourceRoot::new_local(mem::take(&mut file_set)));\n+        change.set_roots(roots);\n         change.set_crate_graph(crate_graph);\n \n         ChangeFixture { file_position, files, change }\n@@ -229,6 +235,7 @@ struct FileMeta {\n     cfg: CfgOptions,\n     edition: Edition,\n     env: Env,\n+    introduce_new_source_root: bool,\n }\n \n impl From<Fixture> for FileMeta {\n@@ -247,6 +254,7 @@ impl From<Fixture> for FileMeta {\n                 .as_ref()\n                 .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n             env: f.env.into_iter().collect(),\n+            introduce_new_source_root: f.introduce_new_source_root,\n         }\n     }\n }"}, {"sha": "d0def21815bbe7c49999cee220484799dd637430", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -274,6 +274,33 @@ impl CrateGraph {\n         deps.into_iter()\n     }\n \n+    /// Returns an iterator over all transitive reverse dependencies of the given crate.\n+    pub fn transitive_reverse_dependencies(\n+        &self,\n+        of: CrateId,\n+    ) -> impl Iterator<Item = CrateId> + '_ {\n+        let mut worklist = vec![of];\n+        let mut rev_deps = FxHashSet::default();\n+        let mut inverted_graph = FxHashMap::<_, Vec<_>>::default();\n+        self.arena.iter().for_each(|(&krate, data)| {\n+            data.dependencies\n+                .iter()\n+                .for_each(|dep| inverted_graph.entry(dep.crate_id).or_default().push(krate))\n+        });\n+\n+        while let Some(krate) = worklist.pop() {\n+            if let Some(krate_rev_deps) = inverted_graph.get(&krate) {\n+                krate_rev_deps\n+                    .iter()\n+                    .copied()\n+                    .filter(|&rev_dep| rev_deps.insert(rev_dep))\n+                    .for_each(|rev_dep| worklist.push(rev_dep));\n+            }\n+        }\n+\n+        rev_deps.into_iter()\n+    }\n+\n     /// Returns all crates in the graph, sorted in topological order (ie. dependencies of a crate\n     /// come before the crate itself).\n     pub fn crates_in_topological_order(&self) -> Vec<CrateId> {"}, {"sha": "ad79a79f8c8da769fd31cfb9391989c7b1b68e3b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -60,6 +60,7 @@ use hir_ty::{\n     InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, Ty,\n     TyDefId, TyKind, TyVariableKind,\n };\n+use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n use syntax::{\n@@ -141,7 +142,6 @@ impl Crate {\n             .collect()\n     }\n \n-    // FIXME: add `transitive_reverse_dependencies`.\n     pub fn reverse_dependencies(self, db: &dyn HirDatabase) -> Vec<Crate> {\n         let crate_graph = db.crate_graph();\n         crate_graph\n@@ -153,6 +153,14 @@ impl Crate {\n             .collect()\n     }\n \n+    pub fn transitive_reverse_dependencies(self, db: &dyn HirDatabase) -> Vec<Crate> {\n+        db.crate_graph()\n+            .transitive_reverse_dependencies(self.id)\n+            .into_iter()\n+            .map(|id| Crate { id })\n+            .collect()\n+    }\n+\n     pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id);\n         Module { id: def_map.module_id(def_map.root()) }\n@@ -1541,11 +1549,17 @@ impl Impl {\n         };\n \n         let mut all = Vec::new();\n-        def_crates.into_iter().for_each(|id| {\n+        def_crates.iter().for_each(|&id| {\n             all.extend(db.inherent_impls_in_crate(id).all_impls().map(Self::from).filter(filter))\n         });\n         let fp = TyFingerprint::for_impl(&ty.value);\n-        for id in db.crate_graph().iter() {\n+        for id in def_crates\n+            .iter()\n+            .flat_map(|&id| Crate { id }.transitive_reverse_dependencies(db))\n+            .map(|Crate { id }| id)\n+            .chain(def_crates.iter().copied())\n+            .unique()\n+        {\n             match fp {\n                 Some(fp) => all.extend(\n                     db.trait_impls_in_crate(id).for_self_ty(fp).map(Self::from).filter(filter),\n@@ -1560,7 +1574,8 @@ impl Impl {\n     pub fn all_for_trait(db: &dyn HirDatabase, trait_: Trait) -> Vec<Impl> {\n         let krate = trait_.module(db).krate();\n         let mut all = Vec::new();\n-        for Crate { id } in krate.reverse_dependencies(db).into_iter().chain(Some(krate)) {\n+        for Crate { id } in krate.transitive_reverse_dependencies(db).into_iter().chain(Some(krate))\n+        {\n             let impls = db.trait_impls_in_crate(id);\n             all.extend(impls.for_trait(trait_.id).map(Self::from))\n         }"}, {"sha": "3796745306633c6877b5ee384c7e74cabb409dd1", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -1271,4 +1271,27 @@ fn foo(_: bool) -> bo$0ol { true }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_transitive() {\n+        check(\n+            r#\"\n+//- /level3.rs new_source_root: crate:level3\n+pub struct Fo$0o;\n+//- /level2.rs new_source_root: crate:level2 deps:level3\n+pub use level3::Foo;\n+//- /level1.rs new_source_root: crate:level1 deps:level2\n+pub use level2::Foo;\n+//- /level0.rs new_source_root: crate:level0 deps:level1\n+pub use level1::Foo;\n+\"#,\n+            expect![[r#\"\n+                Foo Struct FileId(0) 0..15 11..14\n+\n+                FileId(1) 16..19\n+                FileId(2) 16..19\n+                FileId(3) 16..19\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "f56221a6c69622427d775896436ab400c9fa2d57", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -260,7 +260,7 @@ impl Definition {\n             let mut res = source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>();\n \n             let krate = module.krate();\n-            for rev_dep in krate.reverse_dependencies(db) {\n+            for rev_dep in krate.transitive_reverse_dependencies(db) {\n                 let root_file = rev_dep.root_file(db);\n                 let source_root_id = db.file_source_root(root_file);\n                 let source_root = db.source_root(source_root_id);"}, {"sha": "6bc824e9437b93dc099593ff20f29523e6965c02", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -14,6 +14,7 @@ pub struct Fixture {\n     pub cfg_key_values: Vec<(String, String)>,\n     pub edition: Option<String>,\n     pub env: FxHashMap<String, String>,\n+    pub introduce_new_source_root: bool,\n }\n \n impl Fixture {\n@@ -70,6 +71,7 @@ impl Fixture {\n         let mut cfg_atoms = Vec::new();\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n+        let mut introduce_new_source_root = false;\n         for component in components[1..].iter() {\n             let (key, value) = split_once(component, ':').unwrap();\n             match key {\n@@ -91,11 +93,22 @@ impl Fixture {\n                         }\n                     }\n                 }\n+                \"new_source_root\" => introduce_new_source_root = true,\n                 _ => panic!(\"bad component: {:?}\", component),\n             }\n         }\n \n-        Fixture { path, text: String::new(), krate, deps, cfg_atoms, cfg_key_values, edition, env }\n+        Fixture {\n+            path,\n+            text: String::new(),\n+            krate,\n+            deps,\n+            cfg_atoms,\n+            cfg_key_values,\n+            edition,\n+            env,\n+            introduce_new_source_root,\n+        }\n     }\n }\n "}]}