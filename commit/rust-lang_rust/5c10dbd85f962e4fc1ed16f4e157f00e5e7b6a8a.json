{"sha": "5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "node_id": "C_kwDOAAsO6NoAKDVjMTBkYmQ4NWY5NjJlNGZjMWVkMTZmNGUxNTdmMDBlNWU3YjZhOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T16:10:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T16:10:37Z"}, "message": "Rollup merge of #92704 - 5225225:std_mem_transmute_ref_t_mut_t, r=michaelwoerister\n\nChange lint message to be stronger for &T -> &mut T transmute\n\nThe old message implied that it's only UB if you use the reference to mutate, which (as far as I know) is not true. As in, the following program has UB, and a &T -> &mut T transmute is effectively an `unreachable_unchecked`.\n\n```rust\nfn main() {\n    #[allow(mutable_transmutes)]\n    unsafe {\n        let _ = std::mem::transmute::<&i32, &mut i32>(&0);\n    }\n}\n```\n\nIn the future, it might be a good idea to use the edition system to make this a hard error, since I don't think it is *ever* defined behaviour? Unless we rule that `&UnsafeCell<i32> -> &mut i32` is fine. (That, and you always could just use `.get()`, so you're not losing anything)", "tree": {"sha": "028faa77af90be6df66d96c3cba5b28c6638ef62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/028faa77af90be6df66d96c3cba5b28c6638ef62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6Yl9CRBK7hj4Ov3rIwAAAlkIAEZHeRmX1sFduhi21cDabi4V\nmDUp7gFiE+VyTE5ck4dtnAI9Gi4KyBKdi7AFhV+MSr3HPXAmjKYoOP6A8QU5V15i\nj72IYYg6/x8Ydbgc0I+ANFp5lhcz4bv3BXM5OG6MDaNBasWoY9e020fnZ/MiRe17\nv0FuxfDhzBcSOFW0R5/2it77aLW6z9LYN/iC2keGHpkzl2qI+wbWaOHKnTYIqwmS\nfVPQc51aJbGo2oedsxbRdqTo/3NDfJKxhbdFIV9nwSYABEuggG4P7y4Dr/EkAlyb\nU3kZCwHeMZz0JR99sEDzZeEos8erPRnL2qCeQbNkwy/AeITySDRTrSFA9yUEO0U=\n=lWa3\n-----END PGP SIGNATURE-----\n", "payload": "tree 028faa77af90be6df66d96c3cba5b28c6638ef62\nparent 1839829f0a88a5835d3b85043d69b12d056ea191\nparent 36a11417fafcbfae0500884df2d4b6dd2c5e5a0f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642695037 +0100\ncommitter GitHub <noreply@github.com> 1642695037 +0100\n\nRollup merge of #92704 - 5225225:std_mem_transmute_ref_t_mut_t, r=michaelwoerister\n\nChange lint message to be stronger for &T -> &mut T transmute\n\nThe old message implied that it's only UB if you use the reference to mutate, which (as far as I know) is not true. As in, the following program has UB, and a &T -> &mut T transmute is effectively an `unreachable_unchecked`.\n\n```rust\nfn main() {\n    #[allow(mutable_transmutes)]\n    unsafe {\n        let _ = std::mem::transmute::<&i32, &mut i32>(&0);\n    }\n}\n```\n\nIn the future, it might be a good idea to use the edition system to make this a hard error, since I don't think it is *ever* defined behaviour? Unless we rule that `&UnsafeCell<i32> -> &mut i32` is fine. (That, and you always could just use `.get()`, so you're not losing anything)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "html_url": "https://github.com/rust-lang/rust/commit/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1839829f0a88a5835d3b85043d69b12d056ea191", "url": "https://api.github.com/repos/rust-lang/rust/commits/1839829f0a88a5835d3b85043d69b12d056ea191", "html_url": "https://github.com/rust-lang/rust/commit/1839829f0a88a5835d3b85043d69b12d056ea191"}, {"sha": "36a11417fafcbfae0500884df2d4b6dd2c5e5a0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a11417fafcbfae0500884df2d4b6dd2c5e5a0f", "html_url": "https://github.com/rust-lang/rust/commit/36a11417fafcbfae0500884df2d4b6dd2c5e5a0f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "38e1669d331977ed5207eba26218ed452f1008dd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "patch": "@@ -1247,7 +1247,7 @@ declare_lint! {\n     /// [`UnsafeCell`]: https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\n     MUTABLE_TRANSMUTES,\n     Deny,\n-    \"mutating transmuted &mut T from &T may cause undefined behavior\"\n+    \"transmuting &T to &mut T is undefined behavior, even if the reference is unused\"\n }\n \n declare_lint_pass!(MutableTransmutes => [MUTABLE_TRANSMUTES]);\n@@ -1259,8 +1259,8 @@ impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n             get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (ty1.kind(), ty2.kind()))\n         {\n             if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {\n-                let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n-                               consider instead using an UnsafeCell\";\n+                let msg = \"transmuting &T to &mut T is undefined behavior, \\\n+                    even if the reference is unused, consider instead using an UnsafeCell\";\n                 cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| lint.build(msg).emit());\n             }\n         }"}, {"sha": "9f3f76c1ef3e0c91452c7d13f458703485e142cc", "filename": "src/test/ui/transmute/transmute-imut-to-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.rs?ref=5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "patch": "@@ -4,5 +4,5 @@ use std::mem::transmute;\n \n fn main() {\n     let _a: &mut u8 = unsafe { transmute(&1u8) };\n-    //~^ ERROR mutating transmuted &mut T from &T may cause undefined behavior\n+    //~^ ERROR transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n }"}, {"sha": "1e9dff3ce89b26071e6db0ccb1c7deec0337e91a", "filename": "src/test/ui/transmute/transmute-imut-to-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr?ref=5c10dbd85f962e4fc1ed16f4e157f00e5e7b6a8a", "patch": "@@ -1,4 +1,4 @@\n-error: mutating transmuted &mut T from &T may cause undefined behavior, consider instead using an UnsafeCell\n+error: transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n   --> $DIR/transmute-imut-to-mut.rs:6:32\n    |\n LL |     let _a: &mut u8 = unsafe { transmute(&1u8) };"}]}