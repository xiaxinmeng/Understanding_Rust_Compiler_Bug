{"sha": "f3bd222ad9e30245aef89d41defd378eefed70f4", "node_id": "C_kwDOAAsO6NoAKGYzYmQyMjJhZDllMzAyNDVhZWY4OWQ0MWRlZmQzNzhlZWZlZDcwZjQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T09:56:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-25T13:27:58Z"}, "message": "Bubble the opaque type ordering int opaque type handling", "tree": {"sha": "230148b54a76c57f0bcc2db9bea4dfb1f886ef50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/230148b54a76c57f0bcc2db9bea4dfb1f886ef50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3bd222ad9e30245aef89d41defd378eefed70f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bd222ad9e30245aef89d41defd378eefed70f4", "html_url": "https://github.com/rust-lang/rust/commit/f3bd222ad9e30245aef89d41defd378eefed70f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3bd222ad9e30245aef89d41defd378eefed70f4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196a429a671209531422a3895140fc16745ac4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/196a429a671209531422a3895140fc16745ac4ea", "html_url": "https://github.com/rust-lang/rust/commit/196a429a671209531422a3895140fc16745ac4ea"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "a982f11f7187fa7703f46bf1eb5f81694479f272", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3bd222ad9e30245aef89d41defd378eefed70f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bd222ad9e30245aef89d41defd378eefed70f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=f3bd222ad9e30245aef89d41defd378eefed70f4", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             return Ok(InferOk { value: (), obligations: vec![] });\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n-        let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n+        let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n             ty::Opaque(def_id, substs) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n                 let origin = match self.defining_use_anchor {\n@@ -169,13 +169,14 @@ impl<'tcx> InferCtxt<'tcx> {\n                     param_env,\n                     b,\n                     origin,\n+                    a_is_expected,\n                 ))\n             }\n             _ => None,\n         };\n-        if let Some(res) = process(a, b) {\n+        if let Some(res) = process(a, b, true) {\n             res\n-        } else if let Some(res) = process(b, a) {\n+        } else if let Some(res) = process(b, a, false) {\n             res\n         } else {\n             let (a, b) = self.resolve_vars_if_possible((a, b));\n@@ -514,13 +515,14 @@ impl UseKind {\n \n impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n-    pub fn register_hidden_type(\n+    fn register_hidden_type(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         hidden_ty: Ty<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n+        a_is_expected: bool,\n     ) -> InferResult<'tcx, ()> {\n         let tcx = self.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n@@ -539,7 +541,8 @@ impl<'tcx> InferCtxt<'tcx> {\n             origin,\n         );\n         if let Some(prev) = prev {\n-            obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n+            obligations =\n+                self.at(&cause, param_env).eq_exp(a_is_expected, prev, hidden_ty)?.obligations;\n         }\n \n         let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());"}]}