{"sha": "59782f4829db1afed5a3d50d03709711b8dd16e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzgyZjQ4MjlkYjFhZmVkNWEzZDUwZDAzNzA5NzExYjhkZDE2ZTA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-18T07:07:31Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-18T08:00:22Z"}, "message": "in which the unused shorthand field pattern debacle/saga continues\n\nIn e4b1a79 (#47922), we corrected erroneous suggestions for unused\nshorthand field pattern bindings, suggesting `field: _` where the\nprevious suggestion of `_field` wouldn't even have compiled\n(#47390). Soon, it was revealed that this was insufficient (#50303), and\nthe fix was extended to references, slices, &c. (#50327) But even this\nproved inadequate, as the erroneous suggestions were still being issued\nfor patterns in local (`let`) bindings (#50804). Here, we yank the\nshorthand-detection and variable/node registration code into a new\ncommon function that can be called while visiting both match arms and\n`let` bindings.\n\nResolves #50804.", "tree": {"sha": "f1bdade80cd28db670a0614d3ef5658901574de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1bdade80cd28db670a0614d3ef5658901574de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59782f4829db1afed5a3d50d03709711b8dd16e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59782f4829db1afed5a3d50d03709711b8dd16e0", "html_url": "https://github.com/rust-lang/rust/commit/59782f4829db1afed5a3d50d03709711b8dd16e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59782f4829db1afed5a3d50d03709711b8dd16e0/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc07a48f6797a20b3ee04fcff6f6c64bf0443bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc07a48f6797a20b3ee04fcff6f6c64bf0443bc", "html_url": "https://github.com/rust-lang/rust/commit/dfc07a48f6797a20b3ee04fcff6f6c64bf0443bc"}], "stats": {"total": 151, "additions": 80, "deletions": 71}, "files": [{"sha": "3db8c746713fd3f7cf64202b28804ba5029cef2e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 50, "deletions": 56, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=59782f4829db1afed5a3d50d03709711b8dd16e0", "patch": "@@ -117,6 +117,7 @@ use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use syntax::ast::{self, NodeId};\n+use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n@@ -398,72 +399,65 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n-fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n-    local.pat.each_binding(|_, p_id, sp, path1| {\n-        debug!(\"adding local variable {}\", p_id);\n+fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n+    // For struct patterns, take note of which fields used shorthand\n+    // (`x` rather than `x: x`).\n+    //\n+    // FIXME: according to the rust-lang-nursery/rustc-guide book, `NodeId`s are to be\n+    // phased out in favor of `HirId`s; however, we need to match the signature of\n+    // `each_binding`, which uses `NodeIds`.\n+    let mut shorthand_field_ids = NodeSet();\n+    let mut pats = VecDeque::new();\n+    pats.push_back(pat);\n+    while let Some(pat) = pats.pop_front() {\n+        use hir::PatKind::*;\n+        match pat.node {\n+            Binding(_, _, _, ref inner_pat) => {\n+                pats.extend(inner_pat.iter());\n+            }\n+            Struct(_, ref fields, _) => {\n+                for field in fields {\n+                    if field.node.is_shorthand {\n+                        shorthand_field_ids.insert(field.node.pat.id);\n+                    }\n+                }\n+            }\n+            Ref(ref inner_pat, _) |\n+            Box(ref inner_pat) => {\n+                pats.push_back(inner_pat);\n+            }\n+            TupleStruct(_, ref inner_pats, _) |\n+            Tuple(ref inner_pats, _) => {\n+                pats.extend(inner_pats.iter());\n+            }\n+            Slice(ref pre_pats, ref inner_pat, ref post_pats) => {\n+                pats.extend(pre_pats.iter());\n+                pats.extend(inner_pat.iter());\n+                pats.extend(post_pats.iter());\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    pat.each_binding(|_bm, p_id, _sp, path1| {\n         let name = path1.node;\n-        ir.add_live_node_for_node(p_id, VarDefNode(sp));\n+        ir.add_live_node_for_node(p_id, VarDefNode(path1.span));\n         ir.add_variable(Local(LocalInfo {\n             id: p_id,\n             name,\n-            is_shorthand: false,\n+            is_shorthand: shorthand_field_ids.contains(&p_id)\n         }));\n     });\n+}\n+\n+fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n+    add_from_pat(ir, &local.pat);\n     intravisit::walk_local(ir, local);\n }\n \n fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n-    for mut pat in &arm.pats {\n-        // For struct patterns, take note of which fields used shorthand\n-        // (`x` rather than `x: x`).\n-        //\n-        // FIXME: according to the rust-lang-nursery/rustc-guide book, `NodeId`s are to be\n-        // phased out in favor of `HirId`s; however, we need to match the signature of\n-        // `each_binding`, which uses `NodeIds`.\n-        let mut shorthand_field_ids = NodeSet();\n-        let mut pats = VecDeque::new();\n-        pats.push_back(pat);\n-        while let Some(pat) = pats.pop_front() {\n-            use hir::PatKind::*;\n-            match pat.node {\n-                Binding(_, _, _, ref inner_pat) => {\n-                    pats.extend(inner_pat.iter());\n-                }\n-                Struct(_, ref fields, _) => {\n-                    for field in fields {\n-                        if field.node.is_shorthand {\n-                            shorthand_field_ids.insert(field.node.pat.id);\n-                        }\n-                    }\n-                }\n-                Ref(ref inner_pat, _) |\n-                Box(ref inner_pat) => {\n-                    pats.push_back(inner_pat);\n-                }\n-                TupleStruct(_, ref inner_pats, _) |\n-                Tuple(ref inner_pats, _) => {\n-                    pats.extend(inner_pats.iter());\n-                }\n-                Slice(ref pre_pats, ref inner_pat, ref post_pats) => {\n-                    pats.extend(pre_pats.iter());\n-                    pats.extend(inner_pat.iter());\n-                    pats.extend(post_pats.iter());\n-                }\n-                _ => {}\n-            }\n-        }\n-\n-        pat.each_binding(|bm, p_id, _sp, path1| {\n-            debug!(\"adding local variable {} from match with bm {:?}\",\n-                   p_id, bm);\n-            let name = path1.node;\n-            ir.add_live_node_for_node(p_id, VarDefNode(path1.span));\n-            ir.add_variable(Local(LocalInfo {\n-                id: p_id,\n-                name: name,\n-                is_shorthand: shorthand_field_ids.contains(&p_id)\n-            }));\n-        })\n+    for pat in &arm.pats {\n+        add_from_pat(ir, pat);\n     }\n     intravisit::walk_arm(ir, arm);\n }"}, {"sha": "bac3f00ffc79d85bdaeee5c2e1eddae826725f5a", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=59782f4829db1afed5a3d50d03709711b8dd16e0", "patch": "@@ -20,6 +20,11 @@ struct SoulHistory {\n     endless_and_singing: bool\n }\n \n+struct LovelyAmbition {\n+    lips: usize,\n+    fire: usize\n+}\n+\n #[derive(Clone, Copy)]\n enum Large {\n     Suit { case: () }\n@@ -45,6 +50,10 @@ fn main() {\n         hours_are_suns = false;\n     }\n \n+    let the_spirit = LovelyAmbition { lips: 1, fire: 2 };\n+    let LovelyAmbition { lips, fire } = the_spirit;\n+    println!(\"{}\", lips);\n+\n     let bag = Large::Suit {\n         case: ()\n     };"}, {"sha": "a8b0e3e4250ea751410c6b07e0425e4ed682cf35", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59782f4829db1afed5a3d50d03709711b8dd16e0/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=59782f4829db1afed5a3d50d03709711b8dd16e0", "patch": "@@ -1,5 +1,5 @@\n warning: unused variable: `i_think_continually`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:31:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:36:9\n    |\n LL |     let i_think_continually = 2;\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n@@ -12,39 +12,39 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n warning: unused variable: `mut_unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:13\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:43:13\n    |\n LL |     let mut mut_unused_var = 1;\n    |             ^^^^^^^^^^^^^^ help: consider using `_mut_unused_var` instead\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:14\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |              ^^^ help: consider using `_var` instead\n \n warning: unused variable: `unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:19\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:19\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |                   ^^^^^^^^^^ help: consider using `_unused_var` instead\n \n warning: unused variable: `corridors_of_light`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:42:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:47:26\n    |\n LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:43:30\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:48:30\n    |\n LL |                          mut hours_are_suns,\n    |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n \n warning: value assigned to `hours_are_suns` is never read\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:50:9\n    |\n LL |         hours_are_suns = false;\n    |         ^^^^^^^^^^^^^^\n@@ -56,44 +56,50 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n    = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n \n+warning: unused variable: `fire`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:54:32\n+   |\n+LL |     let LovelyAmbition { lips, fire } = the_spirit;\n+   |                                ^^^^ help: try ignoring the field: `fire: _`\n+\n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:54:23\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:63:23\n    |\n LL |         Large::Suit { case } => {}\n    |                       ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:59:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:68:24\n    |\n LL |         &Large::Suit { case } => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:64:27\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:73:27\n    |\n LL |         box Large::Suit { case } => {}\n    |                           ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:69:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:78:24\n    |\n LL |         (Large::Suit { case },) => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:74:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:83:24\n    |\n LL |         [Large::Suit { case }] => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:79:29\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:88:29\n    |\n LL |         Tuple(Large::Suit { case }, ()) => {}\n    |                             ^^^^ help: try ignoring the field: `case: _`\n \n warning: variable does not need to be mutable\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:43:9\n    |\n LL |     let mut mut_unused_var = 1;\n    |         ----^^^^^^^^^^^^^^\n@@ -108,7 +114,7 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: #[warn(unused_mut)] implied by #[warn(unused)]\n \n warning: variable does not need to be mutable\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:10\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:10\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |          ----^^^"}]}