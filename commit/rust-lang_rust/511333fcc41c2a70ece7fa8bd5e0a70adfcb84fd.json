{"sha": "511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "node_id": "C_kwDOAAsO6NoAKDUxMTMzM2ZjYzQxYzJhNzBlY2U3ZmE4YmQ1ZTBhNzBhZGZjYjg0ZmQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-11T22:24:55Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-25T00:08:41Z"}, "message": "Use Rvalue::ShallowInitBox for box expression", "tree": {"sha": "68086121d0acbac0a45b66d1c53312ed24b2903c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68086121d0acbac0a45b66d1c53312ed24b2903c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "html_url": "https://github.com/rust-lang/rust/commit/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "html_url": "https://github.com/rust-lang/rust/commit/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "1464ea58ad02c6581fc0c298d015745e04340534", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "patch": "@@ -5,6 +5,7 @@ use rustc_index::vec::Idx;\n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n@@ -88,6 +89,56 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Box { value } => {\n                 let value = &this.thir[value];\n+                let tcx = this.tcx;\n+\n+                // `exchange_malloc` is unsafe but box is safe, so need a new scope.\n+                let synth_scope = this.new_source_scope(\n+                    expr_span,\n+                    LintLevel::Inherited,\n+                    Some(Safety::BuiltinUnsafe),\n+                );\n+                let synth_info = SourceInfo { span: expr_span, scope: synth_scope };\n+\n+                let size = this.temp(tcx.types.usize, expr_span);\n+                this.cfg.push_assign(\n+                    block,\n+                    synth_info,\n+                    size,\n+                    Rvalue::NullaryOp(NullOp::SizeOf, value.ty),\n+                );\n+\n+                let align = this.temp(tcx.types.usize, expr_span);\n+                this.cfg.push_assign(\n+                    block,\n+                    synth_info,\n+                    align,\n+                    Rvalue::NullaryOp(NullOp::AlignOf, value.ty),\n+                );\n+\n+                // malloc some memory of suitable size and align:\n+                let exchange_malloc = Operand::function_handle(\n+                    tcx,\n+                    tcx.require_lang_item(LangItem::ExchangeMalloc, Some(expr_span)),\n+                    ty::List::empty(),\n+                    expr_span,\n+                );\n+                let storage = this.temp(tcx.mk_mut_ptr(tcx.types.u8), expr_span);\n+                let success = this.cfg.start_new_block();\n+                this.cfg.terminate(\n+                    block,\n+                    synth_info,\n+                    TerminatorKind::Call {\n+                        func: exchange_malloc,\n+                        args: vec![Operand::Move(size), Operand::Move(align)],\n+                        destination: Some((Place::from(storage), success)),\n+                        cleanup: None,\n+                        from_hir_call: false,\n+                        fn_span: expr_span,\n+                    },\n+                );\n+                this.diverge_from(block);\n+                block = success;\n+\n                 // The `Box<T>` temporary created here is not a part of the HIR,\n                 // and therefore is not considered during generator auto-trait\n                 // determination. See the comment about `box` at `yield_in_scope`.\n@@ -101,8 +152,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.schedule_drop_storage_and_value(expr_span, scope, result);\n                 }\n \n-                // malloc some memory of suitable type (thus far, uninitialized):\n-                let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n+                // Transmute `*mut u8` to the box (thus far, uninitialized):\n+                let box_ = Rvalue::ShallowInitBox(Operand::Move(Place::from(storage)), value.ty);\n                 this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:"}, {"sha": "4a5b0fcf03709ff944fe4e612327bbeaee3cb70e", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=511333fcc41c2a70ece7fa8bd5e0a70adfcb84fd", "patch": "@@ -307,7 +307,6 @@ unsafe impl Allocator for Global {\n }\n \n /// The allocator for unique pointers.\n-// This function must not unwind. If it does, MIR codegen will fail.\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n #[lang = \"exchange_malloc\"]\n #[inline]"}]}