{"sha": "ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2M2ODBmOWNjMjZiNWIyY2IyZjQ1M2E4OWRiY2Y4MTQ0ZjhiOWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-12T20:50:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-14T16:25:19Z"}, "message": "Fix test fallout from removing vecs_implicitly_copyable", "tree": {"sha": "8f3f8634548c02309d281d6cdbfd7b34b7ea8c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3f8634548c02309d281d6cdbfd7b34b7ea8c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "html_url": "https://github.com/rust-lang/rust/commit/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5614e83e817a1d15286a1d4eeb6b665ddf5fe3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5614e83e817a1d15286a1d4eeb6b665ddf5fe3cb", "html_url": "https://github.com/rust-lang/rust/commit/5614e83e817a1d15286a1d4eeb6b665ddf5fe3cb"}], "stats": {"total": 114, "additions": 52, "deletions": 62}, "files": [{"sha": "12740a5616b8dd30e589a3c90cbd1ea46563c63d", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -60,20 +60,16 @@\n             if not re.search(r\"\\bextern mod std\\b\", block):\n                 block = \"extern mod std;\\n\" + block\n             block = \"\"\"#[ forbid(ctypes) ];\n-#[ forbid(deprecated_mode) ];\n #[ forbid(deprecated_pattern) ];\n #[ forbid(implicit_copies) ];\n #[ forbid(non_implicitly_copyable_typarams) ];\n #[ forbid(path_statement) ];\n #[ forbid(type_limits) ];\n #[ forbid(unrecognized_lint) ];\n #[ forbid(unused_imports) ];\n-#[ forbid(vecs_implicitly_copyable) ];\n #[ forbid(while_true) ];\n \n-#[ warn(deprecated_self) ];\n-#[ warn(non_camel_case_types) ];\n-#[ warn(structural_records) ];\\n\n+#[ warn(non_camel_case_types) ];\\n\n \"\"\" + block\n             if xfail:\n                 block = \"// xfail-test\\n\" + block"}, {"sha": "59a715e7f9062f5d4f291396bac6dd32953e4157", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -134,7 +134,7 @@ pub fn stash_expr_if(c: @fn(@ast::expr, test_mode)->bool,\n                      e: @ast::expr,\n                      tm: test_mode) {\n     if c(e, tm) {\n-        *es += ~[e];\n+        *es = *es + ~[e];\n     } else {\n         /* now my indices are wrong :( */\n     }"}, {"sha": "dae4bb69c618bc6b8b93a253d35a3fea7055c023", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -102,7 +102,6 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n \n #[cfg(test)]\n mod test {\n-    use core;\n     use core::iter;\n     use util::enum_set::*;\n "}, {"sha": "35cbe394b86a3a5a8b13de7173b3eddb307c5df2", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -103,7 +103,7 @@ fn parse_item_attrs<T:Owned>(\n     id: doc::AstId,\n     parse_attrs: ~fn(a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |ctxt| {\n-        let attrs = match *ctxt.ast_map.get(&id) {\n+        let attrs = match ctxt.ast_map.get_copy(&id) {\n             ast_map::node_item(item, _) => copy item.attrs,\n             ast_map::node_foreign_item(item, _, _, _) => copy item.attrs,\n             _ => fail!(\"parse_item_attrs: not an item\")\n@@ -127,7 +127,7 @@ fn fold_enum(\n             let desc = {\n                 let variant = copy variant;\n                 do astsrv::exec(srv.clone()) |ctxt| {\n-                    match *ctxt.ast_map.get(&doc_id) {\n+                    match ctxt.ast_map.get_copy(&doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n@@ -177,7 +177,7 @@ fn merge_method_attrs(\n \n     // Create an assoc list from method name to attributes\n     let attrs: ~[(~str, Option<~str>)] = do astsrv::exec(srv) |ctxt| {\n-        match *ctxt.ast_map.get(&item_id) {\n+        match ctxt.ast_map.get_copy(&item_id) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_trait(_, _, ref methods), _\n             }, _) => {"}, {"sha": "c7fe29b3296e6303adac38147860089b08c941ae", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -53,7 +53,7 @@ fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n \n     let id = doc.id;\n     do astsrv::exec(srv) |ctxt| {\n-        let attrs = match *ctxt.ast_map.get(&id) {\n+        let attrs = match ctxt.ast_map.get_copy(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           _ => ~[]\n         };"}, {"sha": "086b5f476016c1eb9e9b644bcd0a422f5cc3ac2b", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -55,7 +55,7 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     do astsrv::exec(fold.ctxt.clone()) |ctxt| {\n-        match *ctxt.ast_map.get(&doc.item.id) {\n+        match ctxt.ast_map.get_copy(&doc.item.id) {\n             ast_map::node_item(item, _) => {\n                 match item.node {\n                     ast::item_impl(_, None, _, ref methods) => {\n@@ -134,7 +134,7 @@ fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n     let id = doc.id;\n \n     do astsrv::exec(srv) |ctxt| {\n-        match *ctxt.ast_map.get(&id) {\n+        match ctxt.ast_map.get_copy(&id) {\n             ast_map::node_item(item, _) => {\n                 match &item.node {\n                     &ast::item_impl(*) => {"}, {"sha": "bd6777df4afdf3dc045541bad4dc64dd963dcdc8", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -63,7 +63,7 @@ fn fold_fn(\n \n fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match *ctxt.ast_map.get(&fn_id) {\n+        match ctxt.ast_map.get_copy(&fn_id) {\n             ast_map::node_item(@ast::item {\n                 ident: ident,\n                 node: ast::item_fn(ref decl, purity, _, ref tys, _), _\n@@ -90,7 +90,7 @@ fn fold_const(\n         sig: Some({\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match *ctxt.ast_map.get(&doc.id()) {\n+                match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n                         node: ast::item_const(ty, _), _\n                     }, _) => {\n@@ -115,7 +115,7 @@ fn fold_enum(\n             let sig = {\n                 let variant = copy *variant;\n                 do astsrv::exec(srv.clone()) |ctxt| {\n-                    match *ctxt.ast_map.get(&doc_id) {\n+                    match ctxt.ast_map.get_copy(&doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n@@ -170,7 +170,7 @@ fn get_method_sig(\n     method_name: ~str\n ) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match *ctxt.ast_map.get(&item_id) {\n+        match ctxt.ast_map.get_copy(&item_id) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_trait(_, _, ref methods), _\n             }, _) => {\n@@ -241,7 +241,7 @@ fn fold_impl(\n     let (bounds, trait_types, self_ty) = {\n         let doc = copy doc;\n         do astsrv::exec(srv) |ctxt| {\n-            match *ctxt.ast_map.get(&doc.id()) {\n+            match ctxt.ast_map.get_copy(&doc.id()) {\n                 ast_map::node_item(@ast::item {\n                     node: ast::item_impl(ref generics, opt_trait_type, self_ty, _), _\n                 }, _) => {\n@@ -280,7 +280,7 @@ fn fold_type(\n         sig: {\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match *ctxt.ast_map.get(&doc.id()) {\n+                match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n                         ident: ident,\n                         node: ast::item_ty(ty, ref params), _\n@@ -312,7 +312,7 @@ fn fold_struct(\n         sig: {\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match *ctxt.ast_map.get(&doc.id()) {\n+                match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(item, _) => {\n                         let item = strip_struct_extra_stuff(item);\n                         Some(pprust::item_to_str(item,"}, {"sha": "884f0a73589dc1334241f45e0df752661d52f7c0", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -41,6 +41,7 @@ use context::Ctx;\n mod conditions;\n mod context;\n mod path_util;\n+#[cfg(test)]\n mod tests;\n mod util;\n mod workspace;"}, {"sha": "7f0bfa250865e809e13cd26dfdb1590d9e2055d8", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -77,7 +77,6 @@ fn is_rwx(p: &Path) -> bool {\n     }\n }\n \n-#[cfg(test)]\n fn test_sysroot() -> Path {\n     // Totally gross hack but it's just for test cases.\n     // Infer the sysroot from the exe name and tack \"stage2\"\n@@ -107,19 +106,19 @@ fn test_install_valid() {\n     let temp_pkg_id = fake_pkg();\n     let temp_workspace = mk_temp_workspace(&temp_pkg_id.path);\n     // should have test, bench, lib, and main\n-    ctxt.install(&temp_workspace, temp_pkg_id);\n+    ctxt.install(&temp_workspace, &temp_pkg_id);\n     // Check that all files exist\n-    let exec = target_executable_in_workspace(temp_pkg_id, &temp_workspace);\n+    let exec = target_executable_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"exec = %s\", exec.to_str());\n     assert!(os::path_exists(&exec));\n     assert!(is_rwx(&exec));\n-    let lib = target_library_in_workspace(temp_pkg_id, &temp_workspace);\n+    let lib = target_library_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"lib = %s\", lib.to_str());\n     assert!(os::path_exists(&lib));\n     assert!(is_rwx(&lib));\n     // And that the test and bench executables aren't installed\n-    assert!(!os::path_exists(&target_test_in_workspace(temp_pkg_id, &temp_workspace)));\n-    let bench = target_bench_in_workspace(temp_pkg_id, &temp_workspace);\n+    assert!(!os::path_exists(&target_test_in_workspace(&temp_pkg_id, &temp_workspace)));\n+    let bench = target_bench_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"bench = %s\", bench.to_str());\n     assert!(!os::path_exists(&bench));\n }\n@@ -140,7 +139,7 @@ fn test_install_invalid() {\n         do cond.trap(|_| {\n             error_occurred = true;\n         }).in {\n-            ctxt.install(&temp_workspace, pkgid);\n+            ctxt.install(&temp_workspace, &pkgid);\n         }\n     }\n     assert!(error_occurred && error1_occurred);\n@@ -155,19 +154,19 @@ fn test_install_url() {\n     let temp_pkg_id = remote_pkg();\n     let temp_workspace = mk_temp_workspace(&temp_pkg_id.path);\n     // should have test, bench, lib, and main\n-    ctxt.install(&temp_workspace, temp_pkg_id);\n+    ctxt.install(&temp_workspace, &temp_pkg_id);\n     // Check that all files exist\n-    let exec = target_executable_in_workspace(temp_pkg_id, &temp_workspace);\n+    let exec = target_executable_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"exec = %s\", exec.to_str());\n     assert!(os::path_exists(&exec));\n     assert!(is_rwx(&exec));\n-    let lib = target_library_in_workspace(temp_pkg_id, &temp_workspace);\n+    let lib = target_library_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"lib = %s\", lib.to_str());\n     assert!(os::path_exists(&lib));\n     assert!(is_rwx(&lib));\n     // And that the test and bench executables aren't installed\n-    assert!(!os::path_exists(&target_test_in_workspace(temp_pkg_id, &temp_workspace)));\n-    let bench = target_bench_in_workspace(temp_pkg_id, &temp_workspace);\n+    assert!(!os::path_exists(&target_test_in_workspace(&temp_pkg_id, &temp_workspace)));\n+    let bench = target_bench_in_workspace(&temp_pkg_id, &temp_workspace);\n     debug!(\"bench = %s\", bench.to_str());\n     assert!(!os::path_exists(&bench));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e9c4b7fde5548f150587f8a4a237a55a9fdbd5b1", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -23,7 +23,7 @@ use syntax::codemap::{dummy_sp, spanned, dummy_spanned};\n use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::ext::build;\n use syntax::{ast, attr, codemap, diagnostic, fold};\n-use syntax::ast::{meta_name_value, meta_list, attribute, crate_};\n+use syntax::ast::{meta_name_value, meta_list, attribute};\n use syntax::attr::{mk_attr};\n use rustc::back::link::output_type_exe;\n use rustc::driver::session::{lib_crate, unknown_crate, crate_type};"}, {"sha": "212ceadf912c8a8288c136c3eb23e5ea3a601b7d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -679,19 +679,19 @@ mod test {\n     #[test] fn xorpush_test () {\n         let mut s = ~[];\n         xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n+        assert_eq!(copy s,~[14]);\n         xorPush(&mut s,14);\n-        assert_eq!(s,~[]);\n+        assert_eq!(copy s,~[]);\n         xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n+        assert_eq!(copy s,~[14]);\n         xorPush(&mut s,15);\n-        assert_eq!(s,~[14,15]);\n+        assert_eq!(copy s,~[14,15]);\n         xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15,16]);\n+        assert_eq!(copy s,~[14,15,16]);\n         xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15]);\n+        assert_eq!(copy s,~[14,15]);\n         xorPush (&mut s,15);\n-        assert_eq! (s,~[14]);\n+        assert_eq!(copy s,~[14]);\n     }\n \n     // convert a list of uints to an @~[ident]\n@@ -746,7 +746,7 @@ mod test {\n         let mut t = mk_sctable();\n \n         let test_sc = ~[M(3),R(id(101,0),14),M(9)];\n-        assert_eq!(unfold_test_sc(test_sc,empty_ctxt,&mut t),3);\n+        assert_eq!(unfold_test_sc(copy test_sc,empty_ctxt,&mut t),3);\n         assert_eq!(t[1],Mark(9,0));\n         assert_eq!(t[2],Rename(id(101,0),14,1));\n         assert_eq!(t[3],Mark(3,2));"}, {"sha": "9afbe1e479d66e8d23619662f1936215ca1fc995", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -662,12 +662,11 @@ mod test {\n     #[test] fn fail_exists_test () {\n         let src = ~\"fn main() { fail!(\\\"something appropriately gloomy\\\");}\";\n         let sess = parse::new_parse_sess(None);\n-        let cfg = ~[];\n         let crate_ast = parse::parse_crate_from_source_str(\n             ~\"<test>\",\n             @src,\n-            cfg,sess);\n-        expand_crate(sess,cfg,crate_ast);\n+            ~[],sess);\n+        expand_crate(sess,~[],crate_ast);\n     }\n \n     // these following tests are quite fragile, in that they don't test what\n@@ -679,13 +678,12 @@ mod test {\n         let src = ~\"fn bogus() {macro_rules! z (() => (3+4))}\\\n                     fn inty() -> int { z!() }\";\n         let sess = parse::new_parse_sess(None);\n-        let cfg = ~[];\n         let crate_ast = parse::parse_crate_from_source_str(\n             ~\"<test>\",\n             @src,\n-            cfg,sess);\n+            ~[],sess);\n         // should fail:\n-        expand_crate(sess,cfg,crate_ast);\n+        expand_crate(sess,~[],crate_ast);\n     }\n \n     // make sure that macros can leave scope for modules\n@@ -694,27 +692,25 @@ mod test {\n         let src = ~\"mod foo {macro_rules! z (() => (3+4))}\\\n                     fn inty() -> int { z!() }\";\n         let sess = parse::new_parse_sess(None);\n-        let cfg = ~[];\n         let crate_ast = parse::parse_crate_from_source_str(\n             ~\"<test>\",\n             @src,\n-            cfg,sess);\n+            ~[],sess);\n         // should fail:\n-        expand_crate(sess,cfg,crate_ast);\n+        expand_crate(sess,~[],crate_ast);\n     }\n \n     // macro_escape modules shouldn't cause macros to leave scope\n     #[test] fn macros_can_escape_flattened_mods_test () {\n         let src = ~\"#[macro_escape] mod foo {macro_rules! z (() => (3+4))}\\\n                     fn inty() -> int { z!() }\";\n         let sess = parse::new_parse_sess(None);\n-        let cfg = ~[];\n         let crate_ast = parse::parse_crate_from_source_str(\n             ~\"<test>\",\n             @src,\n-            cfg,sess);\n+            ~[], sess);\n         // should fail:\n-        expand_crate(sess,cfg,crate_ast);\n+        expand_crate(sess,~[],crate_ast);\n     }\n \n     #[test] fn core_macros_must_parse () {"}, {"sha": "9a8a6620652346f0b4673e60bfa5228bc1e18ac0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -351,15 +351,14 @@ mod test {\n     use core::option::None;\n     use core::int;\n     use core::num::NumCast;\n-    use core::path::Path;\n-    use codemap::{dummy_sp, CodeMap, span, BytePos, spanned};\n+    use codemap::{CodeMap, span, BytePos, spanned};\n     use opt_vec;\n     use ast;\n     use abi;\n     use ast_util::mk_ident;\n     use parse::parser::Parser;\n-    use parse::token::{ident_interner, mk_ident_interner, mk_fresh_ident_interner};\n-    use diagnostic::{span_handler, mk_span_handler, mk_handler, Emitter};\n+    use parse::token::{ident_interner, mk_fresh_ident_interner};\n+    use diagnostic::{mk_span_handler, mk_handler};\n \n     // add known names to interner for testing\n     fn mk_testing_interner() -> @ident_interner {\n@@ -408,7 +407,7 @@ mod test {\n \n     // map a string to tts, return the tt without its parsesess\n     fn string_to_tts_only(source_str : @~str) -> ~[ast::token_tree] {\n-        let (tts,ps) = string_to_tts_t(source_str);\n+        let (tts,_ps) = string_to_tts_t(source_str);\n         tts\n     }\n \n@@ -483,7 +482,7 @@ mod test {\n     }*/\n \n     #[test] fn string_to_tts_1 () {\n-        let (tts,ps) = string_to_tts_t(@~\"fn a (b : int) { b; }\");\n+        let (tts,_ps) = string_to_tts_t(@~\"fn a (b : int) { b; }\");\n         assert_eq!(to_json_str(@tts),\n                    ~\"[\\\n                 [\\\"tt_tok\\\",null,[\\\"IDENT\\\",\\\"fn\\\",false]],\\\n@@ -548,7 +547,7 @@ mod test {\n     }\n \n     fn parser_done(p: Parser){\n-        assert_eq!(*p.token,token::EOF);\n+        assert_eq!(copy *p.token,token::EOF);\n     }\n \n     #[test] fn parse_ident_pat () {"}, {"sha": "e1fe20695c7c6b65a93a2fd6cb1805be0300ec64", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ffcc680f9cc26b5b2cb2f453a89dbcf8144f8b9b", "patch": "@@ -2388,7 +2388,7 @@ pub impl Parser {\n                 // preceded by unary-minus) or identifiers.\n                 let val = self.parse_literal_maybe_minus();\n                 if self.eat(&token::DOTDOT) {\n-                    let end = if is_ident_or_path(&tok) {\n+                    let end = if is_ident_or_path(tok) {\n                         let path = self.parse_path_with_tps(true);\n                         let hi = self.span.hi;\n                         self.mk_expr(lo, hi, expr_path(path))"}]}