{"sha": "00e6462334d49bf9211e71da588b11ed5ae550b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTY0NjIzMzRkNDliZjkyMTFlNzFkYTU4OGIxMWVkNWFlNTUwYjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-06T16:51:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T16:40:33Z"}, "message": "Fix offset addend mixup", "tree": {"sha": "0cf58113bacde74cfce0b72d7fddba4af71e8d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf58113bacde74cfce0b72d7fddba4af71e8d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e6462334d49bf9211e71da588b11ed5ae550b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e6462334d49bf9211e71da588b11ed5ae550b5", "html_url": "https://github.com/rust-lang/rust/commit/00e6462334d49bf9211e71da588b11ed5ae550b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e6462334d49bf9211e71da588b11ed5ae550b5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d470587fdda3ec6e27618237136ce2847cc0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d470587fdda3ec6e27618237136ce2847cc0fa", "html_url": "https://github.com/rust-lang/rust/commit/35d470587fdda3ec6e27618237136ce2847cc0fa"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "6411e3d8563bd745956d15b0799203e4f1480187", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e6462334d49bf9211e71da588b11ed5ae550b5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e6462334d49bf9211e71da588b11ed5ae550b5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=00e6462334d49bf9211e71da588b11ed5ae550b5", "patch": "@@ -243,7 +243,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n         data_ctx.define(alloc.bytes.to_vec().into_boxed_slice());\n \n         for &(offset, (_tag, reloc)) in alloc.relocations.iter() {\n-            let reloc_offset = {\n+            let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;\n                 let ptr_size = tcx.data_layout.pointer_size;\n@@ -253,9 +253,10 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n \n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n                 AllocKind::Function(instance) => {\n+                    assert_eq!(addend, 0);\n                     let func_id = crate::abi::import_function(tcx, module, instance);\n                     let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n-                    data_ctx.write_function_addr(reloc_offset as u32, local_func_id);\n+                    data_ctx.write_function_addr(offset.bytes() as u32, local_func_id);\n                     continue;\n                 }\n                 AllocKind::Memory(_) => {\n@@ -269,7 +270,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             };\n \n             let global_value = module.declare_data_in_data(data_id, &mut data_ctx);\n-            data_ctx.write_data_addr(reloc_offset as u32, global_value, 0);\n+            data_ctx.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n         }\n \n         module.define_data(data_id, &data_ctx).unwrap();"}]}