{"sha": "2bc127dcc7f97cdbf5950ed461b05f60f198c278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzEyN2RjYzdmOTdjZGJmNTk1MGVkNDYxYjA1ZjYwZjE5OGMyNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-12T18:36:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-12T18:36:13Z"}, "message": "Rollup merge of #59859 - davidtwco:issue-59756, r=cramertj\n\nSuggest removing `?` to resolve type errors.\n\nFixes #59756.", "tree": {"sha": "5c7d4cd8885dbd807ae7af4ddf316586d8f47561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c7d4cd8885dbd807ae7af4ddf316586d8f47561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc127dcc7f97cdbf5950ed461b05f60f198c278", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsNqdCRBK7hj4Ov3rIwAAdHIIAAPkSXZkp0rmiVs4YmXH1ZTo\n6L35jU56KxdX7OZhKAX7/ZS4Hl1OyEwiS33d/aWc/DGNd9UQmOgTTmjUtZLiLD3c\nKmr7hOWNAgbB5TRt2Kif5yAo2wFIDd8AXaEDZISfzXZS00XEwlu0x5Pl1veuddjK\njQ8hVUHxZpLtHu3HAljNDFK6CV+Nv93QgZPSfR5XU8fBgXWPHC+sv8hWJL3HVSyO\nvEHJXbxrKt7SF7RhYlukTl4jGZDHnJyBmqstqiOq87BdqcgkTVrgombiJkVFSRAt\nvaMFRmJJy7QeeQFGwnac8z1bWz5lbaUTbMjtHl2PLIWhg/j+Qn6/IYaLH6wn0og=\n=vdO8\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c7d4cd8885dbd807ae7af4ddf316586d8f47561\nparent 8f111951a19ab5e63ac347b2d029216c4e061cd4\nparent 16592f691b71802f8876a4f087cdc22a21869836\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555094173 +0200\ncommitter GitHub <noreply@github.com> 1555094173 +0200\n\nRollup merge of #59859 - davidtwco:issue-59756, r=cramertj\n\nSuggest removing `?` to resolve type errors.\n\nFixes #59756.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc127dcc7f97cdbf5950ed461b05f60f198c278", "html_url": "https://github.com/rust-lang/rust/commit/2bc127dcc7f97cdbf5950ed461b05f60f198c278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc127dcc7f97cdbf5950ed461b05f60f198c278/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f111951a19ab5e63ac347b2d029216c4e061cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f111951a19ab5e63ac347b2d029216c4e061cd4", "html_url": "https://github.com/rust-lang/rust/commit/8f111951a19ab5e63ac347b2d029216c4e061cd4"}, {"sha": "16592f691b71802f8876a4f087cdc22a21869836", "url": "https://api.github.com/repos/rust-lang/rust/commits/16592f691b71802f8876a4f087cdc22a21869836", "html_url": "https://github.com/rust-lang/rust/commit/16592f691b71802f8876a4f087cdc22a21869836"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "9c899fab59ef140367dc4b683ecea45820fae988", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -604,13 +604,39 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n+                discrim_hir_id,\n                 ..\n             } => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n                     let msg = \"`if let` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n                 }\n-                hir::MatchSource::TryDesugar => {}\n+                hir::MatchSource::TryDesugar => {\n+                    if let Some(ty::error::ExpectedFound { expected, .. }) = exp_found {\n+                        let discrim_expr = self.tcx.hir().expect_expr_by_hir_id(discrim_hir_id);\n+                        let discrim_ty = if let hir::ExprKind::Call(_, args) = &discrim_expr.node {\n+                            let arg_expr = args.first().expect(\"try desugaring call w/out arg\");\n+                            self.in_progress_tables.and_then(|tables| {\n+                                tables.borrow().expr_ty_opt(arg_expr)\n+                            })\n+                        } else {\n+                            bug!(\"try desugaring w/out call expr as discriminant\");\n+                        };\n+\n+                        match discrim_ty {\n+                            Some(ty) if expected == ty => {\n+                                let source_map = self.tcx.sess.source_map();\n+                                err.span_suggestion(\n+                                    source_map.end_point(cause.span),\n+                                    \"try removing this `?`\",\n+                                    \"\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            },\n+                            _ => {},\n+                        }\n+                    }\n+                }\n                 _ => {\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(cause.span, msg);"}, {"sha": "b875bfdfa9fa4bd6b31c218880cbaae0937dd24d", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -226,6 +226,7 @@ pub enum ObligationCauseCode<'tcx> {\n         source: hir::MatchSource,\n         prior_arms: Vec<Span>,\n         last_ty: Ty<'tcx>,\n+        discrim_hir_id: hir::HirId,\n     },\n \n     /// Computing common supertype in the pattern guard for the arms of a match expression"}, {"sha": "0711f3539e586bac6bf8089c183a970b1c294f22", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -519,13 +519,15 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n+                discrim_hir_id,\n             } => {\n                 tcx.lift(&last_ty).map(|last_ty| {\n                     super::MatchExpressionArm {\n                         arm_span,\n                         source,\n                         prior_arms: prior_arms.clone(),\n                         last_ty,\n+                        discrim_hir_id,\n                     }\n                 })\n             }"}, {"sha": "032821e6d42f258a69bd5d395c5f1d6bd37fa5fb", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -732,6 +732,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                         source: match_src,\n                         prior_arms: other_arms.clone(),\n                         last_ty: prior_arm_ty.unwrap(),\n+                        discrim_hir_id: discrim.hir_id,\n                     })\n                 };\n                 coercion.coerce(self, &cause, &arm.body, arm_ty);"}, {"sha": "7b55d0f17e690f18e7a55b272000fe20512adc7a", "filename": "src/test/ui/issue-59756.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59756.fixed?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+struct A;\n+struct B;\n+\n+fn foo() -> Result<A, B> {\n+    Ok(A)\n+}\n+\n+fn bar() -> Result<A, B> {\n+    foo()\n+    //~^ ERROR try expression alternatives have incompatible types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "cccae396b721015a5f07a951c3acbe85389621e5", "filename": "src/test/ui/issue-59756.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59756.rs?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+struct A;\n+struct B;\n+\n+fn foo() -> Result<A, B> {\n+    Ok(A)\n+}\n+\n+fn bar() -> Result<A, B> {\n+    foo()?\n+    //~^ ERROR try expression alternatives have incompatible types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "d46232874fd2a08062f4e930f5befc9263362779", "filename": "src/test/ui/issue-59756.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissue-59756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59756.stderr?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: try expression alternatives have incompatible types\n+  --> $DIR/issue-59756.rs:13:5\n+   |\n+LL |     foo()?\n+   |     ^^^^^-\n+   |     |    |\n+   |     |    help: try removing this `?`\n+   |     expected enum `std::result::Result`, found struct `A`\n+   |\n+   = note: expected type `std::result::Result<A, B>`\n+              found type `A`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bf45357147916d0097d774e02a1546a906d6e457", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc127dcc7f97cdbf5950ed461b05f60f198c278/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=2bc127dcc7f97cdbf5950ed461b05f60f198c278", "patch": "@@ -2,7 +2,10 @@ error[E0308]: try expression alternatives have incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found isize\n+   |     ^^^^^^^^^^^^^^^^^^^^-\n+   |     |                   |\n+   |     |                   help: try removing this `?`\n+   |     expected enum `std::result::Result`, found isize\n    |\n    = note: expected type `std::result::Result<isize, ()>`\n               found type `isize`"}]}