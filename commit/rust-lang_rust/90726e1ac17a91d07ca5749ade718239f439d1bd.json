{"sha": "90726e1ac17a91d07ca5749ade718239f439d1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzI2ZTFhYzE3YTkxZDA3Y2E1NzQ5YWRlNzE4MjM5ZjQzOWQxYmQ=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-12-19T18:51:52Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-12-19T21:52:09Z"}, "message": "suggest similar lint names for unknown lints", "tree": {"sha": "5cc12bf242da31c285d4c0d57e7c2e9c6ec24549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc12bf242da31c285d4c0d57e7c2e9c6ec24549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90726e1ac17a91d07ca5749ade718239f439d1bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlwavYwWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdD2kB/9JRuqXFjE2FbHruPdY/eMw5cuj\n2s9yDMoMWbh5NpwM+cVy7C9T8pQRTPmgpl0lOS2gVBJYg3WAYdSC0GDfA4IrA/ZB\nHmkk2AGqSYbCBBCWgxhUgqN2fMuHFSmyANG+5hzYdOHu7zdFHZ7ug1+fQ7QhEPif\nFo2wZxpagFO36aEBW/ZkEVN9yxa+bnucHtvWqBbLmueyELOfoPp/r//dhbDXJJ9Z\nF2vJ4URtPvUxAmRj5ZyiX+964YPxdwm6+UFHp8EH8GRPsqoR5Vb3VNvmwwARYyYk\neoHuczA+wJH8Y0Xlr/35CX2Inr/ilQ7wBCfVQqyYpiE+b9GJPEn7FZHpHMCm\n=GEwO\n-----END PGP SIGNATURE-----", "payload": "tree 5cc12bf242da31c285d4c0d57e7c2e9c6ec24549\nparent adbfec229ce07ff4b2a7bf2d6dec2d13cb224980\nauthor Andy Russell <arussell123@gmail.com> 1545245512 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1545256329 -0500\n\nsuggest similar lint names for unknown lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90726e1ac17a91d07ca5749ade718239f439d1bd", "html_url": "https://github.com/rust-lang/rust/commit/90726e1ac17a91d07ca5749ade718239f439d1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90726e1ac17a91d07ca5749ade718239f439d1bd/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbfec229ce07ff4b2a7bf2d6dec2d13cb224980", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbfec229ce07ff4b2a7bf2d6dec2d13cb224980", "html_url": "https://github.com/rust-lang/rust/commit/adbfec229ce07ff4b2a7bf2d6dec2d13cb224980"}], "stats": {"total": 116, "additions": 69, "deletions": 47}, "files": [{"sha": "131dedb9888326bbc273c581dacd2fca86010c06", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -42,11 +42,12 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span, symbol::LocalInternedString};\n+use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n use errors::DiagnosticBuilder;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n \n /// Information about the registered lints.\n@@ -139,8 +140,8 @@ struct LintGroup {\n \n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n-    /// Lint doesn't exist\n-    NoLint,\n+    /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n+    NoLint(Option<Symbol>),\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n@@ -359,8 +360,14 @@ impl LintStore {\n             CheckLintNameResult::Warning(ref msg, _) => {\n                 Some(sess.struct_warn(msg))\n             },\n-            CheckLintNameResult::NoLint => {\n-                Some(struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name))\n+            CheckLintNameResult::NoLint(suggestion) => {\n+                let mut err = struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name);\n+\n+                if let Some(suggestion) = suggestion {\n+                    err.help(&format!(\"did you mean: `{}`\", suggestion));\n+                }\n+\n+                Some(err)\n             }\n             CheckLintNameResult::Tool(result) => match result {\n                 Err((Some(_), new_name)) => Some(sess.struct_warn(&format!(\n@@ -464,7 +471,16 @@ impl LintStore {\n         match self.by_name.get(&complete_name) {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n-                None => CheckLintNameResult::NoLint,\n+                None => {\n+                    let symbols = self.by_name.keys()\n+                        .map(|name| Symbol::intern(&name))\n+                        .collect::<Vec<_>>();\n+\n+                    let suggestion =\n+                        find_best_match_for_name(symbols.iter(), &lint_name.to_lowercase(), None);\n+\n+                    CheckLintNameResult::NoLint(suggestion)\n+                }\n                 Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Reaching this would be weird, but let's cover this case anyway\n                     if let Some(LintAlias { name, silent }) = depr {\n@@ -484,7 +500,7 @@ impl LintStore {\n             Some(&Id(ref id)) => {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n-            _ => CheckLintNameResult::NoLint,\n+            _ => CheckLintNameResult::NoLint(None),\n         }\n     }\n }"}, {"sha": "9ab8e89df72e6db01a75ffa117e777d938664fc0", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -385,7 +385,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         }\n                         err.emit();\n                     }\n-                    CheckLintNameResult::NoLint => {\n+                    CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n@@ -398,22 +398,17 @@ impl<'a> LintLevelsBuilder<'a> {\n                                                 src,\n                                                 Some(li.span.into()),\n                                                 &msg);\n-                        if name.as_str().chars().any(|c| c.is_uppercase()) {\n-                            let name_lower = name.as_str().to_lowercase().to_string();\n-                            if let CheckLintNameResult::NoLint =\n-                                    store.check_lint_name(&name_lower, tool_name) {\n-                                db.emit();\n-                            } else {\n-                                db.span_suggestion_with_applicability(\n-                                    li.span,\n-                                    \"lowercase the lint name\",\n-                                    name_lower,\n-                                    Applicability::MachineApplicable\n-                                ).emit();\n-                            }\n-                        } else {\n-                            db.emit();\n+\n+                        if let Some(suggestion) = suggestion {\n+                            db.span_suggestion_with_applicability(\n+                                li.span,\n+                                \"did you mean\",\n+                                suggestion.to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n+\n+                        db.emit();\n                     }\n                 }\n             }"}, {"sha": "33fb46dce6e38b6d3e2c4227d682dfa2818f0f1c", "filename": "src/test/ui/lint/lint-unknown-lint-cmdline.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-D bogus\n+// compile-flags:-D bogus -D dead_cod\n \n-// error-pattern:unknown lint\n+// error-pattern:unknown lint: `bogus`\n // error-pattern:requested on the command line with `-D bogus`\n+// error-pattern:unknown lint: `dead_cod`\n+// error-pattern:requested on the command line with `-D dead_cod`\n+// error-pattern:did you mean: `dead_code`\n \n fn main() { }"}, {"sha": "58fdae3333ca172dcc2e4e2ec21e103b5122e3ad", "filename": "src/test/ui/lint/lint-unknown-lint-cmdline.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -2,6 +2,11 @@ error[E0602]: unknown lint: `bogus`\n    |\n    = note: requested on the command line with `-D bogus`\n \n-error: aborting due to previous error\n+error[E0602]: unknown lint: `dead_cod`\n+   |\n+   = help: did you mean: `dead_code`\n+   = note: requested on the command line with `-D dead_cod`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0602`."}, {"sha": "5d3fd0f19721f1b73661578b46b127af80b99d56", "filename": "src/test/ui/lint/lint-unknown-lint.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(not_a_real_lint)] //~ WARN unknown lint\n-#![deny(unused)]\n-fn main() { let unused = (); } //~ ERROR unused variable\n+#![deny(unknown_lints)]\n+\n+#![allow(not_a_real_lint)] //~ ERROR unknown lint\n+\n+#![deny(dead_cod)] //~ ERROR unknown lint\n+                   //~| HELP did you mean\n+                   //~| SUGGESTION dead_code\n+\n+fn main() {}"}, {"sha": "6fc2da39a7c60312c843864160f5903474556bac", "filename": "src/test/ui/lint/lint-unknown-lint.stderr", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -1,23 +1,20 @@\n-warning: unknown lint: `not_a_real_lint`\n-  --> $DIR/lint-unknown-lint.rs:11:10\n+error: unknown lint: `not_a_real_lint`\n+  --> $DIR/lint-unknown-lint.rs:13:10\n    |\n-LL | #![allow(not_a_real_lint)] //~ WARN unknown lint\n+LL | #![allow(not_a_real_lint)] //~ ERROR unknown lint\n    |          ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(unknown_lints)] on by default\n-\n-error: unused variable: `unused`\n-  --> $DIR/lint-unknown-lint.rs:13:17\n-   |\n-LL | fn main() { let unused = (); } //~ ERROR unused variable\n-   |                 ^^^^^^ help: consider using `_unused` instead\n-   |\n note: lint level defined here\n-  --> $DIR/lint-unknown-lint.rs:12:9\n+  --> $DIR/lint-unknown-lint.rs:11:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unknown lint: `dead_cod`\n+  --> $DIR/lint-unknown-lint.rs:15:9\n    |\n-LL | #![deny(unused)]\n-   |         ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+LL | #![deny(dead_cod)] //~ ERROR unknown lint\n+   |         ^^^^^^^^ help: did you mean: `dead_code`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "dedbc829913a5fd5e89b4d781eaeb1dc0804cb45", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90726e1ac17a91d07ca5749ade718239f439d1bd/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=90726e1ac17a91d07ca5749ade718239f439d1bd", "patch": "@@ -10,11 +10,11 @@ warning: unknown lint: `DEAD_CODE`\n   --> $DIR/not_found.rs:18:8\n    |\n LL | #[warn(DEAD_CODE)]\n-   |        ^^^^^^^^^ help: lowercase the lint name: `dead_code`\n+   |        ^^^^^^^^^ help: did you mean: `dead_code`\n \n warning: unknown lint: `Warnings`\n   --> $DIR/not_found.rs:20:8\n    |\n LL | #[deny(Warnings)]\n-   |        ^^^^^^^^ help: lowercase the lint name: `warnings`\n+   |        ^^^^^^^^ help: did you mean: `warnings`\n "}]}