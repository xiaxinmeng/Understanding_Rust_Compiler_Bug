{"sha": "ef58baf8b8fecc5ca8b5e34921d33650186d4205", "node_id": "C_kwDOAAsO6NoAKGVmNThiYWY4YjhmZWNjNWNhOGI1ZTM0OTIxZDMzNjUwMTg2ZDQyMDU", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-10T19:27:41Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-14T07:13:07Z"}, "message": "change const_param_default query to return EarlyBinder; remove bound_const_param_default query; add EarlyBinder to const_param_default in metadata", "tree": {"sha": "cf3615f8a9b9e2c97aaca3c0d142b21219ce2cd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf3615f8a9b9e2c97aaca3c0d142b21219ce2cd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef58baf8b8fecc5ca8b5e34921d33650186d4205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef58baf8b8fecc5ca8b5e34921d33650186d4205", "html_url": "https://github.com/rust-lang/rust/commit/ef58baf8b8fecc5ca8b5e34921d33650186d4205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef58baf8b8fecc5ca8b5e34921d33650186d4205/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6c63597b9483aa65b0934f195716635a30a2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6c63597b9483aa65b0934f195716635a30a2b8", "html_url": "https://github.com/rust-lang/rust/commit/bd6c63597b9483aa65b0934f195716635a30a2b8"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "d32c288337b59a4ceac76e0444f6a15ee312bd61", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -511,9 +511,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             return tcx.const_error(ty).into();\n                         }\n                         if !infer_args && has_default {\n-                            tcx.bound_const_param_default(param.def_id)\n-                                .subst(tcx, substs.unwrap())\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "7c6da009dee3daa4c17eae0ed1139350839f53da", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -1350,7 +1350,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // is incorrect when dealing with unused substs, for example\n                     // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n                     // we should eagerly error.\n-                    let default_ct = tcx.bound_const_param_default(param.def_id).subst_identity();\n+                    let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n                     if !default_ct.needs_subst() {\n                         wfcx.register_wf_obligation(\n                             tcx.def_span(param.def_id),\n@@ -1396,7 +1396,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             GenericParamDefKind::Const { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n-                    let default_ct = tcx.bound_const_param_default(param.def_id).subst_identity();\n+                    let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n                     // ... and it's not a dependent default, ...\n                     if !default_ct.needs_subst() {\n                         // ... then substitute it with the default."}, {"sha": "6ed8adb47425a80197d6a2453f54302953fbb376", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -1224,9 +1224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            tcx.bound_const_param_default(param.def_id)\n-                                .subst(tcx, substs.unwrap())\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "030328d1e26ff1f6b64feb983aba60d89a25eb50", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -2070,7 +2070,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 hir::GenericParamKind::Const { ref default, .. } => {\n                     let def_id = param.def_id.to_def_id();\n                     if default.is_some() {\n-                        record!(self.tables.const_param_default[def_id] <- self.tcx.bound_const_param_default(def_id).subst_identity())\n+                        record!(self.tables.const_param_default[def_id] <- self.tcx.const_param_default(def_id))\n                     }\n                 }\n             }"}, {"sha": "5beee06d5211e7ccdd11e80aac7d5e690b84cc04", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -360,7 +360,7 @@ define_tables! {\n     fn_sig: Table<DefIndex, LazyValue<ty::PolyFnSig<'static>>>,\n     codegen_fn_attrs: Table<DefIndex, LazyValue<CodegenFnAttrs>>,\n     impl_trait_ref: Table<DefIndex, LazyValue<ty::TraitRef<'static>>>,\n-    const_param_default: Table<DefIndex, LazyValue<rustc_middle::ty::Const<'static>>>,\n+    const_param_default: Table<DefIndex, LazyValue<ty::EarlyBinder<rustc_middle::ty::Const<'static>>>>,\n     object_lifetime_default: Table<DefIndex, LazyValue<ObjectLifetimeDefault>>,\n     optimized_mir: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,"}, {"sha": "cdc78a86349f1ea8e526dd49a6184b6d2409b0ed", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -142,7 +142,7 @@ rustc_queries! {\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n     /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n-    query const_param_default(param: DefId) -> ty::Const<'tcx> {\n+    query const_param_default(param: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n         desc { |tcx| \"computing const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n         cache_on_disk_if { param.is_local() }\n         separate_provide_extern"}, {"sha": "65cbac3e8f1cd5f341e7a0054a03be00c6c1bc81", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> Const<'_> {\n+pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Const<'_>> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { default: Some(ac), .. },\n@@ -250,5 +250,5 @@ pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> Const<'_> {\n             \"`const_param_default` expected a generic parameter with a constant\"\n         ),\n     };\n-    Const::from_anon_const(tcx, default_def_id)\n+    ty::EarlyBinder(Const::from_anon_const(tcx, default_def_id))\n }"}, {"sha": "8a5e765b9a30664adc3a20f7c240d7ea78d7c147", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -88,7 +88,7 @@ impl GenericParamDef {\n                 Some(tcx.bound_type_of(self.def_id).map_bound(|t| t.into()))\n             }\n             GenericParamDefKind::Const { has_default } if has_default => {\n-                Some(tcx.bound_const_param_default(self.def_id).map_bound(|c| c.into()))\n+                Some(tcx.const_param_default(self.def_id).map_bound(|c| c.into()))\n             }\n             _ => None,\n         }"}, {"sha": "1f0c96a93b97dd073d4abf12bb4094b3c3ae7707", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -673,10 +673,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n \n-    pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n-        ty::EarlyBinder(self.const_param_default(def_id))\n-    }\n-\n     pub fn bound_predicates_of(\n         self,\n         def_id: DefId,"}, {"sha": "0d6d5ab5a1837992f96e46f6f2fd7f5806839419", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -838,9 +838,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n                 GenericParamDefKind::Const { has_default } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n-                        self.visit(\n-                            self.ev.tcx.bound_const_param_default(param.def_id).subst_identity(),\n-                        );\n+                        self.visit(self.ev.tcx.const_param_default(param.def_id).subst_identity());\n                     }\n                 }\n             }"}, {"sha": "415e7d5a360d067eeaee6abe84fef949c8b55d42", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef58baf8b8fecc5ca8b5e34921d33650186d4205/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef58baf8b8fecc5ca8b5e34921d33650186d4205/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ef58baf8b8fecc5ca8b5e34921d33650186d4205", "patch": "@@ -507,7 +507,7 @@ fn clean_generic_param_def<'tcx>(\n                 )),\n                 default: match has_default {\n                     true => Some(Box::new(\n-                        cx.tcx.bound_const_param_default(def.def_id).subst_identity().to_string(),\n+                        cx.tcx.const_param_default(def.def_id).subst_identity().to_string(),\n                     )),\n                     false => None,\n                 },"}]}