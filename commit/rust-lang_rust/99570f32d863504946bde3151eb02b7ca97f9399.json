{"sha": "99570f32d863504946bde3151eb02b7ca97f9399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTcwZjMyZDg2MzUwNDk0NmJkZTMxNTFlYjAyYjdjYTk3ZjkzOTk=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-05T12:18:51Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "refactor: use single next space", "tree": {"sha": "e1b2ed231bc5486f6d281d7026073f8812caff7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b2ed231bc5486f6d281d7026073f8812caff7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99570f32d863504946bde3151eb02b7ca97f9399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99570f32d863504946bde3151eb02b7ca97f9399", "html_url": "https://github.com/rust-lang/rust/commit/99570f32d863504946bde3151eb02b7ca97f9399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99570f32d863504946bde3151eb02b7ca97f9399/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "html_url": "https://github.com/rust-lang/rust/commit/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "bd1be5f98d65bb3c2dd8d0d6fbd63dc99f3fcb09", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/99570f32d863504946bde3151eb02b7ca97f9399/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99570f32d863504946bde3151eb02b7ca97f9399/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=99570f32d863504946bde3151eb02b7ca97f9399", "patch": "@@ -29,6 +29,13 @@ impl<'a> FuncExpr<'a> {\n             FuncExpr::Method(m_call) => m_call.arg_list(),\n         }\n     }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        match *self {\n+            FuncExpr::Func(fn_call) => fn_call.syntax(),\n+            FuncExpr::Method(m_call) => m_call.syntax(),\n+        }\n+    }\n }\n \n // Assist: generate_function\n@@ -173,7 +180,7 @@ impl FunctionBuilder {\n                 file = in_file;\n                 target\n             }\n-            None => next_space_for_fn_after_call_site(call)?,\n+            None => next_space_for_fn_after_call_site(FuncExpr::Func(call))?,\n         };\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n@@ -238,7 +245,7 @@ impl FunctionBuilder {\n                 file = in_file;\n                 target\n             }\n-            None => next_space_for_fn_after_method_call_site(call)?,\n+            None => next_space_for_fn_after_call_site(FuncExpr::Method(call))?,\n         };\n         let needs_pub = false;\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n@@ -465,29 +472,7 @@ fn fn_arg_type(\n /// directly after the current block\n /// We want to write the generated function directly after\n /// fns, impls or macro calls, but inside mods\n-fn next_space_for_fn_after_call_site(expr: &ast::CallExpr) -> Option<GeneratedFunctionTarget> {\n-    let mut ancestors = expr.syntax().ancestors().peekable();\n-    let mut last_ancestor: Option<SyntaxNode> = None;\n-    while let Some(next_ancestor) = ancestors.next() {\n-        match next_ancestor.kind() {\n-            SyntaxKind::SOURCE_FILE => {\n-                break;\n-            }\n-            SyntaxKind::ITEM_LIST => {\n-                if ancestors.peek().map(|a| a.kind()) == Some(SyntaxKind::MODULE) {\n-                    break;\n-                }\n-            }\n-            _ => {}\n-        }\n-        last_ancestor = Some(next_ancestor);\n-    }\n-    last_ancestor.map(GeneratedFunctionTarget::BehindItem)\n-}\n-\n-fn next_space_for_fn_after_method_call_site(\n-    expr: &ast::MethodCallExpr,\n-) -> Option<GeneratedFunctionTarget> {\n+fn next_space_for_fn_after_call_site(expr: FuncExpr) -> Option<GeneratedFunctionTarget> {\n     let mut ancestors = expr.syntax().ancestors().peekable();\n     let mut last_ancestor: Option<SyntaxNode> = None;\n     while let Some(next_ancestor) = ancestors.next() {"}]}