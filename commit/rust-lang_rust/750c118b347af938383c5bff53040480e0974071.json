{"sha": "750c118b347af938383c5bff53040480e0974071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MGMxMThiMzQ3YWY5MzgzODNjNWJmZjUzMDQwNDgwZTA5NzQwNzE=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-09-20T09:22:01Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Add suggestion on type signatures", "tree": {"sha": "21981902d81e46af6da0b37bf8ddc95ee1eccf1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21981902d81e46af6da0b37bf8ddc95ee1eccf1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750c118b347af938383c5bff53040480e0974071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750c118b347af938383c5bff53040480e0974071", "html_url": "https://github.com/rust-lang/rust/commit/750c118b347af938383c5bff53040480e0974071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750c118b347af938383c5bff53040480e0974071/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ac441760ae034ff7401439b38da821f4e2df3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ac441760ae034ff7401439b38da821f4e2df3a", "html_url": "https://github.com/rust-lang/rust/commit/a7ac441760ae034ff7401439b38da821f4e2df3a"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "7b586c1df0c2c1dc2cd57909ef995860030d0be4", "filename": "clippy_lints/src/unnecessary_wrap.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/750c118b347af938383c5bff53040480e0974071/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750c118b347af938383c5bff53040480e0974071/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wrap.rs?ref=750c118b347af938383c5bff53040480e0974071", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::{FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::{hir::map::Map, ty::subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -100,14 +100,27 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n                 return;\n             }\n \n-            let suggs = result.iter().filter_map(|expr| {\n-                let snippet = if let ExprKind::Call(_, ref args) = expr.kind {\n-                    Some(snippet(cx, args[0].span, \"..\").to_string())\n-                } else {\n-                    None\n-                };\n-                snippet.map(|snip| (expr.span, snip))\n-            });\n+            let suggs = result\n+                .iter()\n+                .filter_map(|expr| {\n+                    let snippet = if let ExprKind::Call(_, ref args) = expr.kind {\n+                        Some(snippet(cx, args[0].span, \"..\").to_string())\n+                    } else {\n+                        None\n+                    };\n+                    snippet.map(|snip| (expr.span, snip))\n+                })\n+                .chain({\n+                    let inner_ty = return_ty(cx, hir_id)\n+                        .walk()\n+                        .skip(1) // skip `std::option::Option` or `std::result::Result`\n+                        .take(1) // first outermost inner type is needed\n+                        .filter_map(|inner| match inner.unpack() {\n+                            GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n+                            _ => None,\n+                        });\n+                    inner_ty.map(|inner_ty| (fn_decl.output.span(), inner_ty))\n+                });\n \n             span_lint_and_then(\n                 cx,"}, {"sha": "749bb95c417827915cca00a90407adc3ff5a8152", "filename": "tests/ui/unnecessary_wrap.fixed", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.fixed?ref=750c118b347af938383c5bff53040480e0974071", "patch": "@@ -1,8 +1,10 @@\n // run-rustfix\n+\n #![warn(clippy::unnecessary_wrap)]\n #![allow(clippy::no_effect)]\n #![allow(clippy::needless_return)]\n #![allow(clippy::if_same_then_else)]\n+#![allow(dead_code)]\n \n // should be linted\n fn func1(a: bool, b: bool) -> Option<i32> {\n@@ -37,7 +39,21 @@ fn func3(a: bool) -> Option<i32> {\n \n // should be linted\n fn func4() -> Option<i32> {\n-    1\n+    Some(1)\n+}\n+\n+// should be linted\n+fn func5() -> Result<i32, ()> {\n+    Ok(1)\n+}\n+\n+// should not be linted\n+fn func6(a: bool) -> Result<i32, ()> {\n+    if a {\n+        Ok(1)\n+    } else {\n+        Err(())\n+    }\n }\n \n fn main() {"}, {"sha": "749bb95c417827915cca00a90407adc3ff5a8152", "filename": "tests/ui/unnecessary_wrap.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.rs?ref=750c118b347af938383c5bff53040480e0974071", "patch": "@@ -1,8 +1,10 @@\n // run-rustfix\n+\n #![warn(clippy::unnecessary_wrap)]\n #![allow(clippy::no_effect)]\n #![allow(clippy::needless_return)]\n #![allow(clippy::if_same_then_else)]\n+#![allow(dead_code)]\n \n // should be linted\n fn func1(a: bool, b: bool) -> Option<i32> {\n@@ -40,6 +42,20 @@ fn func4() -> Option<i32> {\n     Some(1)\n }\n \n+// should be linted\n+fn func5() -> Result<i32, ()> {\n+    Ok(1)\n+}\n+\n+// should not be linted\n+fn func6(a: bool) -> Result<i32, ()> {\n+    if a {\n+        Ok(1)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);"}, {"sha": "511d085c82fe56af2fc2d343b48239b01c7bfdc0", "filename": "tests/ui/unnecessary_wrap.stderr", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750c118b347af938383c5bff53040480e0974071/tests%2Fui%2Funnecessary_wrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.stderr?ref=750c118b347af938383c5bff53040480e0974071", "patch": "@@ -1,5 +1,5 @@\n-error: this function unnecessarily wrapping data\n-  --> $DIR/unnecessary_wrap.rs:8:1\n+error: this function returns unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:10:1\n    |\n LL | / fn func1(a: bool, b: bool) -> Option<i32> {\n LL | |     if a && b {\n@@ -13,22 +13,41 @@ LL | | }\n    = note: `-D clippy::unnecessary-wrap` implied by `-D warnings`\n help: factor this out to\n    |\n+LL | fn func1(a: bool, b: bool) -> i32 {\n+LL |     if a && b {\n LL |         return 42;\n LL |     }\n LL |     if a {\n LL |         Some(-1);\n-LL |         2\n-LL |     } else {\n  ...\n \n-error: this function unnecessarily wrapping data\n-  --> $DIR/unnecessary_wrap.rs:39:1\n+error: this function returns unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:41:1\n    |\n LL | / fn func4() -> Option<i32> {\n LL | |     Some(1)\n-   | |     ------- help: factor this out to: `1`\n LL | | }\n    | |_^\n+   |\n+help: factor this out to\n+   |\n+LL | fn func4() -> i32 {\n+LL |     1\n+   |\n+\n+error: this function returns unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:46:1\n+   |\n+LL | / fn func5() -> Result<i32, ()> {\n+LL | |     Ok(1)\n+LL | | }\n+   | |_^\n+   |\n+help: factor this out to\n+   |\n+LL | fn func5() -> i32 {\n+LL |     1\n+   |\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}