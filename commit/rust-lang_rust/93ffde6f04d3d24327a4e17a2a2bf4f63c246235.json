{"sha": "93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "node_id": "C_kwDOAAsO6NoAKDkzZmZkZTZmMDRkM2QyNDMyN2E0ZTE3YTJhMmJmNGY2M2MyNDYyMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T20:01:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T20:01:07Z"}, "message": "Auto merge of #98208 - ivanloz:master, r=nagisa\n\nAdd support for LLVM ShadowCallStack.\n\nLLVMs ShadowCallStack provides backward edge control flow integrity protection by using a separate shadow stack to store and retrieve a function's return address.\n\nLLVM currently only supports this for AArch64 targets. The x18 register is used to hold the pointer to the shadow stack, and therefore this only works on ABIs which reserve x18. Further details are available in the [LLVM ShadowCallStack](https://clang.llvm.org/docs/ShadowCallStack.html) docs.\n\n# Usage\n`-Zsanitizer=shadow-call-stack`\n\n# Comments/Caveats\n* Currently only enabled for the aarch64-linux-android target\n* Requires the platform to define a runtime to initialize the shadow stack, see the [LLVM docs](https://clang.llvm.org/docs/ShadowCallStack.html) for more detail.", "tree": {"sha": "138c07c7746a3584c785e1f22d008805b342f4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138c07c7746a3584c785e1f22d008805b342f4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "html_url": "https://github.com/rust-lang/rust/commit/93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7c843da4b7628b8becd96970f22b57dd400ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7c843da4b7628b8becd96970f22b57dd400ace", "html_url": "https://github.com/rust-lang/rust/commit/0e7c843da4b7628b8becd96970f22b57dd400ace"}, {"sha": "adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "url": "https://api.github.com/repos/rust-lang/rust/commits/adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "html_url": "https://github.com/rust-lang/rust/commit/adf61e3b2b72f4a06b3ac5cf90d49deda42da605"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "1a96dd8bec47a606eef74a08ee39dd116522dbfc", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -69,6 +69,9 @@ pub fn sanitize_attrs<'ll>(\n     if enabled.contains(SanitizerSet::HWADDRESS) {\n         attrs.push(llvm::AttributeKind::SanitizeHWAddress.create_attr(cx.llcx));\n     }\n+    if enabled.contains(SanitizerSet::SHADOWCALLSTACK) {\n+        attrs.push(llvm::AttributeKind::ShadowCallStack.create_attr(cx.llcx));\n+    }\n     if enabled.contains(SanitizerSet::MEMTAG) {\n         // Check to make sure the mte target feature is actually enabled.\n         let features = cx.tcx.global_backend_features(());"}, {"sha": "f64eb79b0a8e2b545b41f09ce0e5d1f7a3dcb83b", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -192,6 +192,7 @@ pub enum AttributeKind {\n     NoUndef = 33,\n     SanitizeMemTag = 34,\n     NoCfCheck = 35,\n+    ShadowCallStack = 36,\n }\n \n /// LLVMIntPredicate"}, {"sha": "bca5425e7287c947d10a29e53e2af42e8710c247", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -85,6 +85,7 @@ enum LLVMRustAttribute {\n   NoUndef = 33,\n   SanitizeMemTag = 34,\n   NoCfCheck = 35,\n+  ShadowCallStack = 36,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "4615558b912984e4537e058c82e8aad292369e7f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -232,6 +232,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::NoUndef;\n   case SanitizeMemTag:\n     return Attribute::SanitizeMemTag;\n+  case ShadowCallStack:\n+    return Attribute::ShadowCallStack;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "1b583417ca089697bd6ab85531e902e93c596a11", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -377,7 +377,7 @@ mod desc {\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -683,6 +683,7 @@ mod parse {\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n                     \"memtag\" => SanitizerSet::MEMTAG,\n+                    \"shadow-call-stack\" => SanitizerSet::SHADOWCALLSTACK,\n                     \"thread\" => SanitizerSet::THREAD,\n                     \"hwaddress\" => SanitizerSet::HWADDRESS,\n                     _ => return false,"}, {"sha": "cb15132bd4ba79d7540748a4b711815329c253c6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -1284,6 +1284,7 @@ symbols! {\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n+        shadow_call_stack,\n         shl,\n         shl_assign,\n         should_panic,"}, {"sha": "c85f7f62a4239106b221e75a92571f728d6ad8ca", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n             supported_sanitizers: SanitizerSet::CFI\n                 | SanitizerSet::HWADDRESS\n                 | SanitizerSet::MEMTAG\n+                | SanitizerSet::SHADOWCALLSTACK\n                 | SanitizerSet::ADDRESS,\n             ..super::android_base::opts()\n         },"}, {"sha": "f7abeafd38f10d5870e037edca98ca230c0bd3c2", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -618,6 +618,7 @@ bitflags::bitflags! {\n         const HWADDRESS = 1 << 4;\n         const CFI     = 1 << 5;\n         const MEMTAG  = 1 << 6;\n+        const SHADOWCALLSTACK = 1 << 7;\n     }\n }\n \n@@ -632,6 +633,7 @@ impl SanitizerSet {\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n             SanitizerSet::MEMTAG => \"memtag\",\n+            SanitizerSet::SHADOWCALLSTACK => \"shadow-call-stack\",\n             SanitizerSet::THREAD => \"thread\",\n             SanitizerSet::HWADDRESS => \"hwaddress\",\n             _ => return None,\n@@ -666,6 +668,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::LEAK,\n             SanitizerSet::MEMORY,\n             SanitizerSet::MEMTAG,\n+            SanitizerSet::SHADOWCALLSTACK,\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n         ]\n@@ -1960,6 +1963,7 @@ impl Target {\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n                                 Some(\"memtag\") => SanitizerSet::MEMTAG,\n+                                Some(\"shadow-call-stack\") => SanitizerSet::SHADOWCALLSTACK,\n                                 Some(\"thread\") => SanitizerSet::THREAD,\n                                 Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n                                 Some(s) => return Err(format!(\"unknown sanitizer {}\", s)),"}, {"sha": "c562599e2cc53f748a0a0e658b34b413bba324eb", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -2974,14 +2974,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::memtag) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n+                    } else if item.has_name(sym::shadow_call_stack) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else if item.has_name(sym::hwaddress) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\")\n+                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "9e11a154db9a66502a6b6fb3b05afb1aa6371226", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -18,11 +18,13 @@ This feature allows for use of one of following sanitizers:\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n * [MemTagSanitizer][clang-memtag] fast memory error detector based on\n   Armv8.5-A Memory Tagging Extension.\n+* [ShadowCallStack][clang-scs] provides backward-edge control flow protection.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n `-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n-`-Zsanitizer=memtag`, or `-Zsanitizer=thread`. You might also need the `--target` and `build-std` flags. Example:\n+`-Zsanitizer=memtag`, `-Zsanitizer=shadow-call-stack`, or `-Zsanitizer=thread`.\n+You might also need the `--target` and `build-std` flags. Example:\n ```shell\n $ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu\n ```\n@@ -513,6 +515,18 @@ To enable this target feature compile with `-C target-feature=\"+mte\"`.\n \n More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n \n+# ShadowCallStack\n+\n+ShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.\n+\n+ShadowCallStack requires a platform ABI which reserves `x18` as the instrumentation makes use of this register.\n+\n+ShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+\n+A runtime must be provided by the application or operating system. See the [LLVM documentation][clang-scs] for further details.\n+\n # ThreadSanitizer\n \n ThreadSanitizer is a data race detection tool. It is supported on the following\n@@ -610,4 +624,5 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n+[clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}, {"sha": "0b53db3b767cd0744ccae63f54bdcc902068cd60", "filename": "src/test/codegen/sanitizer_scs_attr_check.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -0,0 +1,17 @@\n+// This tests that the shadowcallstack attribute is\n+// applied when enabling the shadow-call-stack sanitizer.\n+//\n+// needs-sanitizer-shadow-call-stack\n+// compile-flags: -Zsanitizer=shadow-call-stack\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_sanitize)]\n+\n+// CHECK: ; Function Attrs:{{.*}}shadowcallstack\n+// CHECK-NEXT: scs\n+pub fn scs() {}\n+\n+// CHECK-NOT: ; Function Attrs:{{.*}}shadowcallstack\n+// CHECK-NEXT: no_scs\n+#[no_sanitize(shadow_call_stack)]\n+pub fn no_scs() {}"}, {"sha": "d328cafa00b9345f51bfbaa1b26de8bef76a4355", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\n+   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "15d82e6d596275143b5b76de5b1bfe5088f6b591", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -876,6 +876,7 @@ pub fn make_test_description<R: Read>(\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_shadow_call_stack = util::SHADOWCALLSTACK_SUPPORTED_TARGETS.contains(&&*config.target);\n     // for `-Z gcc-ld=lld`\n     let has_rust_lld = config\n         .compile_lib_path\n@@ -913,6 +914,8 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n         ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n         ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n+        ignore |= !has_shadow_call_stack\n+            && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\");\n         ignore |= config.target_panic == PanicStrategy::Abort\n             && config.parse_name_directive(ln, \"needs-unwind\");\n         ignore |= config.target == \"wasm32-unknown-unknown\""}, {"sha": "102b9308dc90c6e3d49712733b3afada838a34cf", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffde6f04d3d24327a4e17a2a2bf4f63c246235/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "patch": "@@ -121,6 +121,8 @@ pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n pub const MEMTAG_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n+pub const SHADOWCALLSTACK_SUPPORTED_TARGETS: &[&str] = &[\"aarch64-linux-android\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}