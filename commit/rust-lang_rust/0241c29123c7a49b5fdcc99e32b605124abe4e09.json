{"sha": "0241c29123c7a49b5fdcc99e32b605124abe4e09", "node_id": "C_kwDOAAsO6NoAKDAyNDFjMjkxMjNjN2E0OWI1ZmRjYzk5ZTMyYjYwNTEyNGFiZTRlMDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-23T22:15:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:09:51Z"}, "message": "Put a DefId in AggregateKind.", "tree": {"sha": "52a02c696b8855753735b1c3eb5cd023a291b456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a02c696b8855753735b1c3eb5cd023a291b456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0241c29123c7a49b5fdcc99e32b605124abe4e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0241c29123c7a49b5fdcc99e32b605124abe4e09", "html_url": "https://github.com/rust-lang/rust/commit/0241c29123c7a49b5fdcc99e32b605124abe4e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0241c29123c7a49b5fdcc99e32b605124abe4e09/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3126500f25114ba4e0ac3e76694dd45a22de56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3126500f25114ba4e0ac3e76694dd45a22de56d", "html_url": "https://github.com/rust-lang/rust/commit/f3126500f25114ba4e0ac3e76694dd45a22de56d"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "b0a8188e5e04d92e085ccf1a5a5bbed0a52a87ca", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -2645,6 +2645,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             operands,\n                         ) = rvalue\n                         {\n+                            let def_id = def_id.expect_local();\n                             for operand in operands {\n                                 let (Operand::Copy(assigned_from) | Operand::Move(assigned_from)) = operand else {\n                                     continue;\n@@ -2667,7 +2668,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // into a place then we should annotate the closure in\n                                 // case it ends up being assigned into the return place.\n                                 annotated_closure =\n-                                    self.annotate_fn_sig(*def_id, substs.as_closure().sig());\n+                                    self.annotate_fn_sig(def_id, substs.as_closure().sig());\n                                 debug!(\n                                     \"annotate_argument_and_return_for_borrow: \\\n                                      annotated_closure={:?} assigned_from_local={:?} \\"}, {"sha": "a75ec87be4cac0721b6cdfc58fa3b095c7959048", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -817,6 +817,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             && let AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) = **kind\n         {\n             debug!(\"move_spans: def_id={:?} places={:?}\", def_id, places);\n+            let def_id = def_id.expect_local();\n             if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n                 self.closure_span(def_id, moved_place, places)\n             {\n@@ -945,6 +946,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     box AggregateKind::Generator(def_id, _, _) => (def_id, true),\n                     _ => continue,\n                 };\n+                let def_id = def_id.expect_local();\n \n                 debug!(\n                     \"borrow_spans: def_id={:?} is_generator={:?} places={:?}\","}, {"sha": "98103af779d8b5fbc157abb6418f960bd0edc67f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -1278,6 +1278,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // in order to populate our used_mut set.\n                 match **aggregate_kind {\n                     AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {\n+                        let def_id = def_id.expect_local();\n                         let BorrowCheckResult { used_mut_upvars, .. } =\n                             self.infcx.tcx.mir_borrowck(def_id);\n                         debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);"}, {"sha": "5b52846562f87f64db5d65d5095c64850fd11904", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -2536,7 +2536,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs)\n             | AggregateKind::Generator(def_id, substs, _) => {\n-                (def_id.to_def_id(), self.prove_closure_bounds(tcx, def_id, substs, location))\n+                (def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))\n             }\n \n             AggregateKind::Array(_) | AggregateKind::Tuple => {"}, {"sha": "1a23b06d2e89cae1296d78b618a6e10cf5d5de30", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -453,7 +453,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             Rvalue::Aggregate(kind, ..) => {\n                 if let AggregateKind::Generator(def_id, ..) = kind.as_ref()\n-                    && let Some(generator_kind @ hir::GeneratorKind::Async(..)) = self.tcx.generator_kind(def_id.to_def_id())\n+                    && let Some(generator_kind @ hir::GeneratorKind::Async(..)) = self.tcx.generator_kind(def_id)\n                 {\n                     self.check_op(ops::Generator(generator_kind));\n                 }"}, {"sha": "10ac7e0d39af6ca89d849eb539a9410a9dd9c7f1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -2098,10 +2098,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {\n                         let name = if tcx.sess.opts.unstable_opts.span_free_formats {\n                             let substs = tcx.lift(substs).unwrap();\n-                            format!(\n-                                \"[closure@{}]\",\n-                                tcx.def_path_str_with_substs(def_id.to_def_id(), substs),\n-                            )\n+                            format!(\"[closure@{}]\", tcx.def_path_str_with_substs(def_id, substs),)\n                         } else {\n                             let span = tcx.def_span(def_id);\n                             format!(\n@@ -2112,11 +2109,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         let mut struct_fmt = fmt.debug_struct(&name);\n \n                         // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n-                        if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n+                        if let Some(def_id) = def_id.as_local()\n+                            && let Some(upvars) = tcx.upvars_mentioned(def_id)\n+                        {\n                             for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                 let var_name = tcx.hir().name(var_id);\n                                 struct_fmt.field(var_name.as_str(), place);\n                             }\n+                        } else {\n+                            for (index, place) in places.iter().enumerate() {\n+                                struct_fmt.field(&format!(\"{index}\"), place);\n+                            }\n                         }\n \n                         struct_fmt.finish()\n@@ -2127,11 +2130,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         let mut struct_fmt = fmt.debug_struct(&name);\n \n                         // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n-                        if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n+                        if let Some(def_id) = def_id.as_local()\n+                            && let Some(upvars) = tcx.upvars_mentioned(def_id)\n+                        {\n                             for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                 let var_name = tcx.hir().name(var_id);\n                                 struct_fmt.field(var_name.as_str(), place);\n                             }\n+                        } else {\n+                            for (index, place) in places.iter().enumerate() {\n+                                struct_fmt.field(&format!(\"{index}\"), place);\n+                            }\n                         }\n \n                         struct_fmt.finish()"}, {"sha": "66ee68187896f54d7466442a18cb55a76d1270d5", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -1203,10 +1203,8 @@ pub enum AggregateKind<'tcx> {\n     /// active field index would identity the field `c`\n     Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n-    // Note: We can use LocalDefId since closures and generators a deaggregated\n-    // before codegen.\n-    Closure(LocalDefId, SubstsRef<'tcx>),\n-    Generator(LocalDefId, SubstsRef<'tcx>, hir::Movability),\n+    Closure(DefId, SubstsRef<'tcx>),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "b5e0b88bbe52dbf79ff94f109d4b52f960d17311", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -205,9 +205,9 @@ impl<'tcx> Rvalue<'tcx> {\n                 AggregateKind::Adt(did, _, substs, _, _) => {\n                     tcx.bound_type_of(did).subst(tcx, substs)\n                 }\n-                AggregateKind::Closure(did, substs) => tcx.mk_closure(did.to_def_id(), substs),\n+                AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {\n-                    tcx.mk_generator(did.to_def_id(), substs, movability)\n+                    tcx.mk_generator(did, substs, movability)\n                 }\n             },\n             Rvalue::ShallowInitBox(_, ty) => tcx.mk_box(ty),"}, {"sha": "cd0e69328634b33e2b70785e6f13fd75b865240f", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -439,10 +439,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // We implicitly set the discriminant to 0. See\n                         // librustc_mir/transform/deaggregator.rs for details.\n                         let movability = movability.unwrap();\n-                        Box::new(AggregateKind::Generator(closure_id, substs, movability))\n+                        Box::new(AggregateKind::Generator(\n+                            closure_id.to_def_id(),\n+                            substs,\n+                            movability,\n+                        ))\n                     }\n                     UpvarSubsts::Closure(substs) => {\n-                        Box::new(AggregateKind::Closure(closure_id, substs))\n+                        Box::new(AggregateKind::Closure(closure_id.to_def_id(), substs))\n                     }\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))"}, {"sha": "d00ee1f4babe8b3aed8b835ab633fca0db04c2e0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0241c29123c7a49b5fdcc99e32b605124abe4e09/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=0241c29123c7a49b5fdcc99e32b605124abe4e09", "patch": "@@ -126,6 +126,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     }\n                 }\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n+                    let def_id = def_id.expect_local();\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n                     self.register_violations(violations, used_unsafe_blocks.iter().copied());"}]}