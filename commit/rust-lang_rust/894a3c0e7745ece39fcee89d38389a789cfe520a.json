{"sha": "894a3c0e7745ece39fcee89d38389a789cfe520a", "node_id": "C_kwDOAAsO6NoAKDg5NGEzYzBlNzc0NWVjZTM5ZmNlZTg5ZDM4Mzg5YTc4OWNmZTUyMGE", "commit": {"author": {"name": "Tim", "email": "tdhutt@gmail.com", "date": "2020-06-23T00:20:29Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-01-02T16:06:06Z"}, "message": "Fix newlines in JSON output (#4262)\n\n* Fix newlines in JSON output\n\nThis changes the JSON output to be more consistent about where newlines are included. Previously it only included them between lines in a multiline diff. That meant single line changes were treated a bit weirdly. This changes it to append a newline to every line.\n\nWhen feeding the results into `arc lint` this behaves correctly. I have only done limited testing though, in particular there's a possibility it might not work with files with `\\r\\n` endings (though that would have been the case before too).\n\nFixes #4259\n\n* Update tests\n# Conflicts:\n#\ttests/writemode/target/output.json", "tree": {"sha": "1cc3d805a4b23508289b33685b245eb334ff76cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc3d805a4b23508289b33685b245eb334ff76cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/894a3c0e7745ece39fcee89d38389a789cfe520a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/894a3c0e7745ece39fcee89d38389a789cfe520a", "html_url": "https://github.com/rust-lang/rust/commit/894a3c0e7745ece39fcee89d38389a789cfe520a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/894a3c0e7745ece39fcee89d38389a789cfe520a/comments", "author": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "html_url": "https://github.com/rust-lang/rust/commit/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "c7f68d4675a67beb10d5af09bdd779dc7dbecb66", "filename": "src/emitter/json.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/894a3c0e7745ece39fcee89d38389a789cfe520a/src%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894a3c0e7745ece39fcee89d38389a789cfe520a/src%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fjson.rs?ref=894a3c0e7745ece39fcee89d38389a789cfe520a", "patch": "@@ -65,20 +65,22 @@ impl JsonEmitter {\n             let mut expected_end_line = expected_begin_line;\n             let mut original_line_counter = 0;\n             let mut expected_line_counter = 0;\n-            let mut original_lines = vec![];\n-            let mut expected_lines = vec![];\n+            let mut original = String::new();\n+            let mut expected = String::new();\n \n             for line in mismatch.lines {\n                 match line {\n                     DiffLine::Expected(msg) => {\n                         expected_end_line = expected_begin_line + expected_line_counter;\n                         expected_line_counter += 1;\n-                        expected_lines.push(msg)\n+                        expected.push_str(&msg);\n+                        expected.push('\\n');\n                     }\n                     DiffLine::Resulting(msg) => {\n                         original_end_line = original_begin_line + original_line_counter;\n                         original_line_counter += 1;\n-                        original_lines.push(msg)\n+                        original.push_str(&msg);\n+                        original.push('\\n');\n                     }\n                     DiffLine::Context(_) => continue,\n                 }\n@@ -89,8 +91,8 @@ impl JsonEmitter {\n                 original_end_line,\n                 expected_begin_line,\n                 expected_end_line,\n-                original: original_lines.join(\"\\n\"),\n-                expected: expected_lines.join(\"\\n\"),\n+                original,\n+                expected,\n             });\n         }\n         self.mismatched_files.push(MismatchedFile {\n@@ -120,8 +122,8 @@ mod tests {\n                 original_end_line: 79,\n                 expected_begin_line: 79,\n                 expected_end_line: 82,\n-                original: String::from(\"fn Foo<T>() where T: Bar {\"),\n-                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"),\n+                original: String::from(\"fn Foo<T>() where T: Bar {\\n\"),\n+                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"),\n             }],\n         };\n         let mismatch = Mismatch {\n@@ -158,10 +160,10 @@ mod tests {\n                 expected_begin_line: 5,\n                 expected_end_line: 5,\n                 original: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\\n\",\n                 ),\n                 expected: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\\n\",\n                 ),\n             }],\n         };\n@@ -260,19 +262,19 @@ mod tests {\n                     original_end_line: 2,\n                     expected_begin_line: 2,\n                     expected_end_line: 2,\n-                    original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                    original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n                 },\n                 MismatchedBlock {\n                     original_begin_line: 7,\n                     original_end_line: 10,\n                     expected_begin_line: 7,\n                     expected_end_line: 10,\n                     original: String::from(\n-                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\",\n+                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\\n\",\n                     ),\n                     expected: String::from(\n-                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\",\n+                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\\n\",\n                     ),\n                 },\n             ],\n@@ -321,8 +323,8 @@ mod tests {\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n             }],\n         };\n \n@@ -333,8 +335,8 @@ mod tests {\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Greetings!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Greetings!\\\");\"),\n+                original: String::from(\"println!(\\\"Greetings!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Greetings!\\\");\\n\"),\n             }],\n         };\n "}, {"sha": "d8b5467ee91ca23f245741e6f1d958262378446e", "filename": "tests/writemode/target/output.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/894a3c0e7745ece39fcee89d38389a789cfe520a/tests%2Fwritemode%2Ftarget%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/894a3c0e7745ece39fcee89d38389a789cfe520a/tests%2Fwritemode%2Ftarget%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Foutput.json?ref=894a3c0e7745ece39fcee89d38389a789cfe520a", "patch": "@@ -1 +1 @@\n-[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]\n+[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\\n\",\"expected\":\"fn foo_expr() { 1 }\\n\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\\n\",\"expected\":\"fn foo_stmt() { foo(); }\\n\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\\n\",\"expected\":\"fn foo_decl_local() { let z = 5; }\\n\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\\n\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\\n\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\\n\",\"expected\":\"fn empty() {}\\n\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\\n\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\\n\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\\n\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\\n\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\\n\",\"expected\":\"fn lots_of_space() { 1 }\\n\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\\n\",\"expected\":\"    fn dummy(&self) {}\\n\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \\n\",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\\n\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\\n\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\\n\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"}]}]"}, {"sha": "6f5d5bfb8ca2a029792f0066fabb83a179d0b486", "filename": "tests/writemode/target/stdin.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/894a3c0e7745ece39fcee89d38389a789cfe520a/tests%2Fwritemode%2Ftarget%2Fstdin.json", "raw_url": "https://github.com/rust-lang/rust/raw/894a3c0e7745ece39fcee89d38389a789cfe520a/tests%2Fwritemode%2Ftarget%2Fstdin.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.json?ref=894a3c0e7745ece39fcee89d38389a789cfe520a", "patch": "@@ -1 +1 @@\n-[{\"name\":\"stdin\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\",\"expected\":\"fn some() {}\\nfn main() {}\"}]}]\n+[{\"name\":\"stdin\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\\n\",\"expected\":\"fn some() {}\\nfn main() {}\\n\"}]}]"}]}