{"sha": "d9b98f9c2326e9916c678f252233bab5a14d0e47", "node_id": "C_kwDOAAsO6NoAKGQ5Yjk4ZjljMjMyNmU5OTE2YzY3OGYyNTIyMzNiYWI1YTE0ZDBlNDc", "commit": {"author": {"name": "lzh", "email": "louzhihao@huawei.com", "date": "2021-12-17T03:48:44Z"}, "committer": {"name": "lzh", "email": "louzhihao@huawei.com", "date": "2021-12-17T03:48:44Z"}, "message": "Eliminate duplicate codes of is_single_fp_element", "tree": {"sha": "e05737c97a24db40df1e725bee869f9b8f356400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05737c97a24db40df1e725bee869f9b8f356400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b98f9c2326e9916c678f252233bab5a14d0e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b98f9c2326e9916c678f252233bab5a14d0e47", "html_url": "https://github.com/rust-lang/rust/commit/d9b98f9c2326e9916c678f252233bab5a14d0e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b98f9c2326e9916c678f252233bab5a14d0e47/comments", "author": {"login": "woodenarrow", "id": 95843988, "node_id": "U_kgDOBbZ2lA", "avatar_url": "https://avatars.githubusercontent.com/u/95843988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodenarrow", "html_url": "https://github.com/woodenarrow", "followers_url": "https://api.github.com/users/woodenarrow/followers", "following_url": "https://api.github.com/users/woodenarrow/following{/other_user}", "gists_url": "https://api.github.com/users/woodenarrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodenarrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodenarrow/subscriptions", "organizations_url": "https://api.github.com/users/woodenarrow/orgs", "repos_url": "https://api.github.com/users/woodenarrow/repos", "events_url": "https://api.github.com/users/woodenarrow/events{/privacy}", "received_events_url": "https://api.github.com/users/woodenarrow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "woodenarrow", "id": 95843988, "node_id": "U_kgDOBbZ2lA", "avatar_url": "https://avatars.githubusercontent.com/u/95843988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodenarrow", "html_url": "https://github.com/woodenarrow", "followers_url": "https://api.github.com/users/woodenarrow/followers", "following_url": "https://api.github.com/users/woodenarrow/following{/other_user}", "gists_url": "https://api.github.com/users/woodenarrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodenarrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodenarrow/subscriptions", "organizations_url": "https://api.github.com/users/woodenarrow/orgs", "repos_url": "https://api.github.com/users/woodenarrow/repos", "events_url": "https://api.github.com/users/woodenarrow/events{/privacy}", "received_events_url": "https://api.github.com/users/woodenarrow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd"}], "stats": {"total": 62, "additions": 22, "deletions": 40}, "files": [{"sha": "13706e8c217250a672552ddfd965721c9ad74f98", "filename": "compiler/rustc_target/src/abi/call/s390x.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs?ref=d9b98f9c2326e9916c678f252233bab5a14d0e47", "patch": "@@ -2,7 +2,7 @@\n // for a pre-z13 machine or using -mno-vx.\n \n use crate::abi::call::{ArgAbi, FnAbi, Reg};\n-use crate::abi::{self, HasDataLayout, TyAbiInterface, TyAndLayout};\n+use crate::abi::{HasDataLayout, TyAbiInterface};\n \n fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {\n@@ -12,24 +12,6 @@ fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     }\n }\n \n-fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n-where\n-    Ty: TyAbiInterface<'a, C>,\n-    C: HasDataLayout,\n-{\n-    match layout.abi {\n-        abi::Abi::Scalar(scalar) => scalar.value.is_float(),\n-        abi::Abi::Aggregate { .. } => {\n-            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n-                is_single_fp_element(cx, layout.field(cx, 0))\n-            } else {\n-                false\n-            }\n-        }\n-        _ => false,\n-    }\n-}\n-\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -40,7 +22,7 @@ where\n         return;\n     }\n \n-    if is_single_fp_element(cx, arg.layout) {\n+    if arg.layout.is_single_fp_element(cx) {\n         match arg.layout.size.bytes() {\n             4 => arg.cast_to(Reg::f32()),\n             8 => arg.cast_to(Reg::f64()),"}, {"sha": "d169087dfbdab26b81dd502b34d777db1d874130", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=d9b98f9c2326e9916c678f252233bab5a14d0e47", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::call::{ArgAttribute, FnAbi, PassMode, Reg, RegKind};\n-use crate::abi::{self, HasDataLayout, TyAbiInterface, TyAndLayout};\n+use crate::abi::{HasDataLayout, TyAbiInterface};\n use crate::spec::HasTargetSpec;\n \n #[derive(PartialEq)]\n@@ -8,24 +8,6 @@ pub enum Flavor {\n     Fastcall,\n }\n \n-fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n-where\n-    Ty: TyAbiInterface<'a, C> + Copy,\n-    C: HasDataLayout,\n-{\n-    match layout.abi {\n-        abi::Abi::Scalar(scalar) => scalar.value.is_float(),\n-        abi::Abi::Aggregate { .. } => {\n-            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n-                is_single_fp_element(cx, layout.field(cx, 0))\n-            } else {\n-                false\n-            }\n-        }\n-        _ => false,\n-    }\n-}\n-\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, flavor: Flavor)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -44,7 +26,7 @@ where\n             if t.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n-                if !t.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n+                if !t.is_like_msvc && fn_abi.ret.layout.is_single_fp_element(cx) {\n                     match fn_abi.ret.layout.size.bytes() {\n                         4 => fn_abi.ret.cast_to(Reg::f32()),\n                         8 => fn_abi.ret.cast_to(Reg::f64()),"}, {"sha": "7f1fd28b30df8feabe875bbb8cd9a63fc69167dd", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b98f9c2326e9916c678f252233bab5a14d0e47/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=d9b98f9c2326e9916c678f252233bab5a14d0e47", "patch": "@@ -1276,6 +1276,24 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     {\n         Ty::ty_and_layout_pointee_info_at(self, cx, offset)\n     }\n+\n+    pub fn is_single_fp_element<C>(self, cx: &C) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+        C: HasDataLayout,\n+    {\n+        match self.abi {\n+            Abi::Scalar(scalar) => scalar.value.is_float(),\n+            Abi::Aggregate { .. } => {\n+                if self.fields.count() == 1 && self.fields.offset(0).bytes() == 0 {\n+                    self.field(cx, 0).is_single_fp_element(cx)\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n impl<'a, Ty> TyAndLayout<'a, Ty> {"}]}