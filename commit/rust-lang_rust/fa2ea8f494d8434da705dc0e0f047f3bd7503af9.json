{"sha": "fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmVhOGY0OTRkODQzNGRhNzA1ZGMwZTBmMDQ3ZjNiZDc1MDNhZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-18T20:05:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-18T20:11:49Z"}, "message": "Fix goto definition for record patterns", "tree": {"sha": "7edb22ecebfdd46339f8a1044d9cce00738b8965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7edb22ecebfdd46339f8a1044d9cce00738b8965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "html_url": "https://github.com/rust-lang/rust/commit/fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca61356b01c8f0919443b3ccd5e543e06694466a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca61356b01c8f0919443b3ccd5e543e06694466a", "html_url": "https://github.com/rust-lang/rust/commit/ca61356b01c8f0919443b3ccd5e543e06694466a"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "5d6edc45c8ce37695fad6ae5a07acb9941ebf646", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -195,6 +195,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n+    pub fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<StructField> {\n+        self.analyze(field.syntax()).resolve_record_field_pat(self.db, field)\n+    }\n+\n     pub fn resolve_macro_call(&self, macro_call: &ast::MacroCall) -> Option<MacroDef> {\n         let sa = self.analyze(macro_call.syntax());\n         let macro_call = self.find_file(macro_call.syntax().clone()).with_value(macro_call);"}, {"sha": "0ed6d0958065e46ded351dd21fa4a22799326c57", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -95,6 +95,7 @@ impl SourceAnalyzer {\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n+        // FIXME: macros, see `expr_id`\n         let src = InFile { file_id: self.file_id, value: pat };\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n@@ -167,6 +168,16 @@ impl SourceAnalyzer {\n         Some((struct_field.into(), local))\n     }\n \n+    pub(crate) fn resolve_record_field_pat(\n+        &self,\n+        _db: &dyn HirDatabase,\n+        field: &ast::RecordFieldPat,\n+    ) -> Option<StructField> {\n+        let pat_id = self.pat_id(&field.pat()?)?;\n+        let struct_field = self.infer.as_ref()?.record_field_pat_resolution(pat_id)?;\n+        Some(struct_field.into())\n+    }\n+\n     pub(crate) fn resolve_macro_call(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "dfb6a435fff1e33da376a895bd2397f8241bfa10", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -127,6 +127,7 @@ pub struct InferenceResult {\n     field_resolutions: FxHashMap<ExprId, StructFieldId>,\n     /// For each field in record literal, records the field it resolves to.\n     record_field_resolutions: FxHashMap<ExprId, StructFieldId>,\n+    record_field_pat_resolutions: FxHashMap<PatId, StructFieldId>,\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n@@ -147,6 +148,9 @@ impl InferenceResult {\n     pub fn record_field_resolution(&self, expr: ExprId) -> Option<StructFieldId> {\n         self.record_field_resolutions.get(&expr).copied()\n     }\n+    pub fn record_field_pat_resolution(&self, pat: PatId) -> Option<StructFieldId> {\n+        self.record_field_pat_resolutions.get(&pat).copied()\n+    }\n     pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }"}, {"sha": "7c2ad4384165ac1c3e45c037a45f95b12a8d5fed", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -7,6 +7,7 @@ use hir_def::{\n     expr::{BindingAnnotation, Pat, PatId, RecordFieldPat},\n     path::Path,\n     type_ref::Mutability,\n+    StructFieldId,\n };\n use hir_expand::name::Name;\n use test_utils::tested_by;\n@@ -67,6 +68,11 @@ impl<'a> InferenceContext<'a> {\n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         for subpat in subpats {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n+            if let Some(local_id) = matching_field {\n+                let field_def = StructFieldId { parent: def.unwrap(), local_id };\n+                self.result.record_field_pat_resolutions.insert(subpat.pat, field_def);\n+            }\n+\n             let expected_ty =\n                 matching_field.map_or(Ty::Unknown, |field| field_tys[field].clone().subst(&substs));\n             let expected_ty = self.normalize_associated_types_in(expected_ty);"}, {"sha": "9998ca5a3d351962737feed0f7d2f8b5205a8454", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -62,10 +62,9 @@ pub(crate) enum ReferenceResult {\n \n impl ReferenceResult {\n     fn to_vec(self) -> Vec<NavigationTarget> {\n-        use self::ReferenceResult::*;\n         match self {\n-            Exact(target) => vec![target],\n-            Approximate(vec) => vec,\n+            ReferenceResult::Exact(target) => vec![target],\n+            ReferenceResult::Approximate(vec) => vec,\n         }\n     }\n }\n@@ -74,8 +73,6 @@ pub(crate) fn reference_definition(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,\n ) -> ReferenceResult {\n-    use self::ReferenceResult::*;\n-\n     let name_kind = classify_name_ref(sema, name_ref);\n     if let Some(def) = name_kind {\n         let def = def.definition();\n@@ -91,7 +88,7 @@ pub(crate) fn reference_definition(\n         .into_iter()\n         .map(|s| s.to_nav(sema.db))\n         .collect();\n-    Approximate(navs)\n+    ReferenceResult::Approximate(navs)\n }\n \n #[cfg(test)]\n@@ -398,6 +395,25 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_def_for_record_pat_fields() {\n+        covers!(ra_ide_db::goto_def_for_record_field_pats);\n+        check_goto(\n+            r\"\n+            //- /lib.rs\n+            struct Foo {\n+                spam: u32,\n+            }\n+\n+            fn bar(foo: Foo) -> Foo {\n+                let Foo { spam<|>: _, } = foo\n+            }\n+            \",\n+            \"spam RECORD_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+            \"spam: u32|spam\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_def_for_record_fields_macros() {\n         check_goto("}, {"sha": "785613b82c10ab5f7927a036f4237907ad00f7fd", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -180,6 +180,7 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n     }\n }\n \n+#[derive(Debug)]\n pub enum NameRefClass {\n     Definition(Definition),\n     FieldShorthand { local: Local, field: Definition },\n@@ -229,6 +230,14 @@ pub fn classify_name_ref(\n         }\n     }\n \n+    if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n+        tested_by!(goto_def_for_record_field_pats; force);\n+        if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+            let field = Definition::StructField(field);\n+            return Some(NameRefClass::Definition(field));\n+        }\n+    }\n+\n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n         tested_by!(goto_def_for_macros; force);\n         if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {"}, {"sha": "03b4be21c974b7698115164b7356f834704e4e6d", "filename": "crates/ra_ide_db/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2ea8f494d8434da705dc0e0f047f3bd7503af9/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs?ref=fa2ea8f494d8434da705dc0e0f047f3bd7503af9", "patch": "@@ -6,5 +6,6 @@ test_utils::marks![\n     goto_def_for_fields\n     goto_def_for_record_fields\n     goto_def_for_field_init_shorthand\n+    goto_def_for_record_field_pats\n     search_filters_by_range\n ];"}]}