{"sha": "2fcd5427345154661f8d512745bdedaf072a55b6", "node_id": "C_kwDOAAsO6NoAKDJmY2Q1NDI3MzQ1MTU0NjYxZjhkNTEyNzQ1YmRlZGFmMDcyYTU1YjY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-11T01:24:08Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-11T01:24:08Z"}, "message": "Remove is_autoref parameter", "tree": {"sha": "513422cd1454e7e79cec7a2e69bc95bc5d05ffe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513422cd1454e7e79cec7a2e69bc95bc5d05ffe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fcd5427345154661f8d512745bdedaf072a55b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcd5427345154661f8d512745bdedaf072a55b6", "html_url": "https://github.com/rust-lang/rust/commit/2fcd5427345154661f8d512745bdedaf072a55b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fcd5427345154661f8d512745bdedaf072a55b6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "html_url": "https://github.com/rust-lang/rust/commit/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "928daba0a7b3937db6eebaee61d693a122571e9f", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -103,11 +103,10 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n         bk: rustc_middle::ty::BorrowKind,\n-        is_autoref: bool,\n     ) {\n         debug!(\n             \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n-            borrow_kind={bk:?}, is_autoref={is_autoref}\"\n+            borrow_kind={bk:?}\"\n         );\n \n         self.places"}, {"sha": "257846324b888307145e064e96a9a48f8a4b852f", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -1792,7 +1792,6 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n         bk: ty::BorrowKind,\n-        _is_autoref: bool,\n     ) {\n         let PlaceBase::Upvar(upvar_id) = place_with_id.place.base else { return };\n         assert_eq!(self.closure_def_id, upvar_id.closure_expr_id);\n@@ -1827,7 +1826,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow, false);\n+        self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow);\n     }\n }\n "}, {"sha": "4313a75aee89d49e447e738ed417c20656084416", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -45,15 +45,14 @@ pub trait Delegate<'tcx> {\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n         bk: ty::BorrowKind,\n-        is_autoref: bool,\n     );\n \n     /// The value found at `place` is being copied.\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn copy(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n         // In most cases, copying data from `x` is equivalent to doing `*&x`, so by default\n         // we treat a copy of `x` as a borrow of `x`.\n-        self.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow, false)\n+        self.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n     }\n \n     /// The path at `assignee_place` is being assigned to.\n@@ -184,7 +183,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"borrow_expr(expr={:?}, bk={:?})\", expr, bk);\n \n         let place_with_id = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk, false);\n+        self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n \n         self.walk_expr(expr)\n     }\n@@ -567,7 +566,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // this is an autoref of `x`.\n                 adjustment::Adjust::Deref(Some(ref deref)) => {\n                     let bk = ty::BorrowKind::from_mutbl(deref.mutbl);\n-                    self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk, true);\n+                    self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n                 }\n \n                 adjustment::Adjust::Borrow(ref autoref) => {\n@@ -599,19 +598,13 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     base_place,\n                     base_place.hir_id,\n                     ty::BorrowKind::from_mutbl(m.into()),\n-                    true,\n                 );\n             }\n \n             adjustment::AutoBorrow::RawPtr(m) => {\n                 debug!(\"walk_autoref: expr.hir_id={} base_place={:?}\", expr.hir_id, base_place);\n \n-                self.delegate.borrow(\n-                    base_place,\n-                    base_place.hir_id,\n-                    ty::BorrowKind::from_mutbl(m),\n-                    true,\n-                );\n+                self.delegate.borrow(base_place, base_place.hir_id, ty::BorrowKind::from_mutbl(m));\n             }\n         }\n     }\n@@ -684,7 +677,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     match bm {\n                         ty::BindByReference(m) => {\n                             let bk = ty::BorrowKind::from_mutbl(m);\n-                            delegate.borrow(place, discr_place.hir_id, bk, false);\n+                            delegate.borrow(place, discr_place.hir_id, bk);\n                         }\n                         ty::BindByValue(..) => {\n                             debug!(\"walk_pat binding consuming pat\");\n@@ -814,7 +807,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 &place_with_id,\n                                 place_with_id.hir_id,\n                                 upvar_borrow,\n-                                false,\n                             );\n                         }\n                     }"}, {"sha": "af591dd71aa1d37d383570065195df3d6b637821", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind, _is_autoref: bool) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);"}, {"sha": "9d8679d77c6d02590737d25a19de817cb6e6f679", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -90,7 +90,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind, _is_autoref: bool) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if bk == ty::BorrowKind::MutBorrow {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {"}, {"sha": "ebfd908a6fb741692149fe5a491bf1612680221a", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -332,7 +332,7 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n         self.move_common(cmt);\n     }\n \n-    fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind, _is_autoref: bool) {}\n+    fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n "}, {"sha": "63c442e70085a1015825b4731f3b079ccd985af1", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -886,7 +886,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     #[allow(clippy::too_many_lines)]\n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind, _is_autoref: bool) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             let map = self.cx.tcx.hir();\n             let span = map.span(cmt.hir_id);"}, {"sha": "405e306359bc9b2dfe46278b43c4d5e3c6307a90", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd5427345154661f8d512745bdedaf072a55b6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=2fcd5427345154661f8d512745bdedaf072a55b6", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> MutVarsDelegate {\n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind, _is_autoref: bool) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if bk == ty::BorrowKind::MutBorrow {\n             self.update(cmt);\n         }"}]}