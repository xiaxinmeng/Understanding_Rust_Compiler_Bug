{"sha": "8af9a18660f9b2f34da902f43c1eef856af1cfca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjlhMTg2NjBmOWIyZjM0ZGE5MDJmNDNjMWVlZjg1NmFmMWNmY2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:33:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:33:26Z"}, "message": "remove Cancelable from Crate API", "tree": {"sha": "e757ea3f647159de8ce49e43177e10c43f61d2bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e757ea3f647159de8ce49e43177e10c43f61d2bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af9a18660f9b2f34da902f43c1eef856af1cfca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af9a18660f9b2f34da902f43c1eef856af1cfca", "html_url": "https://github.com/rust-lang/rust/commit/8af9a18660f9b2f34da902f43c1eef856af1cfca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af9a18660f9b2f34da902f43c1eef856af1cfca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "html_url": "https://github.com/rust-lang/rust/commit/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "db270b871ebbc4d5cd64c26522c05fb01a6cd931", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=8af9a18660f9b2f34da902f43c1eef856af1cfca", "patch": "@@ -33,10 +33,10 @@ impl Crate {\n     pub fn crate_id(&self) -> CrateId {\n         self.crate_id\n     }\n-    pub fn dependencies(&self, db: &impl HirDatabase) -> Cancelable<Vec<CrateDependency>> {\n-        Ok(self.dependencies_impl(db))\n+    pub fn dependencies(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n+        self.dependencies_impl(db)\n     }\n-    pub fn root_module(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn root_module(&self, db: &impl HirDatabase) -> Option<Module> {\n         self.root_module_impl(db)\n     }\n }"}, {"sha": "8c6e34873b63a2756ffd61b4ae6b8cc00993db4e", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=8af9a18660f9b2f34da902f43c1eef856af1cfca", "patch": "@@ -1,4 +1,4 @@\n-use ra_db::{CrateId, Cancelable};\n+use ra_db::CrateId;\n \n use crate::{\n     HirFileId, Crate, CrateDependency, AsName, DefLoc, DefKind, Module, SourceItemId,\n@@ -20,7 +20,7 @@ impl Crate {\n             })\n             .collect()\n     }\n-    pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n         let crate_graph = db.crate_graph();\n         let file_id = crate_graph.crate_root(self.crate_id);\n         let source_root_id = db.file_source_root(file_id);\n@@ -31,7 +31,7 @@ impl Crate {\n             file_id,\n             item_id: None,\n         };\n-        let module_id = ctry!(module_tree.find_module_by_source(source));\n+        let module_id = module_tree.find_module_by_source(source)?;\n \n         let def_loc = DefLoc {\n             kind: DefKind::Module,\n@@ -42,6 +42,6 @@ impl Crate {\n         let def_id = def_loc.id(db);\n \n         let module = Module::new(def_id);\n-        Ok(Some(module))\n+        Some(module)\n     }\n }"}, {"sha": "e51cbe78663f9dabbe534178faf8e8bb4a91c550", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=8af9a18660f9b2f34da902f43c1eef856af1cfca", "patch": "@@ -353,8 +353,8 @@ where\n             if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n             {\n                 let krate = Crate::new(crate_id);\n-                for dep in krate.dependencies(self.db)? {\n-                    if let Some(module) = dep.krate.root_module(self.db)? {\n+                for dep in krate.dependencies(self.db) {\n+                    if let Some(module) = dep.krate.root_module(self.db) {\n                         let def_id = module.def_id;\n                         self.add_module_item(\n                             &mut module_items,"}, {"sha": "c7fbcfd06d9669eacca7cd580f9f8765b3ad4d12", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9a18660f9b2f34da902f43c1eef856af1cfca/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=8af9a18660f9b2f34da902f43c1eef856af1cfca", "patch": "@@ -93,7 +93,7 @@ impl CrateImplBlocks {\n             source_root_id,\n             impls: FxHashMap::default(),\n         };\n-        if let Some(module) = krate.root_module(db)? {\n+        if let Some(module) = krate.root_module(db) {\n             crate_impl_blocks.collect_recursive(db, module)?;\n         }\n         Ok(Arc::new(crate_impl_blocks))"}]}