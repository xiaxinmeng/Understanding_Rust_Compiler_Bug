{"sha": "3fe2233fd3281f80bf3109b4aebb2323fdf58649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTIyMzNmZDMyODFmODBiZjMxMDliNGFlYmIyMzIzZmRmNTg2NDk=", "commit": {"author": {"name": "Ivan Sorokin", "email": "ivan@sorokin.io", "date": "2018-03-31T12:27:39Z"}, "committer": {"name": "Ivan Sorokin", "email": "ivan@sorokin.io", "date": "2018-04-05T21:13:17Z"}, "message": "Fix error_on_unformatted and skip_children override\n\nCurrently, error_on_unformatted and skip_children options\nspecified in the config file are discarded.\nThis happens because CLI options have a higher priority,\nbut we coerce an absence of a `bool` option to `false`.\nIn this scenario, an absence of a `bool` option is indistinguishable\nfrom explicetely set as `false`. We should coerce it to `None` instead,\nso it does not override the one in the config file.", "tree": {"sha": "b3876da02bba2383288bda67edd0907cf96d8127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3876da02bba2383288bda67edd0907cf96d8127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe2233fd3281f80bf3109b4aebb2323fdf58649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe2233fd3281f80bf3109b4aebb2323fdf58649", "html_url": "https://github.com/rust-lang/rust/commit/3fe2233fd3281f80bf3109b4aebb2323fdf58649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe2233fd3281f80bf3109b4aebb2323fdf58649/comments", "author": {"login": "i1skn", "id": 6160124, "node_id": "MDQ6VXNlcjYxNjAxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6160124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i1skn", "html_url": "https://github.com/i1skn", "followers_url": "https://api.github.com/users/i1skn/followers", "following_url": "https://api.github.com/users/i1skn/following{/other_user}", "gists_url": "https://api.github.com/users/i1skn/gists{/gist_id}", "starred_url": "https://api.github.com/users/i1skn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i1skn/subscriptions", "organizations_url": "https://api.github.com/users/i1skn/orgs", "repos_url": "https://api.github.com/users/i1skn/repos", "events_url": "https://api.github.com/users/i1skn/events{/privacy}", "received_events_url": "https://api.github.com/users/i1skn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "i1skn", "id": 6160124, "node_id": "MDQ6VXNlcjYxNjAxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6160124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i1skn", "html_url": "https://github.com/i1skn", "followers_url": "https://api.github.com/users/i1skn/followers", "following_url": "https://api.github.com/users/i1skn/following{/other_user}", "gists_url": "https://api.github.com/users/i1skn/gists{/gist_id}", "starred_url": "https://api.github.com/users/i1skn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i1skn/subscriptions", "organizations_url": "https://api.github.com/users/i1skn/orgs", "repos_url": "https://api.github.com/users/i1skn/repos", "events_url": "https://api.github.com/users/i1skn/events{/privacy}", "received_events_url": "https://api.github.com/users/i1skn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ba6f70b1755048008d2935b50fede3a44618e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ba6f70b1755048008d2935b50fede3a44618e9", "html_url": "https://github.com/rust-lang/rust/commit/b7ba6f70b1755048008d2935b50fede3a44618e9"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3ad2d3088f0fa650a6b98310155001c5537c71d4", "filename": "src/bin/main.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fe2233fd3281f80bf3109b4aebb2323fdf58649/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe2233fd3281f80bf3109b4aebb2323fdf58649/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=3fe2233fd3281f80bf3109b4aebb2323fdf58649", "patch": "@@ -57,19 +57,18 @@ enum Operation {\n /// Parsed command line options.\n #[derive(Clone, Debug, Default)]\n struct CliOptions {\n-    skip_children: bool,\n+    skip_children: Option<bool>,\n     verbose: bool,\n     write_mode: Option<WriteMode>,\n     color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n-    error_on_unformatted: bool,\n+    error_on_unformatted: Option<bool>,\n }\n \n impl CliOptions {\n     fn from_matches(matches: &Matches) -> FmtResult<CliOptions> {\n         let mut options = CliOptions::default();\n-        options.skip_children = matches.opt_present(\"skip-children\");\n         options.verbose = matches.opt_present(\"verbose\");\n         let unstable_features = matches.opt_present(\"unstable-features\");\n         let rust_nightly = option_env!(\"CFG_RELEASE_CHANNEL\")\n@@ -105,19 +104,26 @@ impl CliOptions {\n             options.file_lines = file_lines.parse()?;\n         }\n \n+        if matches.opt_present(\"skip-children\") {\n+            options.skip_children = Some(true);\n+        }\n         if matches.opt_present(\"error-on-unformatted\") {\n-            options.error_on_unformatted = true;\n+            options.error_on_unformatted = Some(true);\n         }\n \n         Ok(options)\n     }\n \n     fn apply_to(self, config: &mut Config) {\n-        config.set().skip_children(self.skip_children);\n         config.set().verbose(self.verbose);\n         config.set().file_lines(self.file_lines);\n         config.set().unstable_features(self.unstable_features);\n-        config.set().error_on_unformatted(self.error_on_unformatted);\n+        if let Some(skip_children) = self.skip_children {\n+            config.set().skip_children(skip_children);\n+        }\n+        if let Some(error_on_unformatted) = self.error_on_unformatted {\n+            config.set().error_on_unformatted(error_on_unformatted);\n+        }\n         if let Some(write_mode) = self.write_mode {\n             config.set().write_mode(write_mode);\n         }"}]}