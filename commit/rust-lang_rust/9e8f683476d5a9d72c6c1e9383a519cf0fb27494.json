{"sha": "9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGY2ODM0NzZkNWE5ZDcyYzZjMWU5MzgzYTUxOWNmMGZiMjc0OTQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-21T16:47:41Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-22T17:08:49Z"}, "message": "Remove Alloc::oom", "tree": {"sha": "6c928061089c012a536306778cea974ef18e7c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c928061089c012a536306778cea974ef18e7c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "html_url": "https://github.com/rust-lang/rust/commit/9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e513c1bd314bbeb6295a7a759de8833b52ff854d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e513c1bd314bbeb6295a7a759de8833b52ff854d", "html_url": "https://github.com/rust-lang/rust/commit/e513c1bd314bbeb6295a7a759de8833b52ff854d"}], "stats": {"total": 125, "additions": 10, "deletions": 115}, "files": [{"sha": "6f054dc61a59b8393aaa4d7772df304ea3e4e151", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -19,7 +19,6 @@ dependencies = [\n name = \"alloc_jemalloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.0.0\","}, {"sha": "c0372d24ed50151f87e617c385a8d27a79e2f5bc", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -131,11 +131,6 @@ unsafe impl Alloc for Global {\n     unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::alloc_zeroed(self, layout)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        oom()\n-    }\n }\n \n /// The allocator for unique pointers."}, {"sha": "16f0630b91134dd62965aa04d75663b98cc402f6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T> Alloc for T where T: CoreAlloc {\n     }\n \n     fn oom(&mut self, _: AllocErr) -> ! {\n-        CoreAlloc::oom(self)\n+        unsafe { ::core::intrinsics::abort() }\n     }\n \n     fn usable_size(&self, layout: &Layout) -> (usize, usize) {"}, {"sha": "7ef0a27fc7258876768fb3abfaac3396e9ff8da4", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -14,7 +14,7 @@ use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n-use alloc::{Alloc, Layout, Global};\n+use alloc::{Alloc, Layout, Global, oom};\n use alloc::CollectionAllocErr;\n use alloc::CollectionAllocErr::*;\n use boxed::Box;\n@@ -101,7 +101,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                 };\n                 match result {\n                     Ok(ptr) => ptr,\n-                    Err(_) => a.oom(),\n+                    Err(_) => oom(),\n                 }\n             };\n \n@@ -316,7 +316,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                                  new_size);\n                     match ptr_res {\n                         Ok(ptr) => (new_cap, ptr.cast().into()),\n-                        Err(_) => self.a.oom(),\n+                        Err(_) => oom(),\n                     }\n                 }\n                 None => {\n@@ -325,7 +325,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                     let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                     match self.a.alloc_array::<T>(new_cap) {\n                         Ok(ptr) => (new_cap, ptr.into()),\n-                        Err(_) => self.a.oom(),\n+                        Err(_) => oom(),\n                     }\n                 }\n             };\n@@ -442,7 +442,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve_exact(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => self.a.oom(),\n+            Err(AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -552,7 +552,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => self.a.oom(),\n+            Err(AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -667,7 +667,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                      old_layout,\n                                      new_size) {\n                     Ok(p) => self.ptr = p.cast().into(),\n-                    Err(_) => self.a.oom(),\n+                    Err(_) => oom(),\n                 }\n             }\n             self.cap = amount;"}, {"sha": "7986d5dd2eb54b69a12990dc83891ba320a7e838", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -12,7 +12,6 @@ test = false\n doc = false\n \n [dependencies]\n-alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "4b8755877de4bf7e044d8047054f076e0e4d3984", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -14,7 +14,7 @@\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n-#![feature(alloc_system)]\n+#![feature(core_intrinsics)]\n #![feature(libc)]\n #![feature(linkage)]\n #![feature(staged_api)]\n@@ -23,7 +23,6 @@\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n #![rustc_alloc_kind = \"exe\"]\n \n-extern crate alloc_system;\n extern crate libc;\n \n #[cfg(not(dummy_jemalloc))]\n@@ -102,7 +101,7 @@ mod contents {\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_oom() -> ! {\n-        ::alloc_system::oom()\n+        ::core::intrinsics::abort();\n     }\n \n     #[no_mangle]"}, {"sha": "7376ac0f15dd0fd7a61b62e2826bca468008c8e5", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -71,11 +71,6 @@ unsafe impl Alloc for System {\n                       new_size: usize) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        ::oom()\n-    }\n }\n \n #[cfg(stage0)]\n@@ -103,11 +98,6 @@ unsafe impl<'a> Alloc for &'a System {\n                       new_size: usize) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::realloc(*self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        ::oom()\n-    }\n }\n \n #[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n@@ -366,63 +356,3 @@ mod platform {\n         }\n     }\n }\n-\n-#[inline]\n-pub fn oom() -> ! {\n-    write_to_stderr(\"fatal runtime error: memory allocation failed\");\n-    unsafe {\n-        ::core::intrinsics::abort();\n-    }\n-}\n-\n-#[cfg(any(unix, target_os = \"redox\"))]\n-#[inline]\n-fn write_to_stderr(s: &str) {\n-    extern crate libc;\n-\n-    unsafe {\n-        libc::write(libc::STDERR_FILENO,\n-                    s.as_ptr() as *const libc::c_void,\n-                    s.len());\n-    }\n-}\n-\n-#[cfg(windows)]\n-#[inline]\n-fn write_to_stderr(s: &str) {\n-    use core::ptr;\n-\n-    type LPVOID = *mut u8;\n-    type HANDLE = LPVOID;\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type LPDWORD = *mut DWORD;\n-    type LPOVERLAPPED = *mut u8;\n-\n-    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n-\n-    extern \"system\" {\n-        fn WriteFile(hFile: HANDLE,\n-                     lpBuffer: LPVOID,\n-                     nNumberOfBytesToWrite: DWORD,\n-                     lpNumberOfBytesWritten: LPDWORD,\n-                     lpOverlapped: LPOVERLAPPED)\n-                     -> BOOL;\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-    }\n-\n-    unsafe {\n-        // WriteFile silently fails if it is passed an invalid\n-        // handle, so there is no need to check the result of\n-        // GetStdHandle.\n-        WriteFile(GetStdHandle(STD_ERROR_HANDLE),\n-                  s.as_ptr() as LPVOID,\n-                  s.len() as DWORD,\n-                  ptr::null_mut(),\n-                  ptr::null_mut());\n-    }\n-}\n-\n-#[cfg(not(any(windows, unix, target_os = \"redox\")))]\n-#[inline]\n-fn write_to_stderr(_: &str) {}"}, {"sha": "674c4fb57c7f03de938288d6550d632e22484355", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -603,32 +603,6 @@ pub unsafe trait Alloc {\n     ///   to allocate that block of memory.\n     unsafe fn dealloc(&mut self, ptr: NonNull<Opaque>, layout: Layout);\n \n-    /// Allocator-specific method for signaling an out-of-memory\n-    /// condition.\n-    ///\n-    /// `oom` aborts the thread or process, optionally performing\n-    /// cleanup or logging diagnostic information before panicking or\n-    /// aborting.\n-    ///\n-    /// `oom` is meant to be used by clients unable to cope with an\n-    /// unsatisfied allocation request, and wish to abandon\n-    /// computation rather than attempt to recover locally.\n-    ///\n-    /// Implementations of the `oom` method are discouraged from\n-    /// infinitely regressing in nested calls to `oom`. In\n-    /// practice this means implementors should eschew allocating,\n-    /// especially from `self` (directly or indirectly).\n-    ///\n-    /// Implementations of the allocation and reallocation methods\n-    /// (e.g. `alloc`, `alloc_one`, `realloc`) are discouraged from\n-    /// panicking (or aborting) in the event of memory exhaustion;\n-    /// instead they should return an appropriate error from the\n-    /// invoked method, and let the client decide whether to invoke\n-    /// this `oom` method in response.\n-    fn oom(&mut self) -> ! {\n-        unsafe { ::intrinsics::abort() }\n-    }\n-\n     // == ALLOCATOR-SPECIFIC QUANTITIES AND LIMITS ==\n     // usable_size\n "}, {"sha": "140cad22f34e42ae52b5b94ffe1b071fd9c3ff41", "filename": "src/test/compile-fail/allocator/not-an-allocator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f683476d5a9d72c6c1e9383a519cf0fb27494/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs?ref=9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "patch": "@@ -16,6 +16,5 @@ static A: usize = 0;\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n-//~| the trait bound `usize:\n \n fn main() {}"}]}