{"sha": "0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNWU3MWY4ZjJkNDJlM2VhYzNlODU1YTgzZDUzODk5ZDRkYTZlYjM=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-03T08:39:35Z"}, "committer": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-03T08:39:35Z"}, "message": "Add additional check on if arg type has iter method", "tree": {"sha": "9e6a11d0656ad7461e7c6867e9cab04b5f1ab5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6a11d0656ad7461e7c6867e9cab04b5f1ab5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "html_url": "https://github.com/rust-lang/rust/commit/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07cd5b6fe47b1e26f19a1bede7c2e4967cb46d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07cd5b6fe47b1e26f19a1bede7c2e4967cb46d7", "html_url": "https://github.com/rust-lang/rust/commit/e07cd5b6fe47b1e26f19a1bede7c2e4967cb46d7"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "5bfdc98bc6a5060c036a42c0b30cf38d4f45e16f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "patch": "@@ -2041,25 +2041,24 @@ fn check_manual_flatten<'tcx>(\n                     &mut applicability,\n                 );\n                 // Determine if `arg` is by reference, an `Iterator`, or implicitly adjusted with `into_iter`\n-                let hint = match arg.kind {\n-                    ExprKind::AddrOf(_, _, arg_expr) => {\n+                let arg_ty = cx.typeck_results().expr_ty(arg);\n+                let hint = if arg_ty.is_ref() {\n+                    if has_iter_method(cx, arg_ty).is_none() {\n+                        return;\n+                    } else if let ExprKind::AddrOf(_, _, arg_expr) = arg.kind {\n                         format!(\"{}.iter().flatten()\", snippet(cx, arg_expr.span, \"..\"))\n-                    },\n-                    ExprKind::MethodCall(_, _, _, _) | ExprKind::Path(QPath::Resolved(None, _)) => {\n-                        // Determine if `arg` is `Iterator` or implicitly calls `into_iter`\n-                        let arg_ty = cx.typeck_results().expr_ty(arg);\n-                        if let Some(id) = get_trait_def_id(cx, &paths::ITERATOR) {\n-                            let is_iterator = implements_trait(cx, arg_ty, id, &[]);\n-                            if is_iterator {\n-                                format!(\"{}.flatten()\", arg_snippet)\n-                            } else {\n-                                format!(\"{}.into_iter().flatten()\", arg_snippet)\n-                            }\n-                        } else {\n-                            return\n-                        }\n-                    },\n-                    _ => return,\n+                    } else {\n+                        return;\n+                    }\n+                } else if let Some(id) = get_trait_def_id(cx, &paths::ITERATOR) {\n+                    let is_iterator = implements_trait(cx, arg_ty, id, &[]);\n+                    if is_iterator {\n+                        format!(\"{}.flatten()\", arg_snippet)\n+                    } else {\n+                        format!(\"{}.into_iter().flatten()\", arg_snippet)\n+                    }\n+                } else {\n+                    return\n                 };\n \n                 span_lint_and_sugg("}]}