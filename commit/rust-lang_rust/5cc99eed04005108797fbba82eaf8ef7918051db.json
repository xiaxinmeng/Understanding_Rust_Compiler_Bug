{"sha": "5cc99eed04005108797fbba82eaf8ef7918051db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYzk5ZWVkMDQwMDUxMDg3OTdmYmJhODJlYWY4ZWY3OTE4MDUxZGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-09T22:07:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:44Z"}, "message": "Handle missing projection restriction", "tree": {"sha": "e62d586e89316a4253ed97bddcefadf27f0e6ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62d586e89316a4253ed97bddcefadf27f0e6ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cc99eed04005108797fbba82eaf8ef7918051db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc99eed04005108797fbba82eaf8ef7918051db", "html_url": "https://github.com/rust-lang/rust/commit/5cc99eed04005108797fbba82eaf8ef7918051db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cc99eed04005108797fbba82eaf8ef7918051db/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa8491648d742085bf071169624d99d542a044f", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa8491648d742085bf071169624d99d542a044f", "html_url": "https://github.com/rust-lang/rust/commit/daa8491648d742085bf071169624d99d542a044f"}], "stats": {"total": 159, "additions": 134, "deletions": 25}, "files": [{"sha": "2ac691b47aca2557cfdcbda3b0f3e2c05ff49bb1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -975,11 +975,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             trait_ref.self_ty(),\n             trait_ref.self_ty().kind,\n         );\n-        let param_ty = if let ty::Param(param_ty) = &trait_ref.self_ty().kind {\n-            param_ty\n-        } else {\n-            err.help(&format!(\"consider adding a `where {}` bound\", trait_ref.to_predicate()));\n-            return;\n+        let (param_ty, projection) = match &trait_ref.self_ty().kind {\n+            ty::Param(param_ty) => (Some(param_ty), None),\n+            ty::Projection(projection) => (None, Some(projection)),\n+            _ => {\n+                err.help(&format!(\"consider adding a `where {}` bound\", trait_ref.to_predicate()));\n+                return;\n+            }\n         };\n \n         let mut hir_id = body_id;\n@@ -996,7 +998,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 hir::Node::ImplItem(hir::ImplItem {\n                     generics,\n                     kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, _), ..\n-                }) if param_ty.name.as_str() == \"Self\" => {\n+                }) if param_ty.map(|p| p.name.as_str() == \"Self\").unwrap_or(false) => {\n                     if !generics.where_clause.predicates.is_empty() {\n                         err.span_suggestion(\n                             generics.where_clause.span().unwrap().shrink_to_hi(),\n@@ -1014,6 +1016,34 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                     return;\n                 }\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(decl, _, generics, _), ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem {\n+                    generics,\n+                    kind: hir::TraitItemKind::Method(hir::MethodSig { decl, .. }, _), ..\n+                }) |\n+                hir::Node::ImplItem(hir::ImplItem {\n+                    generics,\n+                    kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, _), ..\n+                }) if projection.is_some() => {\n+                    if !generics.where_clause.predicates.is_empty() {\n+                        err.span_suggestion(\n+                            generics.where_clause.span().unwrap().shrink_to_hi(),\n+                            \"consider further restricting the associated type\",\n+                            format!(\", {}\", trait_ref.to_predicate()),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            decl.output.span().shrink_to_hi(),\n+                            \"consider further restricting the associated type\",\n+                            format!(\" where {}\", trait_ref.to_predicate()),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    return;\n+                }\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(_, generics), span, .. }) |\n@@ -1036,9 +1066,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }), span, ..\n                 }) |\n                 hir::Node::TraitItem(hir::TraitItem { generics, span, .. }) |\n-                hir::Node::ImplItem(hir::ImplItem { generics, span, .. }) => {\n+                hir::Node::ImplItem(hir::ImplItem { generics, span, .. })\n+                if param_ty.is_some() => {\n                     let restrict_msg = \"consider further restricting this bound\";\n-                    let param_name = param_ty.name.as_str();\n+                    let param_name = param_ty.unwrap().name.as_str();\n                     for param in &generics.params {\n                         if param_name == param.name.ident().as_str() {\n                             if param_name.starts_with(\"impl \") {\n@@ -1064,7 +1095,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         generics.where_clause.span().unwrap().shrink_to_hi(),\n                                         &format!(\n                                             \"consider further restricting type parameter `{}`\",\n-                                            param_ty,\n+                                            param_name,\n                                         ),\n                                         format!(\", {}\", trait_ref.to_predicate()),\n                                         Applicability::MachineApplicable,"}, {"sha": "1795fb5acebe033dca0b276f191dd5b69cd07cf9", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -9,7 +9,10 @@ LL | impl Case1 for S1 {\n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                           - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -19,15 +22,17 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator` bound\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                           - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -37,15 +42,17 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send` bound\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                           - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -55,7 +62,6 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync` bound\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1"}, {"sha": "68ee38d16b3f3ce457ca8e350a1b28b5eb55d4ac", "filename": "src/test/ui/associated-types/associated-types-bound-failure.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+// Test equality constraints on associated types in a where clause.\n+#![allow(dead_code)]\n+\n+pub trait ToInt {\n+    fn to_int(&self) -> isize;\n+}\n+\n+pub trait GetToInt\n+{\n+    type R;\n+\n+    fn get(&self) -> <Self as GetToInt>::R;\n+}\n+\n+fn foo<G>(g: G) -> isize\n+    where G : GetToInt, <G as GetToInt>::R: ToInt\n+{\n+    ToInt::to_int(&g.get()) //~ ERROR E0277\n+}\n+\n+fn bar<G : GetToInt>(g: G) -> isize\n+    where G::R : ToInt\n+{\n+    ToInt::to_int(&g.get()) // OK\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "31e073cc7a8bde695fe07ad887dae1c4677ea596", "filename": "src/test/ui/associated-types/associated-types-bound-failure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n // Test equality constraints on associated types in a where clause.\n+#![allow(dead_code)]\n \n pub trait ToInt {\n     fn to_int(&self) -> isize;"}, {"sha": "c420c86a2758f1b696d9df295e80dee25902750e", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,13 +1,14 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n-  --> $DIR/associated-types-bound-failure.rs:17:19\n+  --> $DIR/associated-types-bound-failure.rs:19:19\n    |\n LL |     fn to_int(&self) -> isize;\n    |     -------------------------- required by `ToInt::to_int`\n ...\n+LL |     where G : GetToInt\n+   |                       - help: consider further restricting the associated type: `, <G as GetToInt>::R: ToInt`\n+LL | {\n LL |     ToInt::to_int(&g.get())\n    |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n-   |\n-   = help: consider adding a `where <G as GetToInt>::R: ToInt` bound\n \n error: aborting due to previous error\n "}, {"sha": "385de541e560d67429ae45d6a26e98ef8596f4f9", "filename": "src/test/ui/associated-types/associated-types-unsized.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+trait Get {\n+    type Value: ?Sized;\n+    fn get(&self) -> <Self as Get>::Value;\n+}\n+\n+fn foo<T:Get>(t: T)  where <T as Get>::Value: std::marker::Sized{\n+    let x = t.get(); //~ ERROR the size for values of type\n+}\n+\n+fn main() {\n+}"}, {"sha": "bdba4c7ff16a10344f5465b87147da0cb55de27b", "filename": "src/test/ui/associated-types/associated-types-unsized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n trait Get {\n     type Value: ?Sized;\n     fn get(&self) -> <Self as Get>::Value;"}, {"sha": "18595721bceefc78662a73138aeb85ba1089d348", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,12 +1,13 @@\n error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n-  --> $DIR/associated-types-unsized.rs:7:9\n+  --> $DIR/associated-types-unsized.rs:10:9\n    |\n+LL | fn foo<T:Get>(t: T) {\n+   |                     - help: consider further restricting the associated type: `where <T as Get>::Value: std::marker::Sized`\n LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "283a5e04a8b6f8d19199e5cb28e65719999c9731", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,11 +1,12 @@\n error[E0277]: `<P as Process<'_>>::Item` is not an iterator\n   --> $DIR/issue-22872.rs:20:40\n    |\n+LL | fn push_process<P>(process: P) where P: Process<'static> {\n+   |                                                         - help: consider further restricting the associated type: `, <P as Process<'_>>::Item: std::iter::Iterator`\n LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<P as Process<'_>>::Item`\n-   = help: consider adding a `where <P as Process<'_>>::Item: std::iter::Iterator` bound\n    = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n    = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n "}, {"sha": "6688203147eaf2ea38323f9dd07304e66f7119d2", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `<Self as std::ops::Deref>::Target` ca\n   --> $DIR/issue-42312.rs:4:29\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref {}\n-   |                             ^ doesn't have a size known at compile-time\n+   |                             ^                - help: consider further restricting the associated type: `, <Self as std::ops::Deref>::Target: std::marker::Sized`\n+   |                             |\n+   |                             doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "757d8b8a235a55b5179a81105aa2e4e144825e6e", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+// Test that we do not consider associated types to be sendable without\n+// some applicable trait bound (and we don't ICE).\n+#![allow(dead_code)]\n+\n+trait Trait {\n+    type AssocType;\n+    fn dummy(&self) { }\n+}\n+fn bar<T:Trait+Send>()  where <T as Trait>::AssocType: std::marker::Send{\n+    is_send::<T::AssocType>(); //~ ERROR E0277\n+}\n+\n+fn is_send<T:Send>() {\n+}\n+\n+fn main() { }"}, {"sha": "bafc1657737f44c0110ebfefd3e05e349e8d0894", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n+#![allow(dead_code)]\n \n trait Trait {\n     type AssocType;"}, {"sha": "dd6dcbe2ef574576d9459c1bd8876b57e9ba0b67", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cc99eed04005108797fbba82eaf8ef7918051db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=5cc99eed04005108797fbba82eaf8ef7918051db", "patch": "@@ -1,14 +1,15 @@\n error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-assoc-type.rs:9:5\n+  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:5\n    |\n+LL | fn bar<T:Trait+Send>() {\n+   |                        - help: consider further restricting the associated type: `where <T as Trait>::AssocType: std::marker::Send`\n LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n-   = help: consider adding a `where <T as Trait>::AssocType: std::marker::Send` bound\n \n error: aborting due to previous error\n "}]}