{"sha": "032804bf68e2ac13add895206f2173409acff836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMjgwNGJmNjhlMmFjMTNhZGQ4OTUyMDZmMjE3MzQwOWFjZmY4MzY=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-02-22T17:20:18Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-02-22T18:42:35Z"}, "message": "In Vec::from_iter, unroll the first iteration\n\nFor the first ever element to put into a vector, the branching\nconditions are more predictable.", "tree": {"sha": "7e6e6a43f39ac84311d376b1c051f42f8e2b7ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e6e6a43f39ac84311d376b1c051f42f8e2b7ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032804bf68e2ac13add895206f2173409acff836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032804bf68e2ac13add895206f2173409acff836", "html_url": "https://github.com/rust-lang/rust/commit/032804bf68e2ac13add895206f2173409acff836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032804bf68e2ac13add895206f2173409acff836/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a118b936faa7f802c41214cb908622a7893bebfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a118b936faa7f802c41214cb908622a7893bebfd", "html_url": "https://github.com/rust-lang/rust/commit/a118b936faa7f802c41214cb908622a7893bebfd"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "3db55b82fe84a001a438ccd88e2418dc3be66ed8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/032804bf68e2ac13add895206f2173409acff836/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032804bf68e2ac13add895206f2173409acff836/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=032804bf68e2ac13add895206f2173409acff836", "patch": "@@ -1410,7 +1410,25 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> Vec<T> {\n-        let mut vector = Vec::new();\n+        // Unroll the first iteration, as the vector is going to be\n+        // expanded on this iteration in every case when the iterable is not\n+        // empty, but the loop in extend_desugared() is not going to see the\n+        // vector being full in the few subsequent loop iterations.\n+        // So we get better branch prediction and the possibility to\n+        // construct the vector with initial estimated capacity.\n+        let mut iterator = iterable.into_iter();\n+        let mut vector = match iterator.next() {\n+            None => return Vec::new(),\n+            Some(element) => {\n+                let (lower, _) = iterator.size_hint();\n+                let mut vector = Vec::with_capacity(1 + lower);\n+                unsafe {\n+                    ptr::write(vector.get_unchecked_mut(0), element);\n+                    vector.set_len(1);\n+                }\n+                vector\n+            }\n+        };\n         vector.extend(iterable);\n         vector\n     }"}]}