{"sha": "25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTZiYmRlMDFkNGE5Y2QwOGZhNzlkYjViOGI3ZGE2YmJmMWE2MjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T08:16:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T08:16:55Z"}, "message": "Merge assits::test_helpers and tests", "tree": {"sha": "b47a0ba06886a45d9a07a594c14a04e019b5e2d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47a0ba06886a45d9a07a594c14a04e019b5e2d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "html_url": "https://github.com/rust-lang/rust/commit/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "html_url": "https://github.com/rust-lang/rust/commit/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b"}], "stats": {"total": 352, "additions": 172, "deletions": 180}, "files": [{"sha": "5eabb33d08fc9663277774001e79bf654d237c22", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -12,7 +12,7 @@ use crate::resolved_assists;\n \n fn check(assist_id: &str, before: &str, after: &str) {\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = crate::helpers::with_single_file(&before);\n+    let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let assist = resolved_assists(&db, frange)"}, {"sha": "b72f7aeac8dacd1abb5118a2e55ceead80ba825a", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "3629dac6bf848d2c0e2f5920b7c92179912b6728", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -58,7 +58,7 @@ fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextSize> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn add_derive_new() {"}, {"sha": "e39e1f4f3c0f1a54122fdfca5068f144ed5a6374", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn add_explicit_type_target() {"}, {"sha": "ee0d5ce986e385297f73dab0e54fa9998a73f4d1", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -97,7 +97,7 @@ fn existing_from_impl(\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n     use test_utils::covers;\n \n     #[test]"}, {"sha": "cb2afc863d6fe5e3ce9801668caced67ab32394d", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -283,7 +283,7 @@ fn next_space_for_fn_in_module(\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "3d390c20bc8b138e1fa099d400c5f6e7716eec19", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_add_impl() {"}, {"sha": "f7a101503369e0d093208dae1f524d35e3027892", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -181,7 +181,7 @@ fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "1b5d604d1868f66c4385253c997c315b5fd82bfe", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -178,7 +178,7 @@ fn has_new_fn(imp: &ast::ImplDef) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "a0c48d87295755ab8672f9adb525e96d976a27ce", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -60,7 +60,7 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn demorgan_turns_and_into_or() {"}, {"sha": "9e4171ccd82dfea6bc0dc2cce209af96e266b9d0", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -277,7 +277,7 @@ impl ImportCandidate {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn applicable_when_found_an_import() {"}, {"sha": "6ac1f8e69e4089bfb4a2820a3fc6a13bfe0a4674", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -110,7 +110,7 @@ fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "55ccc37b00966762b42ab784a46e7290203d07b3", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -182,7 +182,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "1f9cd55852cf56c408ae3c7ac08d9431e1518d72", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -168,7 +168,7 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::fill_match_arms;\n "}, {"sha": "41db963dc6d22999e08c72a69611ab6038bd6973", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -69,7 +69,7 @@ impl From<BinOp> for FlipAction {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn flip_binexpr_target_is_the_op() {"}, {"sha": "e65c9a41db7fd71ffbf49f6936a066a5e41b0e5f", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn flip_comma_works_for_function_parameters() {"}, {"sha": "f186da58587e375319306fd4d37f6bf1af3a2068", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn flip_trait_bound(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn flip_trait_bound_assist_available() {"}, {"sha": "5f3b8dfd1166e4cb1425f5f01c3fae080e191430", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -125,7 +125,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "9c2c20b22c761eca898cd6183968dab96f739f6e", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -136,7 +136,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "303c1806d2ef73b61c61518484078603191df250", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn invert_if_remove_inequality() {"}, {"sha": "9a2083609d442e462e62c3896e9bdf6f71a1774c", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -125,7 +125,7 @@ fn first_path(path: &ast::Path) -> ast::Path {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     use super::*;\n "}, {"sha": "9ae099b413aba75698df22a283bdfe2cb1d86577", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -105,7 +105,7 @@ fn contains_placeholder(a: &ast::MatchArm) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "89956aea958ea5f31e003f6ea436085cfe090b30", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -89,7 +89,7 @@ fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     #[test]\n     fn move_bounds_to_where_clause_fn() {"}, {"sha": "f2aa7e5940be0f827f01d1397250e6d726ac797c", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn move_guard_to_arm_body_target() {"}, {"sha": "542f7a637915c0f3dc0fb47217ed0537053f76c0", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -138,7 +138,7 @@ fn count_hashes(s: &str) -> usize {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn make_raw_string_target() {"}, {"sha": "ddfb21a7e3e7c3e1443164551de09e207542093d", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -90,7 +90,7 @@ fn is_valid_macrocall(macro_call: &ast::MacroCall, macro_name: &str) -> Option<b\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn test_remove_dbg() {"}, {"sha": "a57e327b8fed3cbe2472befe321a9712b378788f", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -109,7 +109,7 @@ fn compute_fields_ranks(path: &Path, ctx: &AssistCtx) -> Option<HashMap<String,\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "d0df3b84e343e5ea6af1c02eaa532ba515e8b048", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_replace_if_let_with_match_unwraps_simple_expressions() {"}, {"sha": "dc4d16055b4c1e2c68c1a3e88cfc59a49051f5f6", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     use super::*;\n "}, {"sha": "62417892406090589c71857feda0be44278ffbdf", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -74,7 +74,7 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "dcb471edb0c0bab0e61af68c5fa7f4f4afd2fa21", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -63,7 +63,7 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_replace_result_unwrap_with_match() {"}, {"sha": "a59f2f76f60e11bb064a958ab9bb8e1c36e7dec2", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "89992117d81637e25f5c6e67dfe9cc98d68acf3a", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -89,7 +89,7 @@ fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::E\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "b84d60c77d53da4a4b5365b313ded01a82e22b0f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 147, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -14,6 +14,8 @@ mod assist_ctx;\n mod marks;\n #[cfg(test)]\n mod doc_tests;\n+#[cfg(test)]\n+mod tests;\n pub mod utils;\n pub mod ast_transform;\n \n@@ -194,150 +196,3 @@ mod handlers {\n         ]\n     }\n }\n-\n-#[cfg(test)]\n-mod helpers {\n-    use std::sync::Arc;\n-\n-    use hir::Semantics;\n-    use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n-    use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n-    use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n-\n-    use crate::{handlers::Handler, AssistCtx, AssistFile};\n-\n-    pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n-        let (mut db, file_id) = RootDatabase::with_single_file(text);\n-        // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n-        // but it looks like this might need specialization? :(\n-        db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n-        (db, file_id)\n-    }\n-\n-    pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n-    }\n-\n-    // FIXME: instead of having a separate function here, maybe use\n-    // `extract_ranges` and mark the target as `<target> </target>` in the\n-    // fixuture?\n-    pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n-        check(assist, ra_fixture, ExpectedResult::Target(target));\n-    }\n-\n-    pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n-        check(assist, ra_fixture, ExpectedResult::NotApplicable);\n-    }\n-\n-    enum ExpectedResult<'a> {\n-        NotApplicable,\n-        After(&'a str),\n-        Target(&'a str),\n-    }\n-\n-    fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n-        let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n-            if before.contains(\"//-\") {\n-                let (mut db, position) = RootDatabase::with_position(before);\n-                db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n-                (\n-                    db.file_text(position.file_id).as_ref().to_owned(),\n-                    position.file_id,\n-                    RangeOrOffset::Offset(position.offset),\n-                    db,\n-                )\n-            } else {\n-                let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n-                let (db, file_id) = with_single_file(&text_without_caret);\n-                (text_without_caret, file_id, range_or_offset, db)\n-            };\n-\n-        let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n-\n-        let sema = Semantics::new(&db);\n-        let assist_ctx = AssistCtx::new(&sema, frange, true);\n-\n-        match (assist(assist_ctx), expected) {\n-            (Some(assist), ExpectedResult::After(after)) => {\n-                let action = assist.0[0].action.clone().unwrap();\n-\n-                let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n-                    db.file_text(file_id).as_ref().to_owned()\n-                } else {\n-                    text_without_caret\n-                };\n-                action.edit.apply(&mut actual);\n-\n-                match action.cursor_position {\n-                    None => {\n-                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                            let off = action\n-                                .edit\n-                                .apply_to_offset(before_cursor_pos)\n-                                .expect(\"cursor position is affected by the edit\");\n-                            actual = add_cursor(&actual, off)\n-                        }\n-                    }\n-                    Some(off) => actual = add_cursor(&actual, off),\n-                };\n-\n-                assert_eq_text!(after, &actual);\n-            }\n-            (Some(assist), ExpectedResult::Target(target)) => {\n-                let action = assist.0[0].action.clone().unwrap();\n-                let range = action.target.expect(\"expected target on action\");\n-                assert_eq_text!(&text_without_caret[range], target);\n-            }\n-            (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n-            (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n-                panic!(\"code action is not applicable\")\n-            }\n-            (None, ExpectedResult::NotApplicable) => (),\n-        };\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use ra_db::FileRange;\n-    use ra_syntax::TextRange;\n-    use test_utils::{extract_offset, extract_range};\n-\n-    use crate::{helpers, resolved_assists};\n-\n-    #[test]\n-    fn assist_order_field_struct() {\n-        let before = \"struct Foo { <|>bar: u32 }\";\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = helpers::with_single_file(&before);\n-        let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-        let assists = resolved_assists(&db, frange);\n-        let mut assists = assists.iter();\n-\n-        assert_eq!(\n-            assists.next().expect(\"expected assist\").label.label,\n-            \"Change visibility to pub(crate)\"\n-        );\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n-    }\n-\n-    #[test]\n-    fn assist_order_if_expr() {\n-        let before = \"\n-        pub fn test_some_range(a: int) -> bool {\n-            if let 2..6 = <|>5<|> {\n-                true\n-            } else {\n-                false\n-            }\n-        }\";\n-        let (range, before) = extract_range(before);\n-        let (db, file_id) = helpers::with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n-        let assists = resolved_assists(&db, frange);\n-        let mut assists = assists.iter();\n-\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n-    }\n-}"}, {"sha": "ca3096a43c975480858d300414f164ecf9975072", "filename": "crates/ra_assists/src/tests.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=25e6bbde01d4a9cd08fa79db5b8b7da6bbf1a623", "patch": "@@ -0,0 +1,137 @@\n+use std::sync::Arc;\n+\n+use hir::Semantics;\n+use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n+use ra_syntax::TextRange;\n+use test_utils::{\n+    add_cursor, assert_eq_text, extract_offset, extract_range, extract_range_or_offset,\n+    RangeOrOffset,\n+};\n+\n+use crate::{handlers::Handler, resolved_assists, AssistCtx, AssistFile};\n+\n+pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n+    let (mut db, file_id) = RootDatabase::with_single_file(text);\n+    // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n+    // but it looks like this might need specialization? :(\n+    db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n+    (db, file_id)\n+}\n+\n+pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n+}\n+\n+// FIXME: instead of having a separate function here, maybe use\n+// `extract_ranges` and mark the target as `<target> </target>` in the\n+// fixuture?\n+pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n+    check(assist, ra_fixture, ExpectedResult::Target(target));\n+}\n+\n+pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n+    check(assist, ra_fixture, ExpectedResult::NotApplicable);\n+}\n+\n+enum ExpectedResult<'a> {\n+    NotApplicable,\n+    After(&'a str),\n+    Target(&'a str),\n+}\n+\n+fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n+    let (text_without_caret, file_with_caret_id, range_or_offset, db) = if before.contains(\"//-\") {\n+        let (mut db, position) = RootDatabase::with_position(before);\n+        db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n+        (\n+            db.file_text(position.file_id).as_ref().to_owned(),\n+            position.file_id,\n+            RangeOrOffset::Offset(position.offset),\n+            db,\n+        )\n+    } else {\n+        let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n+        let (db, file_id) = with_single_file(&text_without_caret);\n+        (text_without_caret, file_id, range_or_offset, db)\n+    };\n+\n+    let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n+\n+    let sema = Semantics::new(&db);\n+    let assist_ctx = AssistCtx::new(&sema, frange, true);\n+\n+    match (assist(assist_ctx), expected) {\n+        (Some(assist), ExpectedResult::After(after)) => {\n+            let action = assist.0[0].action.clone().unwrap();\n+\n+            let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n+                db.file_text(file_id).as_ref().to_owned()\n+            } else {\n+                text_without_caret\n+            };\n+            action.edit.apply(&mut actual);\n+\n+            match action.cursor_position {\n+                None => {\n+                    if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n+                        let off = action\n+                            .edit\n+                            .apply_to_offset(before_cursor_pos)\n+                            .expect(\"cursor position is affected by the edit\");\n+                        actual = add_cursor(&actual, off)\n+                    }\n+                }\n+                Some(off) => actual = add_cursor(&actual, off),\n+            };\n+\n+            assert_eq_text!(after, &actual);\n+        }\n+        (Some(assist), ExpectedResult::Target(target)) => {\n+            let action = assist.0[0].action.clone().unwrap();\n+            let range = action.target.expect(\"expected target on action\");\n+            assert_eq_text!(&text_without_caret[range], target);\n+        }\n+        (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n+        (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n+            panic!(\"code action is not applicable\")\n+        }\n+        (None, ExpectedResult::NotApplicable) => (),\n+    };\n+}\n+\n+#[test]\n+fn assist_order_field_struct() {\n+    let before = \"struct Foo { <|>bar: u32 }\";\n+    let (before_cursor_pos, before) = extract_offset(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n+    let assists = resolved_assists(&db, frange);\n+    let mut assists = assists.iter();\n+\n+    assert_eq!(\n+        assists.next().expect(\"expected assist\").label.label,\n+        \"Change visibility to pub(crate)\"\n+    );\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n+}\n+\n+#[test]\n+fn assist_order_if_expr() {\n+    let before = \"\n+    pub fn test_some_range(a: int) -> bool {\n+        if let 2..6 = <|>5<|> {\n+            true\n+        } else {\n+            false\n+        }\n+    }\";\n+    let (range, before) = extract_range(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range };\n+    let assists = resolved_assists(&db, frange);\n+    let mut assists = assists.iter();\n+\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n+}"}]}