{"sha": "d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYTk1OGY0MjI3NDYwYWEwZDZiNDJjMmIzYTI0YWQwMWVkM2QzODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:27Z"}, "message": "Rollup merge of #59291 - SimonSapin:nonzero-thread-id, r=alexcrichton\n\nMake Option<ThreadId> no larger than ThreadId, with NonZeroU64", "tree": {"sha": "64a37ec8b26af12b57e5150252e462118c1d6ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a37ec8b26af12b57e5150252e462118c1d6ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSn/CRBK7hj4Ov3rIwAAdHIIAB9+ZB3nbyy7BTt/zlTKzCTs\nefyFx/rFr2d6WNc06qwdnFk1uJpZZMMYuabjqq3vYF4LkXnbcpQ5pnQWVu+1W3TD\ntiEw95+wbyLXsxdtCFY9G0tkMieBPHhG0oKW2JtSIYDnbZyqv9bm1dLvVDBvu4oc\nMFbAw3JVpiJvDxvuUdEv7SrggurX8Sp6stAXyIb82xYMJlJ4X6T8A4eNa0VH/pxK\nfYBR/JjiS3YgfpXMZhdKr+CDO1USy7ZDQTB5PEF8M06ocPsFJnyCxJc5XXv2loE1\nJ9Bn9roq1TFSaKc11p/305qRXkS/mxYhCtXUv/XrkiBZuO127krRNg7aupTcKx0=\n=vORA\n-----END PGP SIGNATURE-----\n", "payload": "tree 64a37ec8b26af12b57e5150252e462118c1d6ffc\nparent 28644cd9fafe92fb8ce14e15cada77b9757afc1a\nparent c1d9191fa576c600775b4fbb90a3d09ca5e0fa0b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279487 +0100\ncommitter GitHub <noreply@github.com> 1553279487 +0100\n\nRollup merge of #59291 - SimonSapin:nonzero-thread-id, r=alexcrichton\n\nMake Option<ThreadId> no larger than ThreadId, with NonZeroU64\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "html_url": "https://github.com/rust-lang/rust/commit/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28644cd9fafe92fb8ce14e15cada77b9757afc1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/28644cd9fafe92fb8ce14e15cada77b9757afc1a", "html_url": "https://github.com/rust-lang/rust/commit/28644cd9fafe92fb8ce14e15cada77b9757afc1a"}, {"sha": "c1d9191fa576c600775b4fbb90a3d09ca5e0fa0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d9191fa576c600775b4fbb90a3d09ca5e0fa0b", "html_url": "https://github.com/rust-lang/rust/commit/c1d9191fa576c600775b4fbb90a3d09ca5e0fa0b"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "d856f9b465e04057c50456274ec00b42b1cbe529", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "patch": "@@ -163,6 +163,7 @@ use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroU64;\n use crate::panic;\n use crate::panicking;\n use crate::str;\n@@ -1036,15 +1037,15 @@ pub fn park_timeout(dur: Duration) {\n /// [`Thread`]: ../../std/thread/struct.Thread.html\n #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]\n-pub struct ThreadId(u64);\n+pub struct ThreadId(NonZeroU64);\n \n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n         // We never call `GUARD.init()`, so it is UB to attempt to\n         // acquire this mutex reentrantly!\n         static GUARD: mutex::Mutex = mutex::Mutex::new();\n-        static mut COUNTER: u64 = 0;\n+        static mut COUNTER: u64 = 1;\n \n         unsafe {\n             let _guard = GUARD.lock();\n@@ -1058,7 +1059,7 @@ impl ThreadId {\n             let id = COUNTER;\n             COUNTER += 1;\n \n-            ThreadId(id)\n+            ThreadId(NonZeroU64::new(id).unwrap())\n         }\n     }\n }\n@@ -1484,9 +1485,10 @@ fn _assert_sync_and_send() {\n mod tests {\n     use super::Builder;\n     use crate::any::Any;\n+    use crate::mem;\n     use crate::sync::mpsc::{channel, Sender};\n     use crate::result;\n-    use crate::thread;\n+    use crate::thread::{self, ThreadId};\n     use crate::time::Duration;\n     use crate::u32;\n \n@@ -1716,6 +1718,11 @@ mod tests {\n         thread::sleep(Duration::from_millis(2));\n     }\n \n+    #[test]\n+    fn test_size_of_option_thread_id() {\n+        assert_eq!(mem::size_of::<Option<ThreadId>>(), mem::size_of::<ThreadId>());\n+    }\n+\n     #[test]\n     fn test_thread_id_equal() {\n         assert!(thread::current().id() == thread::current().id());"}]}