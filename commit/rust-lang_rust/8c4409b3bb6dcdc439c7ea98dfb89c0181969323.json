{"sha": "8c4409b3bb6dcdc439c7ea98dfb89c0181969323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNDQwOWIzYmI2ZGNkYzQzOWM3ZWE5OGRmYjg5YzAxODE5NjkzMjM=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:49:54Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:49:54Z"}, "message": "vscode: migrate highlighting to rust-analyzer-api.ts", "tree": {"sha": "28ed5a364c6c04692157fb52a4ed5d030fbe902b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ed5a364c6c04692157fb52a4ed5d030fbe902b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4409b3bb6dcdc439c7ea98dfb89c0181969323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4409b3bb6dcdc439c7ea98dfb89c0181969323", "html_url": "https://github.com/rust-lang/rust/commit/8c4409b3bb6dcdc439c7ea98dfb89c0181969323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4409b3bb6dcdc439c7ea98dfb89c0181969323/comments", "author": null, "committer": null, "parents": [{"sha": "21ab13396672a4ad75b93bbb73af02d019ef918b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ab13396672a4ad75b93bbb73af02d019ef918b", "html_url": "https://github.com/rust-lang/rust/commit/21ab13396672a4ad75b93bbb73af02d019ef918b"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "3e0cbdc561699672245ad53a282ad53c0a426cac", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8c4409b3bb6dcdc439c7ea98dfb89c0181969323/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8c4409b3bb6dcdc439c7ea98dfb89c0181969323/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=8c4409b3bb6dcdc439c7ea98dfb89c0181969323", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n@@ -8,29 +8,25 @@ import { sendRequestWithRetry } from './util';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    const client = ctx.client;\n-    if (client != null) {\n-        client.onNotification(\n-            'rust-analyzer/publishDecorations',\n-            (params: PublishDecorationsParams) => {\n-                if (!ctx.config.highlightingOn) return;\n-\n-                const targetEditor = vscode.window.visibleTextEditors.find(\n-                    editor => {\n-                        const unescapedUri = unescape(\n-                            editor.document.uri.toString(),\n-                        );\n-                        // Unescaped URI looks like:\n-                        // file:///c:/Workspace/ra-test/src/main.rs\n-                        return unescapedUri === params.uri;\n-                    },\n-                );\n-                if (!targetEditor) return;\n \n-                highlighter.setHighlights(targetEditor, params.decorations);\n+    ctx.client.onNotification(ra.publishDecorations, params => {\n+        if (!ctx.config.highlightingOn) return;\n+\n+        const targetEditor = vscode.window.visibleTextEditors.find(\n+            editor => {\n+                const unescapedUri = unescape(\n+                    editor.document.uri.toString(),\n+                );\n+                // Unescaped URI looks like:\n+                // file:///c:/Workspace/ra-test/src/main.rs\n+                return unescapedUri === params.uri;\n             },\n         );\n-    }\n+        if (!targetEditor) return;\n+\n+        highlighter.setHighlights(targetEditor, params.decorations);\n+    });\n+\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),\n@@ -45,13 +41,10 @@ export function activateHighlighting(ctx: Ctx) {\n             const client = ctx.client;\n             if (!client) return;\n \n-            const params: lc.TextDocumentIdentifier = {\n-                uri: editor.document.uri.toString(),\n-            };\n-            const decorations = await sendRequestWithRetry<Decoration[]>(\n+            const decorations = await sendRequestWithRetry(\n                 client,\n-                'rust-analyzer/decorationsRequest',\n-                params,\n+                ra.decorationsRequest,\n+                { uri: editor.document.uri.toString() },\n             );\n             highlighter.setHighlights(editor, decorations);\n         },\n@@ -60,17 +53,6 @@ export function activateHighlighting(ctx: Ctx) {\n     );\n }\n \n-interface PublishDecorationsParams {\n-    uri: string;\n-    decorations: Decoration[];\n-}\n-\n-interface Decoration {\n-    range: lc.Range;\n-    tag: string;\n-    bindingHash?: string;\n-}\n-\n // Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n function fancify(seed: string, shade: 'light' | 'dark') {\n     const random = randomU32Numbers(hashString(seed));\n@@ -108,7 +90,7 @@ class Highlighter {\n         this.decorations = null;\n     }\n \n-    public setHighlights(editor: vscode.TextEditor, highlights: Decoration[]) {\n+    public setHighlights(editor: vscode.TextEditor, highlights: ra.Decoration[]) {\n         const client = this.ctx.client;\n         if (!client) return;\n         // Initialize decorations if necessary"}]}