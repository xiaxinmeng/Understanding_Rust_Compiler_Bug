{"sha": "dc9810e242523843d1eab60c7fee346acab17769", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTgxMGUyNDI1MjM4NDNkMWVhYjYwYzdmZWUzNDZhY2FiMTc3Njk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-04T22:52:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-04T22:52:41Z"}, "message": "Merge pull request #1942 from topecongiro/fixes\n\nSome Fixes", "tree": {"sha": "4177701059d6312c32d55d117e6f74b675c75e36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4177701059d6312c32d55d117e6f74b675c75e36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc9810e242523843d1eab60c7fee346acab17769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9810e242523843d1eab60c7fee346acab17769", "html_url": "https://github.com/rust-lang/rust/commit/dc9810e242523843d1eab60c7fee346acab17769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc9810e242523843d1eab60c7fee346acab17769/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07dec329ef9d3280bc6a1b8c0ba61e6abaf3af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07dec329ef9d3280bc6a1b8c0ba61e6abaf3af2", "html_url": "https://github.com/rust-lang/rust/commit/f07dec329ef9d3280bc6a1b8c0ba61e6abaf3af2"}, {"sha": "47062c8f0a3a197a8e2f83e070c4be1e866514fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/47062c8f0a3a197a8e2f83e070c4be1e866514fa", "html_url": "https://github.com/rust-lang/rust/commit/47062c8f0a3a197a8e2f83e070c4be1e866514fa"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "0b9511e02cead21733f861a800bfd69850a4ba01", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -630,26 +630,14 @@ fn rewrite_closure(\n             false\n         };\n         if no_return_type && !needs_block {\n-            // lock.stmts.len() == 1\n+            // block.stmts.len() == 1\n             if let Some(expr) = stmt_expr(&block.stmts[0]) {\n                 if let Some(rw) = rewrite_closure_expr(expr, &prefix, context, body_shape) {\n                     return Some(rw);\n                 }\n             }\n         }\n \n-        if !needs_block {\n-            // We need braces, but we might still prefer a one-liner.\n-            let stmt = &block.stmts[0];\n-            // 4 = braces and spaces.\n-            if let Some(body_shape) = body_shape.sub_width(4) {\n-                // Checks if rewrite succeeded and fits on a single line.\n-                if let Some(rewrite) = and_one_line(stmt.rewrite(context, body_shape)) {\n-                    return Some(format!(\"{} {{ {} }}\", prefix, rewrite));\n-                }\n-            }\n-        }\n-\n         // Either we require a block, or tried without and failed.\n         rewrite_closure_block(block, &prefix, context, body_shape)\n     } else {\n@@ -882,13 +870,8 @@ impl Rewrite for ast::Stmt {\n                     \"\"\n                 };\n \n-                let expr_type = match self.node {\n-                    ast::StmtKind::Expr(_) => ExprType::SubExpression,\n-                    ast::StmtKind::Semi(_) => ExprType::Statement,\n-                    _ => unreachable!(),\n-                };\n                 let shape = try_opt!(shape.sub_width(suffix.len()));\n-                format_expr(ex, expr_type, context, shape).map(|s| s + suffix)\n+                format_expr(ex, ExprType::Statement, context, shape).map(|s| s + suffix)\n             }\n             ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n         };"}, {"sha": "1fe8655309f3804df8e7e158c29aa72023b4c751", "filename": "src/visitor.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -22,7 +22,6 @@ use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, C\n               FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n-use expr::{format_expr, ExprType};\n use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n             rewrite_static, rewrite_type_alias};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n@@ -77,12 +76,7 @@ impl<'a> FmtVisitor<'a> {\n                 let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n                 self.push_rewrite(stmt.span(), rewrite);\n             }\n-            ast::StmtKind::Expr(ref expr) => {\n-                let rewrite =\n-                    format_expr(expr, ExprType::Statement, &self.get_context(), self.shape());\n-                self.push_rewrite(stmt.span(), rewrite)\n-            }\n-            ast::StmtKind::Semi(..) => {\n+            ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n                 let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n                 self.push_rewrite(stmt.span(), rewrite)\n             }\n@@ -979,7 +973,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                         Some(&(_, next_attr)) if is_derive(next_attr) => insert_new_line = false,\n                         // If not, rewrite the merged derives.\n                         _ => {\n-                            result.push_str(&format!(\"#[derive({})]\", derive_args.join(\", \")));\n+                            result.push_str(&try_opt!(format_derive(context, &derive_args, shape)));\n                             derive_args.clear();\n                         }\n                     }\n@@ -996,6 +990,38 @@ impl<'a> Rewrite for [ast::Attribute] {\n     }\n }\n \n+// Format `#[derive(..)]`, using visual indent & mixed style when we need to go multiline.\n+fn format_derive(context: &RewriteContext, derive_args: &[String], shape: Shape) -> Option<String> {\n+    let mut result = String::with_capacity(128);\n+    result.push_str(\"#[derive(\");\n+    // 11 = `#[derive()]`\n+    let initial_budget = try_opt!(shape.width.checked_sub(11));\n+    let mut budget = initial_budget;\n+    let num = derive_args.len();\n+    for (i, a) in derive_args.iter().enumerate() {\n+        // 2 = `, ` or `)]`\n+        let width = a.len() + 2;\n+        if width > budget {\n+            if i > 0 {\n+                // Remove trailing whitespace.\n+                result.pop();\n+            }\n+            result.push('\\n');\n+            // 9 = `#[derive(`\n+            result.push_str(&(shape.indent + 9).to_string(context.config));\n+            budget = initial_budget;\n+        } else {\n+            budget = budget.checked_sub(width).unwrap_or(0);\n+        }\n+        result.push_str(a);\n+        if i != num - 1 {\n+            result.push_str(\", \")\n+        }\n+    }\n+    result.push_str(\")]\");\n+    Some(result)\n+}\n+\n fn is_derive(attr: &ast::Attribute) -> bool {\n     match attr.meta() {\n         Some(meta_item) => match meta_item.node {"}, {"sha": "6653dd2daa97f927efe03c2b3fd238f948fa18dd", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -146,3 +146,7 @@ fn attributes_on_statements() {\n     # [ attr ( on ( mac ) ) ]\n     foo!();\n }\n+\n+// Large derive\n+#[derive(Add, Sub, Mul, Div, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Debug, Hash, Serialize, Deserialize)]\n+pub struct HP(pub u8);"}, {"sha": "e220b48fb38940083a5ab07ecb4ffec7bd7b8926", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -146,3 +146,8 @@ fn attributes_on_statements() {\n     #[attr(on(mac))]\n     foo!();\n }\n+\n+// Large derive\n+#[derive(Add, Sub, Mul, Div, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Debug, Hash, Serialize,\n+         Deserialize)]\n+pub struct HP(pub u8);"}, {"sha": "ef166a2bb66c622fe1b68b94c13723cca141f709", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -42,7 +42,9 @@ fn main() {\n     });\n \n     fffffffffffffffffffffffffffffffffff(a, {\n-        SCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n+        SCRIPT_TASK_ROOT.with(|root| {\n+            *root.borrow_mut() = Some(&script_task);\n+        });\n     });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum ="}, {"sha": "2720f51d5f3078c57d58d465e7fdc9921861ff18", "filename": "tests/target/chains.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -45,7 +45,9 @@ fn main() {\n         });\n \n     fffffffffffffffffffffffffffffffffff(a, {\n-        SCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n+        SCRIPT_TASK_ROOT.with(|root| {\n+            *root.borrow_mut() = Some(&script_task);\n+        });\n     });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum ="}, {"sha": "ecaffc165e6d2973fb6bfc5bc9584132f072166b", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9810e242523843d1eab60c7fee346acab17769/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=dc9810e242523843d1eab60c7fee346acab17769", "patch": "@@ -80,7 +80,9 @@ fn main() {\n \t});\n \n \tfffffffffffffffffffffffffffffffffff(a, {\n-\t\tSCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n+\t\tSCRIPT_TASK_ROOT.with(|root| {\n+\t\t\t*root.borrow_mut() = Some(&script_task);\n+\t\t});\n \t});\n \ta.b.c.d();\n "}]}