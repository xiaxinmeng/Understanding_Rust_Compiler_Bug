{"sha": "a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "node_id": "C_kwDOAAsO6NoAKGE5ZWZiYWYzYTUwMGE4NjcwNDkxYmRjMTgwMTJhN2ViZmJjMWMxMjI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-05T10:24:42Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-05T11:14:32Z"}, "message": "Rename n_running_threads to num_running_threads.", "tree": {"sha": "83abb661b5f2f9883f21918347c5905c1995febf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83abb661b5f2f9883f21918347c5905c1995febf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "html_url": "https://github.com/rust-lang/rust/commit/a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9efbaf3a500a8670491bdc18012a7ebfbc1c122/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5746f08138f880cf21798402a65cd39d17cf68", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5746f08138f880cf21798402a65cd39d17cf68", "html_url": "https://github.com/rust-lang/rust/commit/5b5746f08138f880cf21798402a65cd39d17cf68"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e5e9638aaa8c5ccbf3679d5a01cd8f5d96b8b1bc", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9efbaf3a500a8670491bdc18012a7ebfbc1c122/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9efbaf3a500a8670491bdc18012a7ebfbc1c122/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "patch": "@@ -505,7 +505,7 @@ impl Builder {\n         };\n \n         if let Some(scope_data) = scope_data {\n-            scope_data.increment_n_running_threads();\n+            scope_data.increment_num_running_threads();\n         }\n \n         Ok(JoinInner {\n@@ -1292,7 +1292,7 @@ impl<'scope, T> Drop for Packet<'scope, T> {\n             // panicked, and nobody consumed the panic payload, we make sure\n             // the scope function will panic.\n             let unhandled_panic = matches!(self.result.get_mut(), Some(Err(_)));\n-            scope.decrement_n_running_threads(unhandled_panic);\n+            scope.decrement_num_running_threads(unhandled_panic);\n         }\n     }\n }"}, {"sha": "b2fe3c3185ed3c690ababe39ef080f1e6d65fd9b", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9efbaf3a500a8670491bdc18012a7ebfbc1c122/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9efbaf3a500a8670491bdc18012a7ebfbc1c122/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=a9efbaf3a500a8670491bdc18012a7ebfbc1c122", "patch": "@@ -20,26 +20,26 @@ pub struct Scope<'env> {\n pub struct ScopedJoinHandle<'scope, T>(JoinInner<'scope, T>);\n \n pub(super) struct ScopeData {\n-    n_running_threads: AtomicUsize,\n+    num_running_threads: AtomicUsize,\n     a_thread_panicked: AtomicBool,\n     main_thread: Thread,\n }\n \n impl ScopeData {\n-    pub(super) fn increment_n_running_threads(&self) {\n+    pub(super) fn increment_num_running_threads(&self) {\n         // We check for 'overflow' with usize::MAX / 2, to make sure there's no\n         // chance it overflows to 0, which would result in unsoundness.\n-        if self.n_running_threads.fetch_add(1, Ordering::Relaxed) > usize::MAX / 2 {\n+        if self.num_running_threads.fetch_add(1, Ordering::Relaxed) > usize::MAX / 2 {\n             // This can only reasonably happen by mem::forget()'ing many many ScopedJoinHandles.\n-            self.decrement_n_running_threads(false);\n+            self.decrement_num_running_threads(false);\n             panic!(\"too many running threads in thread scope\");\n         }\n     }\n-    pub(super) fn decrement_n_running_threads(&self, panic: bool) {\n+    pub(super) fn decrement_num_running_threads(&self, panic: bool) {\n         if panic {\n             self.a_thread_panicked.store(true, Ordering::Relaxed);\n         }\n-        if self.n_running_threads.fetch_sub(1, Ordering::Release) == 1 {\n+        if self.num_running_threads.fetch_sub(1, Ordering::Release) == 1 {\n             self.main_thread.unpark();\n         }\n     }\n@@ -98,7 +98,7 @@ where\n {\n     let scope = Scope {\n         data: ScopeData {\n-            n_running_threads: AtomicUsize::new(0),\n+            num_running_threads: AtomicUsize::new(0),\n             main_thread: current(),\n             a_thread_panicked: AtomicBool::new(false),\n         },\n@@ -109,7 +109,7 @@ where\n     let result = catch_unwind(AssertUnwindSafe(|| f(&scope)));\n \n     // Wait until all the threads are finished.\n-    while scope.data.n_running_threads.load(Ordering::Acquire) != 0 {\n+    while scope.data.num_running_threads.load(Ordering::Acquire) != 0 {\n         park();\n     }\n \n@@ -287,7 +287,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n impl<'env> fmt::Debug for Scope<'env> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scope\")\n-            .field(\"n_running_threads\", &self.data.n_running_threads.load(Ordering::Relaxed))\n+            .field(\"num_running_threads\", &self.data.num_running_threads.load(Ordering::Relaxed))\n             .field(\"a_thread_panicked\", &self.data.a_thread_panicked)\n             .field(\"main_thread\", &self.data.main_thread)\n             .finish_non_exhaustive()"}]}