{"sha": "ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGMzYmZmZmIyODI5ZDBhZjA3NWE1ZDQwMjBmYjdlOWU4NmMzYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T04:05:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T04:05:41Z"}, "message": "Auto merge of #86966 - JohnTitor:rollup-uiqj2vc, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86639 (Support lint tool names in rustc command line options)\n - #86812 (Recover from `&dyn mut ...` parse errors)\n - #86917 (Add doc comment for `impl From<LayoutError> for TryReserveError`)\n - #86925 (Add self to mailmap)\n - #86927 (Sync rustc_codegen_cranelift)\n - #86932 (Fix ICE when misplaced visibility cannot be properly parsed)\n - #86933 (Clean up rustdoc static files)\n - #86955 (Fix typo in `ops::Drop` docs)\n - #86956 (Revert \"Add \"every\" as a doc alias for \"all\".\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7ed177e41caaf762288a5e899f18a027fa12e320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed177e41caaf762288a5e899f18a027fa12e320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "html_url": "https://github.com/rust-lang/rust/commit/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b04f075c0ce010758c4c8674152ff89d1d73f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b04f075c0ce010758c4c8674152ff89d1d73f3", "html_url": "https://github.com/rust-lang/rust/commit/d2b04f075c0ce010758c4c8674152ff89d1d73f3"}, {"sha": "01474ad92cc025ac7e16a9d70c76c2d030d414d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/01474ad92cc025ac7e16a9d70c76c2d030d414d7", "html_url": "https://github.com/rust-lang/rust/commit/01474ad92cc025ac7e16a9d70c76c2d030d414d7"}], "stats": {"total": 2052, "additions": 1521, "deletions": 531}, "files": [{"sha": "8b504084266bb7f2b290849bb51e0112fa2146d2", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -114,6 +114,7 @@ Heather <heather@cynede.net> <Cynede@Gentoo.org>\n Heather <heather@cynede.net> <Heather@cynede.net>\n Herman J. Radtke III <herman@hermanradtke.com> Herman J. Radtke III <hermanradtke@gmail.com>\n Ilyong Cho <ilyoan@gmail.com>\n+inquisitivecrystal <22333129+inquisitivecrystal@users.noreply.github.com>\n Ivan Ivaschenko <defuz.net@gmail.com>\n J. J. Weber <jjweber@gmail.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub.bukaj@yahoo.com>"}, {"sha": "61da6a2491c52fcd3270195db5fb441e89c0a496", "filename": "compiler/rustc_codegen_cranelift/.cirrus.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -14,7 +14,7 @@ task:\n     - . $HOME/.cargo/env\n     - git config --global user.email \"user@example.com\"\n     - git config --global user.name \"User\"\n-    - ./prepare.sh\n+    - ./y.rs prepare\n   test_script:\n     - . $HOME/.cargo/env\n     - # Enable backtraces for easier debugging"}, {"sha": "f81ac87726052c7c16e78869bd4baf2866be1fa1", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -19,6 +19,9 @@ jobs:\n           - os: ubuntu-latest\n             env:\n               TARGET_TRIPLE: x86_64-pc-windows-gnu\n+          - os: ubuntu-latest\n+            env:\n+              TARGET_TRIPLE: aarch64-unknown-linux-gnu\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -49,11 +52,19 @@ jobs:\n         sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n         rustup target add x86_64-pc-windows-gnu\n \n+    - name: Install AArch64 toolchain and qemu\n+      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'aarch64-unknown-linux-gnu'\n+      run: |\n+        sudo apt-get install -y gcc-aarch64-linux-gnu qemu-user\n+\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n+\n+    - name: Build\n+      run: ./y.rs build --sysroot none\n \n     - name: Test\n       env:\n@@ -87,3 +98,63 @@ jobs:\n       with:\n         name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n         path: cg_clif.tar.xz\n+\n+  build_windows:\n+    runs-on: windows-latest\n+    timeout-minutes: 60\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    #- name: Cache cargo installed crates\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: ~/.cargo/bin\n+    #    key: ${{ runner.os }}-cargo-installed-crates\n+\n+    #- name: Cache cargo registry and index\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: |\n+    #        ~/.cargo/registry\n+    #        ~/.cargo/git\n+    #    key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    #- name: Cache cargo target dir\n+    #  uses: actions/cache@v2\n+    #  with:\n+    #    path: target\n+    #    key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        git config --global core.autocrlf false\n+        rustup set default-host x86_64-pc-windows-gnu\n+        rustc y.rs -o y.exe -g\n+        ./y.exe prepare\n+\n+    - name: Build\n+      #name: Test\n+      run: |\n+        # Enable backtraces for easier debugging\n+        #export RUST_BACKTRACE=1\n+\n+        # Reduce amount of benchmark runs as they are slow\n+        #export COMPILE_RUNS=2\n+        #export RUN_RUNS=2\n+\n+        # Enable extra checks\n+        #export CG_CLIF_ENABLE_VERIFIER=1\n+\n+        ./y.exe build\n+\n+    #- name: Package prebuilt cg_clif\n+    #  run: tar cvfJ cg_clif.tar.xz build\n+\n+    #- name: Upload prebuilt cg_clif\n+    #  uses: actions/upload-artifact@v2\n+    #  with:\n+    #    name: cg_clif-${{ runner.os }}\n+    #    path: cg_clif.tar.xz"}, {"sha": "1c08e5ece33d27e67fc01b5012f1ac237f2fc51c", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -34,7 +34,7 @@ jobs:\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n \n     - name: Test\n       run: |\n@@ -72,7 +72,7 @@ jobs:\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n-        ./prepare.sh\n+        ./y.rs prepare\n \n     - name: Test\n       run: |"}, {"sha": "12e779fe7c7d7b8bb050611e643a6355776ed518", "filename": "compiler/rustc_codegen_cranelift/.gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitignore?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -6,9 +6,11 @@ perf.data\n perf.data.old\n *.events\n *.string*\n+/y.bin\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins\n+/build_sysroot/rustc_version\n /rust\n /rand\n /regex"}, {"sha": "f62e59cefc2414c23ecb8a3ca3418d87d4e7f7c5", "filename": "compiler/rustc_codegen_cranelift/.vscode/settings.json", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,7 +1,9 @@\n {\n     // source for rustc_* is not included in the rust-src component; disable the errors about this\n     \"rust-analyzer.diagnostics.disabled\": [\"unresolved-extern-crate\", \"unresolved-macro-call\"],\n-    \"rust-analyzer.assist.importMergeBehavior\": \"last\",\n+    \"rust-analyzer.assist.importGranularity\": \"module\",\n+    \"rust-analyzer.assist.importEnforceGranularity\": true,\n+    \"rust-analyzer.assist.importPrefix\": \"crate\",\n     \"rust-analyzer.cargo.runBuildScripts\": true,\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n@@ -49,6 +51,23 @@\n                     \"cfg\": [],\n                 },\n             ]\n+        },\n+        {\n+            \"roots\": [\"./y.rs\"],\n+            \"crates\": [\n+                {\n+                    \"root_module\": \"./y.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [{ \"crate\": 1, \"name\": \"std\" }],\n+                    \"cfg\": [],\n+                },\n+                {\n+                    \"root_module\": \"./build_sysroot/sysroot_src/library/std/src/lib.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [],\n+                    \"cfg\": [],\n+                },\n+            ]\n         }\n     ]\n }"}, {"sha": "56d0974b25371b6e2abef4451c5eefef3879668c", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -33,16 +33,16 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n@@ -57,27 +57,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -87,8 +87,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -104,8 +104,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -115,17 +115,18 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"cranelift-codegen\",\n+ \"libc\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.74.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n+version = \"0.75.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#c71ad9490e7f3e19bbcae7e28bbe50f8a0b4a5d8\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -171,9 +172,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.86\"\n+version = \"0.2.97\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b7282d924be3275cec7f6756ff4121987bc6481325397dde6ba3e7802b1a8b1c\"\n+checksum = \"12b8adadd720df158f4d70dfe7ccc6adb0472d7c55ca83445f6a5ab3e36f8fb6\"\n \n [[package]]\n name = \"libloading\"\n@@ -203,14 +204,21 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"memchr\"\n+version = \"2.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc\"\n+\n [[package]]\n name = \"object\"\n-version = \"0.24.0\"\n+version = \"0.25.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1a5b3dd1c072ee7963717671d1ca129f1048fda25edea6b752bfc71ac8854170\"\n+checksum = \"a38f2be3697a57b4060074ff41b44c16870d916ad7877c17696e063257482bc7\"\n dependencies = [\n  \"crc32fast\",\n  \"indexmap\",\n+ \"memchr\",\n ]\n \n [[package]]"}, {"sha": "ef68d7ee532dd3a7561ef0539f326959e3e0857c", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -9,15 +9,15 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\", features = [\"unwind\"] }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\", features = [\"unwind\", \"all-arch\"] }\n cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n cranelift-native = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\", optional = true }\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.24.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.24.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+object = { version = \"0.25.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\""}, {"sha": "dad8ed90b53b8307fb1c4b72d40b15a59c2878bd", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -10,8 +10,8 @@ If not please open an issue.\n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift.git\n $ cd rustc_codegen_cranelift\n-$ ./prepare.sh # download and patch sysroot src and install hyperfine for benchmarking\n-$ ./build.sh\n+$ ./y.rs prepare # download and patch sysroot src and install hyperfine for benchmarking\n+$ ./y.rs build\n ```\n \n To run the test suite replace the last command with:\n@@ -20,7 +20,7 @@ To run the test suite replace the last command with:\n $ ./test.sh\n ```\n \n-This will implicitly build cg_clif too. Both `build.sh` and `test.sh` accept a `--debug` argument to\n+This will implicitly build cg_clif too. Both `y.rs build` and `test.sh` accept a `--debug` argument to\n build in debug mode.\n \n Alternatively you can download a pre built version from [GHA]. It is listed in the artifacts section\n@@ -32,12 +32,12 @@ of workflow runs. Unfortunately due to GHA restrictions you need to be logged in\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "76bc1884334afe4ea539ca65be6b5f8c32f5203d", "filename": "compiler/rustc_codegen_cranelift/build.sh", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild.sh?ref=d2b04f075c0ce010758c4c8674152ff89d1d73f3", "patch": "@@ -1,89 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-# Settings\n-export CHANNEL=\"release\"\n-build_sysroot=\"clif\"\n-target_dir='build'\n-while [[ $# != 0 ]]; do\n-    case $1 in\n-        \"--debug\")\n-            export CHANNEL=\"debug\"\n-            ;;\n-        \"--sysroot\")\n-            build_sysroot=$2\n-            shift\n-            ;;\n-        \"--target-dir\")\n-            target_dir=$2\n-            shift\n-            ;;\n-        *)\n-            echo \"Unknown flag '$1'\"\n-            echo \"Usage: ./build.sh [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\"\n-            exit 1\n-            ;;\n-    esac\n-    shift\n-done\n-\n-# Build cg_clif\n-unset CARGO_TARGET_DIR\n-unamestr=$(uname)\n-if [[ \"$unamestr\" == 'Linux' || \"$unamestr\" == \"FreeBSD\" ]]; then\n-   export RUSTFLAGS='-Clink-arg=-Wl,-rpath=$ORIGIN/../lib '$RUSTFLAGS\n-elif [[ \"$unamestr\" == 'Darwin' ]]; then\n-   export RUSTFLAGS='-Csplit-debuginfo=unpacked -Clink-arg=-Wl,-rpath,@loader_path/../lib -Zosx-rpath-install-name '$RUSTFLAGS\n-   dylib_ext='dylib'\n-else\n-   echo \"Unsupported os $unamestr\"\n-   exit 1\n-fi\n-if [[ \"$CHANNEL\" == \"release\" ]]; then\n-    cargo build --release\n-else\n-    cargo build\n-fi\n-\n-source scripts/ext_config.sh\n-\n-rm -rf \"$target_dir\"\n-mkdir \"$target_dir\"\n-mkdir \"$target_dir\"/bin \"$target_dir\"/lib\n-ln target/$CHANNEL/cg_clif{,_build_sysroot} \"$target_dir\"/bin\n-ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n-ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n-\n-mkdir -p \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-mkdir -p \"$target_dir/lib/rustlib/$HOST_TRIPLE/lib/\"\n-if [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-    cp $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib/*.o \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-fi\n-\n-case \"$build_sysroot\" in\n-    \"none\")\n-        ;;\n-    \"llvm\")\n-        cp -r $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib \"$target_dir/lib/rustlib/$TARGET_TRIPLE/\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            cp -r $(rustc --print sysroot)/lib/rustlib/$HOST_TRIPLE/lib \"$target_dir/lib/rustlib/$HOST_TRIPLE/\"\n-        fi\n-        ;;\n-    \"clif\")\n-        echo \"[BUILD] sysroot\"\n-        dir=$(pwd)\n-        cd \"$target_dir\"\n-        time \"$dir/build_sysroot/build_sysroot.sh\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            time TARGET_TRIPLE=\"$HOST_TRIPLE\" \"$dir/build_sysroot/build_sysroot.sh\"\n-        fi\n-        cp lib/rustlib/*/lib/libstd-* lib/\n-        ;;\n-    *)\n-        echo \"Unknown sysroot kind \\`$build_sysroot\\`.\"\n-        echo \"The allowed values are:\"\n-        echo \"    none A sysroot that doesn't contain the standard library\"\n-        echo \"    llvm Copy the sysroot from rustc compiled by cg_llvm\"\n-        echo \"    clif Build a new sysroot using cg_clif\"\n-        exit 1\n-esac"}, {"sha": "46f661107e73b43ab0b9a2713e51661a60a64708", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -56,7 +56,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.43\"\n+version = \"0.1.46\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -121,9 +121,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.18\"\n+version = \"0.1.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c\"\n+checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\",\n@@ -132,9 +132,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.95\"\n+version = \"0.2.97\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"789da6d93f1b866ffe175afc5322a4d76c038605a1c3319bb57b06967ca98a36\"\n+checksum = \"12b8adadd720df158f4d70dfe7ccc6adb0472d7c55ca83445f6a5ab3e36f8fb6\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -195,9 +195,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.19\"\n+version = \"0.1.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"410f7acf3cb3a44527c5d9546bad4bf4e6c460915d5f9f2fc524498bfe8f70ce\"\n+checksum = \"dead70b0b5e03e9c814bcb6b01e03e68f7c57a80aa48c72ec92152ab3e818d49\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "0354304e55bf77477039d6737749d845128ac80c", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/build_sysroot.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh?ref=d2b04f075c0ce010758c4c8674152ff89d1d73f3", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Requires the CHANNEL env var to be set to `debug` or `release.`\n-\n-set -e\n-\n-source ./config.sh\n-\n-dir=$(pwd)\n-\n-# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n-# build scripts are still compiled using cg_llvm.\n-export RUSTC=$dir\"/bin/cg_clif_build_sysroot\"\n-export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n-\n-cd \"$(dirname \"$0\")\"\n-\n-# Cleanup for previous run\n-#     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n-\n-# We expect the target dir in the default location. Guard against the user changing it.\n-export CARGO_TARGET_DIR=target\n-\n-# Build libs\n-export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n-export __CARGO_DEFAULT_LIB_METADATA=\"cg_clif\"\n-if [[ \"$1\" != \"--debug\" ]]; then\n-    sysroot_channel='release'\n-    # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=3\" cargo build --target \"$TARGET_TRIPLE\" --release\n-else\n-    sysroot_channel='debug'\n-    cargo build --target \"$TARGET_TRIPLE\"\n-fi\n-\n-# Copy files to sysroot\n-ln \"target/$TARGET_TRIPLE/$sysroot_channel/deps/\"* \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-rm \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"*.{rmeta,d}"}, {"sha": "54b7a94750c5249ee465380802c313d72e68272c", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/prepare_sysroot_src.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh?ref=d2b04f075c0ce010758c4c8674152ff89d1d73f3", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-cd \"$(dirname \"$0\")\"\n-\n-SRC_DIR=\"$(dirname \"$(rustup which rustc)\")/../lib/rustlib/src/rust/\"\n-DST_DIR=\"sysroot_src\"\n-\n-if [ ! -e \"$SRC_DIR\" ]; then\n-    echo \"Please install rust-src component\"\n-    exit 1\n-fi\n-\n-rm -rf $DST_DIR\n-mkdir -p $DST_DIR/library\n-cp -a \"$SRC_DIR/library\" $DST_DIR/\n-\n-pushd $DST_DIR\n-echo \"[GIT] init\"\n-git init\n-echo \"[GIT] add\"\n-git add .\n-echo \"[GIT] commit\"\n-git commit -m \"Initial commit\" -q\n-for file in $(ls ../../patches/ | grep -v patcha); do\n-echo \"[GIT] apply\" \"$file\"\n-git apply ../../patches/\"$file\"\n-git add -A\n-git commit --no-gpg-sign -m \"Patch $file\"\n-done\n-popd\n-\n-git clone https://github.com/rust-lang/compiler-builtins.git || echo \"rust-lang/compiler-builtins has already been cloned\"\n-pushd compiler-builtins\n-git checkout -- .\n-git checkout 0.1.43\n-git apply ../../crate_patches/000*-compiler-builtins-*.patch\n-popd\n-\n-echo \"Successfully prepared sysroot source for building\""}, {"sha": "1df2bcc4541ca1b9fdbad003df57ea3f6c67d265", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,40 @@\n+use std::env;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+\n+pub(crate) fn build_backend(channel: &str, host_triple: &str) -> PathBuf {\n+    let mut cmd = Command::new(\"cargo\");\n+    cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n+\n+    match channel {\n+        \"debug\" => {}\n+        \"release\" => {\n+            cmd.arg(\"--release\");\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    if cfg!(unix) {\n+        if cfg!(target_os = \"macos\") {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Csplit-debuginfo=unpacked \\\n+                -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n+                -Zosx-rpath-install-name\"\n+                    .to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        } else {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Clink-arg=-Wl,-rpath=$ORIGIN/../lib \".to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        }\n+    }\n+\n+    eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n+    crate::utils::spawn_and_wait(cmd);\n+\n+    Path::new(\"target\").join(host_triple).join(channel)\n+}"}, {"sha": "9fb88c279613fb85627f262183fe23fe079553de", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,216 @@\n+use std::env;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+use std::process::{self, Command};\n+\n+use crate::rustc_info::{get_file_name, get_rustc_version};\n+use crate::utils::{spawn_and_wait, try_hard_link};\n+use crate::SysrootKind;\n+\n+pub(crate) fn build_sysroot(\n+    channel: &str,\n+    sysroot_kind: SysrootKind,\n+    target_dir: &Path,\n+    cg_clif_build_dir: PathBuf,\n+    host_triple: &str,\n+    target_triple: &str,\n+) {\n+    if target_dir.exists() {\n+        fs::remove_dir_all(target_dir).unwrap();\n+    }\n+    fs::create_dir_all(target_dir.join(\"bin\")).unwrap();\n+    fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n+\n+    // Copy the backend\n+    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n+        try_hard_link(\n+            cg_clif_build_dir.join(get_file_name(file, \"bin\")),\n+            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n+        );\n+    }\n+\n+    let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n+    try_hard_link(\n+        cg_clif_build_dir.join(&cg_clif_dylib),\n+        target_dir\n+            .join(if cfg!(windows) {\n+                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+                // binaries.\n+                \"bin\"\n+            } else {\n+                \"lib\"\n+            })\n+            .join(cg_clif_dylib),\n+    );\n+\n+    // Build and copy cargo wrapper\n+    let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+    build_cargo_wrapper_cmd\n+        .arg(\"scripts/cargo.rs\")\n+        .arg(\"-o\")\n+        .arg(target_dir.join(\"cargo\"))\n+        .arg(\"-g\");\n+    spawn_and_wait(build_cargo_wrapper_cmd);\n+\n+    let default_sysroot = crate::rustc_info::get_default_sysroot();\n+\n+    let rustlib = target_dir.join(\"lib\").join(\"rustlib\");\n+    let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n+    let target_rustlib_lib = rustlib.join(target_triple).join(\"lib\");\n+    fs::create_dir_all(&host_rustlib_lib).unwrap();\n+    fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n+    if target_triple == \"x86_64-pc-windows-gnu\" {\n+        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\").exists() {\n+            eprintln!(\n+                \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n+                to compile a sysroot for it.\",\n+            );\n+            process::exit(1);\n+        }\n+        for file in fs::read_dir(\n+            default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+        )\n+        .unwrap()\n+        {\n+            let file = file.unwrap().path();\n+            if file.extension().map_or(true, |ext| ext.to_str().unwrap() != \"o\") {\n+                continue; // only copy object files\n+            }\n+            try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+        }\n+    }\n+\n+    match sysroot_kind {\n+        SysrootKind::None => {} // Nothing to do\n+        SysrootKind::Llvm => {\n+            for file in fs::read_dir(\n+                default_sysroot.join(\"lib\").join(\"rustlib\").join(host_triple).join(\"lib\"),\n+            )\n+            .unwrap()\n+            {\n+                let file = file.unwrap().path();\n+                let file_name_str = file.file_name().unwrap().to_str().unwrap();\n+                if file_name_str.contains(\"rustc_\")\n+                    || file_name_str.contains(\"chalk\")\n+                    || file_name_str.contains(\"tracing\")\n+                    || file_name_str.contains(\"regex\")\n+                {\n+                    // These are large crates that are part of the rustc-dev component and are not\n+                    // necessary to run regular programs.\n+                    continue;\n+                }\n+                try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n+            }\n+\n+            if target_triple != host_triple {\n+                for file in fs::read_dir(\n+                    default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+                )\n+                .unwrap()\n+                {\n+                    let file = file.unwrap().path();\n+                    try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+        SysrootKind::Clif => {\n+            build_clif_sysroot_for_triple(channel, target_dir, host_triple, None);\n+\n+            if host_triple != target_triple {\n+                // When cross-compiling it is often necessary to manually pick the right linker\n+                let linker = if target_triple == \"aarch64-unknown-linux-gnu\" {\n+                    Some(\"aarch64-linux-gnu-gcc\")\n+                } else {\n+                    None\n+                };\n+                build_clif_sysroot_for_triple(channel, target_dir, target_triple, linker);\n+            }\n+\n+            // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n+            // libstd.\n+            for file in fs::read_dir(host_rustlib_lib).unwrap() {\n+                let file = file.unwrap().path();\n+                if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n+                    try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn build_clif_sysroot_for_triple(\n+    channel: &str,\n+    target_dir: &Path,\n+    triple: &str,\n+    linker: Option<&str>,\n+) {\n+    match fs::read_to_string(Path::new(\"build_sysroot\").join(\"rustc_version\")) {\n+        Err(e) => {\n+            eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n+            eprintln!(\"Hint: Try `./y.rs prepare` to patch the sysroot source\");\n+            process::exit(1);\n+        }\n+        Ok(source_version) => {\n+            let rustc_version = get_rustc_version();\n+            if source_version != rustc_version {\n+                eprintln!(\"The patched sysroot source is outdated\");\n+                eprintln!(\"Source version: {}\", source_version.trim());\n+                eprintln!(\"Rustc version:  {}\", rustc_version.trim());\n+                eprintln!(\"Hint: Try `./y.rs prepare` to update the patched sysroot source\");\n+                process::exit(1);\n+            }\n+        }\n+    }\n+\n+    let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n+\n+    if !crate::config::get_bool(\"keep_sysroot\") {\n+        // Cleanup the target dir with the exception of build scripts and the incremental cache\n+        for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n+            if build_dir.join(dir).exists() {\n+                fs::remove_dir_all(build_dir.join(dir)).unwrap();\n+            }\n+        }\n+    }\n+\n+    // Build sysroot\n+    let mut build_cmd = Command::new(\"cargo\");\n+    build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n+    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    if channel == \"release\" {\n+        build_cmd.arg(\"--release\");\n+        rustflags.push_str(\" -Zmir-opt-level=3\");\n+    }\n+    if let Some(linker) = linker {\n+        use std::fmt::Write;\n+        write!(rustflags, \" -Clinker={}\", linker).unwrap();\n+    }\n+    build_cmd.env(\"RUSTFLAGS\", rustflags);\n+    build_cmd.env(\n+        \"RUSTC\",\n+        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n+    );\n+    // FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n+    build_cmd.env(\"CARGO_INCREMENTAL\", \"0\").env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n+    spawn_and_wait(build_cmd);\n+\n+    // Copy all relevant files to the sysroot\n+    for entry in\n+        fs::read_dir(Path::new(\"build_sysroot/target\").join(triple).join(channel).join(\"deps\"))\n+            .unwrap()\n+    {\n+        let entry = entry.unwrap();\n+        if let Some(ext) = entry.path().extension() {\n+            if ext == \"rmeta\" || ext == \"d\" || ext == \"dSYM\" {\n+                continue;\n+            }\n+        } else {\n+            continue;\n+        };\n+        try_hard_link(\n+            entry.path(),\n+            target_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n+        );\n+    }\n+}"}, {"sha": "ef540cf1f822b467b80adbc23f2c490e96c647ac", "filename": "compiler/rustc_codegen_cranelift/build_system/config.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fconfig.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,55 @@\n+use std::{fs, process};\n+\n+fn load_config_file() -> Vec<(String, Option<String>)> {\n+    fs::read_to_string(\"config.txt\")\n+        .unwrap()\n+        .lines()\n+        .map(|line| if let Some((line, _comment)) = line.split_once('#') { line } else { line })\n+        .map(|line| line.trim())\n+        .filter(|line| !line.is_empty())\n+        .map(|line| {\n+            if let Some((key, val)) = line.split_once('=') {\n+                (key.trim().to_owned(), Some(val.trim().to_owned()))\n+            } else {\n+                (line.to_owned(), None)\n+            }\n+        })\n+        .collect()\n+}\n+\n+pub(crate) fn get_bool(name: &str) -> bool {\n+    let values = load_config_file()\n+        .into_iter()\n+        .filter(|(key, _)| key == name)\n+        .map(|(_, val)| val)\n+        .collect::<Vec<_>>();\n+    if values.is_empty() {\n+        false\n+    } else {\n+        if values.iter().any(|val| val.is_some()) {\n+            eprintln!(\"Boolean config `{}` has a value\", name);\n+            process::exit(1);\n+        }\n+        true\n+    }\n+}\n+\n+pub(crate) fn get_value(name: &str) -> Option<String> {\n+    let values = load_config_file()\n+        .into_iter()\n+        .filter(|(key, _)| key == name)\n+        .map(|(_, val)| val)\n+        .collect::<Vec<_>>();\n+    if values.is_empty() {\n+        None\n+    } else if values.len() == 1 {\n+        if values[0].is_none() {\n+            eprintln!(\"Config `{}` missing value\", name);\n+            process::exit(1);\n+        }\n+        values.into_iter().next().unwrap()\n+    } else {\n+        eprintln!(\"Config `{}` given multiple values: {:?}\", name, values);\n+        process::exit(1);\n+    }\n+}"}, {"sha": "401b8271abcc52e63f4b4c493a5ac2ec24a59066", "filename": "compiler/rustc_codegen_cranelift/build_system/prepare.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,133 @@\n+use std::env;\n+use std::ffi::OsStr;\n+use std::ffi::OsString;\n+use std::fs;\n+use std::path::Path;\n+use std::process::Command;\n+\n+use crate::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n+use crate::utils::{copy_dir_recursively, spawn_and_wait};\n+\n+pub(crate) fn prepare() {\n+    prepare_sysroot();\n+\n+    eprintln!(\"[INSTALL] hyperfine\");\n+    Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n+\n+    clone_repo(\n+        \"rand\",\n+        \"https://github.com/rust-random/rand.git\",\n+        \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n+    );\n+    apply_patches(\"rand\", Path::new(\"rand\"));\n+\n+    clone_repo(\n+        \"regex\",\n+        \"https://github.com/rust-lang/regex.git\",\n+        \"341f207c1071f7290e3f228c710817c280c8dca1\",\n+    );\n+\n+    clone_repo(\n+        \"simple-raytracer\",\n+        \"https://github.com/ebobby/simple-raytracer\",\n+        \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    );\n+\n+    eprintln!(\"[LLVM BUILD] simple-raytracer\");\n+    let mut build_cmd = Command::new(\"cargo\");\n+    build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n+    spawn_and_wait(build_cmd);\n+    fs::copy(\n+        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n+        // FIXME use get_file_name here too once testing is migrated to rust\n+        \"simple-raytracer/raytracer_cg_llvm\",\n+    )\n+    .unwrap();\n+}\n+\n+fn prepare_sysroot() {\n+    let rustc_path = get_rustc_path();\n+    let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n+    let sysroot_src = env::current_dir().unwrap().join(\"build_sysroot\").join(\"sysroot_src\");\n+\n+    assert!(sysroot_src_orig.exists());\n+\n+    if sysroot_src.exists() {\n+        fs::remove_dir_all(&sysroot_src).unwrap();\n+    }\n+    fs::create_dir_all(sysroot_src.join(\"library\")).unwrap();\n+    eprintln!(\"[COPY] sysroot src\");\n+    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.join(\"library\"));\n+\n+    let rustc_version = get_rustc_version();\n+    fs::write(\n+        Path::new(\"build_sysroot\").join(\"rustc_version\"),\n+        &rustc_version,\n+    )\n+    .unwrap();\n+\n+    eprintln!(\"[GIT] init\");\n+    let mut git_init_cmd = Command::new(\"git\");\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_init_cmd);\n+\n+    let mut git_add_cmd = Command::new(\"git\");\n+    git_add_cmd.arg(\"add\").arg(\".\").current_dir(&sysroot_src);\n+    spawn_and_wait(git_add_cmd);\n+\n+    let mut git_commit_cmd = Command::new(\"git\");\n+    git_commit_cmd\n+        .arg(\"commit\")\n+        .arg(\"-m\")\n+        .arg(\"Initial commit\")\n+        .arg(\"-q\")\n+        .current_dir(&sysroot_src);\n+    spawn_and_wait(git_commit_cmd);\n+\n+    apply_patches(\"sysroot\", &sysroot_src);\n+\n+    clone_repo(\n+        \"build_sysroot/compiler-builtins\",\n+        \"https://github.com/rust-lang/compiler-builtins.git\",\n+        \"0.1.46\",\n+    );\n+    apply_patches(\"compiler-builtins\", Path::new(\"build_sysroot/compiler-builtins\"));\n+}\n+\n+fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n+    eprintln!(\"[CLONE] {}\", repo);\n+    // Ignore exit code as the repo may already have been checked out\n+    Command::new(\"git\").arg(\"clone\").arg(repo).arg(target_dir).spawn().unwrap().wait().unwrap();\n+\n+    let mut clean_cmd = Command::new(\"git\");\n+    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(target_dir);\n+    spawn_and_wait(clean_cmd);\n+\n+    let mut checkout_cmd = Command::new(\"git\");\n+    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(target_dir);\n+    spawn_and_wait(checkout_cmd);\n+}\n+\n+fn get_patches(crate_name: &str) -> Vec<OsString> {\n+    let mut patches: Vec<_> = fs::read_dir(\"patches\")\n+        .unwrap()\n+        .map(|entry| entry.unwrap().path())\n+        .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n+        .map(|path| path.file_name().unwrap().to_owned())\n+        .filter(|file_name| {\n+            file_name.to_str().unwrap().split_once(\"-\").unwrap().1.starts_with(crate_name)\n+        })\n+        .collect();\n+    patches.sort();\n+    patches\n+}\n+\n+fn apply_patches(crate_name: &str, target_dir: &Path) {\n+    for patch in get_patches(crate_name) {\n+        eprintln!(\"[PATCH] {:?} <- {:?}\", target_dir.file_name().unwrap(), patch);\n+        let patch_arg = env::current_dir().unwrap().join(\"patches\").join(patch);\n+        let mut apply_patch_cmd = Command::new(\"git\");\n+        apply_patch_cmd.arg(\"am\").arg(patch_arg).arg(\"-q\").current_dir(target_dir);\n+        spawn_and_wait(apply_patch_cmd);\n+    }\n+}"}, {"sha": "9206bb02bd3da56da6959cdbbf34cf2e55a93f1c", "filename": "compiler/rustc_codegen_cranelift/build_system/rustc_info.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,65 @@\n+use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n+\n+pub(crate) fn get_rustc_version() -> String {\n+    let version_info =\n+        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n+    String::from_utf8(version_info).unwrap()\n+}\n+\n+pub(crate) fn get_host_triple() -> String {\n+    let version_info =\n+        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n+    String::from_utf8(version_info)\n+        .unwrap()\n+        .lines()\n+        .to_owned()\n+        .find(|line| line.starts_with(\"host\"))\n+        .unwrap()\n+        .split(\":\")\n+        .nth(1)\n+        .unwrap()\n+        .trim()\n+        .to_owned()\n+}\n+\n+pub(crate) fn get_rustc_path() -> PathBuf {\n+    let rustc_path = Command::new(\"rustup\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"which\", \"rustc\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(rustc_path).unwrap().trim()).to_owned()\n+}\n+\n+pub(crate) fn get_default_sysroot() -> PathBuf {\n+    let default_sysroot = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n+}\n+\n+pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n+    let file_name = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\n+            \"--crate-name\",\n+            crate_name,\n+            \"--crate-type\",\n+            crate_type,\n+            \"--print\",\n+            \"file-names\",\n+            \"-\",\n+        ])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    let file_name = String::from_utf8(file_name).unwrap().trim().to_owned();\n+    assert!(!file_name.contains('\\n'));\n+    assert!(file_name.contains(crate_name));\n+    file_name\n+}"}, {"sha": "12b5d70fad853133384fb064e19fd9a2cb9d189a", "filename": "compiler/rustc_codegen_cranelift/build_system/utils.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,35 @@\n+use std::fs;\n+use std::path::Path;\n+use std::process::{self, Command};\n+\n+#[track_caller]\n+pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n+    let src = src.as_ref();\n+    let dst = dst.as_ref();\n+    if let Err(_) = fs::hard_link(src, dst) {\n+        fs::copy(src, dst).unwrap(); // Fallback to copying if hardlinking failed\n+    }\n+}\n+\n+#[track_caller]\n+pub(crate) fn spawn_and_wait(mut cmd: Command) {\n+    if !cmd.spawn().unwrap().wait().unwrap().success() {\n+        process::exit(1);\n+    }\n+}\n+\n+pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n+    for entry in fs::read_dir(from).unwrap() {\n+        let entry = entry.unwrap();\n+        let filename = entry.file_name();\n+        if filename == \".\" || filename == \"..\" {\n+            continue;\n+        }\n+        if entry.metadata().unwrap().is_dir() {\n+            fs::create_dir(to.join(&filename)).unwrap();\n+            copy_dir_recursively(&from.join(&filename), &to.join(&filename));\n+        } else {\n+            fs::copy(from.join(&filename), to.join(&filename)).unwrap();\n+        }\n+    }\n+}"}, {"sha": "f4f8c82d69f10814a052af9e45b7e79bfc61d301", "filename": "compiler/rustc_codegen_cranelift/clean_all.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,5 +1,6 @@\n #!/usr/bin/env bash\n set -e\n \n-rm -rf target/ build/ build_sysroot/{sysroot_src/,target/,compiler-builtins/} perf.data{,.old}\n+rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n+rm -rf target/ build/ perf.data{,.old}\n rm -rf rand/ regex/ simple-raytracer/"}, {"sha": "b14db27d6206fc79ffa1faf4805fea0ab126e92b", "filename": "compiler/rustc_codegen_cranelift/config.txt", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fconfig.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fconfig.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fconfig.txt?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,17 @@\n+# This file allows configuring the build system.\n+\n+# Which triple to produce a compiler toolchain for.\n+#\n+# Defaults to the default triple of rustc on the host system.\n+#host = x86_64-unknown-linux-gnu\n+\n+# Which triple to build libraries (core/alloc/std/test/proc_macro) for.\n+#\n+# Defaults to `host`.\n+#target = x86_64-unknown-linux-gnu\n+\n+# Disables cleaning of the sysroot dir. This will cause old compiled artifacts to be re-used when\n+# the sysroot source hasn't changed. This is useful when the codegen backend hasn't been modified.\n+# This option can be changed while the build system is already running for as long as sysroot\n+# building hasn't started yet.\n+#keep_sysroot"}, {"sha": "956d5905a97adfbf460676559a73b32728b06b00", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -2,14 +2,14 @@\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n \n ## Cargo\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -30,7 +30,7 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh jit\n+$ $cg_clif_dir/build/cargo jit\n ```\n \n or\n@@ -40,11 +40,10 @@ $ $cg_clif_dir/build/bin/cg_clif -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.\n ```\n \n There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n-first called. It currently does not work with multi-threaded programs. When a not yet compiled\n-function is called from another thread than the main thread, you will get an ICE.\n+first called.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh lazy-jit\n+$ $cg_clif_dir/build/cargo lazy-jit\n ```\n \n ## Shell"}, {"sha": "d997ce6d1b379044fd3675420e9837739ef0aa10", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -292,7 +292,7 @@ fn main() {\n     #[cfg(not(any(jit, windows)))]\n     test_tls();\n \n-    #[cfg(all(not(jit), target_os = \"linux\"))]\n+    #[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n     unsafe {\n         global_asm_test();\n     }\n@@ -303,12 +303,12 @@ fn main() {\n     assert_eq!(*REF1, *REF2);\n }\n \n-#[cfg(all(not(jit), target_os = \"linux\"))]\n+#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n extern \"C\" {\n     fn global_asm_test();\n }\n \n-#[cfg(all(not(jit), target_os = \"linux\"))]\n+#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n global_asm! {\n     \"\n     .global global_asm_test"}, {"sha": "5bc51a541b58c7d63b0939976ab2d8869983d24b", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -15,8 +15,6 @@ fn main() {\n     let stderr = ::std::io::stderr();\n     let mut stderr = stderr.lock();\n \n-    // FIXME support lazy jit when multi threading\n-    #[cfg(not(lazy_jit))]\n     std::thread::spawn(move || {\n         println!(\"Hello from another thread!\");\n     });"}, {"sha": "7daea99f5794d2103588c152a0ac02ca1b5b14b1", "filename": "compiler/rustc_codegen_cranelift/patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/crate_patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch"}, {"sha": "01dc0fcc5376138bccca396b78e729a5942bf94c", "filename": "compiler/rustc_codegen_cranelift/patches/0001-rand-Enable-c2-chacha-simd-feature.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/crate_patches/0001-rand-Enable-c2-chacha-simd-feature.patch"}, {"sha": "19fd20d7269017cfa1dd21a9db67999d61d4b619", "filename": "compiler/rustc_codegen_cranelift/patches/0002-rand-Disable-failing-test.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/crate_patches/0002-rand-Disable-failing-test.patch"}, {"sha": "ba0eaacd82870fd0a12952989c55b70317ef3b3a", "filename": "compiler/rustc_codegen_cranelift/patches/0022-sysroot-Disable-not-compiling-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/patches/0022-core-Disable-not-compiling-tests.patch"}, {"sha": "5d2c3049f60ebfb03d44e5885d14390d1e0371d2", "filename": "compiler/rustc_codegen_cranelift/patches/0023-sysroot-Ignore-failing-tests.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-sysroot-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-sysroot-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-sysroot-Ignore-failing-tests.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/patches/0023-core-Ignore-failing-tests.patch"}, {"sha": "32e5930969061f0231ecc6e89c72eb77be7002cb", "filename": "compiler/rustc_codegen_cranelift/patches/0027-sysroot-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "compiler/rustc_codegen_cranelift/patches/0027-Disable-128bit-atomic-operations.patch"}, {"sha": "64c097261c908bf6909aec2789646e998552f4ee", "filename": "compiler/rustc_codegen_cranelift/prepare.sh", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fprepare.sh?ref=d2b04f075c0ce010758c4c8674152ff89d1d73f3", "patch": "@@ -1,29 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-./build_sysroot/prepare_sysroot_src.sh\n-cargo install hyperfine || echo \"Skipping hyperfine install\"\n-\n-git clone https://github.com/rust-random/rand.git || echo \"rust-random/rand has already been cloned\"\n-pushd rand\n-git checkout -- .\n-git checkout 0f933f9c7176e53b2a3c7952ded484e1783f0bf1\n-git am ../crate_patches/*-rand-*.patch\n-popd\n-\n-git clone https://github.com/rust-lang/regex.git || echo \"rust-lang/regex has already been cloned\"\n-pushd regex\n-git checkout -- .\n-git checkout 341f207c1071f7290e3f228c710817c280c8dca1\n-popd\n-\n-git clone https://github.com/ebobby/simple-raytracer || echo \"ebobby/simple-raytracer has already been cloned\"\n-pushd simple-raytracer\n-git checkout -- .\n-git checkout 804a7a21b9e673a482797aa289a18ed480e4d813\n-\n-# build with cg_llvm for perf comparison\n-unset CARGO_TARGET_DIR\n-cargo build\n-mv target/debug/main raytracer_cg_llvm\n-popd"}, {"sha": "f806f7bdcd98a72e2c858d5b4f915be04e396bd1", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-05-26\"\n+channel = \"nightly-2021-07-07\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "b7e8dd44974794294ac0621138ac6bdf95c1ee56", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,70 @@\n+use std::env;\n+#[cfg(unix)]\n+use std::os::unix::process::CommandExt;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+fn main() {\n+    if env::var(\"RUSTC_WRAPPER\").map_or(false, |wrapper| wrapper.contains(\"sccache\")) {\n+        eprintln!(\n+            \"\\x1b[1;93m=== Warning: Unsetting RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n+        );\n+        env::remove_var(\"RUSTC_WRAPPER\");\n+    }\n+\n+    let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n+\n+    env::set_var(\"RUSTC\", sysroot.join(\"bin/cg_clif\".to_string() + env::consts::EXE_SUFFIX));\n+\n+    let mut rustdoc_flags = env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new());\n+    rustdoc_flags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n+    rustdoc_flags.push_str(\n+        sysroot\n+            .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n+            .join(\n+                env::consts::DLL_PREFIX.to_string()\n+                    + \"rustc_codegen_cranelift\"\n+                    + env::consts::DLL_SUFFIX,\n+            )\n+            .to_str()\n+            .unwrap(),\n+    );\n+    rustdoc_flags.push_str(\" --sysroot \");\n+    rustdoc_flags.push_str(sysroot.to_str().unwrap());\n+    env::set_var(\"RUSTDOCFLAGS\", rustdoc_flags);\n+\n+    // Ensure that the right toolchain is used\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+\n+    let args: Vec<_> = match env::args().nth(1).as_deref() {\n+        Some(\"jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit\".to_string()])\n+                .collect()\n+        }\n+        Some(\"lazy-jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit-lazy\".to_string()])\n+                .collect()\n+        }\n+        _ => env::args().skip(1).collect(),\n+    };\n+\n+    #[cfg(unix)]\n+    Command::new(\"cargo\").args(args).exec();\n+\n+    #[cfg(not(unix))]\n+    std::process::exit(\n+        Command::new(\"cargo\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+    );\n+}"}, {"sha": "1daa5a78f7bd25e6396d21b3e92d7fe336171f83", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.sh", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d2b04f075c0ce010758c4c8674152ff89d1d73f3/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh?ref=d2b04f075c0ce010758c4c8674152ff89d1d73f3", "patch": "@@ -1,18 +0,0 @@\n-#!/usr/bin/env bash\n-\n-dir=$(dirname \"$0\")\n-source \"$dir/config.sh\"\n-\n-# read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat \"$dir/rust-toolchain\" | grep channel | sed \"s/channel = \\\"\\(.*\\)\\\"/\\1/\")\n-\n-cmd=$1\n-shift || true\n-\n-if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit -Cprefer-dynamic\n-elif [[ \"$cmd\" = \"lazy-jit\" ]]; then\n-cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit-lazy -Cprefer-dynamic\n-else\n-cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n-fi"}, {"sha": "53ada369b089a28ee63b3c183603a36153239821", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -2,26 +2,5 @@\n \n set -e\n \n-dylib=$(echo \"\" | rustc --print file-names --crate-type dylib --crate-name rustc_codegen_cranelift -)\n-\n-if echo \"$RUSTC_WRAPPER\" | grep sccache; then\n-echo\n-echo -e \"\\x1b[1;93m=== Warning: Unset RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n-echo\n-export RUSTC_WRAPPER=\n-fi\n-\n-dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\"; pwd)\n-\n-export RUSTC=$dir\"/bin/cg_clif\"\n-\n-export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$dir'/lib/'$dylib' --sysroot '$dir\n-\n-# FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$(uname)\" == 'Darwin' ]]; then\n-   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n-fi\n-\n-export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:\"$dir\"/lib\"\n-export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n+export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH\"\n+export DYLD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH\""}, {"sha": "11d6c4c83186743f2751a2403c2996eab66746be", "filename": "compiler/rustc_codegen_cranelift/scripts/ext_config.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,6 +1,6 @@\n # Note to people running shellcheck: this file should only be sourced, not executed directly.\n \n-# Various env vars that should only be set for the build system but not for cargo.sh\n+# Various env vars that should only be set for the build system\n \n set -e\n \n@@ -25,3 +25,8 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n       echo \"Unknown non-native platform\"\n    fi\n fi\n+\n+# FIXME fix `#[linkage = \"extern_weak\"]` without this\n+if [[ \"$(uname)\" == 'Darwin' ]]; then\n+   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n+fi"}, {"sha": "9e196afbe4f57c38b36576fb9621f4cee56373b5", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -2,9 +2,10 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-source build/config.sh\n+source scripts/config.sh\n+RUSTC=\"$(pwd)/build/bin/cg_clif\"\n popd\n-PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS -Cllvm-args=mode=jit -Cprefer-dynamic $0\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "cc34c08088665bc19cdea842e961593052c28e50", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -17,7 +17,7 @@ case $1 in\n         done\n \n         ./clean_all.sh\n-        ./prepare.sh\n+        ./y.rs prepare\n \n         (cd build_sysroot && cargo update)\n "}, {"sha": "52adaaa8de673d3661903b9353ed96ec1bbbb5dc", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,8 +1,8 @@\n #!/bin/bash\n set -e\n \n-./build.sh\n-source build/config.sh\n+./y.rs build\n+source scripts/config.sh\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true\n@@ -33,7 +33,7 @@ index d95b5b7f17f..00b6f0e3635 100644\n  [dependencies]\n  core = { path = \"../core\" }\n -compiler_builtins = { version = \"0.1.40\", features = ['rustc-dep-of-std'] }\n-+compiler_builtins = { version = \"0.1.43\", features = ['rustc-dep-of-std', 'no-asm'] }\n++compiler_builtins = { version = \"0.1.45\", features = ['rustc-dep-of-std', 'no-asm'] }\n \n  [dev-dependencies]\n  rand = \"0.7\""}, {"sha": "2f5c2cf737b056be7560f2caa6d6c7d0d6160a8c", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -38,7 +38,8 @@ rm src/test/ui/threads-sendsync/task-stderr.rs\n rm src/test/ui/numbers-arithmetic/int-abs-overflow.rs\n rm src/test/ui/drop/drop-trait-enum.rs\n rm src/test/ui/numbers-arithmetic/issue-8460.rs\n-rm src/test/incremental/change_crate_dep_kind.rs # requires -Cpanic=unwind\n+rm src/test/ui/rt-explody-panic-payloads.rs\n+rm src/test/incremental/change_crate_dep_kind.rs\n \n rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n rm src/test/ui/init-large-type.rs # same\n@@ -64,6 +65,7 @@ rm src/test/incremental/lto.rs # requires lto\n \n rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n+rm -r src/test/run-make/emit-named-files # requires full --emit support\n \n rm src/test/pretty/asm.rs # inline asm\n rm src/test/pretty/raw-str-nonexpr.rs # same"}, {"sha": "5df04c533a70e38fb009dec4ec62f337e0a87a38", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -2,9 +2,10 @@\n \n set -e\n \n-source build/config.sh\n+source scripts/config.sh\n source scripts/ext_config.sh\n-MY_RUSTC=\"$RUSTC $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+export RUSTC=false # ensure that cg_llvm isn't accidentally used\n+MY_RUSTC=\"$(pwd)/build/bin/cg_clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n@@ -46,7 +47,7 @@ function base_sysroot_tests() {\n         $MY_RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n \n         echo \"[JIT-lazy] std_example\"\n-        $MY_RUSTC -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/std_example.rs --cfg lazy_jit --target \"$HOST_TRIPLE\"\n+        $MY_RUSTC -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi\n@@ -75,63 +76,64 @@ function base_sysroot_tests() {\n \n function extended_sysroot_tests() {\n     pushd rand\n-    cargo clean\n+    ../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-random/rand\"\n-        ../build/cargo.sh test --workspace\n+        ../build/cargo test --workspace\n     else\n         echo \"[AOT] rust-random/rand\"\n-        ../build/cargo.sh build --workspace --target $TARGET_TRIPLE --tests\n+        ../build/cargo build --workspace --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo.sh build\"\n+        \"../build/cargo build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n         hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n+        ../build/cargo clean\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo.sh build --target $TARGET_TRIPLE\n+        ../build/cargo build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    cargo clean\n+    ../../../../../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo.sh test\n+        ../../../../../build/cargo test\n     else\n-        ../../../../../build/cargo.sh build --target $TARGET_TRIPLE --tests\n+        ../../../../../build/cargo build --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    cargo clean\n+    ../build/cargo clean\n     export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    ../build/cargo build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         cat examples/regexdna-input.txt \\\n-            | ../build/cargo.sh run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | ../build/cargo run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n             | grep -v \"Spawned thread\" > res.txt\n         diff -u res.txt examples/regexdna-output.txt\n     fi\n \n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+        ../build/cargo test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     else\n         echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo.sh build --tests --target $TARGET_TRIPLE\n+        ../build/cargo build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n }"}, {"sha": "3d78eed77b94c373cfe533920501dbabb6f99470", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -21,6 +21,11 @@ pub(crate) fn codegen_fn<'tcx>(\n     debug_assert!(!instance.substs.needs_infer());\n \n     let mir = tcx.instance_mir(instance.def);\n+    let _mir_guard = crate::PrintOnPanic(|| {\n+        let mut buf = Vec::new();\n+        rustc_mir::util::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        String::from_utf8_lossy(&buf).into_owned()\n+    });\n \n     // Declare function\n     let symbol_name = tcx.symbol_name(instance);\n@@ -52,7 +57,6 @@ pub(crate) fn codegen_fn<'tcx>(\n         module,\n         tcx,\n         pointer_type,\n-        vtables: FxHashMap::default(),\n         constants_cx: ConstantCx::new(),\n \n         instance,\n@@ -105,7 +109,14 @@ pub(crate) fn codegen_fn<'tcx>(\n     let context = &mut cx.cached_context;\n     context.func = func;\n \n-    crate::pretty_clif::write_clif_file(tcx, \"unopt\", None, instance, &context, &clif_comments);\n+    crate::pretty_clif::write_clif_file(\n+        tcx,\n+        \"unopt\",\n+        module.isa(),\n+        instance,\n+        &context,\n+        &clif_comments,\n+    );\n \n     // Verify function\n     verify_func(tcx, &clif_comments, &context.func);\n@@ -122,7 +133,13 @@ pub(crate) fn codegen_fn<'tcx>(\n \n     // Perform rust specific optimizations\n     tcx.sess.time(\"optimize clif ir\", || {\n-        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n+        crate::optimize::optimize_function(\n+            tcx,\n+            module.isa(),\n+            instance,\n+            context,\n+            &mut clif_comments,\n+        );\n     });\n \n     // Define function\n@@ -137,7 +154,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     crate::pretty_clif::write_clif_file(\n         tcx,\n         \"opt\",\n-        Some(module.isa()),\n+        module.isa(),\n         instance,\n         &context,\n         &clif_comments,"}, {"sha": "a044b43b86470a3c3e83f99ea5eb0cec9d4ea92e", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -6,8 +6,8 @@ extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_target;\n \n-use std::panic;\n use std::lazy::SyncLazy;\n+use std::panic;\n \n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_interface::interface;"}, {"sha": "892ccf27f6df893f713a62e9cf387f951848da98", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -233,7 +233,6 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) module: &'m mut dyn Module,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) pointer_type: Type, // Cached from module\n-    pub(crate) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), Pointer>,\n     pub(crate) constants_cx: ConstantCx,\n \n     pub(crate) instance: Instance<'tcx>,"}, {"sha": "2a2573aad295025f14f1d743c63b64845d9412db", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 76, "deletions": 65, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,16 +1,13 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n-use rustc_span::DUMMY_SP;\n-\n-use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc,\n-    Scalar,\n+    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n+use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n@@ -171,66 +168,74 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n \n     match const_val {\n-        ConstValue::Scalar(x) => {\n-            if fx.clif_type(layout.ty).is_none() {\n-                let (size, align) = (layout.size, layout.align.pref);\n-                let mut alloc = Allocation::from_bytes(\n-                    std::iter::repeat(0).take(size.bytes_usize()).collect::<Vec<u8>>(),\n-                    align,\n-                    Mutability::Not,\n-                );\n-                alloc.write_scalar(fx, alloc_range(Size::ZERO, size), x.into()).unwrap();\n-                let alloc = fx.tcx.intern_const_alloc(alloc);\n-                return CValue::by_ref(pointer_for_allocation(fx, alloc), layout);\n-            }\n-\n-            match x {\n-                Scalar::Int(int) => CValue::const_val(fx, layout, int),\n-                Scalar::Ptr(ptr) => {\n-                    let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n-                    let base_addr = match alloc_kind {\n-                        Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id = data_id_for_alloc_id(\n-                                &mut fx.constants_cx,\n-                                fx.module,\n-                                ptr.alloc_id,\n-                                alloc.mutability,\n-                            );\n-                            let local_data_id =\n-                                fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            if fx.clif_comments.enabled() {\n-                                fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n-                            }\n-                            fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n-                        }\n-                        Some(GlobalAlloc::Function(instance)) => {\n-                            let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n-                            let local_func_id =\n-                                fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n-                            fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n-                        }\n-                        Some(GlobalAlloc::Static(def_id)) => {\n-                            assert!(fx.tcx.is_static(def_id));\n-                            let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n-                            let local_data_id =\n-                                fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            if fx.clif_comments.enabled() {\n-                                fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n-                            }\n-                            fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+        ConstValue::Scalar(x) => match x {\n+            Scalar::Int(int) => {\n+                if fx.clif_type(layout.ty).is_some() {\n+                    return CValue::const_val(fx, layout, int);\n+                } else {\n+                    let raw_val = int.to_bits(int.size()).unwrap();\n+                    let val = match int.size().bytes() {\n+                        1 => fx.bcx.ins().iconst(types::I8, raw_val as i64),\n+                        2 => fx.bcx.ins().iconst(types::I16, raw_val as i64),\n+                        4 => fx.bcx.ins().iconst(types::I32, raw_val as i64),\n+                        8 => fx.bcx.ins().iconst(types::I64, raw_val as i64),\n+                        16 => {\n+                            let lsb = fx.bcx.ins().iconst(types::I64, raw_val as u64 as i64);\n+                            let msb =\n+                                fx.bcx.ins().iconst(types::I64, (raw_val >> 64) as u64 as i64);\n+                            fx.bcx.ins().iconcat(lsb, msb)\n                         }\n-                        None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n-                    };\n-                    let val = if ptr.offset.bytes() != 0 {\n-                        fx.bcx.ins().iadd_imm(base_addr, i64::try_from(ptr.offset.bytes()).unwrap())\n-                    } else {\n-                        base_addr\n+                        _ => unreachable!(),\n                     };\n-                    CValue::by_val(val, layout)\n+\n+                    let place = CPlace::new_stack_slot(fx, layout);\n+                    place.to_ptr().store(fx, val, MemFlags::trusted());\n+                    place.to_cvalue(fx)\n                 }\n             }\n-        }\n+            Scalar::Ptr(ptr) => {\n+                let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n+                let base_addr = match alloc_kind {\n+                    Some(GlobalAlloc::Memory(alloc)) => {\n+                        let data_id = data_id_for_alloc_id(\n+                            &mut fx.constants_cx,\n+                            fx.module,\n+                            ptr.alloc_id,\n+                            alloc.mutability,\n+                        );\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        if fx.clif_comments.enabled() {\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                        }\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n+                    Some(GlobalAlloc::Function(instance)) => {\n+                        let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n+                        let local_func_id =\n+                            fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n+                        fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n+                    }\n+                    Some(GlobalAlloc::Static(def_id)) => {\n+                        assert!(fx.tcx.is_static(def_id));\n+                        let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        if fx.clif_comments.enabled() {\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+                        }\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n+                    None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n+                };\n+                let val = if ptr.offset.bytes() != 0 {\n+                    fx.bcx.ins().iadd_imm(base_addr, i64::try_from(ptr.offset.bytes()).unwrap())\n+                } else {\n+                    base_addr\n+                };\n+                CValue::by_val(val, layout)\n+            }\n+        },\n         ConstValue::ByRef { alloc, offset } => CValue::by_ref(\n             pointer_for_allocation(fx, alloc)\n                 .offset_i64(fx, i64::try_from(offset.bytes()).unwrap()),\n@@ -254,7 +259,6 @@ pub(crate) fn pointer_for_allocation<'tcx>(\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n     let data_id =\n         data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, alloc.mutability);\n \n@@ -266,12 +270,13 @@ pub(crate) fn pointer_for_allocation<'tcx>(\n     crate::pointer::Pointer::new(global_ptr)\n }\n \n-fn data_id_for_alloc_id(\n+pub(crate) fn data_id_for_alloc_id(\n     cx: &mut ConstantCx,\n     module: &mut dyn Module,\n     alloc_id: AllocId,\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n+    cx.todo.push(TodoItem::Alloc(alloc_id));\n     *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n         module.declare_anonymous_data(mutability == rustc_hir::Mutability::Mut, false).unwrap()\n     })\n@@ -352,7 +357,14 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(cx, module, alloc_id, alloc.mutability);\n+                let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n+                    module\n+                        .declare_anonymous_data(\n+                            alloc.mutability == rustc_hir::Mutability::Mut,\n+                            false,\n+                        )\n+                        .unwrap()\n+                });\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -415,7 +427,6 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n-                    cx.todo.push(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(cx, module, reloc, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {"}, {"sha": "c7e15f81e030104c33ff6663ca8806307dcbf7ed", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -10,7 +10,7 @@ use rustc_span::{\n };\n \n use cranelift_codegen::binemit::CodeOffset;\n-use cranelift_codegen::machinst::MachSrcLoc;\n+use cranelift_codegen::MachSrcLoc;\n \n use gimli::write::{\n     Address, AttributeValue, FileId, FileInfo, LineProgram, LineString, LineStringTable,"}, {"sha": "c67336eb3f2c3125ee0427511991fbd3d01d2e09", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -61,9 +61,11 @@ impl<'tcx> DebugContext<'tcx> {\n \n         let mut dwarf = DwarfUnit::new(encoding);\n \n-        // FIXME: how to get version when building out of tree?\n-        // Normally this would use option_env!(\"CFG_VERSION\").\n-        let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n+        let producer = format!(\n+            \"cg_clif (rustc {}, cranelift {})\",\n+            rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n+            cranelift_codegen::VERSION,\n+        );\n         let comp_dir = tcx.sess.working_dir.to_string_lossy(false).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {"}, {"sha": "a8b802f449437622770ff9426fd524ac4273c1f2", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -289,13 +289,16 @@ pub(crate) fn run_aot(\n         None\n     };\n \n+    // FIXME handle `-Ctarget-cpu=native`\n+    let target_cpu =\n+        tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n     Box::new((\n         CodegenResults {\n             modules,\n             allocator_module,\n             metadata_module,\n             metadata,\n-            crate_info: CrateInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n+            crate_info: CrateInfo::new(tcx, target_cpu),\n         },\n         work_products,\n     ))"}, {"sha": "76fbc9ad51e8ec8af1b9665ed2194a4b18f145a4", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 107, "deletions": 20, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -3,11 +3,14 @@\n \n use std::cell::RefCell;\n use std::ffi::CString;\n+use std::lazy::{Lazy, SyncOnceCell};\n use std::os::raw::{c_char, c_int};\n+use std::sync::{mpsc, Mutex};\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_session::Session;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -23,12 +26,48 @@ thread_local! {\n     static LAZY_JIT_STATE: RefCell<Option<JitState>> = RefCell::new(None);\n }\n \n+/// The Sender owned by the rustc thread\n+static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> =\n+    SyncOnceCell::new();\n+\n+/// A message that is sent from the jitted runtime to the rustc thread.\n+/// Senders are responsible for upholding `Send` semantics.\n+enum UnsafeMessage {\n+    /// Request that the specified `Instance` be lazily jitted.\n+    ///\n+    /// Nothing accessible through `instance_ptr` may be moved or mutated by the sender after\n+    /// this message is sent.\n+    JitFn {\n+        instance_ptr: *const Instance<'static>,\n+        trampoline_ptr: *const u8,\n+        tx: mpsc::Sender<*const u8>,\n+    },\n+}\n+unsafe impl Send for UnsafeMessage {}\n+\n+impl UnsafeMessage {\n+    /// Send the message.\n+    fn send(self) -> Result<(), mpsc::SendError<UnsafeMessage>> {\n+        thread_local! {\n+            /// The Sender owned by the local thread\n+            static LOCAL_MESSAGE_SENDER: Lazy<mpsc::Sender<UnsafeMessage>> = Lazy::new(||\n+                GLOBAL_MESSAGE_SENDER\n+                    .get().unwrap()\n+                    .lock().unwrap()\n+                    .clone()\n+            );\n+        }\n+        LOCAL_MESSAGE_SENDER.with(|sender| sender.send(self))\n+    }\n+}\n+\n fn create_jit_module<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     backend_config: &BackendConfig,\n     hotswap: bool,\n ) -> (JITModule, CodegenCx<'tcx>) {\n-    let imported_symbols = load_imported_symbols_for_jit(tcx);\n+    let crate_info = CrateInfo::new(tcx, \"dummy_target_cpu\".to_string());\n+    let imported_symbols = load_imported_symbols_for_jit(tcx.sess, crate_info);\n \n     let isa = crate::build_isa(tcx.sess, backend_config);\n     let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n@@ -116,19 +155,14 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .chain(backend_config.jit_args.iter().map(|arg| &**arg))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n-    let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n-\n-    // Push a null pointer as a terminating argument. This is required by POSIX and\n-    // useful as some dynamic linkers use it as a marker to jump over.\n-    argv.push(std::ptr::null());\n \n     let start_sig = Signature {\n         params: vec![\n             AbiParam::new(jit_module.target_config().pointer_type()),\n             AbiParam::new(jit_module.target_config().pointer_type()),\n         ],\n         returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n-        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+        call_conv: jit_module.target_config().default_call_conv,\n     };\n     let start_func_id = jit_module.declare_function(\"main\", Linkage::Import, &start_sig).unwrap();\n     let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n@@ -141,12 +175,51 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_start) };\n-    let ret = f(args.len() as c_int, argv.as_ptr());\n-    std::process::exit(ret);\n+\n+    let (tx, rx) = mpsc::channel();\n+    GLOBAL_MESSAGE_SENDER.set(Mutex::new(tx)).unwrap();\n+\n+    // Spawn the jitted runtime in a new thread so that this rustc thread can handle messages\n+    // (eg to lazily JIT further functions as required)\n+    std::thread::spawn(move || {\n+        let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+\n+        // Push a null pointer as a terminating argument. This is required by POSIX and\n+        // useful as some dynamic linkers use it as a marker to jump over.\n+        argv.push(std::ptr::null());\n+\n+        let ret = f(args.len() as c_int, argv.as_ptr());\n+        std::process::exit(ret);\n+    });\n+\n+    // Handle messages\n+    loop {\n+        match rx.recv().unwrap() {\n+            // lazy JIT compilation request - compile requested instance and return pointer to result\n+            UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx } => {\n+                tx.send(jit_fn(instance_ptr, trampoline_ptr))\n+                    .expect(\"jitted runtime hung up before response to lazy JIT request was sent\");\n+            }\n+        }\n+    }\n }\n \n #[no_mangle]\n-extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n+extern \"C\" fn __clif_jit_fn(\n+    instance_ptr: *const Instance<'static>,\n+    trampoline_ptr: *const u8,\n+) -> *const u8 {\n+    // send the JIT request to the rustc thread, with a channel for the response\n+    let (tx, rx) = mpsc::channel();\n+    UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx }\n+        .send()\n+        .expect(\"rustc thread hung up before lazy JIT request was sent\");\n+\n+    // block on JIT compilation result\n+    rx.recv().expect(\"rustc thread hung up before responding to sent lazy JIT request\")\n+}\n+\n+fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) -> *const u8 {\n     rustc_middle::ty::tls::with(|tcx| {\n         // lift is used to ensure the correct lifetime for instance.\n         let instance = tcx.lift(unsafe { *instance_ptr }).unwrap();\n@@ -160,6 +233,17 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n             let name = tcx.symbol_name(instance).name;\n             let sig = crate::abi::get_function_sig(tcx, jit_module.isa().triple(), instance);\n             let func_id = jit_module.declare_function(name, Linkage::Export, &sig).unwrap();\n+\n+            let current_ptr = jit_module.read_got_entry(func_id);\n+\n+            // If the function's GOT entry has already been updated to point at something other\n+            // than the shim trampoline, don't re-jit but just return the new pointer instead.\n+            // This does not need synchronization as this code is executed only by a sole rustc\n+            // thread.\n+            if current_ptr != trampoline_ptr {\n+                return current_ptr;\n+            }\n+\n             jit_module.prepare_for_function_redefine(func_id).unwrap();\n \n             let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module.isa(), false);\n@@ -173,14 +257,16 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n     })\n }\n \n-fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n+fn load_imported_symbols_for_jit(\n+    sess: &Session,\n+    crate_info: CrateInfo,\n+) -> Vec<(String, *const u8)> {\n     use rustc_middle::middle::dependency_format::Linkage;\n \n     let mut dylib_paths = Vec::new();\n \n-    let crate_info = CrateInfo::new(tcx, \"dummy_target_cpu\".to_string());\n-    let formats = tcx.dependency_formats(());\n-    let data = &formats\n+    let data = &crate_info\n+        .dependency_formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)\n         .unwrap()\n@@ -190,9 +276,8 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         match data[cnum.as_usize() - 1] {\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                let name = tcx.crate_name(cnum);\n-                let mut err =\n-                    tcx.sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                let name = &crate_info.crate_name[&cnum];\n+                let mut err = sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n                 err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n                 err.emit();\n             }\n@@ -232,7 +317,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         std::mem::forget(lib)\n     }\n \n-    tcx.sess.abort_if_errors();\n+    sess.abort_if_errors();\n \n     imported_symbols\n }\n@@ -254,7 +339,7 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n             Linkage::Import,\n             &Signature {\n                 call_conv: module.target_config().default_call_conv,\n-                params: vec![AbiParam::new(pointer_type)],\n+                params: vec![AbiParam::new(pointer_type), AbiParam::new(pointer_type)],\n                 returns: vec![AbiParam::new(pointer_type)],\n             },\n         )\n@@ -267,6 +352,7 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n     let mut builder_ctx = FunctionBuilderContext::new();\n     let mut trampoline_builder = FunctionBuilder::new(trampoline, &mut builder_ctx);\n \n+    let trampoline_fn = module.declare_func_in_func(func_id, trampoline_builder.func);\n     let jit_fn = module.declare_func_in_func(jit_fn, trampoline_builder.func);\n     let sig_ref = trampoline_builder.func.import_signature(sig);\n \n@@ -276,7 +362,8 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n \n     trampoline_builder.switch_to_block(entry_block);\n     let instance_ptr = trampoline_builder.ins().iconst(pointer_type, instance_ptr as u64 as i64);\n-    let jitted_fn = trampoline_builder.ins().call(jit_fn, &[instance_ptr]);\n+    let trampoline_ptr = trampoline_builder.ins().func_addr(pointer_type, trampoline_fn);\n+    let jitted_fn = trampoline_builder.ins().call(jit_fn, &[instance_ptr, trampoline_ptr]);\n     let jitted_fn = trampoline_builder.func.dfg.inst_results(jitted_fn)[0];\n     let call_inst = trampoline_builder.ins().call_indirect(sig_ref, jitted_fn, &fn_args);\n     let ret_vals = trampoline_builder.func.dfg.inst_results(call_inst).to_vec();"}, {"sha": "be3704ca2768e0377a579c8206adf25c8d499fa6", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -106,6 +106,26 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n             let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n             dest.write_cvalue(fx, a);\n         };\n+        \"llvm.x86.addcarry.64\", (v c_in, c a, c b) {\n+            llvm_add_sub(\n+                fx,\n+                BinOp::Add,\n+                ret,\n+                c_in,\n+                a,\n+                b\n+            );\n+        };\n+        \"llvm.x86.subborrow.64\", (v b_in, c a, c b) {\n+            llvm_add_sub(\n+                fx,\n+                BinOp::Sub,\n+                ret,\n+                b_in,\n+                a,\n+                b\n+            );\n+        };\n     }\n \n     if let Some((_, dest)) = destination {\n@@ -121,3 +141,41 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n // llvm.x86.avx2.pshuf.b\n // llvm.x86.avx2.psrli.w\n // llvm.x86.sse2.psrli.w\n+\n+fn llvm_add_sub<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    bin_op: BinOp,\n+    ret: CPlace<'tcx>,\n+    cb_in: Value,\n+    a: CValue<'tcx>,\n+    b: CValue<'tcx>,\n+) {\n+    assert_eq!(\n+        a.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\"\n+    );\n+    assert_eq!(\n+        b.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\"\n+    );\n+\n+    // c + carry -> c + first intermediate carry or borrow respectively\n+    let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n+    let c = int0.value_field(fx, mir::Field::new(0));\n+    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+\n+    // c + carry -> c + second intermediate carry or borrow respectively\n+    let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);\n+    let cb_in_as_u64 = CValue::by_val(cb_in_as_u64, fx.layout_of(fx.tcx.types.u64));\n+    let int1 = crate::num::codegen_checked_int_binop(fx, bin_op, c, cb_in_as_u64);\n+    let (c, cb1) = int1.load_scalar_pair(fx);\n+\n+    // carry0 | carry1 -> carry or borrow respectively\n+    let cb_out = fx.bcx.ins().bor(cb0, cb1);\n+\n+    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let val = CValue::by_val_pair(cb_out, c, layout);\n+    ret.write_cvalue(fx, val);\n+}"}, {"sha": "cb1cb3c74dbb5981317ceb4b7e677516d98ceb43", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, decl_macro, never_type, hash_drain_filter, vec_into_raw_parts)]\n+#![feature(rustc_private, decl_macro, never_type, hash_drain_filter, vec_into_raw_parts, once_cell)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n@@ -14,7 +14,9 @@ extern crate rustc_fs_util;\n extern crate rustc_hir;\n extern crate rustc_incremental;\n extern crate rustc_index;\n+extern crate rustc_interface;\n extern crate rustc_metadata;\n+extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n@@ -284,10 +286,12 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n         }\n         None => {\n             let mut builder =\n-                cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n-            // Don't use \"haswell\" as the default, as it implies `has_lzcnt`.\n-            // macOS CI is still at Ivy Bridge EP, so `lzcnt` is interpreted as `bsr`.\n-            builder.enable(\"nehalem\").unwrap();\n+                cranelift_codegen::isa::lookup_variant(target_triple.clone(), variant).unwrap();\n+            if target_triple.architecture == target_lexicon::Architecture::X86_64 {\n+                // Don't use \"haswell\" as the default, as it implies `has_lzcnt`.\n+                // macOS CI is still at Ivy Bridge EP, so `lzcnt` is interpreted as `bsr`.\n+                builder.enable(\"nehalem\").unwrap();\n+            }\n             builder\n         }\n     };"}, {"sha": "61033d85a12740a827d1f443c7e76e567dfd54e9", "filename": "compiler/rustc_codegen_cranelift/src/optimize/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fmod.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,17 +1,20 @@\n //! Various optimizations specific to cg_clif\n \n+use cranelift_codegen::isa::TargetIsa;\n+\n use crate::prelude::*;\n \n pub(crate) mod peephole;\n \n pub(crate) fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    isa: &dyn TargetIsa,\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     // FIXME classify optimizations over opt levels once we have more\n \n-    crate::pretty_clif::write_clif_file(tcx, \"preopt\", None, instance, &ctx, &*clif_comments);\n+    crate::pretty_clif::write_clif_file(tcx, \"preopt\", isa, instance, &ctx, &*clif_comments);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);\n }"}, {"sha": "05db74745a1c0583bb5598e885ac04e8eda37c64", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -233,7 +233,7 @@ pub(crate) fn write_ir_file(\n pub(crate) fn write_clif_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     postfix: &str,\n-    isa: Option<&dyn cranelift_codegen::isa::TargetIsa>,\n+    isa: &dyn cranelift_codegen::isa::TargetIsa,\n     instance: Instance<'tcx>,\n     context: &cranelift_codegen::Context,\n     mut clif_comments: &CommentWriter,\n@@ -242,22 +242,23 @@ pub(crate) fn write_clif_file<'tcx>(\n         tcx,\n         || format!(\"{}.{}.clif\", tcx.symbol_name(instance).name, postfix),\n         |file| {\n-            let value_ranges = isa\n-                .map(|isa| context.build_value_labels_ranges(isa).expect(\"value location ranges\"));\n-\n             let mut clif = String::new();\n             cranelift_codegen::write::decorate_function(\n                 &mut clif_comments,\n                 &mut clif,\n                 &context.func,\n-                &DisplayFunctionAnnotations { isa, value_ranges: value_ranges.as_ref() },\n+                &DisplayFunctionAnnotations { isa: Some(isa), value_ranges: None },\n             )\n             .unwrap();\n \n-            writeln!(file, \"test compile\")?;\n-            writeln!(file, \"set is_pic\")?;\n-            writeln!(file, \"set enable_simd\")?;\n-            writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n+            for flag in isa.flags().iter() {\n+                writeln!(file, \"set {}\", flag)?;\n+            }\n+            write!(file, \"target {}\", isa.triple().architecture.to_string())?;\n+            for isa_flag in isa.isa_flags().iter() {\n+                write!(file, \" {}\", isa_flag)?;\n+            }\n+            writeln!(file, \"\\n\")?;\n             writeln!(file)?;\n             file.write_all(clif.as_bytes())?;\n             Ok(())"}, {"sha": "4a5f9f133a2bbc8e2168fd4668036fb46f3d091f", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,10 +1,9 @@\n //! Codegen vtables and vtable accesses.\n //!\n //! See `rustc_codegen_ssa/src/meth.rs` for reference.\n-// FIXME dedup this logic between miri, cg_llvm and cg_clif\n \n+use crate::constant::data_id_for_alloc_id;\n use crate::prelude::*;\n-use super::constant::pointer_for_allocation;\n \n fn vtable_memflags() -> MemFlags {\n     let mut flags = MemFlags::trusted(); // A vtable access is always aligned and will never trap.\n@@ -38,7 +37,7 @@ pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -\n         pointer_ty(fx.tcx),\n         vtable_memflags(),\n         vtable,\n-        (ty::COMMON_VTABLE_ENTRIES_SIZE * usize_size) as i32,\n+        (ty::COMMON_VTABLE_ENTRIES_ALIGN * usize_size) as i32,\n     )\n }\n \n@@ -69,16 +68,12 @@ pub(crate) fn get_vtable<'tcx>(\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n-    let vtable_ptr = if let Some(vtable_ptr) = fx.vtables.get(&(ty, trait_ref)) {\n-        *vtable_ptr\n-    } else {\n-        let vtable_alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n-        let vtable_allocation = fx.tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n-        let vtable_ptr = pointer_for_allocation(fx, vtable_allocation);\n-\n-        fx.vtables.insert((ty, trait_ref), vtable_ptr);\n-        vtable_ptr\n-    };\n-\n-    vtable_ptr.get_addr(fx)\n+    let alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n+    let data_id =\n+        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, Mutability::Not);\n+    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(local_data_id, format!(\"vtable: {:?}\", alloc_id));\n+    }\n+    fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n }"}, {"sha": "a10924628bb0eba9350b56f5603ead5b068b75f4", "filename": "compiler/rustc_codegen_cranelift/test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Ftest.sh?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1,13 +1,13 @@\n #!/usr/bin/env bash\n set -e\n \n-./build.sh --sysroot none \"$@\"\n+./y.rs build --sysroot none \"$@\"\n \n rm -r target/out || true\n \n scripts/tests.sh no_sysroot\n \n-./build.sh \"$@\"\n+./y.rs build \"$@\"\n \n scripts/tests.sh base_sysroot\n scripts/tests.sh extended_sysroot"}, {"sha": "43937588b481da1005f68642316a3b2e3fa62c4c", "filename": "compiler/rustc_codegen_cranelift/y.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_codegen_cranelift%2Fy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fy.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env bash\n+#![allow()] /*This line is ignored by bash\n+# This block is ignored by rustc\n+set -e\n+echo \"[BUILD] y.rs\" 1>&2\n+rustc $0 -o ${0/.rs/.bin} -g\n+exec ${0/.rs/.bin} $@\n+*/\n+\n+//! The build system for cg_clif\n+//!\n+//! # Manual compilation\n+//!\n+//! If your system doesn't support shell scripts you can manually compile and run this file using\n+//! for example:\n+//!\n+//! ```shell\n+//! $ rustc y.rs -o build/y.bin\n+//! $ build/y.bin\n+//! ```\n+//!\n+//! # Naming\n+//!\n+//! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n+\n+use std::env;\n+use std::path::PathBuf;\n+use std::process;\n+\n+#[path = \"build_system/build_backend.rs\"]\n+mod build_backend;\n+#[path = \"build_system/build_sysroot.rs\"]\n+mod build_sysroot;\n+#[path = \"build_system/config.rs\"]\n+mod config;\n+#[path = \"build_system/prepare.rs\"]\n+mod prepare;\n+#[path = \"build_system/rustc_info.rs\"]\n+mod rustc_info;\n+#[path = \"build_system/utils.rs\"]\n+mod utils;\n+\n+fn usage() {\n+    eprintln!(\"Usage:\");\n+    eprintln!(\"  ./y.rs prepare\");\n+    eprintln!(\"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\");\n+}\n+\n+macro_rules! arg_error {\n+    ($($err:tt)*) => {{\n+        eprintln!($($err)*);\n+        usage();\n+        std::process::exit(1);\n+    }};\n+}\n+\n+enum Command {\n+    Build,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum SysrootKind {\n+    None,\n+    Clif,\n+    Llvm,\n+}\n+\n+fn main() {\n+    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n+    env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n+    // The target dir is expected in the default location. Guard against the user changing it.\n+    env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n+\n+    let mut args = env::args().skip(1);\n+    let command = match args.next().as_deref() {\n+        Some(\"prepare\") => {\n+            if args.next().is_some() {\n+                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n+            }\n+            prepare::prepare();\n+            process::exit(0);\n+        }\n+        Some(\"build\") => Command::Build,\n+        Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n+        Some(command) => arg_error!(\"Unknown command {}\", command),\n+        None => {\n+            usage();\n+            process::exit(0);\n+        }\n+    };\n+\n+    let mut target_dir = PathBuf::from(\"build\");\n+    let mut channel = \"release\";\n+    let mut sysroot_kind = SysrootKind::Clif;\n+    while let Some(arg) = args.next().as_deref() {\n+        match arg {\n+            \"--target-dir\" => {\n+                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--target-dir requires argument\");\n+                }))\n+            }\n+            \"--debug\" => channel = \"debug\",\n+            \"--sysroot\" => {\n+                sysroot_kind = match args.next().as_deref() {\n+                    Some(\"none\") => SysrootKind::None,\n+                    Some(\"clif\") => SysrootKind::Clif,\n+                    Some(\"llvm\") => SysrootKind::Llvm,\n+                    Some(arg) => arg_error!(\"Unknown sysroot kind {}\", arg),\n+                    None => arg_error!(\"--sysroot requires argument\"),\n+                }\n+            }\n+            flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n+            arg => arg_error!(\"Unexpected argument {}\", arg),\n+        }\n+    }\n+\n+    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n+        host_triple\n+    } else if let Some(host_triple) = crate::config::get_value(\"host\") {\n+        host_triple\n+    } else {\n+        rustc_info::get_host_triple()\n+    };\n+    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n+        if target_triple != \"\" {\n+            target_triple\n+        } else {\n+            host_triple.clone() // Empty target triple can happen on GHA\n+        }\n+    } else if let Some(target_triple) = crate::config::get_value(\"target\") {\n+        target_triple\n+    } else {\n+        host_triple.clone()\n+    };\n+\n+    if target_triple.ends_with(\"-msvc\") {\n+        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n+        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n+        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n+        eprintln!(\"set the global default target to MinGW\");\n+        process::exit(1);\n+    }\n+\n+    let cg_clif_build_dir = build_backend::build_backend(channel, &host_triple);\n+    build_sysroot::build_sysroot(\n+        channel,\n+        sysroot_kind,\n+        &target_dir,\n+        cg_clif_build_dir,\n+        &host_triple,\n+        &target_triple,\n+    );\n+}"}, {"sha": "c44df407f6b3ae5ef3c88bc1bada2f2b6f3921af", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -16,7 +16,7 @@\n \n use self::TargetLint::*;\n \n-use crate::levels::LintLevelsBuilder;\n+use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -129,6 +129,8 @@ pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n     NoLint(Option<Symbol>),\n+    /// The lint refers to a tool that has not been registered.\n+    NoTool,\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n@@ -321,9 +323,17 @@ impl LintStore {\n         }\n     }\n \n-    /// Checks the validity of lint names derived from the command line\n-    pub fn check_lint_name_cmdline(&self, sess: &Session, lint_name: &str, level: Level) {\n-        let db = match self.check_lint_name(lint_name, None) {\n+    /// Checks the validity of lint names derived from the command line.\n+    pub fn check_lint_name_cmdline(\n+        &self,\n+        sess: &Session,\n+        lint_name: &str,\n+        level: Level,\n+        crate_attrs: &[ast::Attribute],\n+    ) {\n+        let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n+\n+        let db = match self.check_lint_name(sess, lint_name_only, tool_name, crate_attrs) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n@@ -345,6 +355,13 @@ impl LintStore {\n                 ))),\n                 _ => None,\n             },\n+            CheckLintNameResult::NoTool => Some(struct_span_err!(\n+                sess,\n+                DUMMY_SP,\n+                E0602,\n+                \"unknown lint tool: `{}`\",\n+                tool_name.unwrap()\n+            )),\n         };\n \n         if let Some(mut db) = db {\n@@ -387,9 +404,17 @@ impl LintStore {\n     /// printing duplicate warnings.\n     pub fn check_lint_name(\n         &self,\n+        sess: &Session,\n         lint_name: &str,\n         tool_name: Option<Symbol>,\n+        crate_attrs: &[ast::Attribute],\n     ) -> CheckLintNameResult<'_> {\n+        if let Some(tool_name) = tool_name {\n+            if !is_known_lint_tool(tool_name, sess, crate_attrs) {\n+                return CheckLintNameResult::NoTool;\n+            }\n+        }\n+\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)\n         } else {\n@@ -1005,3 +1030,14 @@ impl<'tcx> LayoutOf for LateContext<'tcx> {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n }\n+\n+pub fn parse_lint_and_tool_name(lint_name: &str) -> (Option<Symbol>, &str) {\n+    match lint_name.split_once(\"::\") {\n+        Some((tool_name, lint_name)) => {\n+            let tool_name = Symbol::intern(tool_name);\n+\n+            (Some(tool_name), lint_name)\n+        }\n+        None => (None, lint_name),\n+    }\n+}"}, {"sha": "bc6956f57978311e02de9344d56f3a9bc404533e", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -89,7 +89,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level);\n+            store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n             let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n@@ -111,7 +111,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         for lint_name in &sess.opts.force_warns {\n-            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn);\n+            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn, self.crate_attrs);\n             let lints = store\n                 .find_lints(lint_name)\n                 .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n@@ -322,33 +322,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                         continue;\n                     }\n                 };\n-                let tool_name = if meta_item.path.segments.len() > 1 {\n-                    let tool_ident = meta_item.path.segments[0].ident;\n-                    if !is_known_lint_tool(tool_ident.name, sess, &self.crate_attrs) {\n-                        let mut err = struct_span_err!(\n-                            sess,\n-                            tool_ident.span,\n-                            E0710,\n-                            \"unknown tool name `{}` found in scoped lint: `{}`\",\n-                            tool_ident.name,\n-                            pprust::path_to_string(&meta_item.path),\n-                        );\n-                        if sess.is_nightly_build() {\n-                            err.help(&format!(\n-                                \"add `#![register_tool({})]` to the crate root\",\n-                                tool_ident.name\n-                            ));\n-                        }\n-                        err.emit();\n-                        continue;\n-                    }\n-\n-                    Some(meta_item.path.segments.remove(0).ident.name)\n+                let tool_ident = if meta_item.path.segments.len() > 1 {\n+                    Some(meta_item.path.segments.remove(0).ident)\n                 } else {\n                     None\n                 };\n+                let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n-                let lint_result = store.check_lint_name(&name, tool_name);\n+                let lint_result = store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -365,7 +346,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::Tool(result) => {\n                         match *result {\n                             Ok(ids) => {\n-                                let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                                let complete_name =\n+                                    &format!(\"{}::{}\", tool_ident.unwrap().name, name);\n                                 let src = LintLevelSource::Node(\n                                     Symbol::intern(complete_name),\n                                     sp,\n@@ -420,6 +402,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                     }\n \n+                    &CheckLintNameResult::NoTool => {\n+                        let mut err = struct_span_err!(\n+                            sess,\n+                            tool_ident.map_or(DUMMY_SP, |ident| ident.span),\n+                            E0710,\n+                            \"unknown tool name `{}` found in scoped lint: `{}::{}`\",\n+                            tool_name.unwrap(),\n+                            tool_name.unwrap(),\n+                            pprust::path_to_string(&meta_item.path),\n+                        );\n+                        if sess.is_nightly_build() {\n+                            err.help(&format!(\n+                                \"add `#![register_tool({})]` to the crate root\",\n+                                tool_name.unwrap()\n+                            ));\n+                        }\n+                        err.emit();\n+                        continue;\n+                    }\n+\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n@@ -451,8 +453,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                         let (level, src) =\n                             self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n-                            let name = if let Some(tool_name) = tool_name {\n-                                format!(\"{}::{}\", tool_name, name)\n+                            let name = if let Some(tool_ident) = tool_ident {\n+                                format!(\"{}::{}\", tool_ident.name, name)\n                             } else {\n                                 name.to_string()\n                             };\n@@ -475,7 +477,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                 if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {\n                     // Ignore any errors or warnings that happen because the new name is inaccurate\n                     // NOTE: `new_name` already includes the tool name, so we don't have to add it again.\n-                    if let CheckLintNameResult::Ok(ids) = store.check_lint_name(&new_name, None) {\n+                    if let CheckLintNameResult::Ok(ids) =\n+                        store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n+                    {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n@@ -578,7 +582,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n-fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n     if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n         return true;\n     }"}, {"sha": "28b60603a2dbb36a2a25d7d3c728cd08aca15783", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -497,3 +497,6 @@ fn register_internals(store: &mut LintStore) {\n         ],\n     );\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "a50c88aa0f736df4ff5e0d67d251e63ffd0319b3", "filename": "compiler/rustc_lint/src/tests.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftests.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,24 @@\n+use crate::context::parse_lint_and_tool_name;\n+use rustc_span::{with_default_session_globals, Symbol};\n+\n+#[test]\n+fn parse_lint_no_tool() {\n+    with_default_session_globals(|| assert_eq!(parse_lint_and_tool_name(\"foo\"), (None, \"foo\")));\n+}\n+\n+#[test]\n+fn parse_lint_with_tool() {\n+    with_default_session_globals(|| {\n+        assert_eq!(parse_lint_and_tool_name(\"clippy::foo\"), (Some(Symbol::intern(\"clippy\")), \"foo\"))\n+    });\n+}\n+\n+#[test]\n+fn parse_lint_multiple_path() {\n+    with_default_session_globals(|| {\n+        assert_eq!(\n+            parse_lint_and_tool_name(\"clippy::foo::bar\"),\n+            (Some(Symbol::intern(\"clippy\")), \"foo::bar\")\n+        )\n+    });\n+}"}, {"sha": "2ce63d011f438b07467fa8726c55e02610e55e90", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -1791,7 +1791,13 @@ impl<'a> Parser<'a> {\n                     if self.check_keyword(kw::Pub) {\n                         let sp = sp_start.to(self.prev_token.span);\n                         if let Ok(snippet) = self.span_to_snippet(sp) {\n-                            let vis = self.parse_visibility(FollowedByType::No)?;\n+                            let vis = match self.parse_visibility(FollowedByType::No) {\n+                                Ok(v) => v,\n+                                Err(mut d) => {\n+                                    d.cancel();\n+                                    return Err(err);\n+                                }\n+                            };\n                             let vs = pprust::vis_to_string(&vis);\n                             let vs = vs.trim_end();\n                             err.span_suggestion("}, {"sha": "1fbf01b1b97d55ad5b3e300a2f1498d2fd7c3791", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -393,7 +393,7 @@ impl<'a> Parser<'a> {\n         let and_span = self.prev_token.span;\n         let mut opt_lifetime =\n             if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n-        let mutbl = self.parse_mutability();\n+        let mut mutbl = self.parse_mutability();\n         if self.token.is_lifetime() && mutbl == Mutability::Mut && opt_lifetime.is_none() {\n             // A lifetime is invalid here: it would be part of a bare trait bound, which requires\n             // it to be followed by a plus, but we disallow plus in the pointee type.\n@@ -417,6 +417,26 @@ impl<'a> Parser<'a> {\n \n                 opt_lifetime = Some(self.expect_lifetime());\n             }\n+        } else if self.token.is_keyword(kw::Dyn)\n+            && mutbl == Mutability::Not\n+            && self.look_ahead(1, |t| t.is_keyword(kw::Mut))\n+        {\n+            // We have `&dyn mut ...`, which is invalid and should be `&mut dyn ...`.\n+            let span = and_span.to(self.look_ahead(1, |t| t.span));\n+            let mut err = self.struct_span_err(span, \"`mut` must precede `dyn`\");\n+            err.span_suggestion(\n+                span,\n+                \"place `mut` before `dyn`\",\n+                \"&mut dyn\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+            err.emit();\n+\n+            // Recovery\n+            mutbl = Mutability::Mut;\n+            let (dyn_tok, dyn_tok_sp) = (self.token.clone(), self.token_spacing);\n+            self.bump();\n+            self.bump_with((dyn_tok, dyn_tok_sp));\n         }\n         let ty = self.parse_ty_no_plus()?;\n         Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))"}, {"sha": "97bfe2f3984ea2559ebcceb37ae4367c7ad9f1c4", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -83,6 +83,7 @@ pub enum TryReserveError {\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n impl From<LayoutError> for TryReserveError {\n+    /// Always evaluates to [`TryReserveError::CapacityOverflow`].\n     #[inline]\n     fn from(_: LayoutError) -> Self {\n         TryReserveError::CapacityOverflow"}, {"sha": "8cb7aad28aa95e791ec479975f0fe6997c13cabf", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -2254,7 +2254,6 @@ pub trait Iterator {\n     /// // we can still use `iter`, as there are more elements.\n     /// assert_eq!(iter.next(), Some(&3));\n     /// ```\n-    #[doc(alias = \"every\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn all<F>(&mut self, f: F) -> bool"}, {"sha": "aa654aa5570ee3500e65becfee6767ba47efac47", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -11,7 +11,7 @@\n /// This destructor consists of two components:\n /// - A call to `Drop::drop` for that value, if this special `Drop` trait is implemented for its type.\n /// - The automatically generated \"drop glue\" which recursively calls the destructors\n-///     of the all fields of this value.\n+///     of all the fields of this value.\n ///\n /// As Rust automatically calls the destructors of all contained fields,\n /// you don't have to implement `Drop` in most cases. But there are some cases where"}, {"sha": "e4d6a3f587b0526eec7eb0b5cf824e0a6bf6b6e0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -742,7 +742,7 @@ impl Step for RustdocTheme {\n         let rustdoc = builder.out.join(\"bootstrap/debug/rustdoc\");\n         let mut cmd = builder.tool_cmd(Tool::RustdocTheme);\n         cmd.arg(rustdoc.to_str().unwrap())\n-            .arg(builder.src.join(\"src/librustdoc/html/static/themes\").to_str().unwrap())\n+            .arg(builder.src.join(\"src/librustdoc/html/static/css/themes\").to_str().unwrap())\n             .env(\"RUSTC_STAGE\", self.compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", builder.sysroot(self.compiler))\n             .env(\"RUSTDOC_LIBDIR\", builder.sysroot_libdir(self.compiler, self.compiler.host))"}, {"sha": "c27e42a266220a819684ddeed73be8598a3b1c74", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -40,5 +40,5 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            /scripts/validate-toolstate.sh && \\\n            /scripts/validate-error-codes.sh && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n-           es-check es5 ../src/librustdoc/html/static/*.js && \\\n-           eslint ../src/librustdoc/html/static/*.js\n+           es-check es5 ../src/librustdoc/html/static/js/*.js && \\\n+           eslint ../src/librustdoc/html/static/js/*.js"}, {"sha": "4cf647a81ae4b4f12e9f5089bf7d2ef881520f6d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -513,7 +513,7 @@ impl Options {\n                     ))\n                     .warn(\"the theme may appear incorrect when loaded\")\n                     .help(&format!(\n-                        \"to see what rules are missing, call `rustdoc  --check-theme \\\"{}\\\"`\",\n+                        \"to see what rules are missing, call `rustdoc --check-theme \\\"{}\\\"`\",\n                         theme_s\n                     ))\n                     .emit();"}, {"sha": "fdb8a8c652e590c3a98144ea680525c728f7519b", "filename": "src/librustdoc/html/static/css/normalize.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnormalize.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnormalize.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnormalize.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/normalize.css"}, {"sha": "0a196edd53b1dd063900a27a45a598e8e49be2f8", "filename": "src/librustdoc/html/static/css/noscript.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/noscript.css"}, {"sha": "71123aa9a0e44df00b849b7d232b0cf542ceb054", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/rustdoc.css"}, {"sha": "fb8990b30e2edc3803b3c839de85fd2f5f964a9f", "filename": "src/librustdoc/html/static/css/settings.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/settings.css"}, {"sha": "171d06c0a3667760806b4b0e16f35a02592d4ddb", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/themes/ayu.css"}, {"sha": "d9ea28058ad99372d1ca7967381849d24bc0ce3d", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/themes/dark.css"}, {"sha": "6785b79ffda9680d5e2c6c5be0091d51b5decd6c", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/themes/light.css"}, {"sha": "ff9afab064a281140f6971a6529c245a9a6ef7e3", "filename": "src/librustdoc/html/static/fonts/FiraSans-LICENSE.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-LICENSE.txt?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/FiraSans-LICENSE.txt"}, {"sha": "7d742c5fb7d4597ae140f8418f52ffe03dc75343", "filename": "src/librustdoc/html/static/fonts/FiraSans-Medium.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/FiraSans-Medium.woff"}, {"sha": "7a1e5fc548ef28137a32150b6aa50a568cd53d02", "filename": "src/librustdoc/html/static/fonts/FiraSans-Medium.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/FiraSans-Medium.woff2"}, {"sha": "d8e0363f4e1a000568d782653291e14c66ee3485", "filename": "src/librustdoc/html/static/fonts/FiraSans-Regular.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/FiraSans-Regular.woff"}, {"sha": "e766e06ccb0d457fcdc8d4428efb796c7772a497", "filename": "src/librustdoc/html/static/fonts/FiraSans-Regular.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/FiraSans-Regular.woff2"}, {"sha": "8d68f2febddb04dd6e768a4939d63eb7a1f4a139", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-It.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-It.ttf.woff"}, {"sha": "462c34efcd9d6b70b42359ca1a1d9476efe43eeb", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-It.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-It.ttf.woff2"}, {"sha": "07542572e33bdc15739d047cc3b72da24d71ccef", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-LICENSE.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-LICENSE.txt?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-LICENSE.txt"}, {"sha": "7be076e1fca99ac23aba68ccfb6e4b94b776b772", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Regular.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-Regular.ttf.woff"}, {"sha": "10b558e0b69a74b8329766fffbd5f64356c7230d", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Regular.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-Regular.ttf.woff2"}, {"sha": "61bc67b80252dc41fef75b08604adc1a09c34761", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Semibold.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-Semibold.ttf.woff"}, {"sha": "5ec64eef0ec9423bf81951f21ff4aa0392415e98", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Semibold.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceCodePro-Semibold.ttf.woff2"}, {"sha": "8ad41888e6e3f9f4439052ae6b14ece2cdfcd7cb", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Bold.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-Bold.ttf.woff"}, {"sha": "db57d21455c94e80aa7cca25cac803a08e1b01ec", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Bold.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-Bold.ttf.woff2"}, {"sha": "2a34b5c42a8aaca17a3c6a37a33489ab0cf2193f", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-It.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-It.ttf.woff"}, {"sha": "1cbc021a3aa22e1469542d531e9115fb78d497ec", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-It.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-It.ttf.woff2"}, {"sha": "68ea1892406cbcb50b001b99cd19b49d69a9c585", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-LICENSE.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-LICENSE.md"}, {"sha": "45a5521ab0c77a02ebf55a3f7305faccc02e2894", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Regular.ttf.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-Regular.ttf.woff"}, {"sha": "2db73fe2b49e8cfcaaf1d5311a610e730b8ed502", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Regular.ttf.woff2", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/SourceSerif4-Regular.ttf.woff2"}, {"sha": "922d5fdc18dc9666ee3238485185749242476562", "filename": "src/librustdoc/html/static/fonts/noto-sans-kr-v13-korean-regular-LICENSE.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/noto-sans-kr-v13-korean-regular-LICENSE.txt"}, {"sha": "01d6b6b54664c35f8180f7c245514d22751f9307", "filename": "src/librustdoc/html/static/fonts/noto-sans-kr-v13-korean-regular.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-v13-korean-regular.woff?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/noto-sans-kr-v13-korean-regular.woff"}, {"sha": "ea266e856a9d8126541b0839a21a54ead0f91561", "filename": "src/librustdoc/html/static/images/brush.svg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fbrush.svg", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fbrush.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fbrush.svg?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/brush.svg"}, {"sha": "8adbd99630488f9a325a99362aa59c9b235ac737", "filename": "src/librustdoc/html/static/images/clipboard.svg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fclipboard.svg", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fclipboard.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fclipboard.svg?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/clipboard.svg"}, {"sha": "35437e77a710cac4f1aec365dbfc38d478e3425f", "filename": "src/librustdoc/html/static/images/down-arrow.svg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/down-arrow.svg"}, {"sha": "7cfe6c13550d31bc31355616bbb9cb77fd1b25ef", "filename": "src/librustdoc/html/static/images/favicon-16x16.png", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-16x16.png", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-16x16.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-16x16.png?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/favicon-16x16.png"}, {"sha": "5109c1de8bea744180448b347fb44ddef23b90f4", "filename": "src/librustdoc/html/static/images/favicon-32x32.png", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-32x32.png", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-32x32.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon-32x32.png?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/favicon-32x32.png"}, {"sha": "8b34b511989e1d9f1a5f741b75d3b41698048455", "filename": "src/librustdoc/html/static/images/favicon.svg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon.svg", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ffavicon.svg?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/favicon.svg"}, {"sha": "74b4bd695045ebc52c21af95301adc9311ca881c", "filename": "src/librustdoc/html/static/images/rust-logo.png", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Frust-logo.png", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Frust-logo.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Frust-logo.png?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/rust-logo.png"}, {"sha": "01da3b24c7c4f3cba6ed2123a4a3ddfb2cb21a21", "filename": "src/librustdoc/html/static/images/wheel.svg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/wheel.svg"}, {"sha": "98128878999e4b36460ae92848dcf20e04107b67", "filename": "src/librustdoc/html/static/js/main.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/main.js"}, {"sha": "a7fc0b831f410f5a91ee7eadb37592d398166cb1", "filename": "src/librustdoc/html/static/js/search.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/search.js"}, {"sha": "4f10e14e8558c71cde4c5ef964d91ae90e03a796", "filename": "src/librustdoc/html/static/js/settings.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/settings.js"}, {"sha": "4d9a59f836b9e1b0d2604a95dbfe8883ac93111d", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/source-script.js"}, {"sha": "2eaa81a97d8c5e46f59d1441a4f0bae37eed007e", "filename": "src/librustdoc/html/static/js/storage.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "previous_filename": "src/librustdoc/html/static/storage.js"}, {"sha": "2ec7e66234ddd21061e8050b5ed6ca6bda77fc31", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -8,44 +8,44 @@\n //! directly written to a `Write` handle.\n \n /// The file contents of the main `rustdoc.css` file, responsible for the core layout of the page.\n-crate static RUSTDOC_CSS: &str = include_str!(\"static/rustdoc.css\");\n+crate static RUSTDOC_CSS: &str = include_str!(\"static/css/rustdoc.css\");\n \n /// The file contents of `settings.css`, responsible for the items on the settings page.\n-crate static SETTINGS_CSS: &str = include_str!(\"static/settings.css\");\n+crate static SETTINGS_CSS: &str = include_str!(\"static/css/settings.css\");\n \n /// The file contents of the `noscript.css` file, used in case JS isn't supported or is disabled.\n-crate static NOSCRIPT_CSS: &str = include_str!(\"static/noscript.css\");\n+crate static NOSCRIPT_CSS: &str = include_str!(\"static/css/noscript.css\");\n \n /// The file contents of `normalize.css`, included to even out standard elements between browser\n /// implementations.\n-crate static NORMALIZE_CSS: &str = include_str!(\"static/normalize.css\");\n+crate static NORMALIZE_CSS: &str = include_str!(\"static/css/normalize.css\");\n \n /// The file contents of `main.js`, which contains the core JavaScript used on documentation pages,\n /// including search behavior and docblock folding, among others.\n-crate static MAIN_JS: &str = include_str!(\"static/main.js\");\n+crate static MAIN_JS: &str = include_str!(\"static/js/main.js\");\n \n /// The file contents of `search.js`, which contains the search behavior.\n-crate static SEARCH_JS: &str = include_str!(\"static/search.js\");\n+crate static SEARCH_JS: &str = include_str!(\"static/js/search.js\");\n \n /// The file contents of `settings.js`, which contains the JavaScript used to handle the settings\n /// page.\n-crate static SETTINGS_JS: &str = include_str!(\"static/settings.js\");\n+crate static SETTINGS_JS: &str = include_str!(\"static/js/settings.js\");\n \n /// The file contents of `storage.js`, which contains functionality related to browser Local\n /// Storage, used to store documentation settings.\n-crate static STORAGE_JS: &str = include_str!(\"static/storage.js\");\n+crate static STORAGE_JS: &str = include_str!(\"static/js/storage.js\");\n \n /// The file contents of `brush.svg`, the icon used for the theme-switch button.\n-crate static BRUSH_SVG: &[u8] = include_bytes!(\"static/brush.svg\");\n+crate static BRUSH_SVG: &[u8] = include_bytes!(\"static/images/brush.svg\");\n \n /// The file contents of `wheel.svg`, the icon used for the settings button.\n-crate static WHEEL_SVG: &[u8] = include_bytes!(\"static/wheel.svg\");\n+crate static WHEEL_SVG: &[u8] = include_bytes!(\"static/images/wheel.svg\");\n \n /// The file contents of `clipboard.svg`, the icon used for the \"copy path\" button.\n-crate static CLIPBOARD_SVG: &[u8] = include_bytes!(\"static/clipboard.svg\");\n+crate static CLIPBOARD_SVG: &[u8] = include_bytes!(\"static/images/clipboard.svg\");\n \n /// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n-crate static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/down-arrow.svg\");\n+crate static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/images/down-arrow.svg\");\n \n /// The contents of `COPYRIGHT.txt`, the license listing for files distributed with documentation\n /// output.\n@@ -58,113 +58,114 @@ crate static LICENSE_APACHE: &[u8] = include_bytes!(\"static/LICENSE-APACHE.txt\")\n crate static LICENSE_MIT: &[u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n \n /// The contents of `rust-logo.png`, the default icon of the documentation.\n-crate static RUST_LOGO: &[u8] = include_bytes!(\"static/rust-logo.png\");\n+crate static RUST_LOGO: &[u8] = include_bytes!(\"static/images/rust-logo.png\");\n /// The default documentation favicons (SVG and PNG fallbacks)\n-crate static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/favicon.svg\");\n-crate static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/favicon-16x16.png\");\n-crate static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/favicon-32x32.png\");\n+crate static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/images/favicon.svg\");\n+crate static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/images/favicon-16x16.png\");\n+crate static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/images/favicon-32x32.png\");\n \n crate static PAGE: &str = include_str!(\"templates/page.html\");\n \n /// The built-in themes given to every documentation site.\n crate mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for\n     /// the `--check-theme` functionality.\n-    crate static LIGHT: &str = include_str!(\"static/themes/light.css\");\n+    crate static LIGHT: &str = include_str!(\"static/css/themes/light.css\");\n \n     /// The \"dark\" theme.\n-    crate static DARK: &str = include_str!(\"static/themes/dark.css\");\n+    crate static DARK: &str = include_str!(\"static/css/themes/dark.css\");\n \n     /// The \"ayu\" theme.\n-    crate static AYU: &str = include_str!(\"static/themes/ayu.css\");\n+    crate static AYU: &str = include_str!(\"static/css/themes/ayu.css\");\n }\n \n /// Files related to the Fira Sans font.\n crate mod fira_sans {\n     /// The file `FiraSans-Regular.woff`, the Regular variant of the Fira Sans font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/FiraSans-Regular.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff\");\n \n     /// The file `FiraSans-Regular.woff2`, the Regular variant of the Fira Sans font in woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/FiraSans-Regular.woff2\");\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff2\");\n \n     /// The file `FiraSans-Medium.woff`, the Medium variant of the Fira Sans font.\n-    crate static MEDIUM: &[u8] = include_bytes!(\"static/FiraSans-Medium.woff\");\n+    crate static MEDIUM: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff\");\n \n     /// The file `FiraSans-Medium.woff2`, the Medium variant of the Fira Sans font in woff2.\n-    crate static MEDIUM2: &[u8] = include_bytes!(\"static/FiraSans-Medium.woff2\");\n+    crate static MEDIUM2: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff2\");\n \n     /// The file `FiraSans-LICENSE.txt`, the license text for the Fira Sans font.\n-    crate static LICENSE: &[u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/FiraSans-LICENSE.txt\");\n }\n \n /// Files related to the Source Serif 4 font.\n crate mod source_serif_4 {\n     /// The file `SourceSerif4-Regular.ttf.woff`, the Regular variant of the Source Serif 4 font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff\");\n \n     /// The file `SourceSerif4-Regular.ttf.woff2`, the Regular variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff2\");\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff2\");\n \n     /// The file `SourceSerif4-Bold.ttf.woff`, the Bold variant of the Source Serif 4 font.\n-    crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff\");\n+    crate static BOLD: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff\");\n \n     /// The file `SourceSerif4-Bold.ttf.woff2`, the Bold variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static BOLD2: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff2\");\n+    crate static BOLD2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff2\");\n \n     /// The file `SourceSerif4-It.ttf.woff`, the Italic variant of the Source Serif 4 font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff\");\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff\");\n \n     /// The file `SourceSerif4-It.ttf.woff2`, the Italic variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static ITALIC2: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff2\");\n+    crate static ITALIC2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff2\");\n \n     /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n-    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerif4-LICENSE.md\");\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font.\n crate mod source_code_pro {\n     /// The file `SourceCodePro-Regular.ttf.woff`, the Regular variant of the Source Code Pro font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff\");\n \n     /// The file `SourceCodePro-Regular.ttf.woff2`, the Regular variant of the Source Code Pro font\n     /// in woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff2\");\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff2\");\n \n     /// The file `SourceCodePro-Semibold.ttf.woff`, the Semibold variant of the Source Code Pro\n     /// font.\n-    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff\");\n+    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff\");\n \n     /// The file `SourceCodePro-Semibold.ttf.woff2`, the Semibold variant of the Source Code Pro\n     /// font in woff2.\n-    crate static SEMIBOLD2: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff2\");\n+    crate static SEMIBOLD2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff2\");\n \n     /// The file `SourceCodePro-It.ttf.woff`, the Italic variant of the Source Code Pro font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff\");\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff\");\n \n     /// The file `SourceCodePro-It.ttf.woff2`, the Italic variant of the Source Code Pro font in\n     /// woff2.\n-    crate static ITALIC2: &[u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff2\");\n+    crate static ITALIC2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff2\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-LICENSE.txt\");\n }\n \n crate mod noto_sans_kr {\n     /// The file `noto-sans-kr-v13-korean-regular.woff`, the Regular variant of the Noto Sans KR\n     /// font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/noto-sans-kr-v13-korean-regular.woff\");\n+    crate static REGULAR: &[u8] =\n+        include_bytes!(\"static/fonts/noto-sans-kr-v13-korean-regular.woff\");\n \n     /// The file `noto-sans-kr-v13-korean-regular-LICENSE.txt`, the license text of the Noto Sans KR\n     /// font.\n     crate static LICENSE: &[u8] =\n-        include_bytes!(\"static/noto-sans-kr-v13-korean-regular-LICENSE.txt\");\n+        include_bytes!(\"static/fonts/noto-sans-kr-v13-korean-regular-LICENSE.txt\");\n }\n \n /// Files related to the sidebar in rustdoc sources.\n crate mod sidebar {\n     /// File script to handle sidebar.\n-    crate static SOURCE_SCRIPT: &str = include_str!(\"static/source-script.js\");\n+    crate static SOURCE_SCRIPT: &str = include_str!(\"static/js/source-script.js\");\n }"}, {"sha": "4968ffd5a27a7b27a13a050f4784e8c5a589b575", "filename": "src/librustdoc/theme/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme%2Ftests.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -105,7 +105,7 @@ fn check_invalid_css() {\n \n #[test]\n fn test_with_minification() {\n-    let text = include_str!(\"../html/static/themes/dark.css\");\n+    let text = include_str!(\"../html/static/css/themes/dark.css\");\n     let minified = minifier::css::minify(&text).expect(\"CSS minification failed\");\n \n     let against = load_css_paths(text.as_bytes());"}, {"sha": "f3d07b25c47f84f309dc13d6ff724585f00d9ebc", "filename": "src/test/run-make-fulldeps/rustdoc-themes/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -5,6 +5,6 @@\n OUTPUT_DIR := \"$(TMPDIR)/rustdoc-themes\"\n \n all:\n-\tcp $(S)/src/librustdoc/html/static/themes/light.css $(TMPDIR)/test.css\n+\tcp $(S)/src/librustdoc/html/static/css/themes/light.css $(TMPDIR)/test.css\n \t$(RUSTDOC) -o $(OUTPUT_DIR) foo.rs --theme $(TMPDIR)/test.css\n \t$(HTMLDOCCK) $(OUTPUT_DIR) foo.rs"}, {"sha": "d6e95fd3ec40307f9295c9a73e4a6f2af49aa669", "filename": "src/test/ui/lint/command-line-register-lint-tool.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -A known_tool::foo\n+// check-pass\n+\n+#![feature(register_tool)]\n+#![register_tool(known_tool)]\n+\n+fn main() {}"}, {"sha": "59fc02000950762801f3f530e91e559a52b12552", "filename": "src/test/ui/lint/command-line-register-unknown-lint-tool.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -A unknown_tool::foo\n+// error-pattern: unknown lint tool: `unknown_tool`\n+\n+fn main() {}"}, {"sha": "c9a2aff2137a72310c98f37b08e3d937eea5b0a2", "filename": "src/test/ui/lint/command-line-register-unknown-lint-tool.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,11 @@\n+error[E0602]: unknown lint tool: `unknown_tool`\n+   |\n+   = note: requested on the command line with `-A unknown_tool::foo`\n+\n+error[E0602]: unknown lint tool: `unknown_tool`\n+   |\n+   = note: requested on the command line with `-A unknown_tool::foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0602`."}, {"sha": "4cd09843107dd8c6066bab733f46ffb1fdfce276", "filename": "src/test/ui/parser/issue-86895.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Fissue-86895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Fissue-86895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-86895.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,3 @@\n+const pub () {}\n+//~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`\n+pub fn main() {}"}, {"sha": "575d857c0ed4f441f2d9bf2a2f70d92510780888", "filename": "src/test/ui/parser/issue-86895.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Fissue-86895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Fissue-86895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-86895.stderr?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-86895.rs:1:7\n+   |\n+LL | const pub () {}\n+   |       ^^^ expected one of `async`, `extern`, `fn`, or `unsafe`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3016275cc0fd2933bb4000bd4094843af1b6c856", "filename": "src/test/ui/parser/recover-ref-dyn-mut.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,9 @@\n+// Test that the parser detects `&dyn mut`, offers a help message, and\n+// recovers.\n+\n+fn main() {\n+    let r: &dyn mut Trait;\n+    //~^ ERROR: `mut` must precede `dyn`\n+    //~| HELP: place `mut` before `dyn`\n+    //~| ERROR: cannot find trait `Trait` in this scope [E0405]\n+}"}, {"sha": "c048c8ea1b0dd581841bc37d1bd40082eab2e8f5", "filename": "src/test/ui/parser/recover-ref-dyn-mut.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-ref-dyn-mut.stderr?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -0,0 +1,15 @@\n+error: `mut` must precede `dyn`\n+  --> $DIR/recover-ref-dyn-mut.rs:5:12\n+   |\n+LL |     let r: &dyn mut Trait;\n+   |            ^^^^^^^^ help: place `mut` before `dyn`: `&mut dyn`\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/recover-ref-dyn-mut.rs:5:21\n+   |\n+LL |     let r: &dyn mut Trait;\n+   |                     ^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "799d685ce5ca1844e698cd49f4d0726a93da3dd1", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2", "patch": "@@ -254,6 +254,7 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"libloading\",\n     \"log\",\n     \"mach\",\n+    \"memchr\",\n     \"object\",\n     \"regalloc\",\n     \"region\","}]}