{"sha": "2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzRmMGVkODhiYzFhMDZlMDIyMzA2MTliMThlN2JjOGJiNjczZmM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T12:17:02Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T12:17:43Z"}, "message": "Allow `#[target_feature]` on safe functions", "tree": {"sha": "d41c98ef5c25c3e9ab18f8823a275ccb13094e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41c98ef5c25c3e9ab18f8823a275ccb13094e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "html_url": "https://github.com/rust-lang/rust/commit/2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eece58a8e35c444afba6fa34873bc0244e32cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/eece58a8e35c444afba6fa34873bc0244e32cd29", "html_url": "https://github.com/rust-lang/rust/commit/eece58a8e35c444afba6fa34873bc0244e32cd29"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "cec9e0ce3af71c7a9048d7646a5d9525443968c4", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "patch": "@@ -559,6 +559,9 @@ declare_features! (\n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n \n+    /// Allows the use of `#[target_feature]` on safe functions.\n+    (active, target_feature_11, \"1.45.0\", Some(69098), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "74d73404acd8ebc7f2fb5ba566d697c37ba2e603", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "patch": "@@ -722,6 +722,7 @@ symbols! {\n         suggestion,\n         sync_trait,\n         target_feature,\n+        target_feature_11,\n         target_has_atomic,\n         target_has_atomic_load_store,\n         target_thread_local,"}, {"sha": "eba8f0085375ac5317cf4da3c626a7e7966123c5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474f0ed88bc1a06e02230619b18e7bc8bb673fc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node, Unsafety};\n+use rustc_hir::{GenericParamKind, Node};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -2413,13 +2413,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if attr.check_name(sym::target_feature) {\n-            if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n-                let msg = \"`#[target_feature(..)]` can only be applied to `unsafe` functions\";\n-                tcx.sess\n-                    .struct_span_err(attr.span, msg)\n-                    .span_label(attr.span, \"can only be applied to `unsafe` functions\")\n-                    .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n-                    .emit();\n+            if !tcx.features().target_feature_11 {\n+                check_target_feature_safe_fn(tcx, id, attr.span);\n+            } else if let Some(local_id) = id.as_local() {\n+                if tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+                    check_target_feature_trait_unsafe(tcx, local_id, attr.span);\n+                }\n             }\n             from_target_feature(tcx, id, attr, &whitelist, &mut codegen_fn_attrs.target_features);\n         } else if attr.check_name(sym::linkage) {\n@@ -2666,3 +2665,39 @@ fn check_link_name_xor_ordinal(\n         tcx.sess.err(msg);\n     }\n }\n+\n+/// Checks the function annotated with `#[target_feature]` is unsafe,\n+/// reporting an error if it isn't.\n+fn check_target_feature_safe_fn(tcx: TyCtxt<'_>, id: DefId, attr_span: Span) {\n+    if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+        let mut err = feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::target_feature_11,\n+            attr_span,\n+            \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n+        );\n+        err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n+        err.emit();\n+    }\n+}\n+\n+/// Checks the function annotated with `#[target_feature]` is not a safe\n+/// trait method implementation, reporting an error if it is.\n+fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span: Span) {\n+    let hir_id = tcx.hir().as_local_hir_id(id);\n+    let node = tcx.hir().get(hir_id);\n+    if let Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) = node {\n+        let parent_id = tcx.hir().get_parent_item(hir_id);\n+        let parent_item = tcx.hir().expect_item(parent_id);\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = parent_item.kind {\n+            tcx.sess\n+                .struct_span_err(\n+                    attr_span,\n+                    \"`#[target_feature(..)]` cannot be applied to safe trait method\",\n+                )\n+                .span_label(attr_span, \"cannot be applied to safe trait method\")\n+                .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n+                .emit();\n+        }\n+    }\n+}"}]}