{"sha": "5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NThjMmRkMTRmZDI5Y2FmN2M3YmIyMTIzZWI2YjIzNDQzYjkyMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T06:19:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T06:19:40Z"}, "message": "Auto merge of #48575 - ishitatsuyuki:unix-no-thread, r=alexcrichton\n\nrustc_driver: get rid of the extra thread\n\n**Do not rollup**\n\nWe can alter the stack size afterwards on Unix.\n\nHaving a separate thread causes poor debugging experience when interrupting with signals. I have to get the backtrace of the all thread, as the main thread is waiting to join doing nothing else. This patch allows me to just run `bt` to get the desired backtrace.", "tree": {"sha": "00119e47d0be6aa30215fd510a06a2fde63dd937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00119e47d0be6aa30215fd510a06a2fde63dd937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "html_url": "https://github.com/rust-lang/rust/commit/5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20338a52401bda3024fd91010a143913a8dc9a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/20338a52401bda3024fd91010a143913a8dc9a6c", "html_url": "https://github.com/rust-lang/rust/commit/20338a52401bda3024fd91010a143913a8dc9a6c"}, {"sha": "7db854b36f9598e44fb4d61428d42d7769233e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db854b36f9598e44fb4d61428d42d7769233e19", "html_url": "https://github.com/rust-lang/rust/commit/7db854b36f9598e44fb4d61428d42d7769233e19"}], "stats": {"total": 148, "additions": 130, "deletions": 18}, "files": [{"sha": "b461431c7bbbd74b6eb6a8d66f6ccf88910ebd11", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -24,6 +24,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n+#![feature(rustc_stack_internals)]\n \n extern crate arena;\n extern crate getopts;\n@@ -1467,16 +1468,56 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n     // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n     const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n \n-    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+    #[cfg(unix)]\n+    let spawn_thread = unsafe {\n+        // Fetch the current resource limits\n+        let mut rlim = libc::rlimit {\n+            rlim_cur: 0,\n+            rlim_max: 0,\n+        };\n+        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n+            let err = io::Error::last_os_error();\n+            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n+            true\n+        } else if rlim.rlim_max < STACK_SIZE as libc::rlim_t {\n+            true\n+        } else {\n+            std::rt::deinit_stack_guard();\n+            rlim.rlim_cur = STACK_SIZE as libc::rlim_t;\n+            if libc::setrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n+                let err = io::Error::last_os_error();\n+                error!(\"in_rustc_thread: error calling setrlimit: {}\", err);\n+                std::rt::update_stack_guard();\n+                true\n+            } else {\n+                std::rt::update_stack_guard();\n+                false\n+            }\n+        }\n+    };\n \n-    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-    // then *don't* set it explicitly.\n-    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n-        cfg = cfg.stack_size(STACK_SIZE);\n-    }\n+    // We set the stack size at link time. See src/rustc/rustc.rs.\n+    #[cfg(windows)]\n+    let spawn_thread = false;\n+\n+    #[cfg(not(any(windows,unix)))]\n+    let spawn_thread = true;\n \n-    let thread = cfg.spawn(f);\n-    thread.unwrap().join()\n+    // The or condition is added from backward compatibility.\n+    if spawn_thread || env::var_os(\"RUST_MIN_STACK\").is_some() {\n+        let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+\n+        // FIXME: Hacks on hacks. If the env is trying to override the stack size\n+        // then *don't* set it explicitly.\n+        if env::var_os(\"RUST_MIN_STACK\").is_none() {\n+            cfg = cfg.stack_size(STACK_SIZE);\n+        }\n+\n+        let thread = cfg.spawn(f);\n+        thread.unwrap().join()\n+    } else {\n+        Ok(f())\n+    }\n }\n \n /// Get a list of extra command-line flags provided by the user, as strings."}, {"sha": "8f945470b7e94b25646f6336a14cfa7d3b84dd1f", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -73,3 +73,18 @@ fn lang_start<T: ::process::Termination + 'static>\n {\n     lang_start_internal(&move || main().report(), argc, argv)\n }\n+\n+/// Function used for reverting changes to the main stack before setrlimit().\n+/// This is POSIX (non-Linux) specific and unlikely to be directly stabilized.\n+#[unstable(feature = \"rustc_stack_internals\", issue = \"0\")]\n+pub unsafe fn deinit_stack_guard() {\n+    ::sys::thread::guard::deinit();\n+}\n+\n+/// Function used for resetting the main stack guard address after setrlimit().\n+/// This is POSIX specific and unlikely to be directly stabilized.\n+#[unstable(feature = \"rustc_stack_internals\", issue = \"0\")]\n+pub unsafe fn update_stack_guard() {\n+    let main_guard = ::sys::thread::guard::init();\n+    ::sys_common::thread_info::reset_guard(main_guard);\n+}"}, {"sha": "a22d9053b6964a1721879a7b2f7d13ada2d7398d", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -118,6 +118,7 @@ pub mod guard {\n     pub unsafe fn init() -> Option<Guard> {\n         None\n     }\n+    pub unsafe fn deinit() {}\n }\n \n fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {"}, {"sha": "f20350269b7cf8a4fe8b3d5bd4d9fa928ded1ba1", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -91,4 +91,5 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n+    pub unsafe fn deinit() {}\n }"}, {"sha": "2db3d4a5744e7f145ef46af5164413c4fe76a1a1", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -209,6 +209,7 @@ pub mod guard {\n     pub type Guard = Range<usize>;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n+    pub unsafe fn deinit() {}\n }\n \n \n@@ -222,8 +223,8 @@ pub mod guard {\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     use libc;\n-    use libc::mmap;\n-    use libc::{PROT_NONE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};\n+    use libc::{mmap, mprotect};\n+    use libc::{PROT_NONE, PROT_READ, PROT_WRITE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};\n     use ops::Range;\n     use sys::os;\n \n@@ -284,10 +285,10 @@ pub mod guard {\n         ret\n     }\n \n-    pub unsafe fn init() -> Option<Guard> {\n-        PAGE_SIZE = os::page_size();\n-\n-        let mut stackaddr = get_stack_start()?;\n+    // Precondition: PAGE_SIZE is initialized.\n+    unsafe fn get_stack_start_aligned() -> Option<*mut libc::c_void> {\n+        assert!(PAGE_SIZE != 0);\n+        let stackaddr = get_stack_start()?;\n \n         // Ensure stackaddr is page aligned! A parent process might\n         // have reset RLIMIT_STACK to be non-page aligned. The\n@@ -296,10 +297,17 @@ pub mod guard {\n         // page-aligned, calculate the fix such that stackaddr <\n         // new_page_aligned_stackaddr < stackaddr + stacksize\n         let remainder = (stackaddr as usize) % PAGE_SIZE;\n-        if remainder != 0 {\n-            stackaddr = ((stackaddr as usize) + PAGE_SIZE - remainder)\n-                as *mut libc::c_void;\n-        }\n+        Some(if remainder == 0 {\n+            stackaddr\n+        } else {\n+            ((stackaddr as usize) + PAGE_SIZE - remainder) as *mut libc::c_void\n+        })\n+    }\n+\n+    pub unsafe fn init() -> Option<Guard> {\n+        PAGE_SIZE = os::page_size();\n+\n+        let stackaddr = get_stack_start_aligned()?;\n \n         if cfg!(target_os = \"linux\") {\n             // Linux doesn't allocate the whole stack right away, and\n@@ -336,6 +344,26 @@ pub mod guard {\n         }\n     }\n \n+    pub unsafe fn deinit() {\n+        if !cfg!(target_os = \"linux\") {\n+            if let Some(stackaddr) = get_stack_start_aligned() {\n+                // Remove the protection on the guard page.\n+                // FIXME: we cannot unmap the page, because when we mmap()\n+                // above it may be already mapped by the OS, which we can't\n+                // detect from mmap()'s return value. If we unmap this page,\n+                // it will lead to failure growing stack size on platforms like\n+                // macOS. Instead, just restore the page to a writable state.\n+                // This ain't Linux, so we probably don't need to care about\n+                // execstack.\n+                let result = mprotect(stackaddr, PAGE_SIZE, PROT_READ | PROT_WRITE);\n+\n+                if result != 0 {\n+                    panic!(\"unable to reset the guard page\");\n+                }\n+            }\n+        }\n+    }\n+\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n               target_os = \"openbsd\","}, {"sha": "7345843b975e4b8cd5b66c05d440b0b5a5174ad7", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -46,4 +46,5 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n+    pub unsafe fn deinit() {}\n }"}, {"sha": "4b3d1b586b5701cc0776f9ec8855669dde063a4d", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -96,4 +96,5 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n+    pub unsafe fn deinit() {}\n }"}, {"sha": "d75cbded7347b2936d03b0ac571b93e2902d63e2", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -50,3 +50,7 @@ pub fn set(stack_guard: Option<Guard>, thread: Thread) {\n         thread,\n     }));\n }\n+\n+pub fn reset_guard(stack_guard: Option<Guard>) {\n+    THREAD_INFO.with(move |c| c.borrow_mut().as_mut().unwrap().stack_guard = stack_guard);\n+}"}, {"sha": "9fa33f911a1686f8118a3f31bbf6dde38578d653", "filename": "src/rustc/rustc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Frustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Frustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -9,6 +9,16 @@\n // except according to those terms.\n \n #![feature(rustc_private)]\n+#![feature(link_args)]\n+\n+// Set the stack size at link time on Windows. See rustc_driver::in_rustc_thread\n+// for the rationale.\n+#[cfg_attr(all(windows, target_env = \"msvc\"), link_args = \"/STACK:16777216\")]\n+// We only build for msvc and gnu now, but we use a exhaustive condition here\n+// so we can expect either the stack size to be set or the build fails.\n+#[cfg_attr(all(windows, not(target_env = \"msvc\")), link_args = \"-Wl,--stack,16777216\")]\n+// Also, don't forget to set this for rustdoc.\n+extern {}\n \n extern crate rustc_driver;\n "}, {"sha": "e726dea84f103d65d97e0f8503abde4a0111e1ab", "filename": "src/tools/rustdoc/main.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Ftools%2Frustdoc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5758c2dd14fd29caf7c7bb2123eb6b23443b9233/src%2Ftools%2Frustdoc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2Fmain.rs?ref=5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "patch": "@@ -8,6 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(link_args)]\n+// Set the stack size at link time on Windows. See rustc_driver::in_rustc_thread\n+// for the rationale.\n+#[cfg_attr(all(windows, target_env = \"msvc\"), link_args = \"/STACK:16777216\")]\n+// We only build for msvc and gnu now, but we use a exhaustive condition here\n+// so we can expect either the stack size to be set or the build fails.\n+#[cfg_attr(all(windows, not(target_env = \"msvc\")), link_args = \"-Wl,--stack,16777216\")]\n+// See src/rustc/rustc.rs for the corresponding rustc settings.\n+extern {}\n+\n extern crate rustdoc;\n \n fn main() { rustdoc::main() }"}]}