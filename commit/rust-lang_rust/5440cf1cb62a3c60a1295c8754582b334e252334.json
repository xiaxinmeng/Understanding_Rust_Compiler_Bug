{"sha": "5440cf1cb62a3c60a1295c8754582b334e252334", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDBjZjFjYjYyYTNjNjBhMTI5NWM4NzU0NTgyYjMzNGUyNTIzMzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-25T01:05:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-25T01:05:19Z"}, "message": "Rollup merge of #59560 - matthewjasper:mir-generation-cleanup, r=oli-obk\n\nMIR generation cleanup\n\n* Handle the case where the body of a constant is a subtype of the type of the constant (see `mir_static_subtype.rs`).\n* Move the evaluation of `ExprKind::Use` into `into.rs`, saving an unnecessary copy.", "tree": {"sha": "d1f8ecb02a44b18f28b4ac880bda08377db27908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f8ecb02a44b18f28b4ac880bda08377db27908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5440cf1cb62a3c60a1295c8754582b334e252334", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwQfPCRBK7hj4Ov3rIwAAdHIIACPxPyg8QAsHF23MK49APM1I\nP2BCtVAXOXDhNM6MDoJa29p65wyPTzpIZYN1rvvhrsk/H9BNQPC/qN5eRVo68WyI\nd1MDb8t8QDB8DhK2LJR7dc0nNFtQnyhL5ADNY9CfGaC43B7rgGqnwfoJasTaSvJu\n19yT6Nr/ZJoB79R9GQFfYGLOX12FGCW2IxqakS0SgVwXvenU4V0VXh4K7nwoCNsk\n9uLGUnQQdSCYPyiDGXbeo8sPPXBn8shC5KKOTbptH2Bh7fbfSKaRf56gz4jz3J4w\nfmontVhu6GYgwGvXDRW9obaDi0h5CpfB6WEQ+tCytPaQPKTZkgAX5a/8jpMhFzg=\n=dzAc\n-----END PGP SIGNATURE-----\n", "payload": "tree d1f8ecb02a44b18f28b4ac880bda08377db27908\nparent e305df1846a6d985315917ae0c81b74af8b4e641\nparent e9c687b04a9511f2b93f35b5325d1b6ab5f5bb01\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556154319 +0200\ncommitter GitHub <noreply@github.com> 1556154319 +0200\n\nRollup merge of #59560 - matthewjasper:mir-generation-cleanup, r=oli-obk\n\nMIR generation cleanup\n\n* Handle the case where the body of a constant is a subtype of the type of the constant (see `mir_static_subtype.rs`).\n* Move the evaluation of `ExprKind::Use` into `into.rs`, saving an unnecessary copy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5440cf1cb62a3c60a1295c8754582b334e252334", "html_url": "https://github.com/rust-lang/rust/commit/5440cf1cb62a3c60a1295c8754582b334e252334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5440cf1cb62a3c60a1295c8754582b334e252334/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e305df1846a6d985315917ae0c81b74af8b4e641", "url": "https://api.github.com/repos/rust-lang/rust/commits/e305df1846a6d985315917ae0c81b74af8b4e641", "html_url": "https://github.com/rust-lang/rust/commit/e305df1846a6d985315917ae0c81b74af8b4e641"}, {"sha": "e9c687b04a9511f2b93f35b5325d1b6ab5f5bb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c687b04a9511f2b93f35b5325d1b6ab5f5bb01", "html_url": "https://github.com/rust-lang/rust/commit/e9c687b04a9511f2b93f35b5325d1b6ab5f5bb01"}], "stats": {"total": 100, "additions": 69, "deletions": 31}, "files": [{"sha": "da2de43c09efe03d74113c9d79019632f4c21546", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -150,10 +150,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::Misc, source, expr.ty))\n             }\n-            ExprKind::Use { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Use(source))\n-            }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n@@ -363,6 +359,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Match { .. }\n             | ExprKind::If { .. }\n             | ExprKind::NeverToAny { .. }\n+            | ExprKind::Use { .. }\n             | ExprKind::Loop { .. }\n             | ExprKind::LogicalOp { .. }\n             | ExprKind::Call { .. }"}, {"sha": "4e24b6853d6eb5fc7862e5809615c984e4742697", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -48,6 +48,7 @@ impl Category {\n             | ExprKind::If { .. }\n             | ExprKind::Match { .. }\n             | ExprKind::NeverToAny { .. }\n+            | ExprKind::Use { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n@@ -58,7 +59,6 @@ impl Category {\n             | ExprKind::Binary { .. }\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n-            | ExprKind::Use { .. }\n             | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }"}, {"sha": "30ed9cef36f7bdec4ac0dbeac437bc3d8de2214e", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -327,6 +327,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     success.unit()\n                 }\n             }\n+            ExprKind::Use { source } => {\n+                this.into(destination, block, source)\n+            }\n \n             // These cases don't actually need a destination\n             ExprKind::Assign { .. }\n@@ -379,7 +382,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Binary { .. }\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n-            | ExprKind::Use { .. }\n             | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }"}, {"sha": "16ab233bd2e368893ba3e30c83d621eb4392bf87", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -147,7 +147,21 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             build::construct_fn(cx, id, arguments, safety, abi,\n                                 return_ty, yield_ty, return_ty_span, body)\n         } else {\n-            build::construct_const(cx, body_id, return_ty_span)\n+            // Get the revealed type of this const. This is *not* the adjusted\n+            // type of its body, which may be a subtype of this type. For\n+            // example:\n+            //\n+            // fn foo(_: &()) {}\n+            // static X: fn(&'static ()) = foo;\n+            //\n+            // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n+            // is not the same as the type of X. We need the type of the return\n+            // place to be the type of the constant because NLL typeck will\n+            // equate them.\n+\n+            let return_ty = cx.tables().node_type(id);\n+\n+            build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n         // Convert the Mir to global types.\n@@ -730,16 +744,25 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n fn construct_const<'a, 'gcx, 'tcx>(\n     hir: Cx<'a, 'gcx, 'tcx>,\n     body_id: hir::BodyId,\n-    ty_span: Span,\n+    const_ty: Ty<'tcx>,\n+    const_ty_span: Span,\n ) -> Mir<'tcx> {\n     let tcx = hir.tcx();\n-    let ast_expr = &tcx.hir().body(body_id).value;\n-    let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span, vec![], vec![]);\n+    let mut builder = Builder::new(\n+        hir,\n+        span,\n+        0,\n+        Safety::Safe,\n+        const_ty,\n+        const_ty_span,\n+        vec![],\n+        vec![],\n+    );\n \n     let mut block = START_BLOCK;\n+    let ast_expr = &tcx.hir().body(body_id).value;\n     let expr = builder.hir.mirror(ast_expr);\n     unpack!(block = builder.into_expr(&Place::RETURN_PLACE, block, expr));\n "}, {"sha": "4ca865cc8449945ffbbf642515d3ba1c4046f0ac", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -259,8 +259,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 )?;\n             }\n \n-            Cast(kind, ref operand, cast_ty) => {\n-                debug_assert_eq!(self.monomorphize(cast_ty)?, dest.layout.ty);\n+            Cast(kind, ref operand, _) => {\n                 let src = self.eval_operand(operand, None)?;\n                 self.cast(src, kind, dest)?;\n             }"}, {"sha": "bd715df6e9d1eb938a775a628dbd8e1f11b62b4a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -866,6 +866,8 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             fcx.check_expr_coercable_to_type(&body.value, revealed_ty);\n \n+            fcx.write_ty(id, revealed_ty);\n+\n             fcx\n         };\n "}, {"sha": "193b17af55eff09af6f285d46362d4b3dd6e6766", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -42,6 +42,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         for arg in &body.arguments {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n+        // Type only exists for constants and statics, not functions.\n+        match self.tcx.hir().body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n+                let item_hir_id = self.tcx.hir().node_to_hir_id(item_id);\n+                wbcx.visit_node_id(body.value.span, item_hir_id);\n+            }\n+            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),\n+        }\n         wbcx.visit_body(body);\n         wbcx.visit_upvar_capture_map();\n         wbcx.visit_upvar_list_map();"}, {"sha": "00a6b26d0cf226c8aa2d0a592851f03a73ec6016", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -18,25 +18,24 @@ fn main() {\n // START rustc.main.EraseRegions.after.mir\n //     bb0: {\n //         ...\n-//         _6 = &mut _2;\n-//         _5 = &mut (*_6);\n-//         _4 = move _5 as *mut usize (Misc);\n-//         _3 = move _4;\n+//         _5 = &mut _2;\n+//         _4 = &mut (*_5);\n+//         _3 = move _4 as *mut usize (Misc);\n //         ...\n-//         _8 = _3;\n-//         _7 = const foo(move _8) -> bb1;\n+//         _7 = _3;\n+//         _6 = const foo(move _7) -> bb1;\n //     }\n //\n //     bb1: {\n //         ...\n-//         _9 = _2;\n-//         _10 = Len(_1);\n-//         _11 = Lt(_9, _10);\n-//         assert(move _11, \"index out of bounds: the len is move _10 but the index is _9\") -> bb2;\n+//         _8 = _2;\n+//         _9 = Len(_1);\n+//         _10 = Lt(_8, _9);\n+//         assert(move _10, \"index out of bounds: the len is move _9 but the index is _8\") -> bb2;\n //     }\n //\n //     bb2: {\n-//         _1[_9] = move _7;\n+//         _1[_8] = move _6;\n //         ...\n //         return;\n //     }"}, {"sha": "6b7c863fcd43febb098d171fb4cbfc8b99b44546", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -75,18 +75,18 @@ fn main() {\n //         _10 = move _8;\n //         Retag(_10);\n //         ...\n-//         _15 = &mut (*_10);\n-//         Retag(_15);\n-//         _14 = move _15 as *mut i32 (Misc);\n-//         Retag([raw] _14);\n+//         _13 = &mut (*_10);\n+//         Retag(_13);\n+//         _12 = move _13 as *mut i32 (Misc);\n+//         Retag([raw] _12);\n //         ...\n-//         _18 = move _19(move _20) -> bb2;\n+//         _16 = move _17(move _18) -> bb2;\n //     }\n //\n //     bb2: {\n-//         Retag(_18);\n+//         Retag(_16);\n //         ...\n-//         _22 = const Test::foo_shr(move _23, move _25) -> bb3;\n+//         _20 = const Test::foo_shr(move _21, move _23) -> bb3;\n //     }\n //\n //     bb3: {"}, {"sha": "5b1ccd7ddf6d961742d720373188fe729150f508", "filename": "src/test/run-pass/mir/mir_static_subtype.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440cf1cb62a3c60a1295c8754582b334e252334/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs?ref=5440cf1cb62a3c60a1295c8754582b334e252334", "patch": "@@ -0,0 +1,8 @@\n+// Test that subtyping the body of a static doesn't cause an ICE.\n+\n+fn foo(_ : &()) {}\n+static X: fn(&'static ()) = foo;\n+\n+fn main() {\n+    let _ = X;\n+}"}]}