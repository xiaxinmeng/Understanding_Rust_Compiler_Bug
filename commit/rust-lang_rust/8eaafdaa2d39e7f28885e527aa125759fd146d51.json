{"sha": "8eaafdaa2d39e7f28885e527aa125759fd146d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYWFmZGFhMmQzOWU3ZjI4ODg1ZTUyN2FhMTI1NzU5ZmQxNDZkNTE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-15T01:13:47Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-15T01:13:47Z"}, "message": "rustc: Rename 'Unify' modules to 'unify'", "tree": {"sha": "3802a93a4f2a3dbfa507998c7d77d6a4b0907f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3802a93a4f2a3dbfa507998c7d77d6a4b0907f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eaafdaa2d39e7f28885e527aa125759fd146d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eaafdaa2d39e7f28885e527aa125759fd146d51", "html_url": "https://github.com/rust-lang/rust/commit/8eaafdaa2d39e7f28885e527aa125759fd146d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eaafdaa2d39e7f28885e527aa125759fd146d51/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33d490032cbfdfcf870fb86f192261c6e6628f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33d490032cbfdfcf870fb86f192261c6e6628f2", "html_url": "https://github.com/rust-lang/rust/commit/f33d490032cbfdfcf870fb86f192261c6e6628f2"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "1211f18e71747a8974ac883b05407ed5253073d7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eaafdaa2d39e7f28885e527aa125759fd146d51/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eaafdaa2d39e7f28885e527aa125759fd146d51/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8eaafdaa2d39e7f28885e527aa125759fd146d51", "patch": "@@ -58,7 +58,7 @@ type ctxt = rec(@type_store ts,\n                 resolve::def_map def_map,\n                 creader_cache rcache,\n                 hashmap[t,str] short_names_cache);\n-type ty_ctxt = ctxt;    // Needed for disambiguation from Unify::ctxt.\n+type ty_ctxt = ctxt;    // Needed for disambiguation from unify::ctxt.\n \n // Convert from method type to function type.  Pretty easy; we just drop\n // 'ident'.\n@@ -115,8 +115,8 @@ tag sty {\n \n type unify_handler = obj {\n     fn resolve_local(ast::def_id id) -> option::t[t];\n-    fn record_local(ast::def_id id, t ty);  // TODO: -> Unify::result\n-    fn record_param(uint index, t binding) -> Unify::result;\n+    fn record_local(ast::def_id id, t ty);  // TODO: -> unify::result\n+    fn record_param(uint index, t binding) -> unify::result;\n };\n \n tag type_err {\n@@ -1809,7 +1809,7 @@ fn is_lval(&@ast::expr expr) -> bool {\n //\n //     http://www.cs.man.ac.uk/~hoderk/ubench/unification_full.pdf\n \n-mod Unify {\n+mod unify {\n     tag result {\n         ures_ok(t);\n         ures_err(type_err, t, t);"}, {"sha": "4f50af38da6471ec09f7c8786ce4b7e2579c5470", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8eaafdaa2d39e7f28885e527aa125759fd146d51/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eaafdaa2d39e7f28885e527aa125759fd146d51/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8eaafdaa2d39e7f28885e527aa125759fd146d51", "patch": "@@ -33,8 +33,8 @@ import middle::ty::type_is_integral;\n import middle::ty::type_is_scalar;\n import middle::ty::ty_param_count_and_ty;\n import middle::ty::ty_nil;\n-import middle::ty::Unify::ures_ok;\n-import middle::ty::Unify::ures_err;\n+import middle::ty::unify::ures_ok;\n+import middle::ty::unify::ures_err;\n \n import std::_str;\n import std::_uint;\n@@ -59,7 +59,7 @@ type ty_item_table = hashmap[ast::def_id,any_item];\n type fn_purity_table = hashmap[ast::def_id, ast::purity];\n \n type unify_cache_entry = tup(ty::t,ty::t,vec[mutable ty::t]);\n-type unify_cache = hashmap[unify_cache_entry,ty::Unify::result];\n+type unify_cache = hashmap[unify_cache_entry,ty::unify::result];\n \n type crate_ctxt = rec(session::session sess,\n                       ty::type_cache type_cache,\n@@ -917,9 +917,9 @@ mod collect {\n \n // Type unification\n \n-mod Unify {\n+mod unify {\n     fn simple(&@fn_ctxt fcx, &ty::t expected,\n-              &ty::t actual) -> ty::Unify::result {\n+              &ty::t actual) -> ty::unify::result {\n         // FIXME: horrid botch\n         let vec[mutable ty::t] param_substs =\n             vec(mutable ty::mk_nil(fcx.ccx.tcx));\n@@ -928,14 +928,14 @@ mod Unify {\n     }\n \n     fn with_params(&@fn_ctxt fcx, &ty::t expected, &ty::t actual,\n-                   &vec[mutable ty::t] param_substs) -> ty::Unify::result {\n+                   &vec[mutable ty::t] param_substs) -> ty::unify::result {\n         auto cache_key = tup(expected, actual, param_substs);\n         alt (fcx.ccx.unify_cache.find(cache_key)) {\n-            case (some[ty::Unify::result](?r)) {\n+            case (some[ty::unify::result](?r)) {\n                 fcx.ccx.cache_hits += 1u;\n                 ret r;\n             }\n-            case (none[ty::Unify::result]) {\n+            case (none[ty::unify::result]) {\n                 fcx.ccx.cache_misses += 1u;\n             }\n         }\n@@ -979,7 +979,7 @@ mod Unify {\n                                               unified_type);\n                 fcx.locals.insert(id, unified_type);\n             }\n-            fn record_param(uint index, ty::t binding) -> ty::Unify::result {\n+            fn record_param(uint index, ty::t binding) -> ty::unify::result {\n                 // Unify with the appropriate type in the parameter\n                 // substitution list:\n                 auto old_subst = param_substs.(index);\n@@ -998,7 +998,7 @@ mod Unify {\n \n \n         auto handler = unify_handler(fcx, param_substs);\n-        auto result = ty::Unify::unify(expected, actual, handler,\n+        auto result = ty::unify::unify(expected, actual, handler,\n                                        fcx.ccx.tcx);\n         fcx.ccx.unify_cache.insert(cache_key, result);\n         ret result;\n@@ -1087,7 +1087,7 @@ mod Demand {\n             ty_param_substs += vec(mutable ty_param_subst);\n         }\n \n-        alt (Unify::with_params(fcx, expected_1, actual_1, ty_param_substs)) {\n+        alt (unify::with_params(fcx, expected_1, actual_1, ty_param_substs)) {\n             case (ures_ok(?t)) {\n                 // TODO: Use \"freeze\", when we have it.\n                 let vec[ty::t] result_ty_param_substs = vec();\n@@ -1116,7 +1116,7 @@ mod Demand {\n \n // Returns true if the two types unify and false if they don't.\n fn are_compatible(&@fn_ctxt fcx, &ty::t expected, &ty::t actual) -> bool {\n-    alt (Unify::simple(fcx, expected, actual)) {\n+    alt (unify::simple(fcx, expected, actual)) {\n         case (ures_ok(_))        { ret true;  }\n         case (ures_err(_, _, _)) { ret false; }\n     }\n@@ -3302,7 +3302,7 @@ fn check_crate(&ty::ctxt tcx, &@ast::crate crate) -> typecheck_result {\n     auto hasher = hash_unify_cache_entry;\n     auto eqer = eq_unify_cache_entry;\n     auto unify_cache =\n-        map::mk_hashmap[unify_cache_entry,ty::Unify::result](hasher, eqer);\n+        map::mk_hashmap[unify_cache_entry,ty::unify::result](hasher, eqer);\n     auto fpt = mk_fn_purity_table(crate); // use a variation on collect\n     let node_type_table node_types = result._3;\n "}]}