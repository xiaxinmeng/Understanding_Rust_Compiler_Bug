{"sha": "c0e1c09783422870e4d6e5862459d45036bb24d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTFjMDk3ODM0MjI4NzBlNGQ2ZTU4NjI0NTlkNDUwMzZiYjI0ZDc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-27T03:50:33Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-27T04:06:13Z"}, "message": "std::vec: Use a valid value as lifetime dummy in iterator\n\nThe current implementation uses `&v[0]` for the lifetime struct field,\nbut that is a dangling pointer for iterators derived from zero-length\nslices.\n\nExample:\n\n    let v: [int, ..0] = [];  println!(\"{:?}\", v.iter())\n\n    std::vec::VecIterator<,int>{ptr: (0x7f3768626100 as *()), end: (0x7f3768626100 as *()), lifetime: &139875951207128}\n\nTo replace this parameter, use a field of type `Option<&'self ()>`\nthat is simply initialized with `None`, but still allows the iterator to\nhave a lifetime parameter.", "tree": {"sha": "eb2dcc83402cf43699fe40dec080b348a39248db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2dcc83402cf43699fe40dec080b348a39248db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e1c09783422870e4d6e5862459d45036bb24d7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e1c09783422870e4d6e5862459d45036bb24d7", "html_url": "https://github.com/rust-lang/rust/commit/c0e1c09783422870e4d6e5862459d45036bb24d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e1c09783422870e4d6e5862459d45036bb24d7/comments", "author": null, "committer": null, "parents": [{"sha": "48499c7494d47f505a640157816cea2690b8d407", "url": "https://api.github.com/repos/rust-lang/rust/commits/48499c7494d47f505a640157816cea2690b8d407", "html_url": "https://github.com/rust-lang/rust/commit/48499c7494d47f505a640157816cea2690b8d407"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cf020c8f651663b4241eff0312148185b4e4ef8f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0e1c09783422870e4d6e5862459d45036bb24d7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e1c09783422870e4d6e5862459d45036bb24d7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c0e1c09783422870e4d6e5862459d45036bb24d7", "patch": "@@ -932,11 +932,11 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n             if sys::size_of::<T>() == 0 {\n                 VecIterator{ptr: p,\n                             end: (p as uint + self.len()) as *T,\n-                            lifetime: cast::transmute(p)}\n+                            lifetime: None}\n             } else {\n                 VecIterator{ptr: p,\n                             end: p.offset(self.len() as int),\n-                            lifetime: cast::transmute(p)}\n+                            lifetime: None}\n             }\n         }\n     }\n@@ -1940,11 +1940,11 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n             if sys::size_of::<T>() == 0 {\n                 VecMutIterator{ptr: p,\n                                end: (p as uint + self.len()) as *mut T,\n-                               lifetime: cast::transmute(p)}\n+                               lifetime: None}\n             } else {\n                 VecMutIterator{ptr: p,\n                                end: p.offset(self.len() as int),\n-                               lifetime: cast::transmute(p)}\n+                               lifetime: None}\n             }\n         }\n     }\n@@ -2389,7 +2389,7 @@ impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n pub struct VecIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n-    priv lifetime: &'self T // FIXME: #5922\n+    priv lifetime: Option<&'self ()> // FIXME: #5922\n }\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n@@ -2407,7 +2407,7 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n pub struct VecMutIterator<'self, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n-    priv lifetime: &'self mut T // FIXME: #5922\n+    priv lifetime: Option<&'self mut ()> // FIXME: #5922\n }\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}"}]}