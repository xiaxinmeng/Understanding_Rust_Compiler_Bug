{"sha": "8d75898dbb29aa90a0c96a5e30d40645ce4db329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzU4OThkYmIyOWFhOTBhMGM5NmE1ZTMwZDQwNjQ1Y2U0ZGIzMjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T03:17:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T03:17:07Z"}, "message": "Rollup merge of #84458 - jyn514:cleanup-after-krate, r=GuillaumeGomez\n\nRemove unnecessary fields and parameters in rustdoc\n\nr? `@GuillaumeGomez`", "tree": {"sha": "352e6154d0cbce5608bbc339fb7fa6e78c0dd0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/352e6154d0cbce5608bbc339fb7fa6e78c0dd0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d75898dbb29aa90a0c96a5e30d40645ce4db329", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgg42zCRBK7hj4Ov3rIwAAhOYIAEdBNnZLymbqJ3lJXhKP2HJj\nLzjLstpP7LSn5jQdrxxNW2h9ASKibryZPGnX3Bv4Y60H5bzIqfyWvFzO5p3aOAfi\nwJReQQkYkJrk8r2vpZrZURoYVDVdwuQKKAbkSxTbTBAcjQmDw9vvzbFceZ3mxtYH\nPJ7vahXTis8XA92+rKxk5dm/0WuRNd1cxXpt+Bk9d3KfbGjJYV3nKJwRpWrF3vgT\nkCRpO3002+1rPZ3M5e/mM677TxbmFAdpQzCDQDnHdxjion7rU2GZnGYV3lllvlNB\nzTcE72FwcRafrzPqiAjIx7QsdnBIkTiGmPU5nESFTV9ueWpMXl3pnwWe3J2J/VQ=\n=AdpW\n-----END PGP SIGNATURE-----\n", "payload": "tree 352e6154d0cbce5608bbc339fb7fa6e78c0dd0e9\nparent ed5646bfeed5ccf8d4f17fe76efd47ce1731d050\nparent edb60a9243c204d9e281b34a7216fe0c94bb743c\nauthor Yuki Okushi <jtitor@2k36.org> 1619234227 +0900\ncommitter GitHub <noreply@github.com> 1619234227 +0900\n\nRollup merge of #84458 - jyn514:cleanup-after-krate, r=GuillaumeGomez\n\nRemove unnecessary fields and parameters in rustdoc\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d75898dbb29aa90a0c96a5e30d40645ce4db329", "html_url": "https://github.com/rust-lang/rust/commit/8d75898dbb29aa90a0c96a5e30d40645ce4db329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d75898dbb29aa90a0c96a5e30d40645ce4db329/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed5646bfeed5ccf8d4f17fe76efd47ce1731d050", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5646bfeed5ccf8d4f17fe76efd47ce1731d050", "html_url": "https://github.com/rust-lang/rust/commit/ed5646bfeed5ccf8d4f17fe76efd47ce1731d050"}, {"sha": "edb60a9243c204d9e281b34a7216fe0c94bb743c", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb60a9243c204d9e281b34a7216fe0c94bb743c", "html_url": "https://github.com/rust-lang/rust/commit/edb60a9243c204d9e281b34a7216fe0c94bb743c"}], "stats": {"total": 118, "additions": 39, "deletions": 79}, "files": [{"sha": "b8ef3384c59083aa54b58222555a39b1bbd71e27", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::{edition::Edition, Symbol};\n+use rustc_span::Symbol;\n \n use crate::clean;\n use crate::config::RenderOptions;\n@@ -23,7 +23,6 @@ crate trait FormatRenderer<'tcx>: Sized {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n@@ -35,19 +34,15 @@ crate trait FormatRenderer<'tcx>: Sized {\n     fn item(&mut self, item: clean::Item) -> Result<(), Error>;\n \n     /// Renders a module (should not handle recursing into children).\n-    fn mod_item_in(&mut self, item: &clean::Item, item_name: &str) -> Result<(), Error>;\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error>;\n \n     /// Runs after recursively rendering all sub-items of a module.\n-    fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n+    fn mod_item_out(&mut self) -> Result<(), Error> {\n+        Ok(())\n+    }\n \n     /// Post processing hook for cleanup and dumping output to files.\n-    ///\n-    /// A handler is available if the renderer wants to report errors.\n-    fn after_krate(\n-        &mut self,\n-        crate_name: Symbol,\n-        diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error>;\n+    fn after_krate(&mut self) -> Result<(), Error>;\n \n     fn cache(&self) -> &Cache;\n }\n@@ -57,37 +52,31 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n     cache: Cache,\n-    diag: &rustc_errors::Handler,\n-    edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n     let prof = &tcx.sess.prof;\n \n     let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n-        .run(|| T::init(krate, options, edition, cache, tcx))?;\n+        .run(|| T::init(krate, options, cache, tcx))?;\n \n     if !emit_crate {\n         return Ok(());\n     }\n \n     // Render the crate documentation\n-    let crate_name = krate.name;\n     let mut work = vec![(format_renderer.make_child_renderer(), krate.module)];\n \n     let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n         if item.is_mod() && T::RUN_ON_MODULE {\n             // modules are special because they add a namespace. We also need to\n             // recurse into the items of the module as well.\n-            let name = item.name.as_ref().unwrap().to_string();\n-            if name.is_empty() {\n-                panic!(\"Unexpected module with empty name\");\n-            }\n-            let _timer = prof.generic_activity_with_arg(\"render_mod_item\", name.as_str());\n+            let _timer =\n+                prof.generic_activity_with_arg(\"render_mod_item\", item.name.unwrap().to_string());\n \n-            cx.mod_item_in(&item, &name)?;\n+            cx.mod_item_in(&item)?;\n             let module = match *item.kind {\n                 clean::StrippedItem(box clean::ModuleItem(m)) | clean::ModuleItem(m) => m,\n                 _ => unreachable!(),\n@@ -97,7 +86,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n                 work.push((cx.make_child_renderer(), it));\n             }\n \n-            cx.mod_item_out(&name)?;\n+            cx.mod_item_out()?;\n         // FIXME: checking `item.name.is_some()` is very implicit and leads to lots of special\n         // cases. Use an explicit match instead.\n         } else if item.name.is_some() && !item.is_extern_crate() {\n@@ -106,5 +95,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n     prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n-        .run(|| format_renderer.after_krate(crate_name, diag))\n+        .run(|| format_renderer.after_krate())\n }"}, {"sha": "9cffcef9749f8a25a735189b9c6d2650e9a74038", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n-use rustc_span::{symbol::sym, Symbol};\n+use rustc_span::symbol::sym;\n \n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n@@ -111,8 +111,6 @@ crate struct SharedContext<'tcx> {\n     crate static_root_path: Option<String>,\n     /// The fs handle we are working with.\n     crate fs: DocFS,\n-    /// The default edition used to parse doctests.\n-    crate edition: Edition,\n     pub(super) codes: ErrorCodes,\n     pub(super) playground: Option<markdown::Playground>,\n     all: RefCell<AllTypes>,\n@@ -141,6 +139,10 @@ impl SharedContext<'_> {\n     crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n         if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n     }\n+\n+    crate fn edition(&self) -> Edition {\n+        self.tcx.sess.edition()\n+    }\n }\n \n impl<'tcx> Context<'tcx> {\n@@ -346,7 +348,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n-        edition: Edition,\n         mut cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n@@ -435,7 +436,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             resource_suffix,\n             static_root_path,\n             fs: DocFS::new(sender),\n-            edition,\n             codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n             playground,\n             all: RefCell::new(AllTypes::new()),\n@@ -494,11 +494,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         }\n     }\n \n-    fn after_krate(\n-        &mut self,\n-        crate_name: Symbol,\n-        diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n+        let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n         let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n \n@@ -572,15 +569,16 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         // Flush pending errors.\n         Rc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.shared.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        let nb_errors =\n+            self.shared.errors.iter().map(|err| self.tcx().sess.struct_err(&err).emit()).count();\n         if nb_errors > 0 {\n             Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n         } else {\n             Ok(())\n         }\n     }\n \n-    fn mod_item_in(&mut self, item: &clean::Item, item_name: &str) -> Result<(), Error> {\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error> {\n         // Stripped modules survive the rustdoc passes (i.e., `strip-private`)\n         // if they contain impls for public types. These modules can also\n         // contain items such as publicly re-exported structures.\n@@ -592,8 +590,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             self.render_redirect_pages = item.is_stripped();\n         }\n         let scx = &self.shared;\n-        self.dst.push(item_name);\n-        self.current.push(item_name.to_owned());\n+        let item_name = item.name.as_ref().unwrap().to_string();\n+        self.dst.push(&item_name);\n+        self.current.push(item_name);\n \n         info!(\"Recursing into {}\", self.dst.display());\n \n@@ -619,7 +618,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n+    fn mod_item_out(&mut self) -> Result<(), Error> {\n         info!(\"Recursed; leaving {}\", self.dst.display());\n \n         // Go back to where we were at"}, {"sha": "f6d6b34f8bef9e2daf3dacd1a97eb08aef1472d9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -530,7 +530,7 @@ fn render_markdown(\n             &links,\n             &mut ids,\n             cx.shared.codes,\n-            cx.shared.edition,\n+            cx.shared.edition(),\n             &cx.shared.playground\n         )\n         .into_string()\n@@ -660,7 +660,7 @@ fn short_item_info(\n                 &note,\n                 &mut ids,\n                 error_codes,\n-                cx.shared.edition,\n+                cx.shared.edition(),\n                 &cx.shared.playground,\n             );\n             message.push_str(&format!(\": {}\", html.into_string()));\n@@ -702,7 +702,7 @@ fn short_item_info(\n                     &unstable_reason.as_str(),\n                     &mut ids,\n                     error_codes,\n-                    cx.shared.edition,\n+                    cx.shared.edition(),\n                     &cx.shared.playground,\n                 )\n                 .into_string()\n@@ -1366,7 +1366,7 @@ fn render_impl(\n                     &i.impl_item.links(cx),\n                     &mut ids,\n                     cx.shared.codes,\n-                    cx.shared.edition,\n+                    cx.shared.edition(),\n                     &cx.shared.playground\n                 )\n                 .into_string()"}, {"sha": "8e10c696df05d3f9fa452f446ee7299d1a0c5805", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -425,7 +425,7 @@ pub(super) fn write_shared(\n             md_opts.output = cx.dst.clone();\n             md_opts.external_html = (*cx.shared).layout.external_html.clone();\n \n-            crate::markdown::render(&index_page, md_opts, cx.shared.edition)\n+            crate::markdown::render(&index_page, md_opts, cx.shared.edition())\n                 .map_err(|e| Error::new(e, &index_page))?;\n         } else {\n             let dst = cx.dst.join(\"index.html\");"}, {"sha": "5a2a165191a604fb60d7099d64fd9cd084f9c247", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -129,7 +129,7 @@ impl SourceCollector<'_, 'tcx> {\n             &self.scx.layout,\n             &page,\n             \"\",\n-            |buf: &mut _| print_src(buf, contents, self.scx.edition),\n+            |buf: &mut _| print_src(buf, contents, self.scx.edition()),\n             &self.scx.style_files,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;"}, {"sha": "b048e7f919fa4a0f07ad7a528aafe44c6ec407f9", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -14,7 +14,6 @@ use std::rc::Rc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::{edition::Edition, Symbol};\n \n use rustdoc_json_types as types;\n \n@@ -134,7 +133,6 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        _edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n@@ -183,7 +181,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_in(&mut self, item: &clean::Item, _module_name: &str) -> Result<(), Error> {\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error> {\n         use clean::types::ItemKind::*;\n         if let ModuleItem(m) = &*item.kind {\n             for item in &m.items {\n@@ -200,15 +198,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n-        Ok(())\n-    }\n-\n-    fn after_krate(\n-        &mut self,\n-        _crate_name: Symbol,\n-        _diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());"}, {"sha": "26aaf0db6f6204edf85b8f4d67d74ddb37c57bfa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d75898dbb29aa90a0c96a5e30d40645ce4db329/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8d75898dbb29aa90a0c96a5e30d40645ce4db329", "patch": "@@ -656,14 +656,13 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n-    diag: &rustc_errors::Handler,\n-    edition: rustc_span::edition::Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, cache, &diag, edition, tcx) {\n+    match formats::run_format::<T>(krate, renderopts, cache, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n-            let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n+            let mut msg =\n+                tcx.sess.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n             let file = e.file.display().to_string();\n             if file.is_empty() {\n                 msg.emit()\n@@ -692,7 +691,6 @@ fn main_options(options: config::Options) -> MainResult {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't create the Handler ahead of time because it's not Send\n-    let diag_opts = (options.error_format, options.edition, options.debugging_opts.clone());\n     let show_coverage = options.show_coverage;\n     let run_check = options.run_check;\n \n@@ -758,28 +756,12 @@ fn main_options(options: config::Options) -> MainResult {\n                 }\n \n                 info!(\"going to format\");\n-                let (error_format, edition, debugging_options) = diag_opts;\n-                let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n                     config::OutputFormat::Html => sess.time(\"render_html\", || {\n-                        run_renderer::<html::render::Context<'_>>(\n-                            krate,\n-                            render_opts,\n-                            cache,\n-                            &diag,\n-                            edition,\n-                            tcx,\n-                        )\n+                        run_renderer::<html::render::Context<'_>>(krate, render_opts, cache, tcx)\n                     }),\n                     config::OutputFormat::Json => sess.time(\"render_json\", || {\n-                        run_renderer::<json::JsonRenderer<'_>>(\n-                            krate,\n-                            render_opts,\n-                            cache,\n-                            &diag,\n-                            edition,\n-                            tcx,\n-                        )\n+                        run_renderer::<json::JsonRenderer<'_>>(krate, render_opts, cache, tcx)\n                     }),\n                 }\n             })"}]}