{"sha": "038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "node_id": "C_kwDOAAsO6NoAKDAzOGY5ZTZiZWY5YzhmY2YxMjJkOTNhOGEzM2FjNTQ2ZjU2MDZlYjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T17:30:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T17:30:50Z"}, "message": "Auto merge of #99948 - Dylan-DPC:rollup-ed5136t, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #99311 (change maybe_body_owned_by to take local def id)\n - #99862 (Improve type mismatch w/ function signatures)\n - #99895 (don't call type ascription \"cast\")\n - #99900 (remove some manual hash stable impls)\n - #99903 (Add diagnostic when using public instead of pub)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0d2728e319fe7994124679b81b529533d0cc39fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d2728e319fe7994124679b81b529533d0cc39fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "html_url": "https://github.com/rust-lang/rust/commit/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1202bbaf48a0a919a2e0cfd8b7dce97e8fc3030d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1202bbaf48a0a919a2e0cfd8b7dce97e8fc3030d", "html_url": "https://github.com/rust-lang/rust/commit/1202bbaf48a0a919a2e0cfd8b7dce97e8fc3030d"}, {"sha": "df2cf97830dde8f563b898820ffbba200253326b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2cf97830dde8f563b898820ffbba200253326b", "html_url": "https://github.com/rust-lang/rust/commit/df2cf97830dde8f563b898820ffbba200253326b"}], "stats": {"total": 627, "additions": 332, "deletions": 295}, "files": [{"sha": "255c31d0b1a7a79804951f01155ca88e49426e95", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -353,9 +353,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n-        let hir_id = self.mir_hir_id();\n         let map = self.infcx.tcx.hir();\n-        let body_id = map.body_owned_by(hir_id);\n+        let body_id = map.body_owned_by(self.mir_def_id());\n         let body = map.body(body_id);\n \n         let mut visitor = ConditionVisitor { spans: &spans, name: &name, errors: vec![] };"}, {"sha": "ac26bc9c7f44fb90031962673d69b601ee70e005", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -853,7 +853,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let closure_id = self.mir_hir_id();\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n-        let item_id = hir.enclosing_body_owner(fn_call_id);\n+        let def_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;\n         // If we can detect the expression to be an `fn` call where the closure was an argument,\n         // we point at the `fn` definition argument...\n@@ -864,7 +864,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 .filter(|(_, arg)| arg.hir_id == closure_id)\n                 .map(|(pos, _)| pos)\n                 .next();\n-            let def_id = hir.local_def_id(item_id);\n             let tables = self.infcx.tcx.typeck(def_id);\n             if let Some(ty::FnDef(def_id, _)) =\n                 tables.node_type_opt(func.hir_id).as_ref().map(|ty| ty.kind())"}, {"sha": "ce8591734188077a14b3d8b3c8d2db460d720217", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -3,6 +3,7 @@ use rustc_index::bit_set;\n use rustc_index::vec;\n use smallvec::SmallVec;\n use std::hash::{BuildHasher, Hash, Hasher};\n+use std::marker::PhantomData;\n use std::mem;\n \n #[cfg(test)]\n@@ -261,6 +262,10 @@ impl<CTX> HashStable<CTX> for ! {\n     }\n }\n \n+impl<CTX, T> HashStable<CTX> for PhantomData<T> {\n+    fn hash_stable(&self, _ctx: &mut CTX, _hasher: &mut StableHasher) {}\n+}\n+\n impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {"}, {"sha": "f66b1a2976f1cd0427da976c31a92d50fddcef88", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -328,7 +328,7 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n             let typeck_results = self.maybe_typeck_results.get().or_else(|| {\n                 self.tcx\n                     .hir()\n-                    .maybe_body_owned_by(self.tcx.hir().local_def_id_to_hir_id(expr.hir_id.owner))\n+                    .maybe_body_owned_by(expr.hir_id.owner)\n                     .map(|body_id| self.tcx.typeck_body(body_id))\n             });\n "}, {"sha": "3e9d491af62d37d7c202544f9ca95cdb0d808487", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -49,10 +49,10 @@ pub fn find_param_with_region<'tcx>(\n     };\n \n     let hir = &tcx.hir();\n-    let hir_id = hir.local_def_id_to_hir_id(id.as_local()?);\n-    let body_id = hir.maybe_body_owned_by(hir_id)?;\n-    let body = hir.body(body_id);\n+    let def_id = id.as_local()?;\n+    let hir_id = hir.local_def_id_to_hir_id(def_id);\n \n+    // FIXME: use def_kind\n     // Don't perform this on closures\n     match hir.get(hir_id) {\n         hir::Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n@@ -61,11 +61,14 @@ pub fn find_param_with_region<'tcx>(\n         _ => {}\n     }\n \n+    let body_id = hir.maybe_body_owned_by(def_id)?;\n+\n     let owner_id = hir.body_owner(body_id);\n     let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n     let poly_fn_sig = tcx.fn_sig(id);\n \n     let fn_sig = tcx.liberate_late_bound_regions(id, poly_fn_sig);\n+    let body = hir.body(body_id);\n     body.params\n         .iter()\n         .take(if fn_sig.c_variadic {"}, {"sha": "f0886036899a2f4cd8797f65799013f57288ebe2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1616,7 +1616,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_anon_const(&mut self, id: hir::HirId) {\n         let def_id = self.tcx.hir().local_def_id(id);\n         debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", def_id);\n-        let body_id = self.tcx.hir().body_owned_by(id);\n+        let body_id = self.tcx.hir().body_owned_by(def_id);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n "}, {"sha": "47b04c33ec1cd67b131be9439b977f2997b3c862", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -396,10 +396,10 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn enclosing_body_owner(self, hir_id: HirId) -> HirId {\n+    pub fn enclosing_body_owner(self, hir_id: HirId) -> LocalDefId {\n         for (parent, _) in self.parent_iter(hir_id) {\n-            if let Some(body) = self.maybe_body_owned_by(parent) {\n-                return self.body_owner(body);\n+            if let Some(body) = self.find(parent).map(associated_body).flatten() {\n+                return self.body_owner_def_id(body);\n             }\n         }\n \n@@ -419,19 +419,20 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n-    /// Given a `HirId`, returns the `BodyId` associated with it,\n+    /// Given a `LocalDefId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n-    pub fn maybe_body_owned_by(self, hir_id: HirId) -> Option<BodyId> {\n-        self.find(hir_id).map(associated_body).flatten()\n+    pub fn maybe_body_owned_by(self, id: LocalDefId) -> Option<BodyId> {\n+        self.get_if_local(id.to_def_id()).map(associated_body).flatten()\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it.\n-    pub fn body_owned_by(self, id: HirId) -> BodyId {\n+    pub fn body_owned_by(self, id: LocalDefId) -> BodyId {\n         self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            let hir_id = self.local_def_id_to_hir_id(id);\n             span_bug!(\n-                self.span(id),\n+                self.span(hir_id),\n                 \"body_owned_by: {} has no associated body\",\n-                self.node_to_string(id)\n+                self.node_to_string(hir_id)\n             );\n         })\n     }\n@@ -670,7 +671,7 @@ impl<'hir> Map<'hir> {\n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n     pub fn is_inside_const_context(self, hir_id: HirId) -> bool {\n-        self.body_const_context(self.local_def_id(self.enclosing_body_owner(hir_id))).is_some()\n+        self.body_const_context(self.enclosing_body_owner(hir_id)).is_some()\n     }\n \n     /// Retrieves the `HirId` for `id`'s enclosing method, unless there's a"}, {"sha": "211a614717f8b7fe22083a5800c2a6edc89e8485", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -157,8 +157,9 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n-        let hir_id = hir.local_def_id_to_hir_id(id.expect_local());\n-        if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+        let def_id = id.expect_local();\n+        let hir_id = hir.local_def_id_to_hir_id(def_id);\n+        if let Some(body_id) = hir.maybe_body_owned_by(def_id) {\n             tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n         } else if let Node::TraitItem(&TraitItem {\n             kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),"}, {"sha": "1f9b474ade12b79a0ca4de6775a619c910da7f83", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -9,13 +9,9 @@ use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::struct_span_err;\n-use rustc_query_system::ich::StableHashingContext;\n use rustc_span::source_map::Span;\n use std::iter::FromIterator;\n-use std::mem;\n \n pub mod type_op {\n     use crate::ty::fold::TypeFoldable;\n@@ -226,29 +222,9 @@ pub struct NormalizationResult<'tcx> {\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift, HashStable)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n     RegionSubProjection(ty::Region<'tcx>, ty::ProjectionTy<'tcx>),\n }\n-\n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OutlivesBound<'tcx> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match *self {\n-            OutlivesBound::RegionSubRegion(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-            OutlivesBound::RegionSubParam(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-            OutlivesBound::RegionSubProjection(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}"}, {"sha": "cd00b26b8def0b77d72455ecb6fe07dcd4631747", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -101,46 +101,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKin\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ty::EarlyBoundRegion {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.def_id.hash_stable(hcx, hasher);\n-        self.index.hash_stable(hcx, hasher);\n-        self.name.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.index().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::ConstVid<'tcx> {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.index.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for ty::BoundVar {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n-        self.index().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<'tcx, T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.as_ref().skip_binder().hash_stable(hcx, hasher);\n-        self.bound_vars().hash_stable(hcx, hasher);\n-    }\n-}\n-\n // AllocIds get resolved to whatever they point to (to be stable)\n impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "da9d51a29b18c45d79caa7a03597dff9118cd403", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1182,22 +1182,13 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n /// identified by both a universe, as well as a name residing within that universe. Distinct bound\n /// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+#[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n     pub name: T,\n }\n \n-impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.universe.hash_stable(hcx, hasher);\n-        self.name.hash_stable(hcx, hasher);\n-    }\n-}\n-\n pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n \n pub type PlaceholderType = Placeholder<BoundVar>;\n@@ -1581,6 +1572,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n+#[derive(HashStable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,\n     pub value: T,\n@@ -1598,18 +1590,6 @@ impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n     }\n }\n \n-impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let ParamEnvAnd { ref param_env, ref value } = *self;\n-\n-        param_env.hash_stable(hcx, hasher);\n-        value.hash_stable(hcx, hasher);\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]\n pub struct Destructor {\n     /// The `DefId` of the destructor method"}, {"sha": "411d5c55829bd9c1df666247865de40e232a1198", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1009,6 +1009,7 @@ impl BoundVariableKind {\n ///\n /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(HashStable)]\n pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);\n \n impl<'tcx, T> Binder<'tcx, T>\n@@ -1355,6 +1356,7 @@ impl<'tcx> fmt::Debug for Region<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n+#[derive(HashStable)]\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n@@ -1368,14 +1370,16 @@ impl fmt::Debug for EarlyBoundRegion {\n }\n \n /// A **`const`** **v**ariable **ID**.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct ConstVid<'tcx> {\n     pub index: u32,\n     pub phantom: PhantomData<&'tcx ()>,\n }\n \n rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n+    #[derive(HashStable)]\n     pub struct RegionVid {\n         DEBUG_FORMAT = custom,\n     }\n@@ -1388,6 +1392,7 @@ impl Atom for RegionVid {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct BoundVar { .. }\n }\n "}, {"sha": "55ad83f8975841cb15713ac7054b0574c2ac9574", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -626,7 +626,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n     if tcx.is_closure(def.did.to_def_id()) {\n         let hir = tcx.hir();\n         let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n-        tcx.ensure().thir_check_unsafety(hir.local_def_id(owner));\n+        tcx.ensure().thir_check_unsafety(owner);\n         return;\n     }\n "}, {"sha": "f7351a4caa9545250d59dcbf5c21a146724fcc27", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn thir_body<'tcx>(\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n ) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n-    let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n+    let body = hir.body(hir.body_owned_by(owner_def.did));\n     let mut cx = Cx::new(tcx, owner_def);\n     if let Some(reported) = cx.typeck_results.tainted_by_errors {\n         return Err(reported);"}, {"sha": "063c076474e9027661b9be18d1e35c5885c379c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -26,7 +26,7 @@ use rustc_span::{BytePos, Span};\n pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n         None => return,\n-        Some(id) => tcx.hir().body_owned_by(tcx.hir().local_def_id_to_hir_id(id)),\n+        Some(def_id) => tcx.hir().body_owned_by(def_id),\n     };\n \n     let pattern_arena = TypedArena::default();"}, {"sha": "13ae8a1cd3e2068a40fd09f026f4df61d8c34a45", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -464,15 +464,15 @@ fn check_unused_unsafe(\n     def_id: LocalDefId,\n     used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let body_id = tcx.hir().maybe_body_owned_by(hir_id);\n+    let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n     let Some(body_id) = body_id else {\n         debug!(\"check_unused_unsafe({:?}) - no body found\", def_id);\n         return vec![];\n     };\n-    let body = tcx.hir().body(body_id);\n \n+    let body = tcx.hir().body(body_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let context = match tcx.hir().fn_sig_by_hir_id(hir_id) {\n         Some(sig) if sig.header.unsafety == hir::Unsafety::Unsafe => Context::UnsafeFn(hir_id),\n         _ => Context::Safe,"}, {"sha": "09329f18c679d7c93d596106ccf007d3a2be38c9", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -601,6 +601,17 @@ impl<'a> Parser<'a> {\n         self.last_unexpected_token_span = Some(self.token.span);\n         let mut err = self.struct_span_err(self.token.span, &msg_exp);\n \n+        if let TokenKind::Ident(symbol, _) = &self.prev_token.kind {\n+            if symbol.as_str() == \"public\" {\n+                err.span_suggestion_short(\n+                    self.prev_token.span,\n+                    \"write `pub` instead of `public` to make the item public\",\n+                    \"pub\",\n+                    appl,\n+                );\n+            }\n+        }\n+\n         // Add suggestion for a missing closing angle bracket if '>' is included in expected_tokens\n         // there are unclosed angle brackets\n         if self.unmatched_angle_bracket_count > 0"}, {"sha": "c0f661f7dbbf9519d2af1981740608d48556c045", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -827,11 +827,12 @@ impl<'a> Parser<'a> {\n         cast_expr: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n         let span = cast_expr.span;\n-        let maybe_ascription_span = if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n-            Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi()))\n-        } else {\n-            None\n-        };\n+        let (cast_kind, maybe_ascription_span) =\n+            if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n+                (\"type ascription\", Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi())))\n+            } else {\n+                (\"cast\", None)\n+            };\n \n         // Save the memory location of expr before parsing any following postfix operators.\n         // This will be compared with the memory location of the output expression.\n@@ -844,7 +845,7 @@ impl<'a> Parser<'a> {\n         // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.\n         if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {\n             let msg = format!(\n-                \"casts cannot be followed by {}\",\n+                \"{cast_kind} cannot be followed by {}\",\n                 match with_postfix.kind {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\","}, {"sha": "68d9bf22bf9c046f29fc567f37a1eda4ef44ff5a", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -15,8 +15,8 @@ pub fn provide(providers: &mut Providers) {\n             return None;\n         }\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(hir_id)?);\n+        let local_def_id = def_id.expect_local();\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(local_def_id)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "b2eb8fdf8a5444dda1e66b09bd68d607cce5302a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -20,6 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -253,8 +254,8 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn suggest_fully_qualified_path(\n@@ -1536,13 +1537,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        pub(crate) fn build_fn_sig_string<'tcx>(\n+        pub(crate) fn build_fn_sig_ty<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n-        ) -> String {\n+        ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n@@ -1564,10 +1565,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     abi::Abi::Rust,\n                 ),\n             };\n-            trait_ref.rebind(sig).to_string()\n+\n+            tcx.mk_fn_ptr(trait_ref.rebind(sig))\n         }\n \n-        let argument_kind = match expected_ref.skip_binder().self_ty().kind() {\n+        let argument_kind = match expected.skip_binder().self_ty().kind() {\n             ty::Closure(..) => \"closure\",\n             ty::Generator(..) => \"generator\",\n             _ => \"function\",\n@@ -1576,17 +1578,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0631,\n-            \"type mismatch in {} arguments\",\n-            argument_kind\n+            \"type mismatch in {argument_kind} arguments\",\n         );\n \n-        let found_str = format!(\"expected signature of `{}`\", build_fn_sig_string(self.tcx, found));\n-        err.span_label(span, found_str);\n+        err.span_label(span, \"expected due to this\");\n \n         let found_span = found_span.unwrap_or(span);\n-        let expected_str =\n-            format!(\"found signature of `{}`\", build_fn_sig_string(self.tcx, expected_ref));\n-        err.span_label(found_span, expected_str);\n+        err.span_label(found_span, \"found signature defined here\");\n+\n+        let expected = build_fn_sig_ty(self.tcx, expected);\n+        let found = build_fn_sig_ty(self.tcx, found);\n+\n+        let (expected_str, found_str) =\n+            self.tcx.infer_ctxt().enter(|infcx| infcx.cmp(expected, found));\n+\n+        let signature_kind = format!(\"{argument_kind} signature\");\n+        err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);\n \n         err\n     }\n@@ -1790,8 +1797,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let generator_body = generator_did\n             .as_local()\n-            .map(|def_id| hir.local_def_id_to_hir_id(def_id))\n-            .and_then(|hir_id| hir.maybe_body_owned_by(hir_id))\n+            .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n         let is_async = match generator_did.as_local() {\n             Some(_) => generator_body\n@@ -2759,7 +2765,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n \n-        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n+        if let Some(body_id) =\n+            self.tcx.hir().maybe_body_owned_by(self.tcx.hir().local_def_id(item_id))\n+        {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n                 let future_trait = self.tcx.require_lang_item(LangItem::Future, None);"}, {"sha": "b1af3051719e85ae348628ad4669581fa58a8cd2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -207,9 +207,14 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         constness,\n     );\n \n-    let body_id = hir_id.map_or(hir::CRATE_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-    });\n+    let body_id =\n+        local_did.and_then(|id| tcx.hir().maybe_body_owned_by(id).map(|body| body.hir_id));\n+    let body_id = match body_id {\n+        Some(id) => id,\n+        None if hir_id.is_some() => hir_id.unwrap(),\n+        _ => hir::CRATE_HIR_ID,\n+    };\n+\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }"}, {"sha": "e20c6a2d99a8a99ff05c09207d108a6d8e1ca329", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -766,7 +766,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // If this didn't hold, we would not have to report an error in\n                 // the first place.\n-                assert_ne!(hir::HirId::make_owner(encl_item_id), encl_body_owner_id);\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n \n                 let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n                 let encl_body = self.tcx.hir().body(encl_body_id);"}, {"sha": "33a3f825ac27111bfe7be4623a20accd49b7aa2c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -58,7 +58,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"FnCtxt::check_asm: {} deferred checks\", deferred_asm_checks.len());\n         for (asm, hir_id) in deferred_asm_checks.drain(..) {\n             let enclosing_id = self.tcx.hir().enclosing_body_owner(hir_id);\n-            InlineAsmCtxt::new_in_fn(self).check_asm(asm, enclosing_id);\n+            InlineAsmCtxt::new_in_fn(self)\n+                .check_asm(asm, self.tcx.hir().local_def_id_to_hir_id(enclosing_id));\n         }\n     }\n "}, {"sha": "99895dc122452edecc9d609210e6fc9a36ea9845", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -107,8 +107,7 @@ impl<'tcx> InheritedBuilder<'tcx> {\n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n-        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let body_id = tcx.hir().maybe_body_owned_by(item_id);\n+        let body_id = tcx.hir().maybe_body_owned_by(def_id);\n         let typeck_results =\n             infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n "}, {"sha": "0081e9049eeca87a7cd612a06f4835c3c71f307f", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -814,8 +814,7 @@ pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n         return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n-    let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(def_id.expect_local()) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx,\n             scope_tree: ScopeTree::default(),"}, {"sha": "534ddfa9531c160494c75f86564078a4be572f6c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -100,7 +100,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n             ..\n         }) => {\n-            let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+            let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n             let tables = tcx.typeck(body_owner);\n             // This may fail in case the method/path does not actually exist.\n             // As there is no relevant param for `def_id`, we simply return\n@@ -134,7 +134,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n                     ..\n                 }) => {\n-                    let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                    let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n                     let _tables = tcx.typeck(body_owner);\n                     &*path\n                 }"}, {"sha": "621f70f0da9865f18fbaa564613dbad70b78e479", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -236,8 +236,7 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n-                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n-                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))\n+                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {\n                 inline::print_inlined_const(cx.tcx, def.did)\n             };"}, {"sha": "c48b25aea4a373022cd73c51884e2ca61ac6216e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -313,7 +313,7 @@ pub(crate) fn create_config(\n                 }\n \n                 let hir = tcx.hir();\n-                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(def_id)));\n+                let body = hir.body(hir.body_owned_by(def_id));\n                 debug!(\"visiting body for {:?}\", def_id);\n                 EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)"}, {"sha": "fd0b19034a259022f51f2f9db9f5bd10e4992c65", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -143,8 +143,7 @@ where\n         // then we need to exit before calling typeck (which will panic). See\n         // test/run-make/rustdoc-scrape-examples-invalid-expr for an example.\n         let hir = tcx.hir();\n-        let owner = hir.local_def_id_to_hir_id(ex.hir_id.owner);\n-        if hir.maybe_body_owned_by(owner).is_none() {\n+        if hir.maybe_body_owned_by(ex.hir_id.owner).is_none() {\n             return;\n         }\n "}, {"sha": "1a0a5fdf4eb233c5bebdf316be4e738ad7295a6d", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n LL |     f1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:25\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n    |\n LL |     f2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:25\n    |\n@@ -30,10 +34,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n LL |     f3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&(), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:29\n    |\n@@ -44,10 +50,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n    |\n LL |     f4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'s (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:25\n    |\n@@ -58,10 +66,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n LL |     f5(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f5`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:25\n    |\n@@ -72,10 +82,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:23:25\n    |\n@@ -86,10 +98,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), for<'r> fn(&'r ())) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:24:25\n    |\n@@ -100,10 +114,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:25:25\n    |\n@@ -114,10 +130,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:26:25\n    |\n@@ -128,10 +146,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n    |\n LL |     h1(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), Box<(dyn for<'t0> Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'s (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+              found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:29:25\n    |\n@@ -142,10 +162,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n LL |     h2(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 't0> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'t0, 'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+              found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:30:25\n    |"}, {"sha": "8dccf929b2bd1fd73727cecaf062d7b485c2c60b", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n LL |     with_closure(|x: u32, y: i32| {\n-   |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n+   |     ^^^^^^^^^^^^ ---------------- found signature defined here\n    |     |\n-   |     expected signature of `fn(_, _) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(_, _) -> _`\n+              found closure signature `fn(u32, i32) -> _`\n note: required by a bound in `with_closure`\n   --> $DIR/expect-infer-var-appearing-twice.rs:2:14\n    |"}, {"sha": "1d9377bcef4de4e7b47418731b81d3001cc92746", "filename": "src/test/ui/generator/issue-88653.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -7,10 +7,12 @@ use std::ops::Generator;\n \n fn foo(bar: bool) -> impl Generator<(bool,)> {\n     //~^ ERROR: type mismatch in generator arguments [E0631]\n-    //~| NOTE: expected signature of `fn((bool,)) -> _`\n+    //~| NOTE: expected due to this\n+    //~| NOTE: expected generator signature `fn((bool,)) -> _`\n+    //~| NOTE: in this expansion of desugaring of `impl Trait`\n     //~| NOTE: in this expansion of desugaring of `impl Trait`\n     |bar| {\n-        //~^ NOTE: found signature of `fn(bool) -> _`\n+        //~^ NOTE: found signature defined here\n         if bar {\n             yield bar;\n         }"}, {"sha": "b742c6e2f1c08b1c40c569c4f34e195d933a1ef6", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,13 @@ error[E0631]: type mismatch in generator arguments\n   --> $DIR/issue-88653.rs:8:22\n    |\n LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `fn((bool,)) -> _`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n ...\n LL |     |bar| {\n-   |     ----- found signature of `fn(bool) -> _`\n+   |     ----- found signature defined here\n+   |\n+   = note: expected generator signature `fn((bool,)) -> _`\n+              found generator signature `fn(bool) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "7210895b79bc331ebc65fbb3b3fa22a788a74a59", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,13 +2,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-88382.rs:28:40\n    |\n LL |     do_something(SomeImplementation(), test);\n-   |     ------------                       ^^^^ expected signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+   |     ------------                       ^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n ...\n LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n-   | ------------------------------------------------- found signature of `for<'r, 'a> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n+   | ------------------------------------------------- found signature defined here\n    |\n+   = note: expected function signature `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+              found function signature `for<'a, 'r> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n note: required by a bound in `do_something`\n   --> $DIR/issue-88382.rs:22:48\n    |"}, {"sha": "89dba12c818c8ab3564410ee1d4ac6c7778bc0cb", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -67,13 +67,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/const-eval-select-bad.rs:34:32\n    |\n LL | const fn foo(n: i32) -> i32 {\n-   | --------------------------- found signature of `fn(i32) -> _`\n+   | --------------------------- found signature defined here\n ...\n LL |     const_eval_select((true,), foo, baz);\n-   |     -----------------          ^^^ expected signature of `fn(bool) -> _`\n+   |     -----------------          ^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(bool) -> _`\n+              found function signature `fn(i32) -> _`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |"}, {"sha": "4d673d45559a9758fed9c8d02d3076a979ed6f93", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n LL |     foo(|_: isize| {});\n-   |     ^^^ ---------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature defined here\n    |     |\n-   |     expected signature of `fn(usize) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(usize) -> _`\n+              found closure signature `fn(isize) -> _`\n note: required by a bound in `foo`\n   --> $DIR/E0631.rs:3:11\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n LL |     bar(|_: isize| {});\n-   |     ^^^ ---------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature defined here\n    |     |\n-   |     expected signature of `fn(usize) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(usize) -> _`\n+              found closure signature `fn(isize) -> _`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n@@ -30,13 +34,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n LL |     fn f(_: u64) {}\n-   |     ------------ found signature of `fn(u64) -> _`\n+   |     ------------ found signature defined here\n ...\n LL |     foo(f);\n-   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(usize) -> _`\n+              found function signature `fn(u64) -> _`\n note: required by a bound in `foo`\n   --> $DIR/E0631.rs:3:11\n    |\n@@ -47,13 +53,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n LL |     fn f(_: u64) {}\n-   |     ------------ found signature of `fn(u64) -> _`\n+   |     ------------ found signature defined here\n ...\n LL |     bar(f);\n-   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(usize) -> _`\n+              found function signature `fn(u64) -> _`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |"}, {"sha": "71469bfec2d393a5419740b319aef973033d2c56", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ --------------- found signature of `fn((u32, u32)) -> _`\n+   |              ^^^ --------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n-   |              ^^^ ---------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n+   |              ^^^ ---------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `for<'r> fn(&'r (u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -30,10 +34,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n-   |              ^^^ --------------- found signature of `fn((u16, u16)) -> _`\n+   |              ^^^ --------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `fn((u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "eec6d83fe223cf7a81502eb51f416e08eae6a372", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,13 +2,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:11:15\n    |\n LL | fn takes_mut(x: &mut isize) { }\n-   | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n+   | --------------------------- found signature defined here\n ...\n LL |     apply(&3, takes_mut);\n-   |     -----     ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |     -----     ^^^^^^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(&{integer}) -> _`\n+              found function signature `for<'r> fn(&'r mut isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |\n@@ -19,13 +21,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:15:19\n    |\n LL | fn takes_imm(x: &isize) { }\n-   | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n+   | ----------------------- found signature defined here\n ...\n LL |     apply(&mut 3, takes_imm);\n-   |     -----         ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |     -----         ^^^^^^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(&mut {integer}) -> _`\n+              found function signature `for<'r> fn(&'r isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |"}, {"sha": "b11ea97d160be12b8866bf99577bc1f06ca2efec", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ --------- found signature of `for<'r> fn(&'r str) -> _`\n+   |                                ^^^^^^ --------- found signature defined here\n    |                                |\n-   |                                expected signature of `for<'r> fn(&'r &str) -> _`\n+   |                                expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r &str) -> _`\n+              found closure signature `for<'r> fn(&'r str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "8dbe3472ea893d9d03b7f783a0001ec8333d120e", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,20 +2,21 @@\n \n use std::ops::FnMut;\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F { f }\n \n-fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-//~^ NOTE required by this bound in `call_it`\n-//~| NOTE required by a bound in `call_it`\n+fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n+    //~^ NOTE required by this bound in `call_it`\n+    //~| NOTE required by a bound in `call_it`\n     f(2, y)\n }\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-    //~^ NOTE found signature of `fn(usize, isize) -> _`\n+    //~^ NOTE found signature defined here\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n-    //~| NOTE expected signature of `fn(isize, isize) -> _`\n+    //~| NOTE expected due to this\n+    //~| NOTE expected closure signature `fn(isize, _) -> _`\n     //~| NOTE required by a bound introduced by this call\n     println!(\"{}\", z);\n }"}, {"sha": "54b2200652746fb2d0bc3afe0d5074f01362f3bc", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -2,18 +2,20 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-   |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n+   |                       ----------------------------- found signature defined here\n LL |\n LL |     let z = call_it(3, f);\n-   |             -------    ^ expected signature of `fn(isize, isize) -> _`\n+   |             -------    ^ expected due to this\n    |             |\n    |             required by a bound introduced by this call\n    |\n+   = note: expected closure signature `fn(isize, _) -> _`\n+              found closure signature `fn(usize, _) -> _`\n note: required by a bound in `call_it`\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:14\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:15\n    |\n-LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n+LL | fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error: aborting due to previous error\n "}, {"sha": "7bd4b3a165c3d128339c6556e2a9014b1a8d073e", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -8,16 +8,16 @@ use std::pin::Pin;\n // errors and parse such that further code gives useful errors.\n pub fn index_after_as_cast() {\n     vec![1, 2, 3] as Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n     vec![1, 2, 3]: Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: type ascription cannot be followed by indexing\n }\n \n pub fn index_after_cast_to_index() {\n     (&[0]) as &[i32][0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n     (&[0i32]): &[i32; 1][0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: type ascription cannot be followed by indexing\n }\n \n pub fn cast_after_cast() {\n@@ -37,89 +37,89 @@ pub fn cast_after_cast() {\n \n pub fn cast_cast_method_call() {\n     let _ = 0i32: i32: i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32: i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0i32: i32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0 as i32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32: i32 as u32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32.count_ones(): u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32.count_ones(): u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32.count_ones() as u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32.count_ones() as u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n }\n \n pub fn multiline_error() {\n     let _ = 0\n         as i32\n         .count_ones();\n-    //~^^^ ERROR: casts cannot be followed by a method call\n+    //~^^^ ERROR: cast cannot be followed by a method call\n }\n \n // this tests that the precedence for `!x as Y.Z` is still what we expect\n pub fn precedence() {\n     let x: i32 = &vec![1, 2, 3] as &Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n }\n \n pub fn method_calls() {\n     0 as i32.max(0);\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     0: i32.max(0);\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n }\n \n pub fn complex() {\n     let _ = format!(\n         \"{} and {}\",\n         if true { 33 } else { 44 } as i32.max(0),\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n         if true { 33 } else { 44 }: i32.max(0)\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     );\n }\n \n pub fn in_condition() {\n     if 5u64 as i32.max(0) == 0 {\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n     }\n     if 5u64: u64.max(0) == 0 {\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     }\n }\n \n pub fn inside_block() {\n     let _ = if true {\n         5u64 as u32.max(0) == 0\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n     } else { false };\n     let _ = if true {\n         5u64: u64.max(0) == 0\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     } else { false };\n }\n \n static bar: &[i32] = &(&[1,2,3] as &[i32][0..1]);\n-//~^ ERROR: casts cannot be followed by indexing\n+//~^ ERROR: cast cannot be followed by indexing\n \n static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n-//~^ ERROR: casts cannot be followed by indexing\n+//~^ ERROR: type ascription cannot be followed by indexing\n \n \n pub fn cast_then_try() -> Result<u64,u64> {\n     Err(0u64) as Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by `?`\n+    //~^ ERROR: cast cannot be followed by `?`\n     Err(0u64): Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by `?`\n+    //~^ ERROR: type ascription cannot be followed by `?`\n     Ok(1)\n }\n \n@@ -143,17 +143,17 @@ pub fn cast_to_fn_should_work() {\n pub fn parens_after_cast_error() {\n     let drop_ptr = drop as fn(u8);\n     drop as fn(u8)(0);\n-    //~^ ERROR: casts cannot be followed by a function call\n+    //~^ ERROR: cast cannot be followed by a function call\n     drop_ptr: fn(u8)(0);\n-    //~^ ERROR: casts cannot be followed by a function call\n+    //~^ ERROR: type ascription cannot be followed by a function call\n }\n \n pub async fn cast_then_await() {\n     Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>.await;\n-    //~^ ERROR: casts cannot be followed by `.await`\n+    //~^ ERROR: cast cannot be followed by `.await`\n \n     Box::pin(noop()): Pin<Box<_>>.await;\n-    //~^ ERROR: casts cannot be followed by `.await`\n+    //~^ ERROR: type ascription cannot be followed by `.await`\n }\n \n pub async fn noop() {}\n@@ -167,5 +167,5 @@ pub fn struct_field() {\n     Foo::default() as Foo.bar;\n     //~^ ERROR: cannot be followed by a field access\n     Foo::default(): Foo.bar;\n-    //~^ ERROR: cannot be followed by a field access\n+    //~^ ERROR: type ascription cannot be followed by a field access\n }"}, {"sha": "0c328bde285aa8c7fc3793caa72bf1b4cba99cbd", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:10:5\n    |\n LL |     vec![1, 2, 3] as Vec<i32>[0];\n@@ -9,7 +9,7 @@ help: try surrounding the expression in parentheses\n LL |     (vec![1, 2, 3] as Vec<i32>)[0];\n    |     +                         +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:12:5\n    |\n LL |     vec![1, 2, 3]: Vec<i32>[0];\n@@ -25,7 +25,7 @@ LL -     vec![1, 2, 3]: Vec<i32>[0];\n LL +     vec![1, 2, 3][0];\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:17:5\n    |\n LL |     (&[0]) as &[i32][0];\n@@ -36,7 +36,7 @@ help: try surrounding the expression in parentheses\n LL |     ((&[0]) as &[i32])[0];\n    |     +                +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:19:5\n    |\n LL |     (&[0i32]): &[i32; 1][0];\n@@ -52,7 +52,7 @@ LL -     (&[0i32]): &[i32; 1][0];\n LL +     (&[0i32])[0];\n    |\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:39:13\n    |\n LL |     let _ = 0i32: i32: i32.count_ones();\n@@ -68,7 +68,7 @@ LL -     let _ = 0i32: i32: i32.count_ones();\n LL +     let _ = 0i32: i32.count_ones();\n    |\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:41:13\n    |\n LL |     let _ = 0 as i32: i32.count_ones();\n@@ -84,7 +84,7 @@ LL -     let _ = 0 as i32: i32.count_ones();\n LL +     let _ = 0 as i32.count_ones();\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:43:13\n    |\n LL |     let _ = 0i32: i32 as i32.count_ones();\n@@ -95,7 +95,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0i32: i32 as i32).count_ones();\n    |             +                +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:45:13\n    |\n LL |     let _ = 0 as i32 as i32.count_ones();\n@@ -106,7 +106,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32 as i32).count_ones();\n    |             +               +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:47:13\n    |\n LL |     let _ = 0i32: i32: i32 as u32 as i32.count_ones();\n@@ -117,7 +117,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0i32: i32: i32 as u32 as i32).count_ones();\n    |             +                            +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:49:13\n    |\n LL |     let _ = 0i32: i32.count_ones(): u32;\n@@ -133,7 +133,7 @@ LL -     let _ = 0i32: i32.count_ones(): u32;\n LL +     let _ = 0i32.count_ones(): u32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:51:13\n    |\n LL |     let _ = 0 as i32.count_ones(): u32;\n@@ -144,7 +144,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32).count_ones(): u32;\n    |             +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:53:13\n    |\n LL |     let _ = 0i32: i32.count_ones() as u32;\n@@ -160,7 +160,7 @@ LL -     let _ = 0i32: i32.count_ones() as u32;\n LL +     let _ = 0i32.count_ones() as u32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:55:13\n    |\n LL |     let _ = 0 as i32.count_ones() as u32;\n@@ -171,7 +171,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32).count_ones() as u32;\n    |             +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:57:13\n    |\n LL |     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n@@ -187,7 +187,7 @@ LL -     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n LL +     let _ = 0i32: i32.count_ones() as u32 as i32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:62:13\n    |\n LL |       let _ = 0\n@@ -201,7 +201,7 @@ LL ~     let _ = (0\n LL ~         as i32)\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:70:18\n    |\n LL |     let x: i32 = &vec![1, 2, 3] as &Vec<i32>[0];\n@@ -212,7 +212,7 @@ help: try surrounding the expression in parentheses\n LL |     let x: i32 = (&vec![1, 2, 3] as &Vec<i32>)[0];\n    |                  +                           +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:75:5\n    |\n LL |     0 as i32.max(0);\n@@ -223,7 +223,7 @@ help: try surrounding the expression in parentheses\n LL |     (0 as i32).max(0);\n    |     +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:77:5\n    |\n LL |     0: i32.max(0);\n@@ -239,7 +239,7 @@ LL -     0: i32.max(0);\n LL +     0.max(0);\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:92:8\n    |\n LL |     if 5u64 as i32.max(0) == 0 {\n@@ -250,7 +250,7 @@ help: try surrounding the expression in parentheses\n LL |     if (5u64 as i32).max(0) == 0 {\n    |        +           +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:95:8\n    |\n LL |     if 5u64: u64.max(0) == 0 {\n@@ -266,7 +266,7 @@ LL -     if 5u64: u64.max(0) == 0 {\n LL +     if 5u64.max(0) == 0 {\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:102:9\n    |\n LL |         5u64 as u32.max(0) == 0\n@@ -277,7 +277,7 @@ help: try surrounding the expression in parentheses\n LL |         (5u64 as u32).max(0) == 0\n    |         +           +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:106:9\n    |\n LL |         5u64: u64.max(0) == 0\n@@ -293,7 +293,7 @@ LL -         5u64: u64.max(0) == 0\n LL +         5u64.max(0) == 0\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:111:24\n    |\n LL | static bar: &[i32] = &(&[1,2,3] as &[i32][0..1]);\n@@ -304,7 +304,7 @@ help: try surrounding the expression in parentheses\n LL | static bar: &[i32] = &((&[1,2,3] as &[i32])[0..1]);\n    |                        +                  +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:114:25\n    |\n LL | static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n@@ -320,7 +320,7 @@ LL - static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n LL + static bar2: &[i32] = &(&[1i32,2,3][0..1]);\n    |\n \n-error: casts cannot be followed by `?`\n+error: cast cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n    |\n LL |     Err(0u64) as Result<u64,u64>?;\n@@ -331,7 +331,7 @@ help: try surrounding the expression in parentheses\n LL |     (Err(0u64) as Result<u64,u64>)?;\n    |     +                            +\n \n-error: casts cannot be followed by `?`\n+error: type ascription cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;\n@@ -347,7 +347,7 @@ LL -     Err(0u64): Result<u64,u64>?;\n LL +     Err(0u64)?;\n    |\n \n-error: casts cannot be followed by a function call\n+error: cast cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n    |\n LL |     drop as fn(u8)(0);\n@@ -358,7 +358,7 @@ help: try surrounding the expression in parentheses\n LL |     (drop as fn(u8))(0);\n    |     +              +\n \n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:147:5\n    |\n LL |     drop_ptr: fn(u8)(0);\n@@ -374,7 +374,7 @@ LL -     drop_ptr: fn(u8)(0);\n LL +     drop_ptr(0);\n    |\n \n-error: casts cannot be followed by `.await`\n+error: cast cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:152:5\n    |\n LL |     Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>.await;\n@@ -385,7 +385,7 @@ help: try surrounding the expression in parentheses\n LL |     (Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>).await;\n    |     +                                                     +\n \n-error: casts cannot be followed by `.await`\n+error: type ascription cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:155:5\n    |\n LL |     Box::pin(noop()): Pin<Box<_>>.await;\n@@ -401,7 +401,7 @@ LL -     Box::pin(noop()): Pin<Box<_>>.await;\n LL +     Box::pin(noop()).await;\n    |\n \n-error: casts cannot be followed by a field access\n+error: cast cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5\n    |\n LL |     Foo::default() as Foo.bar;\n@@ -412,7 +412,7 @@ help: try surrounding the expression in parentheses\n LL |     (Foo::default() as Foo).bar;\n    |     +                     +\n \n-error: casts cannot be followed by a field access\n+error: type ascription cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:169:5\n    |\n LL |     Foo::default(): Foo.bar;\n@@ -428,7 +428,7 @@ LL -     Foo::default(): Foo.bar;\n LL +     Foo::default().bar;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:84:9\n    |\n LL |         if true { 33 } else { 44 } as i32.max(0),\n@@ -439,7 +439,7 @@ help: try surrounding the expression in parentheses\n LL |         (if true { 33 } else { 44 } as i32).max(0),\n    |         +                                 +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:86:9\n    |\n LL |         if true { 33 } else { 44 }: i32.max(0)"}, {"sha": "01db609990e37b1a1e9e8016b0d0fa16eb6bce48", "filename": "src/test/ui/parser/public-instead-of-pub.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.fixed?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -0,0 +1,8 @@\n+// Checks what happens when `public` is used instead of the correct, `pub`\n+// edition:2018\n+// run-rustfix\n+pub struct X;\n+//~^ ERROR expected one of `!` or `::`, found keyword `struct`\n+//~^^ HELP write `pub` instead of `public` to make the item public\n+\n+fn main() {}"}, {"sha": "18e0fd3af1ce69530d919d4b7c2545a1d2feca59", "filename": "src/test/ui/parser/public-instead-of-pub.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -0,0 +1,8 @@\n+// Checks what happens when `public` is used instead of the correct, `pub`\n+// edition:2018\n+// run-rustfix\n+public struct X;\n+//~^ ERROR expected one of `!` or `::`, found keyword `struct`\n+//~^^ HELP write `pub` instead of `public` to make the item public\n+\n+fn main() {}"}, {"sha": "af875491e85cb9b2a47e1f17e6c33e640979c6ae", "filename": "src/test/ui/parser/public-instead-of-pub.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `!` or `::`, found keyword `struct`\n+  --> $DIR/public-instead-of-pub.rs:4:8\n+   |\n+LL | public struct X;\n+   |        ^^^^^^ expected one of `!` or `::`\n+   |\n+help: write `pub` instead of `public` to make the item public\n+   |\n+LL | pub struct X;\n+   | ~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "f78268894daeca174426b44f55538aa1945eebba", "filename": "src/test/ui/type/ascription/issue-54516.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -3,5 +3,5 @@ use std::collections::BTreeMap;\n \n fn main() {\n     println!(\"{}\", std::mem::size_of::<BTreeMap<u32, u32>>());\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "1f34e6943bab2b5213db0f246672b9b14764e9d3", "filename": "src/test/ui/type/ascription/issue-54516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -3,5 +3,5 @@ use std::collections::BTreeMap;\n \n fn main() {\n     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "1ab9093e58445279f307278cdc9e7cd0f8483443", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-54516.rs:5:20\n    |\n LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());"}, {"sha": "3e8be3875b34eb8d3544d3b6554bda64a033eb21", "filename": "src/test/ui/type/ascription/issue-60933.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n fn main() {\n     let _: usize = std::mem::size_of::<u32>();\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "2a4ad7bdc4ee777d74ef3630b8a41809b196a913", "filename": "src/test/ui/type/ascription/issue-60933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n fn main() {\n     let _: usize = std::mem:size_of::<u32>();\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "0b7f8edf62402612b88b844e885f950c9e19e602", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-60933.rs:3:20\n    |\n LL |     let _: usize = std::mem:size_of::<u32>();"}, {"sha": "9c3375bf35e7dc523ce4cd89b4b7435354873a8d", "filename": "src/tools/clippy/clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -12,7 +12,8 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hi\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);\n-        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(closure.hir_id);\n+        if let Some(def_id) = cx.tcx.hir().opt_local_def_id(closure.hir_id);\n+        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(def_id);\n         let closure_body = cx.tcx.hir().body(body_id);\n         if !cx.typeck_results().expr_ty(&closure_body.value).is_unit();\n         then {"}, {"sha": "c0726868f77e22eb35b78e8637db18582b2e0a2d", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", &hir.body(body_id).value));\n         });"}, {"sha": "50bb008098dcbc16c674ee49d0cae5d2de32cfdc", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f9e6bef9c8fcf122d93a8a33ac546f5606eb3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=038f9e6bef9c8fcf122d93a8a33ac546f5606eb3", "patch": "@@ -1353,7 +1353,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     if is_integer_literal(e, value) {\n         return true;\n     }\n-    let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n+    let enclosing_body = cx.tcx.hir().enclosing_body_owner(e.hir_id);\n     if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         return value == v;\n     }"}]}