{"sha": "0ee393cf01b59d55a54e9e4299797bd0f7339d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTM5M2NmMDFiNTlkNTVhNTRlOWU0Mjk5Nzk3YmQwZjczMzlkNTg=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T00:17:14Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:43:38Z"}, "message": "Add tests and improve checks.", "tree": {"sha": "e7936eba88c518e51fbd65f15a3cac38aea4140a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7936eba88c518e51fbd65f15a3cac38aea4140a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee393cf01b59d55a54e9e4299797bd0f7339d58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAl5KmIoACgkQQ9YqPqOI\n5G8WBg/9Eti89q+QRWbGvo+7s4tZ7P08TbFW6QfK5Dl0NhjIjNdJ8i5eXEGTTGxE\nacGTuAiT+0ZhOfiL5fwlhLCYRjow0SBJ0vm0E1cpShqvv3H7ajOCeSGXVGWyyX6N\nbBmQxaRSRhPsRBac9njwQE5awx6+j5+9Qmju1ybXJ976WIiFSv3UeWbDqrnU/W9W\nzXY9647TVHlv7JMmX6WcwfIaXYJvQ2kXAonPPnc8+/GjRZ52/9Kq073ua9q1bGAL\nYpjEIwDDAx8j5UMkpGBV6Fa3aZImyhcmrI9lExREvr4HzXKxMgbway8i2jQCIVcr\nsSqeBDm5zQfoGzlk7lXhaUQyvqilgvtZjci61OioIhPhtSAnXCBLnDHfH3bN5rrv\nJPNA9XCXFaYEQ4fN1LnK/7djZ8klTwx9u0QkajXygR/3QJ4RwTd85d8LAsN+actS\n+ebD7+TekulJkOAVlpWuviLUyeo4tc7eM8fJJ58Q4lnynQ4eVEL2W8EPT/qpM27g\n6S4yzsTio64BdW510My8xWaY5/yQj0BJiYNqqJzZK8jvmuDLj962QPI6ZRwVu7jM\n3b8y1ET/He9NmK2KhqexnTAfLtRe+oPV8n+1u9aquwE1TdpfOHt7B+tR31A3IaBm\nabYywWDs1Ne5qB6KL7+ZDWMJUyWQGM6ozuGgOxc65JnpYkE7GxQ=\n=CRUN\n-----END PGP SIGNATURE-----", "payload": "tree e7936eba88c518e51fbd65f15a3cac38aea4140a\nparent 0b168c693a7c9e1307b143937d6537b36b929303\nauthor daxpedda <daxpedda@gmail.com> 1581898634 +0100\ncommitter daxpedda <daxpedda@gmail.com> 1581947018 +0100\n\nAdd tests and improve checks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee393cf01b59d55a54e9e4299797bd0f7339d58", "html_url": "https://github.com/rust-lang/rust/commit/0ee393cf01b59d55a54e9e4299797bd0f7339d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee393cf01b59d55a54e9e4299797bd0f7339d58/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b168c693a7c9e1307b143937d6537b36b929303", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b168c693a7c9e1307b143937d6537b36b929303", "html_url": "https://github.com/rust-lang/rust/commit/0b168c693a7c9e1307b143937d6537b36b929303"}], "stats": {"total": 99, "additions": 83, "deletions": 16}, "files": [{"sha": "133a20b669a17720faab96f0cb22031939e01f2a", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0ee393cf01b59d55a54e9e4299797bd0f7339d58/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee393cf01b59d55a54e9e4299797bd0f7339d58/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=0ee393cf01b59d55a54e9e4299797bd0f7339d58", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n+use crate::utils::{get_trait_def_id, implements_trait, is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n use itertools::Itertools;\n use rustc::lint::in_external_macro;\n use rustc::ty::TyKind;\n@@ -223,19 +223,24 @@ fn lint_for_missing_headers<'a, 'tcx>(\n                 \"docs for function returning `Result` missing `# Errors` section\",\n             );\n         } else {\n-            use TyKind::*;\n             let def_id = cx.tcx.hir().local_def_id(hir_id);\n             let mir = cx.tcx.optimized_mir(def_id);\n-            if let Opaque(_, subs) = mir.return_ty().kind {\n-                if let Some(ty) = subs.types().next() {\n-                    if let Generator(_, subs, _) = ty.kind {\n-                        if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n-                            span_lint(\n-                                cx,\n-                                MISSING_ERRORS_DOC,\n-                                span,\n-                                \"docs for function returning `Result` missing `# Errors` section\",\n-                            );\n+            if let Some(future) = get_trait_def_id(cx, &paths::FUTURE) {\n+                if implements_trait(cx, mir.return_ty(), future, &[]) {\n+                    use TyKind::*;\n+\n+                    if let Opaque(_, subs) = mir.return_ty().kind {\n+                        if let Some(ty) = subs.types().next() {\n+                            if let Generator(_, subs, _) = ty.kind {\n+                                if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n+                                    span_lint(\n+                                        cx,\n+                                        MISSING_ERRORS_DOC,\n+                                        span,\n+                                        \"docs for function returning `Result` missing `# Errors` section\",\n+                                    );\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "96337e42b544c8c7923f20a493c19e6dea9f8a10", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ee393cf01b59d55a54e9e4299797bd0f7339d58/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee393cf01b59d55a54e9e4299797bd0f7339d58/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=0ee393cf01b59d55a54e9e4299797bd0f7339d58", "patch": "@@ -36,6 +36,7 @@ pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n+pub const FUTURE: [&str; 3] = [\"std\", \"future\", \"Future\"];\n pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];"}, {"sha": "1401a658e0370f30f5afd9f20ae66c4a6de73a3d", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0ee393cf01b59d55a54e9e4299797bd0f7339d58/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee393cf01b59d55a54e9e4299797bd0f7339d58/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=0ee393cf01b59d55a54e9e4299797bd0f7339d58", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --edition 2018\n #![warn(clippy::missing_errors_doc)]\n \n use std::io;\n@@ -6,22 +7,42 @@ pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n /// This is not sufficiently documented.\n pub fn pub_fn_returning_io_result() -> io::Result<()> {\n     unimplemented!();\n }\n \n+/// This is not sufficiently documented.\n+pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n+    unimplemented!();\n+}\n+\n /// # Errors\n /// A description of the errors goes here.\n pub fn pub_fn_with_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+/// # Errors\n+/// A description of the errors goes here.\n+pub async fn async_pub_fn_with_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n /// This function doesn't require the documentation because it is private\n fn priv_fn_missing_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+/// This function doesn't require the documentation because it is private\n+async fn async_priv_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n pub struct Struct1;\n \n impl Struct1 {\n@@ -30,16 +51,32 @@ impl Struct1 {\n         unimplemented!();\n     }\n \n+    /// This is not sufficiently documented.\n+    pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n     /// # Errors\n     /// A description of the errors goes here.\n     pub fn pub_method_with_errors_header() -> Result<(), ()> {\n         unimplemented!();\n     }\n \n+    /// # Errors\n+    /// A description of the errors goes here.\n+    pub async fn async_pub_method_with_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n     /// This function doesn't require the documentation because it is private.\n     fn priv_method_missing_errors_header() -> Result<(), ()> {\n         unimplemented!();\n     }\n+\n+    /// This function doesn't require the documentation because it is private.\n+    async fn async_priv_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n }\n \n pub trait Trait1 {"}, {"sha": "f44d6693d303b699a3c17c6821de9b7f2405a973", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ee393cf01b59d55a54e9e4299797bd0f7339d58/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ee393cf01b59d55a54e9e4299797bd0f7339d58/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=0ee393cf01b59d55a54e9e4299797bd0f7339d58", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:5:1\n+  --> $DIR/doc_errors.rs:6:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -11,24 +11,48 @@ LL | | }\n error: docs for function returning `Result` missing `# Errors` section\n   --> $DIR/doc_errors.rs:10:1\n    |\n+LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:15:1\n+   |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:29:5\n+  --> $DIR/doc_errors.rs:20:1\n+   |\n+LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:50:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:47:5\n+  --> $DIR/doc_errors.rs:55:5\n+   |\n+LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:84:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}