{"sha": "b569caf267c595d2c2988941fb39f4718cadfdcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NjljYWYyNjdjNTk1ZDJjMjk4ODk0MWZiMzlmNDcxOGNhZGZkY2M=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-22T12:23:44Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:46:21Z"}, "message": "Checkpoint: Added abstraction over collection of projections into user type.\n\nI did not think I would need this in the MIR, but in general local\ndecls are going to need to support this. (That, or we need to be able\ndefine a least-upper-bound for a collection of types encountered via\nthe pattern compilation.)", "tree": {"sha": "8c3f1f4894114dc5f2c8e7bf17f766861f5d97f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3f1f4894114dc5f2c8e7bf17f766861f5d97f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b569caf267c595d2c2988941fb39f4718cadfdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b569caf267c595d2c2988941fb39f4718cadfdcc", "html_url": "https://github.com/rust-lang/rust/commit/b569caf267c595d2c2988941fb39f4718cadfdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b569caf267c595d2c2988941fb39f4718cadfdcc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "html_url": "https://github.com/rust-lang/rust/commit/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a"}], "stats": {"total": 201, "additions": 148, "deletions": 53}, "files": [{"sha": "724481da68132471e7d1e5c80c8d6169845deb47", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -608,3 +608,4 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<\n }\n \n impl_stable_hash_for!(struct mir::UserTypeProjection<'tcx> { base });\n+impl_stable_hash_for!(struct mir::UserTypeProjections<'tcx> { contents });"}, {"sha": "f96c3b432d609c46838477e7d91f8f476d66dfdf", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -710,7 +710,7 @@ pub struct LocalDecl<'tcx> {\n     /// e.g. via `let x: T`, then we carry that type here. The MIR\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n-    pub user_ty: Option<(UserTypeProjection<'tcx>, Span)>,\n+    pub user_ty: UserTypeProjections<'tcx>,\n \n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///\n@@ -882,7 +882,7 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability,\n             ty,\n-            user_ty: None,\n+            user_ty: UserTypeProjections::none(),\n             name: None,\n             source_info: SourceInfo {\n                 span,\n@@ -903,7 +903,7 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n-            user_ty: None,\n+            user_ty: UserTypeProjections::none(),\n             source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE,\n@@ -2449,6 +2449,42 @@ EnumLiftImpl! {\n     }\n }\n \n+/// A collection of projections into user types.\n+///\n+/// They are projections because a binding can occur a part of a\n+/// parent pattern that has been ascribed a type.\n+///\n+/// Its a collection because there can be multiple type ascriptions on\n+/// the path from the root of the pattern down to the binding itself.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UserTypeProjections<'tcx> {\n+    pub(crate) contents: Vec<(UserTypeProjection<'tcx>, Span)>,\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for UserTypeProjections<'tcx> {\n+        contents\n+    }\n+}\n+\n+impl<'tcx> UserTypeProjections<'tcx> {\n+    pub fn none() -> Self {\n+        UserTypeProjections { contents: vec![] }\n+    }\n+\n+    pub fn from_projections(projs: impl Iterator<Item=(UserTypeProjection<'tcx>, Span)>) -> Self {\n+        UserTypeProjections { contents: projs.collect() }\n+    }\n+\n+    pub fn projections_and_spans(&self) -> impl Iterator<Item=&(UserTypeProjection<'tcx>, Span)> {\n+        self.contents.iter()\n+    }\n+\n+    pub fn projections(&self) -> impl Iterator<Item=&UserTypeProjection<'tcx>> {\n+        self.contents.iter().map(|&(ref user_type, _span)| user_type)\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UserTypeProjection<'tcx> {\n     pub base: UserTypeAnnotation<'tcx>,"}, {"sha": "61eb565fb9a96f7700dd647eeb5c7dbd1a06901b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -743,7 +743,7 @@ macro_rules! make_mir_visitor {\n                     local,\n                     source_info: *source_info,\n                 });\n-                if let Some((user_ty, _)) = user_ty {\n+                for (user_ty, _) in & $($mutability)* user_ty.contents {\n                     self.visit_user_type_projection(user_ty);\n                 }\n                 self.visit_source_info(source_info);"}, {"sha": "828907ddc63a6f3d50e1f658b6412b58a3f1360a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 constant.ty,\n                 ty::Variance::Invariant,\n-                UserTypeProjection { base: user_ty },\n+                &UserTypeProjection { base: user_ty },\n                 location.to_locations(),\n                 ConstraintCategory::Boring,\n             ) {\n@@ -310,12 +310,12 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n \n-        if let Some((user_ty, span)) = local_decl.user_ty {\n+        for (user_ty, span) in local_decl.user_ty.projections_and_spans() {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 local_decl.ty,\n                 ty::Variance::Invariant,\n                 user_ty,\n-                Locations::All(span),\n+                Locations::All(*span),\n                 ConstraintCategory::TypeAnnotation,\n             ) {\n                 span_mirbug!(\n@@ -971,7 +971,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         a: Ty<'tcx>,\n         v: ty::Variance,\n-        user_ty: UserTypeProjection<'tcx>,\n+        user_ty: &UserTypeProjection<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1173,7 +1173,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     if let Err(terr) = self.relate_type_and_user_type(\n                         rv_ty,\n                         ty::Variance::Invariant,\n-                        UserTypeProjection { base: user_ty },\n+                        &UserTypeProjection { base: user_ty },\n                         location.to_locations(),\n                         ConstraintCategory::Boring,\n                     ) {\n@@ -1226,7 +1226,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::AscribeUserType(ref place, variance, box c_ty) => {\n+            StatementKind::AscribeUserType(ref place, variance, box ref c_ty) => {\n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n                 if let Err(terr) = self.relate_type_and_user_type(\n                     place_ty,"}, {"sha": "aa383a123b69ae5501f1d18ed5450be9228a7e87", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -151,10 +151,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             None, remainder_span, lint_level, slice::from_ref(&pattern),\n                             ArmHasGuard(false), None);\n \n-                        this.visit_bindings(&pattern, None, &mut |this, _, _, _, node, span, _, _| {\n-                            this.storage_live_binding(block, node, span, OutsideGuard);\n-                            this.schedule_drop_for_binding(node, span, OutsideGuard);\n-                        })\n+                        this.visit_bindings(\n+                            &pattern,\n+                            &PatternTypeProjections::none(),\n+                            &mut |this, _, _, _, node, span, _, _| {\n+                                this.storage_live_binding(block, node, span, OutsideGuard);\n+                                this.schedule_drop_for_binding(node, span, OutsideGuard);\n+                            })\n                     }\n \n                     // Enter the source scope, after evaluating the initializer."}, {"sha": "d2913872fca4589f7949600e12493539b0498133", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let ptr_temp = this.local_decls.push(LocalDecl {\n                         mutability: Mutability::Mut,\n                         ty: ptr_ty,\n-                        user_ty: None,\n+                        user_ty: UserTypeProjections::none(),\n                         name: None,\n                         source_info,\n                         visibility_scope: source_info.scope,"}, {"sha": "5479ccb2d84d59bcb0c074db054054f0dd02ccbc", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -18,6 +18,7 @@ use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use hair::*;\n+use hair::pattern::PatternTypeProjections;\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n@@ -415,7 +416,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let num_patterns = patterns.len();\n         self.visit_bindings(\n             &patterns[0],\n-            None,\n+            &PatternTypeProjections::none(),\n             &mut |this, mutability, name, mode, var, span, ty, user_ty| {\n                 if visibility_scope.is_none() {\n                     visibility_scope =\n@@ -491,7 +492,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub(super) fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<(PatternTypeProjection<'tcx>, Span)>,\n+        pattern_user_ty: &PatternTypeProjections<'tcx>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -500,7 +501,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<(PatternTypeProjection<'tcx>, Span)>,\n+            &PatternTypeProjections<'tcx>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -513,20 +514,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref subpattern,\n                 ..\n             } => {\n-                match mode {\n-                    BindingMode::ByValue => { }\n+                let pattern_ref_binding; // sidestep temp lifetime limitations.\n+                let binding_user_ty = match mode {\n+                    BindingMode::ByValue => { pattern_user_ty }\n                     BindingMode::ByRef(..) => {\n                         // If this is a `ref` binding (e.g., `let ref\n                         // x: T = ..`), then the type of `x` is not\n-                        // `T` but rather `&T`, so ignore\n-                        // `pattern_user_ty` for now.\n-                        //\n-                        // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n-                        pattern_user_ty = None;\n+                        // `T` but rather `&T`.\n+                        pattern_ref_binding = pattern_user_ty.ref_binding();\n+                        &pattern_ref_binding\n                     }\n-                }\n+                };\n \n-                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty);\n+                f(self, mutability, name, mode, var, pattern.span, ty, binding_user_ty);\n                 if let Some(subpattern) = subpattern.as_ref() {\n                     self.visit_bindings(subpattern, pattern_user_ty, f);\n                 }\n@@ -541,33 +541,39 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref slice,\n                 ref suffix,\n             } => {\n-                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n-                for subpattern in prefix.iter().chain(slice).chain(suffix) {\n-                    self.visit_bindings(subpattern, None, f);\n+                for subpattern in prefix {\n+                    self.visit_bindings(subpattern, &pattern_user_ty.index(), f);\n+                }\n+                for subpattern in slice {\n+                    self.visit_bindings(subpattern, &pattern_user_ty.subslice(), f);\n+                }\n+                for subpattern in suffix {\n+                    self.visit_bindings(subpattern, &pattern_user_ty.index(), f);\n                 }\n             }\n             PatternKind::Constant { .. } | PatternKind::Range { .. } | PatternKind::Wild => {}\n             PatternKind::Deref { ref subpattern } => {\n-                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n-                self.visit_bindings(subpattern, None, f);\n+                self.visit_bindings(subpattern, &pattern_user_ty.deref(), f);\n             }\n             PatternKind::AscribeUserType { ref subpattern, user_ty, user_ty_span } => {\n                 // This corresponds to something like\n                 //\n                 // ```\n                 // let A::<'a>(_): A<'static> = ...;\n                 // ```\n-                //\n-                // FIXME(#47184): handle `pattern_user_ty` somehow\n-                self.visit_bindings(subpattern, Some((user_ty, user_ty_span)), f)\n+                let pattern_user_ty = pattern_user_ty.add_user_type(user_ty, user_ty_span);\n+                self.visit_bindings(subpattern, &pattern_user_ty, f)\n             }\n-            PatternKind::Leaf { ref subpatterns }\n-            | PatternKind::Variant {\n-                ref subpatterns, ..\n-            } => {\n-                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n-                for subpattern in subpatterns {\n-                    self.visit_bindings(&subpattern.pattern, None, f);\n+\n+            PatternKind::Leaf { ref subpatterns } => {\n+                for (j, subpattern) in subpatterns.iter().enumerate() {\n+                    self.visit_bindings(&subpattern.pattern, &pattern_user_ty.leaf(j), f);\n+                }\n+            }\n+\n+            PatternKind::Variant { ref subpatterns, .. } => {\n+                for (j, subpattern) in subpatterns.iter().enumerate() {\n+                    self.visit_bindings(&subpattern.pattern, &pattern_user_ty.variant(j), f);\n                 }\n             }\n         }\n@@ -1470,7 +1476,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<(PatternTypeProjection<'tcx>, Span)>,\n+        user_var_ty: &PatternTypeProjections<'tcx>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n@@ -1489,7 +1495,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty: user_var_ty.map(|(ut, sp)| (ut.user_ty(), sp)),\n+            user_ty: user_var_ty.clone().user_ty(),\n             name: Some(name),\n             source_info,\n             visibility_scope,\n@@ -1522,7 +1528,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // See previous comment.\n                 mutability: Mutability::Not,\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n-                user_ty: None,\n+                user_ty: UserTypeProjections::none(),\n                 name: Some(name),\n                 source_info,\n                 visibility_scope,"}, {"sha": "5b4001f0652ad9a0b4857ae53a856559f7eb21a3", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -845,7 +845,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n-                user_ty: None,\n+                user_ty: UserTypeProjections::none(),\n                 source_info,\n                 visibility_scope: source_info.scope,\n                 name,"}, {"sha": "8a24851de8149f2bcb301b9772f76bf5c6e69d6a", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -27,7 +27,8 @@ use self::cx::Cx;\n pub mod cx;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternTypeProjection, FieldPattern};\n+pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n+pub(crate) use self::pattern::{PatternTypeProjection, PatternTypeProjections};\n \n mod util;\n "}, {"sha": "7a04c6e39df0b96a0c725855e5037894c56464d8", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -21,7 +21,7 @@ use const_eval::{const_field, const_variant_index};\n use hair::util::UserAnnotatedTyHelpers;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n-use rustc::mir::{UserTypeAnnotation, UserTypeProjection};\n+use rustc::mir::{UserTypeAnnotation, UserTypeProjection, UserTypeProjections};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::{Substs, Kind};\n@@ -65,6 +65,54 @@ pub struct Pattern<'tcx> {\n     pub kind: Box<PatternKind<'tcx>>,\n }\n \n+\n+#[derive(Clone, Debug)]\n+pub(crate) struct PatternTypeProjections<'tcx> {\n+    contents: Vec<(PatternTypeProjection<'tcx>, Span)>,\n+}\n+\n+impl<'tcx> PatternTypeProjections<'tcx> {\n+    pub(crate) fn user_ty(self) -> UserTypeProjections<'tcx> {\n+        UserTypeProjections::from_projections(\n+            self.contents.into_iter().map(|(pat_ty_proj, span)| (pat_ty_proj.user_ty(), span)))\n+    }\n+\n+    pub(crate) fn none() -> Self {\n+        PatternTypeProjections { contents: vec![] }\n+    }\n+\n+    pub(crate) fn ref_binding(&self) -> Self {\n+        // FIXME(#47184): ignore for now\n+        PatternTypeProjections { contents: vec![] }\n+    }\n+\n+    pub(crate) fn index(&self) -> Self {\n+        unimplemented!()\n+    }\n+\n+    pub(crate) fn subslice(&self) -> Self {\n+        unimplemented!()\n+    }\n+\n+    pub(crate) fn deref(&self) -> Self {\n+        unimplemented!()\n+    }\n+\n+    pub(crate) fn add_user_type(&self, user_ty: PatternTypeProjection<'tcx>, sp: Span) -> Self {\n+        let mut new = self.clone();\n+        new.contents.push((user_ty, sp));\n+        new\n+    }\n+\n+    pub(crate) fn leaf(&self, _index: usize) -> Self {\n+        unimplemented!()\n+    }\n+\n+    pub(crate) fn variant(&self, _index: usize) -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct PatternTypeProjection<'tcx>(UserTypeProjection<'tcx>);\n "}, {"sha": "6c32690cdb3406395143f08a3c14347a3f5054c2", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -142,7 +142,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     LocalDecl {\n         mutability,\n         ty,\n-        user_ty: None,\n+        user_ty: UserTypeProjections::none(),\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,"}, {"sha": "5889fabee9d6e25423db1b39348ebaeeee36bcef", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -303,7 +303,7 @@ fn replace_result_variable<'tcx>(\n     let new_ret = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n-        user_ty: None,\n+        user_ty: UserTypeProjections::none(),\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,\n@@ -658,7 +658,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     mir.local_decls[RETURN_PLACE] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_unit(),\n-        user_ty: None,\n+        user_ty: UserTypeProjections::none(),\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,\n@@ -676,7 +676,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n             ty: gen_ty,\n             mutbl: hir::Mutability::MutMutable,\n         }),\n-        user_ty: None,\n+        user_ty: UserTypeProjections::none(),\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,"}, {"sha": "c74492fe649361beaed581f8b695a3c8eb743388", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569caf267c595d2c2988941fb39f4718cadfdcc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=b569caf267c595d2c2988941fb39f4718cadfdcc", "patch": "@@ -502,7 +502,7 @@ fn write_scope_tree(\n                 local,\n                 var.ty\n             );\n-            if let Some(user_ty) = var.user_ty {\n+            for user_ty in var.user_ty.projections() {\n                 write!(indented_var, \" as {:?}\", user_ty).unwrap();\n             }\n             indented_var.push_str(\";\");"}]}