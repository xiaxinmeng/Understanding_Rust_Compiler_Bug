{"sha": "c7b414adb67d01037f43cf81477428c36836203c", "node_id": "C_kwDOAAsO6NoAKGM3YjQxNGFkYjY3ZDAxMDM3ZjQzY2Y4MTQ3NzQyOGMzNjgzNjIwM2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-24T21:36:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-28T04:18:37Z"}, "message": "Rename module compare_method -> compare_impl_item", "tree": {"sha": "8a5277308aa3a6d72d4eb76fad46eae8e76b79eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a5277308aa3a6d72d4eb76fad46eae8e76b79eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b414adb67d01037f43cf81477428c36836203c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b414adb67d01037f43cf81477428c36836203c", "html_url": "https://github.com/rust-lang/rust/commit/c7b414adb67d01037f43cf81477428c36836203c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b414adb67d01037f43cf81477428c36836203c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91613c5030320d21e566d2075c4f6abda7d97321", "url": "https://api.github.com/repos/rust-lang/rust/commits/91613c5030320d21e566d2075c4f6abda7d97321", "html_url": "https://github.com/rust-lang/rust/commit/91613c5030320d21e566d2075c4f6abda7d97321"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "b555b5706dbd0f7e6df5ab181bec50cb33322124", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c7b414adb67d01037f43cf81477428c36836203c", "patch": "@@ -1,8 +1,8 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n use crate::errors::LinkageType;\n \n-use super::compare_method::check_type_bounds;\n-use super::compare_method::{compare_impl_method, compare_impl_ty};\n+use super::compare_impl_item::check_type_bounds;\n+use super::compare_impl_item::{compare_impl_method, compare_impl_ty};\n use super::*;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};"}, {"sha": "ae3d78621e85f39f0caa474e44f5650868c4a529", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=c7b414adb67d01037f43cf81477428c36836203c", "patch": "@@ -71,7 +71,7 @@ pub(super) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_predicate_entailment(\n+    if let Err(_) = compare_method_predicate_entailment(\n         tcx,\n         impl_m,\n         impl_m_span,\n@@ -150,7 +150,7 @@ pub(super) fn compare_impl_method<'tcx>(\n /// Finally we register each of these predicates as an obligation and check that\n /// they hold.\n #[instrument(level = \"debug\", skip(tcx, impl_m_span, impl_trait_ref))]\n-fn compare_predicate_entailment<'tcx>(\n+fn compare_method_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     impl_m_span: Span,\n@@ -337,7 +337,7 @@ fn compare_predicate_entailment<'tcx>(\n     if !errors.is_empty() {\n         match check_implied_wf {\n             CheckImpliedWfMode::Check => {\n-                return compare_predicate_entailment(\n+                return compare_method_predicate_entailment(\n                     tcx,\n                     impl_m,\n                     impl_m_span,\n@@ -374,7 +374,7 @@ fn compare_predicate_entailment<'tcx>(\n         // becomes a hard error (i.e. ideally we'd just call `resolve_regions_and_report_errors`\n         match check_implied_wf {\n             CheckImpliedWfMode::Check => {\n-                return compare_predicate_entailment(\n+                return compare_method_predicate_entailment(\n                     tcx,\n                     impl_m,\n                     impl_m_span,\n@@ -407,7 +407,7 @@ enum CheckImpliedWfMode {\n     /// re-check with `Skip`, and emit a lint if it succeeds.\n     Check,\n     /// Skips checking implied well-formedness of the impl method, but will emit\n-    /// a lint if the `compare_predicate_entailment` succeeded. This means that\n+    /// a lint if the `compare_method_predicate_entailment` succeeded. This means that\n     /// the reason that we had failed earlier during `Check` was due to the impl\n     /// having stronger requirements than the trait.\n     Skip,\n@@ -550,13 +550,13 @@ pub(super) fn collect_trait_impl_trait_tys<'tcx>(\n     // Unify the whole function signature. We need to do this to fully infer\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n-    // `compare_predicate_entailment`.\n+    // `compare_method_predicate_entailment`.\n     match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n         Ok(()) => {}\n         Err(terr) => {\n-            // This function gets called during `compare_predicate_entailment` when normalizing a\n+            // This function gets called during `compare_method_predicate_entailment` when normalizing a\n             // signature that contains RPITIT. When the method signatures don't match, we have to\n-            // emit an error now because `compare_predicate_entailment` will not report the error\n+            // emit an error now because `compare_method_predicate_entailment` will not report the error\n             // when normalization fails.\n             let emitted = report_trait_method_mismatch(\n                 infcx,\n@@ -1645,7 +1645,7 @@ pub(super) fn compare_impl_ty<'tcx>(\n     })();\n }\n \n-/// The equivalent of [compare_predicate_entailment], but for associated types\n+/// The equivalent of [compare_method_predicate_entailment], but for associated types\n /// instead of associated functions.\n fn compare_type_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,", "previous_filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs"}, {"sha": "e3da4b7fcdb406fe9a9a61d71bc901f5d340da84", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=c7b414adb67d01037f43cf81477428c36836203c", "patch": "@@ -63,7 +63,7 @@ a type parameter).\n */\n \n mod check;\n-mod compare_method;\n+mod compare_impl_item;\n pub mod dropck;\n pub mod intrinsic;\n pub mod intrinsicck;\n@@ -94,7 +94,7 @@ use std::num::NonZeroU32;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n-use self::compare_method::collect_trait_impl_trait_tys;\n+use self::compare_impl_item::collect_trait_impl_trait_tys;\n use self::region::region_scope_tree;\n \n pub fn provide(providers: &mut Providers) {\n@@ -104,7 +104,7 @@ pub fn provide(providers: &mut Providers) {\n         check_mod_item_types,\n         region_scope_tree,\n         collect_trait_impl_trait_tys,\n-        compare_impl_const: compare_method::compare_impl_const_raw,\n+        compare_impl_const: compare_impl_item::compare_impl_const_raw,\n         ..*providers\n     };\n }"}, {"sha": "7f96c8d8b508c051b09a4af1e1828d8c6712ad52", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b414adb67d01037f43cf81477428c36836203c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c7b414adb67d01037f43cf81477428c36836203c", "patch": "@@ -1836,7 +1836,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n         // it's an actual definition. According to the comments (e.g. in\n-        // rustc_hir_analysis/check/compare_method.rs:compare_method_predicate_entailment) the latter\n+        // rustc_hir_analysis/check/compare_impl_item.rs:compare_predicate_entailment) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n         let body_owner_def_id =\n             self.tcx.hir().opt_local_def_id(cause.body_id).unwrap_or_else(|| {"}]}