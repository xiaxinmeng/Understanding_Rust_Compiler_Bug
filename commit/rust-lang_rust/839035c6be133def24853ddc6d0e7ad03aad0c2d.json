{"sha": "839035c6be133def24853ddc6d0e7ad03aad0c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOTAzNWM2YmUxMzNkZWYyNDg1M2RkYzZkMGU3YWQwM2FhZDBjMmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-08T06:57:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-08T06:57:49Z"}, "message": "Merge #1788\n\n1788: cleanup hir db imports r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7d44c7e64dab1426aacbea26ea447ca0df8347aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d44c7e64dab1426aacbea26ea447ca0df8347aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/839035c6be133def24853ddc6d0e7ad03aad0c2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddKZtCRBK7hj4Ov3rIwAAdHIIADdaIifkl2FnxImPoRHnmMSi\n8xS1eSJy9O4PHEJn43cmxEqxrlIfNZq/mqV7r6xlzK+bUSb5PHVsIvJeDdQze7rs\nkaJ0aXFmbJj3suHHq9MW5+nSCYDpdx4yZG2dcLYR3PbY6mJDQ+jXD0C2a13mU7q2\ng9HxFwklQJC3T0J/YFWeJgGDwOe6c53eyaPOaxKicucDCoXoxWdOhUxEICxudzbe\nZ03AwLOd+dbN7bGaXkvoDdNINaN/dQAWyIK3CvhQLASbGzW9v39qHHIDT2xWyFKD\nJrlAd3SWTTtFgZUyKpBDI6AF4JlYADvdWKh1ahePvVR5fWfz5NdTTDfykiLPOyU=\n=A0+N\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d44c7e64dab1426aacbea26ea447ca0df8347aa\nparent 787f1206a975ea82d7af878f2acaea15b08b5d36\nparent 6021a2a83a2e229847905c6d06ba412faddd1acb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567925869 +0000\ncommitter GitHub <noreply@github.com> 1567925869 +0000\n\nMerge #1788\n\n1788: cleanup hir db imports r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/839035c6be133def24853ddc6d0e7ad03aad0c2d", "html_url": "https://github.com/rust-lang/rust/commit/839035c6be133def24853ddc6d0e7ad03aad0c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/839035c6be133def24853ddc6d0e7ad03aad0c2d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787f1206a975ea82d7af878f2acaea15b08b5d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/787f1206a975ea82d7af878f2acaea15b08b5d36", "html_url": "https://github.com/rust-lang/rust/commit/787f1206a975ea82d7af878f2acaea15b08b5d36"}, {"sha": "6021a2a83a2e229847905c6d06ba412faddd1acb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6021a2a83a2e229847905c6d06ba412faddd1acb", "html_url": "https://github.com/rust-lang/rust/commit/6021a2a83a2e229847905c6d06ba412faddd1acb"}], "stats": {"total": 108, "additions": 65, "deletions": 43}, "files": [{"sha": "728046b0d4a63c60a0643e38f7fc6fde949e46a8", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -7,8 +7,10 @@ use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n \n use crate::{\n-    type_ref::TypeRef, AsName, AstDatabase, Crate, DefDatabase, Enum, EnumVariant, FieldSource,\n-    HasSource, HirDatabase, Name, Source, Struct, StructField, Union,\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    type_ref::TypeRef,\n+    AsName, Crate, Enum, EnumVariant, FieldSource, HasSource, Name, Source, Struct, StructField,\n+    Union,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]"}, {"sha": "2bac6122bd657eb5dcd5a69fcf1c0530d4d65aec", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -8,6 +8,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n     diagnostics::DiagnosticSink,\n     expr::{validation::ExprValidator, Body, BodySourceMap},\n     generics::HasGenericParams,\n@@ -29,7 +30,7 @@ use crate::{\n     },\n     type_ref::Mutability,\n     type_ref::TypeRef,\n-    AsName, AstDatabase, AstId, DefDatabase, Either, HasSource, HirDatabase, Name, Ty,\n+    AsName, AstId, Either, HasSource, Name, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which"}, {"sha": "99edc5814082e0e9c1b5e7c592571208984db153", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -3,8 +3,9 @@ use std::sync::Arc;\n use ra_syntax::ast;\n \n use crate::{\n-    AstDatabase, Const, DefDatabase, Enum, EnumVariant, FieldSource, Function, HasSource,\n-    HirDatabase, MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static, Struct,\n+    StructField, Trait, TypeAlias, Union,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]"}, {"sha": "c0cb27b4775cc5ed43c791e2c2c2ac5253b62f1c", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -4,9 +4,10 @@ use ra_syntax::{\n };\n \n use crate::{\n-    ids::AstItemDef, AstDatabase, Const, DefDatabase, Either, Enum, EnumVariant, FieldSource,\n-    Function, HasBody, HirDatabase, HirFileId, MacroDef, Module, ModuleSource, Static, Struct,\n-    StructField, Trait, TypeAlias, Union,\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    ids::AstItemDef,\n+    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]"}, {"sha": "60da336954c04eb6ffc0b0d238ed6832ad95aff7", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -3,7 +3,7 @@ use std::{any::Any, fmt};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange};\n use relative_path::RelativePathBuf;\n \n-use crate::{HirDatabase, HirFileId, Name, Source};\n+use crate::{db::HirDatabase, HirFileId, Name, Source};\n \n /// Diagnostic defines hir API for errors and warnings.\n ///"}, {"sha": "698fa671b5e859ed98858624c19e0513ab791b64", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -9,10 +9,11 @@ use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n+    db::HirDatabase,\n     path::GenericArgs,\n     ty::primitive::{UncertainFloatTy, UncertainIntTy},\n     type_ref::{Mutability, TypeRef},\n-    DefWithBody, Either, HasSource, HirDatabase, Name, Path, Resolver, Source,\n+    DefWithBody, Either, HasSource, Name, Path, Resolver, Source,\n };\n \n pub use self::scope::ExprScopes;"}, {"sha": "8bd041ff0886e6eb5ba12cfee1d526031fc440fb", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -9,12 +9,13 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n+    db::HirDatabase,\n     name::{AsName, Name, SELF_PARAM},\n     path::GenericArgs,\n     ty::primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n     type_ref::TypeRef,\n-    DefWithBody, Either, HirDatabase, HirFileId, MacroCallLoc, MacroFileKind, Mutability, Path,\n-    Resolver, Source,\n+    DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind, Mutability, Path, Resolver,\n+    Source,\n };\n \n use super::{"}, {"sha": "de0983a7ed439c8a232d61076f8593e5dae26359", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -4,8 +4,9 @@ use ra_arena::{impl_arena_id, Arena, RawId};\n use rustc_hash::FxHashMap;\n \n use crate::{\n+    db::HirDatabase,\n     expr::{Body, Expr, ExprId, Pat, PatId, Statement},\n-    DefWithBody, HirDatabase, Name,\n+    DefWithBody, Name,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "6a22e13189cdb254b04457da00c59e43fd209680", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -5,12 +5,13 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     adt::AdtDef,\n+    db::HirDatabase,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n     name,\n     path::{PathKind, PathSegment},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Function, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution,\n+    Function, ModuleDef, Name, Path, PerNs, Resolution,\n };\n \n use super::{Expr, ExprId, RecordLitField};"}, {"sha": "e0d0d4209a8a3d01fa95c4ed420aeaa59a03ed8e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -8,7 +8,10 @@ use ra_db::{salsa, FileId};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n \n-use crate::{AstDatabase, AstId, DefDatabase, FileAstId, InternDatabase, Module, Source};\n+use crate::{\n+    db::{AstDatabase, DefDatabase, InternDatabase},\n+    AstId, FileAstId, Module, Source,\n+};\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor"}, {"sha": "162ab02b1413cc5c3babc0196807881b188244de", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -9,13 +9,13 @@ use ra_syntax::{\n \n use crate::{\n     code_model::{Module, ModuleSource},\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n     generics::HasGenericParams,\n     ids::LocationCtx,\n     resolve::Resolver,\n     ty::Ty,\n     type_ref::TypeRef,\n-    AstDatabase, Const, DefDatabase, Function, HasSource, HirDatabase, HirFileId, Source, TraitRef,\n-    TypeAlias,\n+    Const, Function, HasSource, HirFileId, Source, TraitRef, TypeAlias,\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]"}, {"sha": "832fdf1f576503e183105e56828b74928de8f57c", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -4,8 +4,8 @@ use std::sync::Arc;\n use ra_syntax::{ast::AttrsOwner, SmolStr};\n \n use crate::{\n-    AstDatabase, Crate, DefDatabase, Enum, Function, HasSource, HirDatabase, ImplBlock, Module,\n-    ModuleDef, Static, Struct, Trait,\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "7c2a68992ce1e9f13ed9eed6448e7ba2fe258489", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -49,7 +49,6 @@ mod code_model;\n mod marks;\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase, InternDatabase},\n     ids::MacroFileKind,\n     name::AsName,\n     resolve::Resolver,"}, {"sha": "7de422128f1e94cfdbbad78279a6929049c120d1", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -65,9 +65,12 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::tested_by;\n \n use crate::{\n-    diagnostics::DiagnosticSink, either::Either, ids::MacroDefId,\n-    nameres::diagnostics::DefDiagnostic, AstDatabase, AstId, BuiltinType, Crate, DefDatabase,\n-    HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n+    db::{AstDatabase, DefDatabase},\n+    diagnostics::DiagnosticSink,\n+    either::Either,\n+    ids::MacroDefId,\n+    nameres::diagnostics::DefDiagnostic,\n+    AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n };\n \n pub(crate) use self::raw::{ImportSourceMap, RawItems};\n@@ -516,9 +519,10 @@ mod diagnostics {\n     use relative_path::RelativePathBuf;\n \n     use crate::{\n+        db::{AstDatabase, DefDatabase},\n         diagnostics::{DiagnosticSink, UnresolvedModule},\n         nameres::CrateModuleId,\n-        AstDatabase, AstId, DefDatabase,\n+        AstId,\n     };\n \n     #[derive(Debug, PartialEq, Eq)]"}, {"sha": "1c0d4369e4ca12857c151506982c5c6f87b7d1f6", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -4,6 +4,7 @@ use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n+    db::DefDatabase,\n     either::Either,\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n     name::MACRO_RULES,\n@@ -13,8 +14,8 @@ use crate::{\n         raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData, ModuleDef, PerNs,\n         ReachedFixedPoint, Resolution, ResolveMode,\n     },\n-    AstId, Const, DefDatabase, Enum, Function, HirFileId, MacroDef, Module, Name, Path, Static,\n-    Struct, Trait, TypeAlias, Union,\n+    AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, Static, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -699,7 +700,7 @@ mod tests {\n     use ra_db::SourceDatabase;\n \n     use super::*;\n-    use crate::{mock::MockDatabase, Crate, DefDatabase};\n+    use crate::{db::DefDatabase, mock::MockDatabase, Crate};\n     use ra_arena::Arena;\n     use rustc_hash::FxHashSet;\n "}, {"sha": "a9e9eb9e6539c17d8039cc3a2853266e7a488d9e", "filename": "crates/ra_hir/src/nameres/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -6,7 +6,7 @@ use ra_db::{FileId, SourceRoot};\n use ra_syntax::SmolStr;\n use relative_path::RelativePathBuf;\n \n-use crate::{DefDatabase, HirFileId, Name};\n+use crate::{db::DefDatabase, HirFileId, Name};\n \n #[derive(Clone, Copy)]\n pub(super) struct ParentModule<'a> {"}, {"sha": "7963736e0d2a466cf85ce3a0271c6f61533a45c0", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -8,8 +8,8 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    AsName, AstDatabase, AstIdMap, DefDatabase, Either, FileAstId, HirFileId, ModuleSource, Name,\n-    Path,\n+    db::{AstDatabase, DefDatabase},\n+    AsName, AstIdMap, Either, FileAstId, HirFileId, ModuleSource, Name, Path,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls)."}, {"sha": "afdcd5415bc5ec4ff99180a97fae1f684dfaecb5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -18,6 +18,7 @@ use ra_syntax::{\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n+    db::HirDatabase,\n     expr::{\n         self,\n         scope::{ExprScopes, ScopeId},\n@@ -27,9 +28,8 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::method_resolution::implements_trait,\n-    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirDatabase,\n-    HirFileId, MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static,\n-    Struct, Trait, Ty,\n+    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirFileId, MacroDef,\n+    Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static, Struct, Trait, Ty,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file."}, {"sha": "04574876dac1c0b53364e63ce4f7d191edf0a681", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -7,7 +7,7 @@ use std::{\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxNodePtr};\n \n-use crate::{AstDatabase, HirFileId};\n+use crate::{db::AstDatabase, HirFileId};\n \n /// `AstId` points to an AST node in any file.\n ///"}, {"sha": "4c2f7980ddb8b0c1173a8e7651df9de748e2b880", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -6,8 +6,10 @@ use std::sync::Arc;\n use ra_syntax::ast::{self, NameOwner};\n \n use crate::{\n-    ids::LocationCtx, name::AsName, AstDatabase, Const, DefDatabase, Function, HasSource, Module,\n-    Name, Trait, TypeAlias,\n+    db::{AstDatabase, DefDatabase},\n+    ids::LocationCtx,\n+    name::AsName,\n+    Const, Function, HasSource, Module, Name, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "5ba7cf2e0f566ac0853fa756dcfa9a1adc88b974", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -8,7 +8,7 @@ use std::iter::successors;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Ty, TypeWalk};\n-use crate::{name, HasGenericParams, HirDatabase, Resolver};\n+use crate::{db::HirDatabase, name, HasGenericParams, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "9244ff3cb9f0ae545a863ff13d2b3adea39abe0a", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -35,6 +35,7 @@ use super::{\n use crate::{\n     adt::VariantDef,\n     code_model::{ModuleDef::Trait, TypeAlias},\n+    db::HirDatabase,\n     diagnostics::DiagnosticSink,\n     expr::{\n         self, Array, BinaryOp, BindingAnnotation, Body, Expr, ExprId, Literal, Pat, PatId,\n@@ -50,8 +51,8 @@ use crate::{\n     },\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, HirDatabase, ImplItem, ModuleDef,\n-    Name, Path, StructField,\n+    AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, ImplItem, ModuleDef, Name, Path,\n+    StructField,\n };\n \n mod unify;\n@@ -1614,9 +1615,10 @@ impl Expectation {\n \n mod diagnostics {\n     use crate::{\n+        db::HirDatabase,\n         diagnostics::{DiagnosticSink, NoSuchField},\n         expr::ExprId,\n-        Function, HasSource, HirDatabase,\n+        Function, HasSource,\n     };\n \n     #[derive(Debug, PartialEq, Eq, Clone)]"}, {"sha": "0612298423edfe5effa8117239f418b54a184e34", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -14,15 +14,16 @@ use super::{\n };\n use crate::{\n     adt::VariantDef,\n+    db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n     nameres::Namespace,\n     path::{GenericArg, PathSegment},\n     resolve::{Resolution, Resolver},\n     ty::AdtDef,\n     type_ref::{TypeBound, TypeRef},\n-    BuiltinType, Const, Enum, EnumVariant, Function, HirDatabase, ModuleDef, Path, Static, Struct,\n-    StructField, Trait, TypeAlias, Union,\n+    BuiltinType, Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField,\n+    Trait, TypeAlias, Union,\n };\n \n impl Ty {"}, {"sha": "be63806d43347c1c9a647adb34d090a1bd5c9d11", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/839035c6be133def24853ddc6d0e7ad03aad0c2d/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=839035c6be133def24853ddc6d0e7ad03aad0c2d", "patch": "@@ -9,14 +9,15 @@ use rustc_hash::FxHashMap;\n \n use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n use crate::{\n+    db::HirDatabase,\n     generics::HasGenericParams,\n     impl_block::{ImplBlock, ImplId, ImplItem},\n     nameres::CrateModuleId,\n     resolve::Resolver,\n     traits::TraitItem,\n     ty::primitive::{FloatBitness, UncertainFloatTy, UncertainIntTy},\n     ty::{Ty, TypeCtor},\n-    Crate, Function, HirDatabase, Module, Name, Trait,\n+    Crate, Function, Module, Name, Trait,\n };\n \n /// This is used as a key for indexing impls."}]}