{"sha": "da14435ed2b97a96dc6df3f84df851c001a3e93f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMTQ0MzVlZDJiOTdhOTZkYzZkZjNmODRkZjg1MWMwMDFhM2U5M2Y=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-15T19:39:47Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-15T19:39:47Z"}, "message": "Updated clippy to account for changes from rust-lang/rust#44766", "tree": {"sha": "a9f8a0217ce0f65a115d999d2f1d4406fce2e4c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f8a0217ce0f65a115d999d2f1d4406fce2e4c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da14435ed2b97a96dc6df3f84df851c001a3e93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da14435ed2b97a96dc6df3f84df851c001a3e93f", "html_url": "https://github.com/rust-lang/rust/commit/da14435ed2b97a96dc6df3f84df851c001a3e93f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da14435ed2b97a96dc6df3f84df851c001a3e93f/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4779be5f5cc144157b13e461fc61e609cda98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4779be5f5cc144157b13e461fc61e609cda98c", "html_url": "https://github.com/rust-lang/rust/commit/6e4779be5f5cc144157b13e461fc61e609cda98c"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7cfe2c1cdcbcf8d27e2908acea238e25fa896810", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=da14435ed2b97a96dc6df3f84df851c001a3e93f", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            check_fn_inner(cx, &sig.decl, Some(id), &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n         }\n     }\n \n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),\n             };\n-            check_fn_inner(cx, &sig.decl, body, &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span);\n         }\n     }\n }"}, {"sha": "fd888d23f8cce7c75276da89e53bdf23d2c87068", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=da14435ed2b97a96dc6df3f84df851c001a3e93f", "patch": "@@ -719,7 +719,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 if name == method_name &&\n                    sig.decl.inputs.len() == n_args &&\n                    out_type.matches(&sig.decl.output) &&\n-                   self_kind.matches(first_arg_ty, first_arg, self_ty, false, &sig.generics) {\n+                   self_kind.matches(first_arg_ty, first_arg, self_ty, false, &implitem.generics) {\n                     span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n                         \"defining a method called `{}` on this type; consider implementing \\\n                          the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -733,7 +733,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             for &(ref conv, self_kinds) in &CONVENTIONS {\n                 if_let_chain! {[\n                     conv.check(&name.as_str()),\n-                    !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &sig.generics)),\n+                    !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics)),\n                 ], {\n                     let lint = if item.vis == hir::Visibility::Public {\n                         WRONG_PUB_SELF_CONVENTION"}, {"sha": "a566941a5029cd3fbd3df3d37d7f279105f40df5", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da14435ed2b97a96dc6df3f84df851c001a3e93f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=da14435ed2b97a96dc6df3f84df851c001a3e93f", "patch": "@@ -108,12 +108,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                 // can't be implemented by default\n                 return;\n             }\n-            if !sig.generics.ty_params.is_empty() {\n-                // when the result of `new()` depends on a type parameter we should not require\n-                // an\n-                // impl of `Default`\n-                return;\n-            }\n+            //TODO: There is no sig.generics anymore and I don't know how to fix this.\n+            //if !sig.generics.ty_params.is_empty() {\n+            //    // when the result of `new()` depends on a type parameter we should not require\n+            //    // an\n+            //    // impl of `Default`\n+            //    return;\n+            //}\n             if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx\n                     .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));"}]}