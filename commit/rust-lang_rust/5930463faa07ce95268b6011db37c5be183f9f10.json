{"sha": "5930463faa07ce95268b6011db37c5be183f9f10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MzA0NjNmYWEwN2NlOTUyNjhiNjAxMWRiMzdjNWJlMTgzZjlmMTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-28T19:53:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-28T19:53:12Z"}, "message": "Tidy up some drift in runtime logging, close #1380.", "tree": {"sha": "182c5933399311f7e082ce4d34213d9a8d68f40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/182c5933399311f7e082ce4d34213d9a8d68f40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5930463faa07ce95268b6011db37c5be183f9f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5930463faa07ce95268b6011db37c5be183f9f10", "html_url": "https://github.com/rust-lang/rust/commit/5930463faa07ce95268b6011db37c5be183f9f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5930463faa07ce95268b6011db37c5be183f9f10/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "html_url": "https://github.com/rust-lang/rust/commit/7fd62bb2b57e71899748bdb9fed24b5fc5474a67"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "715ced0ef7bbcfcc9fbb4d427df4443a1e3acfc5", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=5930463faa07ce95268b6011db37c5be183f9f10", "patch": "@@ -3,18 +3,20 @@\n #define RUST_LOG_H\n \n const uint32_t log_err = 0;\n-const uint32_t log_note = 1;\n+const uint32_t log_warn = 1;\n+const uint32_t log_info = 2;\n+const uint32_t log_debug = 3;\n \n #define LOG(task, field, ...)                                   \\\n-    DLOG_LVL(log_note, task, task->sched, field, __VA_ARGS__)\n+    DLOG_LVL(log_debug, task, task->sched, field, __VA_ARGS__)\n #define LOG_ERR(task, field, ...)                               \\\n     DLOG_LVL(log_err, task, task->sched, field, __VA_ARGS__)\n #define DLOG(sched, field, ...)                                   \\\n-    DLOG_LVL(log_note, NULL, sched, field, __VA_ARGS__)\n+    DLOG_LVL(log_debug, NULL, sched, field, __VA_ARGS__)\n #define DLOG_ERR(sched, field, ...)                               \\\n     DLOG_LVL(log_err, NULL, sched, field, __VA_ARGS__)\n #define LOGPTR(sched, msg, ptrval)                                \\\n-    DLOG_LVL(log_note, NULL, sched, mem, \"%s 0x%\" PRIxPTR, msg, ptrval)\n+    DLOG_LVL(log_debug, NULL, sched, mem, \"%s 0x%\" PRIxPTR, msg, ptrval)\n #define DLOG_LVL(lvl, task, sched, field, ...)                    \\\n     do {                                                        \\\n         rust_scheduler* _d_ = sched;                            \\\n@@ -24,7 +26,7 @@ const uint32_t log_note = 1;\n     } while (0)\n \n #define KLOG(k, field, ...) \\\n-    KLOG_LVL(k, field, log_note, __VA_ARGS__)\n+    KLOG_LVL(k, field, log_debug, __VA_ARGS__)\n #define KLOG_LVL(k, field, lvl, ...)                          \\\n     do {                                                      \\\n         if (log_rt_##field >= lvl) {                          \\"}, {"sha": "bf40fea36ee0ca807f8fe7e3b239a832db043a1c", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=5930463faa07ce95268b6011db37c5be183f9f10", "patch": "@@ -19,7 +19,7 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     ref_count(1),\n     interrupt_flag(0),\n     _log(srv, this),\n-    log_lvl(log_note),\n+    log_lvl(log_debug),\n     srv(srv),\n     // TODO: calculate a per scheduler name.\n     name(\"main\"),\n@@ -203,12 +203,12 @@ rust_scheduler::schedule_task(int id) {\n \n void\n rust_scheduler::log_state() {\n-    if (log_rt_task < log_note) return;\n+    if (log_rt_task < log_debug) return;\n \n     if (!running_tasks.is_empty()) {\n-        log(NULL, log_note, \"running tasks:\");\n+        log(NULL, log_debug, \"running tasks:\");\n         for (size_t i = 0; i < running_tasks.length(); i++) {\n-            log(NULL, log_note, \"\\t task: %s @0x%\" PRIxPTR\n+            log(NULL, log_debug, \"\\t task: %s @0x%\" PRIxPTR\n                 \" remaining: %\" PRId64 \" us\",\n                 running_tasks[i]->name,\n                 running_tasks[i],\n@@ -217,19 +217,19 @@ rust_scheduler::log_state() {\n     }\n \n     if (!blocked_tasks.is_empty()) {\n-        log(NULL, log_note, \"blocked tasks:\");\n+        log(NULL, log_debug, \"blocked tasks:\");\n         for (size_t i = 0; i < blocked_tasks.length(); i++) {\n-            log(NULL, log_note, \"\\t task: %s @0x%\" PRIxPTR \", blocked on: 0x%\"\n+            log(NULL, log_debug, \"\\t task: %s @0x%\" PRIxPTR \", blocked on: 0x%\"\n                 PRIxPTR \" '%s'\",\n                 blocked_tasks[i]->name, blocked_tasks[i],\n                 blocked_tasks[i]->cond, blocked_tasks[i]->cond_name);\n         }\n     }\n \n     if (!dead_tasks.is_empty()) {\n-        log(NULL, log_note, \"dead tasks:\");\n+        log(NULL, log_debug, \"dead tasks:\");\n         for (size_t i = 0; i < dead_tasks.length(); i++) {\n-            log(NULL, log_note, \"\\t task: %s 0x%\" PRIxPTR,\n+            log(NULL, log_debug, \"\\t task: %s 0x%\" PRIxPTR,\n                 dead_tasks[i]->name, dead_tasks[i]);\n         }\n     }"}, {"sha": "39fd4a07f8160df1a10b8a23d237c03ac3e1a803", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=5930463faa07ce95268b6011db37c5be183f9f10", "patch": "@@ -43,7 +43,15 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n \n     // Fields known only by the runtime:\n     rust_log _log;\n+\n+    // NB: this is used to filter *runtime-originating* debug\n+    // logging, on a per-scheduler basis. It's not likely what\n+    // you want to expose to the user in terms of per-task\n+    // or per-module logging control. By default all schedulers\n+    // are set to debug-level logging here, and filtered by\n+    // runtime category using the pseudo-modules ::rt::foo.\n     uint32_t log_lvl;\n+\n     rust_srv *srv;\n     const char *const name;\n "}, {"sha": "bd388ffff82acd6dbe06a4d676aca7786a1bf4f0", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5930463faa07ce95268b6011db37c5be183f9f10/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=5930463faa07ce95268b6011db37c5be183f9f10", "patch": "@@ -555,8 +555,6 @@ shape_cmp_type(int8_t *result, const type_desc *tydesc,\n extern \"C\" void\n shape_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     rust_task *task = rust_scheduler::get_task();\n-    if (task->sched->log_lvl < level)\n-        return;     // TODO: Don't evaluate at all?\n \n     shape::arena arena;\n     shape::type_param *params ="}]}