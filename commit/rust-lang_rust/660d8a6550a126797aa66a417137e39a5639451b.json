{"sha": "660d8a6550a126797aa66a417137e39a5639451b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MGQ4YTY1NTBhMTI2Nzk3YWE2NmE0MTcxMzdlMzlhNTYzOTQ1MWI=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-15T19:20:00Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-11-13T10:19:23Z"}, "message": "Eliminate some temporary vectors & Remove unnecessary mark_attr_used", "tree": {"sha": "208ce63e52538905eae1956329b59dac9bce396d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/208ce63e52538905eae1956329b59dac9bce396d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660d8a6550a126797aa66a417137e39a5639451b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660d8a6550a126797aa66a417137e39a5639451b", "html_url": "https://github.com/rust-lang/rust/commit/660d8a6550a126797aa66a417137e39a5639451b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660d8a6550a126797aa66a417137e39a5639451b/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38f8fb674e6a0a6fc358655c6ce6069235f621a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f8fb674e6a0a6fc358655c6ce6069235f621a", "html_url": "https://github.com/rust-lang/rust/commit/a38f8fb674e6a0a6fc358655c6ce6069235f621a"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "a1df1a63fc58d3f265cbb4bd602f8ca13913b1e6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/660d8a6550a126797aa66a417137e39a5639451b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d8a6550a126797aa66a417137e39a5639451b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=660d8a6550a126797aa66a417137e39a5639451b", "patch": "@@ -784,14 +784,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             }\n         };\n \n+        let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();\n         SyntaxExtension::new(\n             sess,\n             kind,\n             self.get_span(id, sess),\n             helper_attrs,\n             self.root.edition,\n             Symbol::intern(name),\n-            &self.get_item_attrs(id, sess),\n+            &attrs,\n         )\n     }\n \n@@ -1157,7 +1158,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 // within the crate. We only need this for fictive constructors,\n                                 // for other constructors correct visibilities\n                                 // were already encoded in metadata.\n-                                let attrs = self.get_item_attrs(def_id.index, sess);\n+                                let attrs: Vec<_> =\n+                                    self.get_item_attrs(def_id.index, sess).collect();\n                                 if sess.contains_name(&attrs, sym::non_exhaustive) {\n                                     let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n@@ -1283,8 +1285,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> {\n-        self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self).collect()\n+    fn get_item_variances(&'a self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {\n+        self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)\n     }\n \n     fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n@@ -1308,7 +1310,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Vec<ast::Attribute> {\n+    fn get_item_attrs(\n+        &'a self,\n+        node_id: DefIndex,\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = ast::Attribute> + 'a {\n         // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n@@ -1325,7 +1331,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .get(self, item_id)\n             .unwrap_or_else(Lazy::empty)\n             .decode((self, sess))\n-            .collect::<Vec<_>>()\n     }\n \n     fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<Symbol>> {"}, {"sha": "d24e1f5d4dd06dec072b287458e78d53f4f2fad4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/660d8a6550a126797aa66a417137e39a5639451b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d8a6550a126797aa66a417137e39a5639451b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=660d8a6550a126797aa66a417137e39a5639451b", "patch": "@@ -138,7 +138,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n     item_attrs => { tcx.arena.alloc_from_iter(\n-        cdata.get_item_attrs(def_id.index, tcx.sess).into_iter()\n+        cdata.get_item_attrs(def_id.index, tcx.sess)\n     ) }\n     fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n@@ -415,11 +415,7 @@ impl CStore {\n \n         let span = data.get_span(id.index, sess);\n \n-        // Mark the attrs as used\n-        let attrs = data.get_item_attrs(id.index, sess);\n-        for attr in attrs.iter() {\n-            sess.mark_attr_used(attr);\n-        }\n+        let attrs: Vec<_> = data.get_item_attrs(id.index, sess).collect();\n \n         let ident = data.item_ident(id.index, sess);\n \n@@ -428,7 +424,7 @@ impl CStore {\n                 ident,\n                 id: ast::DUMMY_NODE_ID,\n                 span,\n-                attrs: attrs.to_vec(),\n+                attrs,\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n                 vis: ast::Visibility {\n                     span: span.shrink_to_lo(),"}]}