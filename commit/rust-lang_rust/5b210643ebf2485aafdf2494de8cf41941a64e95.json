{"sha": "5b210643ebf2485aafdf2494de8cf41941a64e95", "node_id": "C_kwDOAAsO6NoAKDViMjEwNjQzZWJmMjQ4NWFhZmRmMjQ5NGRlOGNmNDE5NDFhNjRlOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T17:12:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T17:12:14Z"}, "message": "Auto merge of #83908 - Flying-Toast:master, r=davidtwco\n\nAdd enum_intrinsics_non_enums lint\n\nThere is a clippy lint to prevent calling [`mem::discriminant`](https://doc.rust-lang.org/std/mem/fn.discriminant.html) with a non-enum type. I think the lint is worthy of being included in rustc, given that `discriminant::<T>()` where `T` is a non-enum has an unspecified return value, and there are no valid use cases where you'd actually want this.\n\nI've also made the lint check [variant_count](https://doc.rust-lang.org/core/mem/fn.variant_count.html) (#73662).\n\ncloses #83899", "tree": {"sha": "60ecf0b4cd6f526c9e5d02474b2c7e82ac233760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ecf0b4cd6f526c9e5d02474b2c7e82ac233760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "html_url": "https://github.com/rust-lang/rust/commit/5b210643ebf2485aafdf2494de8cf41941a64e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "html_url": "https://github.com/rust-lang/rust/commit/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b"}, {"sha": "f4836768be12a0cd3a6bd8afc551ae836a87d973", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4836768be12a0cd3a6bd8afc551ae836a87d973", "html_url": "https://github.com/rust-lang/rust/commit/f4836768be12a0cd3a6bd8afc551ae836a87d973"}], "stats": {"total": 607, "additions": 292, "deletions": 315}, "files": [{"sha": "876245747f64a50acf8a94f702fd3bfc176a9978", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -0,0 +1,106 @@\n+use crate::{context::LintContext, LateContext, LateLintPass};\n+use rustc_hir as hir;\n+use rustc_middle::ty::{fold::TypeFoldable, Ty};\n+use rustc_span::{symbol::sym, Span};\n+\n+declare_lint! {\n+    /// The `enum_intrinsics_non_enums` lint detects calls to\n+    /// intrinsic functions that require an enum ([`core::mem::discriminant`],\n+    /// [`core::mem::variant_count`]), but are called with a non-enum type.\n+    ///\n+    /// [`core::mem::discriminant`]: https://doc.rust-lang.org/core/mem/fn.discriminant.html\n+    /// [`core::mem::variant_count`]: https://doc.rust-lang.org/core/mem/fn.variant_count.html\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(enum_intrinsics_non_enums)]\n+    /// core::mem::discriminant::<i32>(&123);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In order to accept any enum, the `mem::discriminant` and\n+    /// `mem::variant_count` functions are generic over a type `T`.\n+    /// This makes it technically possible for `T` to be a non-enum,\n+    /// in which case the return value is unspecified.\n+    ///\n+    /// This lint prevents such incorrect usage of these functions.\n+    ENUM_INTRINSICS_NON_ENUMS,\n+    Deny,\n+    \"detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types\"\n+}\n+\n+declare_lint_pass!(EnumIntrinsicsNonEnums => [ENUM_INTRINSICS_NON_ENUMS]);\n+\n+/// Returns `true` if we know for sure that the given type is not an enum. Note that for cases where\n+/// the type is generic, we can't be certain if it will be an enum so we have to assume that it is.\n+fn is_non_enum(t: Ty<'_>) -> bool {\n+    !t.is_enum() && !t.potentially_needs_subst()\n+}\n+\n+fn enforce_mem_discriminant(\n+    cx: &LateContext<'_>,\n+    func_expr: &hir::Expr<'_>,\n+    expr_span: Span,\n+    args_span: Span,\n+) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, expr_span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::discriminant` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .span_note(\n+                    args_span,\n+                    &format!(\n+                        \"the argument to `discriminant` should be a \\\n+                            reference to an enum, but it was passed \\\n+                            a reference to a `{}`, which is not an enum.\",\n+                        ty_param,\n+                    ),\n+                )\n+                .emit();\n+        });\n+    }\n+}\n+\n+fn enforce_mem_variant_count(cx: &LateContext<'_>, func_expr: &hir::Expr<'_>, span: Span) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::variant_count` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .note(&format!(\n+                    \"the type parameter of `variant_count` should \\\n+                            be an enum, but it was instantiated with \\\n+                            the type `{}`, which is not an enum.\",\n+                    ty_param,\n+                ))\n+                .emit();\n+        });\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for EnumIntrinsicsNonEnums {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n+        if let hir::ExprKind::Call(ref func, ref args) = expr.kind {\n+            if let hir::ExprKind::Path(ref qpath) = func.kind {\n+                if let Some(def_id) = cx.qpath_res(qpath, func.hir_id).opt_def_id() {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_discriminant, def_id) {\n+                        enforce_mem_discriminant(cx, func, expr.span, args[0].span);\n+                    } else if cx.tcx.is_diagnostic_item(sym::mem_variant_count, def_id) {\n+                        enforce_mem_variant_count(cx, func, expr.span);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f684a0fe5128658eaaa61dd955d505b5d80b24f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -47,6 +47,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod early;\n+mod enum_intrinsics_non_enums;\n mod internal;\n mod late;\n mod levels;\n@@ -76,6 +77,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n@@ -168,6 +170,7 @@ macro_rules! late_lint_passes {\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n                 NonPanicFmt: NonPanicFmt,\n                 NoopMethodCall: NoopMethodCall,\n+                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n                 NamedAsmLabels: NamedAsmLabels,\n             ]"}, {"sha": "6c889e88a592d49237446947818ee7ddb8bf40b9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -816,6 +816,7 @@ symbols! {\n         mem_size_of,\n         mem_size_of_val,\n         mem_uninitialized,\n+        mem_variant_count,\n         mem_zeroed,\n         member_constraints,\n         memory,"}, {"sha": "894ae10e1b4bae80af9b05996d8e6aa04e10c2c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -1053,6 +1053,7 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n #[inline(always)]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+#[rustc_diagnostic_item = \"mem_variant_count\"]\n pub const fn variant_count<T>() -> usize {\n     intrinsics::variant_count::<T>()\n }"}, {"sha": "50eaeeb4685009e7d69c8bfa26cd3c4f5bf66afa", "filename": "src/test/ui/consts/const-variant-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, enum_intrinsics_non_enums)]\n #![feature(variant_count)]\n #![feature(never_type)]\n "}, {"sha": "65dc9166330d1e701386426fcbe985ea58ecce8e", "filename": "src/test/ui/enum-discriminant/discriminant_value-wrapper.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(enum_intrinsics_non_enums)]\n+\n use std::mem;\n \n enum ADT {"}, {"sha": "8ad337064e5bf34a01df2873517bb203300eb5ca", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -0,0 +1,67 @@\n+// Test the enum_intrinsics_non_enums lint.\n+\n+#![feature(variant_count)]\n+\n+use std::mem::{discriminant, variant_count};\n+\n+enum SomeEnum {\n+    A,\n+    B,\n+}\n+\n+struct SomeStruct;\n+\n+fn generic_discriminant<T>(v: &T) {\n+    discriminant::<T>(v);\n+}\n+\n+fn generic_variant_count<T>() -> usize {\n+    variant_count::<T>()\n+}\n+\n+fn test_discriminant() {\n+    discriminant(&SomeEnum::A);\n+    generic_discriminant(&SomeEnum::B);\n+\n+    discriminant(&());\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&SomeEnum::B);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&SomeStruct);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&123u32);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&123i8);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+}\n+\n+fn test_variant_count() {\n+    variant_count::<SomeEnum>();\n+    generic_variant_count::<SomeEnum>();\n+\n+    variant_count::<&str>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<*const u8>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<()>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<&SomeEnum>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+}\n+\n+fn main() {\n+    test_discriminant();\n+    test_variant_count();\n+\n+    // The lint ignores cases where the type is generic, so these should be\n+    // allowed even though their return values are unspecified\n+    generic_variant_count::<SomeStruct>();\n+    generic_discriminant::<SomeStruct>(&SomeStruct);\n+}"}, {"sha": "bec9fb62efac8be6d8a47f39c946f0cb79d62374", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -0,0 +1,95 @@\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:5\n+   |\n+LL |     discriminant(&());\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(enum_intrinsics_non_enums)]` on by default\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `()`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:18\n+   |\n+LL |     discriminant(&());\n+   |                  ^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:5\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&SomeEnum`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:18\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:5\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `SomeStruct`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:18\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |                  ^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:5\n+   |\n+LL |     discriminant(&123u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `u32`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:18\n+   |\n+LL |     discriminant(&123u32);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:5\n+   |\n+LL |     discriminant(&&123i8);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&i8`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:18\n+   |\n+LL |     discriminant(&&123i8);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:46:5\n+   |\n+LL |     variant_count::<&str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&str`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:49:5\n+   |\n+LL |     variant_count::<*const u8>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `*const u8`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:52:5\n+   |\n+LL |     variant_count::<()>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `()`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:55:5\n+   |\n+LL |     variant_count::<&SomeEnum>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&SomeEnum`, which is not an enum.\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "e700e5f0d736e7ca056dc0fdf0a355c429c07d38", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -1873,10 +1873,10 @@ Released 2019-01-17\n \n [2e26fdc2...b2601be](https://github.com/rust-lang/rust-clippy/compare/2e26fdc2...b2601be)\n \n-* New lints: [`slow_vector_initialization`], [`mem_discriminant_non_enum`],\n+* New lints: [`slow_vector_initialization`], `mem_discriminant_non_enum`,\n   [`redundant_clone`], [`wildcard_dependencies`],\n   [`into_iter_on_ref`], `into_iter_on_array`, [`deprecated_cfg_attr`],\n-  [`mem_discriminant_non_enum`], [`cargo_common_metadata`]\n+  [`cargo_common_metadata`]\n * Add support for `u128` and `i128` to integer related lints\n * Add float support to `mistyped_literal_suffixes`\n * Fix false positives in `use_self`\n@@ -2839,7 +2839,6 @@ Released 2018-09-13\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n-[`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n [`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default"}, {"sha": "6a3ee35b41a4ba361018295205059784a15e9a64", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -127,7 +127,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n     LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),"}, {"sha": "bbe47a0e772f7b6e5318b6af7b99f926ff3d6d70", "filename": "src/tools/clippy/clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -36,7 +36,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),"}, {"sha": "b0be3b653664cd8f51ad4ea09b2bc6d77d7188ae", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -241,7 +241,6 @@ store.register_lints(&[\n     matches::SINGLE_MATCH_ELSE,\n     matches::WILDCARD_ENUM_MATCH_ARM,\n     matches::WILDCARD_IN_OR_PATTERNS,\n-    mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n     mem_forget::MEM_FORGET,\n     mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n     mem_replace::MEM_REPLACE_WITH_DEFAULT,"}, {"sha": "5534f9c94f367fe6a2de3d1aab5fa91846534c17", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -266,7 +266,6 @@ mod map_unit_fn;\n mod match_on_vec_items;\n mod match_result_ok;\n mod matches;\n-mod mem_discriminant;\n mod mem_forget;\n mod mem_replace;\n mod methods;\n@@ -600,7 +599,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n-    store.register_late_pass(|| Box::new(mem_discriminant::MemDiscriminant));\n     store.register_late_pass(|| Box::new(mem_forget::MemForget));\n     store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n     store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n@@ -850,6 +848,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n     ls.register_renamed(\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\");\n+    ls.register_renamed(\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "59176c4b846633caa7fc7a5e0e39162a7fc3916d", "filename": "src/tools/clippy/clippy_lints/src/mem_discriminant.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,82 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::walk_ptrs_ty_depth;\n-use clippy_utils::{match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls of `mem::discriminant()` on a non-enum type.\n-    ///\n-    /// ### Why is this bad?\n-    /// The value of `mem::discriminant()` on non-enum types\n-    /// is unspecified.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::mem;\n-    ///\n-    /// mem::discriminant(&\"hello\");\n-    /// mem::discriminant(&&Some(2));\n-    /// ```\n-    pub MEM_DISCRIMINANT_NON_ENUM,\n-    correctness,\n-    \"calling `mem::descriminant` on non-enum type\"\n-}\n-\n-declare_lint_pass!(MemDiscriminant => [MEM_DISCRIMINANT_NON_ENUM]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MemDiscriminant {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(func, func_args) = expr.kind;\n-            // is `mem::discriminant`\n-            if let ExprKind::Path(ref func_qpath) = func.kind;\n-            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-            if match_def_path(cx, def_id, &paths::MEM_DISCRIMINANT);\n-            // type is non-enum\n-            let ty_param = cx.typeck_results().node_substs(func.hir_id).type_at(0);\n-            if !ty_param.is_enum();\n-\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    MEM_DISCRIMINANT_NON_ENUM,\n-                    expr.span,\n-                    &format!(\"calling `mem::discriminant` on non-enum type `{}`\", ty_param),\n-                    |diag| {\n-                        // if this is a reference to an enum, suggest dereferencing\n-                        let (base_ty, ptr_depth) = walk_ptrs_ty_depth(ty_param);\n-                        if ptr_depth >= 1 && base_ty.is_enum() {\n-                            let param = &func_args[0];\n-\n-                            // cancel out '&'s first\n-                            let mut derefs_needed = ptr_depth;\n-                            let mut cur_expr = param;\n-                            while derefs_needed > 0  {\n-                                if let ExprKind::AddrOf(BorrowKind::Ref, _, inner_expr) = cur_expr.kind {\n-                                    derefs_needed -= 1;\n-                                    cur_expr = inner_expr;\n-                                } else {\n-                                    break;\n-                                }\n-                            }\n-\n-                            let derefs = \"*\".repeat(derefs_needed);\n-                            diag.span_suggestion(\n-                                param.span,\n-                                \"try dereferencing\",\n-                                format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    },\n-                )\n-            }\n-        }\n-    }\n-}"}, {"sha": "69a8f286d050d398dc19f78e0252a8d31f67d62f", "filename": "src/tools/clippy/tests/ui/mem_discriminant.fixed", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.fixed?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,45 +0,0 @@\n-// run-rustfix\n-\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-\n-    let ro = &Some(3);\n-    let rro = &ro;\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(*rro);\n-\n-    macro_rules! mem_discriminant_but_in_a_macro {\n-        ($param:expr) => {\n-            mem::discriminant($param)\n-        };\n-    }\n-\n-    mem_discriminant_but_in_a_macro!(*rro);\n-\n-    let rrrrro = &&&rro;\n-    mem::discriminant(****rrrrro);\n-    mem::discriminant(****rrrrro);\n-\n-    // ok\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(****rrrrro);\n-}"}, {"sha": "55db50fcdc733d4a0180df3ff1eedf535045711d", "filename": "src/tools/clippy/tests/ui/mem_discriminant.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,45 +0,0 @@\n-// run-rustfix\n-\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&&Some(2));\n-    mem::discriminant(&&None::<u8>);\n-    mem::discriminant(&&Foo::One(5));\n-    mem::discriminant(&&Foo::Two(5));\n-\n-    let ro = &Some(3);\n-    let rro = &ro;\n-    mem::discriminant(&ro);\n-    mem::discriminant(rro);\n-    mem::discriminant(&rro);\n-\n-    macro_rules! mem_discriminant_but_in_a_macro {\n-        ($param:expr) => {\n-            mem::discriminant($param)\n-        };\n-    }\n-\n-    mem_discriminant_but_in_a_macro!(&rro);\n-\n-    let rrrrro = &&&rro;\n-    mem::discriminant(&rrrrro);\n-    mem::discriminant(*rrrrro);\n-\n-    // ok\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(****rrrrro);\n-}"}, {"sha": "36a225b759484da68bd6f98fa1f1f4c8cfdf216f", "filename": "src/tools/clippy/tests/ui/mem_discriminant.stderr", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant.stderr?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,94 +0,0 @@\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:14:5\n-   |\n-LL |     mem::discriminant(&&Some(2));\n-   |     ^^^^^^^^^^^^^^^^^^---------^\n-   |                       |\n-   |                       help: try dereferencing: `&Some(2)`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/mem_discriminant.rs:3:9\n-   |\n-LL | #![deny(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<u8>`\n-  --> $DIR/mem_discriminant.rs:15:5\n-   |\n-LL |     mem::discriminant(&&None::<u8>);\n-   |     ^^^^^^^^^^^^^^^^^^------------^\n-   |                       |\n-   |                       help: try dereferencing: `&None::<u8>`\n-\n-error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:16:5\n-   |\n-LL |     mem::discriminant(&&Foo::One(5));\n-   |     ^^^^^^^^^^^^^^^^^^-------------^\n-   |                       |\n-   |                       help: try dereferencing: `&Foo::One(5)`\n-\n-error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:17:5\n-   |\n-LL |     mem::discriminant(&&Foo::Two(5));\n-   |     ^^^^^^^^^^^^^^^^^^-------------^\n-   |                       |\n-   |                       help: try dereferencing: `&Foo::Two(5)`\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:21:5\n-   |\n-LL |     mem::discriminant(&ro);\n-   |     ^^^^^^^^^^^^^^^^^^---^\n-   |                       |\n-   |                       help: try dereferencing: `ro`\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:22:5\n-   |\n-LL |     mem::discriminant(rro);\n-   |     ^^^^^^^^^^^^^^^^^^---^\n-   |                       |\n-   |                       help: try dereferencing: `*rro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:23:5\n-   |\n-LL |     mem::discriminant(&rro);\n-   |     ^^^^^^^^^^^^^^^^^^----^\n-   |                       |\n-   |                       help: try dereferencing: `*rro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:27:13\n-   |\n-LL |             mem::discriminant($param)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     mem_discriminant_but_in_a_macro!(&rro);\n-   |     ---------------------------------------\n-   |     |                                |\n-   |     |                                help: try dereferencing: `*rro`\n-   |     in this macro invocation\n-   |\n-   = note: this error originates in the macro `mem_discriminant_but_in_a_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:34:5\n-   |\n-LL |     mem::discriminant(&rrrrro);\n-   |     ^^^^^^^^^^^^^^^^^^-------^\n-   |                       |\n-   |                       help: try dereferencing: `****rrrrro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:35:5\n-   |\n-LL |     mem::discriminant(*rrrrro);\n-   |     ^^^^^^^^^^^^^^^^^^-------^\n-   |                       |\n-   |                       help: try dereferencing: `****rrrrro`\n-\n-error: aborting due to 10 previous errors\n-"}, {"sha": "e245d3257d55d02a5639ec09761a8a8af87f58f2", "filename": "src/tools/clippy/tests/ui/mem_discriminant_unfixable.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,16 +0,0 @@\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-struct A(Foo);\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&\"hello\");\n-    mem::discriminant(&A(Foo::One(0)));\n-}"}, {"sha": "e2de3776f2c911ac0f4684790f5a2e9162b9fbc5", "filename": "src/tools/clippy/tests/ui/mem_discriminant_unfixable.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_discriminant_unfixable.stderr?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1,20 +0,0 @@\n-error: calling `mem::discriminant` on non-enum type `&str`\n-  --> $DIR/mem_discriminant_unfixable.rs:14:5\n-   |\n-LL |     mem::discriminant(&\"hello\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/mem_discriminant_unfixable.rs:1:9\n-   |\n-LL | #![deny(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: calling `mem::discriminant` on non-enum type `A`\n-  --> $DIR/mem_discriminant_unfixable.rs:15:5\n-   |\n-LL |     mem::discriminant(&A(Foo::One(0)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a66c2e587c8736111e067f1b2dd8a41d583840a5", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cognitive_complexity)]\n+#![warn(enum_intrinsics_non_enums)]\n \n #[warn(clippy::module_name_repetitions)]\n fn main() {}"}, {"sha": "fa81201a2daf305fd675ddf65668882cdb842419", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::mem_discriminant_non_enum)]\n \n #[warn(clippy::stutter)]\n fn main() {}"}, {"sha": "05c7854074c60cd3ba9291173c7c70421cf17ccf", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b210643ebf2485aafdf2494de8cf41941a64e95/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=5b210643ebf2485aafdf2494de8cf41941a64e95", "patch": "@@ -6,23 +6,29 @@ LL | #![warn(clippy::cyclomatic_complexity)]\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n+error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n+  --> $DIR/rename.rs:11:9\n+   |\n+LL | #![warn(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n+\n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:12:8\n+  --> $DIR/rename.rs:13:8\n    |\n LL | #[warn(clippy::stutter)]\n    |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:15:8\n+  --> $DIR/rename.rs:16:8\n    |\n LL | #[warn(clippy::new_without_default_derive)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:18:8\n+  --> $DIR/rename.rs:19:8\n    |\n LL | #[warn(clippy::const_static_lifetime)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}