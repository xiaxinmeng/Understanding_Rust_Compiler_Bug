{"sha": "e4ff9f71dbb8c3edaa855928442954a06f2d19de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZmY5ZjcxZGJiOGMzZWRhYTg1NTkyODQ0Mjk1NGEwNmYyZDE5ZGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-17T22:51:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T00:22:18Z"}, "message": "Port a bunch of code new-visitor; all of these ports were\nstraightforward uses of `visit_all_items`. In some cases I had to remove\nempty `visit_item` calls that were just to suppress visiting nested\nitems.", "tree": {"sha": "b3ca9b8d34568929d0baa31702048cbe48d16866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ca9b8d34568929d0baa31702048cbe48d16866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ff9f71dbb8c3edaa855928442954a06f2d19de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff9f71dbb8c3edaa855928442954a06f2d19de", "html_url": "https://github.com/rust-lang/rust/commit/e4ff9f71dbb8c3edaa855928442954a06f2d19de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff9f71dbb8c3edaa855928442954a06f2d19de/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14562d51568218a4a7d84a0ac8622dac748ca07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14562d51568218a4a7d84a0ac8622dac748ca07", "html_url": "https://github.com/rust-lang/rust/commit/e14562d51568218a4a7d84a0ac8622dac748ca07"}], "stats": {"total": 631, "additions": 286, "deletions": 345}, "files": [{"sha": "9c2aa584aabcebdfd257d321e368bd80248b7c85", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -37,7 +37,7 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use syntax::util::small_vector::SmallVector;\n-use rustc_front::visit;\n+use rustc_front::intravisit::Visitor;\n use rustc_front::hir;\n use log;\n \n@@ -53,10 +53,9 @@ pub struct CrateReader<'a> {\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n }\n \n-impl<'a, 'b, 'v> visit::Visitor<'v> for LocalCrateReader<'a, 'b> {\n-    fn visit_item(&mut self, a: &hir::Item) {\n+impl<'a, 'b, 'hir> Visitor<'hir> for LocalCrateReader<'a, 'b> {\n+    fn visit_item(&mut self, a: &'hir hir::Item) {\n         self.process_item(a);\n-        visit::walk_item(self, a);\n     }\n }\n \n@@ -716,7 +715,7 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n     // etc.\n     pub fn read_crates(&mut self, krate: &hir::Crate) {\n         self.process_crate(krate);\n-        visit::walk_crate(self, krate);\n+        krate.visit_all_items(self);\n         self.creader.inject_allocator_crate();\n \n         if log_enabled!(log::INFO) {"}, {"sha": "e543d8708b5714de9ba8934c5d7ea2b0c8202197", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -46,8 +46,8 @@ use syntax;\n use rbml::writer::Encoder;\n \n use rustc_front::hir;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::Visitor;\n+use rustc_front::intravisit;\n use front::map::{LinkedPath, PathElem, PathElems};\n use front::map as ast_map;\n \n@@ -431,11 +431,12 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n     debug!(\"(encoding info for module) encoding info for module ID {}\", id);\n \n     // Encode info about all the module children.\n-    for item in &md.items {\n+    for item_id in &md.item_ids {\n         rbml_w.wr_tagged_u64(tag_mod_child,\n-                             def_to_u64(ecx.tcx.map.local_def_id(item.id)));\n+                             def_to_u64(ecx.tcx.map.local_def_id(item_id.id)));\n \n-        each_auxiliary_node_id(&**item, |auxiliary_node_id| {\n+        let item = ecx.tcx.map.expect_item(item_id.id);\n+        each_auxiliary_node_id(item, |auxiliary_node_id| {\n             rbml_w.wr_tagged_u64(tag_mod_child,\n                                  def_to_u64(ecx.tcx.map.local_def_id(auxiliary_node_id)));\n             true\n@@ -1468,25 +1469,26 @@ struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     index: &'a mut CrateIndex<'tcx>,\n }\n \n-impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n-    fn visit_expr(&mut self, ex: &hir::Expr) {\n-        visit::walk_expr(self, ex);\n+impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n+        intravisit::walk_expr(self, ex);\n         my_visit_expr(ex, self.rbml_w_for_visit_item, self.ecx, self.index);\n     }\n-    fn visit_item(&mut self, i: &hir::Item) {\n-        visit::walk_item(self, i);\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+        intravisit::walk_item(self, i);\n         my_visit_item(i, self.rbml_w_for_visit_item, self.ecx, self.index);\n     }\n-    fn visit_foreign_item(&mut self, ni: &hir::ForeignItem) {\n-        visit::walk_foreign_item(self, ni);\n+    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n+        intravisit::walk_foreign_item(self, ni);\n         my_visit_foreign_item(ni, self.rbml_w_for_visit_item, self.ecx, self.index);\n     }\n }\n \n fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n-                                   rbml_w: &mut Encoder,\n-                                   krate: &hir::Crate)\n+                                   rbml_w: &mut Encoder)\n                                    -> CrateIndex<'tcx> {\n+    let krate = ecx.tcx.map.krate();\n+\n     let mut index = CrateIndex {\n         items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n         xrefs: FnvHashMap()\n@@ -1503,11 +1505,11 @@ fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                         syntax::parse::token::intern(&ecx.link_meta.crate_name),\n                         hir::Public);\n \n-    visit::walk_crate(&mut EncodeVisitor {\n+    krate.visit_all_items(&mut EncodeVisitor {\n         index: &mut index,\n         ecx: ecx,\n         rbml_w_for_visit_item: &mut *rbml_w,\n-    }, krate);\n+    });\n \n     rbml_w.end_tag();\n     index\n@@ -1735,7 +1737,7 @@ fn encode_struct_field_attrs(ecx: &EncodeContext,\n     }\n \n     rbml_w.start_tag(tag_struct_fields);\n-    visit::walk_crate(&mut StructFieldVisitor { ecx: ecx, rbml_w: rbml_w }, krate);\n+    krate.visit_all_items(&mut StructFieldVisitor { ecx: ecx, rbml_w: rbml_w });\n     rbml_w.end_tag();\n }\n \n@@ -1756,7 +1758,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'tcx> {\n                     .push(impl_id);\n             }\n         }\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -1768,7 +1769,7 @@ fn encode_impls<'a>(ecx: &'a EncodeContext,\n         tcx: ecx.tcx,\n         impls: FnvHashMap()\n     };\n-    visit::walk_crate(&mut visitor, krate);\n+    krate.visit_all_items(&mut visitor);\n \n     rbml_w.start_tag(tag_impls);\n     for (trait_, trait_impls) in visitor.impls {\n@@ -1787,11 +1788,12 @@ fn encode_misc_info(ecx: &EncodeContext,\n                     rbml_w: &mut Encoder) {\n     rbml_w.start_tag(tag_misc_info);\n     rbml_w.start_tag(tag_misc_info_crate_items);\n-    for item in &krate.module.items {\n+    for item_id in &krate.module.item_ids {\n         rbml_w.wr_tagged_u64(tag_mod_child,\n-                             def_to_u64(ecx.tcx.map.local_def_id(item.id)));\n+                             def_to_u64(ecx.tcx.map.local_def_id(item_id.id)));\n \n-        each_auxiliary_node_id(&**item, |auxiliary_node_id| {\n+        let item = ecx.tcx.map.expect_item(item_id.id);\n+        each_auxiliary_node_id(item, |auxiliary_node_id| {\n             rbml_w.wr_tagged_u64(tag_mod_child,\n                                  def_to_u64(ecx.tcx.map.local_def_id(auxiliary_node_id)));\n             true\n@@ -2022,7 +2024,7 @@ fn encode_metadata_inner(wr: &mut Cursor<Vec<u8>>,\n     // Encode and index the items.\n     rbml_w.start_tag(tag_items);\n     i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();\n-    let index = encode_info_for_items(&ecx, &mut rbml_w, krate);\n+    let index = encode_info_for_items(&ecx, &mut rbml_w);\n     stats.item_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n     rbml_w.end_tag();\n "}, {"sha": "e621a4166d719ae0d6385d46b97eac09d253505d", "filename": "src/librustc/metadata/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmetadata%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Finline.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -13,7 +13,7 @@ use rustc_front::hir;\n use rustc_front::util::IdVisitor;\n use syntax::ast_util::{IdRange, IdRangeComputingVisitor, IdVisitingOperation};\n use syntax::ptr::P;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::Visitor;\n use self::InlinedItem::*;\n \n /// The data we save and restore about an inlined item or method.  This is not"}, {"sha": "3e2024fc76a82f8a9a31f0561294180a9fa2991a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -389,7 +389,7 @@ fn simplify_ast(ii: InlinedItemRef) -> InlinedItem {\n     match ii {\n         // HACK we're not dropping items.\n         InlinedItemRef::Item(i) => {\n-            InlinedItem::Item(fold::noop_fold_item(P(i.clone()), &mut fld))\n+            InlinedItem::Item(P(fold::noop_fold_item(i.clone(), &mut fld)))\n         }\n         InlinedItemRef::TraitItem(d, ti) => {\n             InlinedItem::TraitItem(d, fold::noop_fold_trait_item(P(ti.clone()), &mut fld))"}, {"sha": "e29cc04e65a1b3caf83165047a7588fcfc4d9906", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -41,7 +41,7 @@ use rustc_front::hir;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::feature_gate::UnstableFeatures;\n-use rustc_front::visit::{self, FnKind, Visitor};\n+use rustc_front::intravisit::{self, FnKind, Visitor};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n@@ -81,7 +81,7 @@ bitflags! {\n     }\n }\n \n-#[derive(Copy, Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n enum Mode {\n     Const,\n     ConstFn,\n@@ -190,7 +190,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n         let qualif = self.with_mode(mode, |this| {\n             this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, b));\n-            visit::walk_fn(this, fk, fd, b, s);\n+            intravisit::walk_fn(this, fk, fd, b, s);\n             this.qualif\n         });\n \n@@ -308,6 +308,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item(item={})\", self.tcx.map.node_to_string(i.id));\n+        assert_eq!(self.mode, Mode::Var);\n         match i.node {\n             hir::ItemStatic(_, hir::MutImmutable, ref expr) => {\n                 self.check_static_type(&**expr);\n@@ -328,7 +329,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 }\n             }\n             _ => {\n-                self.with_mode(Mode::Var, |v| visit::walk_item(v, i));\n+                intravisit::walk_item(self, i);\n             }\n         }\n     }\n@@ -339,10 +340,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 if let Some(ref expr) = *default {\n                     self.global_expr(Mode::Const, &*expr);\n                 } else {\n-                    visit::walk_trait_item(self, t);\n+                    intravisit::walk_trait_item(self, t);\n                 }\n             }\n-            _ => self.with_mode(Mode::Var, |v| visit::walk_trait_item(v, t)),\n+            _ => self.with_mode(Mode::Var, |v| intravisit::walk_trait_item(v, t)),\n         }\n     }\n \n@@ -351,7 +352,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n             hir::ImplItemKind::Const(_, ref expr) => {\n                 self.global_expr(Mode::Const, &*expr);\n             }\n-            _ => self.with_mode(Mode::Var, |v| visit::walk_impl_item(v, i)),\n+            _ => self.with_mode(Mode::Var, |v| intravisit::walk_impl_item(v, i)),\n         }\n     }\n \n@@ -386,7 +387,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ => visit::walk_pat(self, p)\n+            _ => intravisit::walk_pat(self, p)\n         }\n     }\n \n@@ -412,7 +413,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                            tail expressions\", self.msg());\n             }\n         }\n-        visit::walk_block(self, block);\n+        intravisit::walk_block(self, block);\n     }\n \n     fn visit_expr(&mut self, ex: &hir::Expr) {\n@@ -464,11 +465,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 if let Some(mutbl) = borrow {\n                     self.record_borrow(discr.id, mutbl);\n                 }\n-                visit::walk_expr(self, ex);\n+                intravisit::walk_expr(self, ex);\n             }\n             // Division by zero and overflow checking.\n             hir::ExprBinary(op, _, _) => {\n-                visit::walk_expr(self, ex);\n+                intravisit::walk_expr(self, ex);\n                 let div_or_rem = op.node == hir::BiDiv || op.node == hir::BiRem;\n                 match node_ty.sty {\n                     ty::TyUint(_) | ty::TyInt(_) if div_or_rem => {\n@@ -487,7 +488,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                     _ => {}\n                 }\n             }\n-            _ => visit::walk_expr(self, ex)\n+            _ => intravisit::walk_expr(self, ex)\n         }\n \n         // Handle borrows on (or inside the autorefs of) this expression.\n@@ -837,12 +838,12 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    visit::walk_crate(&mut CheckCrateVisitor {\n+    tcx.map.krate().visit_all_items(&mut CheckCrateVisitor {\n         tcx: tcx,\n         mode: Mode::Var,\n         qualif: ConstQualif::NOT_CONST,\n         rvalue_borrows: NodeMap()\n-    }, tcx.map.krate());\n+    });\n \n     tcx.sess.abort_if_errors();\n }"}, {"sha": "22e9df63d0185e6b8df6da11220bde4293ce4bfa", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -12,8 +12,7 @@ use self::Context::*;\n use session::Session;\n \n use syntax::codemap::Span;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -28,12 +27,12 @@ struct CheckLoopVisitor<'a> {\n }\n \n pub fn check_crate(sess: &Session, krate: &hir::Crate) {\n-    visit::walk_crate(&mut CheckLoopVisitor { sess: sess, cx: Normal }, krate)\n+    krate.visit_all_items(&mut CheckLoopVisitor { sess: sess, cx: Normal });\n }\n \n impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n     fn visit_item(&mut self, i: &hir::Item) {\n-        self.with_context(Normal, |v| visit::walk_item(v, i));\n+        self.with_context(Normal, |v| intravisit::walk_item(v, i));\n     }\n \n     fn visit_expr(&mut self, e: &hir::Expr) {\n@@ -50,7 +49,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n             }\n             hir::ExprBreak(_) => self.require_loop(\"break\", e.span),\n             hir::ExprAgain(_) => self.require_loop(\"continue\", e.span),\n-            _ => visit::walk_expr(self, e)\n+            _ => intravisit::walk_expr(self, e)\n         }\n     }\n }"}, {"sha": "3e6cf07d86f0b055415be50e5c3f4f3a39ea73c2", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -33,7 +33,7 @@ use std::iter::{FromIterator, IntoIterator, repeat};\n \n use rustc_front::hir;\n use rustc_front::hir::Pat;\n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n use rustc_front::util as front_util;\n use rustc_back::slice;\n \n@@ -155,15 +155,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    visit::walk_crate(&mut MatchCheckCtxt {\n+    tcx.map.krate().visit_all_items(&mut MatchCheckCtxt {\n         tcx: tcx,\n         param_env: tcx.empty_parameter_environment(),\n-    }, tcx.map.krate());\n+    });\n     tcx.sess.abort_if_errors();\n }\n \n fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n-    visit::walk_expr(cx, ex);\n+    intravisit::walk_expr(cx, ex);\n     match ex.node {\n         hir::ExprMatch(ref scrut, ref arms, source) => {\n             for arm in arms {\n@@ -986,7 +986,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n }\n \n fn check_local(cx: &mut MatchCheckCtxt, loc: &hir::Local) {\n-    visit::walk_local(cx, loc);\n+    intravisit::walk_local(cx, loc);\n \n     let pat = StaticInliner::new(cx.tcx, None).fold_pat(loc.pat.clone());\n     check_irrefutable(cx, &pat, false);\n@@ -1007,7 +1007,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n \n-    visit::walk_fn(cx, kind, decl, body, sp);\n+    intravisit::walk_fn(cx, kind, decl, body, sp);\n \n     for input in &decl.inputs {\n         check_irrefutable(cx, &input.pat, true);\n@@ -1187,10 +1187,10 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n             hir::PatIdent(_, _, Some(_)) => {\n                 let bindings_were_allowed = self.bindings_allowed;\n                 self.bindings_allowed = false;\n-                visit::walk_pat(self, pat);\n+                intravisit::walk_pat(self, pat);\n                 self.bindings_allowed = bindings_were_allowed;\n             }\n-            _ => visit::walk_pat(self, pat),\n+            _ => intravisit::walk_pat(self, pat),\n         }\n     }\n }"}, {"sha": "35adeae3e617ce4966ff461208d0553ccc8bbde7", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -20,21 +20,21 @@ use middle::ty;\n use syntax::ast;\n use rustc_front::hir;\n use syntax::codemap::Span;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n \n pub fn check_crate(tcx: &ty::ctxt,\n                    krate: &hir::Crate) {\n     let mut rvcx = RvalueContext { tcx: tcx };\n-    visit::walk_crate(&mut rvcx, krate);\n+    krate.visit_all_items(&mut rvcx);\n }\n \n struct RvalueContext<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n }\n \n-impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n     fn visit_fn(&mut self,\n-                fk: visit::FnKind<'v>,\n+                fk: intravisit::FnKind<'v>,\n                 fd: &'v hir::FnDecl,\n                 b: &'v hir::Block,\n                 s: Span,\n@@ -50,7 +50,7 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);\n         }\n-        visit::walk_fn(self, fk, fd, b, s)\n+        intravisit::walk_fn(self, fk, fd, b, s)\n     }\n }\n "}, {"sha": "85a3117196acf909c3d0ac7849234053ecdc601a", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -19,8 +19,7 @@ use util::nodemap::NodeMap;\n use syntax::{ast};\n use syntax::codemap::Span;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n \n use std::cell::RefCell;\n@@ -60,7 +59,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n             }\n             _ => {}\n         }\n-        visit::walk_item(self, it)\n+        intravisit::walk_item(self, it)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n@@ -74,7 +73,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n             }\n             _ => {}\n         }\n-        visit::walk_trait_item(self, ti)\n+        intravisit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n@@ -86,7 +85,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n             }\n             _ => {}\n         }\n-        visit::walk_impl_item(self, ii)\n+        intravisit::walk_impl_item(self, ii)\n     }\n }\n \n@@ -100,7 +99,7 @@ pub fn check_crate<'ast>(sess: &Session,\n         ast_map: ast_map,\n         discriminant_map: RefCell::new(NodeMap()),\n     };\n-    visit::walk_crate(&mut visitor, krate);\n+    krate.visit_all_items(&mut visitor);\n     sess.abort_if_errors();\n }\n \n@@ -197,13 +196,13 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n     fn visit_item(&mut self, it: &'ast hir::Item) {\n-        self.with_item_id_pushed(it.id, |v| visit::walk_item(v, it));\n+        self.with_item_id_pushed(it.id, |v| intravisit::walk_item(v, it));\n     }\n \n     fn visit_enum_def(&mut self, enum_definition: &'ast hir::EnumDef,\n                       generics: &'ast hir::Generics, item_id: ast::NodeId, _: Span) {\n         self.populate_enum_discriminants(enum_definition);\n-        visit::walk_enum_def(self, enum_definition, generics, item_id);\n+        intravisit::walk_enum_def(self, enum_definition, generics, item_id);\n     }\n \n     fn visit_variant(&mut self, variant: &'ast hir::Variant,\n@@ -222,16 +221,16 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n         // If `maybe_expr` is `None`, that's because no discriminant is\n         // specified that affects this variant. Thus, no risk of recursion.\n         if let Some(expr) = maybe_expr {\n-            self.with_item_id_pushed(expr.id, |v| visit::walk_expr(v, expr));\n+            self.with_item_id_pushed(expr.id, |v| intravisit::walk_expr(v, expr));\n         }\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n-        self.with_item_id_pushed(ti.id, |v| visit::walk_trait_item(v, ti));\n+        self.with_item_id_pushed(ti.id, |v| intravisit::walk_trait_item(v, ti));\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n-        self.with_item_id_pushed(ii.id, |v| visit::walk_impl_item(v, ii));\n+        self.with_item_id_pushed(ii.id, |v| intravisit::walk_impl_item(v, ii));\n     }\n \n     fn visit_expr(&mut self, e: &'ast hir::Expr) {\n@@ -285,6 +284,6 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n             },\n             _ => ()\n         }\n-        visit::walk_expr(self, e);\n+        intravisit::walk_expr(self, e);\n     }\n }"}, {"sha": "039c62a904c9b59ffca3fe4c9340c4dd3e197fb5", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -29,7 +29,7 @@ use util::nodemap::NodeMap;\n use syntax::{ast, abi};\n use rustc_front::hir::Expr;\n use rustc_front::hir;\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;"}, {"sha": "9abab6e04e0251eb977f13ac8a4922d7e94dd7b8", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -27,7 +27,7 @@ use syntax::print::pp;\n use syntax::print::pprust::PrintState;\n use util::nodemap::NodeMap;\n use rustc_front::hir;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::print::pprust;\n \n \n@@ -194,11 +194,11 @@ fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,\n             index: &'a mut NodeMap<Vec<CFGIndex>>,\n         }\n         let mut formals = Formals { entry: entry, index: index };\n-        visit::walk_fn_decl(&mut formals, decl);\n-        impl<'a, 'v> visit::Visitor<'v> for Formals<'a> {\n+        intravisit::walk_fn_decl(&mut formals, decl);\n+        impl<'a, 'v> intravisit::Visitor<'v> for Formals<'a> {\n             fn visit_pat(&mut self, p: &hir::Pat) {\n                 self.index.entry(p.id).or_insert(vec![]).push(self.entry);\n-                visit::walk_pat(self, p)\n+                intravisit::walk_pat(self, p)\n             }\n         }\n     }\n@@ -533,7 +533,7 @@ impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n \n     fn pretty_print_to<'b>(&self, wr: Box<io::Write + 'b>,\n                            blk: &hir::Block) -> io::Result<()> {\n-        let mut ps = pprust::rust_printer_annotated(wr, self);\n+        let mut ps = pprust::rust_printer_annotated(wr, self, None);\n         try!(ps.cbox(pprust::indent_unit));\n         try!(ps.ibox(0));\n         try!(ps.print_block(blk));"}, {"sha": "822faae772611f82c1a3b56385e4cf78f9f6e038", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -19,8 +19,8 @@ use middle::ty::MethodCall;\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::hir;\n-use rustc_front::visit;\n-use rustc_front::visit::{FnKind, Visitor};\n+use rustc_front::intravisit;\n+use rustc_front::intravisit::{FnKind, Visitor};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -94,7 +94,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             self.unsafe_context = UnsafeContext::new(SafeContext)\n         }\n \n-        visit::walk_fn(self, fn_kind, fn_decl, block, span);\n+        intravisit::walk_fn(self, fn_kind, fn_decl, block, span);\n \n         self.unsafe_context = old_unsafe_context\n     }\n@@ -133,7 +133,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             hir::DefaultBlock | hir::PushUnstableBlock | hir:: PopUnstableBlock => {}\n         }\n \n-        visit::walk_block(self, block);\n+        intravisit::walk_block(self, block);\n \n         self.unsafe_context = old_unsafe_context\n     }\n@@ -177,7 +177,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             _ => {}\n         }\n \n-        visit::walk_expr(self, expr);\n+        intravisit::walk_expr(self, expr);\n     }\n }\n \n@@ -187,5 +187,5 @@ pub fn check_crate(tcx: &ty::ctxt) {\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };\n \n-    visit::walk_crate(&mut visitor, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut visitor);\n }"}, {"sha": "11a28c0b5ea9a00db035e79f2c95ed63e8c08087", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n use syntax::abi::RustIntrinsic;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n use rustc_front::hir;\n \n pub fn check_crate(tcx: &ctxt) {\n@@ -29,7 +29,7 @@ pub fn check_crate(tcx: &ctxt) {\n         dummy_sized_ty: tcx.types.isize,\n         dummy_unsized_ty: tcx.mk_slice(tcx.types.isize),\n     };\n-    visit::walk_crate(&mut visitor, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut visitor);\n }\n \n struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {\n@@ -222,11 +222,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 let param_env = ty::ParameterEnvironment::for_item(self.tcx, id);\n                 self.param_envs.push(param_env);\n-                visit::walk_fn(self, fk, fd, b, s);\n+                intravisit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n             FnKind::Closure(..) => {\n-                visit::walk_fn(self, fk, fd, b, s);\n+                intravisit::walk_fn(self, fk, fd, b, s);\n             }\n         }\n \n@@ -255,7 +255,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n             }\n         }\n \n-        visit::walk_expr(self, expr);\n+        intravisit::walk_expr(self, expr);\n     }\n }\n "}, {"sha": "a37f62e52b819e789ad9f6751756f1f7e209400d", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -33,8 +33,7 @@ use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::Visitor;\n use rustc_front::hir;\n \n use std::iter::Enumerate;\n@@ -164,8 +163,6 @@ impl<'a, 'v, 'tcx> Visitor<'v> for LanguageItemCollector<'a, 'tcx> {\n                 self.collect_item(item_index, self.ast_map.local_def_id(item.id), item.span)\n             }\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -202,7 +199,7 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     }\n \n     pub fn collect_local_language_items(&mut self, krate: &hir::Crate) {\n-        visit::walk_crate(self, krate);\n+        krate.visit_all_items(self);\n     }\n \n     pub fn collect_external_language_items(&mut self) {"}, {"sha": "9b18b79d261558cef460286a84c85c31116c2201", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -127,7 +127,7 @@ use syntax::ptr::P;\n use rustc_front::hir::Expr;\n use rustc_front::hir;\n use rustc_front::print::pprust::{expr_to_string, block_to_string};\n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -192,7 +192,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    visit::walk_crate(&mut IrMaps::new(tcx), tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut IrMaps::new(tcx));\n     tcx.sess.abort_if_errors();\n }\n \n@@ -390,7 +390,7 @@ fn visit_fn(ir: &mut IrMaps,\n \n     // gather up the various local variables, significant expressions,\n     // and so forth:\n-    visit::walk_fn(&mut fn_maps, fk, decl, body, sp);\n+    intravisit::walk_fn(&mut fn_maps, fk, decl, body, sp);\n \n     // Special nodes and variables:\n     // - exit_ln represents the end of the fn, either by return or panic\n@@ -423,7 +423,7 @@ fn visit_local(ir: &mut IrMaps, local: &hir::Local) {\n           name: name\n         }));\n     });\n-    visit::walk_local(ir, local);\n+    intravisit::walk_local(ir, local);\n }\n \n fn visit_arm(ir: &mut IrMaps, arm: &hir::Arm) {\n@@ -439,7 +439,7 @@ fn visit_arm(ir: &mut IrMaps, arm: &hir::Arm) {\n             }));\n         })\n     }\n-    visit::walk_arm(ir, arm);\n+    intravisit::walk_arm(ir, arm);\n }\n \n fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n@@ -451,7 +451,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         if let DefLocal(..) = def {\n             ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         }\n-        visit::walk_expr(ir, expr);\n+        intravisit::walk_expr(ir, expr);\n       }\n       hir::ExprClosure(..) => {\n         // Interesting control flow (for loops can contain labeled\n@@ -474,17 +474,17 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         });\n         ir.set_captures(expr.id, call_caps);\n \n-        visit::walk_expr(ir, expr);\n+        intravisit::walk_expr(ir, expr);\n       }\n \n       // live nodes required for interesting control flow:\n       hir::ExprIf(..) | hir::ExprMatch(..) | hir::ExprWhile(..) | hir::ExprLoop(..) => {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n-        visit::walk_expr(ir, expr);\n+        intravisit::walk_expr(ir, expr);\n       }\n       hir::ExprBinary(op, _, _) if ::rustc_front::util::lazy_binop(op.node) => {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n-        visit::walk_expr(ir, expr);\n+        intravisit::walk_expr(ir, expr);\n       }\n \n       // otherwise, live nodes are not required:\n@@ -497,7 +497,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n       hir::ExprRange(..) => {\n-          visit::walk_expr(ir, expr);\n+          intravisit::walk_expr(ir, expr);\n       }\n     }\n }\n@@ -1383,7 +1383,7 @@ fn check_local(this: &mut Liveness, local: &hir::Local) {\n         }\n     }\n \n-    visit::walk_local(this, local);\n+    intravisit::walk_local(this, local);\n }\n \n fn check_arm(this: &mut Liveness, arm: &hir::Arm) {\n@@ -1393,21 +1393,21 @@ fn check_arm(this: &mut Liveness, arm: &hir::Arm) {\n     this.arm_pats_bindings(arm.pats.first().map(|p| &**p), |this, ln, var, sp, id| {\n         this.warn_about_unused(sp, id, ln, var);\n     });\n-    visit::walk_arm(this, arm);\n+    intravisit::walk_arm(this, arm);\n }\n \n fn check_expr(this: &mut Liveness, expr: &Expr) {\n     match expr.node {\n       hir::ExprAssign(ref l, _) => {\n         this.check_lvalue(&**l);\n \n-        visit::walk_expr(this, expr);\n+        intravisit::walk_expr(this, expr);\n       }\n \n       hir::ExprAssignOp(_, ref l, _) => {\n         this.check_lvalue(&**l);\n \n-        visit::walk_expr(this, expr);\n+        intravisit::walk_expr(this, expr);\n       }\n \n       hir::ExprInlineAsm(ref ia) => {\n@@ -1421,7 +1421,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n           this.visit_expr(&**out);\n         }\n \n-        visit::walk_expr(this, expr);\n+        intravisit::walk_expr(this, expr);\n       }\n \n       // no correctness conditions related to liveness\n@@ -1435,7 +1435,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(..) | hir::ExprBox(..) |\n       hir::ExprRange(..) => {\n-        visit::walk_expr(this, expr);\n+        intravisit::walk_expr(this, expr);\n       }\n     }\n }\n@@ -1532,7 +1532,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             _ => {\n                 // For other kinds of lvalues, no checks are required,\n                 // and any embedded expressions are actually rvalues\n-                visit::walk_expr(self, expr);\n+                intravisit::walk_expr(self, expr);\n             }\n         }\n     }"}, {"sha": "86237a2321a722550b6e6aa9e18c5b9480d7e85f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -28,8 +28,8 @@ use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n use rustc_front::hir;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::Visitor;\n+use rustc_front::intravisit;\n \n // Returns true if the given set of generics implies that the item it's\n // associated with must be inlined.\n@@ -87,9 +87,7 @@ struct ReachableContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n-\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n-\n         match expr.node {\n             hir::ExprPath(..) => {\n                 let def = match self.tcx.def_map.borrow().get(&expr.id) {\n@@ -138,12 +136,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n             _ => {}\n         }\n \n-        visit::walk_expr(self, expr)\n-    }\n-\n-    fn visit_item(&mut self, _item: &hir::Item) {\n-        // Do not recurse into items. These items will be added to the worklist\n-        // and recursed into manually if necessary.\n+        intravisit::walk_expr(self, expr)\n     }\n }\n \n@@ -260,7 +253,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 match item.node {\n                     hir::ItemFn(_, _, _, _, _, ref search_block) => {\n                         if item_might_be_inlined(&*item) {\n-                            visit::walk_block(self, &**search_block)\n+                            intravisit::walk_block(self, &**search_block)\n                         }\n                     }\n \n@@ -292,7 +285,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         self.visit_expr(&*expr);\n                     }\n                     hir::MethodTraitItem(_, Some(ref body)) => {\n-                        visit::walk_block(self, body);\n+                        intravisit::walk_block(self, body);\n                     }\n                     hir::TypeTraitItem(..) => {}\n                 }\n@@ -305,7 +298,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ImplItemKind::Method(ref sig, ref body) => {\n                         let did = self.tcx.map.get_parent_did(search_item);\n                         if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n-                            visit::walk_block(self, body)\n+                            intravisit::walk_block(self, body)\n                         }\n                     }\n                     hir::ImplItemKind::Type(_) => {}\n@@ -350,8 +343,6 @@ impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n                 }\n             }\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -381,8 +372,7 @@ pub fn find_reachable(tcx: &ty::ctxt,\n             exported_items: exported_items,\n             worklist: &mut reachable_context.worklist,\n         };\n-\n-        visit::walk_crate(&mut collect_private_impl_items, tcx.map.krate());\n+        tcx.map.krate().visit_all_items(&mut collect_private_impl_items);\n     }\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch."}, {"sha": "45b8ac4a16dae9469f12893dd89952e523ad484f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -30,7 +30,7 @@ use syntax::codemap::{self, Span};\n use syntax::ast::{self, NodeId};\n \n use rustc_front::hir;\n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n use rustc_front::hir::{Block, Item, FnDecl, Arm, Pat, Stmt, Expr, Local};\n use rustc_front::util::stmt_id;\n \n@@ -696,7 +696,7 @@ fn resolve_block(visitor: &mut RegionResolutionVisitor, blk: &hir::Block) {\n \n     {\n         // This block should be kept approximately in sync with\n-        // `visit::walk_block`. (We manually walk the block, rather\n+        // `intravisit::walk_block`. (We manually walk the block, rather\n         // than call `walk_block`, in order to maintain precise\n         // index information.)\n \n@@ -735,7 +735,7 @@ fn resolve_arm(visitor: &mut RegionResolutionVisitor, arm: &hir::Arm) {\n         visitor.terminating_scopes.insert(expr.id);\n     }\n \n-    visit::walk_arm(visitor, arm);\n+    intravisit::walk_arm(visitor, arm);\n }\n \n fn resolve_pat(visitor: &mut RegionResolutionVisitor, pat: &hir::Pat) {\n@@ -750,7 +750,7 @@ fn resolve_pat(visitor: &mut RegionResolutionVisitor, pat: &hir::Pat) {\n         _ => { }\n     }\n \n-    visit::walk_pat(visitor, pat);\n+    intravisit::walk_pat(visitor, pat);\n }\n \n fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &hir::Stmt) {\n@@ -767,7 +767,7 @@ fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &hir::Stmt) {\n \n     let prev_parent = visitor.cx.parent;\n     visitor.cx.parent = stmt_extent;\n-    visit::walk_stmt(visitor, stmt);\n+    intravisit::walk_stmt(visitor, stmt);\n     visitor.cx.parent = prev_parent;\n }\n \n@@ -844,7 +844,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &hir::Expr) {\n         }\n     }\n \n-    visit::walk_expr(visitor, expr);\n+    intravisit::walk_expr(visitor, expr);\n     visitor.cx = prev_cx;\n }\n \n@@ -935,7 +935,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n         None => { }\n     }\n \n-    visit::walk_local(visitor, local);\n+    intravisit::walk_local(visitor, local);\n \n     /// True if `pat` match the `P&` nonterminal:\n     ///\n@@ -1080,7 +1080,7 @@ fn resolve_item(visitor: &mut RegionResolutionVisitor, item: &hir::Item) {\n         var_parent: ROOT_CODE_EXTENT,\n         parent: ROOT_CODE_EXTENT\n     };\n-    visit::walk_item(visitor, item);\n+    intravisit::walk_item(visitor, item);\n     visitor.create_item_scope_if_needed(item.id);\n     visitor.cx = prev_cx;\n     visitor.terminating_scopes = prev_ts;\n@@ -1119,8 +1119,8 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n         var_parent: fn_decl_scope,\n     };\n \n-    visit::walk_fn_decl(visitor, decl);\n-    visit::walk_fn_kind(visitor, kind);\n+    intravisit::walk_fn_decl(visitor, decl);\n+    intravisit::walk_fn_kind(visitor, kind);\n \n     // The body of the every fn is a root scope.\n     visitor.cx = Context {\n@@ -1181,12 +1181,12 @@ impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        visit::walk_impl_item(self, ii);\n+        intravisit::walk_impl_item(self, ii);\n         self.create_item_scope_if_needed(ii.id);\n     }\n \n     fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n-        visit::walk_trait_item(self, ti);\n+        intravisit::walk_trait_item(self, ti);\n         self.create_item_scope_if_needed(ti.id);\n     }\n \n@@ -1237,7 +1237,7 @@ pub fn resolve_crate(sess: &Session, krate: &hir::Crate) -> RegionMaps {\n             },\n             terminating_scopes: NodeSet()\n         };\n-        visit::walk_crate(&mut visitor, krate);\n+        krate.visit_all_items(&mut visitor);\n     }\n     return maps;\n }"}, {"sha": "1452cf2cd7667ee5e7b3ef34cc81ba7ce516ed43", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -32,7 +32,7 @@ use util::nodemap::NodeMap;\n \n use rustc_front::hir;\n use rustc_front::print::pprust::lifetime_to_string;\n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum DefRegion {\n@@ -95,30 +95,28 @@ static ROOT_SCOPE: ScopeChain<'static> = RootScope;\n \n pub fn krate(sess: &Session, krate: &hir::Crate, def_map: &DefMap) -> NamedRegionMap {\n     let mut named_region_map = NodeMap();\n-    visit::walk_crate(&mut LifetimeContext {\n+    krate.visit_all_items(&mut LifetimeContext {\n         sess: sess,\n         named_region_map: &mut named_region_map,\n         scope: &ROOT_SCOPE,\n         def_map: def_map,\n         trait_ref_hack: false,\n         labels_in_fn: vec![],\n-    }, krate);\n+    });\n     sess.abort_if_errors();\n     named_region_map\n }\n \n impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        // Items save/restore the set of labels. This way inner items\n-        // can freely reuse names, be they loop labels or lifetimes.\n-        let saved = replace(&mut self.labels_in_fn, vec![]);\n+        assert!(self.labels_in_fn.is_empty());\n \n         // Items always introduce a new root scope\n         self.with(RootScope, |_, this| {\n             match item.node {\n                 hir::ItemFn(..) => {\n                     // Fn lifetimes get added in visit_fn below:\n-                    visit::walk_item(this, item);\n+                    intravisit::walk_item(this, item);\n                 }\n                 hir::ItemExternCrate(_) |\n                 hir::ItemUse(_) |\n@@ -128,7 +126,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 hir::ItemStatic(..) |\n                 hir::ItemConst(..) => {\n                     // These sorts of items have no lifetime parameters at all.\n-                    visit::walk_item(this, item);\n+                    intravisit::walk_item(this, item);\n                 }\n                 hir::ItemTy(_, ref generics) |\n                 hir::ItemEnum(_, ref generics) |\n@@ -140,14 +138,14 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     let early_scope = EarlyScope(subst::TypeSpace, lifetimes, &ROOT_SCOPE);\n                     this.with(early_scope, |old_scope, this| {\n                         this.check_lifetime_defs(old_scope, lifetimes);\n-                        visit::walk_item(this, item);\n+                        intravisit::walk_item(this, item);\n                     });\n                 }\n             }\n         });\n \n-        // Done traversing the item; restore saved set of labels.\n-        replace(&mut self.labels_in_fn, saved);\n+        // Done traversing the item; remove any labels it created\n+        self.labels_in_fn.truncate(0);\n     }\n \n     fn visit_foreign_item(&mut self, item: &hir::ForeignItem) {\n@@ -160,11 +158,11 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n             match item.node {\n                 hir::ForeignItemFn(_, ref generics) => {\n                     this.visit_early_late(subst::FnSpace, generics, |this| {\n-                        visit::walk_foreign_item(this, item);\n+                        intravisit::walk_foreign_item(this, item);\n                     })\n                 }\n                 hir::ForeignItemStatic(..) => {\n-                    visit::walk_foreign_item(this, item);\n+                    intravisit::walk_foreign_item(this, item);\n                 }\n             }\n         });\n@@ -199,7 +197,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     // a bare fn has no bounds, so everything\n                     // contained within is scoped within its binder.\n                     this.check_lifetime_defs(old_scope, &c.lifetimes);\n-                    visit::walk_ty(this, ty);\n+                    intravisit::walk_ty(this, ty);\n                 });\n             }\n             hir::TyPath(None, ref path) => {\n@@ -212,12 +210,12 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                         });\n                     }\n                     _ => {\n-                        visit::walk_ty(self, ty);\n+                        intravisit::walk_ty(self, ty);\n                     }\n                 }\n             }\n             _ => {\n-                visit::walk_ty(self, ty)\n+                intravisit::walk_ty(self, ty)\n             }\n         }\n     }\n@@ -230,9 +228,9 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         if let hir::MethodTraitItem(ref sig, None) = trait_item.node {\n             self.visit_early_late(\n                 subst::FnSpace, &sig.generics,\n-                |this| visit::walk_trait_item(this, trait_item))\n+                |this| intravisit::walk_trait_item(this, trait_item))\n         } else {\n-            visit::walk_trait_item(self, trait_item);\n+            intravisit::walk_trait_item(self, trait_item);\n         }\n \n         replace(&mut self.labels_in_fn, saved);\n@@ -241,7 +239,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_block(&mut self, b: &hir::Block) {\n         self.with(BlockScope(region::DestructionScopeData::new(b.id),\n                              self.scope),\n-                  |_, this| visit::walk_block(this, b));\n+                  |_, this| intravisit::walk_block(this, b));\n     }\n \n     fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n@@ -317,7 +315,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 for lifetime in &trait_ref.bound_lifetimes {\n                     this.visit_lifetime_def(lifetime);\n                 }\n-                visit::walk_path(this, &trait_ref.trait_ref.path)\n+                intravisit::walk_path(this, &trait_ref.trait_ref.path)\n             })\n         } else {\n             self.visit_trait_ref(&trait_ref.trait_ref)\n@@ -417,7 +415,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n \n                 self.labels_in_fn.push((label, ex.span));\n             }\n-            visit::walk_expr(self, ex)\n+            intravisit::walk_expr(self, ex)\n         }\n \n         fn visit_item(&mut self, _: &hir::Item) {\n@@ -463,7 +461,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n }\n \n impl<'a> LifetimeContext<'a> {\n-    // This is just like visit::walk_fn, except that it extracts the\n+    // This is just like intravisit::walk_fn, except that it extracts the\n     // labels of the function body and swaps them in before visiting\n     // the function body itself.\n     fn walk_fn<'b>(&mut self,\n@@ -473,16 +471,16 @@ impl<'a> LifetimeContext<'a> {\n                    _span: Span) {\n         match fk {\n             FnKind::ItemFn(_, generics, _, _, _, _) => {\n-                visit::walk_fn_decl(self, fd);\n+                intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }\n             FnKind::Method(_, sig, _) => {\n-                visit::walk_fn_decl(self, fd);\n+                intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n             FnKind::Closure(..) => {\n-                visit::walk_fn_decl(self, fd);\n+                intravisit::walk_fn_decl(self, fd);\n             }\n         }\n "}, {"sha": "ee999c91097e71d5f42dfe55a2940add7f17d48b", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -18,8 +18,8 @@ use middle::lang_items;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n-use rustc_front::visit::Visitor;\n-use rustc_front::visit;\n+use rustc_front::intravisit::Visitor;\n+use rustc_front::intravisit;\n use rustc_front::hir;\n \n use std::collections::HashSet;\n@@ -50,7 +50,7 @@ pub fn check_crate(krate: &hir::Crate,\n \n     {\n         let mut cx = Context { sess: sess, items: items };\n-        visit::walk_crate(&mut cx, krate);\n+        krate.visit_all_items(&mut cx);\n     }\n     verify(sess, items);\n }\n@@ -114,7 +114,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             None => {}\n             Some(lang_item) => self.register(&lang_item, i.span),\n         }\n-        visit::walk_foreign_item(self, i)\n+        intravisit::walk_foreign_item(self, i)\n     }\n }\n "}, {"sha": "00f58c6af91554d8e63e6b1234e40be39413db70", "filename": "src/librustc/plugin/build.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fplugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Fplugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fbuild.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -14,8 +14,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::diagnostic;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::Visitor;\n use rustc_front::hir;\n \n struct RegistrarFinder {\n@@ -30,8 +29,6 @@ impl<'v> Visitor<'v> for RegistrarFinder {\n                 self.registrars.push((item.id, item.span));\n             }\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -40,7 +37,7 @@ pub fn find_plugin_registrar(diagnostic: &diagnostic::SpanHandler,\n                              krate: &hir::Crate)\n                              -> Option<ast::NodeId> {\n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n-    visit::walk_crate(&mut finder, krate);\n+    krate.visit_all_items(&mut finder);\n \n     match finder.registrars.len() {\n         0 => None,"}, {"sha": "c6f58ef28802befe850fc85618111325008f6e24", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -21,8 +21,8 @@ use std::path::Path;\n use std::time::Duration;\n \n use rustc_front::hir;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit;\n+use rustc_front::intravisit::Visitor;\n \n // The name of the associated type for `Fn` return types\n pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n@@ -169,7 +169,7 @@ impl<'v, P> Visitor<'v> for LoopQueryVisitor<P> where P: FnMut(&hir::Expr_) -> b\n           // Skip inner loops, since a break in the inner loop isn't a\n           // break inside the outer loop\n           hir::ExprLoop(..) | hir::ExprWhile(..) => {}\n-          _ => visit::walk_expr(self, e)\n+          _ => intravisit::walk_expr(self, e)\n         }\n     }\n }\n@@ -181,7 +181,7 @@ pub fn loop_query<P>(b: &hir::Block, p: P) -> bool where P: FnMut(&hir::Expr_) -\n         p: p,\n         flag: false,\n     };\n-    visit::walk_block(&mut v, b);\n+    intravisit::walk_block(&mut v, b);\n     return v.flag;\n }\n \n@@ -193,7 +193,7 @@ struct BlockQueryVisitor<P> where P: FnMut(&hir::Expr) -> bool {\n impl<'v, P> Visitor<'v> for BlockQueryVisitor<P> where P: FnMut(&hir::Expr) -> bool {\n     fn visit_expr(&mut self, e: &hir::Expr) {\n         self.flag |= (self.p)(e);\n-        visit::walk_expr(self, e)\n+        intravisit::walk_expr(self, e)\n     }\n }\n \n@@ -204,7 +204,7 @@ pub fn block_query<P>(b: &hir::Block, p: P) -> bool where P: FnMut(&hir::Expr) -\n         p: p,\n         flag: false,\n     };\n-    visit::walk_block(&mut v, &*b);\n+    intravisit::walk_block(&mut v, &*b);\n     return v.flag;\n }\n "}, {"sha": "083cc972ccad2f71e676e3393d1eb30ccd97cf71", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -30,8 +30,8 @@ use syntax::codemap::Span;\n use syntax::ast::NodeId;\n use rustc_front::hir;\n use rustc_front::hir::{Expr, FnDecl, Block, Pat};\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit;\n+use rustc_front::intravisit::Visitor;\n \n mod lifetime;\n mod restrictions;\n@@ -533,7 +533,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n             }\n         }\n \n-        visit::walk_expr(self, ex);\n+        intravisit::walk_expr(self, ex);\n     }\n }\n "}, {"sha": "a9a7b34df12c43fbaec00dd9ee67c9d1ff5c7a82", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -43,8 +43,8 @@ use syntax::codemap::Span;\n \n use rustc_front::hir;\n use rustc_front::hir::{FnDecl, Block};\n-use rustc_front::visit;\n-use rustc_front::visit::{Visitor, FnKind};\n+use rustc_front::intravisit;\n+use rustc_front::intravisit::{Visitor, FnKind};\n use rustc_front::util as hir_util;\n \n pub mod check_loans;\n@@ -85,14 +85,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n         if let hir::ConstTraitItem(_, Some(ref expr)) = ti.node {\n             gather_loans::gather_loans_in_static_initializer(self, &*expr);\n         }\n-        visit::walk_trait_item(self, ti);\n+        intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n         if let hir::ImplItemKind::Const(_, ref expr) = ii.node {\n             gather_loans::gather_loans_in_static_initializer(self, &*expr);\n         }\n-        visit::walk_impl_item(self, ii);\n+        intravisit::walk_impl_item(self, ii);\n     }\n }\n \n@@ -108,7 +108,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n         }\n     };\n \n-    visit::walk_crate(&mut bccx, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut bccx);\n \n     if tcx.sess.borrowck_stats() {\n         println!(\"--- borrowck stats ---\");\n@@ -142,7 +142,7 @@ fn borrowck_item(this: &mut BorrowckCtxt, item: &hir::Item) {\n         _ => { }\n     }\n \n-    visit::walk_item(this, item);\n+    intravisit::walk_item(this, item);\n }\n \n /// Collection of conclusions determined via borrow checker analyses.\n@@ -181,7 +181,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                              decl,\n                              body);\n \n-    visit::walk_fn(this, fk, decl, body, sp);\n+    intravisit::walk_fn(this, fk, decl, body, sp);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}, {"sha": "f8ac2759e854d4ceb420739a80396e35009b8e5a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -827,7 +827,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n                                    time(time_passes,\n                                         \"lint checking\",\n-                                        || lint::check_crate(tcx, krate, &exported_items));\n+                                        || lint::check_crate(tcx, &exported_items));\n \n                                    // The above three passes generate errors w/o aborting\n                                    tcx.sess.abort_if_errors();"}, {"sha": "8815d574725526f7da86429764c06d57944f50e5", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -777,7 +777,8 @@ pub fn pretty_print_input(sess: Session,\n                                                       &mut rdr,\n                                                       box out,\n                                                       annotation.pp_ann(),\n-                                                      true);\n+                                                      true,\n+                                                      Some(ast_map.krate()));\n                 for node_id in uii.all_matching_node_ids(ast_map) {\n                     let node = ast_map.get(node_id);\n                     try!(pp_state.print_node(&node));"}, {"sha": "2146dc8e9b94bcd204018d3a076ee1b1b4c61aac", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -18,7 +18,7 @@ use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n \n use rustc_front::hir;\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "d24c336dd3fbd0a2910abd06c734c71896c4293a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -46,7 +46,7 @@ use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n \n use rustc_front::hir;\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n \n use bad_style::{MethodLateContext, method_context};\n "}, {"sha": "a1d029025b2fa8c09680dc4ca93f8e7c7462ff77", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -28,7 +28,7 @@ use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n \n use rustc_front::hir;\n-use rustc_front::visit::{self, Visitor};\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::util::is_shift_binop;\n \n declare_lint! {\n@@ -626,7 +626,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n                     \"found Rust tuple type in foreign module; \\\n                      consider using a struct instead`\")\n             }\n-            _ => visit::walk_ty(self, ty)\n+            _ => intravisit::walk_ty(self, ty)\n         }\n     }\n }"}, {"sha": "c6494dc81f93942d3972cefadeb7add1061850bb", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -27,7 +27,7 @@ use syntax::ptr::P;\n \n use rustc_back::slice;\n use rustc_front::hir;\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n \n declare_lint! {\n     pub UNUSED_MUT,"}, {"sha": "34ef7c3487f73935aad49da6eb3bc88edb074b23", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -33,7 +33,7 @@ use self::rustc::middle::ty::{self, Ty};\n use self::rustc::util::common::ErrorReported;\n use self::rustc::util::nodemap::NodeMap;\n use self::rustc_front::hir;\n-use self::rustc_front::visit;\n+use self::rustc_front::intravisit::{self, Visitor};\n use self::syntax::ast;\n use self::syntax::attr::AttrMetaMethods;\n use self::syntax::codemap::Span;\n@@ -47,7 +47,7 @@ pub fn build_mir_for_crate<'tcx>(tcx: &ty::ctxt<'tcx>) -> MirMap<'tcx> {\n             tcx: tcx,\n             map: &mut map,\n         };\n-        visit::walk_crate(&mut dump, tcx.map.krate());\n+        tcx.map.krate().visit_all_items(&mut dump);\n     }\n     map\n }\n@@ -79,32 +79,32 @@ impl<'a, 'tcx> OuterDump<'a, 'tcx> {\n }\n \n \n-impl<'a, 'tcx> visit::Visitor<'tcx> for OuterDump<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for OuterDump<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.visit_mir(&item.attrs, |c| visit::walk_item(c, item));\n-        visit::walk_item(self, item);\n+        self.visit_mir(&item.attrs, |c| intravisit::walk_item(c, item));\n+        intravisit::walk_item(self, item);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         match trait_item.node {\n             hir::MethodTraitItem(_, Some(_)) => {\n-                self.visit_mir(&trait_item.attrs, |c| visit::walk_trait_item(c, trait_item));\n+                self.visit_mir(&trait_item.attrs, |c| intravisit::walk_trait_item(c, trait_item));\n             }\n             hir::MethodTraitItem(_, None) |\n             hir::ConstTraitItem(..) |\n             hir::TypeTraitItem(..) => {}\n         }\n-        visit::walk_trait_item(self, trait_item);\n+        intravisit::walk_trait_item(self, trait_item);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         match impl_item.node {\n             hir::ImplItemKind::Method(..) => {\n-                self.visit_mir(&impl_item.attrs, |c| visit::walk_impl_item(c, impl_item));\n+                self.visit_mir(&impl_item.attrs, |c| intravisit::walk_impl_item(c, impl_item));\n             }\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(..) => {}\n         }\n-        visit::walk_impl_item(self, impl_item);\n+        intravisit::walk_impl_item(self, impl_item);\n     }\n }\n \n@@ -117,27 +117,23 @@ struct InnerDump<'a, 'm, 'tcx: 'a + 'm> {\n     attr: Option<&'a ast::Attribute>,\n }\n \n-impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n-    fn visit_item(&mut self, _: &'tcx hir::Item) {\n-        // ignore nested items; they need their own graphviz annotation\n-    }\n-\n+impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {\n-        // ignore nested items; they need their own graphviz annotation\n+        // ignore methods; the outer dump will call us for them independently\n     }\n \n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {\n-        // ignore nested items; they need their own graphviz annotation\n+        // ignore methods; the outer dump will call us for them independently\n     }\n \n     fn visit_fn(&mut self,\n-                fk: visit::FnKind<'tcx>,\n+                fk: intravisit::FnKind<'tcx>,\n                 decl: &'tcx hir::FnDecl,\n                 body: &'tcx hir::Block,\n                 span: Span,\n                 id: ast::NodeId) {\n         let (prefix, implicit_arg_tys) = match fk {\n-            visit::FnKind::Closure =>\n+            intravisit::FnKind::Closure =>\n                 (format!(\"{}-\", id), vec![closure_self_ty(&self.tcx, id, body.id)]),\n             _ =>\n                 (format!(\"\"), vec![]),\n@@ -188,7 +184,7 @@ impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n             Err(ErrorReported) => {}\n         }\n \n-        visit::walk_fn(self, fk, decl, body, span);\n+        intravisit::walk_fn(self, fk, decl, body, span);\n     }\n }\n "}, {"sha": "439caf20b6b9cb9f8cc45bcdad50e556971344e7", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -29,7 +29,7 @@ use syntax::codemap::{Span, DUMMY_SP};\n \n use rustc_front::hir;\n use rustc_front::hir::{ViewPathGlob, ViewPathList, ViewPathSimple};\n-use rustc_front::visit::{self, Visitor};\n+use rustc_front::intravisit::Visitor;\n \n struct UnusedImportCheckVisitor<'a, 'b: 'a, 'tcx: 'b> {\n     resolver: &'a mut Resolver<'b, 'tcx>,\n@@ -118,7 +118,6 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n         // because this means that they were generated in some fashion by the\n         // compiler and we don't need to consider them.\n         if item.vis == hir::Public || item.span == DUMMY_SP {\n-            visit::walk_item(self, item);\n             return;\n         }\n \n@@ -158,12 +157,10 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             }\n             _ => {}\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n \n pub fn check_crate(resolver: &mut Resolver, krate: &hir::Crate) {\n     let mut visitor = UnusedImportCheckVisitor { resolver: resolver };\n-    visit::walk_crate(&mut visitor, krate);\n+    krate.visit_all_items(&mut visitor);\n }"}, {"sha": "69770cd33b3528dd6b2c3b6f2e507d508df1aa79", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -386,7 +386,7 @@ impl Ord for TraitInfo {\n /// Retrieve all traits in this crate and any dependent crates.\n pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n     if ccx.all_traits.borrow().is_none() {\n-        use rustc_front::visit;\n+        use rustc_front::intravisit;\n \n         let mut traits = vec![];\n \n@@ -397,7 +397,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n             map: &'a hir_map::Map<'tcx>,\n             traits: &'a mut AllTraitsVec,\n         }\n-        impl<'v, 'a, 'tcx> visit::Visitor<'v> for Visitor<'a, 'tcx> {\n+        impl<'v, 'a, 'tcx> intravisit::Visitor<'v> for Visitor<'a, 'tcx> {\n             fn visit_item(&mut self, i: &'v hir::Item) {\n                 match i.node {\n                     hir::ItemTrait(..) => {\n@@ -406,13 +406,12 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                     }\n                     _ => {}\n                 }\n-                visit::walk_item(self, i)\n             }\n         }\n-        visit::walk_crate(&mut Visitor {\n+        ccx.tcx.map.krate().visit_all_items(&mut Visitor {\n             map: &ccx.tcx.map,\n             traits: &mut traits\n-        }, ccx.tcx.map.krate());\n+        });\n \n         // Cross-crate:\n         let mut external_mods = FnvHashSet();"}, {"sha": "a635c1b047da3474d38928820c8bf08bf2c0c1cc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -124,7 +124,7 @@ use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::{self, InternedString};\n use syntax::ptr::P;\n \n-use rustc_front::visit::{self, Visitor};\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n use rustc_front::hir::Visibility;\n use rustc_front::hir::{Item, ItemImpl};\n@@ -363,7 +363,7 @@ struct CheckItemBodiesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n         check_item_type(self.ccx, i);\n-        visit::walk_item(self, i);\n+        intravisit::walk_item(self, i);\n     }\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n@@ -374,14 +374,13 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n             _ => {}\n         }\n \n-        visit::walk_ty(self, t);\n+        intravisit::walk_ty(self, t);\n     }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n         check_item_body(self.ccx, i);\n-        visit::walk_item(self, i);\n     }\n }\n \n@@ -393,7 +392,7 @@ pub fn check_wf_old(ccx: &CrateCtxt) {\n     // comes, we run the new code and issue warnings.\n     let krate = ccx.tcx.map.krate();\n     let mut visit = wf::CheckTypeWellFormedVisitor::new(ccx);\n-    visit::walk_crate(&mut visit, krate);\n+    krate.visit_all_items(&mut visit);\n \n     // If types are not well-formed, it leads to all manner of errors\n     // downstream, so stop reporting errors at this point.\n@@ -403,7 +402,7 @@ pub fn check_wf_old(ccx: &CrateCtxt) {\n pub fn check_wf_new(ccx: &CrateCtxt) {\n     let krate = ccx.tcx.map.krate();\n     let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(ccx);\n-    visit::walk_crate(&mut visit, krate);\n+    krate.visit_all_items(&mut visit);\n \n     // If types are not well-formed, it leads to all manner of errors\n     // downstream, so stop reporting errors at this point.\n@@ -413,14 +412,14 @@ pub fn check_wf_new(ccx: &CrateCtxt) {\n pub fn check_item_types(ccx: &CrateCtxt) {\n     let krate = ccx.tcx.map.krate();\n     let mut visit = CheckItemTypesVisitor { ccx: ccx };\n-    visit::walk_crate(&mut visit, krate);\n+    krate.visit_all_items(&mut visit);\n     ccx.tcx.sess.abort_if_errors();\n }\n \n pub fn check_item_bodies(ccx: &CrateCtxt) {\n     let krate = ccx.tcx.map.krate();\n     let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n-    visit::walk_crate(&mut visit, krate);\n+    krate.visit_all_items(&mut visit);\n \n     ccx.tcx.sess.abort_if_errors();\n }\n@@ -518,7 +517,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                local.pat,\n                self.fcx.infcx().ty_to_string(\n                    self.fcx.inh.locals.borrow().get(&local.id).unwrap().clone()));\n-        visit::walk_local(self, local);\n+        intravisit::walk_local(self, local);\n     }\n \n     // Add pattern bindings.\n@@ -537,14 +536,14 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                        var_ty);\n             }\n         }\n-        visit::walk_pat(self, p);\n+        intravisit::walk_pat(self, p);\n     }\n \n     fn visit_block(&mut self, b: &'tcx hir::Block) {\n         // non-obvious: the `blk` variable maps to region lb, so\n         // we have to keep this up-to-date.  This\n         // is... unfortunate.  It'd be nice to not need this.\n-        visit::walk_block(self, b);\n+        intravisit::walk_block(self, b);\n     }\n \n     // Since an expr occurs as part of the type fixed size arrays we\n@@ -556,18 +555,16 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                 check_expr_with_hint(self.fcx, &**count_expr, self.fcx.tcx().types.usize);\n             }\n             hir::TyBareFn(ref function_declaration) => {\n-                visit::walk_fn_decl_nopat(self, &function_declaration.decl);\n+                intravisit::walk_fn_decl_nopat(self, &function_declaration.decl);\n                 walk_list!(self, visit_lifetime_def, &function_declaration.lifetimes);\n             }\n-            _ => visit::walk_ty(self, t)\n+            _ => intravisit::walk_ty(self, t)\n         }\n     }\n \n-    // Don't descend into fns and items\n-    fn visit_fn(&mut self, _: visit::FnKind<'tcx>, _: &'tcx hir::FnDecl,\n+    // Don't descend into the bodies of nested closures\n+    fn visit_fn(&mut self, _: intravisit::FnKind<'tcx>, _: &'tcx hir::FnDecl,\n                 _: &'tcx hir::Block, _: Span, _: ast::NodeId) { }\n-    fn visit_item(&mut self, _: &hir::Item) { }\n-\n }\n \n /// Helper used by check_bare_fn and check_expr_fn. Does the grungy work of checking a function"}, {"sha": "095dded777022544288671633cb4c5578803e009", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -102,8 +102,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n use rustc_front::util as hir_util;\n \n@@ -496,13 +495,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Rcx<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn visit_fn(&mut self, _fk: visit::FnKind<'v>, fd: &'v hir::FnDecl,\n+    fn visit_fn(&mut self, _fk: intravisit::FnKind<'v>, fd: &'v hir::FnDecl,\n                 b: &'v hir::Block, span: Span, id: ast::NodeId) {\n         self.visit_fn_body(id, fd, b, span)\n     }\n \n-    fn visit_item(&mut self, i: &hir::Item) { visit_item(self, i); }\n-\n     fn visit_expr(&mut self, ex: &hir::Expr) { visit_expr(self, ex); }\n \n     //visit_pat: visit_pat, // (..) see above\n@@ -514,12 +511,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Rcx<'a, 'tcx> {\n     fn visit_block(&mut self, b: &hir::Block) { visit_block(self, b); }\n }\n \n-fn visit_item(_rcx: &mut Rcx, _item: &hir::Item) {\n-    // Ignore items\n-}\n-\n fn visit_block(rcx: &mut Rcx, b: &hir::Block) {\n-    visit::walk_block(rcx, b);\n+    intravisit::walk_block(rcx, b);\n }\n \n fn visit_arm(rcx: &mut Rcx, arm: &hir::Arm) {\n@@ -528,14 +521,14 @@ fn visit_arm(rcx: &mut Rcx, arm: &hir::Arm) {\n         constrain_bindings_in_pat(&**p, rcx);\n     }\n \n-    visit::walk_arm(rcx, arm);\n+    intravisit::walk_arm(rcx, arm);\n }\n \n fn visit_local(rcx: &mut Rcx, l: &hir::Local) {\n     // see above\n     constrain_bindings_in_pat(&*l.pat, rcx);\n     link_local(rcx, l);\n-    visit::walk_local(rcx, l);\n+    intravisit::walk_local(rcx, l);\n }\n \n fn constrain_bindings_in_pat(pat: &hir::Pat, rcx: &mut Rcx) {\n@@ -700,14 +693,14 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n                                args.iter().map(|e| &**e), false);\n             }\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprMethodCall(_, _, ref args) => {\n             constrain_call(rcx, expr, Some(&*args[0]),\n                            args[1..].iter().map(|e| &**e), false);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprAssignOp(_, ref lhs, ref rhs) => {\n@@ -716,14 +709,14 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n                                Some(&**rhs).into_iter(), false);\n             }\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprIndex(ref lhs, ref rhs) if has_method_map => {\n             constrain_call(rcx, expr, Some(&**lhs),\n                            Some(&**rhs).into_iter(), true);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         },\n \n         hir::ExprBinary(op, ref lhs, ref rhs) if has_method_map => {\n@@ -736,7 +729,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n             constrain_call(rcx, expr, Some(&**lhs),\n                            Some(&**rhs).into_iter(), implicitly_ref_args);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprBinary(_, ref lhs, ref rhs) => {\n@@ -750,7 +743,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n                                   ty,\n                                   expr_region);\n             }\n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprUnary(op, ref lhs) if has_method_map => {\n@@ -760,7 +753,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n             constrain_call(rcx, expr, Some(&**lhs),\n                            None::<hir::Expr>.iter(), implicitly_ref_args);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprUnary(hir::UnDeref, ref base) => {\n@@ -781,23 +774,23 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n                     rcx, expr.span, expr_region, *r_ptr);\n             }\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprIndex(ref vec_expr, _) => {\n             // For a[b], the lifetime of a must enclose the deref\n             let vec_type = rcx.resolve_expr_type_adjusted(&**vec_expr);\n             constrain_index(rcx, expr, vec_type);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprCast(ref source, _) => {\n             // Determine if we are casting `source` to a trait\n             // instance.  If so, we have to be sure that the type of\n             // the source obeys the trait's region bound.\n             constrain_cast(rcx, expr, &**source);\n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprAddrOf(m, ref base) => {\n@@ -812,13 +805,13 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n             // FIXME(#6268) nested method calls requires that this rule change\n             let ty0 = rcx.resolve_node_type(expr.id);\n             type_must_outlive(rcx, infer::AddrOf(expr.span), ty0, expr_region);\n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprMatch(ref discr, ref arms, _) => {\n             link_match(rcx, &**discr, &arms[..]);\n \n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n \n         hir::ExprClosure(_, _, ref body) => {\n@@ -827,7 +820,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n \n         hir::ExprLoop(ref body, _) => {\n             let repeating_scope = rcx.set_repeating_scope(body.id);\n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n@@ -842,7 +835,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n         }\n \n         _ => {\n-            visit::walk_expr(rcx, expr);\n+            intravisit::walk_expr(rcx, expr);\n         }\n     }\n }\n@@ -897,7 +890,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                        expr: &hir::Expr,\n                        body: &hir::Block) {\n     let repeating_scope = rcx.set_repeating_scope(body.id);\n-    visit::walk_expr(rcx, expr);\n+    intravisit::walk_expr(rcx, expr);\n     rcx.set_repeating_scope(repeating_scope);\n }\n "}, {"sha": "0b77935771e44b0cb8c81dcfac19b05e3cea9c1d", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -52,7 +52,7 @@ use std::collections::HashSet;\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::hir;\n-use rustc_front::visit::{self, Visitor};\n+use rustc_front::intravisit::{self, Visitor};\n \n ///////////////////////////////////////////////////////////////////////////\n // PUBLIC ENTRY POINTS\n@@ -105,11 +105,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for SeedBorrowKind<'a, 'tcx> {\n             _ => { }\n         }\n \n-        visit::walk_expr(self, expr);\n+        intravisit::walk_expr(self, expr);\n     }\n-\n-    // Skip all items; they aren't in the same context.\n-    fn visit_item(&mut self, _: &'v hir::Item) { }\n }\n \n impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n@@ -510,18 +507,15 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'tcx> {\n     fn visit_fn(&mut self,\n-                fn_kind: visit::FnKind<'v>,\n+                fn_kind: intravisit::FnKind<'v>,\n                 decl: &'v hir::FnDecl,\n                 body: &'v hir::Block,\n                 span: Span,\n                 id: ast::NodeId)\n     {\n-        visit::walk_fn(self, fn_kind, decl, body, span);\n+        intravisit::walk_fn(self, fn_kind, decl, body, span);\n         self.analyze_closure(id, span, decl, body);\n     }\n-\n-    // Skip all items; they aren't in the same context.\n-    fn visit_item(&mut self, _: &'v hir::Item) { }\n }\n \n impl<'a,'tcx> euv::Delegate<'tcx> for AdjustBorrowKind<'a,'tcx> {"}, {"sha": "3daf5003b97e01955d69d7fa3ccbf8257e2f3556", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -24,7 +24,7 @@ use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::special_idents;\n \n-use rustc_front::visit::{self, Visitor, FnKind};\n+use rustc_front::intravisit::{self, Visitor, FnKind};\n use rustc_front::hir;\n \n pub struct CheckTypeWellFormedVisitor<'ccx, 'tcx:'ccx> {\n@@ -423,7 +423,7 @@ fn reject_shadowing_type_parameters<'tcx>(tcx: &ty::ctxt<'tcx>,\n impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         self.check_item_well_formed(i);\n-        visit::walk_item(self, i);\n+        intravisit::walk_item(self, i);\n     }\n \n     fn visit_fn(&mut self,\n@@ -440,7 +440,7 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 }\n             }\n         }\n-        visit::walk_fn(self, fk, fd, b, span)\n+        intravisit::walk_fn(self, fk, fd, b, span)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n@@ -460,7 +460,7 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             }\n         }\n \n-        visit::walk_trait_item(self, trait_item)\n+        intravisit::walk_trait_item(self, trait_item)\n     }\n }\n "}, {"sha": "bfbf8fff4f5376917bd33728249217b61c3638dc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -25,8 +25,7 @@ use syntax::ast;\n use syntax::codemap::{Span};\n use syntax::parse::token::{special_idents};\n use syntax::ptr::P;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n \n pub struct CheckTypeWellFormedVisitor<'ccx, 'tcx:'ccx> {\n@@ -492,19 +491,19 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         self.check_item_well_formed(i);\n-        visit::walk_item(self, i);\n+        intravisit::walk_item(self, i);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         self.check_trait_or_impl_item(trait_item.id, trait_item.span);\n-        visit::walk_trait_item(self, trait_item)\n+        intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         self.check_trait_or_impl_item(impl_item.id, impl_item.span);\n-        visit::walk_impl_item(self, impl_item)\n+        intravisit::walk_impl_item(self, impl_item)\n     }\n }\n "}, {"sha": "984f227cebe79bc61adc4612bf7f8080f8877be9", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -29,8 +29,7 @@ use std::cell::Cell;\n use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n use rustc_front::print::pprust::pat_to_string;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::{self, Visitor};\n use rustc_front::util as hir_util;\n use rustc_front::hir;\n \n@@ -153,17 +152,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n-    fn visit_item(&mut self, _: &hir::Item) {\n-        // Ignore items\n-    }\n-\n     fn visit_stmt(&mut self, s: &hir::Stmt) {\n         if self.fcx.writeback_errors.get() {\n             return;\n         }\n \n         self.visit_node_id(ResolvingExpr(s.span), hir_util::stmt_id(s));\n-        visit::walk_stmt(self, s);\n+        intravisit::walk_stmt(self, s);\n     }\n \n     fn visit_expr(&mut self, e: &hir::Expr) {\n@@ -183,7 +178,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n             }\n         }\n \n-        visit::walk_expr(self, e);\n+        intravisit::walk_expr(self, e);\n     }\n \n     fn visit_block(&mut self, b: &hir::Block) {\n@@ -192,7 +187,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n         }\n \n         self.visit_node_id(ResolvingExpr(b.span), b.id);\n-        visit::walk_block(self, b);\n+        intravisit::walk_block(self, b);\n     }\n \n     fn visit_pat(&mut self, p: &hir::Pat) {\n@@ -207,7 +202,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n                p.id,\n                self.tcx().node_id_to_type(p.id));\n \n-        visit::walk_pat(self, p);\n+        intravisit::walk_pat(self, p);\n     }\n \n     fn visit_local(&mut self, l: &hir::Local) {\n@@ -218,7 +213,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n         let var_ty = self.fcx.local_ty(l.span, l.id);\n         let var_ty = self.resolve(&var_ty, ResolvingLocal(l.span));\n         write_ty_to_tcx(self.tcx(), l.id, var_ty);\n-        visit::walk_local(self, l);\n+        intravisit::walk_local(self, l);\n     }\n \n     fn visit_ty(&mut self, t: &hir::Ty) {\n@@ -228,10 +223,10 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n                 write_ty_to_tcx(self.tcx(), count_expr.id, self.tcx().types.usize);\n             }\n             hir::TyBareFn(ref function_declaration) => {\n-                visit::walk_fn_decl_nopat(self, &function_declaration.decl);\n+                intravisit::walk_fn_decl_nopat(self, &function_declaration.decl);\n                 walk_list!(self, visit_lifetime_def, &function_declaration.lifetimes);\n             }\n-            _ => visit::walk_ty(self, t)\n+            _ => intravisit::walk_ty(self, t)\n         }\n     }\n }"}, {"sha": "b3614210eefb61ddaa8ba9a8e802ef6e391d85f8", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -41,7 +41,7 @@ use syntax::parse::token;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::front::map as hir_map;\n use rustc::front::map::NodeItem;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::hir::{Item, ItemImpl,Crate};\n use rustc_front::hir;\n \n@@ -96,13 +96,11 @@ struct CoherenceCheckVisitor<'a, 'tcx: 'a> {\n     cc: &'a CoherenceChecker<'a, 'tcx>\n }\n \n-impl<'a, 'tcx, 'v> visit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n         if let ItemImpl(..) = item.node {\n             self.cc.check_implementation(item)\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -111,8 +109,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         // Check implementations and traits. This populates the tables\n         // containing the inherent methods and extension methods. It also\n         // builds up the trait inheritance table.\n-        let mut visitor = CoherenceCheckVisitor { cc: self };\n-        visit::walk_crate(&mut visitor, krate);\n+        krate.visit_all_items(&mut CoherenceCheckVisitor { cc: self });\n \n         // Copy over the inherent impls we gathered up during the walk into\n         // the tcx."}, {"sha": "8eeafb9b432a84534d48eb30f401a1dce6ac81ad", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -17,13 +17,13 @@ use middle::traits;\n use middle::ty;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::hir;\n use rustc_front::hir::{Item, ItemImpl};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    visit::walk_crate(&mut orphan, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx:'cx> {\n@@ -354,9 +354,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         self.check_item(item);\n-        visit::walk_item(self, item);\n     }\n }"}, {"sha": "e91702e64ba9f82cfcaa4d59a1b9f8d073b90400", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -19,7 +19,7 @@ use middle::infer::{self, new_infer_ctxt};\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::hir;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use util::nodemap::DefIdMap;\n \n pub fn check(tcx: &ty::ctxt) {\n@@ -28,7 +28,7 @@ pub fn check(tcx: &ty::ctxt) {\n \n     // this secondary walk specifically checks for some other cases,\n     // like defaulted traits, for which additional overlap rules exist\n-    visit::walk_crate(&mut overlap, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut overlap);\n }\n \n struct OverlapChecker<'cx, 'tcx:'cx> {\n@@ -169,7 +169,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n }\n \n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n             hir::ItemDefaultImpl(_, _) => {\n@@ -226,6 +226,5 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n             _ => {\n             }\n         }\n-        visit::walk_item(self, item);\n     }\n }"}, {"sha": "40b38ad88394bcbadf28e915918ba341ffe3156a", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -12,13 +12,13 @@\n //! crate or pertains to a type defined in this crate.\n \n use middle::ty;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::hir;\n use rustc_front::hir::{Item, ItemImpl};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = UnsafetyChecker { tcx: tcx };\n-    visit::walk_crate(&mut orphan, tcx.map.krate());\n+    tcx.map.krate().visit_all_items(&mut orphan);\n }\n \n struct UnsafetyChecker<'cx, 'tcx:'cx> {\n@@ -76,7 +76,7 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n             hir::ItemDefaultImpl(unsafety, _) => {\n@@ -87,7 +87,5 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n             }\n             _ => { }\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }"}, {"sha": "efda06d8cf6190cf9857747141486f577cbea326", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -98,7 +98,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n use rustc_front::hir;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::print::pprust;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -108,10 +108,10 @@ pub fn collect_item_types(tcx: &ty::ctxt) {\n     let ccx = &CrateCtxt { tcx: tcx, stack: RefCell::new(Vec::new()) };\n \n     let mut visitor = CollectTraitDefVisitor{ ccx: ccx };\n-    visit::walk_crate(&mut visitor, ccx.tcx.map.krate());\n+    ccx.tcx.map.krate().visit_all_items(&mut visitor);\n \n     let mut visitor = CollectItemTypesVisitor{ ccx: ccx };\n-    visit::walk_crate(&mut visitor, ccx.tcx.map.krate());\n+    ccx.tcx.map.krate().visit_all_items(&mut visitor);\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -157,7 +157,7 @@ struct CollectTraitDefVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectTraitDefVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CollectTraitDefVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         match i.node {\n             hir::ItemTrait(..) => {\n@@ -166,8 +166,6 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectTraitDefVisitor<'a, 'tcx> {\n             }\n             _ => { }\n         }\n-\n-        visit::walk_item(self, i);\n     }\n }\n \n@@ -178,14 +176,14 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         convert_item(self.ccx, i);\n-        visit::walk_item(self, i);\n+        intravisit::walk_item(self, i);\n     }\n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n         convert_foreign_item(self.ccx, i);\n-        visit::walk_foreign_item(self, i);\n+        intravisit::walk_foreign_item(self, i);\n     }\n }\n "}, {"sha": "c9035bdff719d51e5f027601b3ae295d82e41274", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -276,8 +276,7 @@ use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n use rustc_front::hir;\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::Visitor;\n use util::nodemap::NodeMap;\n \n pub fn infer_variance(tcx: &ty::ctxt) {\n@@ -383,7 +382,7 @@ fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         })\n     };\n \n-    visit::walk_crate(&mut terms_cx, krate);\n+    krate.visit_all_items(&mut terms_cx);\n \n     terms_cx\n }\n@@ -531,7 +530,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n                 // constrained to be invariant. See `visit_item` in\n                 // the impl for `ConstraintContext` below.\n                 self.add_inferreds_for_item(item.id, true, generics);\n-                visit::walk_item(self, item);\n             }\n \n             hir::ItemExternCrate(_) |\n@@ -544,7 +542,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n             hir::ItemTy(..) => {\n-                visit::walk_item(self, item);\n             }\n         }\n     }\n@@ -591,7 +588,7 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n         bivariant: bivariant,\n         constraints: Vec::new(),\n     };\n-    visit::walk_crate(&mut constraint_cx, krate);\n+    krate.visit_all_items(&mut constraint_cx);\n     constraint_cx\n }\n \n@@ -637,8 +634,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n             hir::ItemDefaultImpl(..) => {\n             }\n         }\n-\n-        visit::walk_item(self, item);\n     }\n }\n "}, {"sha": "36ef110fba07a6ad975e266e3ca9fc3d02d3bd56", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff9f71dbb8c3edaa855928442954a06f2d19de/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e4ff9f71dbb8c3edaa855928442954a06f2d19de", "patch": "@@ -157,8 +157,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om.vis = vis;\n         om.stab = self.stability(id);\n         om.id = id;\n-        for i in &m.items {\n-            self.visit_item(&**i, None, &mut om);\n+        for i in &m.item_ids {\n+            let item = self.cx.map.expect_item(i.id);\n+            self.visit_item(item, None, &mut om);\n         }\n         om\n     }\n@@ -224,8 +225,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let prev = mem::replace(&mut self.inlining_from_glob, true);\n                     match it.node {\n                         hir::ItemMod(ref m) => {\n-                            for i in &m.items {\n-                                self.visit_item(&**i, None, om);\n+                            for i in &m.item_ids {\n+                                let i = self.cx.map.expect_item(i.id);\n+                                self.visit_item(i, None, om);\n                             }\n                         }\n                         hir::ItemEnum(..) => {}"}]}