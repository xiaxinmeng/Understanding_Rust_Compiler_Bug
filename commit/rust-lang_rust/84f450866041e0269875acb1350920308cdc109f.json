{"sha": "84f450866041e0269875acb1350920308cdc109f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjQ1MDg2NjA0MWUwMjY5ODc1YWNiMTM1MDkyMDMwOGNkYzEwOWY=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-04-24T14:57:41Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-05-02T10:05:18Z"}, "message": "fix tests", "tree": {"sha": "adce52e53617c1d53dd46149ab7742fc24b27a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adce52e53617c1d53dd46149ab7742fc24b27a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f450866041e0269875acb1350920308cdc109f", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlrpjV4ACgkQZ1erJvcv\nAIRYAQ/7BREn3JcsSF6xr+RobU5+n/BLXAy8tI3jXINAbJT+G4+sZTtf98cDHyoh\nCJx2JHRDFM3tpouTjXnXCwevEZMnVJfbRePHB8CtxbD3UmWRwn4TUBtA6lGfI0Mg\naAvOJQplmvG+at6Jjw3JUPO31pxL0KAA5rvfXgbr/auwqa3LywDmBRSr0hXI/4tj\nyf8qvAoyn4rYyE0AqAc6hoZrHdR02T6WcDAB5JDI3VCRCfjE2g6ZN2jBrrrcSawD\nKIITkftZGr4vKhHM4pHpKsGhGbbo30W61Q5Vop9RDEh3XXPH9ewbnACB7K0DxOMb\nBebEqCuq9VuH96IIFUOJ2FX1r318HOw2AEZo0PJYr1p2EecygfqxPIh3SK6TpnYJ\njn/QwRxcVHaxxL4DjQoBMtACCsUiofJQ02JUV7yHg4jI0jech/39nvci20oBdhy2\nAgYlQvN/0j2D994/YuGkXaEFHqWZTrVfdmiRLZxicXHQGF/0ZBbIHkq67Me06XPi\nqZbIW0nOqhex6byGmTjCdHteSS1HzhqIfneXqJRE0+KHriL1kVWBjOp1X/8QCCtd\nNc4mKdNsnXqb73JFBFW2mOuZXAoy18bmueAp/SPFEjB0eAfm2zKOtnIflKW82AvP\n0LmMTNJEAT9IXRygRzbc2a9suIdiJsryRuPy6siES3ZoKD0cWpY=\n=XiuX\n-----END PGP SIGNATURE-----", "payload": "tree adce52e53617c1d53dd46149ab7742fc24b27a36\nparent 121abd0599f6fd056dca84fe1df724fb7822b355\nauthor flip1995 <uwdkn@student.kit.edu> 1524581861 +0200\ncommitter flip1995 <uwdkn@student.kit.edu> 1525255518 +0200\n\nfix tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f450866041e0269875acb1350920308cdc109f", "html_url": "https://github.com/rust-lang/rust/commit/84f450866041e0269875acb1350920308cdc109f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f450866041e0269875acb1350920308cdc109f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121abd0599f6fd056dca84fe1df724fb7822b355", "url": "https://api.github.com/repos/rust-lang/rust/commits/121abd0599f6fd056dca84fe1df724fb7822b355", "html_url": "https://github.com/rust-lang/rust/commit/121abd0599f6fd056dca84fe1df724fb7822b355"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "b8660c4923344505c8a7b9f11917a0263fa1cf0e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84f450866041e0269875acb1350920308cdc109f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f450866041e0269875acb1350920308cdc109f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=84f450866041e0269875acb1350920308cdc109f", "patch": "@@ -15,7 +15,7 @@ pub use self::ReprAttr::*;\n pub use self::IntType::*;\n \n use ast;\n-use ast::{AttrId, Attribute, Name, Ident};\n+use ast::{AttrId, Attribute, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n@@ -212,7 +212,7 @@ impl NestedMetaItem {\n     }\n }\n \n-fn name_from_path(path: &ast::Path) -> Name {\n+fn name_from_path(path: &Path) -> Name {\n     path.segments.last().expect(\"empty path in attribute\").ident.name\n }\n \n@@ -399,15 +399,15 @@ pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem\n }\n \n pub fn mk_name_value_item(span: Span, ident: Ident, value: ast::Lit) -> MetaItem {\n-    MetaItem { ident: ast::Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n+    MetaItem { ident: Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n }\n \n pub fn mk_list_item(span: Span, ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n-    MetaItem { ident: ast::Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n+    MetaItem { ident: Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n }\n \n pub fn mk_word_item(ident: Ident) -> MetaItem {\n-    MetaItem { ident: ast::Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n+    MetaItem { ident: Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n }\n \n pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n@@ -466,7 +466,7 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: Symbol, span: Span) -> Attribute {\n     Attribute {\n         id,\n         style,\n-        path: ast::Path::from_ident(Ident::from_str(\"doc\").with_span_pos(span)),\n+        path: Path::from_ident(Ident::from_str(\"doc\").with_span_pos(span)),\n         tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n         span,\n@@ -1142,7 +1142,6 @@ impl MetaItem {\n     fn tokens(&self) -> TokenStream {\n         let mut idents = vec![];\n         let mut last_pos = BytePos(0 as u32);\n-        // FIXME: Share code with `parse_path`.\n         for (i, segment) in self.ident.segments.iter().enumerate() {\n             let is_first = i == 0;\n             if !is_first {\n@@ -1162,14 +1161,16 @@ impl MetaItem {\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n         where I: Iterator<Item = TokenTree>,\n     {\n+        // FIXME: Share code with `parse_path`.\n         let ident = match tokens.next() {\n             Some(TokenTree::Token(span, Token::Ident(ident, _))) => {\n                 if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n+                    let mut segments = vec![PathSegment::from_ident(ident.with_span_pos(span))];\n                     tokens.next();\n-                    let mut segments = vec![];\n                     loop {\n-                        if let Some(TokenTree::Token(_, Token::Ident(ident, _))) = tokens.next() {\n-                            segments.push(ast::PathSegment::from_ident(ident));\n+                        if let Some(TokenTree::Token(span,\n+                                                     Token::Ident(ident, _))) = tokens.next() {\n+                            segments.push(PathSegment::from_ident(ident.with_span_pos(span)));\n                         } else {\n                             return None;\n                         }\n@@ -1179,15 +1180,14 @@ impl MetaItem {\n                             break;\n                         }\n                     }\n-                    ast::Path { span, segments }\n+                    let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n+                    Path { span, segments }\n                 } else {\n-                    ast::Path::from_ident(ident)\n+                    Path::from_ident(ident.with_span_pos(span))\n                 }\n             }\n             Some(TokenTree::Token(_, Token::Interpolated(ref nt))) => match nt.0 {\n-                token::Nonterminal::NtIdent(ident, _) => {\n-                    ast::Path::from_ident(ident)\n-                }\n+                token::Nonterminal::NtIdent(ident, _) => Path::from_ident(ident),\n                 token::Nonterminal::NtMeta(ref meta) => return Some(meta.clone()),\n                 token::Nonterminal::NtPath(ref path) => path.clone(),\n                 _ => return None,"}, {"sha": "d8db76a95ff38ef1fde952f99658dd42e6d2d7b9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f450866041e0269875acb1350920308cdc109f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f450866041e0269875acb1350920308cdc109f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=84f450866041e0269875acb1350920308cdc109f", "patch": "@@ -460,7 +460,7 @@ declare_features! (\n \n     // Access to crate names passed via `--extern` through prelude\n     (active, extern_prelude, \"1.27.0\", Some(44660), Some(Edition::Edition2018)),\n-    \n+\n     // Scoped attributes\n     (active, tool_attributes, \"1.25.0\", Some(44690), None),\n );\n@@ -1191,7 +1191,7 @@ impl<'a> Context<'a> {\n                     }\n                 } else {\n                     gate_feature!(self, custom_attribute, attr.span,\n-                                  &format!(\"the attribute `{}` is currently \\\n+                                  &format!(\"The attribute `{}` is currently \\\n                                             unknown to the compiler and \\\n                                             may have meaning \\\n                                             added to it in the future\","}, {"sha": "fb0f9105b0d8a949cf2501a33bafd242c95fe443", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f450866041e0269875acb1350920308cdc109f/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f450866041e0269875acb1350920308cdc109f/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=84f450866041e0269875acb1350920308cdc109f", "patch": "@@ -117,7 +117,7 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n     let copy_name = match mi.node {\n         ast::MetaItemKind::List(ref xs) => {\n             if let Some(word) = xs[0].word() {\n-                word.ident\n+                word.ident.segments.last().unwrap().ident\n             } else {\n                 cx.span_err(mi.span, \"Expected word\");\n                 return;"}, {"sha": "d698af50579ad91de914d062717fb131dd8077c6", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f450866041e0269875acb1350920308cdc109f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f450866041e0269875acb1350920308cdc109f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=84f450866041e0269875acb1350920308cdc109f", "patch": "@@ -112,7 +112,7 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n     let copy_name = match mi.node {\n         ast::MetaItemKind::List(ref xs) => {\n             if let Some(word) = xs[0].word() {\n-                word.ident\n+                word.ident.segments.last().unwrap().ident\n             } else {\n                 cx.span_err(mi.span, \"Expected word\");\n                 return;"}]}