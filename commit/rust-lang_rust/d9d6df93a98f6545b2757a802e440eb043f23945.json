{"sha": "d9d6df93a98f6545b2757a802e440eb043f23945", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDZkZjkzYTk4ZjY1NDViMjc1N2E4MDJlNDQwZWIwNDNmMjM5NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T18:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T18:56:38Z"}, "message": "Auto merge of #881 - RalfJung:rustup, r=RalfJung\n\nadjust for rustc changes", "tree": {"sha": "e513bfe26d0464d715b250b860e60e15389bc2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e513bfe26d0464d715b250b860e60e15389bc2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d6df93a98f6545b2757a802e440eb043f23945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d6df93a98f6545b2757a802e440eb043f23945", "html_url": "https://github.com/rust-lang/rust/commit/d9d6df93a98f6545b2757a802e440eb043f23945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d6df93a98f6545b2757a802e440eb043f23945/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e88502673a359786147d54166d5f35b391178e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e88502673a359786147d54166d5f35b391178e", "html_url": "https://github.com/rust-lang/rust/commit/d0e88502673a359786147d54166d5f35b391178e"}, {"sha": "a41ec9aacbdc4798f9efeb8b24fc12d26e04bf7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41ec9aacbdc4798f9efeb8b24fc12d26e04bf7d", "html_url": "https://github.com/rust-lang/rust/commit/a41ec9aacbdc4798f9efeb8b24fc12d26e04bf7d"}], "stats": {"total": 109, "additions": 40, "deletions": 69}, "files": [{"sha": "94c6f5e4b8c9790c8135091ff2443a14f884a8bf", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -1 +1 @@\n-8e917f48382c6afaf50568263b89d35fba5d98e4\n+a45743345659c775b01484574af2818c46a2cb03"}, {"sha": "bc9d97b0280f14144b0a1cce9df37d23911d7a69", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -41,10 +41,9 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let main_mir = ecx.load_mir(main_instance.def)?;\n \n     if !main_mir.return_ty().is_unit() || main_mir.arg_count != 0 {\n-        throw_unsup!(Unimplemented(\n+        throw_unsup_format!(\n             \"miri does not support main functions without `fn()` type signatures\"\n-                .to_owned(),\n-        ));\n+        );\n     }\n \n     let start_id = tcx.lang_items().start_fn().unwrap();\n@@ -60,10 +59,10 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let start_mir = ecx.load_mir(start_instance.def)?;\n \n     if start_mir.arg_count != 3 {\n-        throw_unsup!(AbiViolation(format!(\n+        bug!(\n             \"'start' lang item should have three arguments, but has {}\",\n             start_mir.arg_count\n-        )));\n+        );\n     }\n \n     // Return value (in static memory so that it does not count as leak)."}, {"sha": "30f3231308a472c8f643708ee50398739ac0373e", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -247,9 +247,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n                 let data = vec![0; size.bytes() as usize];\n                 Allocation::from_bytes(&data, tcx.data_layout.pointer_align.abi)\n             }\n-            _ => throw_unsup!(Unimplemented(\n-                    format!(\"can't access foreign static: {}\", link_name),\n-                )),\n+            _ => throw_unsup_format!(\"can't access foreign static: {}\", link_name),\n         };\n         Ok(Cow::Owned(alloc))\n     }"}, {"sha": "b859a8019024564daa8a3d7a17135fb19d0d9e09", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -16,9 +16,7 @@ impl Dlsym {\n             \"getentropy\" => Some(GetEntropy),\n             \"__pthread_get_minstack\" => None,\n             _ =>\n-                throw_unsup!(Unimplemented(format!(\n-                    \"Unsupported dlsym: {}\", name\n-                ))),\n+                throw_unsup_format!(\"Unsupported dlsym: {}\", name),\n         })\n     }\n }"}, {"sha": "96bc747d3efb057e7aa2dde44e14dee9668b42a1", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -141,17 +141,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // First: functions that diverge.\n         match link_name {\n             \"__rust_start_panic\" | \"panic_impl\" => {\n-                throw_unsup!(MachineError(\"the evaluated program panicked\".to_string()));\n+                throw_unsup_format!(\"the evaluated program panicked\");\n             }\n             \"exit\" | \"ExitProcess\" => {\n                 // it's really u32 for ExitProcess, but we have to put it into the `Exit` error variant anyway\n                 let code = this.read_scalar(args[0])?.to_i32()?;\n                 return Err(InterpError::Exit(code).into());\n             }\n             _ => if dest.is_none() {\n-                throw_unsup!(Unimplemented(\n-                    format!(\"can't call diverging foreign function: {}\", link_name),\n-                ));\n+                throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name);\n             }\n         }\n \n@@ -179,16 +177,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !align.is_power_of_two() {\n                     throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n-                /*\n-                FIXME: This check is disabled because rustc violates it.\n-                See <https://github.com/rust-lang/rust/issues/62251>.\n                 if align < this.pointer_size().bytes() {\n-                    throw_unsup!(MachineError(format!(\n+                    throw_ub_format!(\n                         \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n                         align,\n-                    )));\n+                    );\n                 }\n-                */\n+\n                 if size == 0 {\n                     this.write_null(ret.into())?;\n                 } else {\n@@ -309,9 +304,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n                     id => {\n-                        throw_unsup!(Unimplemented(\n-                            format!(\"miri does not support syscall ID {}\", id),\n-                        ))\n+                        throw_unsup_format!(\"miri does not support syscall ID {}\", id)\n                     }\n                 }\n             }\n@@ -359,12 +352,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n                 let mut args = this.frame().body.args_iter();\n \n-                let arg_local = args.next().ok_or_else(||\n-                    err_unsup!(AbiViolation(\n-                        \"Argument to __rust_maybe_catch_panic does not take enough arguments.\"\n-                            .to_owned(),\n-                    )),\n-                )?;\n+                let arg_local = args.next()\n+                    .expect(\"Argument to __rust_maybe_catch_panic does not take enough arguments.\");\n                 let arg_dest = this.local_place(arg_local)?;\n                 this.write_scalar(data, arg_dest)?;\n \n@@ -641,9 +630,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if let Some(result) = result {\n                     this.write_scalar(result, dest)?;\n                 } else {\n-                    throw_unsup!(Unimplemented(\n-                        format!(\"Unimplemented sysconf name: {}\", name),\n-                    ));\n+                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n                 }\n             }\n \n@@ -670,9 +657,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // This is `libc::pthread_key_t`.\n                 let key_type = args[0].layout.ty\n                     .builtin_deref(true)\n-                    .ok_or_else(|| err_unsup!(\n-                        AbiViolation(\"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\".to_owned())\n-                    ))?\n+                    .ok_or_else(|| err_ub!(Ub(format!(\n+                        \"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\"\n+                    ))))?\n                     .ty;\n                 let key_layout = this.layout_of(key_type)?;\n \n@@ -738,7 +725,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // We don't support threading. (Also for Windows.)\n             \"pthread_create\" | \"CreateThread\" => {\n-                throw_unsup!(Unimplemented(format!(\"Miri does not support threading\")));\n+                throw_unsup_format!(\"Miri does not support threading\");\n             }\n \n             // Stub out calls for condvar, mutex and rwlock, to just return `0`.\n@@ -957,9 +944,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // We can't execute anything else.\n             _ => {\n-                throw_unsup!(Unimplemented(\n-                    format!(\"can't call foreign function: {}\", link_name),\n-                ));\n+                throw_unsup_format!(\"can't call foreign function: {}\", link_name)\n             }\n         }\n "}, {"sha": "5c3ff139c0262f7ee62b3fc75e95717c1569e498", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -133,7 +133,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_xsub_relaxed\" => {\n                 let ptr = this.deref_operand(args[0])?;\n                 if !ptr.layout.ty.is_integral() {\n-                    throw_unsup!(Unimplemented(format!(\"Atomic arithmetic operations only work on integer types\")));\n+                    bug!(\"Atomic arithmetic operations only work on integer types\");\n                 }\n                 let rhs = this.read_immediate(args[1])?;\n                 let old = this.read_immediate(ptr.into())?;\n@@ -279,9 +279,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // Check if `b` is -1, which is the \"min_value / -1\" case.\n                     let minus1 = Scalar::from_int(-1, dest.layout.size);\n                     return Err(if b.to_scalar().unwrap() == minus1 {\n-                        err_unsup!(Intrinsic(format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")))\n+                        err_ub!(Ub(format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")))\n                     } else {\n-                        err_unsup!(Intrinsic(format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)))\n+                        err_ub!(Ub(format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)))\n                     }.into());\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;\n@@ -350,7 +350,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 if layout.abi.is_uninhabited() {\n-                    throw_unsup!(Intrinsic(format!(\"Trying to instantiate uninhabited type {}\", ty)))\n+                    throw_ub_format!(\"Trying to instantiate uninhabited type {}\", ty)\n                 }\n             }\n \n@@ -444,7 +444,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let r = this.read_immediate(args[1])?;\n                 let rval = r.to_scalar()?.to_bits(args[1].layout.size)?;\n                 if rval == 0 {\n-                    throw_unsup!(Intrinsic(format!(\"Division by 0 in unchecked_div\")));\n+                    throw_ub_format!(\"Division by 0 in unchecked_div\");\n                 }\n                 this.binop_ignore_overflow(\n                     mir::BinOp::Div,\n@@ -459,7 +459,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let r = this.read_immediate(args[1])?;\n                 let rval = r.to_scalar()?.to_bits(args[1].layout.size)?;\n                 if rval == 0 {\n-                    throw_unsup!(Intrinsic(format!(\"Division by 0 in unchecked_rem\")));\n+                    throw_ub_format!(\"Division by 0 in unchecked_rem\");\n                 }\n                 this.binop_ignore_overflow(\n                     mir::BinOp::Rem,\n@@ -480,7 +480,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 let (res, overflowed) = this.binary_op(op, l, r)?;\n                 if overflowed {\n-                    throw_unsup!(Intrinsic(format!(\"Overflowing arithmetic in {}\", intrinsic_name.get())));\n+                    throw_ub_format!(\"Overflowing arithmetic in {}\", intrinsic_name.get());\n                 }\n                 this.write_scalar(res, dest)?;\n             }\n@@ -504,7 +504,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            name => throw_unsup!(Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),\n+            name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),\n         }\n \n         Ok(())"}, {"sha": "05b8dc15da66be66d9131699e49cdd8ec918aaa1", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -158,7 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 StackPopCleanup::None { cleanup: true },\n             )?;\n             let arg_local = this.frame().body.args_iter().next().ok_or_else(\n-                || err_unsup!(AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned())),\n+                || err_ub!(Ub(format!(\"TLS dtor does not take enough arguments.\"))),\n             )?;\n             let dest = this.local_place(arg_local)?;\n             this.write_scalar(ptr, dest)?;"}, {"sha": "0fbc3e1ac281df374c300970d6eb34d070d97aa0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -273,14 +273,14 @@ impl<'tcx> Stack {\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {\n-                    throw_unsup!(MachineError(format!(\n+                    throw_ub_format!(\n                         \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n                         tag, item\n-                    )));\n+                    );\n                 } else {\n-                    throw_unsup!(MachineError(format!(\n+                    throw_ub_format!(\n                         \"deallocating while item is protected: {:?}\", item\n-                    )));\n+                    );\n                 }\n             }\n         }\n@@ -299,7 +299,7 @@ impl<'tcx> Stack {\n \n         // Step 1: Find granting item.\n         let granting_idx = self.find_granting(access, tag)\n-            .ok_or_else(|| err_unsup!(MachineError(format!(\n+            .ok_or_else(|| err_ub!(Ub(format!(\n                 \"no item granting {} to tag {:?} found in borrow stack\",\n                 access, tag,\n             ))))?;\n@@ -346,7 +346,7 @@ impl<'tcx> Stack {\n     ) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n         self.find_granting(AccessKind::Write, tag)\n-            .ok_or_else(|| err_unsup!(MachineError(format!(\n+            .ok_or_else(|| err_ub!(Ub(format!(\n                 \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n                 tag,\n             ))))?;\n@@ -378,7 +378,7 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx = self.find_granting(access, derived_from)\n-            .ok_or_else(|| err_unsup!(MachineError(format!(\n+            .ok_or_else(|| err_ub!(Ub(format!(\n                 \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\", new.perm, derived_from,\n             ))))?;\n "}, {"sha": "8c2ed98b7dfab210d77f9f9ffa60116a35e67612", "filename": "tests/compile-fail/atomic_non_integer_arithmetic.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0e88502673a359786147d54166d5f35b391178e/tests%2Fcompile-fail%2Fatomic_non_integer_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e88502673a359786147d54166d5f35b391178e/tests%2Fcompile-fail%2Fatomic_non_integer_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fatomic_non_integer_arithmetic.rs?ref=d0e88502673a359786147d54166d5f35b391178e", "patch": "@@ -1,9 +0,0 @@\n-#![feature(core_intrinsics)]\n-\n-pub fn main() {\n-    let mut z: f64 = 1.0;\n-    unsafe {\n-        ::std::intrinsics::atomic_xadd(&mut z, 2.0);\n-        //~^ ERROR: Atomic arithmetic operations only work on integer types\n-    }\n-}"}, {"sha": "e82ed89da18a742d446f277e258623a9fb01537a", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR ctlz_nonzero called on 0\n+        ctlz_nonzero(0u8); //~ ERROR `ctlz_nonzero` called on 0\n     }\n }"}, {"sha": "205b5520811481f069c86c10cfd77798c262a92f", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR cttz_nonzero called on 0\n+        cttz_nonzero(0u8); //~ ERROR `cttz_nonzero` called on 0\n     }\n }"}, {"sha": "f59773f7e366ce5a5266ff245de30ef807adfd75", "filename": "tests/compile-fail/overflowing-unchecked-rsh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d6df93a98f6545b2757a802e440eb043f23945/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs?ref=d9d6df93a98f6545b2757a802e440eb043f23945", "patch": "@@ -2,7 +2,7 @@\n \n use std::intrinsics::*;\n \n-//error-pattern: Overflowing shift by 64 in unchecked_shr\n+//error-pattern: Overflowing shift by 64 in `unchecked_shr`\n \n fn main() {\n     unsafe {"}]}