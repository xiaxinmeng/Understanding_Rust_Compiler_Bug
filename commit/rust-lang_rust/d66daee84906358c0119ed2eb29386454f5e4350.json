{"sha": "d66daee84906358c0119ed2eb29386454f5e4350", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NmRhZWU4NDkwNjM1OGMwMTE5ZWQyZWIyOTM4NjQ1NGY1ZTQzNTA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-06T15:52:00Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-06T15:52:00Z"}, "message": "Clean up handling of int/float literal types\n\n'Unknown' int/float types actually never exist as such, they get replaced by\ntype variables immediately. So the whole `Uncertain<IntTy>` thing was\nunnecessary and just led to a bunch of match branches that were never hit.", "tree": {"sha": "2016ec64b709488dce3ba919b48515593cd93df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2016ec64b709488dce3ba919b48515593cd93df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d66daee84906358c0119ed2eb29386454f5e4350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d66daee84906358c0119ed2eb29386454f5e4350", "html_url": "https://github.com/rust-lang/rust/commit/d66daee84906358c0119ed2eb29386454f5e4350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d66daee84906358c0119ed2eb29386454f5e4350/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a609336d7287b3ddddbde30b1f0fb606bf149baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a609336d7287b3ddddbde30b1f0fb606bf149baf", "html_url": "https://github.com/rust-lang/rust/commit/a609336d7287b3ddddbde30b1f0fb606bf149baf"}], "stats": {"total": 137, "additions": 33, "deletions": 104}, "files": [{"sha": "f965eb2b5c990f1ed7b7fae9cab9caab84859d2c", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -39,8 +39,7 @@ use ra_syntax::SmolStr;\n use super::{\n     primitive::{FloatTy, IntTy},\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n-    TypeWalk, Uncertain,\n+    InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n@@ -312,12 +311,6 @@ impl<'a> InferenceContext<'a> {\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n             Ty::Unknown => self.table.new_type_var(),\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::Int(Uncertain::Unknown), .. }) => {\n-                self.table.new_integer_var()\n-            }\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::Float(Uncertain::Unknown), .. }) => {\n-                self.table.new_float_var()\n-            }\n             _ => ty,\n         }\n     }\n@@ -664,8 +657,8 @@ impl InferTy {\n     fn fallback_value(self) -> Ty {\n         match self {\n             InferTy::TypeVar(..) => Ty::Unknown,\n-            InferTy::IntVar(..) => Ty::simple(TypeCtor::Int(Uncertain::Known(IntTy::i32()))),\n-            InferTy::FloatVar(..) => Ty::simple(TypeCtor::Float(Uncertain::Known(FloatTy::f64()))),\n+            InferTy::IntVar(..) => Ty::simple(TypeCtor::Int(IntTy::i32())),\n+            InferTy::FloatVar(..) => Ty::simple(TypeCtor::Float(FloatTy::f64())),\n             InferTy::MaybeNeverTypeVar(..) => Ty::simple(TypeCtor::Never),\n         }\n     }"}, {"sha": "9fd310f69a79d5fd0ba27027de31623ed074f24b", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     traits::InEnvironment,\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Rawness, Substs,\n-    TraitRef, Ty, TypeCtor, Uncertain,\n+    TraitRef, Ty, TypeCtor,\n };\n \n use super::{\n@@ -426,15 +426,7 @@ impl<'a> InferenceContext<'a> {\n                         match &inner_ty {\n                             // Fast path for builtins\n                             Ty::Apply(ApplicationTy {\n-                                ctor:\n-                                    TypeCtor::Int(Uncertain::Known(IntTy {\n-                                        signedness: Signedness::Signed,\n-                                        ..\n-                                    })),\n-                                ..\n-                            })\n-                            | Ty::Apply(ApplicationTy {\n-                                ctor: TypeCtor::Int(Uncertain::Unknown),\n+                                ctor: TypeCtor::Int(IntTy { signedness: Signedness::Signed, .. }),\n                                 ..\n                             })\n                             | Ty::Apply(ApplicationTy { ctor: TypeCtor::Float(_), .. })\n@@ -577,9 +569,7 @@ impl<'a> InferenceContext<'a> {\n                         );\n                         self.infer_expr(\n                             *repeat,\n-                            &Expectation::has_type(Ty::simple(TypeCtor::Int(Uncertain::Known(\n-                                IntTy::usize(),\n-                            )))),\n+                            &Expectation::has_type(Ty::simple(TypeCtor::Int(IntTy::usize()))),\n                         );\n                     }\n                 }\n@@ -592,13 +582,19 @@ impl<'a> InferenceContext<'a> {\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), Ty::simple(TypeCtor::Str))\n                 }\n                 Literal::ByteString(..) => {\n-                    let byte_type = Ty::simple(TypeCtor::Int(Uncertain::Known(IntTy::u8())));\n+                    let byte_type = Ty::simple(TypeCtor::Int(IntTy::u8()));\n                     let array_type = Ty::apply_one(TypeCtor::Array, byte_type);\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), array_type)\n                 }\n                 Literal::Char(..) => Ty::simple(TypeCtor::Char),\n-                Literal::Int(_v, ty) => Ty::simple(TypeCtor::Int((*ty).into())),\n-                Literal::Float(_v, ty) => Ty::simple(TypeCtor::Float((*ty).into())),\n+                Literal::Int(_v, ty) => match ty {\n+                    Some(int_ty) => Ty::simple(TypeCtor::Int((*int_ty).into())),\n+                    None => self.table.new_integer_var(),\n+                },\n+                Literal::Float(_v, ty) => match ty {\n+                    Some(float_ty) => Ty::simple(TypeCtor::Float((*float_ty).into())),\n+                    None => self.table.new_float_var(),\n+                },\n             },\n         };\n         // use a new type variable if we got Ty::Unknown here"}, {"sha": "2b9372b4b1bc91da1ad131066df2b9b50cf4e6d3", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -58,7 +58,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n \n use crate::{\n     db::HirDatabase,\n-    primitive::{FloatTy, IntTy, Uncertain},\n+    primitive::{FloatTy, IntTy},\n     utils::{generics, make_mut_slice, Generics},\n };\n use display::HirDisplay;\n@@ -87,10 +87,10 @@ pub enum TypeCtor {\n     Char,\n \n     /// A primitive integer type. For example, `i32`.\n-    Int(Uncertain<IntTy>),\n+    Int(IntTy),\n \n     /// A primitive floating-point type. For example, `f64`.\n-    Float(Uncertain<FloatTy>),\n+    Float(FloatTy),\n \n     /// Structures, enumerations and unions.\n     Adt(AdtId),"}, {"sha": "e83b394566b1b8573202eea06c29356e15eb7f79", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -16,12 +16,8 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use super::Substs;\n use crate::{\n-    autoderef,\n-    db::HirDatabase,\n-    primitive::{FloatBitness, Uncertain},\n-    utils::all_super_traits,\n-    ApplicationTy, Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty,\n-    TypeCtor, TypeWalk,\n+    autoderef, db::HirDatabase, primitive::FloatBitness, utils::all_super_traits, ApplicationTy,\n+    Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -147,12 +143,12 @@ impl Ty {\n                 }\n                 TypeCtor::Bool => lang_item_crate!(\"bool\"),\n                 TypeCtor::Char => lang_item_crate!(\"char\"),\n-                TypeCtor::Float(Uncertain::Known(f)) => match f.bitness {\n+                TypeCtor::Float(f) => match f.bitness {\n                     // There are two lang items: one in libcore (fXX) and one in libstd (fXX_runtime)\n                     FloatBitness::X32 => lang_item_crate!(\"f32\", \"f32_runtime\"),\n                     FloatBitness::X64 => lang_item_crate!(\"f64\", \"f64_runtime\"),\n                 },\n-                TypeCtor::Int(Uncertain::Known(i)) => lang_item_crate!(i.ty_to_string()),\n+                TypeCtor::Int(i) => lang_item_crate!(i.ty_to_string()),\n                 TypeCtor::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n                 TypeCtor::Slice => lang_item_crate!(\"slice_alloc\", \"slice\"),\n                 TypeCtor::RawPtr(Mutability::Shared) => lang_item_crate!(\"const_ptr\"),"}, {"sha": "37966b709848cc38c4bd08940f115fa25d48bcd2", "filename": "crates/ra_hir_ty/src/primitive.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -7,42 +7,6 @@ use std::fmt;\n \n pub use hir_def::builtin_type::{BuiltinFloat, BuiltinInt, FloatBitness, IntBitness, Signedness};\n \n-#[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]\n-pub enum Uncertain<T> {\n-    Unknown,\n-    Known(T),\n-}\n-\n-impl From<IntTy> for Uncertain<IntTy> {\n-    fn from(ty: IntTy) -> Self {\n-        Uncertain::Known(ty)\n-    }\n-}\n-\n-impl fmt::Display for Uncertain<IntTy> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Uncertain::Unknown => write!(f, \"{{integer}}\"),\n-            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n-        }\n-    }\n-}\n-\n-impl From<FloatTy> for Uncertain<FloatTy> {\n-    fn from(ty: FloatTy) -> Self {\n-        Uncertain::Known(ty)\n-    }\n-}\n-\n-impl fmt::Display for Uncertain<FloatTy> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Uncertain::Unknown => write!(f, \"{{float}}\"),\n-            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, Eq, PartialEq, Hash)]\n pub struct IntTy {\n     pub signedness: Signedness,\n@@ -173,21 +137,3 @@ impl From<BuiltinFloat> for FloatTy {\n         FloatTy { bitness: t.bitness }\n     }\n }\n-\n-impl From<Option<BuiltinInt>> for Uncertain<IntTy> {\n-    fn from(t: Option<BuiltinInt>) -> Self {\n-        match t {\n-            None => Uncertain::Unknown,\n-            Some(t) => Uncertain::Known(t.into()),\n-        }\n-    }\n-}\n-\n-impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n-    fn from(t: Option<BuiltinFloat>) -> Self {\n-        match t {\n-            None => Uncertain::Unknown,\n-            Some(t) => Uncertain::Known(t.into()),\n-        }\n-    }\n-}"}, {"sha": "18e5c9c16fcab27cb86ac1231e62b186b3f6dd58", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66daee84906358c0119ed2eb29386454f5e4350/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=d66daee84906358c0119ed2eb29386454f5e4350", "patch": "@@ -14,7 +14,7 @@ use ra_db::salsa::InternKey;\n \n use crate::{\n     db::HirDatabase,\n-    primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness, Uncertain},\n+    primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n     traits::{builtin, AssocTyValue, Canonical, Impl, Obligation},\n     ApplicationTy, CallableDef, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId,\n     ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n@@ -249,11 +249,11 @@ impl ToChalk for TypeCtor {\n \n             TypeCtor::Bool => TypeName::Scalar(Scalar::Bool),\n             TypeCtor::Char => TypeName::Scalar(Scalar::Char),\n-            TypeCtor::Int(Uncertain::Known(int_ty)) => TypeName::Scalar(int_ty_to_chalk(int_ty)),\n-            TypeCtor::Float(Uncertain::Known(FloatTy { bitness: FloatBitness::X32 })) => {\n+            TypeCtor::Int(int_ty) => TypeName::Scalar(int_ty_to_chalk(int_ty)),\n+            TypeCtor::Float(FloatTy { bitness: FloatBitness::X32 }) => {\n                 TypeName::Scalar(Scalar::Float(chalk_ir::FloatTy::F32))\n             }\n-            TypeCtor::Float(Uncertain::Known(FloatTy { bitness: FloatBitness::X64 })) => {\n+            TypeCtor::Float(FloatTy { bitness: FloatBitness::X64 }) => {\n                 TypeName::Scalar(Scalar::Float(chalk_ir::FloatTy::F64))\n             }\n \n@@ -268,9 +268,7 @@ impl ToChalk for TypeCtor {\n             }\n             TypeCtor::Never => TypeName::Never,\n \n-            TypeCtor::Int(Uncertain::Unknown)\n-            | TypeCtor::Float(Uncertain::Unknown)\n-            | TypeCtor::Adt(_)\n+            TypeCtor::Adt(_)\n             | TypeCtor::Array\n             | TypeCtor::FnPtr { .. }\n             | TypeCtor::Closure { .. } => {\n@@ -291,19 +289,19 @@ impl ToChalk for TypeCtor {\n \n             TypeName::Scalar(Scalar::Bool) => TypeCtor::Bool,\n             TypeName::Scalar(Scalar::Char) => TypeCtor::Char,\n-            TypeName::Scalar(Scalar::Int(int_ty)) => TypeCtor::Int(Uncertain::Known(IntTy {\n+            TypeName::Scalar(Scalar::Int(int_ty)) => TypeCtor::Int(IntTy {\n                 signedness: Signedness::Signed,\n                 bitness: bitness_from_chalk_int(int_ty),\n-            })),\n-            TypeName::Scalar(Scalar::Uint(uint_ty)) => TypeCtor::Int(Uncertain::Known(IntTy {\n+            }),\n+            TypeName::Scalar(Scalar::Uint(uint_ty)) => TypeCtor::Int(IntTy {\n                 signedness: Signedness::Unsigned,\n                 bitness: bitness_from_chalk_uint(uint_ty),\n-            })),\n+            }),\n             TypeName::Scalar(Scalar::Float(chalk_ir::FloatTy::F32)) => {\n-                TypeCtor::Float(Uncertain::Known(FloatTy { bitness: FloatBitness::X32 }))\n+                TypeCtor::Float(FloatTy { bitness: FloatBitness::X32 })\n             }\n             TypeName::Scalar(Scalar::Float(chalk_ir::FloatTy::F64)) => {\n-                TypeCtor::Float(Uncertain::Known(FloatTy { bitness: FloatBitness::X64 }))\n+                TypeCtor::Float(FloatTy { bitness: FloatBitness::X64 })\n             }\n             TypeName::Tuple(cardinality) => TypeCtor::Tuple { cardinality: cardinality as u16 },\n             TypeName::Raw(mutability) => TypeCtor::RawPtr(from_chalk(db, mutability)),"}]}