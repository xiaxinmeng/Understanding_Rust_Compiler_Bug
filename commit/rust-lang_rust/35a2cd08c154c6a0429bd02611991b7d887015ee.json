{"sha": "35a2cd08c154c6a0429bd02611991b7d887015ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTJjZDA4YzE1NGM2YTA0MjliZDAyNjExOTkxYjdkODg3MDE1ZWU=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2020-04-02T19:17:33Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2020-04-02T19:18:44Z"}, "message": "Adds to SSR match for semantically equivalent call and method call", "tree": {"sha": "08c54e7354b12dbc3668cf10dbfcc80fa198bcd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c54e7354b12dbc3668cf10dbfcc80fa198bcd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a2cd08c154c6a0429bd02611991b7d887015ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a2cd08c154c6a0429bd02611991b7d887015ee", "html_url": "https://github.com/rust-lang/rust/commit/35a2cd08c154c6a0429bd02611991b7d887015ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a2cd08c154c6a0429bd02611991b7d887015ee/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642f3f4bd62019d8c0fdd6304ff07d87a5aca627", "url": "https://api.github.com/repos/rust-lang/rust/commits/642f3f4bd62019d8c0fdd6304ff07d87a5aca627", "html_url": "https://github.com/rust-lang/rust/commit/642f3f4bd62019d8c0fdd6304ff07d87a5aca627"}], "stats": {"total": 122, "additions": 110, "deletions": 12}, "files": [{"sha": "7b93ff2d28eb5517bc65169f76ff374b6fb31825", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 110, "deletions": 12, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/35a2cd08c154c6a0429bd02611991b7d887015ee/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a2cd08c154c6a0429bd02611991b7d887015ee/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=35a2cd08c154c6a0429bd02611991b7d887015ee", "patch": "@@ -5,12 +5,14 @@ use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_ide_db::symbol_index::SymbolsDatabase;\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::make::try_expr_from_text;\n-use ra_syntax::ast::{AstToken, Comment, RecordField, RecordLit};\n-use ra_syntax::{AstNode, SyntaxElement, SyntaxNode};\n+use ra_syntax::ast::{\n+    ArgList, AstToken, CallExpr, Comment, Expr, MethodCallExpr, RecordField, RecordLit,\n+};\n+use ra_syntax::{AstNode, SyntaxElement, SyntaxKind, SyntaxNode};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n use rustc_hash::FxHashMap;\n use std::collections::HashMap;\n-use std::str::FromStr;\n+use std::{iter::once, str::FromStr};\n \n #[derive(Debug, PartialEq)]\n pub struct SsrError(String);\n@@ -219,6 +221,50 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n         )\n     }\n \n+    fn check_call_and_method_call(\n+        pattern: CallExpr,\n+        code: MethodCallExpr,\n+        placeholders: &[Var],\n+        match_: Match,\n+    ) -> Option<Match> {\n+        let (pattern_name, pattern_type_args) = if let Some(Expr::PathExpr(path_exr)) =\n+            pattern.expr()\n+        {\n+            let segment = path_exr.path().and_then(|p| p.segment());\n+            (segment.as_ref().and_then(|s| s.name_ref()), segment.and_then(|s| s.type_arg_list()))\n+        } else {\n+            (None, None)\n+        };\n+        let match_ = check_opt_nodes(pattern_name, code.name_ref(), placeholders, match_)?;\n+        let match_ =\n+            check_opt_nodes(pattern_type_args, code.type_arg_list(), placeholders, match_)?;\n+        let pattern_args = pattern.syntax().children().find_map(ArgList::cast)?.args();\n+        let code_args = code.syntax().children().find_map(ArgList::cast)?.args();\n+        let code_args = once(code.expr()?).chain(code_args);\n+        check_iter(pattern_args, code_args, placeholders, match_)\n+    }\n+\n+    fn check_method_call_and_call(\n+        pattern: MethodCallExpr,\n+        code: CallExpr,\n+        placeholders: &[Var],\n+        match_: Match,\n+    ) -> Option<Match> {\n+        let (code_name, code_type_args) = if let Some(Expr::PathExpr(path_exr)) = code.expr() {\n+            let segment = path_exr.path().and_then(|p| p.segment());\n+            (segment.as_ref().and_then(|s| s.name_ref()), segment.and_then(|s| s.type_arg_list()))\n+        } else {\n+            (None, None)\n+        };\n+        let match_ = check_opt_nodes(pattern.name_ref(), code_name, placeholders, match_)?;\n+        let match_ =\n+            check_opt_nodes(pattern.type_arg_list(), code_type_args, placeholders, match_)?;\n+        let code_args = code.syntax().children().find_map(ArgList::cast)?.args();\n+        let pattern_args = pattern.syntax().children().find_map(ArgList::cast)?.args();\n+        let pattern_args = once(pattern.expr()?).chain(pattern_args);\n+        check_iter(pattern_args, code_args, placeholders, match_)\n+    }\n+\n     fn check_opt_nodes(\n         pattern: Option<impl AstNode>,\n         code: Option<impl AstNode>,\n@@ -227,8 +273,8 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n     ) -> Option<Match> {\n         match (pattern, code) {\n             (Some(pattern), Some(code)) => check(\n-                &SyntaxElement::from(pattern.syntax().clone()),\n-                &SyntaxElement::from(code.syntax().clone()),\n+                &pattern.syntax().clone().into(),\n+                &code.syntax().clone().into(),\n                 placeholders,\n                 match_,\n             ),\n@@ -237,6 +283,33 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n         }\n     }\n \n+    fn check_iter<T, I1, I2>(\n+        mut pattern: I1,\n+        mut code: I2,\n+        placeholders: &[Var],\n+        match_: Match,\n+    ) -> Option<Match>\n+    where\n+        T: AstNode,\n+        I1: Iterator<Item = T>,\n+        I2: Iterator<Item = T>,\n+    {\n+        pattern\n+            .by_ref()\n+            .zip(code.by_ref())\n+            .fold(Some(match_), |accum, (a, b)| {\n+                accum.and_then(|match_| {\n+                    check(\n+                        &a.syntax().clone().into(),\n+                        &b.syntax().clone().into(),\n+                        placeholders,\n+                        match_,\n+                    )\n+                })\n+            })\n+            .filter(|_| pattern.next().is_none() && code.next().is_none())\n+    }\n+\n     fn check(\n         pattern: &SyntaxElement,\n         code: &SyntaxElement,\n@@ -260,6 +333,14 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n                         (RecordLit::cast(pattern.clone()), RecordLit::cast(code.clone()))\n                     {\n                         check_record_lit(pattern, code, placeholders, match_)\n+                    } else if let (Some(pattern), Some(code)) =\n+                        (CallExpr::cast(pattern.clone()), MethodCallExpr::cast(code.clone()))\n+                    {\n+                        check_call_and_method_call(pattern, code, placeholders, match_)\n+                    } else if let (Some(pattern), Some(code)) =\n+                        (MethodCallExpr::cast(pattern.clone()), CallExpr::cast(code.clone()))\n+                    {\n+                        check_method_call_and_call(pattern, code, placeholders, match_)\n                     } else {\n                         let mut pattern_children = pattern\n                             .children_with_tokens()\n@@ -290,16 +371,15 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n     let kind = pattern.pattern.kind();\n     let matches = code\n         .descendants()\n-        .filter(|n| n.kind() == kind)\n+        .filter(|n| {\n+            n.kind() == kind\n+                || (kind == SyntaxKind::CALL_EXPR && n.kind() == SyntaxKind::METHOD_CALL_EXPR)\n+                || (kind == SyntaxKind::METHOD_CALL_EXPR && n.kind() == SyntaxKind::CALL_EXPR)\n+        })\n         .filter_map(|code| {\n             let match_ =\n                 Match { place: code.clone(), binding: HashMap::new(), ignored_comments: vec![] };\n-            check(\n-                &SyntaxElement::from(pattern.pattern.clone()),\n-                &SyntaxElement::from(code),\n-                &pattern.vars,\n-                match_,\n-            )\n+            check(&pattern.pattern.clone().into(), &code.into(), &pattern.vars, match_)\n         })\n         .collect();\n     SsrMatches { matches }\n@@ -498,4 +578,22 @@ mod tests {\n             \"fn main() { foo::new(1, 2) }\",\n         )\n     }\n+\n+    #[test]\n+    fn ssr_call_and_method_call() {\n+        assert_ssr_transform(\n+            \"foo::<'a>($a:expr, $b:expr)) ==>> foo2($a, $b)\",\n+            \"fn main() { get().bar.foo::<'a>(1); }\",\n+            \"fn main() { foo2(get().bar, 1); }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn ssr_method_call_and_call() {\n+        assert_ssr_transform(\n+            \"$o:expr.foo::<i32>($a:expr)) ==>> $o.foo2($a)\",\n+            \"fn main() { X::foo::<i32>(x, 1); }\",\n+            \"fn main() { x.foo2(1); }\",\n+        )\n+    }\n }"}]}