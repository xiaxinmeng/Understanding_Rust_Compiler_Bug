{"sha": "b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYTEwZGIwM2VhMWEwZTQzZjU4MzE5ZDJkMGQwMDZiZDMxZGVkMDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-12T11:25:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:55Z"}, "message": "avoid early return", "tree": {"sha": "5383b73cb4781a95f231c78cbd844b3a1e61f7a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5383b73cb4781a95f231c78cbd844b3a1e61f7a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "html_url": "https://github.com/rust-lang/rust/commit/b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a10db03ea1a0e43f58319d2d0d006bd31ded08/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b588edc41374c217b290dad0a27d6206ef183cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b588edc41374c217b290dad0a27d6206ef183cdb", "html_url": "https://github.com/rust-lang/rust/commit/b588edc41374c217b290dad0a27d6206ef183cdb"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "464dae6d5011a3b0f0267d904e9d465fdc1fba7a", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b3a10db03ea1a0e43f58319d2d0d006bd31ded08/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a10db03ea1a0e43f58319d2d0d006bd31ded08/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "patch": "@@ -1036,13 +1036,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();\n \n-        let (variant, substs) = match **ak {\n+        match **ak {\n             AggregateKind::Adt(def, variant, substs, _) => {\n-                // handle unions?\n-                (&def.variants[variant], substs)\n+                if let Some(field) = def.variants[variant].fields.get(field) {\n+                    Ok(self.normalize(&field.ty(tcx, substs), location))\n+                } else {\n+                    Err(FieldAccessError::OutOfRange {\n+                        field_count: variant.fields.len(),\n+                    })\n+                }\n             }\n             AggregateKind::Closure(def_id, substs) => {\n-                return match substs.upvar_tys(def_id, tcx).nth(field) {\n+                match substs.upvar_tys(def_id, tcx).nth(field) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n                         field_count: substs.upvar_tys(def_id, tcx).count(),\n@@ -1051,30 +1056,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             AggregateKind::Generator(def_id, substs, _) => {\n                 if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field) {\n-                    return Ok(ty);\n+                    Ok(ty);\n+                } else {\n+                    match substs.field_tys(def_id, tcx).nth(field) {\n+                        Some(ty) => Ok(ty),\n+                        None => Err(FieldAccessError::OutOfRange {\n+                            field_count: substs.field_tys(def_id, tcx).count() + 1,\n+                        }),\n+                    }\n                 }\n-\n-                return match substs.field_tys(def_id, tcx).nth(field) {\n-                    Some(ty) => Ok(ty),\n-                    None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.field_tys(def_id, tcx).count() + 1,\n-                    }),\n-                };\n             }\n             AggregateKind::Array(ty) => {\n-                return Ok(ty);\n+                Ok(ty)\n             }\n             AggregateKind::Tuple => {\n                 unreachable!(\"This should have been covered in check_rvalues\");\n             }\n-        };\n-\n-        if let Some(field) = variant.fields.get(field) {\n-            Ok(self.normalize(&field.ty(tcx, substs), location))\n-        } else {\n-            Err(FieldAccessError::OutOfRange {\n-                field_count: variant.fields.len(),\n-            })\n         }\n     }\n "}]}