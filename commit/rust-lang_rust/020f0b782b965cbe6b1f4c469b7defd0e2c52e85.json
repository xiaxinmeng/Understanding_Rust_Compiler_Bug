{"sha": "020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMGYwYjc4MmI5NjVjYmU2YjFmNGM0NjliN2RlZmQwZTJjNTJlODU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-27T01:54:19Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-27T01:54:19Z"}, "message": "Refactor passing of resource limits.", "tree": {"sha": "6bb39bf32dd60115ca1b33912b7e4917e58ce2a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb39bf32dd60115ca1b33912b7e4917e58ce2a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "html_url": "https://github.com/rust-lang/rust/commit/020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f764a5cfd36f4b41e3295c489eb7ed571198942", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f764a5cfd36f4b41e3295c489eb7ed571198942", "html_url": "https://github.com/rust-lang/rust/commit/3f764a5cfd36f4b41e3295c489eb7ed571198942"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "6c0161ef0754a558597fb3673700b56ce904e5d7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "patch": "@@ -9,7 +9,6 @@ extern crate log_settings;\n extern crate syntax;\n #[macro_use] extern crate log;\n \n-use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n use rustc_driver::{CompilerCalls, Compilation};\n use rustc_driver::driver::{CompileState, CompileController};\n@@ -39,27 +38,33 @@ fn after_analysis(state: &mut CompileState) {\n     let (entry_node_id, _) = state.session.entry_fn.borrow()\n         .expect(\"no main or start function found\");\n     let entry_def_id = tcx.map.local_def_id(entry_node_id);\n+    let limits = resource_limits_from_attributes(state);\n+    miri::run_mir_passes(tcx);\n+    miri::eval_main(tcx, entry_def_id, limits);\n+\n+    state.session.abort_if_errors();\n+}\n+\n+fn resource_limits_from_attributes(state: &CompileState) -> miri::ResourceLimits {\n+    let mut limits = miri::ResourceLimits::default();\n     let krate = state.hir_crate.as_ref().unwrap();\n-    let mut memory_size = 100 * 1024 * 1024; // 100 MB\n-    let mut step_limit = 1_000_000;\n-    let mut stack_limit = 100;\n+    let err_msg = \"miri attributes need to be in the form `miri(key = value)`\";\n     let extract_int = |lit: &syntax::ast::Lit| -> u64 {\n         match lit.node {\n             syntax::ast::LitKind::Int(i, _) => i,\n             _ => state.session.span_fatal(lit.span, \"expected an integer literal\"),\n         }\n     };\n-    let err_msg = \"miri attributes need to be in the form `miri(key = value)`\";\n \n     for attr in krate.attrs.iter().filter(|a| a.name() == \"miri\") {\n         if let MetaItemKind::List(ref items) = attr.value.node {\n             for item in items {\n                 if let NestedMetaItemKind::MetaItem(ref inner) = item.node {\n                     if let MetaItemKind::NameValue(ref value) = inner.node {\n                         match &inner.name().as_str()[..] {\n-                            \"memory_size\" => memory_size = extract_int(value),\n-                            \"step_limit\" => step_limit = extract_int(value),\n-                            \"stack_limit\" => stack_limit = extract_int(value) as usize,\n+                            \"memory_size\" => limits.memory_size = extract_int(value),\n+                            \"step_limit\" => limits.step_limit = extract_int(value),\n+                            \"stack_limit\" => limits.stack_limit = extract_int(value) as usize,\n                             _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n                         }\n                     } else {\n@@ -73,11 +78,7 @@ fn after_analysis(state: &mut CompileState) {\n             state.session.span_err(attr.span, err_msg);\n         }\n     }\n-\n-    run_mir_passes(tcx);\n-    eval_main(tcx, entry_def_id, memory_size, step_limit, stack_limit);\n-\n-    state.session.abort_if_errors();\n+    limits\n }\n \n fn init_logger() {"}, {"sha": "b1b3081a2d76e096ee060f1d351343d283f8c3f2", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "patch": "@@ -166,15 +166,32 @@ pub enum StackPopCleanup {\n     None,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct ResourceLimits {\n+    pub memory_size: u64,\n+    pub step_limit: u64,\n+    pub stack_limit: usize,\n+}\n+\n+impl Default for ResourceLimits {\n+    fn default() -> Self {\n+        ResourceLimits {\n+            memory_size: 100 * 1024 * 1024, // 100 MB\n+            step_limit: 1_000_000,\n+            stack_limit: 100,\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, memory_size: u64, stack_limit: usize, step_limit: u64) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, limits: ResourceLimits) -> Self {\n         EvalContext {\n             tcx: tcx,\n-            memory: Memory::new(&tcx.data_layout, memory_size),\n+            memory: Memory::new(&tcx.data_layout, limits.memory_size),\n             globals: HashMap::new(),\n             stack: Vec::new(),\n-            stack_limit: stack_limit,\n-            steps_remaining: step_limit,\n+            stack_limit: limits.stack_limit,\n+            steps_remaining: limits.step_limit,\n         }\n     }\n \n@@ -1696,11 +1713,9 @@ impl<'tcx> Lvalue<'tcx> {\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-    memory_size: u64,\n-    step_limit: u64,\n-    stack_limit: usize,\n+    limits: ResourceLimits,\n ) {\n-    let mut ecx = EvalContext::new(tcx, memory_size, stack_limit, step_limit);\n+    let mut ecx = EvalContext::new(tcx, limits);\n     let mir = ecx.load_mir(def_id).expect(\"main function's MIR not found\");\n \n     ecx.push_stack_frame("}, {"sha": "e2158189144dae544a882d60ba5ddf2dee59bea1", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020f0b782b965cbe6b1f4c469b7defd0e2c52e85/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=020f0b782b965cbe6b1f4c469b7defd0e2c52e85", "patch": "@@ -33,12 +33,13 @@ pub use error::{\n pub use interpreter::{\n     EvalContext,\n     Frame,\n-    eval_main,\n-    run_mir_passes,\n-    StackPopCleanup,\n-    Value,\n     Lvalue,\n     LvalueExtra,\n+    ResourceLimits,\n+    StackPopCleanup,\n+    Value,\n+    eval_main,\n+    run_mir_passes,\n };\n \n pub use memory::{"}]}