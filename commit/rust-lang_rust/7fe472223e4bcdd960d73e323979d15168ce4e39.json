{"sha": "7fe472223e4bcdd960d73e323979d15168ce4e39", "node_id": "C_kwDOAAsO6NoAKDdmZTQ3MjIyM2U0YmNkZDk2MGQ3M2UzMjM5NzlkMTUxNjhjZTRlMzk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T21:18:03Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-22T14:02:28Z"}, "message": "Store relationships on Inherent", "tree": {"sha": "373225656c0306db26c1596b34fcc4f48b0bcbeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/373225656c0306db26c1596b34fcc4f48b0bcbeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe472223e4bcdd960d73e323979d15168ce4e39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPNQfQACgkQgTGiTgx5\n76971BAAtYwJLhC1tIhqyfWd7NadQGVf3zelEZE/CszfljKGXPR7yhHoqFgxYP5H\nzqj7AVXT5+tOIFnzRgpPKTzXDkIIlFX/RBhdi005Cz9+5iMsMDIOunCmVSn1KIyb\nm3wCxtGTYpXO5yLQNGI0T5VWjzRgtbFm8sASW/TrxaEW5hXqHzIC1qEQrKekQGd2\n1wez2OwrGcnrf9SKt7m3fhgOA+D3Xbq9PTGSMz+xFSvn1UH5nvWRuowP+fRtCZLD\nGh3qsol24jxYFaSw+xgpOrObFgeHb4gQpgGsUl/iCknjR5r+LwxQMasBsRVZ/zez\nPlsEBz7npu/jf7VM8Opyg1NPybw4LJ3jaWdIIJQDj/AlmfgO60xjSma9HI67MjGW\n7gNmwSbVDIvfJS4w+u9kXtk6Cx4RljFhl/aVc2XkTvnf1jvJyVuyWkdvhiuakiJQ\neGdUAhE0hzG/PipQf1X06fysTKipt0N2Vk4jAPBKIXgXfdP4/AvLUo6mvWlTZzAb\nNBR+zy2Xv000BtewGYa1Obt8ukEs2RXyA/ivjIW35W6Sl9uj4XL7s9Ja49QCMA1n\nSKnrMCz21EUXXFDJnWxH+8WxirsH6wFziBqJdkIZE7h39kgvpkOFIzE8GIBrWAnC\nyv2c/J1Quxd5TrYZrci/oN8OrmEssMneLFDxrXVfCId9eMgR87o=\n=D9be\n-----END PGP SIGNATURE-----", "payload": "tree 373225656c0306db26c1596b34fcc4f48b0bcbeb\nparent 81ee6aebaa3d93c5e86d4d7c0fe80c3af74d3ec3\nauthor Santiago Pastorino <spastorino@gmail.com> 1669411083 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1674396148 -0300\n\nStore relationships on Inherent\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe472223e4bcdd960d73e323979d15168ce4e39", "html_url": "https://github.com/rust-lang/rust/commit/7fe472223e4bcdd960d73e323979d15168ce4e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe472223e4bcdd960d73e323979d15168ce4e39/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ee6aebaa3d93c5e86d4d7c0fe80c3af74d3ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee6aebaa3d93c5e86d4d7c0fe80c3af74d3ec3", "html_url": "https://github.com/rust-lang/rust/commit/81ee6aebaa3d93c5e86d4d7c0fe80c3af74d3ec3"}], "stats": {"total": 89, "additions": 28, "deletions": 61}, "files": [{"sha": "4ef32023e7d8be159daeba5c5c36206aad611c35", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -196,8 +196,6 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n     ) -> FxHashMap<Ty<'tcx>, Ty<'tcx>> {\n         debug!(\"calculate_diverging_fallback({:?})\", unsolved_variables);\n \n-        let relationships = self.fulfillment_cx.borrow_mut().relationships().clone();\n-\n         // Construct a coercion graph where an edge `A -> B` indicates\n         // a type variable is that is coerced\n         let coercion_graph = self.create_coercion_graph();\n@@ -282,7 +280,6 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         );\n \n         debug!(\"obligations: {:#?}\", self.fulfillment_cx.borrow_mut().pending_obligations());\n-        debug!(\"relationships: {:#?}\", relationships);\n \n         // For each diverging variable, figure out whether it can\n         // reach a member of N. If so, it falls back to `()`. Else\n@@ -298,8 +295,8 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n \n             let mut relationship = ty::FoundRelationships { self_in_trait: false, output: false };\n \n-            for (vid, rel) in relationships.iter() {\n-                if self.root_var(*vid) == root_vid {\n+            for (vid, rel) in self.inh.relationships.borrow().iter() {\n+                if self.infcx.root_var(*vid) == root_vid {\n                     relationship.self_in_trait |= rel.self_in_trait;\n                     relationship.output |= rel.output;\n                 }"}, {"sha": "f5b6578a9d329df3ce08be90a582c47f7e015334", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,6 +1,6 @@\n use super::callee::DeferredCallResolution;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n@@ -63,6 +63,8 @@ pub struct Inherited<'tcx> {\n     /// we record that type variable here. This is later used to inform\n     /// fallback. See the `fallback` module for details.\n     pub(super) diverging_type_vars: RefCell<FxHashSet<Ty<'tcx>>>,\n+\n+    pub(super) relationships: RefCell<FxHashMap<ty::TyVid, ty::FoundRelationships>>,\n }\n \n impl<'tcx> Deref for Inherited<'tcx> {\n@@ -128,6 +130,7 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n             body_id,\n+            relationships: RefCell::new(Default::default()),\n         }\n     }\n \n@@ -136,6 +139,13 @@ impl<'tcx> Inherited<'tcx> {\n         if obligation.has_escaping_bound_vars() {\n             span_bug!(obligation.cause.span, \"escaping bound vars in predicate {:?}\", obligation);\n         }\n+\n+        super::relationships::update(\n+            &self.infcx,\n+            &mut self.relationships.borrow_mut(),\n+            &obligation,\n+        );\n+\n         self.fulfillment_cx.borrow_mut().register_predicate_obligation(self, obligation);\n     }\n "}, {"sha": "54fd03d6493b65ff3f9d6903c25e050d35137dfe", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -40,6 +40,7 @@ mod method;\n mod op;\n mod pat;\n mod place_op;\n+mod relationships;\n mod rvalue_scopes;\n mod upvar;\n mod writeback;"}, {"sha": "66aba084974575003d7fa55c0c79a97e39e936bf", "filename": "compiler/rustc_hir_typeck/src/relationships.rs", "status": "renamed", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,16 +1,14 @@\n-use crate::infer::InferCtxt;\n-use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::PredicateObligation;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty;\n+use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::PredicateObligation;\n \n-pub(crate) fn update<'tcx, T>(\n-    engine: &mut T,\n+pub fn update<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n+    relationships: &mut FxHashMap<ty::TyVid, ty::FoundRelationships>,\n     obligation: &PredicateObligation<'tcx>,\n-) where\n-    T: TraitEngine<'tcx>,\n-{\n+) {\n     // (*) binder skipped\n     if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n         && let Some(ty) = infcx.shallow_resolve(tpred.self_ty()).ty_vid().map(|t| infcx.root_var(t))\n@@ -31,7 +29,7 @@ pub(crate) fn update<'tcx, T>(\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold.\n         if let Ok(result) = infcx.probe(|_| infcx.evaluate_obligation(&o)) && result.may_apply() {\n-            engine.relationships().entry(ty).or_default().self_in_trait = true;\n+            relationships.entry(ty).or_default().self_in_trait = true;\n         }\n     }\n \n@@ -42,7 +40,7 @@ pub(crate) fn update<'tcx, T>(\n         // we need to make it into one.\n         if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n             debug!(\"relationship: {:?}.output = true\", vid);\n-            engine.relationships().entry(vid).or_default().output = true;\n+            relationships.entry(vid).or_default().output = true;\n         }\n     }\n }", "previous_filename": "compiler/rustc_trait_selection/src/traits/relationships.rs"}, {"sha": "fcde00056cbf1c4cf4738e80e851497506a05dcf", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ToPredicate, Ty};\n \n@@ -42,8 +41,6 @@ pub trait TraitEngine<'tcx>: 'tcx {\n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships>;\n }\n \n pub trait TraitEngineExt<'tcx> {"}, {"sha": "40b9bedc84fd3afd8292c2c721bee97d1d8b62de", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,14 +1,12 @@\n use std::mem;\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_infer::{\n     infer::InferCtxt,\n     traits::{\n         query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n         SelectionError, TraitEngine,\n     },\n };\n-use rustc_middle::ty;\n \n use super::{search_graph, Certainty, EvalCtxt};\n \n@@ -102,8 +100,4 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.clone()\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        unimplemented!(\"Should be moved out of `TraitEngine`\")\n-    }\n }"}, {"sha": "61d09189798ea2d82eda6eff65546dde89c3adb2", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -7,24 +7,18 @@ use crate::traits::{\n     ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n     SelectionError, TraitEngine,\n };\n-use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, TypeVisitable};\n+use rustc_data_structures::fx::FxIndexSet;\n+use rustc_middle::ty::TypeVisitable;\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n \n-    relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n-\n     usable_in_snapshot: bool,\n }\n \n impl FulfillmentContext<'_> {\n     pub(super) fn new() -> Self {\n-        FulfillmentContext {\n-            obligations: FxIndexSet::default(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: false,\n-        }\n+        FulfillmentContext { obligations: FxIndexSet::default(), usable_in_snapshot: false }\n     }\n \n     pub(crate) fn new_in_snapshot() -> Self {\n@@ -43,8 +37,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         }\n         let obligation = infcx.resolve_vars_if_possible(obligation);\n \n-        super::relationships::update(self, infcx, &obligation);\n-\n         self.obligations.insert(obligation);\n     }\n \n@@ -154,8 +146,4 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.iter().cloned().collect()\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        &mut self.relationships\n-    }\n }"}, {"sha": "5a58d37e18362694dc1b5ec00ec16c22c20a15c7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,5 +1,4 @@\n use crate::infer::{InferCtxt, TyOrConstInferVar};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n@@ -54,8 +53,6 @@ pub struct FulfillmentContext<'tcx> {\n     // fulfillment context.\n     predicates: ObligationForest<PendingPredicateObligation<'tcx>>,\n \n-    relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n-\n     // Is it OK to register obligations into this infcx inside\n     // an infcx snapshot?\n     //\n@@ -85,19 +82,11 @@ static_assert_size!(PendingPredicateObligation<'_>, 72);\n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n     pub(super) fn new() -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: false,\n-        }\n+        FulfillmentContext { predicates: ObligationForest::new(), usable_in_snapshot: false }\n     }\n \n     pub(super) fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: true,\n-        }\n+        FulfillmentContext { predicates: ObligationForest::new(), usable_in_snapshot: true }\n     }\n \n     /// Attempts to select obligations using `selcx`.\n@@ -139,8 +128,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n \n         assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);\n \n-        super::relationships::update(self, infcx, &obligation);\n-\n         self.predicates\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n@@ -164,10 +151,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        &mut self.relationships\n-    }\n }\n \n struct FulfillProcessor<'a, 'tcx> {"}, {"sha": "3c640cdc503ceba9010ffe62f5119be36868ff2f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -14,7 +14,6 @@ mod object_safety;\n pub mod outlives_bounds;\n mod project;\n pub mod query;\n-pub(crate) mod relationships;\n mod select;\n mod specialize;\n mod structural_match;"}]}