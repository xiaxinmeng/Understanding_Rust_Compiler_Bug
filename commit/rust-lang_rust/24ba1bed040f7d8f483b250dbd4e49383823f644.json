{"sha": "24ba1bed040f7d8f483b250dbd4e49383823f644", "node_id": "C_kwDOAAsO6NoAKDI0YmExYmVkMDQwZjdkOGY0ODNiMjUwZGJkNGU0OTM4MzgyM2Y2NDQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-04T11:48:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-04T11:48:57Z"}, "message": "Set expectation for no-semi expression statements to unit", "tree": {"sha": "5a07a0dd5de431a79ee6df0eb5e13204de48b9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a07a0dd5de431a79ee6df0eb5e13204de48b9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ba1bed040f7d8f483b250dbd4e49383823f644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ba1bed040f7d8f483b250dbd4e49383823f644", "html_url": "https://github.com/rust-lang/rust/commit/24ba1bed040f7d8f483b250dbd4e49383823f644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ba1bed040f7d8f483b250dbd4e49383823f644/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e2505cfa8be6838f5151b272f1d24869b2a3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e2505cfa8be6838f5151b272f1d24869b2a3d6", "html_url": "https://github.com/rust-lang/rust/commit/73e2505cfa8be6838f5151b272f1d24869b2a3d6"}], "stats": {"total": 127, "additions": 81, "deletions": 46}, "files": [{"sha": "664db292a7f78d603235f4eb732d58bb0fa4a384", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=24ba1bed040f7d8f483b250dbd4e49383823f644", "patch": "@@ -294,8 +294,8 @@ impl Resolver {\n             }\n         }\n \n-        if let res @ Some(_) = self.module_scope.resolve_path_in_value_ns(db, path) {\n-            return res;\n+        if let Some(res) = self.module_scope.resolve_path_in_value_ns(db, path) {\n+            return Some(res);\n         }\n \n         // If a path of the shape `u16::from_le_bytes` failed to resolve at all, then we fall back"}, {"sha": "81e97a9b0bff21f0ed141f5d1da307a61f548d4d", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=24ba1bed040f7d8f483b250dbd4e49383823f644", "patch": "@@ -130,7 +130,7 @@ impl<'a> InferenceContext<'a> {\n                 );\n                 let ty = match label {\n                     Some(_) => {\n-                        let break_ty = self.table.new_type_var();\n+                        let break_ty = expected.coercion_target_type(&mut self.table);\n                         let (breaks, ty) = self.with_breakable_ctx(\n                             BreakableKind::Block,\n                             Some(break_ty.clone()),\n@@ -403,37 +403,47 @@ impl<'a> InferenceContext<'a> {\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n-                let expected = expected.adjust_for_branches(&mut self.table);\n-\n-                let result_ty = if arms.is_empty() {\n+                if arms.is_empty() {\n+                    self.diverges = Diverges::Always;\n                     self.result.standard_types.never.clone()\n                 } else {\n-                    expected.coercion_target_type(&mut self.table)\n-                };\n-                let mut coerce = CoerceMany::new(result_ty);\n-\n-                let matchee_diverges = self.diverges;\n-                let mut all_arms_diverge = Diverges::Always;\n-\n-                for arm in arms.iter() {\n-                    self.diverges = Diverges::Maybe;\n-                    let input_ty = self.resolve_ty_shallow(&input_ty);\n-                    self.infer_top_pat(arm.pat, &input_ty);\n-                    if let Some(guard_expr) = arm.guard {\n-                        self.infer_expr(\n-                            guard_expr,\n-                            &Expectation::HasType(self.result.standard_types.bool_.clone()),\n-                        );\n+                    let matchee_diverges = mem::replace(&mut self.diverges, Diverges::Maybe);\n+                    let mut all_arms_diverge = Diverges::Always;\n+                    for arm in arms.iter() {\n+                        let input_ty = self.resolve_ty_shallow(&input_ty);\n+                        self.infer_top_pat(arm.pat, &input_ty);\n                     }\n \n-                    let arm_ty = self.infer_expr_inner(arm.expr, &expected);\n-                    all_arms_diverge &= self.diverges;\n-                    coerce.coerce(self, Some(arm.expr), &arm_ty);\n-                }\n+                    let expected = expected.adjust_for_branches(&mut self.table);\n+                    let result_ty = match &expected {\n+                        // We don't coerce to `()` so that if the match expression is a\n+                        // statement it's branches can have any consistent type.\n+                        Expectation::HasType(ty) if *ty != self.result.standard_types.unit => {\n+                            ty.clone()\n+                        }\n+                        _ => self.table.new_type_var(),\n+                    };\n+                    let mut coerce = CoerceMany::new(result_ty);\n+\n+                    for arm in arms.iter() {\n+                        if let Some(guard_expr) = arm.guard {\n+                            self.diverges = Diverges::Maybe;\n+                            self.infer_expr(\n+                                guard_expr,\n+                                &Expectation::HasType(self.result.standard_types.bool_.clone()),\n+                            );\n+                        }\n+                        self.diverges = Diverges::Maybe;\n \n-                self.diverges = matchee_diverges | all_arms_diverge;\n+                        let arm_ty = self.infer_expr_inner(arm.expr, &expected);\n+                        all_arms_diverge &= self.diverges;\n+                        coerce.coerce(self, Some(arm.expr), &arm_ty);\n+                    }\n \n-                coerce.complete(self)\n+                    self.diverges = matchee_diverges | all_arms_diverge;\n+\n+                    coerce.complete(self)\n+                }\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n@@ -1179,8 +1189,15 @@ impl<'a> InferenceContext<'a> {\n                         self.diverges = previous_diverges;\n                     }\n                 }\n-                Statement::Expr { expr, .. } => {\n-                    self.infer_expr(*expr, &Expectation::none());\n+                &Statement::Expr { expr, has_semi } => {\n+                    self.infer_expr(\n+                        expr,\n+                        &if has_semi {\n+                            Expectation::none()\n+                        } else {\n+                            Expectation::HasType(self.result.standard_types.unit.clone())\n+                        },\n+                    );\n                 }\n             }\n         }"}, {"sha": "b3867623f37e3cf1130492b70e6b623fa47b6089", "filename": "crates/hir-ty/src/infer/path.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs?ref=24ba1bed040f7d8f483b250dbd4e49383823f644", "patch": "@@ -40,20 +40,14 @@ impl<'a> InferenceContext<'a> {\n         id: ExprOrPatId,\n     ) -> Option<Ty> {\n         let (value, self_subst) = if let Some(type_ref) = path.type_anchor() {\n-            if path.segments().is_empty() {\n-                // This can't actually happen syntax-wise\n-                return None;\n-            }\n+            let Some(last) = path.segments().last() else { return None };\n             let ty = self.make_ty(type_ref);\n             let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n             let ctx = crate::lower::TyLoweringContext::new(self.db, resolver);\n             let (ty, _) = ctx.lower_ty_relative_path(ty, None, remaining_segments_for_ty);\n-            self.resolve_ty_assoc_item(\n-                ty,\n-                path.segments().last().expect(\"path had at least one segment\").name,\n-                id,\n-            )?\n+            self.resolve_ty_assoc_item(ty, last.name, id)?\n         } else {\n+            // FIXME: report error, unresolved first path segment\n             let value_or_partial =\n                 resolver.resolve_path_in_value_ns(self.db.upcast(), path.mod_path())?;\n \n@@ -66,10 +60,13 @@ impl<'a> InferenceContext<'a> {\n         };\n \n         let typable: ValueTyDefId = match value {\n-            ValueNs::LocalBinding(pat) => {\n-                let ty = self.result.type_of_pat.get(pat)?.clone();\n-                return Some(ty);\n-            }\n+            ValueNs::LocalBinding(pat) => match self.result.type_of_pat.get(pat) {\n+                Some(ty) => return Some(ty.clone()),\n+                None => {\n+                    never!(\"uninferred pattern?\");\n+                    return None;\n+                }\n+            },\n             ValueNs::FunctionId(it) => it.into(),\n             ValueNs::ConstId(it) => it.into(),\n             ValueNs::StaticId(it) => it.into(),\n@@ -91,7 +88,7 @@ impl<'a> InferenceContext<'a> {\n                     let ty = self.db.value_ty(struct_id.into()).substitute(Interner, &substs);\n                     return Some(ty);\n                 } else {\n-                    // FIXME: diagnostic, invalid Self reference\n+                    // FIXME: report error, invalid Self reference\n                     return None;\n                 }\n             }"}, {"sha": "1876be303ad44862802ac0aae149a5502749bfe1", "filename": "crates/hir-ty/src/tests/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdiagnostics.rs?ref=24ba1bed040f7d8f483b250dbd4e49383823f644", "patch": "@@ -73,3 +73,24 @@ fn test(x: bool) -> &'static str {\n \"#,\n     );\n }\n+\n+#[test]\n+fn non_unit_block_expr_stmt_no_semi() {\n+    check(\n+        r#\"\n+fn test(x: bool) {\n+    if x {\n+        \"notok\"\n+      //^^^^^^^ expected (), got &str\n+    } else {\n+        \"ok\"\n+      //^^^^ expected (), got &str\n+    }\n+    match x { true => true, false => 0 }\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), got bool\n+                                   //^ expected bool, got i32\n+    ()\n+}\n+\"#,\n+    );\n+}"}, {"sha": "5fc2f46d5601a1051c62ced87ed85321184569f9", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba1bed040f7d8f483b250dbd4e49383823f644/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=24ba1bed040f7d8f483b250dbd4e49383823f644", "patch": "@@ -1015,9 +1015,9 @@ fn cfg_tail() {\n             20..31 '{ \"first\" }': ()\n             22..29 '\"first\"': &str\n             72..190 '{     ...] 13 }': ()\n-            78..88 '{ \"fake\" }': &str\n+            78..88 '{ \"fake\" }': ()\n             80..86 '\"fake\"': &str\n-            93..103 '{ \"fake\" }': &str\n+            93..103 '{ \"fake\" }': ()\n             95..101 '\"fake\"': &str\n             108..120 '{ \"second\" }': ()\n             110..118 '\"second\"': &str"}]}