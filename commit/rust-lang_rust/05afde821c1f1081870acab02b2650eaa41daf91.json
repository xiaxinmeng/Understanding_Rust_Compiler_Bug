{"sha": "05afde821c1f1081870acab02b2650eaa41daf91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWZkZTgyMWMxZjEwODE4NzBhY2FiMDJiMjY1MGVhYTQxZGFmOTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-18T05:42:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-18T05:42:58Z"}, "message": "Merge pull request #673 from oli-obk/fix/665\n\ndon't lint on all caps enum variants starting with the same char", "tree": {"sha": "eb529cebf737584458431395628c0eec57eecb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb529cebf737584458431395628c0eec57eecb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05afde821c1f1081870acab02b2650eaa41daf91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05afde821c1f1081870acab02b2650eaa41daf91", "html_url": "https://github.com/rust-lang/rust/commit/05afde821c1f1081870acab02b2650eaa41daf91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05afde821c1f1081870acab02b2650eaa41daf91/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31db60ccc50b3d823f3b384b5830039738a76ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31db60ccc50b3d823f3b384b5830039738a76ec4", "html_url": "https://github.com/rust-lang/rust/commit/31db60ccc50b3d823f3b384b5830039738a76ec4"}, {"sha": "cf536d7a4fbb82595f439eb812d469eda766bf42", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf536d7a4fbb82595f439eb812d469eda766bf42", "html_url": "https://github.com/rust-lang/rust/commit/cf536d7a4fbb82595f439eb812d469eda766bf42"}], "stats": {"total": 276, "additions": 238, "deletions": 38}, "files": [{"sha": "37322aeffc8f0760c00b1efb81b9398766b978e8", "filename": "src/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -15,16 +15,16 @@ use syntax::ptr::P;\n \n #[derive(Debug, Copy, Clone)]\n pub enum FloatWidth {\n-    Fw32,\n-    Fw64,\n-    FwAny,\n+    F32,\n+    F64,\n+    Any,\n }\n \n impl From<FloatTy> for FloatWidth {\n     fn from(ty: FloatTy) -> FloatWidth {\n         match ty {\n-            FloatTy::F32 => FloatWidth::Fw32,\n-            FloatTy::F64 => FloatWidth::Fw64,\n+            FloatTy::F32 => FloatWidth::F32,\n+            FloatTy::F64 => FloatWidth::F64,\n         }\n     }\n }\n@@ -200,7 +200,7 @@ fn lit_to_constant(lit: &LitKind) -> Constant {\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(value, ty) => Constant::Int(value, ty, Sign::Plus),\n         LitKind::Float(ref is, ty) => Constant::Float(is.to_string(), ty.into()),\n-        LitKind::FloatUnsuffixed(ref is) => Constant::Float(is.to_string(), FloatWidth::FwAny),\n+        LitKind::FloatUnsuffixed(ref is) => Constant::Float(is.to_string(), FloatWidth::Any),\n         LitKind::Bool(b) => Constant::Bool(b),\n     }\n }"}, {"sha": "8ad7adf007725efd4ad66728e4867f5d4e689fc0", "filename": "src/enum_variants.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_variants.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -6,6 +6,7 @@ use syntax::ast::*;\n use syntax::parse::token::InternedString;\n \n use utils::span_help_and_lint;\n+use utils::{camel_case_from, camel_case_until};\n \n /// **What it does:** Warns on enum variants that are prefixed or suffixed by the same characters\n ///\n@@ -31,48 +32,63 @@ fn var2str(var: &Variant) -> InternedString {\n     var.node.name.name.as_str()\n }\n \n-fn partial_match(left: &str, right: &str) -> usize {\n-    left.chars().zip(right.chars()).take_while(|&(l, r)| l == r).count()\n+/*\n+FIXME: waiting for https://github.com/rust-lang/rust/pull/31700\n+fn partial_match(pre: &str, name: &str) -> usize {\n+    // skip(1) to ensure that the prefix never takes the whole variant name\n+    pre.chars().zip(name.chars().rev().skip(1).rev()).take_while(|&(l, r)| l == r).count()\n }\n \n-fn partial_rmatch(left: &str, right: &str) -> usize {\n-    left.chars().rev().zip(right.chars().rev()).take_while(|&(l, r)| l == r).count()\n+fn partial_rmatch(post: &str, name: &str) -> usize {\n+    // skip(1) to ensure that the postfix never takes the whole variant name\n+    post.chars().rev().zip(name.chars().skip(1).rev()).take_while(|&(l, r)| l == r).count()\n+}*/\n+\n+fn partial_match(pre: &str, name: &str) -> usize {\n+    let mut name_iter = name.chars();\n+    let _ = name_iter.next_back(); // make sure the name is never fully matched\n+    pre.chars().zip(name_iter).take_while(|&(l, r)| l == r).count()\n+}\n+\n+fn partial_rmatch(post: &str, name: &str) -> usize {\n+    let mut name_iter = name.chars();\n+    let _ = name_iter.next(); // make sure the name is never fully matched\n+    post.chars().rev().zip(name_iter.rev()).take_while(|&(l, r)| l == r).count()\n }\n \n impl EarlyLintPass for EnumVariantNames {\n+    // FIXME: #600\n+    #[allow(while_let_on_iterator)]\n     fn check_item(&mut self, cx: &EarlyContext, item: &Item) {\n         if let ItemKind::Enum(ref def, _) = item.node {\n             if def.variants.len() < 2 {\n                 return;\n             }\n             let first = var2str(&def.variants[0]);\n-            let mut pre = first.to_string();\n-            let mut post = pre.clone();\n-            for var in &def.variants[1..] {\n+            let mut pre = &first[..camel_case_until(&*first)];\n+            let mut post = &first[camel_case_from(&*first)..];\n+            for var in &def.variants {\n                 let name = var2str(var);\n+\n                 let pre_match = partial_match(&pre, &name);\n-                let post_match = partial_rmatch(&post, &name);\n-                pre.truncate(pre_match);\n-                let post_end = post.len() - post_match;\n-                post.drain(..post_end);\n-            }\n-            if let Some(c) = first[pre.len()..].chars().next() {\n-                if !c.is_uppercase() {\n-                    // non camel case prefix\n-                    pre.clear()\n-                }\n-            }\n-            if let Some(c) = first[..(first.len() - post.len())].chars().rev().next() {\n-                if let Some(c1) = post.chars().next() {\n-                    if !c.is_lowercase() || !c1.is_uppercase() {\n-                        // non camel case postfix\n-                        post.clear()\n+                pre = &pre[..pre_match];\n+                let pre_camel = camel_case_until(&pre);\n+                pre = &pre[..pre_camel];\n+                while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n+                    if next.is_lowercase() {\n+                        let last = pre.len() - last.len_utf8();\n+                        let last_camel = camel_case_until(&pre[..last]);\n+                        pre = &pre[..last_camel];\n+                    } else {\n+                        break;\n                     }\n                 }\n-            }\n-            if pre == \"_\" {\n-                // don't lint on underscores which are meant to allow dead code\n-                pre.clear();\n+\n+                let post_match = partial_rmatch(&post, &name);\n+                let post_end = post.len() - post_match;\n+                post = &post[post_end..];\n+                let post_camel = camel_case_from(&post);\n+                post = &post[post_camel..];\n             }\n             let (what, value) = if !pre.is_empty() {\n                 (\"pre\", pre)"}, {"sha": "3a7c6c90d51f302329750b708792a69c90127373", "filename": "src/utils/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -607,3 +607,65 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n         }\n     }\n }\n+\n+/// Returns index of character after first CamelCase component of `s`\n+pub fn camel_case_until(s: &str) -> usize {\n+    let mut iter = s.char_indices();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_uppercase() {\n+            return 0;\n+        }\n+    } else {\n+        return 0;\n+    }\n+    let mut up = true;\n+    let mut last_i = 0;\n+    for (i, c) in iter {\n+        if up {\n+            if c.is_lowercase() {\n+                up = false;\n+            } else {\n+                return last_i;\n+            }\n+        } else if c.is_uppercase() {\n+            up = true;\n+            last_i = i;\n+        } else if !c.is_lowercase() {\n+            return i;\n+        }\n+    }\n+    if up {\n+        last_i\n+    } else {\n+        s.len()\n+    }\n+}\n+\n+/// Returns index of last CamelCase component of `s`.\n+pub fn camel_case_from(s: &str) -> usize {\n+    let mut iter = s.char_indices().rev();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_lowercase() {\n+            return s.len();\n+        }\n+    } else {\n+        return s.len();\n+    }\n+    let mut down = true;\n+    let mut last_i = s.len();\n+    for (i, c) in iter {\n+        if down {\n+            if c.is_uppercase() {\n+                down = false;\n+                last_i = i;\n+            } else if !c.is_lowercase() {\n+                return last_i;\n+            }\n+        } else if c.is_lowercase() {\n+            down = true;\n+        } else {\n+            return last_i;\n+        }\n+    }\n+    last_i\n+}"}, {"sha": "dbfa274418947ea28be025c1520bb4f85a8ff2bc", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -47,8 +47,8 @@ impl LateLintPass for ZeroDivZeroPass {\n                 // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n                 // match the precision of the literals that are given.\n                 let float_type = match (lhs_width, rhs_width) {\n-                    (FloatWidth::Fw64, _)\n-                    | (_, FloatWidth::Fw64) => \"f64\",\n+                    (FloatWidth::F64, _)\n+                    | (_, FloatWidth::F64) => \"f64\",\n                     _ => \"f32\"\n                 };\n                 span_help_and_lint(cx, ZERO_DIVIDED_BY_ZERO, expr.span,"}, {"sha": "201b796af1ccfad12c4ff86a07df47279c8c564a", "filename": "tests/camel_case.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcamel_case.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -0,0 +1,51 @@\n+#[allow(plugin_as_library)]\n+extern crate clippy;\n+\n+use clippy::utils::{camel_case_from, camel_case_until};\n+\n+#[test]\n+fn from_full() {\n+    assert_eq!(camel_case_from(\"AbcDef\"), 0);\n+    assert_eq!(camel_case_from(\"Abc\"), 0);\n+}\n+\n+#[test]\n+fn from_partial() {\n+    assert_eq!(camel_case_from(\"abcDef\"), 3);\n+    assert_eq!(camel_case_from(\"aDbc\"), 1);\n+}\n+\n+#[test]\n+fn from_not() {\n+    assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n+    assert_eq!(camel_case_from(\"AbcDD\"), 5);\n+}\n+\n+#[test]\n+fn from_caps() {\n+    assert_eq!(camel_case_from(\"ABCD\"), 4);\n+}\n+\n+#[test]\n+fn until_full() {\n+    assert_eq!(camel_case_until(\"AbcDef\"), 6);\n+    assert_eq!(camel_case_until(\"Abc\"), 3);\n+}\n+\n+#[test]\n+fn until_not() {\n+    assert_eq!(camel_case_until(\"abcDef\"), 0);\n+    assert_eq!(camel_case_until(\"aDbc\"), 0);\n+}\n+\n+#[test]\n+fn until_partial() {\n+    assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n+    assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n+    assert_eq!(camel_case_until(\"AbcDD\"), 3);\n+}\n+\n+#[test]\n+fn until_caps() {\n+    assert_eq!(camel_case_until(\"ABCD\"), 0);\n+}"}, {"sha": "6589bd35fd3d37090fd1802f38c5f0cf4a81ffce", "filename": "tests/compile-fail/enum_variants.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fcompile-fail%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fcompile-fail%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_variants.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -0,0 +1,71 @@\n+#![feature(plugin, non_ascii_idents)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+enum FakeCallType {\n+    CALL, CREATE\n+}\n+\n+enum FakeCallType2 {\n+    CALL, CREATELL\n+}\n+\n+enum Foo {\n+    cFoo, cBar,\n+}\n+\n+enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+    CallTypeCall,\n+    CallTypeCreate,\n+    CallTypeDestroy,\n+}\n+\n+enum TwoCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+    CallTypeCall,\n+    CallTypeCreate,\n+}\n+\n+enum Consts { //~ ERROR: All variants have the same prefix: `Constant`\n+    ConstantInt,\n+    ConstantCake,\n+    ConstantLie,\n+}\n+\n+enum Two { //~ ERROR: All variants have the same prefix: `Constant`\n+    ConstantInt,\n+    ConstantInfer,\n+}\n+\n+enum Something {\n+    CCall,\n+    CCreate,\n+    CCryogenize,\n+}\n+\n+enum Seal {\n+    With,\n+    Without,\n+}\n+\n+enum Seall {\n+    With,\n+    WithOut,\n+    Withbroken,\n+}\n+\n+enum Sealll {\n+    With,\n+    WithOut,\n+}\n+\n+enum Seallll { //~ ERROR: All variants have the same prefix: `With`\n+    WithOutCake,\n+    WithOut,\n+}\n+\n+enum NonCaps { //~ ERROR: All variants have the same prefix: `Prefix`\n+    Prefix\u7684,\n+    PrefixCake,\n+}\n+\n+fn main() {}"}, {"sha": "5c6088d055471c3d592b7775cd626ccd07e5b558", "filename": "tests/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05afde821c1f1081870acab02b2650eaa41daf91/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=05afde821c1f1081870acab02b2650eaa41daf91", "patch": "@@ -77,9 +77,9 @@ fn test_ops() {\n     check(ONE, &binop(BiMul, litone.clone(), litone.clone()));\n     check(ONE, &binop(BiDiv, litone.clone(), litone.clone()));\n \n-    let half_any = Constant::Float(\"0.5\".into(), FloatWidth::FwAny);\n-    let half32 = Constant::Float(\"0.5\".into(), FloatWidth::Fw32);\n-    let half64 = Constant::Float(\"0.5\".into(), FloatWidth::Fw64);\n+    let half_any = Constant::Float(\"0.5\".into(), FloatWidth::Any);\n+    let half32 = Constant::Float(\"0.5\".into(), FloatWidth::F32);\n+    let half64 = Constant::Float(\"0.5\".into(), FloatWidth::F64);\n \n     assert_eq!(half_any, half32);\n     assert_eq!(half_any, half64);"}]}