{"sha": "a09aa0fde15673f8ba88a7ac082a63155f8c1ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOWFhMGZkZTE1NjczZjhiYTg4YTdhYzA4MmE2MzE1NWY4YzFiYTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-10T20:45:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-10T20:45:20Z"}, "message": "Rollup merge of #58324 - RalfJung:fn-ptr-eq, r=oli-obk\n\nmiri: give non-generic functions a stable address\n\nThis makes Miri correctly handle format string parameters despite https://github.com/rust-lang/rust/issues/58320.\n\nMatching Miri PR: https://github.com/solson/miri/pull/626\n\nr? @oli-obk", "tree": {"sha": "0ac75666344f585588a39bcc9df3dbdc104c690e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac75666344f585588a39bcc9df3dbdc104c690e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYI1gCRBK7hj4Ov3rIwAAdHIIAIaHf3Xoza3WL4/KTW+Pfhg+\n6rbKc4wgKv452Wq2WQKYl76TIBmyXhPszSMzqkB8Tff52ShAHN+Kfhw9F93UgxL8\nhVYK8qQGsI+9XnFFBk9Rmw2hTuS7WQwgw607wmrr+7OByZ9LTnDkVZ50zYUXoSIU\nVzFIQve+SKt4wZd0mN4/0Sau1edno5lzqUyIkmlY6uQ1pC/5hir6H3Mzz8EQhKKF\nO3sjTIsMwM51/df9AUbZUOSQaMTQ40aszUD4nF1KVtxl8AylsSW2jydv0qEdW1o8\nv+LMF9W8kmnjfKbQ0xgDtE56VfDxCcnYlHnkI6evEmx/Dhh3oZdeFjDhIoEmRc8=\n=ennL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ac75666344f585588a39bcc9df3dbdc104c690e\nparent f4e7bc50a089622ef15c20321102e615ba6e2ac2\nparent 66adf52e7dfd68f04e60744ea9bf130c45befe5e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1549831520 +0100\ncommitter GitHub <noreply@github.com> 1549831520 +0100\n\nRollup merge of #58324 - RalfJung:fn-ptr-eq, r=oli-obk\n\nmiri: give non-generic functions a stable address\n\nThis makes Miri correctly handle format string parameters despite https://github.com/rust-lang/rust/issues/58320.\n\nMatching Miri PR: https://github.com/solson/miri/pull/626\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0", "html_url": "https://github.com/rust-lang/rust/commit/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e7bc50a089622ef15c20321102e615ba6e2ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e7bc50a089622ef15c20321102e615ba6e2ac2", "html_url": "https://github.com/rust-lang/rust/commit/f4e7bc50a089622ef15c20321102e615ba6e2ac2"}, {"sha": "66adf52e7dfd68f04e60744ea9bf130c45befe5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66adf52e7dfd68f04e60744ea9bf130c45befe5e", "html_url": "https://github.com/rust-lang/rust/commit/66adf52e7dfd68f04e60744ea9bf130c45befe5e"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "bb25d1b42095ae6713ce4efb65d6a15b083cabcc", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09aa0fde15673f8ba88a7ac082a63155f8c1ba0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a09aa0fde15673f8ba88a7ac082a63155f8c1ba0", "patch": "@@ -27,7 +27,7 @@ pub use self::pointer::{Pointer, PointerArithmetic};\n use std::fmt;\n use crate::mir;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, TyCtxt, Instance};\n+use crate::ty::{self, TyCtxt, Instance, subst::UnpackedKind};\n use crate::ty::layout::{self, Size};\n use std::io;\n use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n@@ -318,14 +318,29 @@ impl<'tcx> AllocMap<'tcx> {\n         id\n     }\n \n-    /// Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n-    /// by the linker and functions can be duplicated across crates.\n-    /// We thus generate a new `AllocId` for every mention of a function. This means that\n-    /// `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> AllocId {\n-        let id = self.reserve();\n-        self.id_to_kind.insert(id, AllocKind::Function(instance));\n-        id\n+        // Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n+        // by the linker (we set the \"unnamed_addr\" attribute for LLVM) and functions can be\n+        // duplicated across crates.\n+        // We thus generate a new `AllocId` for every mention of a function. This means that\n+        // `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n+        // However, formatting code relies on function identity (see #58320), so we only do\n+        // this for generic functions.  Lifetime parameters are ignored.\n+        let is_generic = instance.substs.into_iter().any(|kind| {\n+            match kind.unpack() {\n+                UnpackedKind::Lifetime(_) => false,\n+                _ => true,\n+            }\n+        });\n+        if is_generic {\n+            // Get a fresh ID\n+            let id = self.reserve();\n+            self.id_to_kind.insert(id, AllocKind::Function(instance));\n+            id\n+        } else {\n+            // Deduplicate\n+            self.intern(AllocKind::Function(instance))\n+        }\n     }\n \n     /// Returns `None` in case the `AllocId` is dangling. An `EvalContext` can still have a"}]}