{"sha": "a1f4843895d1152527f94e73fc64bf744d97d255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjQ4NDM4OTVkMTE1MjUyN2Y5NGU3M2ZjNjRiZjc0NGQ5N2QyNTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-14T02:18:22Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-14T02:18:22Z"}, "message": "Merge pull request #7749 from catamorphism/rustpkg-list-uninstall\n\nrustpkg: Implement `uninstall` and `list` commands", "tree": {"sha": "e713a712cc4bc8a228d1c9989260f81e389f56a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e713a712cc4bc8a228d1c9989260f81e389f56a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f4843895d1152527f94e73fc64bf744d97d255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f4843895d1152527f94e73fc64bf744d97d255", "html_url": "https://github.com/rust-lang/rust/commit/a1f4843895d1152527f94e73fc64bf744d97d255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f4843895d1152527f94e73fc64bf744d97d255/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0feb58e7f5ae67546db9c3cd7fdf4ab792d839", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0feb58e7f5ae67546db9c3cd7fdf4ab792d839", "html_url": "https://github.com/rust-lang/rust/commit/8d0feb58e7f5ae67546db9c3cd7fdf4ab792d839"}, {"sha": "563172a73be64aa2b0f528346095aba566753d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/563172a73be64aa2b0f528346095aba566753d14", "html_url": "https://github.com/rust-lang/rust/commit/563172a73be64aa2b0f528346095aba566753d14"}], "stats": {"total": 260, "additions": 226, "deletions": 34}, "files": [{"sha": "4f192fd1d92c105385286e17e6567a432cef54ca", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -32,3 +32,7 @@ condition! {\n condition! {\n     bad_pkg_id: (super::Path, ~str) -> super::PkgId;\n }\n+\n+condition! {\n+    no_rust_path: (~str) -> super::Path;\n+}"}, {"sha": "980b00d3864d54102108e4129e926a93dfb07b4a", "filename": "src/librustpkg/installed_packages.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Listing installed packages\n+\n+use path_util::*;\n+use std::os;\n+\n+pub fn list_installed_packages(f: &fn(&PkgId) -> bool) -> bool  {\n+    let workspaces = rust_path();\n+    for workspaces.iter().advance |p| {\n+        let binfiles = os::list_dir(&p.push(\"bin\"));\n+        for binfiles.iter().advance() |exec| {\n+            f(&PkgId::new(*exec));\n+        }\n+        let libfiles = os::list_dir(&p.push(\"lib\"));\n+        for libfiles.iter().advance() |lib| {\n+            f(&PkgId::new(*lib));\n+        }\n+    }\n+    true\n+}\n+\n+pub fn package_is_installed(p: &PkgId) -> bool {\n+    let mut is_installed = false;\n+    do list_installed_packages() |installed| {\n+        if installed == p {\n+            is_installed = true;\n+        }\n+        false\n+    };\n+    is_installed\n+}\n\\ No newline at end of file"}, {"sha": "b11f9820960a96b9aadf465f0330cca6b12fe5b8", "filename": "src/librustpkg/package_id.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fpackage_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fpackage_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_id.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -30,6 +30,15 @@ pub struct PkgId {\n     version: Version\n }\n \n+impl Eq for PkgId {\n+    fn eq(&self, p: &PkgId) -> bool {\n+        *p.local_path == *self.local_path && p.version == self.version\n+    }\n+    fn ne(&self, p: &PkgId) -> bool {\n+        !(self.eq(p))\n+    }\n+}\n+\n impl PkgId {\n     pub fn new(s: &str) -> PkgId {\n         use conditions::bad_pkg_id::cond;"}, {"sha": "44bbe36feb87a9cd51e93223bb23d6f2ec04ed9b", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -33,13 +33,18 @@ static PATH_ENTRY_SEPARATOR: &'static str = \";\";\n #[cfg(not(windows))]\n static PATH_ENTRY_SEPARATOR: &'static str = \":\";\n \n+/// Returns RUST_PATH as a string, without default paths added\n+pub fn get_rust_path() -> Option<~str> {\n+    os::getenv(\"RUST_PATH\")\n+}\n+\n /// Returns the value of RUST_PATH, as a list\n /// of Paths. Includes default entries for, if they exist:\n /// $HOME/.rust\n /// DIR/.rust for any DIR that's the current working directory\n /// or an ancestor of it\n pub fn rust_path() -> ~[Path] {\n-    let mut env_rust_path: ~[Path] = match os::getenv(\"RUST_PATH\") {\n+    let mut env_rust_path: ~[Path] = match get_rust_path() {\n         Some(env_path) => {\n             let env_path_components: ~[&str] =\n                 env_path.split_str_iter(PATH_ENTRY_SEPARATOR).collect();\n@@ -378,3 +383,23 @@ pub fn mk_output_path(what: OutputType, where: Target,\n     debug!(\"mk_output_path: returning %s\", output_path.to_str());\n     output_path\n }\n+\n+/// Removes files for the package `pkgid`, assuming it's installed in workspace `workspace`\n+pub fn uninstall_package_from(workspace: &Path, pkgid: &PkgId) {\n+    let mut did_something = false;\n+    let installed_bin = target_executable_in_workspace(pkgid, workspace);\n+    if os::path_exists(&installed_bin) {\n+        os::remove_file(&installed_bin);\n+        did_something = true;\n+    }\n+    let installed_lib = target_library_in_workspace(pkgid, workspace);\n+    if os::path_exists(&installed_lib) {\n+        os::remove_file(&installed_lib);\n+        did_something = true;\n+    }\n+    if !did_something {\n+        warn(fmt!(\"Warning: there don't seem to be any files for %s installed in %s\",\n+             pkgid.to_str(), workspace.to_str()));\n+    }\n+\n+}"}, {"sha": "5e9b9ffa788d71d44ae14fce999863dff7f2fbf4", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -50,6 +50,7 @@ pub mod api;\n mod conditions;\n mod context;\n mod crate;\n+mod installed_packages;\n mod messages;\n mod package_id;\n mod package_path;\n@@ -248,6 +249,14 @@ impl CtxMethods for Ctx {\n                     }\n                 }\n             }\n+            \"list\" => {\n+                io::println(\"Installed packages:\");\n+                for installed_packages::list_installed_packages |pkg_id| {\n+                    io::println(fmt!(\"%s-%s\",\n+                                     pkg_id.local_path.to_str(),\n+                                     pkg_id.version.to_str()));\n+                }\n+            }\n             \"prefer\" => {\n                 if args.len() < 1 {\n                     return usage::uninstall();\n@@ -263,11 +272,24 @@ impl CtxMethods for Ctx {\n                     return usage::uninstall();\n                 }\n \n-                self.uninstall(args[0], None);\n+                let pkgid = PkgId::new(args[0]);\n+                if !installed_packages::package_is_installed(&pkgid) {\n+                    warn(fmt!(\"Package %s doesn't seem to be installed! Doing nothing.\", args[0]));\n+                    return;\n+                }\n+                else {\n+                    let rp = rust_path();\n+                    assert!(!rp.is_empty());\n+                    for each_pkg_parent_workspace(&pkgid) |workspace| {\n+                        path_util::uninstall_package_from(workspace, &pkgid);\n+                        note(fmt!(\"Uninstalled package %s (was installed in %s)\",\n+                                  pkgid.to_str(), workspace.to_str()));\n+                    }\n+                }\n             }\n             \"unprefer\" => {\n                 if args.len() < 1 {\n-                    return usage::uninstall();\n+                    return usage::unprefer();\n                 }\n \n                 self.unprefer(args[0], None);\n@@ -447,6 +469,7 @@ pub fn main() {\n             ~\"do\" => usage::do_cmd(),\n             ~\"info\" => usage::info(),\n             ~\"install\" => usage::install(),\n+            ~\"list\"    => usage::list(),\n             ~\"prefer\" => usage::prefer(),\n             ~\"test\" => usage::test(),\n             ~\"uninstall\" => usage::uninstall(),"}, {"sha": "c1bf72e8509205128937964ef7f30df16f0b4613", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 90, "deletions": 20, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -12,9 +12,10 @@\n \n use context::Ctx;\n use std::hashmap::HashMap;\n-use std::{io, libc, os, result, run, str, vec};\n+use std::{io, libc, os, result, run, str};\n use extra::tempfile::mkdtemp;\n use std::run::ProcessOutput;\n+use installed_packages::list_installed_packages;\n use package_path::*;\n use package_id::{PkgId};\n use package_source::*;\n@@ -128,20 +129,27 @@ fn test_sysroot() -> Path {\n     self_path.pop()\n }\n \n+fn command_line_test(args: &[~str], cwd: &Path) -> ProcessOutput {\n+    command_line_test_with_env(args, cwd, None)\n+}\n+\n /// Runs `rustpkg` (based on the directory that this executable was\n /// invoked from) with the given arguments, in the given working directory.\n /// Returns the process's output.\n-fn command_line_test(args: &[~str], cwd: &Path) -> ProcessOutput {\n+fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~str)]>)\n+    -> ProcessOutput {\n     let cmd = test_sysroot().push(\"bin\").push(\"rustpkg\").to_str();\n     let cwd = normalize(RemotePath(copy *cwd));\n     debug!(\"About to run command: %? %? in %s\", cmd, args, cwd.to_str());\n     assert!(os::path_is_dir(&*cwd));\n-    let mut prog = run::Process::new(cmd, args, run::ProcessOptions { env: None,\n-                                                           dir: Some(&*cwd),\n-                                                           in_fd: None,\n-                                                           out_fd: None,\n-                                                           err_fd: None\n-                                                          });\n+    let cwd = cwd.clone();\n+    let mut prog = run::Process::new(cmd, args, run::ProcessOptions {\n+        env: env.map(|v| v.slice(0, v.len())),\n+        dir: Some(&cwd),\n+        in_fd: None,\n+        out_fd: None,\n+        err_fd: None\n+    });\n     let output = prog.finish_with_output();\n     debug!(\"Output from command %s with args %? was %s {%s}[%?]\",\n                     cmd, args, str::from_bytes(output.output),\n@@ -252,6 +260,16 @@ fn command_line_test_output(args: &[~str]) -> ~[~str] {\n     result\n }\n \n+fn command_line_test_output_with_env(args: &[~str], env: ~[(~str, ~str)]) -> ~[~str] {\n+    let mut result = ~[];\n+    let p_output = command_line_test_with_env(args, &os::getcwd(), Some(env));\n+    let test_output = str::from_bytes(p_output.output);\n+    for test_output.split_iter('\\n').advance |s| {\n+        result.push(s.to_owned());\n+    }\n+    result\n+}\n+\n // assumes short_name and local_path are one and the same -- I should fix\n fn lib_output_file_name(workspace: &Path, parent: &str, short_name: &str) -> Path {\n     debug!(\"lib_output_file_name: given %s and parent %s and short name %s\",\n@@ -476,8 +494,9 @@ fn test_package_version() {\n                     push(\"test_pkg_version\")));\n }\n \n-// FIXME #7006: Fails on linux/mac for some reason\n-#[test] #[ignore]\n+// FIXME #7006: Fails on linux for some reason\n+#[test]\n+#[ignore]\n fn test_package_request_version() {\n     let temp_pkg_id = PkgId::new(\"github.com/catamorphism/test_pkg_version#0.3\");\n     let temp = mk_empty_workspace(&LocalPath(Path(\"test_pkg_version\")), &ExactRevision(~\"0.3\"));\n@@ -613,7 +632,33 @@ fn rust_path_parse() {\n }\n \n #[test]\n-#[ignore(reason = \"Package database not yet implemented\")]\n+fn test_list() {\n+    let foo = PkgId::new(\"foo\");\n+    let dir = mkdtemp(&os::tmpdir(), \"test_list\").expect(\"test_list failed\");\n+    create_local_package_in(&foo, &dir);\n+    let bar = PkgId::new(\"bar\");\n+    create_local_package_in(&bar, &dir);\n+    let quux = PkgId::new(\"quux\");\n+    create_local_package_in(&quux, &dir);\n+\n+    command_line_test([~\"install\", ~\"foo\"], &dir);\n+    let env_arg = ~[(~\"RUST_PATH\", dir.to_str())];\n+    let list_output = command_line_test_output_with_env([~\"list\"], env_arg.clone());\n+    assert!(list_output.iter().any(|x| x.starts_with(\"foo-\")));\n+\n+    command_line_test([~\"install\", ~\"bar\"], &dir);\n+    let list_output = command_line_test_output_with_env([~\"list\"], env_arg.clone());\n+    assert!(list_output.iter().any(|x| x.starts_with(\"foo-\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"bar-\")));\n+\n+    command_line_test([~\"install\", ~\"quux\"], &dir);\n+    let list_output = command_line_test_output_with_env([~\"list\"], env_arg);\n+    assert!(list_output.iter().any(|x| x.starts_with(\"foo-\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"bar-\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"quux-\")));\n+}\n+\n+#[test]\n fn install_remove() {\n     let foo = PkgId::new(\"foo\");\n     let bar = PkgId::new(\"bar\");\n@@ -622,18 +667,43 @@ fn install_remove() {\n     create_local_package_in(&foo, &dir);\n     create_local_package_in(&bar, &dir);\n     create_local_package_in(&quux, &dir);\n+    let rust_path_to_use = ~[(~\"RUST_PATH\", dir.to_str())];\n     command_line_test([~\"install\", ~\"foo\"], &dir);\n     command_line_test([~\"install\", ~\"bar\"], &dir);\n     command_line_test([~\"install\", ~\"quux\"], &dir);\n-    let list_output = command_line_test_output([~\"list\"]);\n-    assert!(list_output.iter().any(|x| x == &~\"foo\"));\n-    assert!(list_output.iter().any(|x| x == &~\"bar\"));\n-    assert!(list_output.iter().any(|x| x == &~\"quux\"));\n-    command_line_test([~\"remove\", ~\"foo\"], &dir);\n-    let list_output = command_line_test_output([~\"list\"]);\n-    assert!(!list_output.iter().any(|x| x == &~\"foo\"));\n-    assert!(list_output.iter().any(|x| x == &~\"bar\"));\n-    assert!(list_output.iter().any(|x| x == &~\"quux\"));\n+    let list_output = command_line_test_output_with_env([~\"list\"], rust_path_to_use.clone());\n+    assert!(list_output.iter().any(|x| x.starts_with(\"foo\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"bar\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"quux\")));\n+    command_line_test([~\"uninstall\", ~\"foo\"], &dir);\n+    let list_output = command_line_test_output_with_env([~\"list\"], rust_path_to_use.clone());\n+    assert!(!list_output.iter().any(|x| x.starts_with(\"foo\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"bar\")));\n+    assert!(list_output.iter().any(|x| x.starts_with(\"quux\")));\n+}\n+\n+#[test]\n+fn install_check_duplicates() {\n+    // should check that we don't install two packages with the same full name *and* version\n+    // (\"Is already installed -- doing nothing\")\n+    // check invariant that there are no dups in the pkg database\n+    let dir = mkdtemp(&os::tmpdir(), \"install_remove\").expect(\"install_remove\");\n+    let foo = PkgId::new(\"foo\");\n+    create_local_package_in(&foo, &dir);\n+\n+    command_line_test([~\"install\", ~\"foo\"], &dir);\n+    command_line_test([~\"install\", ~\"foo\"], &dir);\n+    let mut contents = ~[];\n+    let check_dups = |p: &PkgId| {\n+        if contents.contains(p) {\n+            fail!(\"package database contains duplicate ID\");\n+        }\n+        else {\n+            contents.push(copy *p);\n+        }\n+        false\n+    };\n+    list_installed_packages(check_dups);\n }\n \n #[test]"}, {"sha": "2cc0056696f31e1c2cccd5bf24f23b6249f558db", "filename": "src/librustpkg/testsuite/pass/src/install-paths/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Flib.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() -> int { 42 }\n+pub fn f() -> int { 42 }"}, {"sha": "431350c07b487dbcdb31eefba84315d7568ee67f", "filename": "src/librustpkg/testsuite/pass/src/install-paths/main.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fmain.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -19,4 +19,10 @@ The test runner should check that, after `rustpkg install install-paths`\n    * install-paths/build/install_pathsbench exists and is an executable\n */\n \n-fn main() {}\n+use lib::f;\n+\n+mod lib;\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "59e9e57d643f21d23dc712802ee03a571c105780", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -14,7 +14,7 @@ pub fn general() {\n     io::println(\"Usage: rustpkg [options] <cmd> [args..]\n \n Where <cmd> is one of:\n-    build, clean, do, info, install, prefer, test, uninstall, unprefer\n+    build, clean, do, info, install, list, prefer, test, uninstall, unprefer\n \n Options:\n \n@@ -55,6 +55,12 @@ Options:\n     -j, --json      Output the result as JSON\");\n }\n \n+pub fn list() {\n+    io::println(\"rustpkg list\n+\n+List all installed packages.\");\n+}\n+\n pub fn install() {\n     io::println(\"rustpkg [options..] install [url] [target]\n "}, {"sha": "1ee7caf6d24e0fd214eb9d885bc1705157b0dced", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -28,8 +28,11 @@ use search::find_library_in_search_path;\n use path_util::target_library_in_workspace;\n pub use target::{OutputType, Main, Lib, Bench, Test};\n \n+// It would be nice to have the list of commands in just one place -- for example,\n+// you could update the match in rustpkg.rc but forget to update this list. I think\n+// that should be fixed.\n static COMMANDS: &'static [&'static str] =\n-    &[\"build\", \"clean\", \"do\", \"info\", \"install\", \"prefer\", \"test\", \"uninstall\",\n+    &[\"build\", \"clean\", \"do\", \"info\", \"install\", \"list\", \"prefer\", \"test\", \"uninstall\",\n       \"unprefer\"];\n \n \n@@ -152,12 +155,6 @@ pub fn ready_crate(sess: session::Session,\n     @fold.fold_crate(crate)\n }\n \n-pub fn need_dir(s: &Path) {\n-    if !os::path_is_dir(s) && !os::make_dir(s, 493_i32) {\n-        fail!(\"can't create dir: %s\", s.to_str());\n-    }\n-}\n-\n // FIXME (#4432): Use workcache to only compile when needed\n pub fn compile_input(ctxt: &Ctx,\n                      pkg_id: &PkgId,"}, {"sha": "28c3143d8de175d06a113f954cb61f55be1224db", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4843895d1152527f94e73fc64bf744d97d255/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=a1f4843895d1152527f94e73fc64bf744d97d255", "patch": "@@ -18,13 +18,25 @@ use std::{char, os, result, run, str};\n use package_path::RemotePath;\n use extra::tempfile::mkdtemp;\n \n-#[deriving(Eq)]\n pub enum Version {\n     ExactRevision(~str), // Should look like a m.n.(...).x\n     SemanticVersion(semver::Version),\n     NoVersion // user didn't specify a version -- prints as 0.1\n }\n \n+impl Eq for Version {\n+    fn eq(&self, other: &Version) -> bool {\n+        match (self, other) {\n+            (&ExactRevision(ref s1), &ExactRevision(ref s2)) => *s1 == *s2,\n+            (&SemanticVersion(ref v1), &SemanticVersion(ref v2)) => *v1 == *v2,\n+            (&NoVersion, _) => true,\n+            _ => false\n+        }\n+    }\n+    fn ne(&self, other: &Version) -> bool {\n+        !self.eq(other)\n+    }\n+}\n \n impl Ord for Version {\n     fn lt(&self, other: &Version) -> bool {"}]}