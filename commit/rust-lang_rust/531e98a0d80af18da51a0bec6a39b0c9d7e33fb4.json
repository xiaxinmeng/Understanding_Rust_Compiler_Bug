{"sha": "531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMWU5OGEwZDgwYWYxOGRhNTFhMGJlYzZhMzliMGM5ZDdlMzNmYjQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-15T10:18:45Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-24T22:33:13Z"}, "message": "Update mir opt tests", "tree": {"sha": "75cbe40cd056aa0280f76538059a700b2c89378e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75cbe40cd056aa0280f76538059a700b2c89378e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "html_url": "https://github.com/rust-lang/rust/commit/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71f733d482d892b5bff021b3955435e7b3eee25", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71f733d482d892b5bff021b3955435e7b3eee25", "html_url": "https://github.com/rust-lang/rust/commit/f71f733d482d892b5bff021b3955435e7b3eee25"}], "stats": {"total": 169, "additions": 88, "deletions": 81}, "files": [{"sha": "8390a0d19ae7b51e416d624c3bec8000d636e30e", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -63,7 +63,6 @@ impl Drop for S {\n //\n //     bb4: {\n //         StorageDead(_2);\n-//         FakeRead(ForLet, _1);\n //         StorageLive(_4);\n //         _4 = move _1;\n //         _3 = const std::mem::drop(move _4) -> [return: bb5, unwind: bb7];"}, {"sha": "f9024b67063344aee2d545f3ad760727fa47aafd", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -34,10 +34,9 @@ fn main() {\n //     }\n //     let mut _1: ();\n //     let mut _3: bool;\n-//     let mut _4: u8;\n-//     let mut _5: !;\n-//     let mut _6: ();\n-//     let mut _7: &i32;\n+//     let mut _4: !;\n+//     let mut _5: ();\n+//     let mut _6: &i32;\n //     bb0: {\n //         goto -> bb1;\n //     }\n@@ -51,7 +50,7 @@ fn main() {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         _3 = const true;\n-//         _4 = discriminant(_3);\n+//         FakeRead(ForMatchedPlace, _3);\n //         switchInt(_3) -> [false: bb11, otherwise: bb10];\n //     }\n //     bb4: {\n@@ -89,9 +88,9 @@ fn main() {\n //     bb14: {\n //         FakeRead(ForLet, _2);\n //         StorageDead(_3);\n-//         StorageLive(_7);\n-//         _7 = &_2;\n-//         _6 = const std::mem::drop(move _7) -> [return: bb28, unwind: bb4];\n+//         StorageLive(_6);\n+//         _6 = &_2;\n+//         _5 = const std::mem::drop(move _6) -> [return: bb28, unwind: bb4];\n //     }\n //     bb15: {\n //         goto -> bb16;\n@@ -129,15 +128,15 @@ fn main() {\n //         goto -> bb2;\n //     }\n //     bb26: {\n-//         _5 = ();\n+//         _4 = ();\n //         unreachable;\n //     }\n //     bb27: {\n-//         StorageDead(_5);\n+//         StorageDead(_4);\n //         goto -> bb14;\n //     }\n //     bb28: {\n-//         StorageDead(_7);\n+//         StorageDead(_6);\n //         _1 = ();\n //         StorageDead(_2);\n //         goto -> bb1;"}, {"sha": "9ccf03713994537ef9e1393ba45d6c7221e68a4c", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 78, "deletions": 65, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -53,10 +53,11 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n-//      _3 = discriminant(_2);\n-//      _4 = &(promoted[1]: std::option::Option<i32>);\n-//      _9 = discriminant(_2);\n-//      switchInt(move _9) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n+//      FakeRead(ForMatchedPlace, _2);\n+//      _7 = discriminant(_2);\n+//      _9 = &shallow (promoted[2]: std::option::Option<i32>);\n+//      _10 = &(((promoted[1]: std::option::Option<i32>) as Some).0: i32);\n+//      switchInt(move _7) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: {\n //      resume;\n@@ -66,15 +67,18 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb3: { // binding3(empty) and arm3\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb12, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n@@ -84,31 +88,31 @@ fn main() {\n //      unreachable;\n //  }\n //  bb8: { // binding1 and guard\n-//      StorageLive(_7);\n-//      _7 = &(((promoted[0]: std::option::Option<i32>) as Some).0: i32);\n-//      StorageLive(_10);\n-//      _10 = const guard() -> [return: bb9, unwind: bb1];\n+//      StorageLive(_5);\n+//      _5 = &(((promoted[0]: std::option::Option<i32>) as Some).0: i32);\n+//      StorageLive(_8);\n+//      _8 = const guard() -> [return: bb9, unwind: bb1];\n //  }\n //  bb9: {\n-//      switchInt(move _10) -> [false: bb10, otherwise: bb11];\n+//      switchInt(move _8) -> [false: bb10, otherwise: bb11];\n //  }\n //  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb4, imaginary: bb4];\n //  }\n //  bb11: { // bindingNoLandingPads.before.mir2 and arm2\n-//      StorageLive(_5);\n-//      _5 = ((_2 as Some).0: i32);\n+//      StorageLive(_3);\n+//      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_11);\n-//      _11 = _5;\n+//      _11 = _3;\n //      _1 = (const 1i32, move _11);\n //      StorageDead(_11);\n //      goto -> bb13;\n //  }\n //  bb12: {\n-//      StorageLive(_8);\n-//      _8 = ((_2 as Some).0: i32);\n+//      StorageLive(_6);\n+//      _6 = ((_2 as Some).0: i32);\n //      StorageLive(_12);\n-//      _12 = _8;\n+//      _12 = _6;\n //      _1 = (const 2i32, move_12);\n //      StorageDead(_12);\n //      goto -> bb13;\n@@ -123,10 +127,11 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n-//      _3 = discriminant(_2);\n-//      _4 = &_2;\n-//      _9 = discriminant(_2);\n-//      switchInt(move _9) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n+//      FakeRead(ForMatchedPlace, _2);\n+//      _7 = discriminant(_2);\n+//      _9 = &shallow _2;\n+//      _10 = &((_2 as Some).0: i32);\n+//      switchInt(move _7) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: {\n //      resume;\n@@ -136,15 +141,18 @@ fn main() {\n //      goto -> bb13;\n //  }\n //  bb3: {\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb2, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _9);\n+//      FakeRead(ForMatchGuard, _10);\n //      falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n@@ -154,31 +162,31 @@ fn main() {\n //      unreachable;\n //  }\n //  bb8: { // binding1 and guard\n-//      StorageLive(_7);\n-//      _7 = &((_2 as Some).0: i32);\n-//      StorageLive(_10);\n-//      _10 = const guard() -> [return: bb9, unwind: bb1];\n+//      StorageLive(_5);\n+//      _5 = &((_2 as Some).0: i32);\n+//      StorageLive(_8);\n+//      _8 = const guard() -> [return: bb9, unwind: bb1];\n //  }\n //  bb9: { // end of guard\n-//      switchInt(move _10) -> [false: bb10, otherwise: bb11];\n+//      switchInt(move _8) -> [false: bb10, otherwise: bb11];\n //  }\n //  bb10: { // to pre_binding3 (can skip 2 since this is `Some`)\n //      falseEdges -> [real: bb5, imaginary: bb4];\n //  }\n //  bb11: { // arm1\n-//      StorageLive(_5);\n-//      _5 = ((_2 as Some).0: i32);\n+//      StorageLive(_3);\n+//      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_11);\n-//      _11 = _5;\n+//      _11 = _3;\n //      _1 = (const 1i32, move _11);\n //      StorageDead(_11);\n //      goto -> bb13;\n //  }\n //  bb12: { // binding3 and arm3\n-//      StorageLive(_8);\n-//      _8 = ((_2 as Some).0: i32);\n+//      StorageLive(_6);\n+//      _6 = ((_2 as Some).0: i32);\n //      StorageLive(_12);\n-//      _12 = _8;\n+//      _12 = _6;\n //      _1 = (const 2i32, move _12);\n //      StorageDead(_12);\n //      goto -> bb13;\n@@ -193,81 +201,86 @@ fn main() {\n // bb0: {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n-//     _3 = discriminant(_2);\n-//     _4 = &_2;\n-//     _13 = discriminant(_2);\n-//     switchInt(move _13) -> [1isize: bb2, otherwise: bb3];\n+//     FakeRead(ForMatchedPlace, _2);\n+//     _11 = discriminant(_2);\n+//    _16 = &shallow _2;\n+//    _17 = &((_2 as Some).0: i32);\n+//     switchInt(move _11) -> [1isize: bb2, otherwise: bb3];\n // }\n // bb1: {\n //     resume;\n // }\n // bb2: {\n-//     FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _16);\n+//      FakeRead(ForMatchGuard, _17);\n //     falseEdges -> [real: bb7, imaginary: bb3]; //pre_binding1\n // }\n // bb3: {\n-//     FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _16);\n+//      FakeRead(ForMatchGuard, _17);\n //     falseEdges -> [real: bb11, imaginary: bb4]; //pre_binding2\n // }\n // bb4: {\n-//     FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _16);\n+//      FakeRead(ForMatchGuard, _17);\n //     falseEdges -> [real: bb12, imaginary: bb5]; //pre_binding3\n // }\n // bb5: {\n-//     FakeRead(ForMatch, _4);\n+//      FakeRead(ForMatchGuard, _16);\n+//      FakeRead(ForMatchGuard, _17);\n //     falseEdges -> [real: bb16, imaginary: bb6]; //pre_binding4\n // }\n // bb6: {\n //     unreachable;\n // }\n // bb7: { // binding1: Some(w) if guard()\n-//     StorageLive(_7);\n-//     _7 = &((_2 as Some).0: i32);\n-//     StorageLive(_14);\n-//     _14 = const guard() -> [return: bb8, unwind: bb1];\n+//     StorageLive(_5);\n+//     _5 = &((_2 as Some).0: i32);\n+//     StorageLive(_12);\n+//     _12 = const guard() -> [return: bb8, unwind: bb1];\n // }\n // bb8: { //end of guard\n-//     switchInt(move _14) -> [false: bb9, otherwise: bb10];\n+//     switchInt(move _12) -> [false: bb9, otherwise: bb10];\n // }\n // bb9: { // to pre_binding2\n //     falseEdges -> [real: bb3, imaginary: bb3];\n // }\n // bb10: { // set up bindings for arm1\n-//     StorageLive(_5);\n-//     _5 = ((_2 as Some).0: i32);\n+//     StorageLive(_3);\n+//     _3 = ((_2 as Some).0: i32);\n //     _1 = const 1i32;\n //     goto -> bb17;\n // }\n // bb11: { // binding2 & arm2\n-//     StorageLive(_8);\n-//     _8 = _2;\n+//     StorageLive(_6);\n+//     _6 = _2;\n //     _1 = const 2i32;\n //     goto -> bb17;\n // }\n // bb12: { // binding3: Some(y) if guard2(y)\n-//     StorageLive(_11);\n-//     _11 = &((_2 as Some).0: i32);\n-//     StorageLive(_16);\n-//     StorageLive(_17);\n-//     _17 = (*_11);\n-//     _16 = const guard2(move _17) -> [return: bb13, unwind: bb1];\n+//     StorageLive(_9);\n+//     _9 = &((_2 as Some).0: i32);\n+//     StorageLive(_14);\n+//     StorageLive(_15);\n+//     _15 = (*_9);\n+//     _14 = const guard2(move _15) -> [return: bb13, unwind: bb1];\n // }\n // bb13: { // end of guard2\n-//     StorageDead(_17);\n-//     switchInt(move _16) -> [false: bb14, otherwise: bb15];\n+//     StorageDead(_15);\n+//     switchInt(move _14) -> [false: bb14, otherwise: bb15];\n // }\n // bb14: { // to pre_binding4\n //     falseEdges -> [real: bb5, imaginary: bb5];\n // }\n // bb15: { // set up bindings for arm3\n-//     StorageLive(_9);\n-//     _9 = ((_2 as Some).0: i32);\n+//     StorageLive(_7);\n+//     _7 = ((_2 as Some).0: i32);\n //     _1 = const 3i32;\n //     goto -> bb17;\n // }\n // bb16: { // binding4 & arm4\n-//     StorageLive(_12);\n-//     _12 = _2;\n+//     StorageLive(_10);\n+//     _10 = _2;\n //     _1 = const 4i32;\n //     goto -> bb17;\n // }"}, {"sha": "882579c571086ab8e48566a942abece6c3dcbdc4", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -67,7 +67,6 @@ fn main() {\n //         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 })), [(*_2): i32]);\n //         _3 = &ReErased (*_2);\n //         Validate(Acquire, [(*_3): i32/ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }) (imm)]);\n-//         FakeRead(ForLet, _3);\n //         _0 = (*_3);\n //         EndRegion(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }));\n //         StorageDead(_3);"}, {"sha": "3776a11b3ab825ceb53ad5241d1bfdd3be2b83f0", "filename": "src/test/mir-opt/validate_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -28,7 +28,6 @@ fn main() {\n //         Validate(Acquire, [_1: std::boxed::Box<[i32]>]);\n //         StorageDead(_2);\n //         StorageDead(_3);\n-//         FakeRead(ForLet, _1);\n //         _0 = ();\n //         Validate(Release, [_1: std::boxed::Box<[i32]>]);\n //         drop(_1) -> [return: bb2, unwind: bb3];"}, {"sha": "07f5b2aa84b7dda57e8dbb2958867272ac44981d", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "patch": "@@ -47,12 +47,10 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = Test { x: const 0i32 };\n-//         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n //         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 })), [_1: Test]);\n //         _2 = &ReErased _1;\n //         Validate(Acquire, [(*_2): Test/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);\n-//         FakeRead(ForLet, _2);\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [((*_2).0: i32): i32/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);"}]}