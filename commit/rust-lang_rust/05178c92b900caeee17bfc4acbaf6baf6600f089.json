{"sha": "05178c92b900caeee17bfc4acbaf6baf6600f089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTc4YzkyYjkwMGNhZWVlMTdiZmM0YWNiYWY2YmFmNjYwMGYwODk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T17:14:37Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T17:18:58Z"}, "message": "Cleanup", "tree": {"sha": "d64d135f01235996f42f0b4081932f644d83d4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64d135f01235996f42f0b4081932f644d83d4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05178c92b900caeee17bfc4acbaf6baf6600f089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05178c92b900caeee17bfc4acbaf6baf6600f089", "html_url": "https://github.com/rust-lang/rust/commit/05178c92b900caeee17bfc4acbaf6baf6600f089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05178c92b900caeee17bfc4acbaf6baf6600f089/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5b9a707c786bf02ed05d65ca8394d77df601fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5b9a707c786bf02ed05d65ca8394d77df601fb", "html_url": "https://github.com/rust-lang/rust/commit/3a5b9a707c786bf02ed05d65ca8394d77df601fb"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "efcb222ebed85a64392a57d63b5e8babd07e8e44", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05178c92b900caeee17bfc4acbaf6baf6600f089/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05178c92b900caeee17bfc4acbaf6baf6600f089/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=05178c92b900caeee17bfc4acbaf6baf6600f089", "patch": "@@ -88,8 +88,9 @@ fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(cx, lhs.span) {\n             let eq_span = mk_sp(lhs.span.hi, rhs.span.lo);\n \n-            if let Some((sub_rhs, op)) = check_unop(rhs) {\n+            if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n+                    let op = ast::UnOp::to_string(op);\n                     let eqop_span = mk_sp(lhs.span.hi, sub_rhs.span.lo);\n                     if eq_snippet.ends_with('=') {\n                         span_note_and_lint(cx,\n@@ -105,13 +106,6 @@ fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     }\n }\n \n-fn check_unop(expr: &ast::Expr) -> Option<(&P<ast::Expr>, &'static str)> {\n-    match expr.node {\n-        ast::ExprKind::Unary(op, ref expr) => Some((expr, ast::UnOp::to_string(op))),\n-        _ => None,\n-    }\n-}\n-\n /// Implementation of the SUSPICIOUS_ELSE_FORMATTING lint for weird `else if`.\n fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n     if let Some((then, &Some(ref else_))) = unsugar_if(expr) {"}]}