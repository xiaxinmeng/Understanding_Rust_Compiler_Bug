{"sha": "b135c739fb542d2c78e30f3e945ff3e528942190", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzVjNzM5ZmI1NDJkMmM3OGUzMGYzZTk0NWZmM2U1Mjg5NDIxOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T13:27:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T13:27:52Z"}, "message": "Auto merge of #69482 - lqd:poloniusup, r=nikomatsakis\n\nPolonius: update `polonius-engine` to 0.12.0\n\nSince @albins won't have the time to finish up #68993 for a while, I'll take care of the trivial remaining tasks (rebasing, taking care of tidy/rustfmt).\n\nI'll r? @nikomatsakis since they're assigned to #68993, but have actually [already reviewed it pre-rebase](https://github.com/rust-lang/rust/pull/68993#issuecomment-586413089).\n\nWhen CI passes: I'll notify bors and close #68993, since this PR supersedes it.", "tree": {"sha": "727a18a8968f6083f55141cde0d4cf700b7a15bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727a18a8968f6083f55141cde0d4cf700b7a15bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b135c739fb542d2c78e30f3e945ff3e528942190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b135c739fb542d2c78e30f3e945ff3e528942190", "html_url": "https://github.com/rust-lang/rust/commit/b135c739fb542d2c78e30f3e945ff3e528942190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b135c739fb542d2c78e30f3e945ff3e528942190/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5de254862477924bcd8b9e1bff7eadd6ffb5e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5de254862477924bcd8b9e1bff7eadd6ffb5e2a", "html_url": "https://github.com/rust-lang/rust/commit/a5de254862477924bcd8b9e1bff7eadd6ffb5e2a"}, {"sha": "6f40cdb3807b25c92d32c5f7c3180958bb62f3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f40cdb3807b25c92d32c5f7c3180958bb62f3c8", "html_url": "https://github.com/rust-lang/rust/commit/6f40cdb3807b25c92d32c5f7c3180958bb62f3c8"}], "stats": {"total": 105, "additions": 60, "deletions": 45}, "files": [{"sha": "45ad7fee9f9c4951d91d7deabe2a24b2a37da548", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -2475,9 +2475,9 @@ checksum = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n \n [[package]]\n name = \"polonius-engine\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e478d7c38eb785c6416cbe58df12aa55d7aefa3759b6d3e044b2ed03f423cec\"\n+checksum = \"04d8ef65e3f89ecaec9ca7cb0e0911b4617352d4494018bcf934992f03f2024c\"\n dependencies = [\n  \"datafrog\",\n  \"log\","}, {"sha": "481d691b8e9b20c5dfb82bd1de5015bca040f9fe", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -17,7 +17,7 @@ scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n-polonius-engine = \"0.11.0\"\n+polonius-engine = \"0.12.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "1ee581e64aa7ef434362d07f255283877781461b", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -15,7 +15,7 @@ dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n itertools = \"0.8\"\n log = \"0.4\"\n log_settings = \"0.1.1\"\n-polonius-engine = \"0.11.0\"\n+polonius-engine = \"0.12.0\"\n rustc = { path = \"../librustc\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "cd8139b17b48d373679b6a3402541151637c9178", "filename": "src/librustc_mir/borrow_check/facts.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -71,16 +71,16 @@ impl AllFactsExt for AllFacts {\n                 killed,\n                 outlives,\n                 invalidates,\n-                var_used,\n-                var_defined,\n-                var_drop_used,\n-                var_uses_region,\n-                var_drops_region,\n-                child,\n-                path_belongs_to_var,\n-                initialized_at,\n-                moved_out_at,\n-                path_accessed_at,\n+                var_used_at,\n+                var_defined_at,\n+                var_dropped_at,\n+                use_of_var_derefs_origin,\n+                drop_of_var_derefs_origin,\n+                child_path,\n+                path_is_var,\n+                path_assigned_at_base,\n+                path_moved_at_base,\n+                path_accessed_at_base,\n                 known_subset,\n             ])\n         }"}, {"sha": "ba1b322524e87f6cd94734e908b02e3957cf0f64", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -86,15 +86,18 @@ fn populate_polonius_move_facts(\n     body: &Body<'_>,\n ) {\n     all_facts\n-        .path_belongs_to_var\n+        .path_is_var\n         .extend(move_data.rev_lookup.iter_locals_enumerated().map(|(v, &m)| (m, v)));\n \n     for (child, move_path) in move_data.move_paths.iter_enumerated() {\n-        all_facts\n-            .child\n-            .extend(move_path.parents(&move_data.move_paths).map(|(parent, _)| (child, parent)));\n+        if let Some(parent) = move_path.parent {\n+            all_facts.child_path.push((child, parent));\n+        }\n     }\n \n+    let fn_entry_start = location_table\n+        .start_index(Location { block: BasicBlock::from_u32(0u32), statement_index: 0 });\n+\n     // initialized_at\n     for init in move_data.inits.iter() {\n         match init.location {\n@@ -115,28 +118,37 @@ fn populate_polonius_move_facts(\n                         // the successors, but not in the unwind block.\n                         let first_statement = Location { block: successor, statement_index: 0 };\n                         all_facts\n-                            .initialized_at\n+                            .path_assigned_at_base\n                             .push((init.path, location_table.start_index(first_statement)));\n                     }\n                 } else {\n                     // In all other cases, the initialization just happens at the\n                     // midpoint, like any other effect.\n-                    all_facts.initialized_at.push((init.path, location_table.mid_index(location)));\n+                    all_facts\n+                        .path_assigned_at_base\n+                        .push((init.path, location_table.mid_index(location)));\n                 }\n             }\n             // Arguments are initialized on function entry\n             InitLocation::Argument(local) => {\n                 assert!(body.local_kind(local) == LocalKind::Arg);\n-                let fn_entry = Location { block: BasicBlock::from_u32(0u32), statement_index: 0 };\n-                all_facts.initialized_at.push((init.path, location_table.start_index(fn_entry)));\n+                all_facts.path_assigned_at_base.push((init.path, fn_entry_start));\n             }\n         }\n     }\n \n+    for (local, &path) in move_data.rev_lookup.iter_locals_enumerated() {\n+        if body.local_kind(local) != LocalKind::Arg {\n+            // Non-arguments start out deinitialised; we simulate this with an\n+            // initial move:\n+            all_facts.path_moved_at_base.push((path, fn_entry_start));\n+        }\n+    }\n+\n     // moved_out_at\n     // deinitialisation is assumed to always happen!\n     all_facts\n-        .moved_out_at\n+        .path_moved_at_base\n         .extend(move_data.moves.iter().map(|mo| (mo.path, location_table.mid_index(mo.source))));\n }\n "}, {"sha": "407e0628b6eb8ba6a78a34aaf93fc433d7f2f52b", "filename": "src/librustc_mir/borrow_check/type_check/liveness/polonius.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -12,12 +12,12 @@ type VarPointRelation = Vec<(Local, LocationIndex)>;\n type PathPointRelation = Vec<(MovePathIndex, LocationIndex)>;\n \n struct UseFactsExtractor<'me> {\n-    var_defined: &'me mut VarPointRelation,\n-    var_used: &'me mut VarPointRelation,\n+    var_defined_at: &'me mut VarPointRelation,\n+    var_used_at: &'me mut VarPointRelation,\n     location_table: &'me LocationTable,\n-    var_drop_used: &'me mut Vec<(Local, Location)>,\n+    var_dropped_at: &'me mut VarPointRelation,\n     move_data: &'me MoveData<'me>,\n-    path_accessed_at: &'me mut PathPointRelation,\n+    path_accessed_at_base: &'me mut PathPointRelation,\n }\n \n // A Visitor to walk through the MIR and extract point-wise facts\n@@ -28,22 +28,22 @@ impl UseFactsExtractor<'_> {\n \n     fn insert_def(&mut self, local: Local, location: Location) {\n         debug!(\"UseFactsExtractor::insert_def()\");\n-        self.var_defined.push((local, self.location_to_index(location)));\n+        self.var_defined_at.push((local, self.location_to_index(location)));\n     }\n \n     fn insert_use(&mut self, local: Local, location: Location) {\n         debug!(\"UseFactsExtractor::insert_use()\");\n-        self.var_used.push((local, self.location_to_index(location)));\n+        self.var_used_at.push((local, self.location_to_index(location)));\n     }\n \n     fn insert_drop_use(&mut self, local: Local, location: Location) {\n         debug!(\"UseFactsExtractor::insert_drop_use()\");\n-        self.var_drop_used.push((local, location));\n+        self.var_dropped_at.push((local, self.location_to_index(location)));\n     }\n \n     fn insert_path_access(&mut self, path: MovePathIndex, location: Location) {\n         debug!(\"UseFactsExtractor::insert_path_access({:?}, {:?})\", path, location);\n-        self.path_accessed_at.push((path, self.location_to_index(location)));\n+        self.path_accessed_at_base.push((path, self.location_table.start_index(location)));\n     }\n \n     fn place_to_mpi(&self, place: &Place<'_>) -> Option<MovePathIndex> {\n@@ -88,51 +88,54 @@ pub(super) fn populate_access_facts(\n     body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     location_table: &LocationTable,\n     move_data: &MoveData<'_>,\n-    drop_used: &mut Vec<(Local, Location)>,\n+    dropped_at: &mut Vec<(Local, Location)>,\n ) {\n     debug!(\"populate_access_facts()\");\n \n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n         let mut extractor = UseFactsExtractor {\n-            var_defined: &mut facts.var_defined,\n-            var_used: &mut facts.var_used,\n-            var_drop_used: drop_used,\n-            path_accessed_at: &mut facts.path_accessed_at,\n+            var_defined_at: &mut facts.var_defined_at,\n+            var_used_at: &mut facts.var_used_at,\n+            var_dropped_at: &mut facts.var_dropped_at,\n+            path_accessed_at_base: &mut facts.path_accessed_at_base,\n             location_table,\n             move_data,\n         };\n         extractor.visit_body(body);\n \n-        facts.var_drop_used.extend(\n-            drop_used.iter().map(|&(local, location)| (local, location_table.mid_index(location))),\n+        facts.var_dropped_at.extend(\n+            dropped_at.iter().map(|&(local, location)| (local, location_table.mid_index(location))),\n         );\n \n         for (local, local_decl) in body.local_decls.iter_enumerated() {\n-            debug!(\"add var_uses_regions facts - local={:?}, type={:?}\", local, local_decl.ty);\n+            debug!(\n+                \"add use_of_var_derefs_origin facts - local={:?}, type={:?}\",\n+                local, local_decl.ty\n+            );\n             let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             let universal_regions = &typeck.borrowck_context.universal_regions;\n             typeck.infcx.tcx.for_each_free_region(&local_decl.ty, |region| {\n                 let region_vid = universal_regions.to_region_vid(region);\n-                facts.var_uses_region.push((local, region_vid));\n+                facts.use_of_var_derefs_origin.push((local, region_vid));\n             });\n         }\n     }\n }\n \n // For every potentially drop()-touched region `region` in `local`'s type\n-// (`kind`), emit a Polonius `var_drops_region(local, region)` fact.\n-pub(super) fn add_var_drops_regions(\n+// (`kind`), emit a Polonius `use_of_var_derefs_origin(local, origin)` fact.\n+pub(super) fn add_drop_of_var_derefs_origin(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     local: Local,\n     kind: &GenericArg<'tcx>,\n ) {\n-    debug!(\"add_var_drops_region(local={:?}, kind={:?}\", local, kind);\n+    debug!(\"add_drop_of_var_derefs_origin(local={:?}, kind={:?}\", local, kind);\n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n         let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let universal_regions = &typeck.borrowck_context.universal_regions;\n         typeck.infcx.tcx.for_each_free_region(kind, |drop_live_region| {\n             let region_vid = universal_regions.to_region_vid(drop_live_region);\n-            facts.var_drops_region.push((local, region_vid));\n+            facts.drop_of_var_derefs_origin.push((local, region_vid));\n         });\n     }\n }"}, {"sha": "baa9d1d212ea7c4ce4904871ef4c3249b5e90604", "filename": "src/librustc_mir/borrow_check/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b135c739fb542d2c78e30f3e945ff3e528942190/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs?ref=b135c739fb542d2c78e30f3e945ff3e528942190", "patch": "@@ -484,7 +484,7 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         for &kind in &drop_data.dropck_result.kinds {\n             Self::make_all_regions_live(self.elements, &mut self.typeck, kind, live_at);\n \n-            polonius::add_var_drops_regions(&mut self.typeck, dropped_local, &kind);\n+            polonius::add_drop_of_var_derefs_origin(&mut self.typeck, dropped_local, &kind);\n         }\n     }\n "}]}