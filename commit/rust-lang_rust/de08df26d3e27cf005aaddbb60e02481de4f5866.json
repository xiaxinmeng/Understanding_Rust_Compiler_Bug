{"sha": "de08df26d3e27cf005aaddbb60e02481de4f5866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDhkZjI2ZDNlMjdjZjAwNWFhZGRiYjYwZTAyNDgxZGU0ZjU4NjY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-11-19T07:28:49Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-11-19T07:28:49Z"}, "message": "Make as{_mut,}_slice on array::IntoIter public", "tree": {"sha": "3eac83d5cb9899dd57d0cf47ae92d595441059d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eac83d5cb9899dd57d0cf47ae92d595441059d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de08df26d3e27cf005aaddbb60e02481de4f5866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de08df26d3e27cf005aaddbb60e02481de4f5866", "html_url": "https://github.com/rust-lang/rust/commit/de08df26d3e27cf005aaddbb60e02481de4f5866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de08df26d3e27cf005aaddbb60e02481de4f5866/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675f114d952df8be61ac74ebeac7550049f26ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/675f114d952df8be61ac74ebeac7550049f26ccd", "html_url": "https://github.com/rust-lang/rust/commit/675f114d952df8be61ac74ebeac7550049f26ccd"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "706f865b4d14f1fd9fbe4573dc473a2c3f696876", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de08df26d3e27cf005aaddbb60e02481de4f5866/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de08df26d3e27cf005aaddbb60e02481de4f5866/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=de08df26d3e27cf005aaddbb60e02481de4f5866", "patch": "@@ -69,7 +69,8 @@ impl<T, const N: usize> IntoIter<T, N> {\n \n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n-    fn as_slice(&self) -> &[T] {\n+    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    pub fn as_slice(&self) -> &[T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {\n             let slice = self.data.get_unchecked(self.alive.clone());\n@@ -78,7 +79,8 @@ impl<T, const N: usize> IntoIter<T, N> {\n     }\n \n     /// Returns a mutable slice of all elements that have not been yielded yet.\n-    fn as_mut_slice(&mut self) -> &mut [T] {\n+    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(self.alive.clone());"}]}