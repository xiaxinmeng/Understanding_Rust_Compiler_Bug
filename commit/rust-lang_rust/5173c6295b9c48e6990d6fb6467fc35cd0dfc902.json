{"sha": "5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzNjNjI5NWI5YzQ4ZTY5OTBkNmZiNjQ2N2ZjMzVjZDBkZmM5MDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-08T11:06:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-08T11:34:30Z"}, "message": "move find_references to references", "tree": {"sha": "5a13713657f619b555f57eab148b3d1d16c6fb63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a13713657f619b555f57eab148b3d1d16c6fb63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "html_url": "https://github.com/rust-lang/rust/commit/5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5bb7045685a2e050c1b431f4cddd569b517eb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bb7045685a2e050c1b431f4cddd569b517eb77", "html_url": "https://github.com/rust-lang/rust/commit/f5bb7045685a2e050c1b431f4cddd569b517eb77"}], "stats": {"total": 122, "additions": 55, "deletions": 67}, "files": [{"sha": "435cc7d4be9099c8fb15e91e73e3e2aa5b640433", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "patch": "@@ -2,11 +2,7 @@ use hir::{\n     self, Problem, source_binder\n };\n use ra_ide_api_light::{self, LocalEdit, Severity};\n-use ra_syntax::{\n-    algo::find_node_at_offset, ast::{self, NameOwner}, AstNode,\n-    SourceFile,\n-    TextRange,\n-};\n+use ra_syntax::ast;\n use ra_db::SourceDatabase;\n \n use crate::{\n@@ -16,54 +12,6 @@ use crate::{\n };\n \n impl db::RootDatabase {\n-    pub(crate) fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n-        let file = self.parse(position.file_id);\n-        // Find the binding associated with the offset\n-        let (binding, descr) = match find_binding(self, &file, position) {\n-            None => return Vec::new(),\n-            Some(it) => it,\n-        };\n-\n-        let mut ret = binding\n-            .name()\n-            .into_iter()\n-            .map(|name| (position.file_id, name.syntax().range()))\n-            .collect::<Vec<_>>();\n-        ret.extend(\n-            descr\n-                .scopes(self)\n-                .find_all_refs(binding)\n-                .into_iter()\n-                .map(|ref_desc| (position.file_id, ref_desc.range)),\n-        );\n-\n-        return ret;\n-\n-        fn find_binding<'a>(\n-            db: &db::RootDatabase,\n-            source_file: &'a SourceFile,\n-            position: FilePosition,\n-        ) -> Option<(&'a ast::BindPat, hir::Function)> {\n-            let syntax = source_file.syntax();\n-            if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n-                let descr = source_binder::function_from_child_node(\n-                    db,\n-                    position.file_id,\n-                    binding.syntax(),\n-                )?;\n-                return Some((binding, descr));\n-            };\n-            let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n-            let descr =\n-                source_binder::function_from_child_node(db, position.file_id, name_ref.syntax())?;\n-            let scope = descr.scopes(db);\n-            let resolved = scope.resolve_local_name(name_ref)?;\n-            let resolved = resolved.ptr().to_node(source_file);\n-            let binding = find_node_at_offset::<ast::BindPat>(syntax, resolved.range().end())?;\n-            Some((binding, descr))\n-        }\n-    }\n-\n     pub(crate) fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n         let syntax = self.parse(file_id);\n "}, {"sha": "f5c1aa03693cfcc44ada389a88b440312ac88c09", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "patch": "@@ -322,7 +322,7 @@ impl Analysis {\n \n     /// Finds all usages of the reference at point.\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n-        self.with_db(|db| db.find_all_refs(position))\n+        self.with_db(|db| references::find_all_refs(db, position))\n     }\n \n     /// Returns a short text descrbing element at position."}, {"sha": "b129f3134928c73ea706bd8ac417e8999986b781", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5173c6295b9c48e6990d6fb6467fc35cd0dfc902/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=5173c6295b9c48e6990d6fb6467fc35cd0dfc902", "patch": "@@ -1,13 +1,10 @@\n-use relative_path::RelativePathBuf;\n-\n-use hir::{\n-    self, ModuleSource, source_binder::module_from_declaration,\n-};\n+use relative_path::{RelativePath, RelativePathBuf};\n+use hir::{ModuleSource, source_binder};\n+use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n+    AstNode, SyntaxNode, TextRange, SourceFile,\n+    ast::{self, NameOwner},\n     algo::find_node_at_offset,\n-    ast,\n-    AstNode,\n-    SyntaxNode\n };\n \n use crate::{\n@@ -17,8 +14,51 @@ use crate::{\n     SourceChange,\n     SourceFileEdit,\n };\n-use ra_db::SourceDatabase;\n-use relative_path::RelativePath;\n+\n+pub(crate) fn find_all_refs(db: &RootDatabase, position: FilePosition) -> Vec<(FileId, TextRange)> {\n+    let file = db.parse(position.file_id);\n+    // Find the binding associated with the offset\n+    let (binding, descr) = match find_binding(db, &file, position) {\n+        None => return Vec::new(),\n+        Some(it) => it,\n+    };\n+\n+    let mut ret = binding\n+        .name()\n+        .into_iter()\n+        .map(|name| (position.file_id, name.syntax().range()))\n+        .collect::<Vec<_>>();\n+    ret.extend(\n+        descr\n+            .scopes(db)\n+            .find_all_refs(binding)\n+            .into_iter()\n+            .map(|ref_desc| (position.file_id, ref_desc.range)),\n+    );\n+\n+    return ret;\n+\n+    fn find_binding<'a>(\n+        db: &RootDatabase,\n+        source_file: &'a SourceFile,\n+        position: FilePosition,\n+    ) -> Option<(&'a ast::BindPat, hir::Function)> {\n+        let syntax = source_file.syntax();\n+        if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n+            let descr =\n+                source_binder::function_from_child_node(db, position.file_id, binding.syntax())?;\n+            return Some((binding, descr));\n+        };\n+        let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n+        let descr =\n+            source_binder::function_from_child_node(db, position.file_id, name_ref.syntax())?;\n+        let scope = descr.scopes(db);\n+        let resolved = scope.resolve_local_name(name_ref)?;\n+        let resolved = resolved.ptr().to_node(source_file);\n+        let binding = find_node_at_offset::<ast::BindPat>(syntax, resolved.range().end())?;\n+        Some((binding, descr))\n+    }\n+}\n \n pub(crate) fn rename(\n     db: &RootDatabase,\n@@ -57,7 +97,8 @@ fn rename_mod(\n ) -> Option<SourceChange> {\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n-    if let Some(module) = module_from_declaration(db, position.file_id, &ast_module) {\n+    if let Some(module) = source_binder::module_from_declaration(db, position.file_id, &ast_module)\n+    {\n         let (file_id, module_source) = module.definition_source(db);\n         match module_source {\n             ModuleSource::SourceFile(..) => {\n@@ -108,8 +149,7 @@ fn rename_reference(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let edit = db\n-        .find_all_refs(position)\n+    let edit = find_all_refs(db, position)\n         .iter()\n         .map(|(file_id, text_range)| SourceFileEdit {\n             file_id: *file_id,"}]}