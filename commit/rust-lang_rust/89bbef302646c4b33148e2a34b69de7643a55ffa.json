{"sha": "89bbef302646c4b33148e2a34b69de7643a55ffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YmJlZjMwMjY0NmM0YjMzMTQ4ZTJhMzRiNjlkZTc2NDNhNTVmZmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T00:48:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T16:50:44Z"}, "message": "check_match: misc cleanup.", "tree": {"sha": "4b7d42e65db70249b4a4a53a7c935bf9eb625aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7d42e65db70249b4a4a53a7c935bf9eb625aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bbef302646c4b33148e2a34b69de7643a55ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bbef302646c4b33148e2a34b69de7643a55ffa", "html_url": "https://github.com/rust-lang/rust/commit/89bbef302646c4b33148e2a34b69de7643a55ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bbef302646c4b33148e2a34b69de7643a55ffa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75fb42a11fa91a323e2109a0d42230d96c73e3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fb42a11fa91a323e2109a0d42230d96c73e3bb", "html_url": "https://github.com/rust-lang/rust/commit/75fb42a11fa91a323e2109a0d42230d96c73e3bb"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "dc884d40ac15794e726421b209f34ed53830d2d2", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/89bbef302646c4b33148e2a34b69de7643a55ffa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bbef302646c4b33148e2a34b69de7643a55ffa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=89bbef302646c4b33148e2a34b69de7643a55ffa", "patch": "@@ -563,40 +563,30 @@ fn check_legality_of_move_bindings(\n             }\n         })\n     }\n+\n     let span_vec = &mut Vec::new();\n-    let check_move = |\n-        cx: &mut MatchVisitor<'_, '_>,\n-        p: &Pat,\n-        sub: Option<&Pat>,\n-        span_vec: &mut Vec<Span>,\n-    | {\n-        // check legality of moving out of the enum\n-\n-        // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n+    let mut check_move = |p: &Pat, sub: Option<&Pat>| {\n+        // Check legality of moving out of the enum.\n+        //\n+        // `x @ Foo(..)` is legal, but `x @ Foo(y)` isn't.\n         if sub.map_or(false, |p| p.contains_bindings()) {\n-            struct_span_err!(cx.tcx.sess, p.span, E0007,\n-                             \"cannot bind by-move with sub-bindings\")\n+            struct_span_err!(cx.tcx.sess, p.span, E0007, \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if !has_guard {\n-            if let Some(_by_ref_span) = by_ref_span {\n-                span_vec.push(p.span);\n-            }\n+        } else if !has_guard && by_ref_span.is_some() {\n+            span_vec.push(p.span);\n         }\n     };\n \n     for pat in pats {\n         pat.walk(|p| {\n-            if let PatKind::Binding(_, _, _, ref sub) = p.node {\n+            if let PatKind::Binding(.., sub) = &p.node {\n                 if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n-                    match bm {\n-                        ty::BindByValue(..) => {\n-                            let pat_ty = cx.tables.node_type(p.hir_id);\n-                            if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n-                                check_move(cx, p, sub.as_ref().map(|p| &**p), span_vec);\n-                            }\n+                    if let ty::BindByValue(..) = bm {\n+                        let pat_ty = cx.tables.node_type(p.hir_id);\n+                        if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n+                            check_move(p, sub.as_deref());\n                         }\n-                        _ => {}\n                     }\n                 } else {\n                     cx.tcx.sess.delay_span_bug(pat.span, \"missing binding mode\");\n@@ -605,11 +595,10 @@ fn check_legality_of_move_bindings(\n             true\n         });\n     }\n-    if !span_vec.is_empty(){\n-        let span = MultiSpan::from_spans(span_vec.clone());\n+    if !span_vec.is_empty() {\n         let mut err = struct_span_err!(\n             cx.tcx.sess,\n-            span,\n+            MultiSpan::from_spans(span_vec.clone()),\n             E0009,\n             \"cannot bind by-move and by-ref in the same pattern\",\n         );\n@@ -627,7 +616,7 @@ fn check_legality_of_move_bindings(\n /// because of the way rvalues are handled in the borrow check. (See issue\n /// #14587.)\n fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n-    AtBindingPatternVisitor { cx: cx, bindings_allowed: true }.visit_pat(pat);\n+    AtBindingPatternVisitor { cx, bindings_allowed: true }.visit_pat(pat);\n }\n \n struct AtBindingPatternVisitor<'a, 'b, 'tcx> {"}, {"sha": "ac756747aa326f741f15abe2e86503db6a16c079", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89bbef302646c4b33148e2a34b69de7643a55ffa/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bbef302646c4b33148e2a34b69de7643a55ffa/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=89bbef302646c4b33148e2a34b69de7643a55ffa", "patch": "@@ -6,6 +6,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n+#![feature(inner_deref)]\n #![feature(slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}]}