{"sha": "ec7e84ae0d9d04c52a8456c16dd846efe6390340", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjN2U4NGFlMGQ5ZDA0YzUyYTg0NTZjMTZkZDg0NmVmZTYzOTAzNDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-11T23:49:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-11T23:49:56Z"}, "message": "Preserve crate directives in the parsed crate.", "tree": {"sha": "cac83fdde3f379554aae7fcf133b66fe4149742e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac83fdde3f379554aae7fcf133b66fe4149742e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7e84ae0d9d04c52a8456c16dd846efe6390340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7e84ae0d9d04c52a8456c16dd846efe6390340", "html_url": "https://github.com/rust-lang/rust/commit/ec7e84ae0d9d04c52a8456c16dd846efe6390340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7e84ae0d9d04c52a8456c16dd846efe6390340/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d24acf733a6fcc22ec53c241311240b950db0b11", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24acf733a6fcc22ec53c241311240b950db0b11", "html_url": "https://github.com/rust-lang/rust/commit/d24acf733a6fcc22ec53c241311240b950db0b11"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "5999388ee12ce296491f2074aada6dd458fd694f", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=ec7e84ae0d9d04c52a8456c16dd846efe6390340", "patch": "@@ -44,7 +44,8 @@ tag def {\n }\n \n type crate = spanned[crate_];\n-type crate_ = rec(_mod module);\n+type crate_ = rec(vec[@crate_directive] directives,\n+                  _mod module);\n \n tag crate_directive_ {\n     cdir_expr(@expr);"}, {"sha": "45cec0c0d2337d2e07933bf927b1f4c6f2207e1a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ec7e84ae0d9d04c52a8456c16dd846efe6390340", "patch": "@@ -2244,7 +2244,9 @@ impure fn parse_crate_from_source_file(parser p) -> @ast.crate {\n     auto lo = p.get_span();\n     auto hi = lo;\n     auto m = parse_mod_items(p, token.EOF);\n-    ret @spanned(lo, hi, rec(module=m));\n+    let vec[@ast.crate_directive] cdirs = vec();\n+    ret @spanned(lo, hi, rec(directives=cdirs,\n+                             module=m));\n }\n \n // Logic for parsing crate files (.rc)\n@@ -2259,8 +2261,6 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n     auto hi = lo;\n     alt (p.peek()) {\n         case (token.AUTH) {\n-            // FIXME: currently dropping auth clauses on the floor,\n-            // as there is no effect-checking pass.\n             p.bump();\n             auto n = parse_path(p, GREEDY);\n             expect(p, token.EQ);\n@@ -2271,8 +2271,6 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n         }\n \n         case (token.META) {\n-            // FIXME: currently dropping meta clauses on the floor,\n-            // as there is no crate metadata system\n             p.bump();\n             auto mis = parse_meta(p);\n             hi = p.get_span();\n@@ -2381,7 +2379,8 @@ impure fn parse_crate_from_crate_file(parser p) -> @ast.crate {\n                                                cdirs, prefix);\n     hi = p.get_span();\n     expect(p, token.EOF);\n-    ret @spanned(lo, hi, rec(module=m));\n+    ret @spanned(lo, hi, rec(directives=cdirs,\n+                             module=m));\n }\n \n "}, {"sha": "17a2a2ca3742496d207d7b4399146a19fa3b325c", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7e84ae0d9d04c52a8456c16dd846efe6390340/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=ec7e84ae0d9d04c52a8456c16dd846efe6390340", "patch": "@@ -273,6 +273,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &ast.native_mod m) -> ast.native_mod) fold_native_mod,\n \n      (fn(&ENV e, &span sp,\n+         vec[@ast.crate_directive] cdirs,\n          &ast._mod m) -> @ast.crate)              fold_crate,\n \n      (fn(&ENV e,\n@@ -991,9 +992,12 @@ fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n }\n \n fn fold_crate[ENV](&ENV env, ast_fold[ENV] fld, @ast.crate c) -> @ast.crate {\n+    // FIXME: possibly fold the directives so you process any expressions\n+    // within them? Not clear. After front/eval.rs, nothing else should look\n+    // at crate directives.\n     let ENV env_ = fld.update_env_for_crate(env, c);\n     let ast._mod m = fold_mod[ENV](env_, fld, c.node.module);\n-    ret fld.fold_crate(env_, c.span, m);\n+    ret fld.fold_crate(env_, c.span, c.node.directives, m);\n }\n \n //// Identity folds.\n@@ -1381,8 +1385,10 @@ fn identity_fold_native_mod[ENV](&ENV e,\n     ret m;\n }\n \n-fn identity_fold_crate[ENV](&ENV e, &span sp, &ast._mod m) -> @ast.crate {\n-    ret @respan(sp, rec(module=m));\n+fn identity_fold_crate[ENV](&ENV e, &span sp,\n+                            vec[@ast.crate_directive] cdirs,\n+                            &ast._mod m) -> @ast.crate {\n+    ret @respan(sp, rec(directives=cdirs, module=m));\n }\n \n fn identity_fold_obj[ENV](&ENV e,\n@@ -1537,7 +1543,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_fn_decl = bind identity_fold_fn_decl[ENV](_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_native_mod = bind identity_fold_native_mod[ENV](_,_),\n-         fold_crate = bind identity_fold_crate[ENV](_,_,_),\n+         fold_crate = bind identity_fold_crate[ENV](_,_,_,_),\n          fold_obj = bind identity_fold_obj[ENV](_,_,_,_),\n \n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),"}]}