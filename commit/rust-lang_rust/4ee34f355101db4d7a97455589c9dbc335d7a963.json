{"sha": "4ee34f355101db4d7a97455589c9dbc335d7a963", "node_id": "C_kwDOAAsO6NoAKDRlZTM0ZjM1NTEwMWRiNGQ3YTk3NDU1NTg5YzlkYmMzMzVkN2E5NjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-27T21:55:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-27T21:55:52Z"}, "message": "Auto merge of #92329 - matthiaskrgr:rollup-l3b4fl1, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90586 (Relax priv-in-pub lint on generic bounds and where clauses of trait impls.)\n - #92112 (Fix the error of checking `base_expr` twice in type_changing_struct_update)\n - #92147 (rustc_builtin_macros: make asm mod public for rustfmt)\n - #92161 (resolve: Minor miscellaneous cleanups from #89059)\n - #92264 (Remove `maybe_uninit_extra` feature from Vec docs)\n - #92303 (Add test cases for issue #26186)\n - #92307 (Fix minor typos)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dc87d7d7ab36997c9e06489820ae0babda696b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc87d7d7ab36997c9e06489820ae0babda696b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee34f355101db4d7a97455589c9dbc335d7a963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee34f355101db4d7a97455589c9dbc335d7a963", "html_url": "https://github.com/rust-lang/rust/commit/4ee34f355101db4d7a97455589c9dbc335d7a963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee34f355101db4d7a97455589c9dbc335d7a963/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8"}, {"sha": "eab81297f756135d1d7bc9c34b7a7f53003f0bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab81297f756135d1d7bc9c34b7a7f53003f0bee", "html_url": "https://github.com/rust-lang/rust/commit/eab81297f756135d1d7bc9c34b7a7f53003f0bee"}], "stats": {"total": 555, "additions": 437, "deletions": 118}, "files": [{"sha": "1a93b9be99ead615d643ed35704c0230b81b2ca1", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -809,7 +809,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n     })\n }\n \n-pub fn expand_asm<'cx>(\n+pub(super) fn expand_asm<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     tts: TokenStream,\n@@ -836,7 +836,7 @@ pub fn expand_asm<'cx>(\n     }\n }\n \n-pub fn expand_global_asm<'cx>(\n+pub(super) fn expand_global_asm<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     tts: TokenStream,"}, {"sha": "8c3ef2864f4859b1fe89adb1eab949de16f9c781", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -19,7 +19,6 @@ use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::symbol::sym;\n \n-mod asm;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -42,6 +41,7 @@ mod test;\n mod trace_macros;\n mod util;\n \n+pub mod asm;\n pub mod cmdline_attrs;\n pub mod proc_macro_harness;\n pub mod standard_library_imports;"}, {"sha": "b46a92e2c1b0f5dd1a287d56c58aaa7c9c186fdb", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -415,16 +415,12 @@ impl CStore {\n \n         let span = data.get_span(id.index, sess);\n \n-        let attrs = data.get_item_attrs(id.index, sess).collect();\n-\n-        let ident = data.item_ident(id.index, sess);\n-\n         LoadedMacro::MacroDef(\n             ast::Item {\n-                ident,\n+                ident: data.item_ident(id.index, sess),\n                 id: ast::DUMMY_NODE_ID,\n                 span,\n-                attrs,\n+                attrs: data.get_item_attrs(id.index, sess).collect(),\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n                 vis: ast::Visibility {\n                     span: span.shrink_to_lo(),"}, {"sha": "183a5a205ec829f7cb2574cf9a15f0fc2d8bfc33", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -2064,7 +2064,11 @@ impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {\n             // Subitems of trait impls have inherited publicity.\n             hir::ItemKind::Impl(ref impl_) => {\n                 let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());\n-                self.check(item.def_id, impl_vis).generics().predicates();\n+                // check that private components do not appear in the generics or predicates of inherent impls\n+                // this check is intentionally NOT performed for impls of traits, per #90586\n+                if impl_.of_trait.is_none() {\n+                    self.check(item.def_id, impl_vis).generics().predicates();\n+                }\n                 for impl_item_ref in impl_.items {\n                     let impl_item_vis = if impl_.of_trait.is_none() {\n                         min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)"}, {"sha": "26344080381daba1d0deea4f9811fb37eefc0b78", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -3419,27 +3419,21 @@ impl<'a> Resolver<'a> {\n                     return v.clone();\n                 }\n \n-                let parse_attrs = || {\n-                    let attrs = self.cstore().item_attrs(def_id, self.session);\n-                    let attr =\n-                        attrs.iter().find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n-                    let mut ret = vec![];\n-                    for meta in attr.meta_item_list()? {\n-                        match meta.literal()?.kind {\n-                            LitKind::Int(a, _) => {\n-                                ret.push(a as usize);\n-                            }\n-                            _ => panic!(\"invalid arg index\"),\n-                        }\n+                let attr = self\n+                    .cstore()\n+                    .item_attrs(def_id, self.session)\n+                    .into_iter()\n+                    .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n+                let mut ret = Vec::new();\n+                for meta in attr.meta_item_list()? {\n+                    match meta.literal()?.kind {\n+                        LitKind::Int(a, _) => ret.push(a as usize),\n+                        _ => panic!(\"invalid arg index\"),\n                     }\n-                    Some(ret)\n-                };\n-\n-                // Cache the lookup to avoid parsing attributes for an iterm\n-                // multiple times.\n-                let ret = parse_attrs();\n-                self.legacy_const_generic_args.insert(def_id, ret.clone());\n-                return ret;\n+                }\n+                // Cache the lookup to avoid parsing attributes for an iterm multiple times.\n+                self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));\n+                return Some(ret);\n             }\n         }\n         None"}, {"sha": "8d370e440eaf1fedd55d27844464e66b46481e91", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -1508,7 +1508,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             } else {\n                 self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {\n-                    let base_ty = self.check_expr(base_expr);\n+                    let base_ty = self.typeck_results.borrow().node_type(base_expr.hir_id);\n                     let same_adt = match (adt_ty.kind(), base_ty.kind()) {\n                         (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt => true,\n                         _ => false,"}, {"sha": "2863da059329a71cd05b05a6d6fb7ceac6a43daf", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -2043,7 +2043,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_spare_capacity, maybe_uninit_extra)]\n+    /// #![feature(vec_spare_capacity)]\n     ///\n     /// // Allocate vector big enough for 10 elements.\n     /// let mut v = Vec::with_capacity(10);\n@@ -2102,7 +2102,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_split_at_spare, maybe_uninit_extra)]\n+    /// #![feature(vec_split_at_spare)]\n     ///\n     /// let mut v = vec![1, 1, 2];\n     ///"}, {"sha": "c655bc889308c6112c555f35190dec1e2f2d3ddb", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -52,7 +52,7 @@ impl<'a> ReadBuf<'a> {\n \n     /// Creates a new `ReadBuf` from a fully uninitialized buffer.\n     ///\n-    /// Use `assume_init` if part of the buffer is known to be already inintialized.\n+    /// Use `assume_init` if part of the buffer is known to be already initialized.\n     #[inline]\n     pub fn uninit(buf: &'a mut [MaybeUninit<u8>]) -> ReadBuf<'a> {\n         ReadBuf { buf, filled: 0, initialized: 0 }\n@@ -145,7 +145,7 @@ impl<'a> ReadBuf<'a> {\n                 byte.write(0);\n             }\n \n-            // SAFETY: we just inintialized uninit bytes, and the previous bytes were already init\n+            // SAFETY: we just initialized uninit bytes, and the previous bytes were already init\n             unsafe {\n                 self.assume_init(n);\n             }"}, {"sha": "4029125a375df781d7b11370f270e7d9b68b57b3", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -1826,7 +1826,7 @@ impl fmt::Display for Ipv6Addr {\n                 }\n             }\n         } else {\n-            // Slow path: write the address to a local buffer, the use f.pad.\n+            // Slow path: write the address to a local buffer, then use f.pad.\n             // Defined recursively by using the fast path to write to the\n             // buffer.\n "}, {"sha": "a795088a1d94571466bf34f09cd0992cb9ea22db", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -3,7 +3,7 @@\n #![feature(rustc_attrs)]\n \n // Test to ensure that we can handle cases where\n-// let statements create no bindings are intialized\n+// let statements create no bindings are initialized\n // using a Place expression\n //\n // Note: Currently when feature `capture_disjoint_fields` is enabled"}, {"sha": "8023b998a4099ebc3afff2b28ac4b98915cb0976", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -9,12 +9,7 @@ pub trait Trait {\n     fn assoc_fn() -> Self::AssocTy;\n }\n \n-impl<const U: u8> Trait for Const<U>\n-//~^ WARN private type\n-//~| WARN this was previously\n-//~| WARN private type\n-//~| WARN this was previously\n-\n+impl<const U: u8> Trait for Const<U> // OK, trait impl predicates\n where\n     Const<{ my_const_fn(U) }>: ,\n {"}, {"sha": "c6b0ce931450deeb96c8fa5a8bbf42ae5ada398c", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.stderr", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -1,43 +1,12 @@\n-warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n-  --> $DIR/eval-privacy.rs:12:1\n-   |\n-LL | / impl<const U: u8> Trait for Const<U>\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = note: `#[warn(private_in_public)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n-  --> $DIR/eval-privacy.rs:12:1\n-   |\n-LL | / impl<const U: u8> Trait for Const<U>\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n-  --> $DIR/eval-privacy.rs:21:5\n+  --> $DIR/eval-privacy.rs:16:5\n    |\n LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n ...\n LL | const fn my_const_fn(val: u8) -> u8 {\n    | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "f93869352ea616fbe5ff47206003bcc284deb12c", "filename": "src/test/ui/issues/issue-26186.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fissues%2Fissue-26186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fissues%2Fissue-26186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26186.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,62 @@\n+// check-pass\n+use std::sync::Mutex;\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::ops::*;\n+\n+//eefriedman example\n+struct S<'a, T:FnMut() + 'static + ?Sized>(&'a mut T);\n+impl<'a, T:?Sized + FnMut() + 'static> DerefMut for S<'a, T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }\n+}\n+impl<'a, T:?Sized + FnMut() + 'static> Deref for S<'a, T> {\n+    type Target = dyn FnMut() + 'a;\n+    fn deref(&self) -> &Self::Target { &self.0 }\n+}\n+\n+//Ossipal example\n+struct FunctionIcon {\n+    get_icon: Mutex<Box<dyn FnMut() -> u32>>,\n+}\n+\n+impl FunctionIcon {\n+    fn get_icon(&self) -> impl '_ + std::ops::DerefMut<Target=Box<dyn FnMut() -> u32>> {\n+        self.get_icon.lock().unwrap()\n+    }\n+\n+    fn load_icon(&self)  {\n+        let mut get_icon = self.get_icon();\n+        let _rgba_icon = (*get_icon)();\n+    }\n+}\n+\n+//shepmaster example\n+struct Foo;\n+\n+impl Deref for Foo {\n+    type Target = dyn FnMut() + 'static;\n+    fn deref(&self) -> &Self::Target {\n+        unimplemented!()\n+    }\n+}\n+\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    //eefriedman example\n+    let mut f = ||{};\n+    let mut s = S(&mut f);\n+    s();\n+\n+    //Diggsey/Mark-Simulacrum example\n+    let a: Rc<RefCell<dyn FnMut()>> = Rc::new(RefCell::new(||{}));\n+    a.borrow_mut()();\n+\n+    //shepmaster example\n+    let mut t = Foo;\n+    t();\n+}"}, {"sha": "0fa1de975b0403beed8d0df922beafeb888f5b85", "filename": "src/test/ui/privacy/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -63,8 +63,7 @@ mod traits {\n     }\n     impl<T: PrivTr> Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n         //~^ WARNING hard error\n-    impl<T: PrivTr> PubTr for Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n-        //~^ WARNING hard error\n+    impl<T: PrivTr> PubTr for Pub<T> {} // OK, trait impl predicates\n }\n \n mod traits_where {\n@@ -87,9 +86,7 @@ mod traits_where {\n     impl<T> Pub<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-    impl<T> PubTr for Pub<T> where T: PrivTr {}\n-        //~^ ERROR private trait `traits_where::PrivTr` in public interface\n-        //~| WARNING hard error\n+    impl<T> PubTr for Pub<T> where T: PrivTr {} // OK, trait impl predicates\n }\n \n mod generics {"}, {"sha": "a72d824779279dc95b9834f17a7218486e1e9b7a", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -156,17 +156,8 @@ LL |     impl<T: PrivTr> Pub<T> {}\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:66:5\n-   |\n-LL |     impl<T: PrivTr> PubTr for Pub<T> {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:75:5\n+  --> $DIR/private-in-public-warn.rs:74:5\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +166,7 @@ LL |     pub type Alias<T> where T: PrivTr = T;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:79:5\n+  --> $DIR/private-in-public-warn.rs:78:5\n    |\n LL |     pub trait Tr2<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -184,7 +175,7 @@ LL |     pub trait Tr2<T> where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:83:9\n+  --> $DIR/private-in-public-warn.rs:82:9\n    |\n LL |         fn f<T>(arg: T) where T: PrivTr {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -193,25 +184,16 @@ LL |         fn f<T>(arg: T) where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:87:5\n+  --> $DIR/private-in-public-warn.rs:86:5\n    |\n LL |     impl<T> Pub<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:90:5\n-   |\n-LL |     impl<T> PubTr for Pub<T> where T: PrivTr {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n error: private trait `generics::PrivTr<generics::Pub>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:101:5\n+  --> $DIR/private-in-public-warn.rs:98:5\n    |\n LL |     pub trait Tr1: PrivTr<Pub> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +202,7 @@ LL |     pub trait Tr1: PrivTr<Pub> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:104:5\n+  --> $DIR/private-in-public-warn.rs:101:5\n    |\n LL |     pub trait Tr2: PubTr<Priv> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -229,7 +211,7 @@ LL |     pub trait Tr2: PubTr<Priv> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:106:5\n+  --> $DIR/private-in-public-warn.rs:103:5\n    |\n LL |     pub trait Tr3: PubTr<[Priv; 1]> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -238,7 +220,7 @@ LL |     pub trait Tr3: PubTr<[Priv; 1]> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:108:5\n+  --> $DIR/private-in-public-warn.rs:105:5\n    |\n LL |     pub trait Tr4: PubTr<Pub<Priv>> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -247,7 +229,7 @@ LL |     pub trait Tr4: PubTr<Pub<Priv>> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `impls::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:135:9\n+  --> $DIR/private-in-public-warn.rs:132:9\n    |\n LL |     struct Priv;\n    |     ------------ `impls::Priv` declared as private\n@@ -256,7 +238,7 @@ LL |         type Alias = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private type `aliases_pub::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:206:9\n+  --> $DIR/private-in-public-warn.rs:203:9\n    |\n LL |         pub fn f(arg: Priv) {}\n    |         ^^^^^^^^^^^^^^^^^^^\n@@ -265,7 +247,7 @@ LL |         pub fn f(arg: Priv) {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:210:9\n+  --> $DIR/private-in-public-warn.rs:207:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -274,7 +256,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:213:9\n+  --> $DIR/private-in-public-warn.rs:210:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -283,7 +265,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:216:9\n+  --> $DIR/private-in-public-warn.rs:213:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -292,7 +274,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:219:9\n+  --> $DIR/private-in-public-warn.rs:216:9\n    |\n LL |     struct Priv;\n    |     ------------ `aliases_pub::Priv` declared as private\n@@ -301,7 +283,7 @@ LL |         type Check = Priv;\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private trait `PrivTr1` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:249:5\n+  --> $DIR/private-in-public-warn.rs:246:5\n    |\n LL |     pub trait Tr1: PrivUseAliasTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,7 +292,7 @@ LL |     pub trait Tr1: PrivUseAliasTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `PrivTr1<Priv2>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:252:5\n+  --> $DIR/private-in-public-warn.rs:249:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -319,7 +301,7 @@ LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `Priv2` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:252:5\n+  --> $DIR/private-in-public-warn.rs:249:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -341,7 +323,7 @@ LL +     pub type Alias<T> = T;\n    | \n \n warning: where clauses are not enforced in type aliases\n-  --> $DIR/private-in-public-warn.rs:75:29\n+  --> $DIR/private-in-public-warn.rs:74:29\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |                             ^^^^^^^^^\n@@ -352,6 +334,6 @@ LL -     pub type Alias<T> where T: PrivTr = T;\n LL +     pub type Alias<T>  = T;\n    | \n \n-error: aborting due to 36 previous errors; 2 warnings emitted\n+error: aborting due to 34 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "66ee9c4bbd8836b74aeb8e792a224b362b54999f", "filename": "src/test/ui/privacy/where-priv-type.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,90 @@\n+// priv-in-pub lint tests where the private type appears in the\n+// `where` clause of a public item\n+\n+#![crate_type = \"lib\"]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+\n+struct PrivTy;\n+trait PrivTr {}\n+pub struct PubTy;\n+pub struct PubTyGeneric<T>(T);\n+pub trait PubTr {}\n+impl PubTr for PrivTy {}\n+pub trait PubTrWithAssocTy { type AssocTy; }\n+impl PubTrWithAssocTy for PrivTy { type AssocTy = PrivTy; }\n+\n+\n+pub struct S\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+pub enum E\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+pub fn f()\n+//~^ WARNING private type `PrivTy` in public interface\n+//~| WARNING hard error\n+where\n+    PrivTy:\n+{}\n+\n+\n+impl S\n+//~^ ERROR private type `PrivTy` in public interface\n+where\n+    PrivTy:\n+{\n+    pub fn f()\n+    //~^ WARNING private type `PrivTy` in public interface\n+    //~| WARNING hard error\n+    where\n+        PrivTy:\n+    {}\n+}\n+\n+\n+impl PubTr for PubTy\n+where\n+    PrivTy:\n+{}\n+\n+\n+impl<T> PubTr for PubTyGeneric<T>\n+where\n+    T: PubTrWithAssocTy<AssocTy=PrivTy>\n+{}\n+\n+\n+pub struct Const<const U: u8>;\n+\n+pub trait Trait {\n+    type AssocTy;\n+    fn assoc_fn() -> Self::AssocTy;\n+}\n+\n+impl<const U: u8> Trait for Const<U>\n+where\n+    Const<{ my_const_fn(U) }>: ,\n+{\n+    type AssocTy = Const<{ my_const_fn(U) }>;\n+    //~^ ERROR private type\n+    fn assoc_fn() -> Self::AssocTy {\n+        Const\n+    }\n+}\n+\n+const fn my_const_fn(val: u8) -> u8 {\n+    // body of this function doesn't matter\n+    val\n+}"}, {"sha": "378c14810d92d7c82334a9acf649e15f16e32ff3", "filename": "src/test/ui/privacy/where-priv-type.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-priv-type.stderr?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,82 @@\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:19:1\n+   |\n+LL | / pub struct S\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+LL | | {}\n+   | |__^\n+   |\n+   = note: `#[warn(private_in_public)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:27:1\n+   |\n+LL | / pub enum E\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+LL | | {}\n+   | |__^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:35:1\n+   |\n+LL | / pub fn f()\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+   | |___________^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `PrivTy` in public interface\n+  --> $DIR/where-priv-type.rs:43:1\n+   |\n+LL |   struct PrivTy;\n+   |   -------------- `PrivTy` declared as private\n+...\n+LL | / impl S\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+...  |\n+LL | |     {}\n+LL | | }\n+   | |_^ can't leak private type\n+\n+warning: private type `PrivTy` in public interface (error E0446)\n+  --> $DIR/where-priv-type.rs:48:5\n+   |\n+LL | /     pub fn f()\n+LL | |\n+LL | |\n+LL | |     where\n+LL | |         PrivTy:\n+   | |_______________^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n+  --> $DIR/where-priv-type.rs:80:5\n+   |\n+LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+...\n+LL | const fn my_const_fn(val: u8) -> u8 {\n+   | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n+\n+error: aborting due to 2 previous errors; 4 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0446`."}, {"sha": "87c211df16937d35ac5f1fc753f87026945e01c8", "filename": "src/test/ui/privacy/where-pub-type-impls-priv-trait.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,56 @@\n+// priv-in-pub lint tests where the private trait bounds a public type\n+\n+#![crate_type = \"lib\"]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+\n+struct PrivTy;\n+trait PrivTr {}\n+pub struct PubTy;\n+pub struct PubTyGeneric<T>(T);\n+pub trait PubTr {}\n+impl PubTr for PrivTy {}\n+impl PrivTr for PubTy {}\n+pub trait PubTrWithAssocTy { type AssocTy; }\n+impl PubTrWithAssocTy for PrivTy { type AssocTy = PrivTy; }\n+\n+\n+pub struct S\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+pub enum E\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+pub fn f()\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{}\n+\n+\n+impl S\n+//~^ ERROR private trait `PrivTr` in public interface\n+where\n+    PubTy: PrivTr\n+{\n+    pub fn f()\n+    //~^ ERROR private trait `PrivTr` in public interface\n+    where\n+        PubTy: PrivTr\n+    {}\n+}\n+\n+\n+impl PubTr for PubTy\n+where\n+    PubTy: PrivTr\n+{}"}, {"sha": "9ce7b9a139f5e7b29f0029351f90fb44a37f72e3", "filename": "src/test/ui/privacy/where-pub-type-impls-priv-trait.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,68 @@\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:19:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub struct S\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+LL | | {}\n+   | |__^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:26:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub enum E\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+LL | | {}\n+   | |__^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:33:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / pub fn f()\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+   | |_________________^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:40:1\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | / impl S\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+...  |\n+LL | |     {}\n+LL | | }\n+   | |_^ can't leak private trait\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:45:5\n+   |\n+LL |   trait PrivTr {}\n+   |   ------------ `PrivTr` declared as private\n+...\n+LL | /     pub fn f()\n+LL | |\n+LL | |     where\n+LL | |         PubTy: PrivTr\n+   | |_____________________^ can't leak private trait\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0445`."}, {"sha": "f1a54ee5867c59feb9a64ddabc199f513c578e09", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/issue-92010-trait-bound-not-satisfied.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.rs?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,12 @@\n+#[derive(Clone)]\n+struct P<T> {\n+    x: T,\n+    y: f64,\n+}\n+\n+impl<T> P<T> {\n+    fn y(&self, y: f64) -> Self { P{y, .. self.clone() } }\n+                                       //~^ mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "5957ea7c9efdd8c9d2551c16c502f52cfc73003b", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/issue-92010-trait-bound-not-satisfied.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee34f355101db4d7a97455589c9dbc335d7a963/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr?ref=4ee34f355101db4d7a97455589c9dbc335d7a963", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-92010-trait-bound-not-satisfied.rs:8:43\n+   |\n+LL |     fn y(&self, y: f64) -> Self { P{y, .. self.clone() } }\n+   |                                           ^^^^^^^^^^^^ expected struct `P`, found `&P<T>`\n+   |\n+   = note: expected struct `P<T>`\n+           found reference `&P<T>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}