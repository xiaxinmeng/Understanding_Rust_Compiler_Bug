{"sha": "ddfe82a466bbfe586f4ef64635ea51269b74a58e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZmU4MmE0NjZiYmZlNTg2ZjRlZjY0NjM1ZWE1MTI2OWI3NGE1OGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-07T04:22:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-08T01:05:58Z"}, "message": "make rehashing more efficient by not re-allocating entries", "tree": {"sha": "f91c74c4bc7437d95ac0971c4441ed81cfc00442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91c74c4bc7437d95ac0971c4441ed81cfc00442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddfe82a466bbfe586f4ef64635ea51269b74a58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfe82a466bbfe586f4ef64635ea51269b74a58e", "html_url": "https://github.com/rust-lang/rust/commit/ddfe82a466bbfe586f4ef64635ea51269b74a58e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddfe82a466bbfe586f4ef64635ea51269b74a58e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729345cb97f32839bd00cb2546314865cb2a9964", "url": "https://api.github.com/repos/rust-lang/rust/commits/729345cb97f32839bd00cb2546314865cb2a9964", "html_url": "https://github.com/rust-lang/rust/commit/729345cb97f32839bd00cb2546314865cb2a9964"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "3d29d5d7ea30d01c658365c2fc6de3866ee67784", "filename": "src/libstd/map.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ddfe82a466bbfe586f4ef64635ea51269b74a58e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfe82a466bbfe586f4ef64635ea51269b74a58e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=ddfe82a466bbfe586f4ef64635ea51269b74a58e", "patch": "@@ -125,21 +125,20 @@ mod chained {\n     };\n \n     tag search_result<copy K, copy V> {\n-        not_found(uint);\n+        not_found;\n         found_first(uint, @entry<K,V>);\n         found_after(@entry<K,V>, @entry<K,V>);\n     }\n \n     fn search_rem<copy K, copy V>(tbl: t<K,V>,\n                                   k: K,\n                                   h: uint,\n-                                  idx: uint,\n                                   e_root: @entry<K,V>) -> search_result<K,V> {\n         let e0 = e_root;\n         while true {\n             alt e0.next {\n               absent. {\n-                ret not_found(idx);\n+                ret not_found;\n               }\n               present(e1) {\n                 let e1_key = e1.key; // Satisfy alias checker.\n@@ -161,23 +160,25 @@ mod chained {\n \n         alt tbl.chains[idx] {\n           absent. {\n-            ret not_found(idx);\n+            ret not_found;\n           }\n           present(e) {\n             let e_key = e.key; // Satisfy alias checker.\n             if e.hash == h && tbl.eqer(e_key, k) {\n                 ret found_first(idx, e);\n             } else {\n-                ret search_rem(tbl, k, h, idx, e);\n+                ret search_rem(tbl, k, h, e);\n             }\n           }\n         }\n     }\n \n-    fn insert_h<copy K, copy V>(tbl: t<K,V>, k: K, v: V, hash: uint) -> bool {\n-        // internal routine: does not update size\n+    fn insert<copy K, copy V>(tbl: t<K,V>, k: K, v: V) -> bool {\n+        let hash = tbl.hasher(k);\n         alt search_tbl(tbl, k, hash) {\n-          not_found(idx) {\n+          not_found. {\n+            tbl.size += 1u;\n+            let idx = hash % vec::len(tbl.chains);\n             let old_chain = tbl.chains[idx];\n             tbl.chains[idx] = present(@{\n                 hash: hash,\n@@ -197,14 +198,9 @@ mod chained {\n         }\n     }\n \n-    fn insert<copy K, copy V>(tbl: t<K,V>, k: K, v: V) -> bool {\n-        tbl.size += 1u;\n-        ret insert_h(tbl, k, v, tbl.hasher(k));\n-    }\n-\n     fn get<copy K, copy V>(tbl: t<K,V>, k: K) -> option::t<V> {\n         alt search_tbl(tbl, k, tbl.hasher(k)) {\n-          not_found(_) {\n+          not_found. {\n             ret option::none;\n           }\n \n@@ -220,7 +216,7 @@ mod chained {\n \n     fn remove<copy K, copy V>(tbl: t<K,V>, k: K) -> option::t<V> {\n         alt search_tbl(tbl, k, tbl.hasher(k)) {\n-          not_found(_) {\n+          not_found. {\n             ret option::none;\n           }\n \n@@ -247,8 +243,9 @@ mod chained {\n             alt chain {\n               absent. { ret; }\n               present(entry) {\n-                blk(entry);\n-                chain = entry.next;\n+                let next = entry.next;\n+                blk(entry); // may modify entry.next!\n+                chain = next;\n               }\n             }\n         }\n@@ -269,7 +266,9 @@ mod chained {\n         let n_new_chains: uint = uint::next_power_of_two(n_old_chains + 1u);\n         tbl.chains = chains(n_new_chains);\n         foreach_chain(old_chains) { |entry|\n-            insert_h(tbl, entry.key, entry.value, entry.hash);\n+            let idx = entry.hash % n_new_chains;\n+            entry.next = tbl.chains[idx];\n+            tbl.chains[idx] = present(entry);\n         }\n     }\n "}]}