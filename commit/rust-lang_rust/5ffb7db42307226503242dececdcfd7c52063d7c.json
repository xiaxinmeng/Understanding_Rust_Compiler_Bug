{"sha": "5ffb7db42307226503242dececdcfd7c52063d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZmI3ZGI0MjMwNzIyNjUwMzI0MmRlY2VjZGNmZDdjNTIwNjNkN2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T18:44:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T18:55:34Z"}, "message": "Add `Gated` attribute type", "tree": {"sha": "c1a0a429a6b0eb61f2d87601a1e84beca164ac52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a0a429a6b0eb61f2d87601a1e84beca164ac52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffb7db42307226503242dececdcfd7c52063d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffb7db42307226503242dececdcfd7c52063d7c", "html_url": "https://github.com/rust-lang/rust/commit/5ffb7db42307226503242dececdcfd7c52063d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffb7db42307226503242dececdcfd7c52063d7c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5c3194c5998a229e869a0c1f85e1a4a0dff5ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c3194c5998a229e869a0c1f85e1a4a0dff5ecb", "html_url": "https://github.com/rust-lang/rust/commit/d5c3194c5998a229e869a0c1f85e1a4a0dff5ecb"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "b1eb4f01d84daed14fc45c573d4cc230163962dc", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ffb7db42307226503242dececdcfd7c52063d7c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffb7db42307226503242dececdcfd7c52063d7c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5ffb7db42307226503242dececdcfd7c52063d7c", "patch": "@@ -642,8 +642,12 @@ impl LintPass for UnusedAttributes {\n \n     fn check_attribute(&mut self, cx: &Context, attr: &ast::Attribute) {\n         for &(ref name, ty) in KNOWN_ATTRIBUTES {\n-            if ty == AttributeType::Whitelisted && attr.check_name(name) {\n-                break;\n+            match ty {\n+                AttributeType::Whitelisted\n+                | AttributeType::Gated(_, _) if attr.check_name(name) => {\n+                    break;\n+                },\n+                _ => ()\n             }\n         }\n "}, {"sha": "6ef20a6a62b33ba2d5722b5daa66fedf2ef477d0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5ffb7db42307226503242dececdcfd7c52063d7c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffb7db42307226503242dececdcfd7c52063d7c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5ffb7db42307226503242dececdcfd7c52063d7c", "patch": "@@ -166,20 +166,17 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n \n     (\"macro_reexport\", Normal),\n     (\"macro_use\", Normal),\n-    (\"plugin\", Normal),\n     (\"macro_export\", Normal),\n     (\"plugin_registrar\", Normal),\n \n     (\"cfg\", Normal),\n     (\"main\", Normal),\n-    (\"lang\", Normal),\n     (\"start\", Normal),\n     (\"test\", Normal),\n     (\"bench\", Normal),\n     (\"simd\", Normal),\n     (\"repr\", Normal),\n     (\"path\", Normal),\n-    (\"staged_api\", Normal),\n     (\"abi\", Normal),\n     (\"rustc_move_fragments\", Normal),\n     (\"rustc_variance\", Normal),\n@@ -195,6 +192,17 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"link_args\", Normal),\n     (\"macro_escape\", Normal),\n \n+\n+    (\"staged_api\", Gated(\"staged_api\",\n+                         \"staged_api is for use by rustc only\")),\n+    (\"plugin\", Gated(\"plugin\",\n+                     \"compiler plugins are experimental \\\n+                      and possibly buggy\")),\n+    (\"no_std\", Gated(\"no_std\",\n+                     \"no_std is experimental\")),\n+    (\"lang\", Gated(\"lang_items\",\n+                     \"language items are subject to change\")),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\"doc\", Whitelisted),\n \n@@ -242,7 +250,6 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"feature\", CrateLevel),\n     (\"no_start\", CrateLevel),\n     (\"no_main\", CrateLevel),\n-    (\"no_std\", CrateLevel),\n     (\"no_builtins\", CrateLevel),\n     (\"recursion_limit\", CrateLevel),\n ];\n@@ -258,6 +265,10 @@ pub enum AttributeType {\n     /// will be ignored by the unused_attribute lint\n     Whitelisted,\n \n+    /// Is gated by a given feature gate and reason\n+    /// These get whitelisted too\n+    Gated(&'static str, &'static str),\n+\n     /// Builtin attribute that is only allowed at the crate level\n     CrateLevel,\n }\n@@ -573,33 +584,22 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        match &*attr.name() {\n-            \"staged_api\" => self.gate_feature(\"staged_api\", attr.span,\n-                                              \"staged_api is for use by rustc only\"),\n-            \"plugin\" => self.gate_feature(\"plugin\", attr.span,\n-                                          \"compiler plugins are experimental \\\n-                                           and possibly buggy\"),\n-            \"no_std\" => self.gate_feature(\"no_std\", attr.span,\n-                                          \"no_std is experimental\"),\n-            \"unsafe_no_drop_flag\" => self.gate_feature(\"unsafe_no_drop_flag\", attr.span,\n-                                                       \"unsafe_no_drop_flag has unstable \\\n-                                                        semantics and may be removed \\\n-                                                        in the future\"),\n-            \"lang\" => self.gate_feature(\"lang_items\",\n-                                        attr.span,\n-                                        \"language items are subject to change\"),\n-            name => {\n-                // Custom attribute check\n-                if KNOWN_ATTRIBUTES.iter().all(|&(n, _)| n != name) {\n-                    self.gate_feature(\"custom_attribute\", attr.span,\n-                               format!(\"The attribute `{}` is currently \\\n-                                        unknown to the the compiler and \\\n-                                        may have meaning \\\n-                                        added to it in the future\",\n-                                        attr.name()).as_slice());\n+        let name = &*attr.name();\n+        for &(n, ty) in KNOWN_ATTRIBUTES {\n+            if n == name {\n+                if let Gated(gate, desc) = ty {\n+                    self.gate_feature(gate, attr.span, desc);\n                 }\n+                return;\n             }\n+            \n         }\n+        self.gate_feature(\"custom_attribute\", attr.span,\n+                   format!(\"The attribute `{}` is currently \\\n+                            unknown to the the compiler and \\\n+                            may have meaning \\\n+                            added to it in the future\",\n+                            name).as_slice());\n     }\n \n     fn visit_pat(&mut self, pattern: &ast::Pat) {"}]}