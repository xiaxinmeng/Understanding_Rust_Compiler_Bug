{"sha": "1e0fbbd721e797e49fa0f7dfa9aa1591b324daca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMGZiYmQ3MjFlNzk3ZTQ5ZmEwZjdkZmE5YWExNTkxYjMyNGRhY2E=", "commit": {"author": {"name": "Boris Egorov", "email": "egorov@linux.com", "date": "2015-10-07T17:37:24Z"}, "committer": {"name": "Boris Egorov", "email": "egorov@linux.com", "date": "2015-10-07T17:57:52Z"}, "message": "trpl: Fix some bad wording in iterators subsection", "tree": {"sha": "0638ab404f521bee4bc90d5502e4dd915472d3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0638ab404f521bee4bc90d5502e4dd915472d3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca", "html_url": "https://github.com/rust-lang/rust/commit/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca/comments", "author": {"login": "JIghtuse", "id": 908960, "node_id": "MDQ6VXNlcjkwODk2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/908960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JIghtuse", "html_url": "https://github.com/JIghtuse", "followers_url": "https://api.github.com/users/JIghtuse/followers", "following_url": "https://api.github.com/users/JIghtuse/following{/other_user}", "gists_url": "https://api.github.com/users/JIghtuse/gists{/gist_id}", "starred_url": "https://api.github.com/users/JIghtuse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JIghtuse/subscriptions", "organizations_url": "https://api.github.com/users/JIghtuse/orgs", "repos_url": "https://api.github.com/users/JIghtuse/repos", "events_url": "https://api.github.com/users/JIghtuse/events{/privacy}", "received_events_url": "https://api.github.com/users/JIghtuse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JIghtuse", "id": 908960, "node_id": "MDQ6VXNlcjkwODk2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/908960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JIghtuse", "html_url": "https://github.com/JIghtuse", "followers_url": "https://api.github.com/users/JIghtuse/followers", "following_url": "https://api.github.com/users/JIghtuse/following{/other_user}", "gists_url": "https://api.github.com/users/JIghtuse/gists{/gist_id}", "starred_url": "https://api.github.com/users/JIghtuse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JIghtuse/subscriptions", "organizations_url": "https://api.github.com/users/JIghtuse/orgs", "repos_url": "https://api.github.com/users/JIghtuse/repos", "events_url": "https://api.github.com/users/JIghtuse/events{/privacy}", "received_events_url": "https://api.github.com/users/JIghtuse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba0c48b7975501bb220afe8dea4163de5d2187e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba0c48b7975501bb220afe8dea4163de5d2187e", "html_url": "https://github.com/rust-lang/rust/commit/2ba0c48b7975501bb220afe8dea4163de5d2187e"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3350df4ff7f18031f2332630427d657272ada092", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e0fbbd721e797e49fa0f7dfa9aa1591b324daca/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=1e0fbbd721e797e49fa0f7dfa9aa1591b324daca", "patch": "@@ -42,12 +42,12 @@ loop is just a handy way to write this `loop`/`match`/`break` construct.\n `for` loops aren't the only thing that uses iterators, however. Writing your\n own iterator involves implementing the `Iterator` trait. While doing that is\n outside of the scope of this guide, Rust provides a number of useful iterators\n-to accomplish various tasks. Before we talk about those, we should talk about a\n-Rust anti-pattern. And that's using ranges like this.\n+to accomplish various tasks. But first, a few notes about limitations of ranges.\n \n-Yes, we just talked about how ranges are cool. But ranges are also very\n-primitive. For example, if you needed to iterate over the contents of a vector,\n-you may be tempted to write this:\n+Ranges are very primitive, and we often can use better alternatives. Consider\n+following Rust anti-pattern: using ranges to emulate a C-style `for` loop. Let\u2019s\n+suppose you needed to iterate over the contents of a vector. You may be tempted\n+to write this:\n \n ```rust\n let nums = vec![1, 2, 3];\n@@ -281,8 +281,8 @@ If you are trying to execute a closure on an iterator for its side effects,\n just use `for` instead.\n \n There are tons of interesting iterator adapters. `take(n)` will return an\n-iterator over the next `n` elements of the original iterator. Let's try it out with our infinite\n-iterator from before:\n+iterator over the next `n` elements of the original iterator. Let's try it out\n+with an infinite iterator:\n \n ```rust\n for i in (1..).take(5) {"}]}