{"sha": "726a2aa211974a6bb1a612fe8824df7baf59faf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNmEyYWEyMTE5NzRhNmJiMWE2MTJmZTg4MjRkZjdiYWY1OWZhZjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-14T18:31:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-14T18:31:59Z"}, "message": "Merge #10240\n\n10240: internal: Revert attributed items inlay hints r=Veykril a=Veykril\n\nReverts #10231 as the implementation there is actually wrong\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "512203db9ce4c0d29cdd2c69aed3aeeddfdc3944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512203db9ce4c0d29cdd2c69aed3aeeddfdc3944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726a2aa211974a6bb1a612fe8824df7baf59faf6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQOqfCRBK7hj4Ov3rIwAAQa8IABWykaxO2SKcPTZJC33fu8Cv\nxcvfTBjyBD78hC5kXYGYoUAqDF6qIBEsWvXeU5SW/HLSrwWTrTzZbvACzT6b4A8T\nA3l4OMDfP7/YUrFSBcVYWkhLSzMNZSCAFlLX/p+AIl4xFIJKCYu4WISr/27WSyc7\nKTxrmU7UxVPvqT4oyYyG73iRsQSHFXZRPqStvA+RPkAefVAq+/NVj3lvNxpw/SrN\nRuV1D+/H63h8l3BF/MVpFh6JMsl4UGf7CgwxRW7LKLLXRtLvpR7BPZNs+5ugkzsm\nCFP2mto6pI+YqGhlEmwtafeB+tHc3kOP/x4voptPg3kZmFgRvJr16zuxeDUgbwU=\n=9tg9\n-----END PGP SIGNATURE-----\n", "payload": "tree 512203db9ce4c0d29cdd2c69aed3aeeddfdc3944\nparent 62288f57cbf58dc6ba711bafc35ce0eef6b74b28\nparent 64fb7be2470f3743acc7e492e65c354ba0caee2a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631644319 +0000\ncommitter GitHub <noreply@github.com> 1631644319 +0000\n\nMerge #10240\n\n10240: internal: Revert attributed items inlay hints r=Veykril a=Veykril\n\nReverts #10231 as the implementation there is actually wrong\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726a2aa211974a6bb1a612fe8824df7baf59faf6", "html_url": "https://github.com/rust-lang/rust/commit/726a2aa211974a6bb1a612fe8824df7baf59faf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726a2aa211974a6bb1a612fe8824df7baf59faf6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62288f57cbf58dc6ba711bafc35ce0eef6b74b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/62288f57cbf58dc6ba711bafc35ce0eef6b74b28", "html_url": "https://github.com/rust-lang/rust/commit/62288f57cbf58dc6ba711bafc35ce0eef6b74b28"}, {"sha": "64fb7be2470f3743acc7e492e65c354ba0caee2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fb7be2470f3743acc7e492e65c354ba0caee2a", "html_url": "https://github.com/rust-lang/rust/commit/64fb7be2470f3743acc7e492e65c354ba0caee2a"}], "stats": {"total": 111, "additions": 13, "deletions": 98}, "files": [{"sha": "04201a0df65bdad6af77e02080a88861042b8963", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/726a2aa211974a6bb1a612fe8824df7baf59faf6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726a2aa211974a6bb1a612fe8824df7baf59faf6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=726a2aa211974a6bb1a612fe8824df7baf59faf6", "patch": "@@ -184,14 +184,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_into_macros(token)\n     }\n \n-    pub fn descend_node_at_offset<N: ast::AstNode>(\n-        &self,\n-        node: &SyntaxNode,\n-        offset: TextSize,\n-    ) -> Option<N> {\n-        self.imp.descend_node_at_offset(node, offset).flatten().find_map(N::cast)\n-    }\n-\n     pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n         self.imp.find_file(syntax_node.clone()).file_id\n     }"}, {"sha": "9df56afb92b0ffd230ac746bfac62cac6c50e247", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 90, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/726a2aa211974a6bb1a612fe8824df7baf59faf6/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726a2aa211974a6bb1a612fe8824df7baf59faf6/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=726a2aa211974a6bb1a612fe8824df7baf59faf6", "patch": "@@ -62,38 +62,24 @@ pub(crate) fn inlay_hints(\n     let _p = profile::span(\"inlay_hints\");\n     let sema = Semantics::new(db);\n     let file = sema.parse(file_id);\n+    let file = file.syntax();\n \n     let mut res = Vec::new();\n-    let mut queue = vec![file.syntax().preorder()];\n \n-    while let Some(mut preorder) = queue.pop() {\n-        while let Some(event) = preorder.next() {\n-            let node = match event {\n-                syntax::WalkEvent::Enter(node) => node,\n-                syntax::WalkEvent::Leave(_) => continue,\n-            };\n-            if let Some(node) =\n-                ast::Item::cast(node.clone()).and_then(|item| sema.expand_attr_macro(&item))\n-            {\n-                preorder.skip_subtree();\n-                queue.push(node.preorder());\n-                continue;\n-            }\n-\n-            if let Some(expr) = ast::Expr::cast(node.clone()) {\n-                get_chaining_hints(&mut res, &sema, config, &expr);\n-                match expr {\n-                    ast::Expr::CallExpr(it) => {\n-                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n-                    }\n-                    ast::Expr::MethodCallExpr(it) => {\n-                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n-                    }\n-                    _ => (),\n+    for node in file.descendants() {\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            get_chaining_hints(&mut res, &sema, config, &expr);\n+            match expr {\n+                ast::Expr::CallExpr(it) => {\n+                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n+                }\n+                ast::Expr::MethodCallExpr(it) => {\n+                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n                 }\n-            } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n-                get_bind_pat_hints(&mut res, &sema, config, it);\n+                _ => (),\n             }\n+        } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n+            get_bind_pat_hints(&mut res, &sema, config, it);\n         }\n     }\n     res\n@@ -1485,67 +1471,4 @@ fn main() {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn hints_in_attr_call() {\n-        // chaining hints do not currently work as macros lose all whitespace information\n-        check_expect(\n-            TEST_CONFIG,\n-            r#\"\n-//- proc_macros: identity, input_replace\n-struct Struct;\n-impl Struct {\n-    fn chain(self) -> Self {\n-        self\n-    }\n-}\n-\n-#[proc_macros::identity]\n-fn main() {\n-    let strukt = Struct;\n-    strukt\n-        .chain()\n-        .chain()\n-        .chain();\n-    Struct::chain(strukt);\n-}\n-\n-#[proc_macros::input_replace(\n-    fn not_main() {\n-        let strukt = Struct;\n-        strukt\n-            .chain()\n-            .chain()\n-            .chain();\n-        Struct::chain(strukt);\n-    }\n-)]\n-fn main() {}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 297..303,\n-                        kind: TypeHint,\n-                        label: \"Struct\",\n-                    },\n-                    InlayHint {\n-                        range: 415..421,\n-                        kind: ParameterHint,\n-                        label: \"self\",\n-                    },\n-                    InlayHint {\n-                        range: 125..131,\n-                        kind: TypeHint,\n-                        label: \"Struct\",\n-                    },\n-                    InlayHint {\n-                        range: 223..229,\n-                        kind: ParameterHint,\n-                        label: \"self\",\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n }"}]}