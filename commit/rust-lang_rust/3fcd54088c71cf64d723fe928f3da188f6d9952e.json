{"sha": "3fcd54088c71cf64d723fe928f3da188f6d9952e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmY2Q1NDA4OGM3MWNmNjRkNzIzZmU5MjhmM2RhMTg4ZjZkOTk1MmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-20T08:40:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-20T08:40:08Z"}, "message": "Implement saturating_{add,sub} intrinsics", "tree": {"sha": "6727ffc549176f3c4a21e1cf5174875857ed4dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6727ffc549176f3c4a21e1cf5174875857ed4dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fcd54088c71cf64d723fe928f3da188f6d9952e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcd54088c71cf64d723fe928f3da188f6d9952e", "html_url": "https://github.com/rust-lang/rust/commit/3fcd54088c71cf64d723fe928f3da188f6d9952e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fcd54088c71cf64d723fe928f3da188f6d9952e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99d31dbfedd10ed3bb66bea1184065bd841f44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99d31dbfedd10ed3bb66bea1184065bd841f44c", "html_url": "https://github.com/rust-lang/rust/commit/f99d31dbfedd10ed3bb66bea1184065bd841f44c"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "26289818896e38173b3ce2f27fb393d22762ad0d", "filename": "example/std_example.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fcd54088c71cf64d723fe928f3da188f6d9952e/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcd54088c71cf64d723fe928f3da188f6d9952e/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=3fcd54088c71cf64d723fe928f3da188f6d9952e", "patch": "@@ -38,6 +38,11 @@ fn main() {\n     assert_eq!(2.3f32.copysign(-1.0), -2.3f32);\n     println!(\"{}\", 2.3f32.powf(2.0));\n \n+    assert_eq!(-128i8, (-128i8).saturating_sub(1));\n+    assert_eq!(127i8, 127i8.saturating_sub(-128));\n+    assert_eq!(-128i8, (-128i8).saturating_add(-128));\n+    assert_eq!(127i8, 127i8.saturating_add(1));\n+\n     assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n     assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n "}, {"sha": "2cec9c57143f96caadd1e74959db2b19652ad19f", "filename": "src/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fcd54088c71cf64d723fe928f3da188f6d9952e/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcd54088c71cf64d723fe928f3da188f6d9952e/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=3fcd54088c71cf64d723fe928f3da188f6d9952e", "patch": "@@ -487,8 +487,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n             );\n             ret.write_cvalue(fx, res);\n         };\n-        _ if intrinsic.starts_with(\"saturating_\"), <T> (c x, c y) {\n-            assert_eq!(x.layout().ty, y.layout().ty);\n+        _ if intrinsic.starts_with(\"saturating_\"), <T> (c lhs, c rhs) {\n+            assert_eq!(lhs.layout().ty, rhs.layout().ty);\n             let bin_op = match intrinsic {\n                 \"saturating_add\" => BinOp::Add,\n                 \"saturating_sub\" => BinOp::Sub,\n@@ -500,8 +500,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let checked_res = crate::num::trans_checked_int_binop(\n                 fx,\n                 bin_op,\n-                x,\n-                y,\n+                lhs,\n+                rhs,\n             );\n \n             let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n@@ -517,8 +517,18 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let val = match (intrinsic, signed) {\n                 (\"saturating_add\", false) => codegen_select(&mut fx.bcx, has_overflow, max, val),\n                 (\"saturating_sub\", false) => codegen_select(&mut fx.bcx, has_overflow, min, val),\n-                (\"saturating_add\", true) => unimplemented!(),\n-                (\"saturating_sub\", true) => unimplemented!(),\n+                (\"saturating_add\", true) => {\n+                    let rhs = rhs.load_scalar(fx);\n+                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let sat_val = codegen_select(&mut fx.bcx, rhs_ge_zero, max, min);\n+                    codegen_select(&mut fx.bcx, has_overflow, sat_val, val)\n+                }\n+                (\"saturating_sub\", true) => {\n+                    let rhs = rhs.load_scalar(fx);\n+                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let sat_val = codegen_select(&mut fx.bcx, rhs_ge_zero, min, max);\n+                    codegen_select(&mut fx.bcx, has_overflow, sat_val, val)\n+                }\n                 _ => unreachable!(),\n             };\n "}]}