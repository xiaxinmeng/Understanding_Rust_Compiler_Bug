{"sha": "c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OGE3NmUzN2I4NjlkNmNhMzQzYzZiYTVkOWYwYzY1ZGVkZGJjYTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-06T10:31:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T18:51:07Z"}, "message": "WIP bless test and compare-mode=nll", "tree": {"sha": "511cd522682613cbd9a30745a869dd94648c6063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511cd522682613cbd9a30745a869dd94648c6063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "html_url": "https://github.com/rust-lang/rust/commit/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93e29823a9eb8de01c33fe48e9f47caf822a2fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/93e29823a9eb8de01c33fe48e9f47caf822a2fda", "html_url": "https://github.com/rust-lang/rust/commit/93e29823a9eb8de01c33fe48e9f47caf822a2fda"}], "stats": {"total": 287, "additions": 186, "deletions": 101}, "files": [{"sha": "4fc336122fa9dd5c2530cc2bdadc1f4c7efc5963", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,26 +1,26 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:55:4\n+  --> $DIR/project-fn-ret-invariant.rs:56:5\n    |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              -- -- lifetime `'b` defined here\n+LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              --  -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n ...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+LL |     (a, b)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:55:4\n+  --> $DIR/project-fn-ret-invariant.rs:56:5\n    |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              -- -- lifetime `'b` defined here\n+LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              --  -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n ...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+LL |     (a, b)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "44850df7b2f42ce9e0d8c0d011f032a915648453", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,26 +1,26 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:38:12\n+  --> $DIR/project-fn-ret-invariant.rs:39:13\n    |\n-LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        -- -- lifetime `'b` defined here\n+LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n-LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |    let a = bar(f, x);\n-   |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |     let a = bar(f, x);\n+   |             ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:39:12\n+  --> $DIR/project-fn-ret-invariant.rs:40:13\n    |\n-LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        -- -- lifetime `'b` defined here\n+LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n-LL |    let b = bar(f, y);\n-   |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+LL |     let b = bar(f, y);\n+   |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "db82c9fd43794e359691bcbbf81b7a99aec684f5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,11 +1,11 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:48:4\n+  --> $DIR/project-fn-ret-invariant.rs:49:5\n    |\n-LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |        -- lifetime `'a` defined here\n ...\n-LL |    bar(foo, x)\n-   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     bar(foo, x)\n+   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n "}, {"sha": "64a0b52a1fac5c9090717ce98a7f53268e30cf94", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,42 +1,43 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:30:5\n+error: lifetime may not live long enough\n+  --> $DIR/expect-fn-supply-fn.rs:16:49\n    |\n-LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-   |    ------------------------------------------ required by a bound in this\n-LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n+LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n+   |                                    -- lifetime `'x` defined here\n ...\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n+   |                                                 ^\n+   |                                                 |\n+   |                                                 has type `fn(&'1 u32)`\n+   |                                                 requires that `'1` must outlive `'x`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:37:5\n+error: lifetime may not live long enough\n+  --> $DIR/expect-fn-supply-fn.rs:16:49\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n+LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n+   |                                    -- lifetime `'x` defined here\n ...\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n+   |                                                 ^ requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/expect-fn-supply-fn.rs:32:49\n+   |\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |                                                 ^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/expect-fn-supply-fn.rs:39:50\n+   |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                  ^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:46:5\n+error: higher-ranked subtype error\n+  --> $DIR/expect-fn-supply-fn.rs:48:50\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n-...\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                  ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0631`."}, {"sha": "49271edf8e5e4bd42cd24663d613716ee55e1a73", "filename": "src/test/ui/coherence/coherence-fn-covariant-bound-vs-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`:\n-  --> $DIR/coherence-fn-covariant-bound-vs-static.rs:14:1\n+  --> $DIR/coherence-fn-covariant-bound-vs-static.rs:17:1\n    |\n LL | impl Trait for for<'r> fn(fn(&'r ())) {}\n    | ------------------------------------- first implementation here"}, {"sha": "a3e7f0bcde376f7af6153cd8b2e0e84d27f0dd7d", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,5 +1,5 @@\n error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`:\n-  --> $DIR/coherence-fn-implied-bounds.rs:9:1\n+  --> $DIR/coherence-fn-implied-bounds.rs:21:1\n    |\n LL | impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}\n    | ------------------------------------------------------------------ first implementation here\n@@ -8,7 +8,7 @@ LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n    |\n note: the lint level is defined here\n-  --> $DIR/coherence-fn-implied-bounds.rs:3:9\n+  --> $DIR/coherence-fn-implied-bounds.rs:15:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "af5cf41be0a48f279b49f81e9961cd5cbf91785c", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,33 +1,33 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:33:13\n+  --> $DIR/hr-subtype.rs:39:13\n    |\n-LL |           fn subtype<'x,'y:'x,'z:'y>() {\n-   |                      -- -- lifetime `'y` defined here\n+LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n+   |                      --  -- lifetime `'y` defined here\n    |                      |\n    |                      lifetime `'x` defined here\n LL |               gimme::<$t2>(None::<$t1>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | |                                     fn(Inv<'y>)) }\n-   | |__________________________________________________- in this macro invocation\n+LL | | fn(Inv<'y>)) }\n+   | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:39:13\n+  --> $DIR/hr-subtype.rs:45:13\n    |\n-LL |           fn supertype<'x,'y:'x,'z:'y>() {\n-   |                        -- -- lifetime `'y` defined here\n+LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n+   |                        --  -- lifetime `'y` defined here\n    |                        |\n    |                        lifetime `'x` defined here\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | |                                     fn(Inv<'y>)) }\n-   | |__________________________________________________- in this macro invocation\n+LL | | fn(Inv<'y>)) }\n+   | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "75d7e0e46b72a75d25055944a0af69b368d81a7f", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,16 +1,16 @@\n error: lifetime may not live long enough\n-  --> $DIR/hr-subtype.rs:39:13\n+  --> $DIR/hr-subtype.rs:45:13\n    |\n-LL |           fn supertype<'x,'y:'x,'z:'y>() {\n-   |                        -- -- lifetime `'y` defined here\n+LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n+   |                        --  -- lifetime `'y` defined here\n    |                        |\n    |                        lifetime `'x` defined here\n LL |               gimme::<$t1>(None::<$t2>);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n-LL | |                             fn(&'y u32)) }\n-   | |__________________________________________- in this macro invocation\n+LL | | fn(&'y u32)) }\n+   | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "695f5506d5e38aadb36977a37f8e02c128ef450d", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,14 +1,40 @@\n-error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n+error: lifetime may not live long enough\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:8:5\n+   |\n+LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     // Illegal now because there is no `'b:'a` declaration.\n+LL |     *x = *y;\n+   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:14:5\n+   |\n+LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |     a(x, y);\n+   |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:12\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+LL |     let _: fn(&mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "a28f7aa3e08ca73b14f95ae8b84d032875f333cd", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,14 +1,46 @@\n-error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:9:5\n+   |\n+LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     // Illegal now because there is no `'b:'a` declaration.\n+LL |     *x = *y;\n+   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:5\n+   |\n+LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |     a(x, y, z);\n+   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            -----------------------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:12\n+   |\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "37f7fcf2e331a882e5a4e2594f7c14a5d1454f50", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,14 +1,40 @@\n-error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n+error: lifetime may not live long enough\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:8:5\n+   |\n+LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     // Illegal now because there is no `'b:'a` declaration.\n+LL |     *x = *y;\n+   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:14:5\n+   |\n+LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |     a(x, y);\n+   |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:12\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n-   |            |\n-   |            expected due to this\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:12\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+LL |     let _: fn(&mut &isize, &mut &isize) = a;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}]}