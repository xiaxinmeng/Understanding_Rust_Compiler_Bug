{"sha": "de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWM2ZWMxZjRhNmJiZDg2MDBmZGEwZTdjMTU3NGQ5MTRhYzM1YmQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-29T14:38:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-06T20:56:03Z"}, "message": "Exit arm scopes correctly in the HIR CFG\n\nWhen a match evaluates to false we jump to the next arm, when we do so\nwe need to make sure that we exit the scope for that arm.", "tree": {"sha": "7f35c15a9f202554d9491e1b6a38782b7993dca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f35c15a9f202554d9491e1b6a38782b7993dca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "html_url": "https://github.com/rust-lang/rust/commit/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6f77f0d74934a95eb91d74bda19e5b0e8258e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6f77f0d74934a95eb91d74bda19e5b0e8258e3", "html_url": "https://github.com/rust-lang/rust/commit/db6f77f0d74934a95eb91d74bda19e5b0e8258e3"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "ca852fe7622cc1c78f70d12e82b6b7b661a5621a", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "patch": "@@ -371,7 +371,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         let expr_exit = self.add_ast_node(id, &[]);\n \n         // Keep track of the previous guard expressions\n-        let mut prev_guards = Vec::new();\n+        let mut prev_guard = None;\n+        let match_scope = region::Scope { id, data: region::ScopeData::Node };\n \n         for arm in arms {\n             // Add an exit node for when we've visited all the\n@@ -389,23 +390,23 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                     let guard_start = self.add_dummy_node(&[pat_exit]);\n                     // Visit the guard expression\n                     let guard_exit = match guard {\n-                        hir::Guard::If(ref e) => self.expr(e, guard_start),\n+                        hir::Guard::If(ref e) => (&**e, self.expr(e, guard_start)),\n                     };\n                     // #47295: We used to have very special case code\n                     // here for when a pair of arms are both formed\n                     // solely from constants, and if so, not add these\n                     // edges.  But this was not actually sound without\n                     // other constraints that we stopped enforcing at\n                     // some point.\n-                    while let Some(prev) = prev_guards.pop() {\n-                        self.add_contained_edge(prev, guard_start);\n+                    if let Some((prev_guard, prev_index)) = prev_guard.take() {\n+                        self.add_exiting_edge(prev_guard, prev_index, match_scope, guard_start);\n                     }\n \n                     // Push the guard onto the list of previous guards\n-                    prev_guards.push(guard_exit);\n+                    prev_guard = Some(guard_exit);\n \n                     // Update the exit node for the pattern\n-                    pat_exit = guard_exit;\n+                    pat_exit = guard_exit.1;\n                 }\n \n                 // Add an edge from the exit of this pattern to the"}, {"sha": "220b2ecf04d389150c91d2594bbcb3eb06c86ed6", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs?ref=de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let e: i32;\n+    match e {\n+        //~^ ERROR use of possibly uninitialized variable\n+        ref u if true => {}\n+        ref v if true => {\n+            let tx = 0;\n+            &tx;\n+        }\n+        _ => (),\n+    }\n+}"}, {"sha": "9701343d2b1dd15c536b1383ecb681ccddb480b4", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly uninitialized variable: `e`\n+  --> $DIR/issue-62107-match-arm-scopes.rs:3:11\n+   |\n+LL |     match e {\n+   |           ^ use of possibly uninitialized `e`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}]}