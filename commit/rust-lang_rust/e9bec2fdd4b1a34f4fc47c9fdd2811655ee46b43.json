{"sha": "e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "node_id": "C_kwDOAAsO6NoAKGU5YmVjMmZkZDRiMWEzNGY0ZmM0N2M5ZmRkMjgxMTY1NWVlNDZiNDM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-26T17:19:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-26T17:19:21Z"}, "message": "Rollup merge of #102273 - woppopo:relax_const_bound, r=fee1-dead\n\nAllow `~const` bounds on non-const functions\n\nMakes the behavior of bound of trait-associated functions and non-associated functions consistent.", "tree": {"sha": "fdbbdcb4c116b959c5c8b1db17857f857335b48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdbbdcb4c116b959c5c8b1db17857f857335b48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMd8ZCRBK7hj4Ov3rIwAArr4IAAsMPYWFqKrahIbbcel418ng\nO45KEpJPRIV9Oh6GzL4uI5BnTjpMzeYCZr91Ys9Rux+TMT6OghHmeoaSZv24vGsl\nJeHyfqQYAq1Xj8V0jbHJpfZvtJMCUbqF38zpSWiQ5H0PmuA9xoHIU+oPnH7/nErV\nUAUjcHrxpcT6x+NxfWqSEvIJ83Cbx0EgCbS9h0Djms3lh57pb/GCS4U8o8D11B0M\nZZqxnWqrWWX9S+ox21zG4r5ydWszALFAZmqzSMtAg2tnkBuFiqSJt3sTONct1XVb\ntNovhvO9aoWA8cabshKY9WUFmvlU6jYs+VVO3siSh8sbCuhSguFumOBtlcRtWtk=\n=9wde\n-----END PGP SIGNATURE-----\n", "payload": "tree fdbbdcb4c116b959c5c8b1db17857f857335b48f\nparent 0857ddeed6e2f9d00e79a8f1a1f9998520363b47\nparent e4b08ab241f19342400f7a1722de5e0d43cbe386\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664212761 +0200\ncommitter GitHub <noreply@github.com> 1664212761 +0200\n\nRollup merge of #102273 - woppopo:relax_const_bound, r=fee1-dead\n\nAllow `~const` bounds on non-const functions\n\nMakes the behavior of bound of trait-associated functions and non-associated functions consistent.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "html_url": "https://github.com/rust-lang/rust/commit/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0857ddeed6e2f9d00e79a8f1a1f9998520363b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/0857ddeed6e2f9d00e79a8f1a1f9998520363b47", "html_url": "https://github.com/rust-lang/rust/commit/0857ddeed6e2f9d00e79a8f1a1f9998520363b47"}, {"sha": "e4b08ab241f19342400f7a1722de5e0d43cbe386", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b08ab241f19342400f7a1722de5e0d43cbe386", "html_url": "https://github.com/rust-lang/rust/commit/e4b08ab241f19342400f7a1722de5e0d43cbe386"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "ecf74c7602027e370e2147f7bf6ef6ede56100ff", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "patch": "@@ -1415,7 +1415,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     if !self.is_tilde_const_allowed {\n                         self.err_handler()\n                             .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                            .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n+                            .note(\"only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\")\n                             .emit();\n                     }\n                 }\n@@ -1523,9 +1523,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             });\n         }\n \n-        let tilde_const_allowed =\n-            matches!(fk.header(), Some(FnHeader { constness: Const::Yes(_), .. }))\n-                || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n+        let tilde_const_allowed = matches!(fk.header(), Some(FnHeader { .. }))\n+            || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n \n         self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk));\n     }"}, {"sha": "b29b633cff644ad724b2c5af1c14ce42d7704b64", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs?ref=e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+#![feature(generic_arg_infer)]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+   fn add<A: ~const Add42>(self) -> Foo<{ A::add(N) }> {\n+      Foo\n+   }\n+}\n+\n+#[const_trait]\n+trait Add42 {\n+    fn add(a: usize) -> usize;\n+}\n+\n+impl const Add42 for () {\n+    fn add(a: usize) -> usize {\n+        a + 42\n+    }\n+}\n+\n+fn bar<A: ~const Add42, const N: usize>(_: Foo<N>) -> Foo<{ A::add(N) }> {\n+    Foo\n+}\n+\n+fn main() {\n+   let foo = Foo::<0>;\n+   let foo = bar::<(), _>(foo);\n+   let _foo = bar::<(), _>(foo);\n+}"}, {"sha": "350be4d8250d65e489aa37fb63430b49b377548f", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "patch": "@@ -17,12 +17,6 @@ fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n //~^ ERROR `~const` is not allowed\n \n-fn generic<P: ~const T>() {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn where_clause<P>() where P: ~const T {}\n-//~^ ERROR `~const` is not allowed\n-\n struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n "}, {"sha": "8d781d063d1c08fbe5c786e40aca10476978913a", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=e9bec2fdd4b1a34f4fc47c9fdd2811655ee46b43", "patch": "@@ -4,53 +4,37 @@ error: `~const` is not allowed here\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:11:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:14:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:17:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:20:15\n-   |\n-LL | fn generic<P: ~const T>() {}\n-   |               ^^^^^^^^\n-   |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:23:31\n-   |\n-LL | fn where_clause<P>() where P: ~const T {}\n-   |                               ^^^^^^^^\n-   |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:26:25\n+  --> $DIR/tilde-const-invalid-places.rs:20:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n "}]}