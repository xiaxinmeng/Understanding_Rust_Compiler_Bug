{"sha": "725ba9625eca99537cb0caf2998b363e784dd654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNWJhOTYyNWVjYTk5NTM3Y2IwY2FmMjk5OGIzNjNlNzg0ZGQ2NTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:20:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:28:48Z"}, "message": "Add Const kind to HIR\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "fabcad406ea537ff6133d94abc6dc18e2c9f86a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fabcad406ea537ff6133d94abc6dc18e2c9f86a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725ba9625eca99537cb0caf2998b363e784dd654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725ba9625eca99537cb0caf2998b363e784dd654", "html_url": "https://github.com/rust-lang/rust/commit/725ba9625eca99537cb0caf2998b363e784dd654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725ba9625eca99537cb0caf2998b363e784dd654/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9410cd1af7c1194fbda1457c74b8ab25547e1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9410cd1af7c1194fbda1457c74b8ab25547e1e6", "html_url": "https://github.com/rust-lang/rust/commit/a9410cd1af7c1194fbda1457c74b8ab25547e1e6"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "d7d56ef659afb8f6bdafc2ae7e3b2aaae38c1fea", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/725ba9625eca99537cb0caf2998b363e784dd654/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725ba9625eca99537cb0caf2998b363e784dd654/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=725ba9625eca99537cb0caf2998b363e784dd654", "patch": "@@ -389,24 +389,33 @@ impl PathSegment {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct ConstArg {\n+    pub value: AnonConst,\n+    pub span: Span,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Ty),\n+    Const(ConstArg),\n }\n \n impl GenericArg {\n     pub fn span(&self) -> Span {\n         match self {\n             GenericArg::Lifetime(l) => l.span,\n             GenericArg::Type(t) => t.span,\n+            GenericArg::Const(c) => c.span,\n         }\n     }\n \n     pub fn id(&self) -> NodeId {\n         match self {\n             GenericArg::Lifetime(l) => l.id,\n             GenericArg::Type(t) => t.id,\n+            GenericArg::Const(c) => c.value.id,\n         }\n     }\n }\n@@ -448,6 +457,7 @@ impl GenericArgs {\n                         }\n                         break;\n                     }\n+                    GenericArg::Const(_) => {}\n                 }\n             }\n         }\n@@ -464,6 +474,7 @@ impl GenericArgs {\n             match arg {\n                 GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n                 GenericArg::Type(_) => own_counts.types += 1,\n+                GenericArg::Const(_) => own_counts.consts += 1,\n             };\n         }\n \n@@ -528,6 +539,9 @@ pub enum GenericParamKind {\n     Type {\n         default: Option<P<Ty>>,\n         synthetic: Option<SyntheticTyParamKind>,\n+    },\n+    Const {\n+        ty: P<Ty>,\n     }\n }\n \n@@ -548,6 +562,7 @@ pub struct GenericParam {\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n+    pub consts: usize,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -582,6 +597,7 @@ impl Generics {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => own_counts.lifetimes += 1,\n                 GenericParamKind::Type { .. } => own_counts.types += 1,\n+                GenericParamKind::Const { .. } => own_counts.consts += 1,\n             };\n         }\n \n@@ -1302,7 +1318,7 @@ impl BodyOwnerKind {\n /// These are usually found nested inside types (e.g., array lengths)\n /// or expressions (e.g., repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct AnonConst {\n     pub id: NodeId,\n     pub hir_id: HirId,"}]}