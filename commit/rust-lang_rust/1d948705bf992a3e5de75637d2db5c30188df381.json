{"sha": "1d948705bf992a3e5de75637d2db5c30188df381", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTQ4NzA1YmY5OTJhM2U1ZGU3NTYzN2QyZGI1YzMwMTg4ZGYzODE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T20:05:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T20:05:15Z"}, "message": "Merge pull request #130 from birkenfeld/use_help\n\ntypes: remove almost duplicate helper function", "tree": {"sha": "026c3cd9883b59608faa39cfe31d8dd42722884b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026c3cd9883b59608faa39cfe31d8dd42722884b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d948705bf992a3e5de75637d2db5c30188df381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d948705bf992a3e5de75637d2db5c30188df381", "html_url": "https://github.com/rust-lang/rust/commit/1d948705bf992a3e5de75637d2db5c30188df381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d948705bf992a3e5de75637d2db5c30188df381/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c0c2201767c78fb42849daf550474482adb60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c0c2201767c78fb42849daf550474482adb60d", "html_url": "https://github.com/rust-lang/rust/commit/20c0c2201767c78fb42849daf550474482adb60d"}, {"sha": "4350dab7618bfdd58ea6eca45dca8151434dc4a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4350dab7618bfdd58ea6eca45dca8151434dc4a4", "html_url": "https://github.com/rust-lang/rust/commit/4350dab7618bfdd58ea6eca45dca8151434dc4a4"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "f6d7749f1600ef412fce2cc69947a9f27195164c", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d948705bf992a3e5de75637d2db5c30188df381/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d948705bf992a3e5de75637d2db5c30188df381/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1d948705bf992a3e5de75637d2db5c30188df381", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use syntax::codemap::Span;\n \n-use utils::span_lint;\n+use utils::{span_lint, span_help_and_lint};\n \n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n@@ -40,14 +40,6 @@ pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]>\n     }\n }\n \n-/// Lets me span a note only if the lint is shown\n-pub fn span_note_and_lint(cx: &Context, lint: &'static Lint, span: Span, msg: &str, note: &str) {\n-    span_lint(cx, lint, span, msg);\n-    if cx.current_level(lint) != Level::Allow {\n-        cx.sess().span_note(span, note);\n-    }\n-}\n-\n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOX_VEC, LINKEDLIST)\n@@ -62,7 +54,7 @@ impl LintPass for TypePass {\n         match_ty_unwrap(ty, &[\"std\", \"boxed\", \"Box\"]).and_then(|t| t.first())\n           .and_then(|t| match_ty_unwrap(&**t, &[\"std\", \"vec\", \"Vec\"]))\n           .map(|_| {\n-            span_note_and_lint(cx, BOX_VEC, ty.span,\n+            span_help_and_lint(cx, BOX_VEC, ty.span,\n                               \"You seem to be trying to use Box<Vec<T>>. Did you mean to use Vec<T>?\",\n                               \"Vec<T> is already on the heap, Box<Vec<T>> makes an extra allocation\");\n           });\n@@ -77,7 +69,7 @@ impl LintPass for TypePass {\n                       vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n         for path in dlists.iter() {\n             if match_ty_unwrap(ty, &path[..]).is_some() {\n-                span_note_and_lint(cx, LINKEDLIST, ty.span,\n+                span_help_and_lint(cx, LINKEDLIST, ty.span,\n                                    \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                                    \"A RingBuf might work.\");\n                 return;"}]}