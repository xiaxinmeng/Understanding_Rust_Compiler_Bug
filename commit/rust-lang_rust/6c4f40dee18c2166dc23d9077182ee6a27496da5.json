{"sha": "6c4f40dee18c2166dc23d9077182ee6a27496da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGY0MGRlZTE4YzIxNjZkYzIzZDkwNzcxODJlZTZhMjc0OTZkYTU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-23T16:10:32Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-27T14:50:48Z"}, "message": "Make closures inherit their parent's \"safety context\"", "tree": {"sha": "4dc98b5beb7869b08acb2c65aba840706b011e26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc98b5beb7869b08acb2c65aba840706b011e26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4f40dee18c2166dc23d9077182ee6a27496da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f40dee18c2166dc23d9077182ee6a27496da5", "html_url": "https://github.com/rust-lang/rust/commit/6c4f40dee18c2166dc23d9077182ee6a27496da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f40dee18c2166dc23d9077182ee6a27496da5/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1e3d3b74fa80ce14af6ec143f061897684582b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e3d3b74fa80ce14af6ec143f061897684582b", "html_url": "https://github.com/rust-lang/rust/commit/8d1e3d3b74fa80ce14af6ec143f061897684582b"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "d1aaabe92edaec2e97c8aa12b15935650863a2fe", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f40dee18c2166dc23d9077182ee6a27496da5/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f40dee18c2166dc23d9077182ee6a27496da5/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=6c4f40dee18c2166dc23d9077182ee6a27496da5", "patch": "@@ -213,6 +213,30 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     self.requires_unsafe(expr.span, CastOfPointerToInt);\n                 }\n             }\n+            ExprKind::Closure {\n+                closure_id,\n+                substs: _,\n+                upvars: _,\n+                movability: _,\n+                fake_reads: _,\n+            } => {\n+                let closure_id = closure_id.expect_local();\n+                let closure_def = if let Some((did, const_param_id)) =\n+                    ty::WithOptConstParam::try_lookup(closure_id, self.tcx)\n+                {\n+                    ty::WithOptConstParam { did, const_param_did: Some(const_param_id) }\n+                } else {\n+                    ty::WithOptConstParam::unknown(closure_id)\n+                };\n+                let (closure_thir, expr) = self.tcx.thir_body(closure_def);\n+                let closure_thir = &closure_thir.borrow();\n+                let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n+                let mut closure_visitor =\n+                    UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n+                closure_visitor.visit_expr(&closure_thir[expr]);\n+                // Unsafe blocks can be used in closures, make sure to take it into account\n+                self.safety_context = closure_visitor.safety_context;\n+            }\n             _ => {}\n         }\n \n@@ -335,14 +359,18 @@ impl UnsafeOpKind {\n     }\n }\n \n-// FIXME: checking unsafety for closures should be handled by their parent body,\n-// as they inherit their \"safety context\" from their declaration site.\n pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) {\n     // THIR unsafeck is gated under `-Z thir-unsafeck`\n     if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n         return;\n     }\n \n+    // Closures are handled by their parent function\n+    if tcx.is_closure(def.did.to_def_id()) {\n+        tcx.ensure().thir_check_unsafety(tcx.hir().local_def_id_to_hir_id(def.did).owner);\n+        return;\n+    }\n+\n     let (thir, expr) = tcx.thir_body(def);\n     let thir = &thir.borrow();\n     // If `thir` is empty, a type error occured, skip this body."}]}