{"sha": "4ada68e3251a8cd777a8381a716bacf5af4c01d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZGE2OGUzMjUxYThjZDc3N2E4MzgxYTcxNmJhY2Y1YWY0YzAxZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T18:34:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-29T18:34:16Z"}, "message": "Rollup merge of #64858 - skinny121:str-const-generics, r=varkor\n\nAdd support for relating slices in `super_relate_consts`\n\nThis allows passing strings as generic arguments.\n\nFixes #63773\nFixes #60813\n\nr? @varkor", "tree": {"sha": "f79ef4dd29e983552739e20cf90a03d1ed72ef47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f79ef4dd29e983552739e20cf90a03d1ed72ef47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ada68e3251a8cd777a8381a716bacf5af4c01d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkPkpCRBK7hj4Ov3rIwAAdHIIAEieXTa2tTbiZCH10Fdbr6fY\nBih0xFU+BI8+/JpmVCDXmp/lwrijB/3d9T8Q+mhNdryY+9Q3k4vdoJ24M20QulCC\npp7fu/8WXWFYanMhzC2PrtDT3NAHVud/LjV5sL1bTfdD1B+Wiwi8mKhTMbg2xRPe\nP2/Y0de9Z9A1TbQbMY+8DHJbRr/E5+NgtmTWKuwW+cCkxtU0GVBXDkQtCk5vJZfw\nBJMgY+WzbfuOhFlefaulbVhFKgTV8YoX4NfGU2NIfc6Bp4BBYZqRtxO3xL3EZs71\nVeSyvR2XjG2cggfCWhkOZdNbKfhJx7Ht8L2Td1PXS7LLQ4uJAN8706+g4/20DDk=\n=lrVC\n-----END PGP SIGNATURE-----\n", "payload": "tree f79ef4dd29e983552739e20cf90a03d1ed72ef47\nparent 8109332a4c7a022aaf9d778a59e855c9e91ee9d4\nparent 54bad930304a1f7009296e6cfc2f90a008189b1d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569782056 +0200\ncommitter GitHub <noreply@github.com> 1569782056 +0200\n\nRollup merge of #64858 - skinny121:str-const-generics, r=varkor\n\nAdd support for relating slices in `super_relate_consts`\n\nThis allows passing strings as generic arguments.\n\nFixes #63773\nFixes #60813\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ada68e3251a8cd777a8381a716bacf5af4c01d1", "html_url": "https://github.com/rust-lang/rust/commit/4ada68e3251a8cd777a8381a716bacf5af4c01d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ada68e3251a8cd777a8381a716bacf5af4c01d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8109332a4c7a022aaf9d778a59e855c9e91ee9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8109332a4c7a022aaf9d778a59e855c9e91ee9d4", "html_url": "https://github.com/rust-lang/rust/commit/8109332a4c7a022aaf9d778a59e855c9e91ee9d4"}, {"sha": "54bad930304a1f7009296e6cfc2f90a008189b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bad930304a1f7009296e6cfc2f90a008189b1d", "html_url": "https://github.com/rust-lang/rust/commit/54bad930304a1f7009296e6cfc2f90a008189b1d"}], "stats": {"total": 142, "additions": 116, "deletions": 26}, "files": [{"sha": "e925d7429fff446f269d00b145b082a09aef63c3", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -101,7 +101,7 @@ pub use self::error::{\n     InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviorInfo,\n };\n \n-pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};\n+pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue, get_slice_bytes};\n \n pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n "}, {"sha": "32f45cd9d472035ab601b8abc78a4b85396acbdd", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -611,3 +611,18 @@ impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n     Scalar(v),\n     Undef\n });\n+\n+/// Gets the bytes of a constant slice value.\n+pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n+    if let ConstValue::Slice { data, start, end } = val {\n+        let len = end - start;\n+        data.get_bytes(\n+            cx,\n+            // invent a pointer, only the offset is relevant anyway\n+            Pointer::new(AllocId(0), Size::from_bytes(start as u64)),\n+            Size::from_bytes(len as u64),\n+        ).unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err))\n+    } else {\n+        bug!(\"expected const slice, but found another const value\");\n+    }\n+}"}, {"sha": "3bd61e345543692978bb9ca03d6082d1063e30fd", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, Scalar};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -584,7 +584,20 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n         // saying that we're not handling it intentionally.\n \n-        // FIXME(const_generics): handle `ConstValue::ByRef` and `ConstValue::Slice`.\n+        (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n+            let a_bytes = get_slice_bytes(&tcx, a_val);\n+            let b_bytes = get_slice_bytes(&tcx, b_val);\n+            if a_bytes == b_bytes {\n+                Ok(tcx.mk_const(ty::Const {\n+                    val: a_val,\n+                    ty: a.ty,\n+                }))\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+            }\n+        }\n+\n+        // FIXME(const_generics): handle `ConstValue::ByRef`.\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),"}, {"sha": "fcdf2719ab627ce55a5a7a66933ba3a74227c6aa", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -13,12 +13,12 @@ use crate::hair::constant::*;\n use rustc::lint;\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n-use rustc::mir::interpret::{GlobalId, ConstValue, sign_extend, AllocId, Pointer};\n+use rustc::mir::interpret::{GlobalId, ConstValue, get_slice_bytes, sign_extend};\n use rustc::traits::{ObligationCause, PredicateObligation};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, GenericArg};\n-use rustc::ty::layout::{VariantIdx, Size};\n+use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, RangeEnd};\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -1526,27 +1526,10 @@ pub fn compare_const_vals<'tcx>(\n \n     if let ty::Str = ty.kind {\n         match (a.val, b.val) {\n-            (\n-                ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },\n-                ConstValue::Slice { data: alloc_b, start: offset_b, end: end_b },\n-            ) => {\n-                let len_a = end_a - offset_a;\n-                let len_b = end_b - offset_b;\n-                let a = alloc_a.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_a as u64)),\n-                    Size::from_bytes(len_a as u64),\n-                );\n-                let b = alloc_b.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_b as u64)),\n-                    Size::from_bytes(len_b as u64),\n-                );\n-                if let (Ok(a), Ok(b)) = (a, b) {\n-                    return from_bool(a == b);\n-                }\n+            (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n+                let a_bytes = get_slice_bytes(&tcx, a.val);\n+                let b_bytes = get_slice_bytes(&tcx, b.val);\n+                return from_bool(a_bytes == b_bytes);\n             }\n             _ => (),\n         }"}, {"sha": "73c75ae6668052713ee121b9524239f2b24125cd", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct ConstString<const T: &'static str>;\n+struct ConstBytes<const T: &'static [u8]>;\n+\n+pub fn main() {\n+    let _: ConstString<\"Hello\"> = ConstString::<\"Hello\">;\n+    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //~ ERROR mismatched types\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a6\">;\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //~ ERROR mismatched types\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<{&[0x41, 0x41, 0x41]}>;\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //~ ERROR mismatched types\n+}"}, {"sha": "72369ab24ebfc5ddfe1ebca3d874ae0c30418c60", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -0,0 +1,38 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/slice-const-param-mismatch.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:9:35\n+   |\n+LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n+   |\n+   = note: expected type `ConstString<>`\n+              found type `ConstString<>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:11:33\n+   |\n+LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n+   |\n+   = note: expected type `ConstString<>`\n+              found type `ConstString<>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:13:33\n+   |\n+LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n+   |\n+   = note: expected type `ConstBytes<>`\n+              found type `ConstBytes<>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2629caa392106b3eca63eed9091836d1c26d63ff", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+    STRING\n+}\n+\n+pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+    BYTES\n+}\n+\n+pub fn main() {\n+    assert_eq!(function_with_str::<\"Rust\">(), \"Rust\");\n+    assert_eq!(function_with_str::<\"\u2107\u31c8\u21a6\">(), \"\u2107\u31c8\u21a6\");\n+    assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n+    assert_eq!(function_with_bytes::<{&[0x41, 0x41, 0x41, 0x41]}>(), b\"AAAA\");\n+}"}, {"sha": "79214a34fdba0e8c01c52b802807a5059980b24c", "filename": "src/test/ui/const-generics/slice-const-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ada68e3251a8cd777a8381a716bacf5af4c01d1/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr?ref=4ada68e3251a8cd777a8381a716bacf5af4c01d1", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/slice-const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}