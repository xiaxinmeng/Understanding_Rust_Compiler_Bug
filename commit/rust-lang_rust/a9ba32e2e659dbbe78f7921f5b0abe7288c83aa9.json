{"sha": "a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YmEzMmUyZTY1OWRiYmU3OGY3OTIxZjViMGFiZTcyODhjODNhYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-10T21:40:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T21:40:57Z"}, "message": "Merge #2749\n\n2749: Basic DocumentHighlightKind support for assignments r=matklad a=kjeremy\n\nWraps references per #2738 and adds limited support for DocumentHighlightKind Read/Write for simple binops assignments.\r\n\r\nI think I need some help with determining reads/writes.\r\n\r\nTowards #2560 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "fc742b1b41c72f8016329a243f0f5302d57bad85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc742b1b41c72f8016329a243f0f5302d57bad85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGO9pCRBK7hj4Ov3rIwAAdHIIAGaCUK9i4GyryEGlqr+m3jHU\nQFlNPzYnDInwMtgBekocYaKRCTaMqOxv42wrL4c5cnZz4VKN0LZWRK1C5D5JltEq\njtZqRMm7MltcjdT03EZ2/RmaYLBvFllG56Uu9Lygj3zt4prNLwQn55CSV18Ba6/R\nCRRziEUCW3wAJYSYvJy5xT7H4WslnKab/d2/fzRqyuRlVjpqaj/QO6QiBgOseho3\n6xBR9Pkv0ggP9NFVrT3K8QzNRQjY7WBEplrUmC0rv7YPM8IOmk4y/u/EcPVwot2T\nqa+LW5mB6rBqwk2oEza0HyNgCLtW2LnzSQKmsNJ7xarFFXqnd0b8ux/4rcaRMgQ=\n=EXVR\n-----END PGP SIGNATURE-----\n", "payload": "tree fc742b1b41c72f8016329a243f0f5302d57bad85\nparent 19eb7fa1db7da8417314ddfafe7addbbd9c3b46a\nparent a633a6275ab823396f57b1e93d45e58d98f8d32f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578692457 +0000\ncommitter GitHub <noreply@github.com> 1578692457 +0000\n\nMerge #2749\n\n2749: Basic DocumentHighlightKind support for assignments r=matklad a=kjeremy\n\nWraps references per #2738 and adds limited support for DocumentHighlightKind Read/Write for simple binops assignments.\r\n\r\nI think I need some help with determining reads/writes.\r\n\r\nTowards #2560 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "html_url": "https://github.com/rust-lang/rust/commit/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "html_url": "https://github.com/rust-lang/rust/commit/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a"}, {"sha": "a633a6275ab823396f57b1e93d45e58d98f8d32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a633a6275ab823396f57b1e93d45e58d98f8d32f", "html_url": "https://github.com/rust-lang/rust/commit/a633a6275ab823396f57b1e93d45e58d98f8d32f"}], "stats": {"total": 306, "additions": 239, "deletions": 67}, "files": [{"sha": "4d8deb21c8b7f03fd4e24a546d7208ade71693ce", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "patch": "@@ -75,7 +75,9 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n-    references::{Reference, ReferenceKind, ReferenceSearchResult, SearchScope},\n+    references::{\n+        Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n+    },\n     runnables::{Runnable, RunnableKind},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,"}, {"sha": "4e52e0e7bfb2ba7be9a9016d9f91169981ab4fc1", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 198, "deletions": 55, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "patch": "@@ -19,8 +19,9 @@ use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextUnit,\n-    TokenAtOffset,\n+    algo::find_node_at_offset,\n+    ast::{self, NameOwner},\n+    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TextUnit, TokenAtOffset,\n };\n \n use crate::{\n@@ -37,15 +38,22 @@ pub use self::search_scope::SearchScope;\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n-    declaration: NavigationTarget,\n-    declaration_kind: ReferenceKind,\n+    declaration: Declaration,\n     references: Vec<Reference>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct Declaration {\n+    pub nav: NavigationTarget,\n+    pub kind: ReferenceKind,\n+    pub access: Option<ReferenceAccess>,\n+}\n+\n #[derive(Debug, Clone)]\n pub struct Reference {\n     pub file_range: FileRange,\n     pub kind: ReferenceKind,\n+    pub access: Option<ReferenceAccess>,\n }\n \n #[derive(Debug, Clone, PartialEq)]\n@@ -54,11 +62,21 @@ pub enum ReferenceKind {\n     Other,\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq)]\n+pub enum ReferenceAccess {\n+    Read,\n+    Write,\n+}\n+\n impl ReferenceSearchResult {\n-    pub fn declaration(&self) -> &NavigationTarget {\n+    pub fn declaration(&self) -> &Declaration {\n         &self.declaration\n     }\n \n+    pub fn decl_target(&self) -> &NavigationTarget {\n+        &self.declaration.nav\n+    }\n+\n     pub fn references(&self) -> &[Reference] {\n         &self.references\n     }\n@@ -72,7 +90,7 @@ impl ReferenceSearchResult {\n }\n \n // allow turning ReferenceSearchResult into an iterator\n-// over FileRanges\n+// over References\n impl IntoIterator for ReferenceSearchResult {\n     type Item = Reference;\n     type IntoIter = std::vec::IntoIter<Reference>;\n@@ -81,10 +99,11 @@ impl IntoIterator for ReferenceSearchResult {\n         let mut v = Vec::with_capacity(self.len());\n         v.push(Reference {\n             file_range: FileRange {\n-                file_id: self.declaration.file_id(),\n-                range: self.declaration.range(),\n+                file_id: self.declaration.nav.file_id(),\n+                range: self.declaration.nav.range(),\n             },\n-            kind: self.declaration_kind,\n+            kind: self.declaration.kind,\n+            access: self.declaration.access,\n         });\n         v.append(&mut self.references);\n         v.into_iter()\n@@ -131,15 +150,20 @@ pub(crate) fn find_all_refs(\n         }\n     };\n \n+    let decl_range = declaration.range();\n+\n+    let declaration = Declaration {\n+        nav: declaration,\n+        kind: ReferenceKind::Other,\n+        access: decl_access(&def.kind, &name, &syntax, decl_range),\n+    };\n+\n     let references = process_definition(db, def, name, search_scope)\n         .into_iter()\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();\n \n-    Some(RangeInfo::new(\n-        range,\n-        ReferenceSearchResult { declaration, references, declaration_kind: ReferenceKind::Other },\n-    ))\n+    Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }))\n }\n \n fn find_name<'a>(\n@@ -201,7 +225,12 @@ fn process_definition(\n                         } else {\n                             ReferenceKind::Other\n                         };\n-                        refs.push(Reference { file_range: FileRange { file_id, range }, kind });\n+\n+                        refs.push(Reference {\n+                            file_range: FileRange { file_id, range },\n+                            kind,\n+                            access: reference_access(&d.kind, &name_ref),\n+                        });\n                     }\n                 }\n             }\n@@ -210,11 +239,69 @@ fn process_definition(\n     refs\n }\n \n+fn decl_access(\n+    kind: &NameKind,\n+    name: &str,\n+    syntax: &SyntaxNode,\n+    range: TextRange,\n+) -> Option<ReferenceAccess> {\n+    match kind {\n+        NameKind::Local(_) | NameKind::Field(_) => {}\n+        _ => return None,\n+    };\n+\n+    let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n+    if let Some(_) = stmt.initializer() {\n+        let pat = stmt.pat()?;\n+        match pat {\n+            ast::Pat::BindPat(it) => {\n+                if it.name()?.text().as_str() == name {\n+                    return Some(ReferenceAccess::Write);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n+    // Only Locals and Fields have accesses for now.\n+    match kind {\n+        NameKind::Local(_) | NameKind::Field(_) => {}\n+        _ => return None,\n+    };\n+\n+    let mode = name_ref.syntax().ancestors().find_map(|node| {\n+        match_ast! {\n+            match (node) {\n+                ast::BinExpr(expr) => {\n+                    if expr.op_kind()?.is_assignment() {\n+                        // If the variable or field ends on the LHS's end then it's a Write (covers fields and locals).\n+                        // FIXME: This is not terribly accurate.\n+                        if let Some(lhs) = expr.lhs() {\n+                            if lhs.syntax().text_range().end() == name_ref.syntax().text_range().end() {\n+                                return Some(ReferenceAccess::Write);\n+                            }\n+                        }\n+                    }\n+                    return Some(ReferenceAccess::Read);\n+                },\n+                _ => {None}\n+            }\n+        }\n+    });\n+\n+    // Default Locals and Fields to read\n+    mode.or(Some(ReferenceAccess::Read))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n-        Reference, ReferenceKind, ReferenceSearchResult, SearchScope,\n+        Declaration, Reference, ReferenceSearchResult, SearchScope,\n     };\n \n     #[test]\n@@ -234,8 +321,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) [5; 39) [12; 15)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(1) [5; 39) [12; 15) Other\",\n             &[\"FileId(1) [142; 145) StructLiteral\"],\n         );\n     }\n@@ -258,13 +344,12 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [33; 34)\",\n-            ReferenceKind::Other,\n+            \"i BIND_PAT FileId(1) [33; 34) Other Write\",\n             &[\n-                \"FileId(1) [67; 68) Other\",\n-                \"FileId(1) [71; 72) Other\",\n-                \"FileId(1) [101; 102) Other\",\n-                \"FileId(1) [127; 128) Other\",\n+                \"FileId(1) [67; 68) Other Write\",\n+                \"FileId(1) [71; 72) Other Read\",\n+                \"FileId(1) [101; 102) Other Write\",\n+                \"FileId(1) [127; 128) Other Write\",\n             ],\n         );\n     }\n@@ -279,9 +364,8 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [12; 13)\",\n-            ReferenceKind::Other,\n-            &[\"FileId(1) [38; 39) Other\"],\n+            \"i BIND_PAT FileId(1) [12; 13) Other\",\n+            &[\"FileId(1) [38; 39) Other Read\"],\n         );\n     }\n \n@@ -295,9 +379,8 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [12; 13)\",\n-            ReferenceKind::Other,\n-            &[\"FileId(1) [38; 39) Other\"],\n+            \"i BIND_PAT FileId(1) [12; 13) Other\",\n+            &[\"FileId(1) [38; 39) Other Read\"],\n         );\n     }\n \n@@ -317,9 +400,8 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"spam RECORD_FIELD_DEF FileId(1) [66; 79) [70; 74)\",\n-            ReferenceKind::Other,\n-            &[\"FileId(1) [152; 156) Other\"],\n+            \"spam RECORD_FIELD_DEF FileId(1) [66; 79) [70; 74) Other\",\n+            &[\"FileId(1) [152; 156) Other Read\"],\n         );\n     }\n \n@@ -334,7 +416,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        check_result(refs, \"f FN_DEF FileId(1) [88; 104) [91; 92)\", ReferenceKind::Other, &[]);\n+        check_result(refs, \"f FN_DEF FileId(1) [88; 104) [91; 92) Other\", &[]);\n     }\n \n     #[test]\n@@ -349,7 +431,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        check_result(refs, \"B ENUM_VARIANT FileId(1) [83; 84) [83; 84)\", ReferenceKind::Other, &[]);\n+        check_result(refs, \"B ENUM_VARIANT FileId(1) [83; 84) [83; 84) Other\", &[]);\n     }\n \n     #[test]\n@@ -390,8 +472,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(2) [16; 50) [27; 30)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(2) [16; 50) [27; 30) Other\",\n             &[\"FileId(1) [52; 55) StructLiteral\", \"FileId(3) [77; 80) StructLiteral\"],\n         );\n     }\n@@ -421,8 +502,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"foo SOURCE_FILE FileId(2) [0; 35)\",\n-            ReferenceKind::Other,\n+            \"foo SOURCE_FILE FileId(2) [0; 35) Other\",\n             &[\"FileId(1) [13; 16) Other\"],\n         );\n     }\n@@ -451,8 +531,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(3) [0; 41) [18; 21)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(3) [0; 41) [18; 21) Other\",\n             &[\"FileId(2) [20; 23) Other\", \"FileId(2) [46; 49) StructLiteral\"],\n         );\n     }\n@@ -480,17 +559,15 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n-            ReferenceKind::Other,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29) Other\",\n             &[\"FileId(2) [16; 20) Other\", \"FileId(3) [16; 20) Other\"],\n         );\n \n         let refs =\n             analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n-            ReferenceKind::Other,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29) Other\",\n             &[\"FileId(3) [16; 20) Other\"],\n         );\n     }\n@@ -509,33 +586,99 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"m1 MACRO_CALL FileId(1) [9; 63) [46; 48)\",\n-            ReferenceKind::Other,\n+            \"m1 MACRO_CALL FileId(1) [9; 63) [46; 48) Other\",\n             &[\"FileId(1) [96; 98) Other\", \"FileId(1) [114; 116) Other\"],\n         );\n     }\n \n+    #[test]\n+    fn test_basic_highlight_read_write() {\n+        let code = r#\"\n+        fn foo() {\n+            let i<|> = 0;\n+            i = i + 1;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [36; 37) Other Write\",\n+            &[\"FileId(1) [55; 56) Other Write\", \"FileId(1) [59; 60) Other Read\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_basic_highlight_field_read_write() {\n+        let code = r#\"\n+        struct S {\n+            f: u32,\n+        }\n+\n+        fn foo() {\n+            let mut s = S{f: 0};\n+            s.f<|> = 0;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        check_result(\n+            refs,\n+            \"f RECORD_FIELD_DEF FileId(1) [32; 38) [32; 33) Other\",\n+            &[\"FileId(1) [96; 97) Other Read\", \"FileId(1) [117; 118) Other Write\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_basic_highlight_decl_no_write() {\n+        let code = r#\"\n+        fn foo() {\n+            let i<|>;\n+            i = 1;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [36; 37) Other\",\n+            &[\"FileId(1) [51; 52) Other Write\"],\n+        );\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n \n-    fn check_result(\n-        res: ReferenceSearchResult,\n-        expected_decl: &str,\n-        decl_kind: ReferenceKind,\n-        expected_refs: &[&str],\n-    ) {\n+    fn check_result(res: ReferenceSearchResult, expected_decl: &str, expected_refs: &[&str]) {\n         res.declaration().assert_match(expected_decl);\n-        assert_eq!(res.declaration_kind, decl_kind);\n-\n         assert_eq!(res.references.len(), expected_refs.len());\n         res.references().iter().enumerate().for_each(|(i, r)| r.assert_match(expected_refs[i]));\n     }\n \n+    impl Declaration {\n+        fn debug_render(&self) -> String {\n+            let mut s = format!(\"{} {:?}\", self.nav.debug_render(), self.kind);\n+            if let Some(access) = self.access {\n+                s.push_str(&format!(\" {:?}\", access));\n+            }\n+            s\n+        }\n+\n+        fn assert_match(&self, expected: &str) {\n+            let actual = self.debug_render();\n+            test_utils::assert_eq_text!(expected.trim(), actual.trim(),);\n+        }\n+    }\n+\n     impl Reference {\n         fn debug_render(&self) -> String {\n-            format!(\"{:?} {:?} {:?}\", self.file_range.file_id, self.file_range.range, self.kind)\n+            let mut s = format!(\n+                \"{:?} {:?} {:?}\",\n+                self.file_range.file_id, self.file_range.range, self.kind\n+            );\n+            if let Some(access) = self.access {\n+                s.push_str(&format!(\" {:?}\", access));\n+            }\n+            s\n         }\n \n         fn assert_match(&self, expected: &str) {"}, {"sha": "562699b7cdcc143daae0e3caaed20f1f2420fe87", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n use ra_ide::{\n     translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n     FileRange, FileSystemEdit, Fold, FoldKind, InsertTextFormat, LineCol, LineIndex,\n-    NavigationTarget, RangeInfo, Severity, SourceChange, SourceFileEdit,\n+    NavigationTarget, RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -53,6 +53,18 @@ impl Conv for SyntaxKind {\n     }\n }\n \n+impl Conv for ReferenceAccess {\n+    type Output = ::lsp_types::DocumentHighlightKind;\n+\n+    fn conv(self) -> Self::Output {\n+        use lsp_types::DocumentHighlightKind;\n+        match self {\n+            ReferenceAccess::Read => DocumentHighlightKind::Read,\n+            ReferenceAccess::Write => DocumentHighlightKind::Write,\n+        }\n+    }\n+}\n+\n impl Conv for CompletionItemKind {\n     type Output = ::lsp_types::CompletionItemKind;\n "}, {"sha": "a592f0a1266bd15358122a8648ba50c5e3e43494", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "patch": "@@ -536,18 +536,32 @@ pub fn handle_references(\n \n     let locations = if params.context.include_declaration {\n         refs.into_iter()\n-            .filter_map(|r| {\n-                let line_index = world.analysis().file_line_index(r.file_range.file_id).ok()?;\n-                to_location(r.file_range.file_id, r.file_range.range, &world, &line_index).ok()\n+            .filter_map(|reference| {\n+                let line_index =\n+                    world.analysis().file_line_index(reference.file_range.file_id).ok()?;\n+                to_location(\n+                    reference.file_range.file_id,\n+                    reference.file_range.range,\n+                    &world,\n+                    &line_index,\n+                )\n+                .ok()\n             })\n             .collect()\n     } else {\n         // Only iterate over the references if include_declaration was false\n         refs.references()\n             .iter()\n-            .filter_map(|r| {\n-                let line_index = world.analysis().file_line_index(r.file_range.file_id).ok()?;\n-                to_location(r.file_range.file_id, r.file_range.range, &world, &line_index).ok()\n+            .filter_map(|reference| {\n+                let line_index =\n+                    world.analysis().file_line_index(reference.file_range.file_id).ok()?;\n+                to_location(\n+                    reference.file_range.file_id,\n+                    reference.file_range.range,\n+                    &world,\n+                    &line_index,\n+                )\n+                .ok()\n             })\n             .collect()\n     };\n@@ -836,10 +850,10 @@ pub fn handle_document_highlight(\n \n     Ok(Some(\n         refs.into_iter()\n-            .filter(|r| r.file_range.file_id == file_id)\n-            .map(|r| DocumentHighlight {\n-                range: r.file_range.range.conv_with(&line_index),\n-                kind: None,\n+            .filter(|reference| reference.file_range.file_id == file_id)\n+            .map(|reference| DocumentHighlight {\n+                range: reference.file_range.range.conv_with(&line_index),\n+                kind: reference.access.map(|it| it.conv()),\n             })\n             .collect(),\n     ))"}, {"sha": "3dfecfe762599fc85a984a9db05032d58145a599", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=a9ba32e2e659dbbe78f7921f5b0abe7288c83aa9", "patch": "@@ -144,6 +144,7 @@ impl BinOp {\n         }\n     }\n }\n+\n impl ast::BinExpr {\n     pub fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n         self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| {"}]}