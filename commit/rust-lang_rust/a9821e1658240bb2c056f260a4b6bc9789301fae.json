{"sha": "a9821e1658240bb2c056f260a4b6bc9789301fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ODIxZTE2NTgyNDBiYjJjMDU2ZjI2MGE0YjZiYzk3ODkzMDFmYWU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T03:46:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T05:31:16Z"}, "message": "Refactor `ExtCtxt` to use a `Resolver` instead of a `MacroLoader`.", "tree": {"sha": "47a349584300622efd9e5cbcc8bb41162ce40fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a349584300622efd9e5cbcc8bb41162ce40fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9821e1658240bb2c056f260a4b6bc9789301fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9821e1658240bb2c056f260a4b6bc9789301fae", "html_url": "https://github.com/rust-lang/rust/commit/a9821e1658240bb2c056f260a4b6bc9789301fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9821e1658240bb2c056f260a4b6bc9789301fae/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60440b226d2f70bdae803443ff7ad2e2af2c9b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/60440b226d2f70bdae803443ff7ad2e2af2c9b10", "html_url": "https://github.com/rust-lang/rust/commit/60440b226d2f70bdae803443ff7ad2e2af2c9b10"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "5bbc0cd9d907138e5524960f49a85925d9913396", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -39,6 +39,7 @@ use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::attr;\n+use syntax::ext::base::LoadedMacro;\n use syntax::ptr::P;\n use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n@@ -488,6 +489,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n }\n \n+pub trait MacroLoader {\n+     fn load_crate(&mut self, extern_crate: &ast::Item, allows_macros: bool) -> Vec<LoadedMacro>;\n+}\n \n /// Metadata encoding and decoding can make use of thread-local encoding and\n /// decoding contexts. These allow implementers of serialize::Encodable and"}, {"sha": "0d9bf14f12fb210af506e994fccd0a0ef536b1d9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -638,6 +638,12 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     }\n     sess.track_errors(|| sess.lint_store.borrow_mut().process_command_line(sess))?;\n \n+    let mut macro_loader =\n+        macro_import::MacroLoader::new(sess, &cstore, crate_name, krate.config.clone());\n+\n+    let resolver_arenas = Resolver::arenas();\n+    let mut resolver = Resolver::new(sess, make_glob_map, &mut macro_loader, &resolver_arenas);\n+\n     krate = time(time_passes, \"expansion\", || {\n         // Windows dlls do not have rpaths, so they don't know how to find their\n         // dependencies. It's up to us to tell the system where to find all the\n@@ -672,14 +678,10 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n         };\n-        let mut loader = macro_import::MacroLoader::new(sess,\n-                                                        &cstore,\n-                                                        crate_name,\n-                                                        krate.config.clone());\n         let mut ecx = syntax::ext::base::ExtCtxt::new(&sess.parse_sess,\n                                                       krate.config.clone(),\n                                                       cfg,\n-                                                      &mut loader);\n+                                                      &mut resolver);\n         syntax_ext::register_builtins(&mut ecx.syntax_env);\n         let ret = syntax::ext::expand::expand_crate(&mut ecx, syntax_exts, krate);\n         if cfg!(windows) {\n@@ -708,9 +710,6 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n                                                   &sess.features.borrow())\n     });\n \n-    let resolver_arenas = Resolver::arenas();\n-    let mut resolver = Resolver::new(sess, make_glob_map, &resolver_arenas);\n-\n     let krate = time(sess.time_passes(), \"assigning node ids\", || resolver.assign_node_ids(krate));\n \n     if sess.opts.debugging_opts.input_stats {"}, {"sha": "e41f076d64a80bea5abc8e227509d937d3fe05b1", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -18,6 +18,7 @@ use creader::{CrateReader, Macros};\n use cstore::CStore;\n \n use rustc::hir::def_id::DefIndex;\n+use rustc::middle;\n use rustc::session::Session;\n use rustc::util::nodemap::FnvHashMap;\n use rustc_back::dynamic_lib::DynamicLibrary;\n@@ -26,7 +27,6 @@ use rustc_macro::__internal::Registry;\n use syntax::ast;\n use syntax::attr;\n use syntax::ext::base::LoadedMacro;\n-use syntax::ext;\n use syntax::parse::token;\n use syntax_ext::deriving::custom::CustomDerive;\n use syntax_pos::Span;\n@@ -55,7 +55,7 @@ pub fn call_bad_macro_reexport(a: &Session, b: Span) {\n \n pub type MacroSelection = FnvHashMap<token::InternedString, Span>;\n \n-impl<'a> ext::base::MacroLoader for MacroLoader<'a> {\n+impl<'a> middle::cstore::MacroLoader for MacroLoader<'a> {\n     fn load_crate(&mut self,\n                   extern_crate: &ast::Item,\n                   allows_macros: bool) -> Vec<LoadedMacro> {"}, {"sha": "c1e6d93a970e5f350e1b8d6ec2f8d3b491a88121", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -45,6 +45,7 @@ use self::ParentLink::*;\n \n use rustc::hir::map::Definitions;\n use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n+use rustc::middle::cstore::MacroLoader;\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n@@ -53,6 +54,8 @@ use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, FnvHashMap, FnvHashSet};\n \n+use syntax::ext;\n+use syntax::ext::base::LoadedMacro;\n use syntax::ext::hygiene::Mark;\n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n@@ -1068,6 +1071,8 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n     new_import_semantics: bool, // true if `#![feature(item_like_imports)]`\n+\n+    macro_loader: &'a mut MacroLoader,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1149,6 +1154,12 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     }\n }\n \n+impl<'a> ext::base::Resolver for Resolver<'a> {\n+    fn load_crate(&mut self, extern_crate: &ast::Item, allows_macros: bool) -> Vec<LoadedMacro> {\n+        self.macro_loader.load_crate(extern_crate, allows_macros)\n+    }\n+}\n+\n trait Named {\n     fn name(&self) -> Name;\n }\n@@ -1166,7 +1177,10 @@ impl Named for hir::PathSegment {\n }\n \n impl<'a> Resolver<'a> {\n-    pub fn new(session: &'a Session, make_glob_map: MakeGlobMap, arenas: &'a ResolverArenas<'a>)\n+    pub fn new(session: &'a Session,\n+               make_glob_map: MakeGlobMap,\n+               macro_loader: &'a mut MacroLoader,\n+               arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let graph_root =\n@@ -1227,6 +1241,8 @@ impl<'a> Resolver<'a> {\n                 vis: ty::Visibility::Public,\n             }),\n             new_import_semantics: session.features.borrow().item_like_imports,\n+\n+            macro_loader: macro_loader,\n         }\n     }\n "}, {"sha": "d0e11643c64c137f77616ca85911071f674f188b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -546,7 +546,7 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders\n }\n \n-pub trait MacroLoader {\n+pub trait Resolver {\n     fn load_crate(&mut self, extern_crate: &ast::Item, allows_macros: bool)\n                   -> Vec<LoadedMacro>;\n }\n@@ -556,8 +556,8 @@ pub enum LoadedMacro {\n     CustomDerive(String, Box<MultiItemModifier>),\n }\n \n-pub struct DummyMacroLoader;\n-impl MacroLoader for DummyMacroLoader {\n+pub struct DummyResolver;\n+impl Resolver for DummyResolver {\n     fn load_crate(&mut self, _: &ast::Item, _: bool) -> Vec<LoadedMacro> {\n         Vec::new()\n     }\n@@ -572,7 +572,7 @@ pub struct ExtCtxt<'a> {\n     pub backtrace: ExpnId,\n     pub ecfg: expand::ExpansionConfig<'a>,\n     pub crate_root: Option<&'static str>,\n-    pub loader: &'a mut MacroLoader,\n+    pub resolver: &'a mut Resolver,\n \n     pub exported_macros: Vec<ast::MacroDef>,\n \n@@ -584,7 +584,7 @@ pub struct ExtCtxt<'a> {\n impl<'a> ExtCtxt<'a> {\n     pub fn new(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,\n                ecfg: expand::ExpansionConfig<'a>,\n-               loader: &'a mut MacroLoader)\n+               resolver: &'a mut Resolver)\n                -> ExtCtxt<'a> {\n         ExtCtxt {\n             syntax_env: initial_syntax_expander_table(&ecfg),\n@@ -594,7 +594,7 @@ impl<'a> ExtCtxt<'a> {\n             ecfg: ecfg,\n             crate_root: None,\n             exported_macros: Vec::new(),\n-            loader: loader,\n+            resolver: resolver,\n             derive_modes: HashMap::new(),\n             recursion_count: 0,\n         }"}, {"sha": "44db1dd17ae6a96dca27ea940afdd63c70c36fc0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                 // We need to error on `#[macro_use] extern crate` when it isn't at the\n                 // crate root, because `$crate` won't work properly.\n                 let is_crate_root = self.cx.syntax_env.is_crate_root();\n-                for def in self.cx.loader.load_crate(&*item, is_crate_root) {\n+                for def in self.cx.resolver.load_crate(&*item, is_crate_root) {\n                     match def {\n                         LoadedMacro::Def(def) => self.cx.insert_macro(def),\n                         LoadedMacro::CustomDerive(name, ext) => {\n@@ -809,7 +809,7 @@ fn mark_tts(tts: &[TokenTree], m: Mark) -> Vec<TokenTree> {\n mod tests {\n     use super::{expand_crate, ExpansionConfig};\n     use ast;\n-    use ext::base::{ExtCtxt, DummyMacroLoader};\n+    use ext::base::{ExtCtxt, DummyResolver};\n     use parse;\n     use util::parser_testing::{string_to_parser};\n     use visit;\n@@ -850,7 +850,7 @@ mod tests {\n             src,\n             Vec::new(), &sess).unwrap();\n         // should fail:\n-        let mut loader = DummyMacroLoader;\n+        let mut loader = DummyResolver;\n         let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n         expand_crate(&mut ecx, vec![], crate_ast);\n     }\n@@ -865,7 +865,7 @@ mod tests {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess).unwrap();\n-        let mut loader = DummyMacroLoader;\n+        let mut loader = DummyResolver;\n         let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n         expand_crate(&mut ecx, vec![], crate_ast);\n     }\n@@ -879,7 +879,7 @@ mod tests {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess).unwrap();\n-        let mut loader = DummyMacroLoader;\n+        let mut loader = DummyResolver;\n         let mut ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut loader);\n         expand_crate(&mut ecx, vec![], crate_ast);\n     }\n@@ -888,7 +888,7 @@ mod tests {\n         let ps = parse::ParseSess::new();\n         let crate_ast = panictry!(string_to_parser(&ps, crate_str).parse_crate_mod());\n         // the cfg argument actually does matter, here...\n-        let mut loader = DummyMacroLoader;\n+        let mut loader = DummyResolver;\n         let mut ecx = ExtCtxt::new(&ps, vec![], test_ecfg(), &mut loader);\n         expand_crate(&mut ecx, vec![], crate_ast)\n     }"}, {"sha": "dde8a8d271f62c97820bcc35898f6aca511c92e2", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -28,7 +28,7 @@ use errors;\n use errors::snippet::{SnippetData};\n use config;\n use entry::{self, EntryPointType};\n-use ext::base::{ExtCtxt, DummyMacroLoader};\n+use ext::base::{ExtCtxt, DummyResolver};\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n use fold::Folder;\n@@ -276,13 +276,13 @@ fn generate_test_harness(sess: &ParseSess,\n     let mut cleaner = EntryPointCleaner { depth: 0 };\n     let krate = cleaner.fold_crate(krate);\n \n-    let mut loader = DummyMacroLoader;\n+    let mut resolver = DummyResolver;\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, vec![],\n                              ExpansionConfig::default(\"test\".to_string()),\n-                             &mut loader),\n+                             &mut resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,"}, {"sha": "78fed9d33dd8282a63bd7f268e340645ce1494d5", "filename": "src/libsyntax_ext/rustc_macro_registrar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -13,7 +13,7 @@ use std::mem;\n use errors;\n use syntax::ast::{self, Ident, NodeId};\n use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute};\n-use syntax::ext::base::{ExtCtxt, DummyMacroLoader};\n+use syntax::ext::base::{ExtCtxt, DummyResolver};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n use syntax::parse::ParseSess;\n@@ -44,7 +44,7 @@ pub fn modify(sess: &ParseSess,\n               num_crate_types: usize,\n               handler: &errors::Handler,\n               features: &Features) -> ast::Crate {\n-    let mut loader = DummyMacroLoader;\n+    let mut loader = DummyResolver;\n     let mut cx = ExtCtxt::new(sess,\n                               Vec::new(),\n                               ExpansionConfig::default(\"rustc_macro\".to_string()),"}, {"sha": "3e5d17e2ffb17a582a96507019964331a7c4e6e3", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -22,11 +22,11 @@ use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();\n-    let mut loader = syntax::ext::base::DummyMacroLoader;\n+    let mut resolver = syntax::ext::base::DummyResolver;\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()),\n-        &mut loader);\n+        &mut resolver);\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {"}, {"sha": "1458583ff58303a50dba9d82cf12122e54f8ce90", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -25,11 +25,11 @@ use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();\n-    let mut loader = syntax::ext::base::DummyMacroLoader;\n+    let mut resolver = syntax::ext::base::DummyResolver;\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()),\n-        &mut loader);\n+        &mut resolver);\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {"}, {"sha": "2a53a62a5ab60d5757b7da4c0b25f9ddfb2e732e", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9821e1658240bb2c056f260a4b6bc9789301fae/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=a9821e1658240bb2c056f260a4b6bc9789301fae", "patch": "@@ -21,11 +21,11 @@ use syntax_pos::DUMMY_SP;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();\n-    let mut loader = syntax::ext::base::DummyMacroLoader;\n+    let mut resolver = syntax::ext::base::DummyResolver;\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()),\n-        &mut loader);\n+        &mut resolver);\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {"}]}