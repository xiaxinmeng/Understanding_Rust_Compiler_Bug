{"sha": "cbad1da3db7eda0911e988fb6255ac5c16961aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYWQxZGEzZGI3ZWRhMDkxMWU5ODhmYjYyNTVhYzVjMTY5NjFhYTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-17T20:37:11Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T07:20:22Z"}, "message": "vec: remove eachi\n\nreplaced by the `enumerate` method from std::iterator", "tree": {"sha": "29f09c6f808aed451acb27146f3f895a310b41fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f09c6f808aed451acb27146f3f895a310b41fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbad1da3db7eda0911e988fb6255ac5c16961aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbad1da3db7eda0911e988fb6255ac5c16961aa7", "html_url": "https://github.com/rust-lang/rust/commit/cbad1da3db7eda0911e988fb6255ac5c16961aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbad1da3db7eda0911e988fb6255ac5c16961aa7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62dc4e0d4cebc390de4053da881a74b9e72c52e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/62dc4e0d4cebc390de4053da881a74b9e72c52e6", "html_url": "https://github.com/rust-lang/rust/commit/62dc4e0d4cebc390de4053da881a74b9e72c52e6"}], "stats": {"total": 65, "additions": 12, "deletions": 53}, "files": [{"sha": "71146c7e6658ee8fd2c3ad13e2fc1b7a68e01f92", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -358,7 +358,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n     // is the ending point, and * represents ANSI color codes.\n     for ProcRes.stderr.line_iter().advance |line| {\n         let mut was_expected = false;\n-        for vec::eachi(expected_errors) |i, ee| {\n+        for expected_errors.iter().enumerate().advance |(i, ee)| {\n             if !found_flags[i] {\n                 debug!(\"prefix=%s ee.kind=%s ee.msg=%s line=%s\",\n                        prefixes[i], ee.kind, ee.msg, line);"}, {"sha": "891eb0b1f1c193548493549ab3e03fa7810826e5", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -43,7 +43,7 @@ impl FnType {\n         let fnty = T_fn(atys, rty);\n         let llfn = decl(fnty);\n \n-        for vec::eachi(self.attrs) |i, a| {\n+        for self.attrs.iter().enumerate().advance |(i, a)| {\n             match *a {\n                 option::Some(attr) => {\n                     unsafe {\n@@ -100,7 +100,7 @@ impl FnType {\n                           ret_def: bool,\n                           llargbundle: ValueRef,\n                           llretval: ValueRef) {\n-        for vec::eachi(self.attrs) |i, a| {\n+        for self.attrs.iter().enumerate().advance |(i, a)| {\n             match *a {\n                 option::Some(attr) => {\n                     unsafe {"}, {"sha": "8bc3889eb115a1a3db709eb1cb219a4dcf58be56", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -225,7 +225,7 @@ pub fn store_environment(bcx: block,\n \n     // Copy expr values into boxed bindings.\n     let mut bcx = bcx;\n-    for vec::eachi(bound_values) |i, bv| {\n+    for bound_values.iter().enumerate().advance |(i, bv)| {\n         debug!(\"Copy %s into closure\", bv.to_str(ccx));\n \n         if ccx.sess.asm_comments() {"}, {"sha": "0ea63dde972af4a46b69aba7fe9e0b0de26d95cb", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -462,7 +462,7 @@ pub fn trans_struct_drop(bcx: block,\n \n         // Drop the fields\n         let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n-        for vec::eachi(field_tys) |i, fld| {\n+        for field_tys.iter().enumerate().advance |(i, fld)| {\n             let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n             bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n         }"}, {"sha": "0d5a84a4a76fd8b6f95f391174892388304911dd", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -1427,21 +1427,6 @@ pub fn each<'r,T>(v: &'r [T], f: &fn(&'r T) -> bool) -> bool {\n     return !broke;\n }\n \n-/**\n- * Iterates over a vector's elements and indices\n- *\n- * Return true to continue, false to break.\n- */\n-#[inline]\n-pub fn eachi<'r,T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) -> bool {\n-    let mut i = 0;\n-    for each(v) |p| {\n-        if !f(i, p) { return false; }\n-        i += 1;\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *\n@@ -3259,17 +3244,6 @@ mod tests {\n         assert_eq!(i, 6);\n     }\n \n-    #[test]\n-    fn test_eachi() {\n-        let mut i = 0;\n-        for eachi([1, 2, 3]) |j, v| {\n-            if i == 0 { assert!(*v == 1); }\n-            assert_eq!(j + 1u, *v as uint);\n-            i += *v;\n-        }\n-        assert_eq!(i, 6);\n-    }\n-\n     #[test]\n     fn test_each_ret_len0() {\n         let a0 : [int, .. 0] = [];\n@@ -4111,21 +4085,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    fn test_eachi_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do eachi(v) |_i, _elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 0;\n-            false\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]"}, {"sha": "2a9ea783c14952511c26002a5201f72f5d44e1cd", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbad1da3db7eda0911e988fb6255ac5c16961aa7/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=cbad1da3db7eda0911e988fb6255ac5c16961aa7", "patch": "@@ -23,11 +23,11 @@ use std::uint;\n use std::vec;\n \n fn print_complements() {\n-    let all = ~[Blue, Red, Yellow];\n-    for vec::each(all) |aa| {\n-        for vec::each(all) |bb| {\n-            io::println(show_color(*aa) + \" + \" + show_color(*bb) +\n-                \" -> \" + show_color(transform(*aa, *bb)));\n+    let all = [Blue, Red, Yellow];\n+    for all.iter().advance |aa| {\n+        for all.iter().advance |bb| {\n+            println(show_color(*aa) + \" + \" + show_color(*bb) +\n+                    \" -> \" + show_color(transform(*aa, *bb)));\n         }\n     }\n }\n@@ -49,7 +49,7 @@ fn show_color(cc: color) -> ~str {\n \n fn show_color_list(set: ~[color]) -> ~str {\n     let mut out = ~\"\";\n-    for vec::eachi(set) |_ii, col| {\n+    for set.iter().advance |col| {\n         out += \" \";\n         out += show_color(*col);\n     }\n@@ -182,7 +182,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     }\n \n     // tell each creature to stop\n-    for vec::eachi(to_creature) |_ii, to_one| {\n+    for to_creature.iter().advance |to_one| {\n         to_one.send(None);\n     }\n "}]}