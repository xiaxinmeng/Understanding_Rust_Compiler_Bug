{"sha": "0227d8d55512d9fee22532f10459b4dc96de1b1e", "node_id": "C_kwDOAAsO6NoAKDAyMjdkOGQ1NTUxMmQ5ZmVlMjI1MzJmMTA0NTliNGRjOTZkZTFiMWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-12T08:28:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-12T08:43:14Z"}, "message": "Enable `x.py check` for miri", "tree": {"sha": "f994f0542325c428a3c9cc76bcb53074ab5d1003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f994f0542325c428a3c9cc76bcb53074ab5d1003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0227d8d55512d9fee22532f10459b4dc96de1b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0227d8d55512d9fee22532f10459b4dc96de1b1e", "html_url": "https://github.com/rust-lang/rust/commit/0227d8d55512d9fee22532f10459b4dc96de1b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0227d8d55512d9fee22532f10459b4dc96de1b1e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b91cbe2d4ce90d30520674876e9d700cf7a561b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b91cbe2d4ce90d30520674876e9d700cf7a561b", "html_url": "https://github.com/rust-lang/rust/commit/2b91cbe2d4ce90d30520674876e9d700cf7a561b"}], "stats": {"total": 68, "additions": 19, "deletions": 49}, "files": [{"sha": "d553dd4e0425fc3144e9ffc51c8c4662fb2c3c75", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=0227d8d55512d9fee22532f10459b4dc96de1b1e", "patch": "@@ -451,14 +451,12 @@ macro_rules! tool_check_step {\n }\n \n tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InTree);\n-// Clippy and Rustfmt are hybrids. They are external tools, but use a git subtree instead\n+// Clippy, miri and Rustfmt are hybrids. They are external tools, but use a git subtree instead\n // of a submodule. Since the SourceType only drives the deny-warnings\n // behavior, treat it as in-tree so that any new warnings in clippy will be\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n-// Miri on the other hand is treated as out of tree, since InTree also causes it to\n-// be run as part of `check`, which can fail on platforms which libffi-sys has no support for.\n-tool_check_step!(Miri, \"src/tools/miri\", SourceType::Submodule);\n+tool_check_step!(Miri, \"src/tools/miri\", SourceType::InTree);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::InTree);\n tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n "}, {"sha": "eaeb5674d7d1e397082fbe7ecf3483bb002fec34", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0227d8d55512d9fee22532f10459b4dc96de1b1e", "patch": "@@ -734,7 +734,7 @@ impl Step for Rustc {\n }\n \n macro_rules! tool_doc {\n-    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?], in_tree = $in_tree:expr $(,)?) => {\n+    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?] $(,)?) => {\n         #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $tool {\n             target: TargetSelection,\n@@ -790,12 +790,6 @@ macro_rules! tool_doc {\n                 t!(fs::create_dir_all(&out_dir));\n                 t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n-                let source_type = if $in_tree == true {\n-                    SourceType::InTree\n-                } else {\n-                    SourceType::Submodule\n-                };\n-\n                 // Build cargo command.\n                 let mut cargo = prepare_tool_cargo(\n                     builder,\n@@ -804,7 +798,7 @@ macro_rules! tool_doc {\n                     target,\n                     \"doc\",\n                     $path,\n-                    source_type,\n+                    SourceType::InTree,\n                     &[],\n                 );\n \n@@ -820,38 +814,21 @@ macro_rules! tool_doc {\n                 cargo.rustdocflag(\"--show-type-layout\");\n                 cargo.rustdocflag(\"--generate-link-to-definition\");\n                 cargo.rustdocflag(\"-Zunstable-options\");\n-                if $in_tree == true {\n-                    builder.run(&mut cargo.into());\n-                } else {\n-                    // Allow out-of-tree docs to fail (since the tool might be in a broken state).\n-                    if !builder.try_run(&mut cargo.into()) {\n-                        builder.info(&format!(\n-                            \"WARNING: tool {} failed to document; ignoring failure because it is an out-of-tree tool\",\n-                            stringify!($tool).to_lowercase(),\n-                        ));\n-                    }\n-                }\n+                builder.run(&mut cargo.into());\n             }\n         }\n     }\n }\n \n-tool_doc!(\n-    Rustdoc,\n-    \"rustdoc-tool\",\n-    \"src/tools/rustdoc\",\n-    [\"rustdoc\", \"rustdoc-json-types\"],\n-    in_tree = true\n-);\n+tool_doc!(Rustdoc, \"rustdoc-tool\", \"src/tools/rustdoc\", [\"rustdoc\", \"rustdoc-json-types\"],);\n tool_doc!(\n     Rustfmt,\n     \"rustfmt-nightly\",\n     \"src/tools/rustfmt\",\n     [\"rustfmt-nightly\", \"rustfmt-config_proc_macro\"],\n-    in_tree = true\n );\n-tool_doc!(Clippy, \"clippy\", \"src/tools/clippy\", [\"clippy_utils\"], in_tree = true);\n-tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"], in_tree = false);\n+tool_doc!(Clippy, \"clippy\", \"src/tools/clippy\", [\"clippy_utils\"]);\n+tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"]);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "45d46f57d6e7c18ad11d3c9bcc6c33afbf6c2e97", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0227d8d55512d9fee22532f10459b4dc96de1b1e", "patch": "@@ -503,7 +503,7 @@ impl Step for Miri {\n             host,\n             \"run\",\n             \"src/tools/miri/cargo-miri\",\n-            SourceType::Submodule,\n+            SourceType::InTree,\n             &[],\n         );\n         cargo.add_rustc_lib_path(builder, compiler);\n@@ -550,7 +550,7 @@ impl Step for Miri {\n             host,\n             \"test\",\n             \"src/tools/miri\",\n-            SourceType::Submodule,\n+            SourceType::InTree,\n             &[],\n         );\n         cargo.add_rustc_lib_path(builder, compiler);"}, {"sha": "d2d5a3be5edb1aa495d03aea6c4e4fc7e3fd13a4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0227d8d55512d9fee22532f10459b4dc96de1b1e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0227d8d55512d9fee22532f10459b4dc96de1b1e", "patch": "@@ -795,7 +795,6 @@ macro_rules! tool_extended {\n        $path:expr,\n        $tool_name:expr,\n        stable = $stable:expr,\n-       $(in_tree = $in_tree:expr,)?\n        $(tool_std = $tool_std:literal,)?\n        $extra_deps:block;)+) => {\n         $(\n@@ -848,11 +847,7 @@ macro_rules! tool_extended {\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n-                    source_type: if false $(|| $in_tree)* {\n-                        SourceType::InTree\n-                    } else {\n-                        SourceType::Submodule\n-                    },\n+                    source_type: SourceType::InTree,\n                 })\n             }\n         }\n@@ -865,17 +860,17 @@ macro_rules! tool_extended {\n // Note: Most submodule updates for tools are handled by bootstrap.py, since they're needed just to\n // invoke Cargo to build bootstrap. See the comment there for more details.\n tool_extended!((self, builder),\n-    Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, in_tree=true, {};\n-    CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n-    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n-    Miri, \"src/tools/miri\", \"miri\", stable=false, in_tree=true, {};\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, in_tree=true, {};\n+    Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n+    CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, {};\n+    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, {};\n+    Miri, \"src/tools/miri\", \"miri\", stable=false, {};\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true, {};\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n-    Rls, \"src/tools/rls\", \"rls\", stable=true, in_tree=true, tool_std=true, {};\n-    RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, tool_std=true, {};\n-    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n+    Rls, \"src/tools/rls\", \"rls\", stable=true, tool_std=true, {};\n+    RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, tool_std=true, {};\n+    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, {};\n );\n \n impl<'a> Builder<'a> {"}]}