{"sha": "b5519db3236a94c1f090dcafaf38ef858ec33a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NTE5ZGIzMjM2YTk0YzFmMDkwZGNhZmFmMzhlZjg1OGVjMzNhMjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-20T17:20:25Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:51:49Z"}, "message": "Rollup merge of #53496 - matthiaskrgr:codespell_08_2018, r=varkor\n\nFix typos found by codespell.", "tree": {"sha": "8dda85089b5fcfeaa4909389fa0777e6a908d4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dda85089b5fcfeaa4909389fa0777e6a908d4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5519db3236a94c1f090dcafaf38ef858ec33a26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlt74LYACgkQ/vbIBR0O\nATytRRAAmph7p6kW1xGyprZiJX1biRE8FjhMhCnUmPbRfTQDSSa1gG6MrQ3+5kTB\nMScmSIxul4fbMDLd6ZD74T0c+MxGf3T9c/MBOFN/x3sub4gE114FWbBugiVqC+k1\n/T+ENroII+chOv1xtpfWwHrnvX0m5UndZx+o/oxF138eDAjE2C5QK+kppn/6V20T\nivKr4CCBtlq/wGvPj5wdVadC9qEMBX/hlb5mplOYPOjvZ0CmUc8O3GoSltGz21I/\nwoAQvj16wM49UmyiAD6pFmzZwI+9yHTGeu6bsRnOdWmy9nqtgJgEnoxlCJLkFNyJ\njrN8CXx6lmN0C5lvXijRYcEMey1qblp6xtQSan2cqiCxK9hSWftz5XB9Bv+uo/gZ\nZuhdIF8G16c6bf2sl2vZezteFRmKApKechoV0anFCbGM4wamqil9gLYHPX+ttbH2\n7DexK7fbhYgPZUKr6mRCNbk04UsGrHE3ZNfGXCIb4AtEVxWCarGcKThYWxsRXjtp\n+TBgC9XTENBJJns/NgB87KqgWilsbhGPw4Z5LZXeW6M/8oDHouvyC9vu8j9LL+Sm\n4Wpr5n94FjU9bPZ9IMSP2Wt1m9bj61Hd1cNpZDZ4WOqpBNOw8RCC/tFfWwb7d45b\nNCdaLxzp1oQxYDUvSHzb91gRja+mVqWDrcd3myz5A/OhneI0rVM=\n=XcDu\n-----END PGP SIGNATURE-----", "payload": "tree 8dda85089b5fcfeaa4909389fa0777e6a908d4e0\nparent 0834a1aea7e35deef88981eb90b12d62b6886fd6\nparent 71120ef1e5cb885ee45e6148970db6ce93ce1aca\nauthor kennytm <kennytm@gmail.com> 1534785625 +0800\ncommitter kennytm <kennytm@gmail.com> 1534845109 +0800\n\nRollup merge of #53496 - matthiaskrgr:codespell_08_2018, r=varkor\n\nFix typos found by codespell.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5519db3236a94c1f090dcafaf38ef858ec33a26", "html_url": "https://github.com/rust-lang/rust/commit/b5519db3236a94c1f090dcafaf38ef858ec33a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5519db3236a94c1f090dcafaf38ef858ec33a26/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0834a1aea7e35deef88981eb90b12d62b6886fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0834a1aea7e35deef88981eb90b12d62b6886fd6", "html_url": "https://github.com/rust-lang/rust/commit/0834a1aea7e35deef88981eb90b12d62b6886fd6"}, {"sha": "71120ef1e5cb885ee45e6148970db6ce93ce1aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/71120ef1e5cb885ee45e6148970db6ce93ce1aca", "html_url": "https://github.com/rust-lang/rust/commit/71120ef1e5cb885ee45e6148970db6ce93ce1aca"}], "stats": {"total": 260, "additions": 130, "deletions": 130}, "files": [{"sha": "e6a48a96da464ab1a034d926833492a768057e29", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -32,7 +32,7 @@ shift\n \n export CFLAGS=\"-fPIC $CFLAGS\"\n \n-# FIXME: remove the patch when upate to 1.1.20\n+# FIXME: remove the patch when updating to 1.1.20\n MUSL=musl-1.1.19\n \n # may have been downloaded in a previous run"}, {"sha": "11313ba99e1a6ea8398908ba514b96db585f8897", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -34,7 +34,7 @@ minimum. It also includes exercises!\n \n # Use Rust\n \n-Once you've gotten familliar with the language, these resources can help you\n+Once you've gotten familiar with the language, these resources can help you\n when you're actually using it day-to-day.\n \n ## The Standard Library"}, {"sha": "4fc5f42dd552708867aa37c09dbc32ad2fa33c8d", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -153,7 +153,7 @@ This option allows you to put extra data in each output filename.\n This flag lets you control how many threads are used when doing\n code generation.\n \n-Increasing paralellism may speed up compile times, but may also\n+Increasing parallelism may speed up compile times, but may also\n produce slower code.\n \n ## remark"}, {"sha": "ff9e0235a0435e8a95e0f160ad63c7ab2ba4711b", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -56,7 +56,7 @@ mod m {\n     pub struct S(u8);\n     \n     fn f() {\n-        // this is trying to use S from the 'use' line, but becuase the `u8` is\n+        // this is trying to use S from the 'use' line, but because the `u8` is\n         // not pub, it is private\n         ::S;\n     }\n@@ -103,7 +103,7 @@ This warning can always be fixed by removing the unused pattern in the\n \n ## mutable-transmutes\n \n-This lint catches transmuting from `&T` to `&mut T` becuase it is undefined\n+This lint catches transmuting from `&T` to `&mut T` because it is undefined\n behavior. Some example code that triggers this lint:\n \n ```rust,ignore"}, {"sha": "a91c2cd71cde34ce85c46f1960e9c6d3b6c39e10", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1,6 +1,6 @@\n # Unstable features\n \n-Rustdoc is under active developement, and like the Rust compiler, some features are only available\n+Rustdoc is under active development, and like the Rust compiler, some features are only available\n on the nightly releases. Some of these are new and need some more testing before they're able to get\n released to the world at large, and some of them are tied to features in the Rust compiler that are\n themselves unstable. Several features here require a matching `#![feature(...)]` attribute to"}, {"sha": "fe82f8555da329e3ba96fbb10bb8b440891121e0", "filename": "src/doc/unstable-book/src/language-features/infer-outlives-requirements.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -6,12 +6,12 @@ The tracking issue for this feature is: [#44493]\n \n ------------------------\n The `infer_outlives_requirements` feature indicates that certain\n-outlives requirements can be infered by the compiler rather than\n+outlives requirements can be inferred by the compiler rather than\n stating them explicitly.\n \n For example, currently generic struct definitions that contain\n references, require where-clauses of the form T: 'a. By using\n-this feature the outlives predicates will be infered, although\n+this feature the outlives predicates will be inferred, although\n they may still be written explicitly.\n \n ```rust,ignore (pseudo-Rust)"}, {"sha": "6187f395b0498ebf70c856d2b5d9d26292e25a5e", "filename": "src/doc/unstable-book/src/language-features/infer-static-outlives-requirements.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -6,15 +6,15 @@ The tracking issue for this feature is: [#44493]\n \n ------------------------\n The `infer_static_outlives_requirements` feature indicates that certain\n-`'static` outlives requirements can be infered by the compiler rather than\n+`'static` outlives requirements can be inferred by the compiler rather than\n stating them explicitly.\n \n Note: It is an accompanying feature to `infer_outlives_requirements`,\n which must be enabled to infer outlives requirements.\n \n For example, currently generic struct definitions that contain\n references, require where-clauses of the form T: 'static. By using\n-this feature the outlives predicates will be infered, although\n+this feature the outlives predicates will be inferred, although\n they may still be written explicitly.\n \n ```rust,ignore (pseudo-Rust)"}, {"sha": "8b46637def01c51417f68fa98323f6bbf251fa79", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"raw_vec_internals\", reason = \"implemention detail\", issue = \"0\")]\n+#![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n #![doc(hidden)]\n \n use core::cmp;"}, {"sha": "2df870a011dcb1c0f4ee3fece0c419558570c939", "filename": "src/libcore/future/future_obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture_obj.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -27,7 +27,7 @@ use task::{Context, Poll};\n /// - The `Future` trait is currently not object safe: The `Future::poll`\n ///   method makes uses the arbitrary self types feature and traits in which\n ///   this feature is used are currently not object safe due to current compiler\n-///   limitations. (See tracking issue for arbitray self types for more\n+///   limitations. (See tracking issue for arbitrary self types for more\n ///   information #44874)\n pub struct LocalFutureObj<'a, T> {\n     ptr: *mut (),\n@@ -102,7 +102,7 @@ impl<'a, T> Drop for LocalFutureObj<'a, T> {\n /// - The `Future` trait is currently not object safe: The `Future::poll`\n ///   method makes uses the arbitrary self types feature and traits in which\n ///   this feature is used are currently not object safe due to current compiler\n-///   limitations. (See tracking issue for arbitray self types for more\n+///   limitations. (See tracking issue for arbitrary self types for more\n ///   information #44874)\n pub struct FutureObj<'a, T>(LocalFutureObj<'a, T>);\n "}, {"sha": "86b27d91886d2c526fd3c61e5df168566e67bc99", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -2291,7 +2291,7 @@ impl<T: ?Sized> *mut T {\n ///\n /// If we ever decide to make it possible to call the intrinsic with `a` that is not a\n /// power-of-two, it will probably be more prudent to just change to a naive implementation rather\n-/// than trying to adapt this to accomodate that change.\n+/// than trying to adapt this to accommodate that change.\n ///\n /// Any questions go to @nagisa.\n #[lang=\"align_offset\"]"}, {"sha": "05d98d3a59958024d9c775fb47ced66a8b3be73e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1680,7 +1680,7 @@ impl<T> [T] {\n         }\n     }\n \n-    /// Function to calculate lenghts of the middle and trailing slice for `align_to{,_mut}`.\n+    /// Function to calculate lengths of the middle and trailing slice for `align_to{,_mut}`.\n     fn align_to_offsets<U>(&self) -> (usize, usize) {\n         // What we gonna do about `rest` is figure out what multiple of `U`s we can put in a\n         // lowest number of `T`s. And how many `T`s we need for each such \"multiple\".\n@@ -1740,7 +1740,7 @@ impl<T> [T] {\n         (us_len, ts_len)\n     }\n \n-    /// Transmute the slice to a slice of another type, ensuring aligment of the types is\n+    /// Transmute the slice to a slice of another type, ensuring alignment of the types is\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n@@ -1793,7 +1793,7 @@ impl<T> [T] {\n         }\n     }\n \n-    /// Transmute the slice to a slice of another type, ensuring aligment of the types is\n+    /// Transmute the slice to a slice of another type, ensuring alignment of the types is\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle"}, {"sha": "1bac6d22d37441effd48a7ef1e4b0755c8c67979", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -154,7 +154,7 @@ pub struct Parser<'a> {\n     style: Option<usize>,\n     /// How many newlines have been seen in the string so far, to adjust the error spans\n     seen_newlines: usize,\n-    /// Start and end byte offset of every successfuly parsed argument\n+    /// Start and end byte offset of every successfully parsed argument\n     pub arg_places: Vec<(usize, usize)>,\n }\n "}, {"sha": "015be2dea2157205d6fd6b1eb3426bd42eace040", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -142,7 +142,7 @@ mod imp {\n \n #[repr(C)]\n pub struct _ThrowInfo {\n-    pub attribues: c_uint,\n+    pub attributes: c_uint,\n     pub pnfnUnwind: imp::ptr_t,\n     pub pForwardCompat: imp::ptr_t,\n     pub pCatchableTypeArray: imp::ptr_t,\n@@ -178,7 +178,7 @@ pub struct _TypeDescriptor {\n }\n \n static mut THROW_INFO: _ThrowInfo = _ThrowInfo {\n-    attribues: 0,\n+    attributes: 0,\n     pnfnUnwind: ptr!(0),\n     pForwardCompat: ptr!(0),\n     pCatchableTypeArray: ptr!(0),"}, {"sha": "656819880b135271f142c5856e6786d5d0253180", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -12,7 +12,7 @@\n //!\n //! This library, provided by the standard distribution, provides the types\n //! consumed in the interfaces of procedurally defined macro definitions such as\n-//! function-like macros `#[proc_macro]`, macro attribures `#[proc_macro_attribute]` and\n+//! function-like macros `#[proc_macro]`, macro attributes `#[proc_macro_attribute]` and\n //! custom derive attributes`#[proc_macro_derive]`.\n //!\n //! Note that this crate is intentionally bare-bones currently."}, {"sha": "b56da8f63042474469299bdbefae614dc1aad0eb", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -49,7 +49,7 @@ pub mod query_result;\n mod substitute;\n \n /// A \"canonicalized\" type `V` is one where all free inference\n-/// variables have been rewriten to \"canonical vars\". These are\n+/// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct Canonical<'gcx, V> {"}, {"sha": "d458d62e738c3b95ff735223a0064357031dee1b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             value.push_highlighted(\"<\");\n         }\n \n-        // Output the lifetimes fot the first type\n+        // Output the lifetimes for the first type\n         let lifetimes = sub.regions()\n             .map(|lifetime| {\n                 let s = lifetime.to_string();"}, {"sha": "bb1c9448132c117b72656f91fe0e871c36d1e555", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -527,7 +527,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n          * we're not careful, it will succeed.\n          *\n          * The reason is that when we walk through the subtyping\n-         * algorith, we begin by replacing `'a` with a skolemized\n+         * algorithm, we begin by replacing `'a` with a skolemized\n          * variable `'1`. We then have `fn(_#0t) <: fn(&'1 int)`. This\n          * can be made true by unifying `_#0t` with `&'1 int`. In the\n          * process, we create a fresh variable for the skolemized"}, {"sha": "3e8b44b87fe74183356f833e4d0ebb4abcabb234", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> ConstValue<'tcx> {\n \n /// A `Value` represents a single self-contained Rust value.\n ///\n-/// A `Value` can either refer to a block of memory inside an allocation (`ByRef`) or to a primitve\n+/// A `Value` can either refer to a block of memory inside an allocation (`ByRef`) or to a primitive\n /// value held directly, outside of any allocation (`Scalar`).  For `ByRef`-values, we remember\n /// whether the pointer is supposed to be aligned or not (also see Place).\n ///"}, {"sha": "54fe30e609d3831f91eb234792ca3f9a4884eff4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -927,11 +927,11 @@ pub enum TerminatorKind<'tcx> {\n     ///   Drop(P, goto BB1, unwind BB2)\n     /// }\n     /// BB1 {\n-    ///   // P is now unitialized\n+    ///   // P is now uninitialized\n     ///   P <- V\n     /// }\n     /// BB2 {\n-    ///   // P is now unitialized -- its dtor panicked\n+    ///   // P is now uninitialized -- its dtor panicked\n     ///   P <- V\n     /// }\n     /// ```"}, {"sha": "c919793fe3e03c38aeca2e498e5d97f15659e3eb", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //      (A, [C])]\n         //\n         // Now that the top of the stack has no successors we can traverse, each item will\n-        // be popped off during iteration until we get back to `A`. This yeilds [E, D, B].\n+        // be popped off during iteration until we get back to `A`. This yields [E, D, B].\n         //\n         // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but\n         // since we've already visited `E`, that child isn't added to the stack. The last"}, {"sha": "a0882f8f92b46adcd9e783bd7b156222db21af15", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -264,12 +264,12 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // The core logic responsible for computing the bounds for our synthesized impl.\n     //\n     // To calculate the bounds, we call SelectionContext.select in a loop. Like FulfillmentContext,\n-    // we recursively select the nested obligations of predicates we encounter. However, whenver we\n+    // we recursively select the nested obligations of predicates we encounter. However, whenever we\n     // encounter an UnimplementedError involving a type parameter, we add it to our ParamEnv. Since\n     // our goal is to determine when a particular type implements an auto trait, Unimplemented\n     // errors tell us what conditions need to be met.\n     //\n-    // This method ends up working somewhat similary to FulfillmentContext, but with a few key\n+    // This method ends up working somewhat similarly to FulfillmentContext, but with a few key\n     // differences. FulfillmentContext works under the assumption that it's dealing with concrete\n     // user code. According, it considers all possible ways that a Predicate could be met - which\n     // isn't always what we want for a synthesized impl. For example, given the predicate 'T:\n@@ -289,11 +289,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // we'll pick up any nested bounds, without ever inferring that 'T: IntoIterator' needs to\n     // hold.\n     //\n-    // One additonal consideration is supertrait bounds. Normally, a ParamEnv is only ever\n+    // One additional consideration is supertrait bounds. Normally, a ParamEnv is only ever\n     // consutrcted once for a given type. As part of the construction process, the ParamEnv will\n     // have any supertrait bounds normalized - e.g. if we have a type 'struct Foo<T: Copy>', the\n     // ParamEnv will contain 'T: Copy' and 'T: Clone', since 'Copy: Clone'. When we construct our\n-    // own ParamEnv, we need to do this outselves, through traits::elaborate_predicates, or else\n+    // own ParamEnv, we need to do this ourselves, through traits::elaborate_predicates, or else\n     // SelectionContext will choke on the missing predicates. However, this should never show up in\n     // the final synthesized generics: we don't want our generated docs page to contain something\n     // like 'T: Copy + Clone', as that's redundant. Therefore, we keep track of a separate"}, {"sha": "fb095517040183aa8b59478e9ac18371a0461332", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -652,7 +652,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is\n-                        // implemented, and fallback has occured, then it could be due to a\n+                        // implemented, and fallback has occurred, then it could be due to a\n                         // variable that used to fallback to `()` now falling back to `!`. Issue a\n                         // note informing about the change in behaviour.\n                         if trait_predicate.skip_binder().self_ty().is_never()"}, {"sha": "3a1d50a6584ef5f6e0494dc444d87c2782cd3e6a", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -82,7 +82,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         // Errors and ambiuity in dropck occur in two cases:\n         // - unresolved inference variables at the end of typeck\n         // - non well-formed types where projections cannot be resolved\n-        // Either of these should hvae created an error before.\n+        // Either of these should have created an error before.\n         tcx.sess\n             .delay_span_bug(span, \"dtorck encountered internal error\");\n         return InferOk {"}, {"sha": "ee0543f53ba6928cc01bf5a53241639c56e20fcf", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -892,7 +892,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub(crate) queries: query::Queries<'tcx>,\n \n-    // Records the free variables refrenced by every closure\n+    // Records the free variables referenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n     freevars: FxHashMap<DefId, Lrc<Vec<hir::Freevar>>>,"}, {"sha": "4902356321c36f2a30870f9046ff8cc84048dd56", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1503,7 +1503,7 @@ impl UniverseIndex {\n \n     /// Creates a universe index from the given integer.  Not to be\n     /// used lightly lest you pick a bad value. But sometimes we\n-    /// convert universe indicies into integers and back for various\n+    /// convert universe indices into integers and back for various\n     /// reasons.\n     pub fn from_u32(index: u32) -> Self {\n         UniverseIndex(index)"}, {"sha": "e3b0f8c4570df1fc30d0a2e201018c626d9f9f22", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -262,7 +262,7 @@ where\n         }\n     }\n \n-    // Visit the explict waiters which use condvars and are resumable\n+    // Visit the explicit waiters which use condvars and are resumable\n     for (i, waiter) in query.latch.info.lock().waiters.iter().enumerate() {\n         if let Some(ref waiter_query) = waiter.query {\n             if visit(waiter.span, waiter_query.clone()).is_some() {"}, {"sha": "80e9965e39cd8b9ada6890699072c189185a0756", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -328,7 +328,7 @@ struct AssemblerCommand {\n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]\n pub struct CodegenContext {\n-    // Resouces needed when running LTO\n+    // Resources needed when running LTO\n     pub time_passes: bool,\n     pub lto: Lto,\n     pub no_landing_pads: bool,\n@@ -596,7 +596,7 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                                      -C passes=name-anon-globals to the compiler command line.\");\n                 } else {\n                     bug!(\"We are using thin LTO buffers without running the NameAnonGlobals pass. \\\n-                         This will likely cause errors in LLVM and shoud never happen.\");\n+                         This will likely cause errors in LLVM and should never happen.\");\n                 }\n             }\n         }"}, {"sha": "02de5874672776537c357cfedbfd7e9de0f3c396", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -656,7 +656,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     llargs.push(b);\n                     return;\n                 }\n-                _ => bug!(\"codegen_argument: {:?} invalid for pair arugment\", op)\n+                _ => bug!(\"codegen_argument: {:?} invalid for pair argument\", op)\n             }\n         } else if arg.is_unsized_indirect() {\n             match op.val {"}, {"sha": "6989cdc0a9a15afaf1e545cb3a10068f918d40b5", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -26,7 +26,7 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_queries) is false.\n //!\n-//! `MTRef` is a immutable refernce if cfg!(parallel_queries), and an mutable reference otherwise.\n+//! `MTRef` is a immutable reference if cfg!(parallel_queries), and an mutable reference otherwise.\n //!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_queries).\n@@ -432,7 +432,7 @@ impl<T> Once<T> {\n     /// closures may concurrently be computing a value which the inner value should take.\n     /// Only one of these closures are used to actually initialize the value.\n     /// If some other closure already set the value, we assert that it our closure computed\n-    /// a value equal to the value aready set and then\n+    /// a value equal to the value already set and then\n     /// we return the value our closure computed wrapped in a `Option`.\n     /// If our closure set the value, `None` is returned.\n     /// If the value is already initialized, the closure is not called and `None` is returned."}, {"sha": "c3cdeda686079186e1b83aa77ae9364b37ecb821", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -889,7 +889,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // NB. this has an edge case with non-returning statements,\n         // like `loop {}` or `panic!()`: control flow never reaches\n         // the exit node through these, so one can have a function\n-        // that never actually calls itselfs but is still picked up by\n+        // that never actually calls itself but is still picked up by\n         // this lint:\n         //\n         //     fn f(cond: bool) {"}, {"sha": "eb2b3479401ebc24e7513bee02f475b18246c1a3", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -486,7 +486,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // Protect against infinite recursion, for example\n         // `struct S(*mut S);`.\n         // FIXME: A recursion limit is necessary as well, for irregular\n-        // recusive types.\n+        // recursive types.\n         if !cache.insert(ty) {\n             return FfiSafe;\n         }"}, {"sha": "446ea6c32444184d4a2a06032650187107965e6f", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n             }\n         }\n \n-        // Update kind and, optionally, the name of all native libaries\n+        // Update kind and, optionally, the name of all native libraries\n         // (there may be more than one) with the specified name.\n         for &(ref name, ref new_name, kind) in &self.tcx.sess.opts.libs {\n             let mut found = false;"}, {"sha": "dc37c21fdabeba60a0819f9cab69a9bce4410c85", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -541,7 +541,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cg, 'cx, 'tcx, 'gcx> {\n                             // unique or mutable borrows are invalidated by writes.\n                             // Reservations count as writes since we need to check\n                             // that activating the borrow will be OK\n-                            // TOOD(bob_twinkles) is this actually the right thing to do?\n+                            // FIXME(bob_twinkles) is this actually the right thing to do?\n                             this.generate_invalidates(borrow_index, context.loc);\n                         }\n                 }"}, {"sha": "2a78feed84915bf10b269acdf2ca0c7cc5748ab0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -783,7 +783,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// predicates, or otherwise uses the inference context, executes\n     /// `op` and then executes all the further obligations that `op`\n     /// returns. This will yield a set of outlives constraints amongst\n-    /// regions which are extracted and stored as having occured at\n+    /// regions which are extracted and stored as having occurred at\n     /// `locations`.\n     ///\n     /// **Any `rustc::infer` operations that might generate region"}, {"sha": "85abec7e7acc4daf8485e20b31ff38d632c28bd5", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -83,7 +83,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n     // Our invariant is, that at each step of the iteration:\n     //  - If we didn't run out of access to match, our borrow and access are comparable\n     //    and either equal or disjoint.\n-    //  - If we did run out of accesss, the borrow can access a part of it.\n+    //  - If we did run out of access, the borrow can access a part of it.\n     loop {\n         // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n         if let Some(borrow_c) = borrow_components.next() {"}, {"sha": "116cefea175444496f8135faa5a6d18281c5152e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -605,7 +605,7 @@ pub trait BitDenotation: BitwiseOperator {\n     /// `sets.on_entry` to that local clone into `statement_effect` and\n     /// `terminator_effect`).\n     ///\n-    /// When its false, no local clone is constucted; instead a\n+    /// When it's false, no local clone is constructed; instead a\n     /// reference directly into `on_entry` is passed along via\n     /// `sets.on_entry` instead, which represents the flow state at\n     /// the block's start, not necessarily the state immediately prior"}, {"sha": "5517ed145546d069c220f42d6aa3230506016e17", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substituted)\n     }\n \n-    /// Return the size and aligment of the value at the given type.\n+    /// Return the size and alignment of the value at the given type.\n     /// Note that the value does not matter if the type is sized. For unsized types,\n     /// the value has to be a fat pointer, and we only care about the \"extra\" data in it.\n     pub fn size_and_align_of_dst("}, {"sha": "636b04a8d16da2826b301b8c1d7c4e317ff3b25d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Some(MemoryKind::Stack) => {},\n         }\n         if let Some(mut alloc) = alloc {\n-            // ensure llvm knows not to put this into immutable memroy\n+            // ensure llvm knows not to put this into immutable memory\n             alloc.runtime_mutability = mutability;\n             let alloc = self.tcx.intern_const_alloc(alloc);\n             self.tcx.alloc_map.lock().set_id_memory(alloc_id, alloc);"}, {"sha": "5062775fec168c6c7bd50dd94b464eaeaa3ba849", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -704,7 +704,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *unwind = Some(self.update_target(tgt));\n                 } else if !self.in_cleanup_block {\n                     // Unless this drop is in a cleanup block, add an unwind edge to\n-                    // the orignal call's cleanup block\n+                    // the original call's cleanup block\n                     *unwind = self.cleanup_block;\n                 }\n             }\n@@ -716,7 +716,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *cleanup = Some(self.update_target(tgt));\n                 } else if !self.in_cleanup_block {\n                     // Unless this call is in a cleanup block, add an unwind edge to\n-                    // the orignal call's cleanup block\n+                    // the original call's cleanup block\n                     *cleanup = self.cleanup_block;\n                 }\n             }\n@@ -726,7 +726,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *cleanup = Some(self.update_target(tgt));\n                 } else if !self.in_cleanup_block {\n                     // Unless this assert is in a cleanup block, add an unwind edge to\n-                    // the orignal call's cleanup block\n+                    // the original call's cleanup block\n                     *cleanup = self.cleanup_block;\n                 }\n             }"}, {"sha": "bb66b9ed6ece8759e6900e3e04f1cd8f45c1e8c4", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(_, Rvalue::Ref(_, _, ref mut place)) => {\n-                            // Find the underlying local for this (necessarilly interior) borrow.\n+                            // Find the underlying local for this (necessarily interior) borrow.\n                             // HACK(eddyb) using a recursive function because of mutable borrows.\n                             fn interior_base<'a, 'tcx>(place: &'a mut Place<'tcx>)\n                                                        -> &'a mut Place<'tcx> {"}, {"sha": "4e9e085ca08a39c6158b8ff8cd7c32bd9c2993b9", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -190,7 +190,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                                 let local_use = &visitor.locals_use[*local];\n                                 let opt_index_and_place = Self::try_get_item_source(local_use, mir);\n                                 // each local should be used twice:\n-                                //  in assign and in aggregate statments\n+                                //  in assign and in aggregate statements\n                                 if local_use.use_count == 2 && opt_index_and_place.is_some() {\n                                     let (index, src_place) = opt_index_and_place.unwrap();\n                                     return Some((local_use, index, src_place));\n@@ -231,15 +231,15 @@ impl RestoreSubsliceArrayMoveOut {\n         if opt_size.is_some() && items.iter().all(\n             |l| l.is_some() && l.unwrap().2 == opt_src_place.unwrap()) {\n \n-            let indicies: Vec<_> = items.iter().map(|x| x.unwrap().1).collect();\n-            for i in 1..indicies.len() {\n-                if indicies[i - 1] + 1 != indicies[i] {\n+            let indices: Vec<_> = items.iter().map(|x| x.unwrap().1).collect();\n+            for i in 1..indices.len() {\n+                if indices[i - 1] + 1 != indices[i] {\n                     return;\n                 }\n             }\n \n-            let min = *indicies.first().unwrap();\n-            let max = *indicies.last().unwrap();\n+            let min = *indices.first().unwrap();\n+            let max = *indices.last().unwrap();\n \n             for item in items {\n                 let locals_use = item.unwrap().0;"}, {"sha": "bf835f5f0d9ad4edd7f5a2bf2f64bf57ce49a50f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -459,7 +459,7 @@ fn write_scope_tree(\n     let indent = depth * INDENT.len();\n \n     let children = match scope_tree.get(&parent) {\n-        Some(childs) => childs,\n+        Some(children) => children,\n         None => return Ok(()),\n     };\n "}, {"sha": "b56cc5fad069dcc6fa852fce94cef5fa4961bfcc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -201,7 +201,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                     if let Some(impl_span) = maybe_impl_defid.map_or(None,\n                             |def_id| resolver.definitions.opt_span(def_id)) {\n                         err.span_label(reduce_impl_span_to_impl_keyword(cm, impl_span),\n-                                    \"`Self` type implicitely declared here, on the `impl`\");\n+                                    \"`Self` type implicitly declared here, on the `impl`\");\n                     }\n                 },\n                 Def::TyParam(typaram_defid) => {"}, {"sha": "973580bcbe9045fc2aa888f482447b7fb26c53f9", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -81,7 +81,7 @@ fn dropck_outlives<'tcx>(\n         // into the types of its fields `(B, Vec<A>)`. These will get\n         // pushed onto the stack. Eventually, expanding `Vec<A>` will\n         // lead to us trying to push `A` a second time -- to prevent\n-        // infinite recusion, we notice that `A` was already pushed\n+        // infinite recursion, we notice that `A` was already pushed\n         // once and stop.\n         let mut ty_stack = vec![(for_ty, 0)];\n "}, {"sha": "f0afc58b3cec57a6420cbbcd9422042a038290c2", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -121,7 +121,7 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     // Replace all regions inside the generator interior with late bound regions\n     // Note that each region slot in the types gets a new fresh late bound region,\n     // which means that none of the regions inside relate to any other, even if\n-    // typeck had previously found contraints that would cause them to be related.\n+    // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n     let type_list = fcx.tcx.fold_regions(&type_list, &mut false, |_, current_depth| {\n         counter += 1;"}, {"sha": "c8a8ca4fc3038a0d3dd845a2eaf38fe72bf7f649", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -876,7 +876,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n         fcx.check_casts();\n \n-        // Closure and generater analysis may run after fallback\n+        // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables.\n         fcx.closure_analyze(body);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n@@ -2329,7 +2329,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n-    // The return value indicates whether fallback has occured.\n+    // The return value indicates whether fallback has occurred.\n     fn fallback_if_possible(&self, ty: Ty<'tcx>) -> bool {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};"}, {"sha": "6af939fcf99b7ec54106d2014f624885d5b6eb7e", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1284,7 +1284,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         // how all the types get adjusted.)\n         match ref_kind {\n             ty::ImmBorrow => {\n-                // The reference being reborrowed is a sharable ref of\n+                // The reference being reborrowed is a shareable ref of\n                 // type `&'a T`. In this case, it doesn't matter where we\n                 // *found* the `&T` pointer, the memory it references will\n                 // be valid and immutable for `'a`. So we can stop here."}, {"sha": "e87183f847321ee6833e24e048c7980ed48799cc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -516,7 +516,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     }\n \n     fn visit_node_id(&mut self, span: Span, hir_id: hir::HirId) {\n-        // Export associated path extensions and method resultions.\n+        // Export associated path extensions and method resolutions.\n         if let Some(def) = self.fcx\n             .tables\n             .borrow_mut()"}, {"sha": "11260b8f11e12c6a9386e9dad1b224298050a090", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -152,7 +152,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // }\n     // ```\n     //\n-    // In a concession to backwards compatbility, we continue to\n+    // In a concession to backwards compatibility, we continue to\n     // permit those, so long as the lifetimes aren't used in\n     // associated types. I believe this is sound, because lifetimes\n     // used elsewhere are not projected back out."}, {"sha": "de5a680ccf9d1625cede99f4e723100248406739", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -824,7 +824,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n     // In fact, the iteration of an FxHashMap can even vary between platforms,\n     // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n     //\n-    // Obviously, it's extremely undesireable for documentation rendering\n+    // Obviously, it's extremely undesirable for documentation rendering\n     // to be depndent on the platform it's run on. Apart from being confusing\n     // to end users, it makes writing tests much more difficult, as predicates\n     // can appear in any order in the final result.\n@@ -836,7 +836,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n     // predicates and bounds, however, we ensure that for a given codebase, all\n     // auto-trait impls always render in exactly the same way.\n     //\n-    // Using the Debug impementation for sorting prevents us from needing to\n+    // Using the Debug implementation for sorting prevents us from needing to\n     // write quite a bit of almost entirely useless code (e.g. how should two\n     // Types be sorted relative to each other). It also allows us to solve the\n     // problem for both WherePredicates and GenericBounds at the same time. This"}, {"sha": "f90f1e54da22c375c4f43559e39e492499295c7e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -31,7 +31,7 @@ pub enum Cfg {\n     True,\n     /// Denies all configurations.\n     False,\n-    /// A generic configration option, e.g. `test` or `target_os = \"linux\"`.\n+    /// A generic configuration option, e.g. `test` or `target_os = \"linux\"`.\n     Cfg(Symbol, Option<Symbol>),\n     /// Negate a configuration requirement, i.e. `not(x)`.\n     Not(Box<Cfg>),"}, {"sha": "4caea56faad3408ac499dd50bc4dfd913c62ff52", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -315,7 +315,7 @@ pub struct Cache {\n     // the access levels from crateanalysis.\n     pub access_levels: Arc<AccessLevels<DefId>>,\n \n-    /// The version of the crate being documented, if given fron the `--crate-version` flag.\n+    /// The version of the crate being documented, if given from the `--crate-version` flag.\n     pub crate_version: Option<String>,\n \n     // Private fields only used when initially crawling a crate to build a cache"}, {"sha": "cadb5c0ba5d0e019b5a1156512e5c97b1a466cf0", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -88,7 +88,7 @@ where\n /// This function acquires exclusive access to the task context.\n ///\n /// Panics if no task has been set or if the task context has already been\n-/// retrived by a surrounding call to get_task_cx.\n+/// retrieved by a surrounding call to get_task_cx.\n pub fn get_task_cx<F, R>(f: F) -> R\n where\n     F: FnOnce(&mut task::Context) -> R"}, {"sha": "77bc7e946eb41bfd4419ec704c1859c14eced5b8", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -889,7 +889,7 @@ impl<W: Write> Write for LineWriter<W> {\n \n         // Find the last newline character in the buffer provided. If found then\n         // we're going to write all the data up to that point and then flush,\n-        // otherewise we just write the whole block to the underlying writer.\n+        // otherwise we just write the whole block to the underlying writer.\n         let i = match memchr::memrchr(b'\\n', buf) {\n             Some(i) => i,\n             None => return self.inner.write(buf),"}, {"sha": "c28f3da98cea95952d5d94c7cf2a6ba1d1e2c9c7", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -57,7 +57,7 @@ pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n \n #[cfg(test)]\n mod tests {\n-    // test the implementations for the current plattform\n+    // test the implementations for the current platform\n     use super::{memchr, memrchr};\n \n     #[test]"}, {"sha": "f258ff073e2a7fa390b554bf87c18f317e1e9f93", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -176,7 +176,7 @@ impl Once {\n     /// happens-before relation between the closure and code executing after the\n     /// return).\n     ///\n-    /// If the given closure recusively invokes `call_once` on the same `Once`\n+    /// If the given closure recursively invokes `call_once` on the same `Once`\n     /// instance the exact behavior is not specified, allowed outcomes are\n     /// a panic or a deadlock.\n     ///"}, {"sha": "1d5b0cfa94ad549e9252ed00b7fe2a5d9e812b57", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -857,7 +857,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     use sync::atomic::{AtomicBool, Ordering};\n \n     // Kernel prior to 4.5 don't have copy_file_range\n-    // We store the availability in a global to avoid unneccessary syscalls\n+    // We store the availability in a global to avoid unnecessary syscalls\n     static HAS_COPY_FILE_RANGE: AtomicBool = AtomicBool::new(true);\n \n     unsafe fn copy_file_range("}, {"sha": "8c73fe8c6129f12813d97abee98e8304b28dd287", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -35,7 +35,7 @@ use libc::SOCK_CLOEXEC;\n #[cfg(not(target_os = \"linux\"))]\n const SOCK_CLOEXEC: c_int = 0;\n \n-// Another conditional contant for name resolution: Macos et iOS use\n+// Another conditional constant for name resolution: Macos et iOS use\n // SO_NOSIGPIPE as a setsockopt flag to disable SIGPIPE emission on socket.\n // Other platforms do otherwise.\n #[cfg(target_vendor = \"apple\")]"}, {"sha": "06e4087171a83fa07deda30fd8707ba234d82572", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // we'll be able to immediately resolve most of imported macros.\n         self.resolve_imports();\n \n-        // Resolve paths in all invocations and produce ouput expanded fragments for them, but\n+        // Resolve paths in all invocations and produce output expanded fragments for them, but\n         // do not insert them into our input AST fragment yet, only store in `expanded_fragments`.\n         // The output fragments also go through expansion recursively until no invocations are left.\n         // Unresolved macros produce dummy outputs as a recovery measure."}, {"sha": "7d98fa661c039f44000a51d6d9d79290ba0d6cad", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -637,7 +637,7 @@ pub fn parse(\n \n     // A queue of possible matcher positions. We initialize it with the matcher position in which\n     // the \"dot\" is before the first token of the first token tree in `ms`. `inner_parse_loop` then\n-    // processes all of these possible matcher positions and produces posible next positions into\n+    // processes all of these possible matcher positions and produces possible next positions into\n     // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`\n     // and we start over again.\n     //\n@@ -726,7 +726,7 @@ pub fn parse(\n                 ),\n             );\n         }\n-        // If there are no posible next positions AND we aren't waiting for the black-box parser,\n+        // If there are no possible next positions AND we aren't waiting for the black-box parser,\n         // then their is a syntax error.\n         else if bb_items.is_empty() && next_items.is_empty() {\n             return Failure(parser.span, parser.token);"}, {"sha": "cc635a29275fabaae849e8b23bb0c44b469add54", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -323,7 +323,7 @@ where\n             }\n \n             // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n-            // metavariable that names the crate of the invokation.\n+            // metavariable that names the crate of the invocation.\n             Some(tokenstream::TokenTree::Token(ident_span, ref token)) if token.is_ident() => {\n                 let (ident, is_raw) = token.ident().unwrap();\n                 let span = ident_span.with_lo(span.lo());"}, {"sha": "5467bab33f90dce786bac049579fb585c2fd7bde", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -3535,8 +3535,8 @@ impl<'a> Parser<'a> {\n                         if arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n                             && expr_lines.lines.len() == 2\n                             && self.token == token::FatArrow => {\n-                            // We check wether there's any trailing code in the parse span, if there\n-                            // isn't, we very likely have the following:\n+                            // We check whether there's any trailing code in the parse span,\n+                            // if there isn't, we very likely have the following:\n                             //\n                             // X |     &Y => \"y\"\n                             //   |        --    - missing comma\n@@ -3934,7 +3934,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// A wrapper around `parse_pat` with some special error handling for the\n-    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contast\n+    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n     /// to subpatterns within such).\n     fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n         let pat = self.parse_pat()?;\n@@ -4322,7 +4322,7 @@ impl<'a> Parser<'a> {\n     // If `break_on_semi` is `Break`, then we will stop consuming tokens after\n     // finding (and consuming) a `;` outside of `{}` or `[]` (note that this is\n     // approximate - it can mean we break too early due to macros, but that\n-    // shoud only lead to sub-optimal recovery, not inaccurate parsing).\n+    // should only lead to sub-optimal recovery, not inaccurate parsing).\n     //\n     // If `break_on_block` is `Break`, then we will stop consuming tokens\n     // after finding (and consuming) a brace-delimited block.\n@@ -4887,7 +4887,7 @@ impl<'a> Parser<'a> {\n     fn parse_generic_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         loop {\n-            // This needs to be syncronized with `Token::can_begin_bound`.\n+            // This needs to be synchronized with `Token::can_begin_bound`.\n             let is_bound_start = self.check_path() || self.check_lifetime() ||\n                                  self.check(&token::Question) ||\n                                  self.check_keyword(keywords::For) ||"}, {"sha": "bebf20b1a3855b1ef115b89a52deb244d23ea53e", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -117,7 +117,7 @@ struct Context<'a, 'b: 'a> {\n     invalid_refs: Vec<(usize, usize)>,\n     /// Spans of all the formatting arguments, in order.\n     arg_spans: Vec<Span>,\n-    /// Wether this formatting string is a literal or it comes from a macro.\n+    /// Whether this formatting string is a literal or it comes from a macro.\n     is_literal: bool,\n }\n "}, {"sha": "6b4684e14fcfe50d4513bb2b43cb981fa961cb3d", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -586,7 +586,7 @@ impl InternedString {\n         });\n         // This is safe because the interner keeps string alive until it is dropped.\n         // We can access it because we know the interner is still alive since we use a\n-        // scoped thread local to access it, and it was alive at the begining of this scope\n+        // scoped thread local to access it, and it was alive at the beginning of this scope\n         unsafe { f(&*str) }\n     }\n "}, {"sha": "2951ee4f6c94bf7f56b8efea7df0dd9f9cf58ec4", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -28,7 +28,7 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     let _: (char, u32) = Trait::without_default_impl(0);\n \n     // Currently, no object code is generated for trait methods with default\n-    // implemenations, unless they are actually called from somewhere. Therefore\n+    // implementations, unless they are actually called from somewhere. Therefore\n     // we cannot import the implementations and have to create our own inline.\n     //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl[0]<u32>\n     let _ = Trait::with_default_impl(0u32);"}, {"sha": "f46d906d865a8bccdeb87282d2610b0fd47d7b0b", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // This crate attempts to enumerate the various scenarios for how a\n-// type can define fields and methods with various visiblities and\n+// type can define fields and methods with various visibilities and\n // stabilities.\n //\n // The basic stability pattern in this file has four cases:\n@@ -23,7 +23,7 @@\n //\n // However, since stability attributes can only be observed in\n // cross-crate linkage scenarios, there is little reason to take the\n-// cross-product (4 stability cases * 4 visiblity cases), because the\n+// cross-product (4 stability cases * 4 visibility cases), because the\n // first three visibility cases cannot be accessed outside this crate,\n // and therefore stability is only relevant when the visibility is pub\n // to the whole universe."}, {"sha": "c7d5574f909f208f3a959a24a04b881ea6e347c1", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:runned an unexported test\n+// error-pattern:ran an unexported test\n // compile-flags:--test\n // check-stdout\n \n@@ -17,6 +17,6 @@ mod m {\n \n     #[test]\n     fn unexported() {\n-        panic!(\"runned an unexported test\");\n+        panic!(\"ran an unexported test\");\n     }\n }"}, {"sha": "3412c8ce1f5820b3d5e7c9ecf6b230d300c9ef68", "filename": "src/test/run-make-fulldeps/hir-tree/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# Test that hir-tree output doens't crash and includes\n+# Test that hir-tree output doesn't crash and includes\n # the string constant we would expect to see.\n \n all:"}, {"sha": "b669f9cedc1e9d485fb40429dc869a04e9c7a8ce", "filename": "src/test/run-make-fulldeps/rustdoc-error-lines/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# Test that hir-tree output doens't crash and includes\n+# Test that hir-tree output doesn't crash and includes\n # the string constant we would expect to see.\n \n all:"}, {"sha": "4b7fece36d92a9e386ce14707ec2657b7a1a7688", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -3,7 +3,7 @@\n LOG := $(TMPDIR)/log.txt\n \n # This test builds a shared object, then an executable that links it as a native\n-# rust library (constrast to an rlib). The shared library and executable both\n+# rust library (contrast to an rlib). The shared library and executable both\n # are compiled with address sanitizer, and we assert that a fault in the cdylib\n # is correctly detected.\n "}, {"sha": "97f617214222427b86312ac3105a38c544af6fe1", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -3,7 +3,7 @@\n LOG := $(TMPDIR)/log.txt\n \n # This test builds a shared object, then an executable that links it as a native\n-# rust library (constrast to an rlib). The shared library and executable both\n+# rust library (contrast to an rlib). The shared library and executable both\n # are compiled with address sanitizer, and we assert that a fault in the dylib\n # is correctly detected.\n "}, {"sha": "5f915a762d1492e4eecc3582b6c12a50c6f7a79b", "filename": "src/test/run-pass/dropck_legal_cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -385,7 +385,7 @@ pub fn main() {\n     // RwLock (since we can grab the child pointers in read-only\n     // mode), but we cannot lock a std::sync::Mutex to guard reading\n     // from each node via the same pattern, since once you hit the\n-    // cycle, you'll be trying to acquring the same lock twice.\n+    // cycle, you'll be trying to acquiring the same lock twice.\n     // (We deal with this by exiting the traversal early if try_lock fails.)\n \n     // Cycle 12: { arc0 -> (arc1, arc2), arc1 -> (), arc2 -> arc0 }, refcells"}, {"sha": "37436d7ae0042cbeda01beabee0e88871dd6234e", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -310,7 +310,7 @@ fn test_order() {\n }\n \n fn test_once() {\n-    // Make sure each argument are evaluted only once even though it may be\n+    // Make sure each argument are evaluated only once even though it may be\n     // formatted multiple times\n     fn foo() -> isize {\n         static mut FOO: isize = 0;"}, {"sha": "04ffad501b042e406ee2bb75d308c25bb4f64e3e", "filename": "src/test/run-pass/issue-15881-model-lexer-dotdotdot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n     }\n     match 'c' {\n       'a'...'z' => {}\n-      _ => panic!(\"should suppport char ranges\")\n+      _ => panic!(\"should support char ranges\")\n     }\n     match -3_isize {\n       -7...5 => {}"}, {"sha": "5727f54cd7046db4228cf73d46c6a9079939de36", "filename": "src/test/run-pass/issue-20616.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20616.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -26,7 +26,7 @@ type TypeD = TypeA<'static>;\n // trailing comma on lifetime bounds\n type TypeE = TypeA<'static,>;\n \n-// normal type arugment\n+// normal type argument\n type TypeF<T> = Box<T>;\n \n // type argument with trailing comma"}, {"sha": "3bc0f7a0fdee8f3eae3b733dbeec64f33a451f13", "filename": "src/test/run-pass/issue-33903.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-33903.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-33903.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33903.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -11,7 +11,7 @@\n // Issue 33903:\n // Built-in indexing should be used even when the index is not\n // trivially an integer\n-// Only built-in indexing can be used in constant expresssions\n+// Only built-in indexing can be used in constant expressions\n \n const FOO: i32 = [12, 34][0 + 1];\n "}, {"sha": "46aeb329c896babd7e83b4b40b91acc4888541b2", "filename": "src/test/run-pass/issue-48962.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fissue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-48962.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we are able to reinitilize box with moved referent\n+// Test that we are able to reinitialize box with moved referent\n #![feature(nll)]\n static mut ORDER: [usize; 3] = [0, 0, 0];\n static mut INDEX: usize = 0;"}, {"sha": "efa725321967d20ca603d11fb131fd4ace262ebe", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     }\n     match 'c' {\n       'a'..='z' => {}\n-      _ => panic!(\"should suppport char ranges\")\n+      _ => panic!(\"should support char ranges\")\n     }\n     match -3 {\n       -7..=5 => {}"}, {"sha": "bedcee43db5ba511a9ff54822257f843198eef7d", "filename": "src/test/run-pass/match-reassign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fmatch-reassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fmatch-reassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-reassign.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Regression test for #23698: The reassignment checker only cared\n-// about the last assigment in a match arm body\n+// about the last assignment in a match arm body\n \n // Use an extra function to make sure no extra assignments\n // are introduced by macros in the match statement"}, {"sha": "9d23a0c71489a8187e19522111d07c585a3f55a0", "filename": "src/test/run-pass/packed-struct-optimized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -26,7 +26,7 @@ fn sanity_check_size<T: Copy>(one: T) {\n \n fn main() {\n     // This can fail if rustc and LLVM disagree on the size of a type.\n-    // In this case, `Option<Packed<(&(), u32)>>` was erronously not\n+    // In this case, `Option<Packed<(&(), u32)>>` was erroneously not\n     // marked as packed despite needing alignment `1` and containing\n     // its `&()` discriminant, which has alignment larger than `1`.\n     sanity_check_size((Some(Packed((&(), 0))), true));"}, {"sha": "ad099f82d13b97ffec795ccb46839952f3ecc040", "filename": "src/test/run-pass/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -33,7 +33,7 @@ extern fn send_signal() {\n \n fn main() {\n     unsafe {\n-        // Install signal hander that runs on alternate signal stack.\n+        // Install signal handler that runs on alternate signal stack.\n         let mut action: sigaction = std::mem::zeroed();\n         action.sa_flags = (SA_ONSTACK | SA_SIGINFO) as _;\n         action.sa_sigaction = signal_handler as sighandler_t;"}, {"sha": "3fce62529c78f348bce7b88e62a21cfe6a032af0", "filename": "src/test/rustdoc/inline_cross/auxiliary/macro-vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_name = \"qwop\"]\n \n-/// (writen on a spider's web) Some Macro\n+/// (written on a spider's web) Some Macro\n #[macro_export]\n macro_rules! some_macro {\n     () => {"}, {"sha": "9f1df14605b693440d1ce15179fa50f3b17e359a", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that the user gets an errror if they omit a binding from an\n+// Check that the user gets an error if they omit a binding from an\n // object type.\n \n pub trait Foo {"}, {"sha": "5ed425e958a584aa720929f113881be2e91e615b", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -19,7 +19,7 @@\n // revisions: ast migrate nll\n \n // Since we are testing nll (and migration) explicitly as a separate\n-// revisions, dont worry about the --compare-mode=nll on this test.\n+// revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n "}, {"sha": "b53ef0f5ba823986f5ec9f80a7f04eae2a137a92", "filename": "src/test/ui/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// We need to opt inot the `!` feature in order to trigger the\n+// We need to opt into the `!` feature in order to trigger the\n // requirement that this is testing.\n #![feature(never_type)]\n "}, {"sha": "b088e8330e998dfeed32b00701f141e85cc40255", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -24,7 +24,7 @@ error[E0401]: can't use type parameters from outer function\n   --> $DIR/E0401.rs:32:25\n    |\n LL | impl<T> Iterator for A<T> {\n-   | ---- `Self` type implicitely declared here, on the `impl`\n+   | ---- `Self` type implicitly declared here, on the `impl`\n ...\n LL |         fn helper(sel: &Self) -> u8 { //~ ERROR E0401\n    |            ------       ^^^^ use of type variable from outer function"}, {"sha": "1ae7ed268ebf8567745f4806e8ec4407e61c9e0b", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// `#[macro_export] macro_rules` that doen't originate from macro expansions can be placed\n+// `#[macro_export] macro_rules` that doesn't originate from macro expansions can be placed\n // into the root module soon enough to act as usual items and shadow globs and preludes.\n \n #![feature(decl_macro)]"}, {"sha": "418754b9a244676ad096606bcb66babe270fb019", "filename": "src/test/ui/issues/issue-31845.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-31845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-31845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Checks lexical scopes cannot see through normal module boundries\n+// Checks lexical scopes cannot see through normal module boundaries\n \n fn f() {\n     fn g() {}"}, {"sha": "8624dbd28dceb4b4764bbbe55ef50daf7ec61b4c", "filename": "src/test/ui/issues/issue-45696-no-variant-box-recur.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -24,7 +24,7 @@\n \n // run-pass\n \n-// This test has structs and functions that are by definiton unusable\n+// This test has structs and functions that are by definition unusable\n // all over the place, so just go ahead and allow dead_code\n #![allow(dead_code)]\n "}, {"sha": "6c87d520934735432822a867f2d60369ae69062e", "filename": "src/test/ui/issues/issue-50761.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Confirm that we don't accidently divide or mod by zero in llvm_type\n+// Confirm that we don't accidentally divide or mod by zero in llvm_type\n \n // compile-pass\n "}, {"sha": "8315104d37ff41d41f55409a7b35f145b3a18bba", "filename": "src/test/ui/label/label_break_value_illegal_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(label_break_value)]\n \n-// These are forbidden occurences of label-break-value\n+// These are forbidden occurrences of label-break-value\n \n fn labeled_unsafe() {\n     unsafe 'b: {} //~ ERROR expected one of `extern`, `fn`, or `{`"}, {"sha": "6b0ca2ce9e00402842501ff435f817e481e5b1ab", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // FIXME: Change to UI Test\n-// Check notes are placed on an assignment that can actually precede the current assigmnent\n-// Don't emmit a first assignment for assignment in a loop.\n+// Check notes are placed on an assignment that can actually precede the current assignment\n+// Don't emit a first assignment for assignment in a loop.\n \n // compile-flags: -Zborrowck=compare\n "}, {"sha": "4ef185ee71c5ae2be5076b094f1489ac13f9562e", "filename": "src/test/ui/lint/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flint%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Flint%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-extern-crate.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -35,7 +35,7 @@ use lint_unused_extern_crate2::foo as bar;\n use other::*;\n \n mod foo {\n-    // Test that this is unused even though an earler `extern crate` is used.\n+    // Test that this is unused even though an earlier `extern crate` is used.\n     extern crate lint_unused_extern_crate2; //~ ERROR unused extern crate\n }\n "}, {"sha": "ddc6a29a8f0bdd33bc08a9b2ed75fa539c04b3ce", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -11,7 +11,7 @@\n #![feature(generic_associated_types)]\n \n //FIXME(#44265): The lifetime shadowing and type parameter shadowing\n-// should cause an error. Now it compiles (errorneously) and this will be addressed\n+// should cause an error. Now it compiles (erroneously) and this will be addressed\n // by a future PR. Then remove the following:\n // compile-pass\n "}, {"sha": "9a046bc6952b39157b306e08ea70fdf884e2e427", "filename": "src/test/ui/rust-2018/async-ident-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -12,7 +12,7 @@\n \n #![deny(rust_2018_compatibility)]\n \n-// Don't make a suggestion for a raw identifer replacement unless raw\n+// Don't make a suggestion for a raw identifier replacement unless raw\n // identifiers are enabled.\n \n fn main() {"}, {"sha": "81adf89fd4330a46df5eba03d52fcc0edcc6e4e1", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Test that we DO NOT warn when lifetime name is used multiple\n-// argments, or more than once in a single argument.\n+// arguments, or more than once in a single argument.\n //\n // compile-pass\n "}, {"sha": "a5011c3abe7a7a72f6e7daecb9816b4365366803", "filename": "src/test/ui/variadic/variadic-ffi-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi-2.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-arm stdcall isn't suppported\n+// ignore-arm stdcall isn't supported\n \n fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n     //~^ ERROR: variadic function must have C or cdecl calling convention"}, {"sha": "d81e61cac566d6c9e114b439979396f5a630ac77", "filename": "src/test/ui/variadic/variadic-ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariadic%2Fvariadic-ffi.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-arm stdcall isn't suppported\n-// ignore-aarch64 stdcall isn't suppported\n+// ignore-arm stdcall isn't supported\n+// ignore-aarch64 stdcall isn't supported\n \n extern \"stdcall\" {\n     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling"}, {"sha": "6179bdb34a38134902b868da68214f39bcbbb734", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5519db3236a94c1f090dcafaf38ef858ec33a26/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=b5519db3236a94c1f090dcafaf38ef858ec33a26", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we can quantify lifetimes outside a constraint (i.e., including\n // the self type) in a where clause. Specifically, test that implementing for a\n-// specific lifetime is not enough to satisify the `for<'a> ...` constraint, which\n+// specific lifetime is not enough to satisfy the `for<'a> ...` constraint, which\n // should require *all* lifetimes.\n \n static X: &'static u32 = &42;"}]}