{"sha": "479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OWM4YWQxN2M2OTA4YmQ3OTJkY2FjYjBhM2UwYjU1MDM5MDNjZjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:50:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T23:50:50Z"}, "message": "Rollup merge of #70817 - yoshuawuyts:task-ready, r=dtolnay\n\nAdd core::task::ready! macro\n\nThis PR adds `ready!` as a top-level macro to `libcore` following the implementation of `futures_core::ready`, tracking issue https://github.com/rust-lang/rust/issues/70922. This macro is commonly used when implementing `Future`, `AsyncRead`, `AsyncWrite` and `Stream`. And being only 5 lines, it seems like a useful and straight forward addition to std.\n\n## Example\n\n```rust\nuse core::task::{Context, Poll};\nuse core::future::Future;\nuse core::pin::Pin;\n\nasync fn get_num() -> usize {\n    42\n}\n\npub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n    let mut f = get_num();\n    let f = unsafe { Pin::new_unchecked(&mut f) };\n\n    let num = ready!(f.poll(cx));\n    // ... use num\n\n    Poll::Ready(())\n}\n```\n\n## Naming\n\nIn `async-std` we chose to nest the macro under the `task` module instead of having the macro at the top-level. This is a pattern that currently does not occur in std, mostly due to this not being possible prior to Rust 2018.\n\nThis PR proposes to add the `ready` macro as `core::ready`. But another option would be to introduce it as `core::task::ready` since it's really only useful when used in conjunction with `task::{Context, Poll}`.\n\n## Implementation questions\n\nI tried rendering the documentation locally but the macro didn't show up under `core`. I'm not sure if I quite got this right. I used the [`todo!` macro PR](https://github.com/rust-lang/rust/pull/56348/files) as a reference, and our approaches look similar.\n\n## References\n\n- [`futures::ready`](https://docs.rs/futures/0.3.4/futures/macro.ready.html)\n- [`async_std::task::ready`](https://docs.rs/async-std/1.5.0/async_std/task/index.html)\n- [`futures_core::ready`](https://docs.rs/futures-core/0.3.4/futures_core/macro.ready.html)", "tree": {"sha": "1b3a4b37d184000e04ca9da8b2d9d65cd91bf688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3a4b37d184000e04ca9da8b2d9d65cd91bf688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfE4raCRBK7hj4Ov3rIwAAdHIIAA28xAOzHixeFSVwa9zrutCR\nwMOc0zFlPjVcN0HY9rxnwyDIL/tZLtcJDGBSi9I8UwgDnLfWyEe00SSaH7ldqtCl\nNaIAjpB7f2CF2bSXR1prTbFl/GUYVhRoKKISvvtDSzw3dyyq4yHUqNRVPEbBcKcX\nmknrPBorxAVirKk7485wx9llR1l/RnoZ8biY2sAdXUW1hFfO4eMQNjmE67jzMTW9\nFdcUV0FTvDjulmYbqu+MSSYiKVNh3p4hTiAZhAchBTufyvhRk9LWUYKQsCBYA6GG\nYa9M9OukmHVE2nQQlV4E6kKe45E3NGTihoJWasXkxsvttRF14j4p3jP8JItSbqM=\n=YZMP\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b3a4b37d184000e04ca9da8b2d9d65cd91bf688\nparent 1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e\nparent 18be370342c9b2a93f1d56b2b674bd2fbdcbb019\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595116250 -0700\ncommitter GitHub <noreply@github.com> 1595116250 -0700\n\nRollup merge of #70817 - yoshuawuyts:task-ready, r=dtolnay\n\nAdd core::task::ready! macro\n\nThis PR adds `ready!` as a top-level macro to `libcore` following the implementation of `futures_core::ready`, tracking issue https://github.com/rust-lang/rust/issues/70922. This macro is commonly used when implementing `Future`, `AsyncRead`, `AsyncWrite` and `Stream`. And being only 5 lines, it seems like a useful and straight forward addition to std.\n\n## Example\n\n```rust\nuse core::task::{Context, Poll};\nuse core::future::Future;\nuse core::pin::Pin;\n\nasync fn get_num() -> usize {\n    42\n}\n\npub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n    let mut f = get_num();\n    let f = unsafe { Pin::new_unchecked(&mut f) };\n\n    let num = ready!(f.poll(cx));\n    // ... use num\n\n    Poll::Ready(())\n}\n```\n\n## Naming\n\nIn `async-std` we chose to nest the macro under the `task` module instead of having the macro at the top-level. This is a pattern that currently does not occur in std, mostly due to this not being possible prior to Rust 2018.\n\nThis PR proposes to add the `ready` macro as `core::ready`. But another option would be to introduce it as `core::task::ready` since it's really only useful when used in conjunction with `task::{Context, Poll}`.\n\n## Implementation questions\n\nI tried rendering the documentation locally but the macro didn't show up under `core`. I'm not sure if I quite got this right. I used the [`todo!` macro PR](https://github.com/rust-lang/rust/pull/56348/files) as a reference, and our approaches look similar.\n\n## References\n\n- [`futures::ready`](https://docs.rs/futures/0.3.4/futures/macro.ready.html)\n- [`async_std::task::ready`](https://docs.rs/async-std/1.5.0/async_std/task/index.html)\n- [`futures_core::ready`](https://docs.rs/futures-core/0.3.4/futures_core/macro.ready.html)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "html_url": "https://github.com/rust-lang/rust/commit/479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e", "html_url": "https://github.com/rust-lang/rust/commit/1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e"}, {"sha": "18be370342c9b2a93f1d56b2b674bd2fbdcbb019", "url": "https://api.github.com/repos/rust-lang/rust/commits/18be370342c9b2a93f1d56b2b674bd2fbdcbb019", "html_url": "https://github.com/rust-lang/rust/commit/18be370342c9b2a93f1d56b2b674bd2fbdcbb019"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "3d6f4f5971a62db2a88b3657a26008ade27732c4", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "patch": "@@ -9,3 +9,7 @@ pub use self::poll::Poll;\n mod wake;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n+\n+mod ready;\n+#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+pub use ready::ready;"}, {"sha": "d4e733eb2bcf52668466933ba6555b92d77a29cb", "filename": "src/libcore/task/ready.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibcore%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibcore%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fready.rs?ref=479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "patch": "@@ -0,0 +1,60 @@\n+/// Extracts the successful type of a `Poll<T>`.\n+///\n+/// This macro bakes in propagation of `Pending` signals by returning early.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(future_readiness_fns)]\n+/// #![feature(ready_macro)]\n+///\n+/// use core::task::{ready, Context, Poll};\n+/// use core::future::{self, Future};\n+/// use core::pin::Pin;\n+///\n+/// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n+///     let mut fut = future::ready(42);\n+///     let fut = Pin::new(&mut fut);\n+///\n+///     let num = ready!(fut.poll(cx));\n+///     # drop(num);\n+///     // ... use num\n+///\n+///     Poll::Ready(())\n+/// }\n+/// ```\n+///\n+/// The `ready!` call expands to:\n+///\n+/// ```\n+/// # #![feature(future_readiness_fns)]\n+/// # #![feature(ready_macro)]\n+/// #\n+/// # use core::task::{Context, Poll};\n+/// # use core::future::{self, Future};\n+/// # use core::pin::Pin;\n+/// #\n+/// # pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n+///     # let mut fut = future::ready(42);\n+///     # let fut = Pin::new(&mut fut);\n+///     #\n+/// let num = match fut.poll(cx) {\n+///     Poll::Ready(t) => t,\n+///     Poll::Pending => return Poll::Pending,\n+/// };\n+///     # drop(num);\n+///     # // ... use num\n+///     #\n+///     # Poll::Ready(())\n+/// # }\n+/// ```\n+#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro ready($e:expr) {\n+    match $e {\n+        $crate::task::Poll::Ready(t) => t,\n+        $crate::task::Poll::Pending => {\n+            return $crate::task::Poll::Pending;\n+        }\n+    }\n+}"}, {"sha": "11b8f953be46008c0a8cd05c3e62da77e8a4ea03", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c8ad17c6908bd792dcacb0a3e0b5503903cf4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "patch": "@@ -305,6 +305,7 @@\n #![feature(ptr_internals)]\n #![feature(raw)]\n #![feature(raw_ref_macros)]\n+#![feature(ready_macro)]\n #![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]"}]}