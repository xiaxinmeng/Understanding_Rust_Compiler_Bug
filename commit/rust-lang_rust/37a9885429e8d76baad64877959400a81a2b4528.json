{"sha": "37a9885429e8d76baad64877959400a81a2b4528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTk4ODU0MjllOGQ3NmJhYWQ2NDg3Nzk1OTQwMGE4MWEyYjQ1Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T11:41:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T11:41:49Z"}, "message": "auto merge of #13291 : thestinger/rust/no_null, r=alexcrichton\n\nThis was missed when dropping the null-termination from our string\r\ntypes. An explicit null byte can still be placed anywhere in a string if\r\ndesired, but there's no reason to stick one at the end of every string\r\nconstant.", "tree": {"sha": "af63ff7c657a2625ef84a43badb3bcfdc995675b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af63ff7c657a2625ef84a43badb3bcfdc995675b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a9885429e8d76baad64877959400a81a2b4528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a9885429e8d76baad64877959400a81a2b4528", "html_url": "https://github.com/rust-lang/rust/commit/37a9885429e8d76baad64877959400a81a2b4528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a9885429e8d76baad64877959400a81a2b4528/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "html_url": "https://github.com/rust-lang/rust/commit/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7"}, {"sha": "7ce2630cef8b9bc951ce6075c4193730a3efa719", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce2630cef8b9bc951ce6075c4193730a3efa719", "html_url": "https://github.com/rust-lang/rust/commit/7ce2630cef8b9bc951ce6075c4193730a3efa719"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "97638f7e4690ab6b2e13ca0b055a00e745a1357b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -565,7 +565,7 @@ pub fn C_u8(ccx: &CrateContext, i: uint) -> ValueRef {\n \n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n-pub fn C_cstr(cx: &CrateContext, s: InternedString) -> ValueRef {\n+pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> ValueRef {\n     unsafe {\n         match cx.const_cstr_cache.borrow().find(&s) {\n             Some(&llval) => return llval,\n@@ -575,7 +575,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString) -> ValueRef {\n         let sc = llvm::LLVMConstStringInContext(cx.llcx,\n                                                 s.get().as_ptr() as *c_char,\n                                                 s.get().len() as c_uint,\n-                                                False);\n+                                                !null_terminated as Bool);\n \n         let gsym = token::gensym(\"str\");\n         let g = format!(\"str{}\", gsym).with_c_str(|buf| {\n@@ -595,7 +595,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString) -> ValueRef {\n pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef {\n     unsafe {\n         let len = s.get().len();\n-        let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s), Type::i8p(cx).to_ref());\n+        let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s, false), Type::i8p(cx).to_ref());\n         C_struct(cx, [cs, C_uint(cx, len)], false)\n     }\n }\n@@ -900,7 +900,7 @@ pub fn filename_and_line_num_from_span(bcx: &Block, span: Span)\n                                        -> (ValueRef, ValueRef) {\n     let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n     let filename_cstr = C_cstr(bcx.ccx(),\n-                               token::intern_and_get_ident(loc.file.name));\n+                               token::intern_and_get_ident(loc.file.name), true);\n     let filename = build::PointerCast(bcx, filename_cstr, Type::i8p(bcx.ccx()));\n     let line = C_int(bcx.ccx(), loc.line as int);\n     (filename, line)"}, {"sha": "a6c86f9d564352d5a1305769dd3d76e36ca1637d", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -331,10 +331,10 @@ pub fn trans_fail<'a>(\n                   fail_str: InternedString)\n                   -> &'a Block<'a> {\n     let ccx = bcx.ccx();\n-    let v_fail_str = C_cstr(ccx, fail_str);\n+    let v_fail_str = C_cstr(ccx, fail_str, true);\n     let _icx = push_ctxt(\"trans_fail_value\");\n     let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n-    let v_filename = C_cstr(ccx, token::intern_and_get_ident(loc.file.name));\n+    let v_filename = C_cstr(ccx, token::intern_and_get_ident(loc.file.name), true);\n     let v_line = loc.line as int;\n     let v_str = PointerCast(bcx, v_fail_str, Type::i8p(ccx));\n     let v_filename = PointerCast(bcx, v_filename, Type::i8p(ccx));"}, {"sha": "df4598c03072c704e36c37cab9525f7a7f262a74", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -2129,7 +2129,7 @@ fn type_metadata(cx: &CrateContext,\n             let i8_t = ty::mk_i8();\n             match *vstore {\n                 ty::vstore_fixed(len) => {\n-                    fixed_vec_metadata(cx, i8_t, len + 1, usage_site_span)\n+                    fixed_vec_metadata(cx, i8_t, len, usage_site_span)\n                 },\n                 ty::vstore_uniq  => {\n                     let vec_metadata = vec_metadata(cx, i8_t, usage_site_span);"}, {"sha": "e73ef639a0ba86bec68f32eb78aeab28f1e83bc1", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -58,7 +58,7 @@ impl<'a> Reflector<'a> {\n         let str_ty = ty::mk_str(bcx.tcx(), str_vstore);\n         let scratch = rvalue_scratch_datum(bcx, str_ty, \"\");\n         let len = C_uint(bcx.ccx(), s.get().len());\n-        let c_str = PointerCast(bcx, C_cstr(bcx.ccx(), s), Type::i8p(bcx.ccx()));\n+        let c_str = PointerCast(bcx, C_cstr(bcx.ccx(), s, false), Type::i8p(bcx.ccx()));\n         Store(bcx, c_str, GEPi(bcx, scratch.val, [ 0, 0 ]));\n         Store(bcx, len, GEPi(bcx, scratch.val, [ 0, 1 ]));\n         scratch.val"}, {"sha": "96368467163cd55a1632b02706d096de846880fb", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -272,7 +272,7 @@ pub fn trans_lit_str<'a>(\n             unsafe {\n                 let bytes = str_lit.get().len();\n                 let llbytes = C_uint(bcx.ccx(), bytes);\n-                let llcstr = C_cstr(bcx.ccx(), str_lit);\n+                let llcstr = C_cstr(bcx.ccx(), str_lit, false);\n                 let llcstr = llvm::LLVMConstPointerCast(llcstr, Type::i8p(bcx.ccx()).to_ref());\n                 Store(bcx, llcstr,\n                       GEPi(bcx, lldest, [0u, abi::slice_elt_base]));\n@@ -302,7 +302,7 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n         ast::ExprLit(lit) => {\n             match lit.node {\n                 ast::LitStr(ref s, _) => {\n-                    let llptrval = C_cstr(bcx.ccx(), (*s).clone());\n+                    let llptrval = C_cstr(bcx.ccx(), (*s).clone(), false);\n                     let llptrval = PointerCast(bcx,\n                                                llptrval,\n                                                Type::i8p(bcx.ccx()));\n@@ -376,7 +376,7 @@ pub fn write_content<'a>(\n                         SaveIn(lldest) => {\n                             let bytes = s.get().len();\n                             let llbytes = C_uint(bcx.ccx(), bytes);\n-                            let llcstr = C_cstr(bcx.ccx(), (*s).clone());\n+                            let llcstr = C_cstr(bcx.ccx(), (*s).clone(), false);\n                             base::call_memcpy(bcx,\n                                               lldest,\n                                               llcstr,"}, {"sha": "fbfa77741a747a614bdcb2adeb0cc52f192665af", "filename": "src/test/debug-info/include_string.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37a9885429e8d76baad64877959400a81a2b4528/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a9885429e8d76baad64877959400a81a2b4528/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Finclude_string.rs?ref=37a9885429e8d76baad64877959400a81a2b4528", "patch": "@@ -14,12 +14,12 @@\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n-// debugger:print string1\n-// check:$1 = [...]\"some text to include in another file as string 1\", length = 48}\n-// debugger:print string2\n-// check:$2 = [...]\"some text to include in another file as string 2\", length = 48}\n-// debugger:print string3\n-// check:$3 = [...]\"some text to include in another file as string 3\", length = 48}\n+// debugger:print string1.length\n+// check:$1 = 48\n+// debugger:print string2.length\n+// check:$2 = 48\n+// debugger:print string3.length\n+// check:$3 = 48\n // debugger:continue\n \n #[allow(unused_variable)];"}]}