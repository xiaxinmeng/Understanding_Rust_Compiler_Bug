{"sha": "3e9d5fea48f616c1052d38e67b18e98624210867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWQ1ZmVhNDhmNjE2YzEwNTJkMzhlNjdiMThlOTg2MjQyMTA4Njc=", "commit": {"author": {"name": "Nathan", "email": "nathanrsizemore@gmail.com", "date": "2015-12-01T02:23:19Z"}, "committer": {"name": "Nathan", "email": "nathanrsizemore@gmail.com", "date": "2016-01-02T05:27:16Z"}, "message": "Adjusted heading and created dedicated section in std::io docs", "tree": {"sha": "724e38596f789d0271be4062e9a2da484ef679c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724e38596f789d0271be4062e9a2da484ef679c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9d5fea48f616c1052d38e67b18e98624210867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5fea48f616c1052d38e67b18e98624210867", "html_url": "https://github.com/rust-lang/rust/commit/3e9d5fea48f616c1052d38e67b18e98624210867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5fea48f616c1052d38e67b18e98624210867/comments", "author": {"login": "nathansizemore", "id": 3423825, "node_id": "MDQ6VXNlcjM0MjM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3423825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathansizemore", "html_url": "https://github.com/nathansizemore", "followers_url": "https://api.github.com/users/nathansizemore/followers", "following_url": "https://api.github.com/users/nathansizemore/following{/other_user}", "gists_url": "https://api.github.com/users/nathansizemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathansizemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathansizemore/subscriptions", "organizations_url": "https://api.github.com/users/nathansizemore/orgs", "repos_url": "https://api.github.com/users/nathansizemore/repos", "events_url": "https://api.github.com/users/nathansizemore/events{/privacy}", "received_events_url": "https://api.github.com/users/nathansizemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathansizemore", "id": 3423825, "node_id": "MDQ6VXNlcjM0MjM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3423825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathansizemore", "html_url": "https://github.com/nathansizemore", "followers_url": "https://api.github.com/users/nathansizemore/followers", "following_url": "https://api.github.com/users/nathansizemore/following{/other_user}", "gists_url": "https://api.github.com/users/nathansizemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathansizemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathansizemore/subscriptions", "organizations_url": "https://api.github.com/users/nathansizemore/orgs", "repos_url": "https://api.github.com/users/nathansizemore/repos", "events_url": "https://api.github.com/users/nathansizemore/events{/privacy}", "received_events_url": "https://api.github.com/users/nathansizemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e842b6de633dd1099992782d1175c366ee27f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e842b6de633dd1099992782d1175c366ee27f7", "html_url": "https://github.com/rust-lang/rust/commit/66e842b6de633dd1099992782d1175c366ee27f7"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "635ed91f35da41c5335c36d4c5cd57e569de3d53", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5fea48f616c1052d38e67b18e98624210867/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5fea48f616c1052d38e67b18e98624210867/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3e9d5fea48f616c1052d38e67b18e98624210867", "patch": "@@ -715,7 +715,7 @@ impl DirEntry {\n     /// This function will not traverse symlinks if this entry points at a\n     /// symlink.\n     ///\n-    /// # Platform behavior\n+    /// # Platform-specific behavior\n     ///\n     /// On Windows this function is cheap to call (no extra system calls\n     /// needed), but on Unix platforms this function is the equivalent of\n@@ -730,7 +730,7 @@ impl DirEntry {\n     /// This function will not traverse symlinks if this entry points at a\n     /// symlink.\n     ///\n-    /// # Platform behavior\n+    /// # Platform-specific behavior\n     ///\n     /// On Windows and most Unix platforms this function is free (no extra\n     /// system calls needed), but some Unix platforms may require the equivalent\n@@ -758,12 +758,12 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n /// guarantee that the file is immediately deleted (e.g. depending on\n /// platform, other open file descriptors may prevent immediate removal).\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `unlink` function on Unix\n /// and the `DeleteFile` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -794,12 +794,12 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function will traverse symbolic links to query information about the\n /// destination file.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `stat` function on Unix\n /// and the `GetFileAttributesEx` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -827,12 +827,12 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n \n /// Query the metadata about a file without following symlinks.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `lstat` function on Unix\n /// and the `GetFileAttributesEx` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -862,12 +862,12 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n ///\n /// This will not work if the new name is on a different mount point.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `rename` function on Unix\n /// and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -903,14 +903,14 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n ///\n /// On success, the total number of bytes copied is returned.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `open` function in Unix\n /// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n /// `O_CLOEXEC` is set for returned file descriptors.\n /// On Windows, this function currently corresponds to `CopyFileEx`.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -941,12 +941,12 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n /// The `dst` path will be a link pointing to the `src` path. Note that systems\n /// often require these two paths to both be located on the same filesystem.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `link` function on Unix\n /// and the `CreateHardLink` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -998,13 +998,13 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n \n /// Reads a symbolic link, returning the file that the link points to.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `readlink` function on Unix\n /// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n /// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1032,12 +1032,12 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `realpath` function on Unix\n /// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1064,12 +1064,12 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Creates a new, empty directory at the provided path\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `mkdir` function on Unix\n /// and the `CreateDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1097,12 +1097,12 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// Recursively create a directory and all of its parent components if they\n /// are missing.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `mkdir` function on Unix\n /// and the `CreateDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1131,12 +1131,12 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// Removes an existing, empty directory.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `rmdir` function on Unix\n /// and the `RemoveDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1167,13 +1167,13 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function does **not** follow symbolic links and it will simply remove the\n /// symbolic link itself.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to `opendir`, `lstat`, `rm` and `rmdir` functions on Unix\n /// and the `FindFirstFile`, `GetFileAttributesEx`, `DeleteFile`, and `RemoveDirectory` functions\n /// on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1212,12 +1212,12 @@ fn _remove_dir_all(path: &Path) -> io::Result<()> {\n /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n /// be encountered after an iterator is initially constructed.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `opendir` function on Unix\n /// and the `FindFirstFile` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///\n@@ -1315,12 +1315,12 @@ impl Iterator for WalkDir {\n \n /// Changes the permissions found on a file or a directory.\n ///\n-/// # Platform behavior\n+/// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `chmod` function on Unix\n /// and the `SetFileAttributes` function on Windows.\n /// Note that, this [may change in the future][changes].\n-/// [changes]: https://github.com/rust-lang/rust/pull/28613\n+/// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n ///"}, {"sha": "b5ba6ff54c0e3b7d32b5fcb9ed1b450aae48562d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5fea48f616c1052d38e67b18e98624210867/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5fea48f616c1052d38e67b18e98624210867/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3e9d5fea48f616c1052d38e67b18e98624210867", "patch": "@@ -238,6 +238,15 @@\n //!\n //! [result]: type.Result.html\n //! [try]: ../macro.try!.html\n+//!\n+//! ## Platform-specific behavior\n+//!\n+//! Many I/O functions throughout the standard library are documented to indicate\n+//! what various library or syscalls they are delegated to. This is done to help\n+//! applications both understand what's happening under the hood as well as investigate\n+//! any possibly unclear semantics. Note, however, that this is informative, not a binding\n+//! contract. The implementation of many of these functions are subject to change over\n+//! time and may call fewer or more syscalls/library functions.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}