{"sha": "2d76b176c0b0f86648a038a5e4ca84fb04e809dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzZiMTc2YzBiMGY4NjY0OGEwMzhhNWU0Y2E4NGZiMDRlODA5ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-19T18:30:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-19T18:30:36Z"}, "message": "Merge #8884\n\n8884: fix: add_explicit_type produces invalid code on `@` patterns r=Veykril a=iDawer\n\nIn\r\n```rust\r\nlet name @ () = ();\r\n```\r\n an explicit type should be inserted after the pattern, not just after the name.\r\n`let` statement defined as `LetStmt = Attr* 'let' Pat (':' Type)? '=' initializer:Expr ';'`\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "72009d761e24e5807e3ffc0b1f49509301ed144f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72009d761e24e5807e3ffc0b1f49509301ed144f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d76b176c0b0f86648a038a5e4ca84fb04e809dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpVlMCRBK7hj4Ov3rIwAAT90IAAM5vWDNnYL5JEuWA7RuYiaN\njTwzz5KToGDK/hrDt7ouhgXQFJHeWMbWEG+5i9ApbxsAmddRFecHKkrkKNJ/zwlb\nfQtpR24FkZYsIH2HIQkfI1E8lzUwi4WafK45Nyx5GhtSy5rvNYrG7v4DMGK85dWH\n40Ohwj7nRbdClm47Ia3+Xjnaf9FOWOPTQVMKfGzM1bh/O3viM4cJ7QWqwWZ1PxGb\nNe+8YaU1TpHs2MR4TxIZTJ8kkSlq65c/fES7mam/Q+tOWWD/qbZjROseodF27Z0k\nOZri48Vu3F7wevRSeWj+mim8CqI9sGmC38rbLb1wpx4FTbVzPW214e8yu8KrdvI=\n=i76M\n-----END PGP SIGNATURE-----\n", "payload": "tree 72009d761e24e5807e3ffc0b1f49509301ed144f\nparent c7196620abd5e9bab4fbd53388da361f0f6987a1\nparent 5c5fedb9454b4fcb237728da7c9e29e981fcdc3a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621449036 +0000\ncommitter GitHub <noreply@github.com> 1621449036 +0000\n\nMerge #8884\n\n8884: fix: add_explicit_type produces invalid code on `@` patterns r=Veykril a=iDawer\n\nIn\r\n```rust\r\nlet name @ () = ();\r\n```\r\n an explicit type should be inserted after the pattern, not just after the name.\r\n`let` statement defined as `LetStmt = Attr* 'let' Pat (':' Type)? '=' initializer:Expr ';'`\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d76b176c0b0f86648a038a5e4ca84fb04e809dc", "html_url": "https://github.com/rust-lang/rust/commit/2d76b176c0b0f86648a038a5e4ca84fb04e809dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d76b176c0b0f86648a038a5e4ca84fb04e809dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7196620abd5e9bab4fbd53388da361f0f6987a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7196620abd5e9bab4fbd53388da361f0f6987a1", "html_url": "https://github.com/rust-lang/rust/commit/c7196620abd5e9bab4fbd53388da361f0f6987a1"}, {"sha": "5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "html_url": "https://github.com/rust-lang/rust/commit/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "b7617ca3da8c14e251db1ba6ff1a5a9379c36673", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d76b176c0b0f86648a038a5e4ca84fb04e809dc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76b176c0b0f86648a038a5e4ca84fb04e809dc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=2d76b176c0b0f86648a038a5e4ca84fb04e809dc", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner},\n+    ast::{self, AstNode, LetStmt},\n     TextRange,\n };\n \n@@ -31,9 +31,6 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         _ => return None,\n     };\n     let pat_range = pat.syntax().text_range();\n-    // The binding must have a name\n-    let name = pat.name()?;\n-    let name_range = name.syntax().text_range();\n \n     // Assist should only be applicable if cursor is between 'let' and '='\n     let cursor_in_range = {\n@@ -74,7 +71,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                 builder.replace(ascribed_ty.syntax().text_range(), inferred_type);\n             }\n             None => {\n-                builder.insert(name_range.end(), format!(\": {}\", inferred_type));\n+                builder.insert(pat_range.end(), format!(\": {}\", inferred_type));\n             }\n         },\n     )\n@@ -243,6 +240,24 @@ struct Test<K, T = u8> { k: K, t: T }\n fn main() {\n     let test: Test<i32> = Test { t: 23u8, k: 33 };\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn type_should_be_added_after_pattern() {\n+        // LetStmt = Attr* 'let' Pat (':' Type)? '=' initializer:Expr ';'\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0test @ () = ();\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let test @ (): () = ();\n+}\n \"#,\n         );\n     }"}]}