{"sha": "8a4632dec69082301d3fe67e48d422bc9fb665be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNDYzMmRlYzY5MDgyMzAxZDNmZTY3ZTQ4ZDQyMmJjOWZiNjY1YmU=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-13T18:54:18Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-14T10:10:21Z"}, "message": "Indicate origin of where type parameter for uninferred types", "tree": {"sha": "ccea9f4c0a3de645ed08bdaaa2e4093af3f35df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccea9f4c0a3de645ed08bdaaa2e4093af3f35df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4632dec69082301d3fe67e48d422bc9fb665be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4632dec69082301d3fe67e48d422bc9fb665be", "html_url": "https://github.com/rust-lang/rust/commit/8a4632dec69082301d3fe67e48d422bc9fb665be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4632dec69082301d3fe67e48d422bc9fb665be/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "html_url": "https://github.com/rust-lang/rust/commit/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "ebb94cc72ffe0de5e4cb49f78391c7314ddd3ff4", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -3,7 +3,7 @@ use crate::hir::{self, Body, FunctionRetTy, Expr, ExprKind, HirId, Local, Pat};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::infer::InferCtxt;\n use crate::infer::type_variable::TypeVariableOriginKind;\n-use crate::ty::{self, Ty, Infer, TyVar};\n+use crate::ty::{self, Ty, Infer, TyVar, DefIdTree};\n use crate::ty::print::Print;\n use syntax::source_map::DesugaringKind;\n use syntax::symbol::kw;\n@@ -117,6 +117,8 @@ fn closure_return_type_suggestion(\n     descr: &str,\n     name: &str,\n     ret: &str,\n+    parent_name: Option<String>,\n+    parent_descr: Option<&str>,\n ) {\n     let (arrow, post) = match output {\n         FunctionRetTy::DefaultReturn(_) => (\"-> \", \" \"),\n@@ -138,7 +140,12 @@ fn closure_return_type_suggestion(\n         suggestion,\n         Applicability::HasPlaceholders,\n     );\n-    err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n+    err.span_label(span, InferCtxt::missing_type_msg(\n+        &name,\n+        &descr,\n+        parent_name,\n+        parent_descr\n+    ));\n }\n \n /// Given a closure signature, return a `String` containing a list of all its argument types.\n@@ -177,16 +184,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n-    ) -> (String, Option<Span>, Cow<'static, str>) {\n+    ) -> (String, Option<Span>, Cow<'static, str>, Option<String>, Option<&'static str>) {\n         if let ty::Infer(ty::TyVar(ty_vid)) = ty.kind {\n             let ty_vars = self.type_variables.borrow();\n             let var_origin = ty_vars.var_origin(ty_vid);\n-            if let TypeVariableOriginKind::TypeParameterDefinition(name) = var_origin.kind {\n+            if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) = var_origin.kind {\n+                let parent_def_id = def_id.and_then(|def_id| self.tcx.parent(def_id));\n+                let (parent_name, parent_desc) = if let Some(parent_def_id) = parent_def_id {\n+                    let parent_name = self.tcx.def_key(parent_def_id).disambiguated_data.data\n+                        .get_opt_name().map(|parent_symbol| parent_symbol.to_string());\n+\n+                    let type_parent_desc = self.tcx.def_kind(parent_def_id)\n+                        .map(|parent_def_kind| parent_def_kind.descr(parent_def_id));\n+\n+                    (parent_name, type_parent_desc)\n+                } else {\n+                    (None, None)\n+                };\n+\n                 if name != kw::SelfUpper {\n                     return (\n                         name.to_string(),\n                         Some(var_origin.span),\n                         \"type parameter\".into(),\n+                        parent_name,\n+                        parent_desc,\n                     );\n                 }\n             }\n@@ -198,7 +220,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             printer.region_highlight_mode = highlight;\n         }\n         let _ = ty.print(printer);\n-        (s, None, ty.prefix_string())\n+        (s, None, ty.prefix_string(), None, None)\n     }\n \n     pub fn need_type_info_err(\n@@ -209,7 +231,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let (name, name_sp, descr) = self.extract_type_name(&ty, None);\n+        let (name, name_sp, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n+\n \n         let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, &self.tcx.hir());\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n@@ -218,7 +241,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let ty_vars = self.type_variables.borrow();\n             let getter = move |ty_vid| {\n                 let var_origin = ty_vars.var_origin(ty_vid);\n-                if let TypeVariableOriginKind::TypeParameterDefinition(name) = var_origin.kind {\n+                if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind {\n                     return Some(name.to_string());\n                 }\n                 None\n@@ -317,6 +340,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             &descr,\n                             &name,\n                             &ret,\n+                            parent_name,\n+                            parent_descr,\n                         );\n                         // We don't want to give the other suggestions when the problem is the\n                         // closure return type.\n@@ -433,8 +458,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if !err.span.span_labels().iter().any(|span_label| {\n                 span_label.label.is_some() && span_label.span == span\n             }) && local_visitor.found_arg_pattern.is_none()\n-        { // Avoid multiple labels pointing at `span`.\n-            err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n+        {\n+            // Avoid multiple labels pointing at `span`.\n+            err.span_label(\n+                span,\n+                InferCtxt::missing_type_msg(&name, &descr, parent_name, parent_descr)\n+            );\n         }\n \n         err\n@@ -496,19 +525,42 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let (name, _, descr) = self.extract_type_name(&ty, None);\n+        let (name, _, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n+\n         let mut err = struct_span_err!(\n             self.tcx.sess, span, E0698, \"type inside {} must be known in this context\", kind,\n         );\n-        err.span_label(span, InferCtxt::missing_type_msg(&name, &descr));\n+        err.span_label(span, InferCtxt::missing_type_msg(\n+            &name,\n+            &descr,\n+            parent_name,\n+            parent_descr\n+        ));\n         err\n     }\n \n-    fn missing_type_msg(type_name: &str, descr: &str) -> Cow<'static, str>{\n+    fn missing_type_msg(\n+        type_name: &str,\n+        descr: &str,\n+        parent_name: Option<String>,\n+        parent_descr: Option<&str>,\n+    ) -> Cow<'static, str> {\n         if type_name == \"_\" {\n             \"cannot infer type\".into()\n         } else {\n-            format!(\"cannot infer type for {} `{}`\", descr, type_name).into()\n+            let parent_desc = if let Some(parent_name) = parent_name {\n+                let parent_type_descr = if let Some(parent_descr) = parent_descr {\n+                    format!(\" the {}\", parent_descr)\n+                } else {\n+                    \"\".into()\n+                };\n+\n+                format!(\" declared on{} `{}`\", parent_type_descr, parent_name)\n+            } else {\n+                \"\".to_string()\n+            };\n+\n+            format!(\"cannot infer type for {} `{}`{}\", descr, type_name, parent_desc).into()\n         }\n     }\n }"}, {"sha": "996a722e157fad1de1d7d3aacd7fd70f4ee49879", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -1135,7 +1135,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.universe(),\n                     false,\n                     TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::TypeParameterDefinition(param.name),\n+                        kind: TypeVariableOriginKind::TypeParameterDefinition(\n+                            param.name,\n+                            Some(param.def_id)\n+                        ),\n                         span,\n                     },\n                 );"}, {"sha": "ea4a28c22a9e7501c98d4eff41cf07e7675ac006", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     let ty_vars = self.infcx.type_variables.borrow();\n                     if let TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::TypeParameterDefinition(_),\n+                        kind: TypeVariableOriginKind::TypeParameterDefinition(_, _),\n                         span,\n                     } = *ty_vars.var_origin(ty_vid)\n                     {"}, {"sha": "5a12de25f4b759583ccae29862e6520a59c6ce2a", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -1,6 +1,7 @@\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use crate::ty::{self, Ty, TyVid};\n+use crate::hir::def_id::DefId;\n \n use std::cmp;\n use std::marker::PhantomData;\n@@ -49,7 +50,7 @@ pub enum TypeVariableOriginKind {\n     MiscVariable,\n     NormalizeProjectionType,\n     TypeInference,\n-    TypeParameterDefinition(Symbol),\n+    TypeParameterDefinition(Symbol, Option<DefId>),\n \n     /// One of the upvars or closure kind parameters in a `ClosureSubsts`\n     /// (before it has been determined)."}, {"sha": "018bed96664879c6efb6420936777032c7c64fc3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2113,7 +2113,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.var_map.entry(ty).or_insert_with(||\n                         infcx.next_ty_var(\n                             TypeVariableOrigin {\n-                                kind: TypeVariableOriginKind::TypeParameterDefinition(name),\n+                                kind: TypeVariableOriginKind::TypeParameterDefinition(name, None),\n                                 span: DUMMY_SP,\n                             }\n                         )"}, {"sha": "3ffdb8ce6b9a1634b2c345e7190b4cb8c016024c", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n   --> $DIR/unresolved_type_param.rs:9:5"}, {"sha": "44eab8baa40a6571651cac2887f64ab8ab214ecd", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -30,7 +30,7 @@ error[E0282]: type annotations needed\n   --> $DIR/fn-const-param-infer.rs:22:23\n    |\n LL |     let _ = Checked::<generic>;\n-   |                       ^^^^^^^ cannot infer type for type parameter `T`\n+   |                       ^^^^^^^ cannot infer type for type parameter `T` declared on the function `generic`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40"}, {"sha": "dd281e911da9669d764cca24111217bc4262da39", "filename": "src/test/ui/consts/issue-64662.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,13 +2,13 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:2:9\n    |\n LL |     A = foo(),\n-   |         ^^^ cannot infer type for type parameter `T`\n+   |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:3:9\n    |\n LL |     B = foo(),\n-   |         ^^^ cannot infer type for type parameter `T`\n+   |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b1d4e6c07cebead561ddc337abc33c3643d7186", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -36,7 +36,7 @@ error[E0282]: type annotations needed\n   --> $DIR/E0401.rs:11:5\n    |\n LL |     bfnr(x);\n-   |     ^^^^ cannot infer type for type parameter `U`\n+   |     ^^^^ cannot infer type for type parameter `U` declared on the function `bfnr`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fe7e8f89f7f1adc7514fa750d3d9ed6a10776246", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0284]: type annotations needed\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n-   |              ^^^^^^^^^^^^ cannot infer type for type parameter `H`\n+   |              ^^^^^^^^^^^^ cannot infer type for type parameter `H` declared on the trait `StreamHash`\n    |\n    = note: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n "}, {"sha": "49a12cc20094799bcf650da32b85d3e1b0e0f630", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-16966.rs:2:5\n    |\n LL |     panic!(std::default::Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "48405a292f3aa9d0e8e8fa4c984f14e068830f63", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `B<T>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n-   |         ---   ^ cannot infer type for type parameter `T`\n+   |         ---   ^ cannot infer type for type parameter `T` declared on the struct `B`\n    |         |\n    |         consider giving `foo` the explicit type `B<T>`, where the type parameter `T` is specified\n "}, {"sha": "a09de86a708f8ccb96159f4276a462a73a057aeb", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -5,7 +5,7 @@ LL |     let (tx, rx) = channel();\n    |         -------- consider giving this pattern the explicit type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`, where the type parameter `T` is specified\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n-   |                 ^^^ cannot infer type for type parameter `T`\n+   |                 ^^^ cannot infer type for type parameter `T` declared on the struct `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "9fa15dc9679147bfeb8dca8c6cc8df4fb5622353", "filename": "src/test/ui/issues/issue-5062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5062.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-5062.rs:1:29\n    |\n LL | fn main() { format!(\"{:?}\", None); }\n-   |                             ^^^^ cannot infer type for type parameter `T`\n+   |                             ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`\n \n error: aborting due to previous error\n "}, {"sha": "da16f95dc3de657075db68693ed9b6018f838486", "filename": "src/test/ui/issues/issue-6458-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-2.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458-2.rs:3:21\n    |\n LL |     format!(\"{:?}\", None);\n-   |                     ^^^^ cannot infer type for type parameter `T`\n+   |                     ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`\n \n error: aborting due to previous error\n "}, {"sha": "a71c159db0b0ebb1a32e60c327d7f22df21a952b", "filename": "src/test/ui/issues/issue-6458-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458-3.rs:4:5\n    |\n LL |     mem::transmute(0);\n-   |     ^^^^^^^^^^^^^^ cannot infer type for type parameter `U`\n+   |     ^^^^^^^^^^^^^^ cannot infer type for type parameter `U` declared on the function `transmute`\n \n error: aborting due to previous error\n "}, {"sha": "f1a982616a4a13e1447735b985267f516e8bb74e", "filename": "src/test/ui/issues/issue-6458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458.rs:9:4\n    |\n LL |    foo(TypeWithState(marker::PhantomData));\n-   |    ^^^ cannot infer type for type parameter `State`\n+   |    ^^^ cannot infer type for type parameter `State` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "1219badc5b3fcfca96001cfd251772d2c762fb21", "filename": "src/test/ui/missing/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/missing-type-parameter.rs:4:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for type parameter `X`\n+   |     ^^^ cannot infer type for type parameter `X` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "2b92f9b93bff202d649abff9553db97955d293ad", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n    |                                       ^^^\n    |                                       |\n-   |                                       cannot infer type for type parameter `S`\n+   |                                       cannot infer type for type parameter `S` declared on the method `sum`\n    |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n    |\n    = note: type must be known at this point"}, {"sha": "338c8cbf2e4f2e6851b930d9298c0d2ba8e77ae9", "filename": "src/test/ui/traits/traits-multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-convert-ambig-dest.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/traits-multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n-   |     ^^^^ cannot infer type for type parameter `U`\n+   |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`\n \n error: aborting due to previous error\n "}, {"sha": "b9258b20f5addebb58e9bea0231ecd6a688d2afa", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |         .or_else(|err| {\n    |          ^^^^^^^\n    |          |\n-   |          cannot infer type for type parameter `F`\n+   |          cannot infer type for type parameter `F` declared on the method `or_else`\n    |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n \n error: aborting due to previous error"}, {"sha": "e74c0dfa5e20c8e1e316e0ef29982c68e8be0339", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n    |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n    |         |\n-   |         cannot infer type for type parameter `K`\n+   |         cannot infer type for type parameter `K` declared on the method `sort_by_key`\n \n error: aborting due to previous error\n "}, {"sha": "19e2bd4513dc51ded1545baf22dfbfca5f8f5c0e", "filename": "src/test/ui/type-inference/unbounded-associated-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-associated-type.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -8,7 +8,7 @@ LL |     S(std::marker::PhantomData).foo();\n    |     ^--------------------------------\n    |     |\n    |     this method call resolves to `<Self as T>::A`\n-   |     cannot infer type for type parameter `X`\n+   |     cannot infer type for type parameter `X` declared on the struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "d60ca4a49325c112b3e0e95edbe2b16deaf78108", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn-with-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unbounded-type-param-in-fn-with-assoc-type.rs:8:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for type parameter `T`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "45d879d8d5670647ccf57e766b3dc8a013f438c1", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unbounded-type-param-in-fn.rs:6:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for type parameter `T`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "c6a811e836342b6552ba8920112ba1b50fb3a959", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n LL |     foo(42);\n    |     ^^^\n    |     |\n-   |     cannot infer type for type parameter `T`\n+   |     cannot infer type for type parameter `T` declared on the function `foo`\n    |     help: consider specifying the type argument in the function call: `foo::<T>`\n    |\n    = note: cannot resolve `_: std::convert::Into<std::string::String>`"}, {"sha": "fbd71bd091d0b6ed300d9eb4301e6783fac1930b", "filename": "src/test/ui/unconstrained-none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Funconstrained-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Funconstrained-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funconstrained-none.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unconstrained-none.rs:4:5\n    |\n LL |     None;\n-   |     ^^^^ cannot infer type for type parameter `T`\n+   |     ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`\n \n error: aborting due to previous error\n "}, {"sha": "eb8ebb5165d180da4b9a3db4afee28e2ab464367", "filename": "src/test/ui/unconstrained-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Funconstrained-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4632dec69082301d3fe67e48d422bc9fb665be/src%2Ftest%2Fui%2Funconstrained-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funconstrained-ref.stderr?ref=8a4632dec69082301d3fe67e48d422bc9fb665be", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/unconstrained-ref.rs:6:5\n    |\n LL |     S { o: &None };\n-   |     ^ cannot infer type for type parameter `T`\n+   |     ^ cannot infer type for type parameter `T` declared on the struct `S`\n \n error: aborting due to previous error\n "}]}