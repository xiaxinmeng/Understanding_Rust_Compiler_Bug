{"sha": "c0107d2ea63a5527d2990f7f322f642340ceb3cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMTA3ZDJlYTYzYTU1MjdkMjk5MGY3ZjMyMmY2NDIzNDBjZWIzY2Q=", "commit": {"author": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2021-07-26T08:12:41Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2021-07-26T08:12:41Z"}, "message": "Fix some grammar / spelling mistakes", "tree": {"sha": "4b45f690a171efe7e3b026d4e107e8d40142723f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b45f690a171efe7e3b026d4e107e8d40142723f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0107d2ea63a5527d2990f7f322f642340ceb3cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIwEABYIADQWIQSDGkJBzFPeoiYaT9p9Jh13HZFTeAUCYP5ueRYcanBsYXR0ZStn\naXRAcG9zdGVvLmRlAAoJEH0mHXcdkVN4C2AA/0lKOL93AZyoaDW2hvgT4/ZVCd8V\nxsppWE9OI50nOb0WAQCzVEzsZqmYfpgh3hwPVICgFDqRqdAvU2KaeuZZTUtHBQ==\n=xBrU\n-----END PGP SIGNATURE-----", "payload": "tree 4b45f690a171efe7e3b026d4e107e8d40142723f\nparent 5983d3745ac8490c1c2798fdc963aa9fc803dd03\nauthor Jonas Platte <jplatte+git@posteo.de> 1627287161 +0200\ncommitter Jonas Platte <jplatte+git@posteo.de> 1627287161 +0200\n\nFix some grammar / spelling mistakes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0107d2ea63a5527d2990f7f322f642340ceb3cd", "html_url": "https://github.com/rust-lang/rust/commit/c0107d2ea63a5527d2990f7f322f642340ceb3cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0107d2ea63a5527d2990f7f322f642340ceb3cd/comments", "author": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5983d3745ac8490c1c2798fdc963aa9fc803dd03", "url": "https://api.github.com/repos/rust-lang/rust/commits/5983d3745ac8490c1c2798fdc963aa9fc803dd03", "html_url": "https://github.com/rust-lang/rust/commit/5983d3745ac8490c1c2798fdc963aa9fc803dd03"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "a3dc88b5f5d598fb2fed1f0dd24d14a186bfde59", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0107d2ea63a5527d2990f7f322f642340ceb3cd/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0107d2ea63a5527d2990f7f322f642340ceb3cd/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=c0107d2ea63a5527d2990f7f322f642340ceb3cd", "patch": "@@ -43,7 +43,7 @@ mod handlers {\n     pub(crate) mod unresolved_module;\n     pub(crate) mod unresolved_proc_macro;\n \n-    // The handlers bellow are unusual, the implement the diagnostics as well.\n+    // The handlers below are unusual, the implement the diagnostics as well.\n     pub(crate) mod field_shorthand;\n     pub(crate) mod useless_braces;\n     pub(crate) mod unlinked_file;"}, {"sha": "5ca63e27cfc19e0fc373d69bbe19af0cc4921b47", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0107d2ea63a5527d2990f7f322f642340ceb3cd/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0107d2ea63a5527d2990f7f322f642340ceb3cd/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=c0107d2ea63a5527d2990f7f322f642340ceb3cd", "patch": "@@ -461,9 +461,9 @@ Mind the code--architecture gap: at the moment, we are using fewer feature flags\n In Rust, it is easy (often too easy) to add serialization to any type by adding `#[derive(Serialize)]`.\n This easiness is misleading -- serializable types impose significant backwards compatability constraints.\n If a type is serializable, then it is a part of some IPC boundary.\n-You often don't control the other side of this boundary, so changing serializable types are hard.\n+You often don't control the other side of this boundary, so changing serializable types is hard.\n \n-For this reason, the types in `ide`, `base_db` and bellow are not serializable by design.\n+For this reason, the types in `ide`, `base_db` and below are not serializable by design.\n If such types need to cross an IPC boundary, then the client of rust-analyzer needs to provide custom, client-specific serialization format.\n This isolates backwards compatibility and migration concerns to a specific client.\n "}]}