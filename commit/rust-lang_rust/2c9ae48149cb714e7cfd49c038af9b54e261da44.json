{"sha": "2c9ae48149cb714e7cfd49c038af9b54e261da44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOWFlNDgxNDljYjcxNGU3Y2ZkNDljMDM4YWY5YjU0ZTI2MWRhNDQ=", "commit": {"author": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-04-02T05:16:46Z"}, "committer": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-04-02T18:57:08Z"}, "message": "Oops, we can't parse options until all options have been defined.  Tiny bit of manual arg-parsing.  Fixed tidy stuff too.", "tree": {"sha": "68c8098ad88b55c4e24108a64193553f5a9f953f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c8098ad88b55c4e24108a64193553f5a9f953f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c9ae48149cb714e7cfd49c038af9b54e261da44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9ae48149cb714e7cfd49c038af9b54e261da44", "html_url": "https://github.com/rust-lang/rust/commit/2c9ae48149cb714e7cfd49c038af9b54e261da44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c9ae48149cb714e7cfd49c038af9b54e261da44/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "aa4bd0ec0ea0e4edd2a4507c776f9979a05005d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4bd0ec0ea0e4edd2a4507c776f9979a05005d1", "html_url": "https://github.com/rust-lang/rust/commit/aa4bd0ec0ea0e4edd2a4507c776f9979a05005d1"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "9b45246bc500204b2fcbdb7fd5a6894b04ff662d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2c9ae48149cb714e7cfd49c038af9b54e261da44/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9ae48149cb714e7cfd49c038af9b54e261da44/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2c9ae48149cb714e7cfd49c038af9b54e261da44", "patch": "@@ -113,31 +113,28 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n             process::exit(exit_code);\n         };\n \n-        // Get subcommand\n-        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n-            // Invalid argument/option format\n-            println!(\"\\n{}\\n\", e);\n-            usage(1, &opts, &subcommand_help, &extra_help);\n-        });\n-        let subcommand = match matches.free.get(0) {\n-            Some(s) => { s },\n-            None  => {\n-                // No subcommand -- lets only show the general usage and subcommand help in this case.\n+        // We can't use getopt to parse the options until we have completed specifying which\n+        // options are valid, but under the current implementation, some options are conditional on\n+        // the subcommand. Therefore we must manually identify the subcommand first, so that we can\n+        // complete the definition of the options.  Then we can use the getopt::Matches object from\n+        // there on out.\n+        let mut possible_subcommands = args.iter().collect::<Vec<_>>();\n+        possible_subcommands.retain(|&s| !s.starts_with('-'));\n+        let subcommand = match possible_subcommands.first() {\n+            Some(s) => s,\n+            None => {\n+                // No subcommand -- show the general usage and subcommand help\n                 println!(\"{}\\n\", subcommand_help);\n                 process::exit(0);\n             }\n         };\n \n-        // Get any optional paths which occur after the subcommand\n-        let cwd = t!(env::current_dir());\n-        let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n-\n         // Some subcommands have specific arguments help text\n         match subcommand.as_str() {\n             \"build\" => {\n                 subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of paths to directories to the crates \n+    This subcommand accepts a number of paths to directories to the crates\n     and/or artifacts to compile. For example:\n \n         ./x.py build src/libcore\n@@ -195,6 +192,17 @@ Arguments:\n             _ => { }\n         };\n \n+        // Done specifying what options are possible, so do the getopts parsing\n+        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+            // Invalid argument/option format\n+            println!(\"\\n{}\\n\", e);\n+            usage(1, &opts, &subcommand_help, &extra_help);\n+        });\n+        // Get any optional paths which occur after the subcommand\n+        let cwd = t!(env::current_dir());\n+        let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n+\n+\n         // All subcommands can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n             let flags = Flags::parse(&[\"build\".to_string()]);"}]}