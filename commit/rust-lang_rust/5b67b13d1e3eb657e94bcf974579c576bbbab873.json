{"sha": "5b67b13d1e3eb657e94bcf974579c576bbbab873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjdiMTNkMWUzZWI2NTdlOTRiY2Y5NzQ1NzljNTc2YmJiYWI4NzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-22T16:26:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-22T16:26:15Z"}, "message": "Rollup merge of #50932 - nnethercote:seen-Predicates, r=eddyb\n\nOptimize seen Predicate filtering.\n\nThis speeds up a few rustc-perf benchmark runs, most notably ones\ninvolving 'coercions', the best by 2%.", "tree": {"sha": "3dabe44eeff93e9567eb497e5cc6ecd89314ea45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dabe44eeff93e9567eb497e5cc6ecd89314ea45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b67b13d1e3eb657e94bcf974579c576bbbab873", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBESoCRBK7hj4Ov3rIwAAdHIIAEnokXSNhcUj35UKmYHsLNjx\nwnBpFLikD6bn4W4G4KeUaWLngL+j6nyOEA+6jTilrmktdRbWJrW26Mo4y2bM5ty4\nrqVtYRA54tDXHsOxMh0y2oTW9jDBfUM1XsaD4ve3l2JguZq00n7dG3WWgAuJM8pP\n/P64O7Di4487ZN7toI88s/J1ksjrEAcAJqOEBY/i8rOY6/nBQct+eVR9yosIJSRJ\nxM8+p2N4vbDvwL7gYB6diakzP0Jttp2fTo4orofZv3bVjVY69kvjOarF//75B0jb\n/WFufQngKpthjB2imjqlU6YCYGbuoDa8e7Ko7QnQp6kcSjWEdacWCHXXiC00TK8=\n=gvSA\n-----END PGP SIGNATURE-----\n", "payload": "tree 3dabe44eeff93e9567eb497e5cc6ecd89314ea45\nparent bc76e8b029c83f115b369c921d55077e6a5a2ea8\nparent 2ff632484cd8c2e3b123fbf52d9dd39b54a94505\nauthor kennytm <kennytm@gmail.com> 1527006375 +0800\ncommitter GitHub <noreply@github.com> 1527006375 +0800\n\nRollup merge of #50932 - nnethercote:seen-Predicates, r=eddyb\n\nOptimize seen Predicate filtering.\n\nThis speeds up a few rustc-perf benchmark runs, most notably ones\ninvolving 'coercions', the best by 2%.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b67b13d1e3eb657e94bcf974579c576bbbab873", "html_url": "https://github.com/rust-lang/rust/commit/5b67b13d1e3eb657e94bcf974579c576bbbab873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b67b13d1e3eb657e94bcf974579c576bbbab873/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc76e8b029c83f115b369c921d55077e6a5a2ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc76e8b029c83f115b369c921d55077e6a5a2ea8", "html_url": "https://github.com/rust-lang/rust/commit/bc76e8b029c83f115b369c921d55077e6a5a2ea8"}, {"sha": "2ff632484cd8c2e3b123fbf52d9dd39b54a94505", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff632484cd8c2e3b123fbf52d9dd39b54a94505", "html_url": "https://github.com/rust-lang/rust/commit/2ff632484cd8c2e3b123fbf52d9dd39b54a94505"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "7a52a5cbf5acc69713a9dd58c5186e8c0eb63c1b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b67b13d1e3eb657e94bcf974579c576bbbab873/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b67b13d1e3eb657e94bcf974579c576bbbab873/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5b67b13d1e3eb657e94bcf974579c576bbbab873", "patch": "@@ -3356,13 +3356,28 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n+\n         // We are performing deduplication here to avoid exponential blowups\n         // (#38528) from happening, but the real cause of the duplication is\n         // unknown. What we know is that the deduplication avoids exponential\n-        // amount of predicates being propogated when processing deeply nested\n+        // amount of predicates being propagated when processing deeply nested\n         // types.\n-        let mut seen = FxHashSet();\n-        predicates.retain(|i| seen.insert(i.clone()));\n+        //\n+        // This code is hot enough that it's worth avoiding the allocation\n+        // required for the FxHashSet when possible. Special-casing lengths 0,\n+        // 1 and 2 covers roughly 75--80% of the cases.\n+        if predicates.len() <= 1 {\n+            // No possibility of duplicates.\n+        } else if predicates.len() == 2 {\n+            // Only two elements. Drop the second if they are equal.\n+            if predicates[0] == predicates[1] {\n+                predicates.truncate(1);\n+            }\n+        } else {\n+            // Three or more elements. Use a general deduplication process.\n+            let mut seen = FxHashSet();\n+            predicates.retain(|i| seen.insert(i.clone()));\n+        }\n         self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }"}]}