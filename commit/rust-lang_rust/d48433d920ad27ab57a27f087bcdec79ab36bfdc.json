{"sha": "d48433d920ad27ab57a27f087bcdec79ab36bfdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODQzM2Q5MjBhZDI3YWI1N2EyN2YwODdiY2RlYzc5YWIzNmJmZGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-01T18:57:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-01T18:57:06Z"}, "message": "also replace before_exec by pre_exec on redox", "tree": {"sha": "427f5909e3a1cb556b702642163a5b8db6ab12fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427f5909e3a1cb556b702642163a5b8db6ab12fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d48433d920ad27ab57a27f087bcdec79ab36bfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d48433d920ad27ab57a27f087bcdec79ab36bfdc", "html_url": "https://github.com/rust-lang/rust/commit/d48433d920ad27ab57a27f087bcdec79ab36bfdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d48433d920ad27ab57a27f087bcdec79ab36bfdc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfb280189ef6960525f18364c1b4644a913f4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfb280189ef6960525f18364c1b4644a913f4ce", "html_url": "https://github.com/rust-lang/rust/commit/6bfb280189ef6960525f18364c1b4644a913f4ce"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "78917ea91886b3032621d330fe179fcead2c82ca", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=d48433d920ad27ab57a27f087bcdec79ab36bfdc", "patch": "@@ -36,7 +36,7 @@ pub trait CommandExt {\n     /// will be called and the spawn operation will immediately return with a\n     /// failure.\n     ///\n-    /// # Notes\n+    /// # Notes and Safety\n     ///\n     /// This closure will be run in the context of the child process after a\n     /// `fork`. This primarily means that any modifications made to memory on\n@@ -45,12 +45,32 @@ pub trait CommandExt {\n     /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n     /// other threads perhaps still running when the `fork` was run).\n     ///\n+    /// This also means that all resources such as file descriptors and\n+    /// memory-mapped regions got duplicated. It is your responsibility to make\n+    /// sure that the closure does not violate library invariants by making\n+    /// invalid use of these duplicates.\n+    ///\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n+    #[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+\n+    /// Schedules a closure to be run just before the `exec` function is\n+    /// invoked.\n+    ///\n+    /// This method should be unsafe, so it got deprecated in favor of the\n+    /// unsafe [`pre_exec`].\n+    ///\n+    /// [`pre_exec`]: #tymethod.pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n+    #[rustc_deprecated(since = \"1.34.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n-        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n+    {\n+        unsafe { self.pre_exec(f) }\n+    }\n \n     /// Performs all the required setup by this `Command`, followed by calling\n     /// the `execvp` syscall.\n@@ -87,10 +107,10 @@ impl CommandExt for process::Command {\n         self\n     }\n \n-    fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n     {\n-        self.as_inner_mut().before_exec(Box::new(f));\n+        self.as_inner_mut().pre_exec(Box::new(f));\n         self\n     }\n "}, {"sha": "9b85fa41a0a4f4624d6d4a9f6f62a5bc6edde241", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=d48433d920ad27ab57a27f087bcdec79ab36bfdc", "patch": "@@ -116,7 +116,7 @@ impl Command {\n         self.gid = Some(id);\n     }\n \n-    pub fn before_exec(&mut self,\n+    pub unsafe fn pre_exec(&mut self,\n                        f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n         self.closures.push(f);\n     }"}, {"sha": "7cc5e9945938d531360c0831abac8af4f0ca64c7", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48433d920ad27ab57a27f087bcdec79ab36bfdc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=d48433d920ad27ab57a27f087bcdec79ab36bfdc", "patch": "@@ -36,7 +36,7 @@ pub trait CommandExt {\n     /// will be called and the spawn operation will immediately return with a\n     /// failure.\n     ///\n-    /// # Notes\n+    /// # Notes and Safety\n     ///\n     /// This closure will be run in the context of the child process after a\n     /// `fork`. This primarily means that any modifications made to memory on"}]}