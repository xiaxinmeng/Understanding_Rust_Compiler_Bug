{"sha": "12d3f107c1634ed41a800e220ccf99b665d906d8", "node_id": "C_kwDOAAsO6NoAKDEyZDNmMTA3YzE2MzRlZDQxYTgwMGUyMjBjY2Y5OWI2NjVkOTA2ZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T05:08:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T05:08:44Z"}, "message": "Auto merge of #96626 - thomcc:rand-bump, r=m-ou-se\n\nAvoid using `rand::thread_rng` in the stdlib benchmarks.\n\nThis is kind of an anti-pattern because it introduces extra nondeterminism for no real reason. In thread_rng's case this comes both from the random seed and also from the reseeding operations it does, which occasionally does syscalls (which adds additional nondeterminism). The impact of this would be pretty small in most cases, but it's a good practice to avoid (particularly because avoiding it was not hard).\n\nAnyway, several of our benchmarks already did the right thing here anyway, so the change was pretty easy and mostly just applying it more universally. That said, the stdlib benchmarks aren't particularly stable (nor is our benchmark framework particularly great), so arguably this doesn't matter that much in practice.\n\n~~Anyway, this also bumps the `rand` dev-dependency to 0.8, since it had fallen somewhat out of date.~~ Nevermind, too much of a headache.", "tree": {"sha": "c30046c7af437b6f169af2040d0573b2be0c3fae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30046c7af437b6f169af2040d0573b2be0c3fae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d3f107c1634ed41a800e220ccf99b665d906d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d3f107c1634ed41a800e220ccf99b665d906d8", "html_url": "https://github.com/rust-lang/rust/commit/12d3f107c1634ed41a800e220ccf99b665d906d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d3f107c1634ed41a800e220ccf99b665d906d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3e03666a93bd2b0f78b3933f9305832af771a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3e03666a93bd2b0f78b3933f9305832af771a5", "html_url": "https://github.com/rust-lang/rust/commit/7d3e03666a93bd2b0f78b3933f9305832af771a5"}, {"sha": "0812759840eb9c52e646729603a207c2a0ed1a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0812759840eb9c52e646729603a207c2a0ed1a65", "html_url": "https://github.com/rust-lang/rust/commit/0812759840eb9c52e646729603a207c2a0ed1a65"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "188db89bc6c78a9007c8be40c57062202030b2e1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -828,6 +828,7 @@ name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n  \"rand 0.7.3\",\n+ \"rand_xorshift\",\n ]\n \n [[package]]"}, {"sha": "917e71f250ee8b16181f70ada342f607fd6cf7b0", "filename": "library/alloc/benches/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbinary_heap.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -1,11 +1,11 @@\n use std::collections::BinaryHeap;\n \n-use rand::{seq::SliceRandom, thread_rng};\n+use rand::seq::SliceRandom;\n use test::{black_box, Bencher};\n \n #[bench]\n fn bench_find_smallest_1000(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..100_000).collect();\n     vec.shuffle(&mut rng);\n \n@@ -47,7 +47,7 @@ fn bench_peek_mut_deref_mut(b: &mut Bencher) {\n \n #[bench]\n fn bench_from_vec(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..100_000).collect();\n     vec.shuffle(&mut rng);\n \n@@ -64,7 +64,7 @@ fn bench_into_sorted_vec(b: &mut Bencher) {\n #[bench]\n fn bench_push(b: &mut Bencher) {\n     let mut bheap = BinaryHeap::with_capacity(50_000);\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..50_000).collect();\n     vec.shuffle(&mut rng);\n "}, {"sha": "1f6b87fb0e40faf74c067df84ed2e28ad757d357", "filename": "library/alloc/benches/btree/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -3,7 +3,7 @@ use std::iter::Iterator;\n use std::ops::RangeBounds;\n use std::vec::Vec;\n \n-use rand::{seq::SliceRandom, thread_rng, Rng};\n+use rand::{seq::SliceRandom, Rng};\n use test::{black_box, Bencher};\n \n macro_rules! map_insert_rand_bench {\n@@ -13,7 +13,7 @@ macro_rules! map_insert_rand_bench {\n             let n: usize = $n;\n             let mut map = $map::new();\n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n \n             for _ in 0..n {\n                 let i = rng.gen::<usize>() % n;\n@@ -60,7 +60,7 @@ macro_rules! map_from_iter_rand_bench {\n         pub fn $name(b: &mut Bencher) {\n             let n: usize = $n;\n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n             let mut vec = Vec::with_capacity(n);\n \n             for _ in 0..n {\n@@ -106,7 +106,7 @@ macro_rules! map_find_rand_bench {\n             let n: usize = $n;\n \n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n             let mut keys: Vec<_> = (0..n).map(|_| rng.gen::<usize>() % n).collect();\n \n             for &k in &keys {\n@@ -169,7 +169,7 @@ map_find_seq_bench! {find_seq_10_000, 10_000, BTreeMap}\n \n fn bench_iteration(b: &mut Bencher, size: i32) {\n     let mut map = BTreeMap::<i32, i32>::new();\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n \n     for _ in 0..size {\n         map.insert(rng.gen(), rng.gen());\n@@ -199,7 +199,7 @@ pub fn iteration_100000(b: &mut Bencher) {\n \n fn bench_iteration_mut(b: &mut Bencher, size: i32) {\n     let mut map = BTreeMap::<i32, i32>::new();\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n \n     for _ in 0..size {\n         map.insert(rng.gen(), rng.gen());"}, {"sha": "3f4b0e0f14af7497f57675b6350f092a14b2fa8b", "filename": "library/alloc/benches/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -1,10 +1,10 @@\n use std::collections::BTreeSet;\n \n-use rand::{thread_rng, Rng};\n+use rand::Rng;\n use test::Bencher;\n \n fn random(n: usize) -> BTreeSet<usize> {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut set = BTreeSet::new();\n     while set.len() < n {\n         set.insert(rng.gen());"}, {"sha": "7dc0f7cebd535e886446fc9898a573e2f666d229", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -17,3 +17,11 @@ mod str;\n mod string;\n mod vec;\n mod vec_deque;\n+\n+/// Returns a `rand::Rng` seeded with a consistent seed.\n+///\n+/// This is done to avoid introducing nondeterminism in benchmark results.\n+fn bench_rng() -> rand_xorshift::XorShiftRng {\n+    const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+    rand::SeedableRng::from_seed(SEED)\n+}"}, {"sha": "bd6f38f2f100322d57fe9569bd8fe01b66ff9258", "filename": "library/alloc/benches/slice.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fslice.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -1,8 +1,7 @@\n use std::{mem, ptr};\n \n use rand::distributions::{Alphanumeric, Standard};\n-use rand::{thread_rng, Rng, SeedableRng};\n-use rand_xorshift::XorShiftRng;\n+use rand::Rng;\n use test::{black_box, Bencher};\n \n #[bench]\n@@ -152,7 +151,7 @@ fn zero_1kb_mut_iter(b: &mut Bencher) {\n \n #[bench]\n fn random_inserts(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     b.iter(|| {\n         let mut v = vec![(0, 0); 30];\n         for _ in 0..100 {\n@@ -164,7 +163,7 @@ fn random_inserts(b: &mut Bencher) {\n \n #[bench]\n fn random_removes(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     b.iter(|| {\n         let mut v = vec![(0, 0); 130];\n         for _ in 0..100 {\n@@ -182,20 +181,18 @@ fn gen_descending(len: usize) -> Vec<u64> {\n     (0..len as u64).rev().collect()\n }\n \n-const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n-\n fn gen_random(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_random_bytes(len: usize) -> Vec<u8> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = gen_ascending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -206,7 +203,7 @@ fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n }\n \n fn gen_mostly_descending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = gen_descending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -217,7 +214,7 @@ fn gen_mostly_descending(len: usize) -> Vec<u64> {\n }\n \n fn gen_strings(len: usize) -> Vec<String> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = vec![];\n     for _ in 0..len {\n         let n = rng.gen::<usize>() % 20 + 1;\n@@ -227,7 +224,7 @@ fn gen_strings(len: usize) -> Vec<String> {\n }\n \n fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n }\n "}, {"sha": "efc47327e8a86d2fd89b8dec30bf076eb468750f", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -476,7 +476,7 @@ fn bench_in_place_recycle(b: &mut Bencher) {\n #[bench]\n fn bench_in_place_zip_recycle(b: &mut Bencher) {\n     let mut data = vec![0u8; 1000];\n-    let mut rng = rand::thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut subst = vec![0u8; 1000];\n     rng.fill_bytes(&mut subst[..]);\n \n@@ -495,7 +495,7 @@ fn bench_in_place_zip_recycle(b: &mut Bencher) {\n #[bench]\n fn bench_in_place_zip_iter_mut(b: &mut Bencher) {\n     let mut data = vec![0u8; 256];\n-    let mut rng = rand::thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut subst = vec![0u8; 1000];\n     rng.fill_bytes(&mut subst[..]);\n "}, {"sha": "2a7df9556cfe194d9925a70b7414ad7893241ef5", "filename": "library/core/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2FCargo.toml?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -25,6 +25,7 @@ test = true\n \n [dev-dependencies]\n rand = \"0.7\"\n+rand_xorshift = \"0.2\"\n \n [features]\n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "a6c174d2fca2165f017a8c2bcb12a976f039aff4", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -18,3 +18,11 @@ mod ops;\n mod pattern;\n mod slice;\n mod str;\n+\n+/// Returns a `rand::Rng` seeded with a consistent seed.\n+///\n+/// This is done to avoid introducing nondeterminism in benchmark results.\n+fn bench_rng() -> rand_xorshift::XorShiftRng {\n+    const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+    rand::SeedableRng::from_seed(SEED)\n+}"}, {"sha": "19864d2d4676a6d1cf9bd3c3460b03546e1628a2", "filename": "library/core/benches/num/int_log/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d3f107c1634ed41a800e220ccf99b665d906d8/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=12d3f107c1634ed41a800e220ccf99b665d906d8", "patch": "@@ -17,7 +17,7 @@ macro_rules! int_log_bench {\n \n         #[bench]\n         fn $random(bench: &mut Bencher) {\n-            let mut rng = rand::thread_rng();\n+            let mut rng = crate::bench_rng();\n             /* Exponentially distributed random numbers from the whole range of the type.  */\n             let numbers: Vec<$t> = (0..256)\n                 .map(|_| {\n@@ -34,7 +34,7 @@ macro_rules! int_log_bench {\n \n         #[bench]\n         fn $random_small(bench: &mut Bencher) {\n-            let mut rng = rand::thread_rng();\n+            let mut rng = crate::bench_rng();\n             /* Exponentially distributed random numbers from the range 0..256.  */\n             let numbers: Vec<$t> = (0..256)\n                 .map(|_| {"}]}