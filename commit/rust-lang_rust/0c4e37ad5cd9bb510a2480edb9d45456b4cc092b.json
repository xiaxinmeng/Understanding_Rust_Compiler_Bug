{"sha": "0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNGUzN2FkNWNkOWJiNTEwYTI0ODBlZGI5ZDQ1NDU2YjRjYzA5MmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-12T17:04:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T17:04:15Z"}, "message": "Rollup merge of #87953 - m-ou-se:closure-migration-multiline-formatting, r=petrochenkov\n\nImprove formatting of closure capture migration suggestion for multi-line closures.\n\nFixes https://github.com/rust-lang/rust/issues/87952\n\nBefore:\n```\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n5 ~     let _ = || { let _ = &a;\n6 +         dbg!(a.0);\n7 ~     };\n  |\n```\n\nAfter:\n```\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n5 ~     let _ = || {\n6 +         let _ = &a;\n7 +         dbg!(a.0);\n8 ~     };\n  |\n```", "tree": {"sha": "af31599564d3ebeb129e415ccbc540e8634ce9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af31599564d3ebeb129e415ccbc540e8634ce9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFVSQCRBK7hj4Ov3rIwAAjRMIAC80O43k/kfanVeK2Z34MYx9\nCBfsgMpJcQ1RO7NlcJI44in0uJfv71ZWlo5ofIuEgMKwSn5sS6uQdJke9Cv/Bkk3\n8+wKpkFRv2wlezycm4oEwf5nWtPj2f6TnXj9Svntjru/0NzecuwhApHCyRhjgHSt\nixnmc3rYvYNOXq6Zb5LlVsRK4evWBK+ZGBdIl5mRIjRqfVCqb4bZ3eJI35EE0S4o\ncUXfOSujzaQe2fNG3I30MSdiaeabXqmYHsBDE2oXS0eVDkw/HvRapN50zfvdJQ0U\nxJl4UgE5t2xsUJbjc3CX5ACxMOZNImYKhqv/CvzNHF1RV2S1e4REjEafvcZr7dA=\n=alzL\n-----END PGP SIGNATURE-----\n", "payload": "tree af31599564d3ebeb129e415ccbc540e8634ce9f6\nparent 692833a28fd7c2ddd870ef84c4b93ae2584275ee\nparent 31fcc94753dec7506d3395af82c82785a86ebce8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1628787855 -0700\ncommitter GitHub <noreply@github.com> 1628787855 -0700\n\nRollup merge of #87953 - m-ou-se:closure-migration-multiline-formatting, r=petrochenkov\n\nImprove formatting of closure capture migration suggestion for multi-line closures.\n\nFixes https://github.com/rust-lang/rust/issues/87952\n\nBefore:\n```\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n5 ~     let _ = || { let _ = &a;\n6 +         dbg!(a.0);\n7 ~     };\n  |\n```\n\nAfter:\n```\nhelp: add a dummy let to cause `a` to be fully captured\n  |\n5 ~     let _ = || {\n6 +         let _ = &a;\n7 +         dbg!(a.0);\n8 ~     };\n  |\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "html_url": "https://github.com/rust-lang/rust/commit/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692833a28fd7c2ddd870ef84c4b93ae2584275ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/692833a28fd7c2ddd870ef84c4b93ae2584275ee", "html_url": "https://github.com/rust-lang/rust/commit/692833a28fd7c2ddd870ef84c4b93ae2584275ee"}, {"sha": "31fcc94753dec7506d3395af82c82785a86ebce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fcc94753dec7506d3395af82c82785a86ebce8", "html_url": "https://github.com/rust-lang/rust/commit/31fcc94753dec7506d3395af82c82785a86ebce8"}], "stats": {"total": 202, "additions": 119, "deletions": 83}, "files": [{"sha": "9cf741bc63fef60c593a354f44e414c737edafa9", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -649,11 +649,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                             Ok(s) => {\n                                 let trimmed = s.trim_start();\n+                                let mut lines = trimmed.lines();\n+                                let line1 = lines.next().unwrap_or_default();\n \n                                 // If the closure contains a block then replace the opening brace\n                                 // with \"{ let _ = (..); \"\n-                                let sugg = if let Some('{') = trimmed.chars().next() {\n-                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..])\n+                                let sugg = if line1.trim_end() == \"{\" {\n+                                    // This is a multi-line closure with just a `{` on the first line,\n+                                    // so we put the `let` on its own line.\n+                                    // We take the indentation from the next non-empty line.\n+                                    let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n+                                    let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n+                                    format!(\"{{\\n{}{};{}\", indent, migration_string, &trimmed[line1.len()..])\n+                                } else if line1.starts_with('{') {\n+                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..].trim_start())\n                                 } else {\n                                     format!(\"{{ {}; {} }}\", migration_string, s)\n                                 };"}, {"sha": "546ad9622d4b35aea90c5c877b19ec8f150c578c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -55,7 +55,8 @@ impl Clone for U {\n \n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n-    let c = || { let _ = &f; \n+    let c = || {\n+        let _ = &f;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see"}, {"sha": "1b10f799bca4a8201e3a9cb89675d74b6f1a0b64", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -58,12 +58,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f; \n+LL ~     let c = || {\n+LL +         let _ = &f;\n LL +\n LL +\n LL +\n LL +\n-LL +         let f_1 = f.1;\n  ...\n \n error: aborting due to 3 previous errors"}, {"sha": "862a2b99019facefc5ead134d42cc9dcb6dc4d45", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -12,7 +12,8 @@ fn test1_all_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1, &t2); \n+    let c = || {\n+        let _ = (&t, &t1, &t2);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n@@ -38,7 +39,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1); \n+    let c = || {\n+        let _ = (&t, &t1);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -59,7 +61,8 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -80,7 +83,8 @@ fn test4_only_non_copy_types_need_migration() {\n     // `t1` is Copy because all of its elements are Copy\n     let t1 = (0i32, 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -101,7 +105,8 @@ fn test5_only_drop_types_need_migration() {\n     // `s` doesn't implement Drop or any elements within it, and doesn't need migration\n     let s = S(0i32, 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -119,7 +124,8 @@ fn test5_only_drop_types_need_migration() {\n fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = move || { let _ = (&t1, &t); \n+    let c = move || {\n+        let _ = (&t1, &t);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -139,7 +145,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "c85519d6b314eda82051ab3587dd12e5c77c467b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1, &t2);\n LL +\n LL +\n LL +\n LL + \n-LL +         let _t = t.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -154,12 +154,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = (&t1, &t); \n+LL ~     let c = move || {\n+LL +         let _ = (&t1, &t);\n LL +\n LL +\n LL +\n LL +         println!(\"{} {}\", t1.1, t.1);\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: aborting due to 7 previous errors"}, {"sha": "6e58ffb6035e584f58e29c3f3eb85f524db5bdb4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -34,7 +34,8 @@ impl<T> Drop for GenericStruct<T> {\n fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -54,7 +55,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n     let t = Wrapper(GenericStruct(SigDrop {}, SigDrop {}), 5);\n \n     // move is used to force i32 to be copied instead of being a ref\n-    let c = move || { let _ = &t; \n+    let c = move || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "8461939dc3d2a8053c7297d8bdc26246ca2fea2f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -41,12 +41,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = &t; \n+LL ~     let c = move || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.1;\n-LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "d9fa0a7fc3596b72bde73d89a40bc97a5503bd70", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -16,7 +16,8 @@ impl Drop for Foo {\n \n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "2bfdeffbcb1012fd481c30f0b1d3db72258866a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order"}, {"sha": "0ad382061a1f59b10785f7ef378e0ff0a1e77db4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -17,7 +17,8 @@ where\n     F: FnOnce(),\n {\n     let f = panic::AssertUnwindSafe(f);\n-    let result = panic::catch_unwind(move || { let _ = &f; \n+    let result = panic::catch_unwind(move || {\n+        let _ = &f;\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see"}, {"sha": "02ee0419b9e31884491d67fb7c8e4a0a9d9b3f5a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -15,12 +15,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL ~     let result = panic::catch_unwind(move || { let _ = &f; \n+LL ~     let result = panic::catch_unwind(move || {\n+LL +         let _ = &f;\n LL +\n LL +\n LL +\n LL +\n-LL +         f.0()\n  ...\n \n error: aborting due to previous error"}, {"sha": "ef077a3ce3f98415d2793db2500951ee140fad96", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -20,7 +20,8 @@ impl Clone for U {\n fn test_multi_issues() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n     let f2 = U(S(String::from(\"bar\")), T(0));\n-    let c = || { let _ = (&f1, &f2); \n+    let c = || {\n+        let _ = (&f1, &f2);\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -39,7 +40,8 @@ fn test_multi_issues() {\n \n fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -64,7 +66,8 @@ impl Clone for U1 {\n \n fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n@@ -83,7 +86,8 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n \n fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see"}, {"sha": "d4bd029052a00668411c0a4acbb8fd0f09ec9167", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -21,12 +21,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&f1, &f2); \n+LL ~     let c = || {\n+LL +         let _ = (&f1, &f2);\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -41,12 +41,12 @@ LL |         let _f_1 = f1.0;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -67,8 +67,8 @@ LL |         let _f_2 = f1.2;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n-LL +\n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n@@ -96,12 +96,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_0 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure"}, {"sha": "fa0831460548d8d82a274099d5edaefb100fc0d0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -17,7 +17,8 @@ struct ConstainsDropField(Foo, Foo);\n fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -42,7 +43,8 @@ struct U(T, T);\n fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n-    let c = || { let _ = &u; \n+    let c = || {\n+        let _ = &u;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured"}, {"sha": "f0b1e2c4c866af4fdc96b016468cd3dbfcfb4374", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -51,12 +51,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n-LL ~     let c = || { let _ = &u; \n+LL ~     let c = || {\n+LL +         let _ = &u;\n LL +\n LL +\n LL +\n LL +         let _x = u.0.0;\n-LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "0926c07eed3791b7379d8dee3d21231bc7536b4c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -22,7 +22,8 @@ fn test1_all_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1, &t2); \n+    let c = || {\n+        let _ = (&t, &t1, &t2);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n@@ -47,7 +48,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1); \n+    let c = || {\n+        let _ = (&t, &t1);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -68,7 +70,8 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -88,7 +91,8 @@ fn test3_only_by_value_need_migration() {\n fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -106,7 +110,8 @@ fn test4_type_contains_drop_need_migration() {\n fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -122,7 +127,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -140,7 +146,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n-    let c = move || { let _ = (&t1, &t); \n+    let c = move || {\n+        let _ = (&t1, &t);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -160,7 +167,8 @@ fn test8_drop_order_and_blocks() {\n         let tuple =\n           (String::from(\"foo\"), String::from(\"bar\"));\n         {\n-            let c = || { let _ = &tuple; \n+            let c = || {\n+                let _ = &tuple;\n                 //~^ ERROR: drop order\n                 //~| NOTE: for more information, see\n                 //~| HELP: add a dummy let to cause `tuple` to be fully captured\n@@ -178,7 +186,8 @@ fn test9_drop_order_and_nested_closures() {\n     let tuple =\n         (String::from(\"foo\"), String::from(\"bar\"));\n     let b = || {\n-        let c = || { let _ = &tuple; \n+        let c = || {\n+            let _ = &tuple;\n             //~^ ERROR: drop order\n             //~| NOTE: for more information, see\n             //~| HELP: add a dummy let to cause `tuple` to be fully captured"}, {"sha": "643807d614a3494736951f55e3c9ff547fd64813", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1, &t2);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -149,12 +149,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.1;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = (&t1, &t); \n+LL ~     let c = move || {\n+LL +         let _ = (&t1, &t);\n LL +\n LL +\n LL +\n LL +         println!(\"{:?} {:?}\", t1.1, t.1);\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -200,12 +200,12 @@ LL |         }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL ~             let c = || { let _ = &tuple; \n+LL ~             let c = || {\n+LL +                 let _ = &tuple;\n LL +\n LL +\n LL +\n LL +                 tuple.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -223,12 +223,12 @@ LL |     };\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL ~         let c = || { let _ = &tuple; \n+LL ~         let c = || {\n+LL +             let _ = &tuple;\n LL +\n LL +\n LL +\n LL +             tuple.0;\n-LL +\n  ...\n \n error: aborting due to 9 previous errors"}]}