{"sha": "aef11409b43a533f4e59ffb9b0efcb619c6e6879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjExNDA5YjQzYTUzM2Y0ZTU5ZmZiOWIwZWZjYjYxOWM2ZTY4Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T10:40:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T10:40:16Z"}, "message": "Auto merge of #78618 - workingjubilee:ieee754-fmt, r=m-ou-se\n\nAdd IEEE 754 compliant fmt/parse of -0, infinity, NaN\n\nThis pull request improves the Rust float formatting/parsing libraries to comply with IEEE 754's formatting expectations around certain special values, namely signed zero, the infinities, and NaN. It also adds IEEE 754 compliance tests that, while less stringent in certain places than many of the existing flt2dec/dec2flt capability tests, are intended to serve as the beginning of a roadmap to future compliance with the standard. Some relevant documentation is also adjusted with clarifying remarks.\n\nThis PR follows from discussion in https://github.com/rust-lang/rfcs/issues/1074, and closes #24623.\n\nThe most controversial change here is likely to be that -0 is now printed as -0. Allow me to explain: While there appears to be community support for an opt-in toggle of printing floats as if they exist in the naively expected domain of numbers, i.e. not the extended reals (where floats live), IEEE 754-2019 is clear that a float converted to a string should be capable of being transformed into the original floating point bit-pattern when it satisfies certain conditions (namely, when it is an actual numeric value i.e. not a NaN and the original and destination float width are the same). -0 is given special attention here as a value that should have its sign preserved. In addition, the vast majority of other programming languages not only output `-0` but output `-0.0` here.\n\nWhile IEEE 754 offers a broad leeway in how to handle producing what it calls a \"decimal character sequence\", it is clear that the operations a language provides should be capable of round tripping, and it is confusing to advertise the f32 and f64 types as binary32 and binary64 yet have the most basic way of producing a string and then reading it back into a floating point number be non-conformant with the standard. Further, existing documentation suggested that e.g. -0 would be printed with -0 regardless of the presence of the `+` fmt character, but it prints \"+0\" instead if given such (which was what led to the opening of #24623).\n\nThere are other parsing and formatting issues for floating point numbers which prevent Rust from complying with the standard, as well as other well-documented challenges on the arithmetic level, but I hope that this can be the beginning of motion towards solving those challenges.", "tree": {"sha": "2dd0bc04c9084ee8a4f83237eb8b89fb5daeb464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd0bc04c9084ee8a4f83237eb8b89fb5daeb464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef11409b43a533f4e59ffb9b0efcb619c6e6879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef11409b43a533f4e59ffb9b0efcb619c6e6879", "html_url": "https://github.com/rust-lang/rust/commit/aef11409b43a533f4e59ffb9b0efcb619c6e6879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef11409b43a533f4e59ffb9b0efcb619c6e6879/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "html_url": "https://github.com/rust-lang/rust/commit/feaac19f1710ebcfecc783d51f52a9b0d8e998f5"}, {"sha": "e8dfbaca76616a32cabba30ec343cd4fcb28bda9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfbaca76616a32cabba30ec343cd4fcb28bda9", "html_url": "https://github.com/rust-lang/rust/commit/e8dfbaca76616a32cabba30ec343cd4fcb28bda9"}], "stats": {"total": 486, "additions": 275, "deletions": 211}, "files": [{"sha": "3ef55f06e51989985409664bf1dd7aff240fcaf8", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -161,9 +161,8 @@\n //!\n //! * `+` - This is intended for numeric types and indicates that the sign\n //!         should always be printed. Positive signs are never printed by\n-//!         default, and the negative sign is only printed by default for the\n-//!         `Signed` trait. This flag indicates that the correct sign (`+` or `-`)\n-//!         should always be printed.\n+//!         default, and the negative sign is only printed by default for signed values.\n+//!         This flag indicates that the correct sign (`+` or `-`) should always be printed.\n //! * `-` - Currently not used\n //! * `#` - This flag indicates that the \"alternate\" form of printing should\n //!         be used. The alternate forms are:"}, {"sha": "27ab6c07e430989aa5d48f9252700d55f3d21eb7", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -151,8 +151,7 @@ fn test_format_macro_interface() {\n     t!(format!(\"{:+10.3e}\", -1.2345e6f64), \"  -1.234e6\");\n \n     // Float edge cases\n-    t!(format!(\"{}\", -0.0), \"0\");\n-    t!(format!(\"{:?}\", -0.0), \"-0.0\");\n+    t!(format!(\"{}\", -0.0), \"-0\");\n     t!(format!(\"{:?}\", 0.0), \"0.0\");\n \n     // sign aware zero padding"}, {"sha": "ece3cde00158074feaaa79348a0e40a4cf51e3dd", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -54,21 +54,14 @@ where\n }\n \n // Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(\n-    fmt: &mut Formatter<'_>,\n-    num: &T,\n-    negative_zero: bool,\n-    min_precision: usize,\n-) -> Result\n+fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T, min_precision: usize) -> Result\n where\n     T: flt2dec::DecodableFloat,\n {\n     let force_sign = fmt.sign_plus();\n-    let sign = match (force_sign, negative_zero) {\n-        (false, false) => flt2dec::Sign::Minus,\n-        (false, true) => flt2dec::Sign::MinusRaw,\n-        (true, false) => flt2dec::Sign::MinusPlus,\n-        (true, true) => flt2dec::Sign::MinusPlusRaw,\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true => flt2dec::Sign::MinusPlus,\n     };\n \n     if let Some(precision) = fmt.precision {\n@@ -156,14 +149,14 @@ macro_rules! floating {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, true, 1)\n+                float_to_decimal_common(fmt, self, 1)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, false, 0)\n+                float_to_decimal_common(fmt, self, 0)\n             }\n         }\n "}, {"sha": "f008a64ffe653a6bf687cba4d0047da8bed45336", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -239,13 +239,15 @@ fn dec2flt<T: RawFloat>(s: &str) -> Result<T, ParseFloatError> {\n         ParseResult::Valid(decimal) => convert(decimal)?,\n         ParseResult::ShortcutToInf => T::INFINITY,\n         ParseResult::ShortcutToZero => T::ZERO,\n-        ParseResult::Invalid => match s {\n-            \"inf\" => T::INFINITY,\n-            \"NaN\" => T::NAN,\n-            _ => {\n+        ParseResult::Invalid => {\n+            if s.eq_ignore_ascii_case(\"nan\") {\n+                T::NAN\n+            } else if s.eq_ignore_ascii_case(\"inf\") || s.eq_ignore_ascii_case(\"infinity\") {\n+                T::INFINITY\n+            } else {\n                 return Err(pfe_invalid());\n             }\n-        },\n+        }\n     };\n \n     match sign {"}, {"sha": "93bdf5040e08b52f54e31365aa2e05e9d61bed6a", "filename": "library/core/src/num/flt2dec/mod.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -399,45 +399,25 @@ fn digits_to_exp_str<'a>(\n /// Sign formatting options.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Sign {\n-    /// Prints `-` only for the negative non-zero values.\n-    Minus, // -inf -1  0  0  1  inf nan\n-    /// Prints `-` only for any negative values (including the negative zero).\n-    MinusRaw, // -inf -1 -0  0  1  inf nan\n-    /// Prints `-` for the negative non-zero values, or `+` otherwise.\n-    MinusPlus, // -inf -1 +0 +0 +1 +inf nan\n-    /// Prints `-` for any negative values (including the negative zero), or `+` otherwise.\n-    MinusPlusRaw, // -inf -1 -0 +0 +1 +inf nan\n+    /// Prints `-` for any negative value.\n+    Minus, // -inf -1 -0  0  1  inf nan\n+    /// Prints `-` for any negative value, or `+` otherwise.\n+    MinusPlus, // -inf -1 -0 +0 +1 +inf nan\n }\n \n /// Returns the static byte string corresponding to the sign to be formatted.\n /// It can be either `\"\"`, `\"+\"` or `\"-\"`.\n fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static str {\n     match (*decoded, sign) {\n         (FullDecoded::Nan, _) => \"\",\n-        (FullDecoded::Zero, Sign::Minus) => \"\",\n-        (FullDecoded::Zero, Sign::MinusRaw) => {\n+        (_, Sign::Minus) => {\n             if negative {\n                 \"-\"\n             } else {\n                 \"\"\n             }\n         }\n-        (FullDecoded::Zero, Sign::MinusPlus) => \"+\",\n-        (FullDecoded::Zero, Sign::MinusPlusRaw) => {\n-            if negative {\n-                \"-\"\n-            } else {\n-                \"+\"\n-            }\n-        }\n-        (_, Sign::Minus | Sign::MinusRaw) => {\n-            if negative {\n-                \"-\"\n-            } else {\n-                \"\"\n-            }\n-        }\n-        (_, Sign::MinusPlus | Sign::MinusPlusRaw) => {\n+        (_, Sign::MinusPlus) => {\n             if negative {\n                 \"-\"\n             } else {"}, {"sha": "960a7ca5ff5086cacc2089e8ea7a7d86513c52d6", "filename": "library/core/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 88, "deletions": 158, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -514,51 +514,38 @@ where\n     let f = &mut f_;\n \n     assert_eq!(to_string(f, 0.0, Minus, 0), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 0), \"0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 0), \"0\");\n     assert_eq!(to_string(f, 0.0, MinusPlus, 0), \"+0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0), \"+0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 0), \"0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 0), \"-0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"+0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"-0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 1), \"0.0\");\n     assert_eq!(to_string(f, 0.0, Minus, 1), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 1), \"0.0\");\n     assert_eq!(to_string(f, 0.0, MinusPlus, 1), \"+0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1), \"+0.0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 8), \"0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 8), \"-0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"+0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, Minus, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"-0.00000000\");\n \n     assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 0), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0), \"inf\");\n     assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 0), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 0), \"+inf\");\n     assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 1), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 64), \"NaN\");\n     assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 1), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 64), \"-inf\");\n \n     assert_eq!(to_string(f, 3.14, Minus, 0), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 0), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, Minus, 0), \"3.14\");\n     assert_eq!(to_string(f, 3.14, MinusPlus, 0), \"+3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0), \"+3.14\");\n     assert_eq!(to_string(f, -3.14, Minus, 0), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 0), \"-3.14\");\n+    assert_eq!(to_string(f, -3.14, Minus, 0), \"-3.14\");\n     assert_eq!(to_string(f, -3.14, MinusPlus, 0), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0), \"-3.14\");\n     assert_eq!(to_string(f, 3.14, Minus, 1), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 2), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 3), \"+3.140\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, 3.14, Minus, 2), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n     assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 8), \"-3.14000000\");\n     assert_eq!(to_string(f, -3.14, MinusPlus, 8), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8), \"-3.14000000\");\n \n     assert_eq!(to_string(f, 7.5e-11, Minus, 0), \"0.000000000075\");\n     assert_eq!(to_string(f, 7.5e-11, Minus, 3), \"0.000000000075\");\n@@ -615,68 +602,48 @@ where\n     let f = &mut f_;\n \n     assert_eq!(to_string(f, 0.0, Minus, (-4, 16), false), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, (-4, 16), false), \"0\");\n+    assert_eq!(to_string(f, 0.0, Minus, (-4, 16), false), \"0\");\n     assert_eq!(to_string(f, 0.0, MinusPlus, (-4, 16), false), \"+0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, (-4, 16), false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, Minus, (-4, 16), false), \"0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, (-4, 16), false), \"-0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, (-4, 16), false), \"+0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, (-4, 16), false), \"-0\");\n+    assert_eq!(to_string(f, -0.0, Minus, (-4, 16), false), \"-0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, (-4, 16), false), \"-0\");\n     assert_eq!(to_string(f, 0.0, Minus, (0, 0), true), \"0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, (0, 0), false), \"0e0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, (-9, -5), true), \"+0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, (5, 9), false), \"+0e0\");\n-    assert_eq!(to_string(f, -0.0, Minus, (0, 0), true), \"0E0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, (0, 0), false), \"-0e0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, (-9, -5), true), \"+0E0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, (5, 9), false), \"-0e0\");\n+    assert_eq!(to_string(f, 0.0, Minus, (0, 0), false), \"0e0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, (5, 9), false), \"+0e0\");\n+    assert_eq!(to_string(f, -0.0, Minus, (0, 0), true), \"-0E0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, (5, 9), false), \"-0e0\");\n \n     assert_eq!(to_string(f, 1.0 / 0.0, Minus, (-4, 16), false), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, (-4, 16), true), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, (-4, 16), false), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, (-4, 16), true), \"+inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, (-4, 16), true), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, (-4, 16), true), \"+inf\");\n     assert_eq!(to_string(f, 0.0 / 0.0, Minus, (0, 0), false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, (0, 0), true), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, (-9, -5), false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, (5, 9), true), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, (0, 0), true), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, (5, 9), true), \"NaN\");\n     assert_eq!(to_string(f, -1.0 / 0.0, Minus, (0, 0), false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, (0, 0), true), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, (-9, -5), false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, (5, 9), true), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, (0, 0), true), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, (5, 9), true), \"-inf\");\n \n     assert_eq!(to_string(f, 3.14, Minus, (-4, 16), false), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, (-4, 16), false), \"3.14\");\n     assert_eq!(to_string(f, 3.14, MinusPlus, (-4, 16), false), \"+3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, (-4, 16), false), \"+3.14\");\n     assert_eq!(to_string(f, -3.14, Minus, (-4, 16), false), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, (-4, 16), false), \"-3.14\");\n     assert_eq!(to_string(f, -3.14, MinusPlus, (-4, 16), false), \"-3.14\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, (-4, 16), false), \"-3.14\");\n     assert_eq!(to_string(f, 3.14, Minus, (0, 0), true), \"3.14E0\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, (0, 0), false), \"3.14e0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, (-9, -5), true), \"+3.14E0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, (5, 9), false), \"+3.14e0\");\n+    assert_eq!(to_string(f, 3.14, Minus, (0, 0), false), \"3.14e0\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, (5, 9), false), \"+3.14e0\");\n     assert_eq!(to_string(f, -3.14, Minus, (0, 0), true), \"-3.14E0\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, (0, 0), false), \"-3.14e0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, (-9, -5), true), \"-3.14E0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, (5, 9), false), \"-3.14e0\");\n+    assert_eq!(to_string(f, -3.14, Minus, (0, 0), false), \"-3.14e0\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, (5, 9), false), \"-3.14e0\");\n \n     assert_eq!(to_string(f, 0.1, Minus, (-4, 16), false), \"0.1\");\n-    assert_eq!(to_string(f, 0.1, MinusRaw, (-4, 16), false), \"0.1\");\n+    assert_eq!(to_string(f, 0.1, Minus, (-4, 16), false), \"0.1\");\n     assert_eq!(to_string(f, 0.1, MinusPlus, (-4, 16), false), \"+0.1\");\n-    assert_eq!(to_string(f, 0.1, MinusPlusRaw, (-4, 16), false), \"+0.1\");\n     assert_eq!(to_string(f, -0.1, Minus, (-4, 16), false), \"-0.1\");\n-    assert_eq!(to_string(f, -0.1, MinusRaw, (-4, 16), false), \"-0.1\");\n     assert_eq!(to_string(f, -0.1, MinusPlus, (-4, 16), false), \"-0.1\");\n-    assert_eq!(to_string(f, -0.1, MinusPlusRaw, (-4, 16), false), \"-0.1\");\n     assert_eq!(to_string(f, 0.1, Minus, (0, 0), true), \"1E-1\");\n-    assert_eq!(to_string(f, 0.1, MinusRaw, (0, 0), false), \"1e-1\");\n-    assert_eq!(to_string(f, 0.1, MinusPlus, (-9, -5), true), \"+1E-1\");\n-    assert_eq!(to_string(f, 0.1, MinusPlusRaw, (5, 9), false), \"+1e-1\");\n+    assert_eq!(to_string(f, 0.1, Minus, (0, 0), false), \"1e-1\");\n+    assert_eq!(to_string(f, 0.1, MinusPlus, (5, 9), false), \"+1e-1\");\n     assert_eq!(to_string(f, -0.1, Minus, (0, 0), true), \"-1E-1\");\n-    assert_eq!(to_string(f, -0.1, MinusRaw, (0, 0), false), \"-1e-1\");\n-    assert_eq!(to_string(f, -0.1, MinusPlus, (-9, -5), true), \"-1E-1\");\n-    assert_eq!(to_string(f, -0.1, MinusPlusRaw, (5, 9), false), \"-1e-1\");\n+    assert_eq!(to_string(f, -0.1, Minus, (0, 0), false), \"-1e-1\");\n+    assert_eq!(to_string(f, -0.1, MinusPlus, (5, 9), false), \"-1e-1\");\n \n     assert_eq!(to_string(f, 7.5e-11, Minus, (-4, 16), false), \"7.5e-11\");\n     assert_eq!(to_string(f, 7.5e-11, Minus, (-11, 10), false), \"0.000000000075\");\n@@ -734,68 +701,51 @@ where\n     let f = &mut f_;\n \n     assert_eq!(to_string(f, 0.0, Minus, 1, true), \"0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 1, false), \"0e0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 1, true), \"+0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1, false), \"+0e0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 1, true), \"0E0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 1, false), \"-0e0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 1, true), \"+0E0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 1, false), \"-0e0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 1, false), \"0e0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 1, false), \"+0e0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 1, true), \"-0E0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 1, false), \"-0e0\");\n     assert_eq!(to_string(f, 0.0, Minus, 2, true), \"0.0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 2, false), \"0.0e0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlus, 2, true), \"+0.0E0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 2, false), \"+0.0e0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 8, true), \"0.0000000E0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 8, false), \"-0.0000000e0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 8, true), \"+0.0000000E0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8, false), \"-0.0000000e0\");\n+    assert_eq!(to_string(f, 0.0, Minus, 2, false), \"0.0e0\");\n+    assert_eq!(to_string(f, 0.0, MinusPlus, 2, false), \"+0.0e0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 8, false), \"-0.0000000e0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 8, false), \"-0.0000000e0\");\n \n     assert_eq!(to_string(f, 1.0 / 0.0, Minus, 1, false), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 1, true), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 1, false), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 1, true), \"+inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 1, true), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 1, true), \"+inf\");\n     assert_eq!(to_string(f, 0.0 / 0.0, Minus, 8, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 8, true), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8, false), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 8, true), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 8, true), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8, true), \"NaN\");\n     assert_eq!(to_string(f, -1.0 / 0.0, Minus, 64, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 64, true), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 64, false), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64, true), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 64, true), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 64, true), \"-inf\");\n \n     assert_eq!(to_string(f, 3.14, Minus, 1, true), \"3E0\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 1, false), \"3e0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 1, true), \"+3E0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 1, false), \"+3e0\");\n+    assert_eq!(to_string(f, 3.14, Minus, 1, false), \"3e0\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 1, false), \"+3e0\");\n     assert_eq!(to_string(f, -3.14, Minus, 2, true), \"-3.1E0\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 2, false), \"-3.1e0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 2, true), \"-3.1E0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 2, false), \"-3.1e0\");\n+    assert_eq!(to_string(f, -3.14, Minus, 2, false), \"-3.1e0\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 2, false), \"-3.1e0\");\n     assert_eq!(to_string(f, 3.14, Minus, 3, true), \"3.14E0\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 3, false), \"3.14e0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 3, true), \"+3.14E0\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 3, false), \"+3.14e0\");\n+    assert_eq!(to_string(f, 3.14, Minus, 3, false), \"3.14e0\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 3, false), \"+3.14e0\");\n     assert_eq!(to_string(f, -3.14, Minus, 4, true), \"-3.140E0\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 4, false), \"-3.140e0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlus, 4, true), \"-3.140E0\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 4, false), \"-3.140e0\");\n+    assert_eq!(to_string(f, -3.14, Minus, 4, false), \"-3.140e0\");\n+    assert_eq!(to_string(f, -3.14, MinusPlus, 4, false), \"-3.140e0\");\n \n     assert_eq!(to_string(f, 0.195, Minus, 1, false), \"2e-1\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 1, true), \"2E-1\");\n-    assert_eq!(to_string(f, 0.195, MinusPlus, 1, false), \"+2e-1\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 1, true), \"+2E-1\");\n+    assert_eq!(to_string(f, 0.195, Minus, 1, true), \"2E-1\");\n+    assert_eq!(to_string(f, 0.195, MinusPlus, 1, true), \"+2E-1\");\n     assert_eq!(to_string(f, -0.195, Minus, 2, false), \"-2.0e-1\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 2, true), \"-2.0E-1\");\n-    assert_eq!(to_string(f, -0.195, MinusPlus, 2, false), \"-2.0e-1\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 2, true), \"-2.0E-1\");\n+    assert_eq!(to_string(f, -0.195, Minus, 2, true), \"-2.0E-1\");\n+    assert_eq!(to_string(f, -0.195, MinusPlus, 2, true), \"-2.0E-1\");\n     assert_eq!(to_string(f, 0.195, Minus, 3, false), \"1.95e-1\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 3, true), \"1.95E-1\");\n-    assert_eq!(to_string(f, 0.195, MinusPlus, 3, false), \"+1.95e-1\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 3, true), \"+1.95E-1\");\n+    assert_eq!(to_string(f, 0.195, Minus, 3, true), \"1.95E-1\");\n+    assert_eq!(to_string(f, 0.195, MinusPlus, 3, true), \"+1.95E-1\");\n     assert_eq!(to_string(f, -0.195, Minus, 4, false), \"-1.950e-1\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 4, true), \"-1.950E-1\");\n-    assert_eq!(to_string(f, -0.195, MinusPlus, 4, false), \"-1.950e-1\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 4, true), \"-1.950E-1\");\n+    assert_eq!(to_string(f, -0.195, Minus, 4, true), \"-1.950E-1\");\n+    assert_eq!(to_string(f, -0.195, MinusPlus, 4, true), \"-1.950E-1\");\n \n     assert_eq!(to_string(f, 9.5, Minus, 1, false), \"1e1\");\n     assert_eq!(to_string(f, 9.5, Minus, 2, false), \"9.5e0\");\n@@ -1007,68 +957,48 @@ where\n     let f = &mut f_;\n \n     assert_eq!(to_string(f, 0.0, Minus, 0), \"0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 0), \"0\");\n     assert_eq!(to_string(f, 0.0, MinusPlus, 0), \"+0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 0), \"+0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 0), \"0\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 0), \"-0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"+0\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, Minus, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 0), \"-0\");\n     assert_eq!(to_string(f, 0.0, Minus, 1), \"0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusRaw, 1), \"0.0\");\n     assert_eq!(to_string(f, 0.0, MinusPlus, 1), \"+0.0\");\n-    assert_eq!(to_string(f, 0.0, MinusPlusRaw, 1), \"+0.0\");\n-    assert_eq!(to_string(f, -0.0, Minus, 8), \"0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusRaw, 8), \"-0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"+0.00000000\");\n-    assert_eq!(to_string(f, -0.0, MinusPlusRaw, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, Minus, 8), \"-0.00000000\");\n+    assert_eq!(to_string(f, -0.0, MinusPlus, 8), \"-0.00000000\");\n \n     assert_eq!(to_string(f, 1.0 / 0.0, Minus, 0), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusRaw, 1), \"inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 8), \"+inf\");\n-    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlusRaw, 64), \"+inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, Minus, 1), \"inf\");\n+    assert_eq!(to_string(f, 1.0 / 0.0, MinusPlus, 64), \"+inf\");\n     assert_eq!(to_string(f, 0.0 / 0.0, Minus, 0), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusRaw, 1), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 8), \"NaN\");\n-    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlusRaw, 64), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, Minus, 1), \"NaN\");\n+    assert_eq!(to_string(f, 0.0 / 0.0, MinusPlus, 64), \"NaN\");\n     assert_eq!(to_string(f, -1.0 / 0.0, Minus, 0), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusRaw, 1), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 8), \"-inf\");\n-    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlusRaw, 64), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, Minus, 1), \"-inf\");\n+    assert_eq!(to_string(f, -1.0 / 0.0, MinusPlus, 64), \"-inf\");\n \n     assert_eq!(to_string(f, 3.14, Minus, 0), \"3\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 0), \"3\");\n+    assert_eq!(to_string(f, 3.14, Minus, 0), \"3\");\n     assert_eq!(to_string(f, 3.14, MinusPlus, 0), \"+3\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 0), \"+3\");\n     assert_eq!(to_string(f, -3.14, Minus, 0), \"-3\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 0), \"-3\");\n+    assert_eq!(to_string(f, -3.14, Minus, 0), \"-3\");\n     assert_eq!(to_string(f, -3.14, MinusPlus, 0), \"-3\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 0), \"-3\");\n     assert_eq!(to_string(f, 3.14, Minus, 1), \"3.1\");\n-    assert_eq!(to_string(f, 3.14, MinusRaw, 2), \"3.14\");\n-    assert_eq!(to_string(f, 3.14, MinusPlus, 3), \"+3.140\");\n-    assert_eq!(to_string(f, 3.14, MinusPlusRaw, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, 3.14, Minus, 2), \"3.14\");\n+    assert_eq!(to_string(f, 3.14, MinusPlus, 4), \"+3.1400\");\n+    assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n     assert_eq!(to_string(f, -3.14, Minus, 8), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusRaw, 8), \"-3.14000000\");\n     assert_eq!(to_string(f, -3.14, MinusPlus, 8), \"-3.14000000\");\n-    assert_eq!(to_string(f, -3.14, MinusPlusRaw, 8), \"-3.14000000\");\n \n     assert_eq!(to_string(f, 0.195, Minus, 0), \"0\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 0), \"0\");\n     assert_eq!(to_string(f, 0.195, MinusPlus, 0), \"+0\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 0), \"+0\");\n     assert_eq!(to_string(f, -0.195, Minus, 0), \"-0\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 0), \"-0\");\n+    assert_eq!(to_string(f, -0.195, Minus, 0), \"-0\");\n     assert_eq!(to_string(f, -0.195, MinusPlus, 0), \"-0\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 0), \"-0\");\n     assert_eq!(to_string(f, 0.195, Minus, 1), \"0.2\");\n-    assert_eq!(to_string(f, 0.195, MinusRaw, 2), \"0.20\");\n-    assert_eq!(to_string(f, 0.195, MinusPlus, 3), \"+0.195\");\n-    assert_eq!(to_string(f, 0.195, MinusPlusRaw, 4), \"+0.1950\");\n+    assert_eq!(to_string(f, 0.195, Minus, 2), \"0.20\");\n+    assert_eq!(to_string(f, 0.195, MinusPlus, 4), \"+0.1950\");\n     assert_eq!(to_string(f, -0.195, Minus, 5), \"-0.19500\");\n-    assert_eq!(to_string(f, -0.195, MinusRaw, 6), \"-0.195000\");\n-    assert_eq!(to_string(f, -0.195, MinusPlus, 7), \"-0.1950000\");\n-    assert_eq!(to_string(f, -0.195, MinusPlusRaw, 8), \"-0.19500000\");\n+    assert_eq!(to_string(f, -0.195, Minus, 6), \"-0.195000\");\n+    assert_eq!(to_string(f, -0.195, MinusPlus, 8), \"-0.19500000\");\n \n     assert_eq!(to_string(f, 999.5, Minus, 0), \"1000\");\n     assert_eq!(to_string(f, 999.5, Minus, 1), \"999.5\");"}, {"sha": "f6e5dfc98c793b160b778c050437415fa17dd41e", "filename": "library/core/tests/num/ieee754.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fieee754.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fieee754.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fieee754.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -0,0 +1,158 @@\n+//! IEEE 754 floating point compliance tests\n+//!\n+//! To understand IEEE 754's requirements on a programming language, one must understand that the\n+//! requirements of IEEE 754 rest on the total programming environment, and not entirely on any\n+//! one component. That means the hardware, language, and even libraries are considered part of\n+//! conforming floating point support in a programming environment.\n+//!\n+//! A programming language's duty, accordingly, is:\n+//!   1. offer access to the hardware where the hardware offers support\n+//!   2. provide operations that fulfill the remaining requirements of the standard\n+//!   3. provide the ability to write additional software that can fulfill those requirements\n+//!\n+//! This may be fulfilled in any combination that the language sees fit. However, to claim that\n+//! a language supports IEEE 754 is to suggest that it has fulfilled requirements 1 and 2, without\n+//! deferring minimum requirements to libraries. This is because support for IEEE 754 is defined\n+//! as complete support for at least one specified floating point type as an \"arithmetic\" and\n+//! \"interchange\" format, plus specified type conversions to \"external character sequences\" and\n+//! integer types.\n+//!\n+//! For our purposes,\n+//! \"interchange format\"          => f32, f64\n+//! \"arithmetic format\"           => f32, f64, and any \"soft floats\"\n+//! \"external character sequence\" => str from any float\n+//! \"integer format\"              => {i,u}{8,16,32,64,128}\n+//!\n+//! None of these tests are against Rust's own implementation. They are only tests against the\n+//! standard. That is why they accept wildly diverse inputs or may seem to duplicate other tests.\n+//! Please consider this carefully when adding, removing, or reorganizing these tests. They are\n+//! here so that it is clear what tests are required by the standard and what can be changed.\n+use ::core::str::FromStr;\n+\n+// IEEE 754 for many tests is applied to specific bit patterns.\n+// These generally are not applicable to NaN, however.\n+macro_rules! assert_biteq {\n+    ($lhs:expr, $rhs:expr) => {\n+        assert_eq!($lhs.to_bits(), $rhs.to_bits())\n+    };\n+}\n+\n+// ToString uses the default fmt::Display impl without special concerns, and bypasses other parts\n+// of the formatting infrastructure, which makes it ideal for testing here.\n+#[allow(unused_macros)]\n+macro_rules! roundtrip {\n+    ($f:expr => $t:ty) => {\n+        ($f).to_string().parse::<$t>().unwrap()\n+    };\n+}\n+\n+macro_rules! assert_floats_roundtrip {\n+    ($f:ident) => {\n+        assert_biteq!(f32::$f, roundtrip!(f32::$f => f32));\n+        assert_biteq!(f64::$f, roundtrip!(f64::$f => f64));\n+    };\n+    ($f:expr) => {\n+        assert_biteq!($f as f32, roundtrip!($f => f32));\n+        assert_biteq!($f as f64, roundtrip!($f => f64));\n+    }\n+}\n+\n+macro_rules! assert_floats_bitne {\n+    ($lhs:ident, $rhs:ident) => {\n+        assert_ne!(f32::$lhs.to_bits(), f32::$rhs.to_bits());\n+        assert_ne!(f64::$lhs.to_bits(), f64::$rhs.to_bits());\n+    };\n+    ($lhs:expr, $rhs:expr) => {\n+        assert_ne!(f32::to_bits($lhs), f32::to_bits($rhs));\n+        assert_ne!(f64::to_bits($lhs), f64::to_bits($rhs));\n+    };\n+}\n+\n+// We must preserve signs on all numbers. That includes zero.\n+// -0 and 0 are == normally, so test bit equality.\n+#[test]\n+fn preserve_signed_zero() {\n+    assert_floats_roundtrip!(-0.0);\n+    assert_floats_roundtrip!(0.0);\n+    assert_floats_bitne!(0.0, -0.0);\n+}\n+\n+#[test]\n+fn preserve_signed_infinity() {\n+    assert_floats_roundtrip!(INFINITY);\n+    assert_floats_roundtrip!(NEG_INFINITY);\n+    assert_floats_bitne!(INFINITY, NEG_INFINITY);\n+}\n+\n+#[test]\n+fn infinity_to_str() {\n+    assert!(match f32::INFINITY.to_string().to_lowercase().as_str() {\n+        \"+infinity\" | \"infinity\" => true,\n+        \"+inf\" | \"inf\" => true,\n+        _ => false,\n+    });\n+    assert!(\n+        match f64::INFINITY.to_string().to_lowercase().as_str() {\n+            \"+infinity\" | \"infinity\" => true,\n+            \"+inf\" | \"inf\" => true,\n+            _ => false,\n+        },\n+        \"Infinity must write to a string as some casing of inf or infinity, with an optional +.\"\n+    );\n+}\n+\n+#[test]\n+fn neg_infinity_to_str() {\n+    assert!(match f32::NEG_INFINITY.to_string().to_lowercase().as_str() {\n+        \"-infinity\" | \"-inf\" => true,\n+        _ => false,\n+    });\n+    assert!(\n+        match f64::NEG_INFINITY.to_string().to_lowercase().as_str() {\n+            \"-infinity\" | \"-inf\" => true,\n+            _ => false,\n+        },\n+        \"Negative Infinity must write to a string as some casing of -inf or -infinity\"\n+    )\n+}\n+\n+#[test]\n+fn nan_to_str() {\n+    assert!(\n+        match f32::NAN.to_string().to_lowercase().as_str() {\n+            \"nan\" | \"+nan\" | \"-nan\" => true,\n+            _ => false,\n+        },\n+        \"NaNs must write to a string as some casing of nan.\"\n+    )\n+}\n+\n+// \"+\"?(\"inf\"|\"infinity\") in any case => Infinity\n+#[test]\n+fn infinity_from_str() {\n+    assert_biteq!(f32::INFINITY, f32::from_str(\"infinity\").unwrap());\n+    assert_biteq!(f32::INFINITY, f32::from_str(\"inf\").unwrap());\n+    assert_biteq!(f32::INFINITY, f32::from_str(\"+infinity\").unwrap());\n+    assert_biteq!(f32::INFINITY, f32::from_str(\"+inf\").unwrap());\n+    // yes! this means you are weLcOmE tO mY iNfInItElY tWiStEd MiNd\n+    assert_biteq!(f32::INFINITY, f32::from_str(\"+iNfInItY\").unwrap());\n+}\n+\n+// \"-inf\"|\"-infinity\" in any case => Negative Infinity\n+#[test]\n+fn neg_infinity_from_str() {\n+    assert_biteq!(f32::NEG_INFINITY, f32::from_str(\"-infinity\").unwrap());\n+    assert_biteq!(f32::NEG_INFINITY, f32::from_str(\"-inf\").unwrap());\n+    assert_biteq!(f32::NEG_INFINITY, f32::from_str(\"-INF\").unwrap());\n+    assert_biteq!(f32::NEG_INFINITY, f32::from_str(\"-INFinity\").unwrap());\n+}\n+\n+// (\"+\"|\"-\"\")?\"s\"?\"nan\" in any case => qNaN\n+#[test]\n+fn qnan_from_str() {\n+    assert!(\"nan\".parse::<f32>().unwrap().is_nan());\n+    assert!(\"-nan\".parse::<f32>().unwrap().is_nan());\n+    assert!(\"+nan\".parse::<f32>().unwrap().is_nan());\n+    assert!(\"+NAN\".parse::<f32>().unwrap().is_nan());\n+    assert!(\"-NaN\".parse::<f32>().unwrap().is_nan());\n+}"}, {"sha": "bbb67667dfc057223743fe713c3a3046804de1e6", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -32,6 +32,7 @@ mod flt2dec;\n mod ops;\n mod wrapping;\n \n+mod ieee754;\n mod nan;\n \n /// Adds the attribute to all items in the block."}, {"sha": "64b22b64f4bf12cc840705a32200735d665df35a", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -805,10 +805,12 @@ mod prim_tuple {}\n /// often discard insignificant digits: `println!(\"{}\", 1.0f32 / 5.0f32)` will\n /// print `0.2`.\n ///\n-/// Additionally, `f32` can represent a couple of special values:\n+/// Additionally, `f32` can represent some special values:\n ///\n-/// - `-0`: this is just due to how floats are encoded. It is semantically\n-///   equivalent to `0` and `-0.0 == 0.0` results in `true`.\n+/// - -0.0: IEEE 754 floating point numbers have a bit that indicates their sign, so -0.0 is a\n+///   possible value. For comparison `-0.0 == +0.0` is true but floating point operations can\n+///   carry the sign bit through arithmetic operations. This means `-1.0 * 0.0` produces -0.0 and\n+///   a negative number rounded to a value smaller than a float can represent also produces -0.0.\n /// - [\u221e](#associatedconstant.INFINITY) and\n ///   [\u2212\u221e](#associatedconstant.NEG_INFINITY): these result from calculations\n ///   like `1.0 / 0.0`."}, {"sha": "3a50ed224b552aacb0bc5576249b129fe0bbf4ee", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef11409b43a533f4e59ffb9b0efcb619c6e6879/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/aef11409b43a533f4e59ffb9b0efcb619c6e6879/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=aef11409b43a533f4e59ffb9b0efcb619c6e6879", "patch": "@@ -51,7 +51,7 @@\n       }\n   \n       bb2: {\n-          discriminant(_6) = 2;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n+          discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:19:16: 22:6\n       }\n   "}]}