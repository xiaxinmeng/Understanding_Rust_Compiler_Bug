{"sha": "9a561872c419d3bc0c8ac9d13942f73535df27c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTYxODcyYzQxOWQzYmMwYzhhYzlkMTM5NDJmNzM1MzVkZjI3YzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-01T07:01:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-08T18:11:26Z"}, "message": "Always emit unresolved import errors and hide unused import lint", "tree": {"sha": "8d5bf81a302303df3f51e38cc4f28618210b8d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5bf81a302303df3f51e38cc4f28618210b8d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a561872c419d3bc0c8ac9d13942f73535df27c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a561872c419d3bc0c8ac9d13942f73535df27c5", "html_url": "https://github.com/rust-lang/rust/commit/9a561872c419d3bc0c8ac9d13942f73535df27c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a561872c419d3bc0c8ac9d13942f73535df27c5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0931e168671d7536b58563dc3664c948a8dcd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0931e168671d7536b58563dc3664c948a8dcd3", "html_url": "https://github.com/rust-lang/rust/commit/2c0931e168671d7536b58563dc3664c948a8dcd3"}], "stats": {"total": 141, "additions": 96, "deletions": 45}, "files": [{"sha": "eb509f1a01d6765b2f05587549869c58353137f3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 55, "deletions": 34, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -71,7 +71,7 @@ pub enum ImportDirectiveSubclass<'a> {\n }\n \n /// One import directive.\n-#[derive(Debug,Clone)]\n+#[derive(Debug, Clone)]\n crate struct ImportDirective<'a> {\n     /// The ID of the `extern crate`, `UseTree` etc that imported this `ImportDirective`.\n     ///\n@@ -447,12 +447,13 @@ impl<'a> Resolver<'a> {\n     }\n \n     // Define the name or return the existing binding if there is a collision.\n-    pub fn try_define(&mut self,\n-                      module: Module<'a>,\n-                      ident: Ident,\n-                      ns: Namespace,\n-                      binding: &'a NameBinding<'a>)\n-                      -> Result<(), &'a NameBinding<'a>> {\n+    pub fn try_define(\n+        &mut self,\n+        module: Module<'a>,\n+        ident: Ident,\n+        ns: Namespace,\n+        binding: &'a NameBinding<'a>,\n+    ) -> Result<(), &'a NameBinding<'a>> {\n         let res = binding.res();\n         self.check_reserved_macro_name(ident, res);\n         self.set_binding_parent_module(binding, module);\n@@ -480,8 +481,11 @@ impl<'a> Resolver<'a> {\n                         };\n                         if glob_binding.res() != nonglob_binding.res() &&\n                            ns == MacroNS && nonglob_binding.expansion != ExpnId::root() {\n-                            resolution.binding = Some(this.ambiguity(AmbiguityKind::GlobVsExpanded,\n-                                                                    nonglob_binding, glob_binding));\n+                            resolution.binding = Some(this.ambiguity(\n+                                AmbiguityKind::GlobVsExpanded,\n+                                nonglob_binding,\n+                                glob_binding,\n+                            ));\n                         } else {\n                             resolution.binding = Some(nonglob_binding);\n                         }\n@@ -513,9 +517,11 @@ impl<'a> Resolver<'a> {\n         })\n     }\n \n-    fn ambiguity(&self, kind: AmbiguityKind,\n-                 primary_binding: &'a NameBinding<'a>, secondary_binding: &'a NameBinding<'a>)\n-                 -> &'a NameBinding<'a> {\n+    fn ambiguity(\n+        &self, kind: AmbiguityKind,\n+        primary_binding: &'a NameBinding<'a>,\n+        secondary_binding: &'a NameBinding<'a>,\n+    ) -> &'a NameBinding<'a> {\n         self.arenas.alloc_name_binding(NameBinding {\n             ambiguity: Some((secondary_binding, kind)),\n             ..primary_binding.clone()\n@@ -524,8 +530,12 @@ impl<'a> Resolver<'a> {\n \n     // Use `f` to mutate the resolution of the name in the module.\n     // If the resolution becomes a success, define it in the module's glob importers.\n-    fn update_resolution<T, F>(&mut self, module: Module<'a>, ident: Ident, ns: Namespace, f: F)\n-                               -> T\n+    fn update_resolution<T, F>(\n+        &mut self, module: Module<'a>,\n+        ident: Ident,\n+        ns: Namespace,\n+        f: F,\n+    ) -> T\n         where F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T\n     {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n@@ -627,14 +637,18 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             self.finalize_resolutions_in(module);\n         }\n \n-        let mut has_errors = false;\n         let mut seen_spans = FxHashSet::default();\n         let mut errors = vec![];\n         let mut prev_root_id: NodeId = NodeId::from_u32(0);\n-        for i in 0 .. self.r.determined_imports.len() {\n-            let import = self.r.determined_imports[i];\n+        let determined_imports = mem::take(&mut self.r.determined_imports);\n+        let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);\n+\n+        for (is_indeterminate, import) in determined_imports\n+            .into_iter()\n+            .map(|i| (false, i))\n+            .chain(indeterminate_imports.into_iter().map(|i| (true, i)))\n+        {\n             if let Some(err) = self.finalize_import(import) {\n-                has_errors = true;\n \n                 if let SingleImport { source, ref source_bindings, .. } = import.subclass {\n                     if source.name == kw::SelfLower {\n@@ -666,25 +680,27 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     errors.push((path, err));\n                     prev_root_id = import.root_id;\n                 }\n+            } else if is_indeterminate {\n+                // Consider erroneous imports used to avoid duplicate diagnostics.\n+                self.r.used_imports.insert((import.id, TypeNS));\n+                let path = import_path_to_string(\n+                    &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n+                    &import.subclass,\n+                    import.span,\n+                );\n+                let err = UnresolvedImportError {\n+                    span: import.span,\n+                    label: None,\n+                    note: Vec::new(),\n+                    suggestion: None,\n+                };\n+                errors.push((path, err));\n             }\n         }\n \n         if !errors.is_empty() {\n             self.throw_unresolved_import_error(errors.clone(), None);\n         }\n-\n-        for import in &self.r.indeterminate_imports {\n-            // Consider erroneous imports used to avoid duplicate diagnostics.\n-            self.r.used_imports.insert((import.id, TypeNS));\n-        }\n-        // Report unresolved imports only if no hard error was already reported\n-        // to avoid generating multiple errors on the same import.\n-        if !has_errors {\n-            for import in &self.r.indeterminate_imports {\n-                self.throw_unresolved_import_error(errors, Some(MultiSpan::from(import.span)));\n-                break;\n-            }\n-        }\n     }\n \n     fn throw_unresolved_import_error(\n@@ -839,8 +855,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     ) -> Option<UnresolvedImportError> {\n         let orig_vis = directive.vis.replace(ty::Visibility::Invisible);\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n-        let path_res = self.r.resolve_path(&directive.module_path, None, &directive.parent_scope,\n-                                         true, directive.span, directive.crate_lint());\n+        let path_res = self.r.resolve_path(\n+            &directive.module_path,\n+            None,\n+            &directive.parent_scope,\n+            true,\n+            directive.span,\n+            directive.crate_lint(),\n+        );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         directive.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n@@ -903,7 +925,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             }\n                         }\n                     };\n-\n                     return Some(err);\n                 }\n                 return None;"}, {"sha": "64c4107e898757c2c6bcb143efa2902f42012155", "filename": "src/test/ui/extenv/issue-55897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -1,7 +1,7 @@\n use prelude::*; //~ ERROR unresolved import `prelude`\n \n mod unresolved_env {\n-    use env;\n+    use env; //~ ERROR unresolved import `env`\n \n     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n     //~^ ERROR cannot determine resolution for the macro `env`"}, {"sha": "c57a467cdba568f17c5dab1a1da5ab1610fab15b", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -19,6 +19,12 @@ LL | use prelude::*;\n    |     unresolved import\n    |     help: a similar path exists: `std::prelude`\n \n+error[E0432]: unresolved import `env`\n+  --> $DIR/issue-55897.rs:4:9\n+   |\n+LL |     use env;\n+   |         ^^^ no `env` in the root\n+\n error: cannot determine resolution for the macro `env`\n   --> $DIR/issue-55897.rs:6:22\n    |\n@@ -27,6 +33,6 @@ LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "75cf880192c8eb708b35e386013c1af27c82ea49", "filename": "src/test/ui/imports/unresolved-imports-used.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -8,11 +8,11 @@ mod qux {\n \n use qux::quz;  //~ ERROR function `quz` is private\n use qux::bar;  //~ ERROR unresolved import `qux::bar`\n-use foo::bar;\n-use baz::*;\n+use foo::bar;  //~ ERROR unresolved import `foo`\n+use baz::*;    //~ ERROR unresolved import `baz`\n use qux::bar2; //~ ERROR unresolved import `qux::bar2`\n-use foo2::bar2;\n-use baz2::*;\n+use foo2::bar2;//~ ERROR unresolved import `foo2`\n+use baz2::*;   //~ ERROR unresolved import `baz2`\n use qux::quy;  //~ ERROR unused import\n \n fn main() {}"}, {"sha": "b341e8e0592883863299c6e7800402a3f0363d12", "filename": "src/test/ui/imports/unresolved-imports-used.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -10,6 +10,30 @@ error[E0432]: unresolved import `qux::bar2`\n LL | use qux::bar2;\n    |     ^^^^^^^^^ no `bar2` in `qux`\n \n+error[E0432]: unresolved import `foo`\n+  --> $DIR/unresolved-imports-used.rs:11:5\n+   |\n+LL | use foo::bar;\n+   |     ^^^ maybe a missing crate `foo`?\n+\n+error[E0432]: unresolved import `baz`\n+  --> $DIR/unresolved-imports-used.rs:12:5\n+   |\n+LL | use baz::*;\n+   |     ^^^ maybe a missing crate `baz`?\n+\n+error[E0432]: unresolved import `foo2`\n+  --> $DIR/unresolved-imports-used.rs:14:5\n+   |\n+LL | use foo2::bar2;\n+   |     ^^^^ maybe a missing crate `foo2`?\n+\n+error[E0432]: unresolved import `baz2`\n+  --> $DIR/unresolved-imports-used.rs:15:5\n+   |\n+LL | use baz2::*;\n+   |     ^^^^ maybe a missing crate `baz2`?\n+\n error[E0603]: function `quz` is private\n   --> $DIR/unresolved-imports-used.rs:9:10\n    |\n@@ -28,7 +52,7 @@ note: lint level defined here\n LL | #![deny(unused_imports)]\n    |         ^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "83ed70a0459a8dc211da08f86c0368966fde5797", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // compile-flags:--extern foo --extern bar\n \n-use foo::bar; //~ ERROR unresolved import\n+use foo::bar; //~ ERROR can't find crate for `foo`\n use bar::foo;\n \n fn main() {}"}, {"sha": "9336e90afb71d23b5497ac491ebc3d16ca4d62eb", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a561872c419d3bc0c8ac9d13942f73535df27c5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr?ref=9a561872c419d3bc0c8ac9d13942f73535df27c5", "patch": "@@ -1,9 +1,9 @@\n-error[E0432]: unresolved import\n+error[E0463]: can't find crate for `foo`\n   --> $DIR/deadlock.rs:4:5\n    |\n LL | use foo::bar;\n-   |     ^^^^^^^^\n+   |     ^^^ can't find crate\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0432`.\n+For more information about this error, try `rustc --explain E0463`."}]}