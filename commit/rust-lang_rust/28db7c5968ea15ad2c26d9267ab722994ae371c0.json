{"sha": "28db7c5968ea15ad2c26d9267ab722994ae371c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGI3YzU5NjhlYTE1YWQyYzI2ZDkyNjdhYjcyMjk5NGFlMzcxYzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-11T18:04:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-11T18:04:09Z"}, "message": "parser: move parse_fn_block_decl into expr.rs", "tree": {"sha": "f893dc94f7d5ca0fcd41e08ba94012dc46c5b73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f893dc94f7d5ca0fcd41e08ba94012dc46c5b73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28db7c5968ea15ad2c26d9267ab722994ae371c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28db7c5968ea15ad2c26d9267ab722994ae371c0", "html_url": "https://github.com/rust-lang/rust/commit/28db7c5968ea15ad2c26d9267ab722994ae371c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28db7c5968ea15ad2c26d9267ab722994ae371c0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848ec4aa3c416a4b489fc2080f1a46e5e019a06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/848ec4aa3c416a4b489fc2080f1a46e5e019a06f", "html_url": "https://github.com/rust-lang/rust/commit/848ec4aa3c416a4b489fc2080f1a46e5e019a06f"}], "stats": {"total": 116, "additions": 56, "deletions": 60}, "files": [{"sha": "e2a41a808686ed4304c74c6e4b8c7cc9b0462186", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/28db7c5968ea15ad2c26d9267ab722994ae371c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28db7c5968ea15ad2c26d9267ab722994ae371c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=28db7c5968ea15ad2c26d9267ab722994ae371c0", "patch": "@@ -19,7 +19,7 @@ use crate::ast::{Mutability};\n use crate::ast::StrStyle;\n use crate::ast::SelfKind;\n use crate::ast::{GenericParam, GenericParamKind, WhereClause};\n-use crate::ast::{Ty, TyKind,  GenericBounds};\n+use crate::ast::{TyKind,  GenericBounds};\n use crate::ast::{Visibility, VisibilityKind, Unsafety, CrateSugar};\n use crate::ext::base::DummyResult;\n use crate::ext::hygiene::SyntaxContext;\n@@ -1055,30 +1055,6 @@ impl<'a> Parser<'a> {\n         Ok(Arg { attrs: attrs.into(), id: ast::DUMMY_NODE_ID, pat, span, ty })\n     }\n \n-    /// Parses an argument in a lambda header (e.g., `|arg, arg|`).\n-    fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n-        let lo = self.token.span;\n-        let attrs = self.parse_arg_attributes()?;\n-        let pat = self.parse_pat(Some(\"argument name\"))?;\n-        let t = if self.eat(&token::Colon) {\n-            self.parse_ty()?\n-        } else {\n-            P(Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: TyKind::Infer,\n-                span: self.prev_span,\n-            })\n-        };\n-        let span = lo.to(self.token.span);\n-        Ok(Arg {\n-            attrs: attrs.into(),\n-            ty: t,\n-            pat,\n-            span,\n-            id: ast::DUMMY_NODE_ID\n-        })\n-    }\n-\n     crate fn check_lifetime(&mut self) -> bool {\n         self.expected_tokens.push(TokenType::Lifetime);\n         self.token.is_lifetime()\n@@ -2148,32 +2124,6 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n-    /// Parses the `|arg, arg|` header of a closure.\n-    fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> {\n-        let inputs_captures = {\n-            if self.eat(&token::OrOr) {\n-                Vec::new()\n-            } else {\n-                self.expect(&token::BinOp(token::Or))?;\n-                let args = self.parse_seq_to_before_tokens(\n-                    &[&token::BinOp(token::Or), &token::OrOr],\n-                    SeqSep::trailing_allowed(token::Comma),\n-                    TokenExpectType::NoExpect,\n-                    |p| p.parse_fn_block_arg()\n-                )?.0;\n-                self.expect_or()?;\n-                args\n-            }\n-        };\n-        let output = self.parse_ret_ty(true)?;\n-\n-        Ok(P(FnDecl {\n-            inputs: inputs_captures,\n-            output,\n-            c_variadic: false\n-        }))\n-    }\n-\n     fn choose_generics_over_qpath(&self) -> bool {\n         // There's an ambiguity between generic parameters and qualified paths in impls.\n         // If we see `<` it may start both, so we have to inspect some following tokens."}, {"sha": "19d5bcd3ee9e27784f4ff9db4e9e1a04ca592cf2", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/28db7c5968ea15ad2c26d9267ab722994ae371c0/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28db7c5968ea15ad2c26d9267ab722994ae371c0/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=28db7c5968ea15ad2c26d9267ab722994ae371c0", "patch": "@@ -1,15 +1,13 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle};\n use super::{BlockCheckMode, BlockMode, SemiColonMode};\n-use super::SeqSep;\n-\n-use crate::{maybe_recover_from_interpolated_ty_qpath};\n+use super::{SeqSep, TokenExpectType};\n \n+use crate::maybe_recover_from_interpolated_ty_qpath;\n use crate::ptr::P;\n-use crate::ast;\n-use crate::ast::{Attribute, AttrStyle};\n+use crate::ast::{self, Attribute, AttrStyle};\n use crate::ast::{Ident, CaptureBy};\n use crate::ast::{Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm};\n-use crate::ast::{Ty, TyKind, FunctionRetTy};\n+use crate::ast::{Ty, TyKind, FunctionRetTy, Arg, FnDecl};\n use crate::ast::{BinOpKind, BinOp, UnOp};\n use crate::ast::{Mac_, AnonConst, Field};\n \n@@ -22,9 +20,7 @@ use crate::symbol::{kw, sym};\n use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n \n use std::mem;\n-\n-use errors::{Applicability};\n-\n+use errors::Applicability;\n use rustc_data_structures::thin_vec::ThinVec;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n@@ -1142,6 +1138,56 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parses the `|arg, arg|` header of a closure.\n+    fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> {\n+        let inputs_captures = {\n+            if self.eat(&token::OrOr) {\n+                Vec::new()\n+            } else {\n+                self.expect(&token::BinOp(token::Or))?;\n+                let args = self.parse_seq_to_before_tokens(\n+                    &[&token::BinOp(token::Or), &token::OrOr],\n+                    SeqSep::trailing_allowed(token::Comma),\n+                    TokenExpectType::NoExpect,\n+                    |p| p.parse_fn_block_arg()\n+                )?.0;\n+                self.expect_or()?;\n+                args\n+            }\n+        };\n+        let output = self.parse_ret_ty(true)?;\n+\n+        Ok(P(FnDecl {\n+            inputs: inputs_captures,\n+            output,\n+            c_variadic: false\n+        }))\n+    }\n+\n+    /// Parses an argument in a lambda header (e.g., `|arg, arg|`).\n+    fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n+        let lo = self.token.span;\n+        let attrs = self.parse_arg_attributes()?;\n+        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let t = if self.eat(&token::Colon) {\n+            self.parse_ty()?\n+        } else {\n+            P(Ty {\n+                id: ast::DUMMY_NODE_ID,\n+                node: TyKind::Infer,\n+                span: self.prev_span,\n+            })\n+        };\n+        let span = lo.to(self.token.span);\n+        Ok(Arg {\n+            attrs: attrs.into(),\n+            ty: t,\n+            pat,\n+            span,\n+            id: ast::DUMMY_NODE_ID\n+        })\n+    }\n+\n     /// Parses an `if` expression (`if` token already eaten).\n     fn parse_if_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;"}]}