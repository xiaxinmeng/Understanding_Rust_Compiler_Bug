{"sha": "ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYTQ1ZmQ0OWEyZGZjZjJhMTYzZTFmNDY0MWFjMzRmMjgwM2ViOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T09:59:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T09:59:12Z"}, "message": "Auto merge of #50275 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #49707 (Add \"the Rustc book\")\n - #50222 (Bump bootstrap compiler to 2018-04-24)\n - #50227 (Fix ICE with erroneous `impl Trait` in a trait impl)\n - #50229 (Add setting to go to item if there is only one result)\n - #50231 (Add more doc aliases)\n - #50246 (Make dump_{alloc,allocs,local}() no-ops when tracing is disabled.)\n - #49894 (Rename InternedString to LocalInternedString and introduce a new thread-safe InternedString)\n\nFailed merges:", "tree": {"sha": "bd3fcd8de7fc6476dc94cef471a7020c8c3a5936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3fcd8de7fc6476dc94cef471a7020c8c3a5936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "html_url": "https://github.com/rust-lang/rust/commit/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9822b5709ca78d6398e9ae609de0181116e8b0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/9822b5709ca78d6398e9ae609de0181116e8b0db", "html_url": "https://github.com/rust-lang/rust/commit/9822b5709ca78d6398e9ae609de0181116e8b0db"}, {"sha": "44b53598507b88bd256477cb4717ec6817ffbcec", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b53598507b88bd256477cb4717ec6817ffbcec", "html_url": "https://github.com/rust-lang/rust/commit/44b53598507b88bd256477cb4717ec6817ffbcec"}], "stats": {"total": 3130, "additions": 2939, "deletions": 191}, "files": [{"sha": "08bb8ab481513bbf803f3a657442cef390c0907f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -323,15 +323,15 @@ impl<'a> Builder<'a> {\n                 test::Cargotest, test::Cargo, test::Rls, test::ErrorIndex, test::Distcheck,\n                 test::RunMakeFullDeps,\n                 test::Nomicon, test::Reference, test::RustdocBook, test::RustByExample,\n-                test::TheBook, test::UnstableBook,\n+                test::TheBook, test::UnstableBook, test::RustcBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n                 test::RunMake, test::RustdocUi),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,\n                 doc::ErrorIndex, doc::Nomicon, doc::Reference, doc::Rustdoc, doc::RustByExample,\n-                doc::CargoBook),\n+                doc::RustcBook, doc::CargoBook),\n             Kind::Dist => describe!(dist::Docs, dist::RustcDocs, dist::Mingw, dist::Rustc,\n                 dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n                 dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Rustfmt, dist::Extended,"}, {"sha": "16f4b29dcceefbeefc643e889246654c7a89464c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -71,6 +71,7 @@ book!(\n     Nomicon, \"src/doc/nomicon\", \"nomicon\";\n     Reference, \"src/doc/reference\", \"reference\";\n     Rustdoc, \"src/doc/rustdoc\", \"rustdoc\";\n+    RustcBook, \"src/doc/rustc\", \"rustc\";\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\";\n );\n "}, {"sha": "e8c40dfdb0ad2bcfdc877b9a269f26f6aca760e6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1212,6 +1212,7 @@ test_book!(\n     Nomicon, \"src/doc/nomicon\", \"nomicon\", default=false;\n     Reference, \"src/doc/reference\", \"reference\", default=false;\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", default=true;\n+    RustcBook, \"src/doc/rustc\", \"rustc\", default=true;\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\", default=false;\n     TheBook, \"src/doc/book\", \"book\", default=false;\n     UnstableBook, \"src/doc/unstable-book\", \"unstable-book\", default=true;"}, {"sha": "3a4f51069fc3b7f1534b7a5505633f5cfc04f90f", "filename": "src/doc/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -43,6 +43,10 @@ Rust's standard library has [extensive API documentation](std/index.html),\n with explanations of how to use various things, as well as example code for\n accomplishing various tasks.\n \n+## The Rustc Book\n+\n+[The Rustc Book](rustc/index.html) describes the Rust compiler, `rustc`.\n+\n ## The Cargo Book\n \n [The Cargo Book](cargo/index.html) is a guide to Cargo, Rust's build tool and dependency manager."}, {"sha": "7585238efedfc33acdd9494b0269951aaf3909ec", "filename": "src/doc/rustc/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2F.gitignore?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1 @@\n+book"}, {"sha": "8adc05c5137206ddefc284b601d47d8b85ab0dcb", "filename": "src/doc/rustc/book.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fbook.toml?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,5 @@\n+[book]\n+authors = [\"The Rust Project Developers\"]\n+multilingual = false\n+src = \"src\"\n+title = \"The rustc book\""}, {"sha": "e4c0939fd46369d4ad9102b58dcdb4e59a4d9a02", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,16 @@\n+# The Rustc Book\n+\n+- [What is rustc?](what-is-rustc.md)\n+- [Command-line arguments](command-line-arguments.md)\n+- [Lints](lints/index.md)\n+    - [Lint levels](lints/levels.md)\n+    - [Lint Groups](lints/groups.md)\n+    - [Lint listing](lints/listing/index.md)\n+        - [Allowed-by-default lints](lints/listing/allowed-by-default.md)\n+        - [Warn-by-default lints](lints/listing/warn-by-default.md)\n+        - [Deny-by-default lints](lints/listing/deny-by-default.md)\n+- [Codegen options](codegen-options/index.md)\n+- [Targets](targets/index.md)\n+    - [Built-in Targets](targets/built-in.md)\n+    - [Custom Targets](targets/custom.md)\n+- [Contributing to `rustc`](contributing.md)\n\\ No newline at end of file"}, {"sha": "eff09428902e8012669b88ddc87266e06894f238", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,209 @@\n+# Codegen options\n+\n+All of these options are passed to `rustc` via the `-C` flag, short for \"codegen.\" You can see\n+a version of this list for your exact compiler by running `rustc -C help`.\n+\n+## ar\n+\n+This option is deprecated and does nothing.\n+\n+## linker\n+\n+This flag lets you control which linker `rustc` invokes to link your code.\n+\n+## link-arg=val\n+\n+This flag lets you append a single extra argument to the linker invocation.\n+\n+\"Append\" is significant; you can pass this flag multiple times to add multiple arguments.\n+\n+## link-args\n+\n+This flag lets you append multiple extra arguments to the linker invocation. The\n+options should be separated by spaces.\n+\n+## link-dead-code\n+\n+Normally, the linker will remove dead code. This flag disables this behavior.\n+\n+An example of when this flag might be useful is when trying to construct code coverage\n+metrics.\n+\n+## lto\n+\n+This flag instructs LLVM to use [link time\n+optimizations](https://llvm.org/docs/LinkTimeOptimization.html).\n+\n+It takes one of two values, `thin` and `fat`. 'thin' LTO [is a new feature of\n+LLVM](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html),\n+'fat' referring to the classic version of LTO.\n+\n+## target-cpu\n+\n+This instructs `rustc` to generate code specifically for a particular processor.\n+\n+You can run `rustc --print target-cpus` to see the valid options to pass\n+here. Additionally, `native` can be passed to use the processor of the host\n+machine.\n+\n+## target-feature\n+\n+Individual targets will support different features; this flag lets you control\n+enabling or disabling a feature.\n+\n+To see the valid options and an example of use, run `rustc --print\n+target-features`.\n+\n+## passes\n+\n+This flag can be used to add extra LLVM passes to the compilation.\n+\n+The list must be separated by spaces.\n+\n+## llvm-args\n+\n+This flag can be used to pass a list of arguments directly to LLVM.\n+\n+The list must be separated by spaces.\n+\n+## save-temps\n+\n+`rustc` will generate temporary files during compilation; normally it will\n+delete them after it's done with its work. This option will cause them to be\n+preserved instead of removed.\n+\n+## rpath\n+\n+This option allows you to set the value of\n+[`rpath`](https://en.wikipedia.org/wiki/Rpath).\n+\n+## overflow-checks\n+\n+This flag allows you to control the behavior of integer overflow. This flag\n+can be passed many options:\n+\n+* To turn overflow checks on: `y`, `yes`, or `on`.\n+* To turn overflow checks off: `n`, `no`, or `off`.\n+\n+## no-prepopulate-passes\n+\n+The pass manager comes pre-populated with a list of passes; this flag\n+ensures that list is empty.\n+\n+## no-vectorize-loops\n+\n+By default, `rustc` will attempt to [vectorize\n+loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). This\n+flag will turn that behavior off.\n+\n+## no-vectorize-slp\n+\n+By default, `rustc` will attempt to vectorize loops using [superword-level\n+parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer). This\n+flag will turn that behavior off.\n+\n+## soft-float\n+\n+This option will make `rustc` generate code using \"soft floats.\" By default,\n+a lot of hardware supports floating point instructions, and so the code generated\n+will take advantage of this. \"soft floats\" emulate floating point instructions\n+in software.\n+\n+## prefer-dynamic\n+\n+By default, `rustc` prefers to statically link dependencies. This option will\n+make it use dynamic linking instead.\n+\n+## no-integrated-as\n+\n+LLVM comes with an internal assembler; this option will let you use an\n+external assembler instead.\n+\n+## no-redzone\n+\n+This flag allows you to disable [the\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n+be passed many options:\n+\n+* To enable the red zone: `y`, `yes`, or `on`.\n+* To disable it: `n`, `no`, or `off`.\n+\n+## relocation-model\n+\n+This option lets you choose which relocation model to use.\n+\n+To find the valid options for this flag, run `rustc --print relocation-models`.\n+\n+## code-model=val\n+\n+This option lets you choose which code model to use.\n+\n+To find the valid options for this flag, run `rustc --print code-models`.\n+\n+## metadata\n+\n+This option allows you to control the metadata used for symbol mangling.\n+\n+## extra-filename\n+\n+This option allows you to put extra data in each output filename.\n+\n+## codegen-units\n+\n+This flag lets you control how many threads are used when doing\n+code generation.\n+\n+Increasing paralellism may speed up compile times, but may also\n+produce slower code.\n+\n+## remark\n+\n+This flag lets you print remarks for these optimization passes.\n+\n+The list of passes should be separated by spaces.\n+\n+`all` will remark on every pass.\n+\n+## no-stack-check\n+\n+This option is deprecated and does nothing.\n+\n+## debuginfo\n+\n+This flag lets you control debug information:\n+\n+* `0`: no debug info at all\n+* `1`: line tables only\n+* `2`: full debug info\n+\n+## opt-level\n+\n+This flag lets you control the optimization level.\n+\n+* `0`: no optimizations\n+* `1`: basic optimizations\n+* `2`: some optimizations\n+* `3`: all optimizations\n+* `s`: optimize for binary size\n+* `z`: optimize for binary size, but also turn off loop vectorization.\n+\n+## debug-assertions\n+\n+This flag lets you turn `cfg(debug_assertions)` on or off.\n+\n+## inline-threshold\n+\n+This option lets you set the threshold for inlining a function.\n+\n+The default is 225.\n+\n+## panic\n+\n+This option lets you control what happens when the code panics.\n+\n+* `abort`: terminate the process upon panic\n+* `unwind`: unwind the stack upon panic\n+\n+## incremental\n+\n+This flag allows you to enable incremental compilation."}, {"sha": "e2b001832fe31f5e6872e18961168123e5890a74", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,116 @@\n+# Command-line arguments\n+\n+Here's a list of command-line arguments to `rustc` and what they do.\n+\n+## `-h`/`--help`: get help\n+\n+This flag will print out help information for `rustc`.\n+\n+## `--cfg`: configure the compilation environment\n+\n+This flag can turn on or off various `#[cfg]` settings.\n+\n+## `-L`: add a directory to the library search path\n+\n+When looking for external crates, a directory passed to this flag will be searched.\n+\n+## `-l`: link the generated crate to a native library\n+\n+This flag allows you to specify linking to a specific native library when building\n+a crate.\n+\n+## `--crate-type`: a list of types of crates for the compiler to emit\n+\n+This instructs `rustc` on which crate type to build.\n+\n+## `--crate-name`: specify the name of the crate being built\n+\n+This informs `rustc` of the name of your crate.\n+\n+## `--emit`: emit output other than a crate\n+\n+Instead of producing a crate, this flag can print out things like the assembly or LLVM-IR.\n+\n+## `--print`: print compiler information\n+\n+This flag prints out various information about the compiler.\n+\n+## `-g`: include debug information\n+\n+A synonym for `-C debug-level=2`.\n+\n+## `-O`: optimize your code\n+\n+A synonym for `-C opt-level=2`.\n+\n+## `-o`: filename of the output\n+\n+This flag controls the output filename.\n+\n+## `--out-dir`: directory to write the output in\n+\n+The outputted crate will be written to this directory.\n+\n+## `--explain`: provide a detailed explanation of an error message\n+\n+Each error of `rustc`'s comes with an error code; this will print\n+out a longer explanation of a given error.\n+\n+## `--test`: build a test harness\n+\n+When compiling this crate, `rustc` will ignore your `main` function\n+and instead produce a test harness.\n+\n+## `--target`: select a target triple to build\n+\n+This controls which [target](targets/index.html) to produce.\n+\n+## `-W`: set lint warnings\n+\n+This flag will set which lints should be set to the [warn level](lints/levels.html#warn).\n+\n+## `-A`: set lint allowed\n+\n+This flag will set which lints should be set to the [allow level](lints/levels.html#allow).\n+\n+## `-D`: set lint denied\n+\n+This flag will set which lints should be set to the [deny level](lints/levels.html#deny).\n+\n+## `-F`: set lint forbidden\n+\n+This flag will set which lints should be set to the [forbid level](lints/levels.html#forbid).\n+\n+## `--cap-lints`: set the most restrictive lint level\n+\n+This flag lets you 'cap' lints, for more, [see here](lints/levels.html#capping-lints).\n+\n+## `-C`/`--codegen`: code generation options\n+\n+This flag will allow you to set [codegen options](codegen-options/index.html).\n+\n+## `-V`/`--version`: print a version\n+\n+This flag will print out `rustc`'s version.\n+\n+## `-v`/`--verbose`: use verbose output\n+\n+This flag, when combined with other flags, makes them produce extra output.\n+\n+## `--extern`: specify where an external library is located\n+\n+This flag allows you to pass the name and location of an external crate that will\n+be linked into the crate you're buildling.\n+\n+## `--sysroot`: Override the system root\n+\n+The \"sysroot\" is where `rustc` looks for the crates that come with the Rust\n+distribution; this flag allows that to be overridden.\n+\n+## `--error-format`: control how errors are produced\n+\n+This flag lets you control the format of errors.\n+\n+## `--color`: configure coloring of output\n+\n+This flag lets you control color settings of the output."}, {"sha": "fcb8e6b27dbf0d9d56522df277ee0b20778eb42d", "filename": "src/doc/rustc/src/contributing.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,6 @@\n+# Contributing to rustc\n+\n+We'd love to have your help improving `rustc`! To that end, we've written [a\n+whole book](https://rust-lang-nursery.github.io/rustc-guide/) on its\n+internals, how it works, and how to get started working on it. To learn\n+more, you'll want to check that out.\n\\ No newline at end of file"}, {"sha": "46b717f3387d2ce95cb4c0d4d7f25ed0c1deac78", "filename": "src/doc/rustc/src/lints/groups.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,29 @@\n+# Lint Groups\n+\n+`rustc` has the concept of a \"lint group\", where you can toggle several warnings\n+through one name.\n+\n+For example, the `nonstandard-style` lint sets `non-camel-case-types`,\n+`non-snake-case`, and `non-upper-case-globals` all at once. So these are\n+equivalent:\n+\n+```bash\n+$ rustc -D nonstandard-style\n+$ rustc -D non-camel-case-types -D non-snake-case -D non-upper-case-globals\n+```\n+\n+Here's a list of each lint group, and the lints that they are made up of:\n+\n+| group               | description                                                   | lints                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n+|---------------------|---------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| nonstandard-style   | Violation of standard naming conventions                      | non-camel-case-types, non-snake-case, non-upper-case-globals                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+| warnings            | all lints that would be issuing warnings                      | all lints that would be issuing warnings                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| edition-2018        | Lints that will be turned into errors in Rust 2018            | tyvar-behind-raw-pointer                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| rust-2018-idioms    | Lints to nudge you toward idiomatic features of Rust 2018     | bare-trait-object, unreachable-pub                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n+| unused              | These lints detect things being declared but not used         | unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comment, unused-extern-crates, unused-features, unused-parens                                                                                                                                                                                    |\n+| future-incompatible | Lints that detect code that has future-compatibility problems | private-in-public, pub-use-of-private-extern-crate, patterns-in-fns-without-body, safe-extern-statics, invalid-type-param-default, legacy-directory-ownership, legacy-imports, legacy-constructor-visibility, missing-fragment-specifier, illegal-floating-point-literal-pattern, anonymous-parameters, parenthesized-params-in-types-and-modules, late-bound-lifetime-arguments, safe-packed-borrows, incoherent-fundamental-impls, tyvar-behind-raw-pointer, unstable-name-collision |\n+\n+Additionally, there's a `bad-style` lint group that's a deprecated alias for `nonstandard-style`.\n+\n+Finally, you can also see the table above by invoking `rustc -W help`. This will give you the exact values for the specific\n+compiler you have installed.\n\\ No newline at end of file"}, {"sha": "bf345a24389d2bebc9d62b6777e64cf53a231e01", "filename": "src/doc/rustc/src/lints/index.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,28 @@\n+# Lints\n+\n+In software, a \"lint\" is a tool used to help improve your source code. The\n+Rust compiler contains a number of lints, and when it compiles your code, it will\n+also run the lints. These lints may produce a warning, an error, or nothing at all,\n+depending on how you've configured things.\n+\n+Here's a small example:\n+\n+```bash\n+$ cat main.rs\n+fn main() {\n+    let x = 5;\n+}\n+> rustc main.rs\n+warning: unused variable: `x`\n+ --> main.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+This is the `unused_variables` lint, and it tells you that you've introduced\n+a variable that you don't use in your code. That's not *wrong*, so it's not\n+an error, but it might be a bug, so you get a warning."}, {"sha": "19bb6707d2285ffe357011e4a6f4796d6703a60b", "filename": "src/doc/rustc/src/lints/levels.md", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,252 @@\n+# Lint levels\n+\n+In `rustc`, lints are divided into four *levels*:\n+\n+1. allow\n+2. warn\n+3. deny\n+4. forbid\n+\n+Each lint has a default level (explained in the lint listing later in this\n+chapter), and the compiler has a default warning level. First, let's explain\n+what these levels mean, and then we'll talk about configuration.\n+\n+## allow\n+\n+These lints exist, but by default, do nothing. For example, consider this\n+source:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+Compiling this file produces no warnings:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+But this code violates the `missing_docs` lint.\n+\n+These lints exist mostly to be manually turned on via configuration, as we'll\n+talk about later in this section.\n+\n+## warn\n+\n+The 'warn' lint level will produce a warning if you violate the lint. For example,\n+this code runs afoul of the `unused_variable` lint:\n+\n+```rust\n+pub fn foo() {\n+    let x = 5;\n+}\n+```\n+\n+This will produce this warning:\n+\n+```console\n+$ rustc lib.rs --crate-type=lib\n+warning: unused variable: `x`\n+ --> lib.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+## deny\n+\n+A 'deny' lint produces an error if you violate it. For example, this code\n+runs into the `exceeding_bitshifts` lint.\n+\n+```rust,ignore\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+```bash\n+> rustc main.rs\n+error: bitshift exceeds the type's number of bits\n+ --> main.rs:2:13\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[deny(exceeding_bitshifts)] on by default\n+```\n+\n+What's the difference between an error from a lint and a regular old error?\n+Lints are configurable via levels, so in a similar way to 'allow' lints,\n+warnings that are 'deny' by default let you allow them. Similarly, you may\n+wish to set up a lint that is `warn` by default to produce an error instead.\n+This lint level gives you that.\n+\n+## forbid\n+\n+'forbid' is a special lint level that's stronger than 'deny'. It's the same\n+as 'deny' in that a lint at this level will produce an error, but unlike the\n+'deny' level, the 'forbid' level can not be overridden to be anything lower\n+than an error.\n+\n+## Configuring warning levels\n+\n+Remember our `missing_docs` example from the 'allow' lint level?\n+\n+```bash\n+$ cat lib.rs\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+We can configure this lint to operate at a higher level, both with\n+compiler flags, as well as with an attribute in the source code.\n+\n+You can also \"cap\" lints so that the compiler can choose to ignore\n+certain lint levels. We'll talk about that last.\n+\n+### Via compiler flag\n+\n+The `-A`, `-W`, `-D`, and `-F` flags let you turn one or more lints\n+into allowed, warning, deny, or forbid levels, like this:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -W missing-docs\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-W missing-docs`\n+\n+warning: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+> rustc lib.rs --crate-type=lib -D missing-docs\n+error: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-D missing-docs`\n+\n+error: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+```\n+\n+You can also pass each flag more than once for changing multiple lints:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -D unused-variables\n+```\n+\n+And of course, you can mix these four flags together:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n+```\n+\n+### Via an attribute\n+\n+You can also modify the lint level with a crate-wide attribute:\n+\n+```bash\n+> cat lib.rs\n+#![warn(missing_docs)]\n+\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | / #![warn(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+  | |_______________^\n+  |\n+note: lint level defined here\n+ --> lib.rs:1:9\n+  |\n+1 | #![warn(missing_docs)]\n+  |         ^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+ --> lib.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+```\n+\n+All four, `warn`, `allow`, `deny`, and `forbid` all work this way.\n+\n+You can also pass in multiple lints per attribute:\n+\n+```rust\n+#![warn(missing_docs, unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+And use multiple attributes together:\n+\n+```rust\n+#![warn(missing_docs)]\n+#![deny(unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+### Capping lints\n+\n+`rustc` supports a flag, `--cap-lints LEVEL` that sets the \"lint cap level.\"\n+This is the maximum level for all lints. So for example, if we take our\n+code sample from the \"deny\" lint level above:\n+\n+```rust,ignore\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+And we compile it, capping lints to warn:\n+\n+```bash\n+$ rustc lib.rs --cap-lints warn\n+warning: bitshift exceeds the type's number of bits\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[warn(exceeding_bitshifts)] on by default\n+\n+warning: this expression will panic at run-time\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^ attempt to shift left with overflow\n+```\n+\n+It now only warns, rather than errors. We can go further and allow all lints:\n+\n+```bash\n+$ rustc lib.rs --cap-lints allow\n+$\n+```\n+\n+This feature is used heavily by Cargo; it will pass `--cap-lints allow` when\n+compiling your dependencies, so that if they have any warnings, they do not\n+pollute the output of your build."}, {"sha": "e1a3f96a6fe6e320c3001a12b8a9d579f45a8d14", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "added", "additions": 453, "deletions": 0, "changes": 453, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,453 @@\n+# Allowed-by-default lints\n+\n+These lints are all set to the 'allow' level by default. As such, they won't show up\n+unless you set them to a higher lint level with a flag or attribute.\n+\n+## anonymous-parameters\n+\n+This lint detects anonymous parameters. Some example code that triggers this lint:\n+\n+```rust\n+trait Foo {\n+    fn foo(usize);\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: use of deprecated anonymous parameter\n+ --> src/lib.rs:5:11\n+  |\n+5 |     fn foo(usize);\n+  |           ^\n+  |\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+```\n+\n+This syntax is mostly a historical accident, and can be worked around quite\n+easily:\n+\n+```rust\n+trait Foo {\n+    fn foo(_: usize);\n+}\n+```\n+\n+## bare-trait-object\n+\n+This lint suggests using `dyn Trait` for trait objects. Some example code\n+that triggers this lint:\n+\n+```rust\n+#![feature(dyn_trait)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<Trait>) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trait objects without an explicit `dyn` are deprecated\n+ --> src/lib.rs:7:30\n+  |\n+7 | fn takes_trait_object(_: Box<Trait>) {\n+  |                              ^^^^^ help: use `dyn`: `dyn Trait`\n+  |\n+```\n+\n+To fix it, do as the help message suggests:\n+\n+```rust\n+#![feature(dyn_trait)]\n+#![deny(bare_trait_object)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<dyn Trait>) {\n+}\n+```\n+\n+## box-pointers\n+\n+This lints use of the Box type. Some example code that triggers this lint:\n+\n+```rust\n+struct Foo {\n+    x: Box<isize>,\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type uses owned (Box type) pointers: std::boxed::Box<isize>\n+ --> src/lib.rs:6:5\n+  |\n+6 |     x: Box<isize> //~ ERROR type uses owned\n+  |     ^^^^^^^^^^^^^\n+  |\n+```\n+\n+This lint is mostly historical, and not particularly useful. `Box<T>` used to\n+be built into the language, and the only way to do heap allocation. Today's\n+Rust can call into other allocators, etc.\n+\n+## elided-lifetime-in-path\n+\n+This lint detects the use of hidden lifetime parameters. Some example code\n+that triggers this lint:\n+\n+```rust\n+struct Foo<'a> {\n+    x: &'a u32\n+}\n+\n+fn foo(x: &Foo) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: hidden lifetime parameters are deprecated, try `Foo<'_>`\n+ --> src/lib.rs:5:12\n+  |\n+5 | fn foo(x: &Foo) {\n+  |            ^^^\n+  |\n+```\n+\n+Lifetime elision elides this lifetime, but that is being deprecated.\n+\n+## missing-copy-implementations\n+\n+This lint detects potentially-forgotten implementations of `Copy`. Some\n+example code that triggers this lint:\n+\n+```rust\n+pub struct Foo {\n+    pub field: i32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type could implement `Copy`; consider adding `impl Copy`\n+ --> src/main.rs:3:1\n+  |\n+3 | / pub struct Foo { //~ ERROR type could implement `Copy`; consider adding `impl Copy`\n+4 | |     pub field: i32\n+5 | | }\n+  | |_^\n+  |\n+```\n+\n+You can fix the lint by deriving `Copy`.\n+\n+This lint is set to 'allow' because this code isn't bad; it's common to write\n+newtypes like this specifically so that a `Copy` type is no longer `Copy`.\n+\n+## missing-debug-implementations\n+\n+This lint detects missing implementations of `fmt::Debug`. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub struct Foo;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+ --> src/main.rs:3:1\n+  |\n+3 | pub struct Foo;\n+  | ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+You can fix the lint by deriving `Debug`.\n+\n+## missing-docs\n+\n+This lint detects missing documentation for public items. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: missing documentation for crate\n+ --> src/main.rs:1:1\n+  |\n+1 | / #![deny(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+4 | |\n+5 | | fn main() {}\n+  | |____________^\n+  |\n+\n+error: missing documentation for a function\n+ --> src/main.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+```\n+\n+To fix the lint, add documentation to all items.\n+\n+## single-use-lifetime\n+\n+This lint detects lifetimes that are only used once. Some example code that\n+triggers this lint:\n+\n+```rust\n+struct Foo<'x> {\n+    x: &'x u32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: lifetime name `'x` only used once\n+ --> src/main.rs:3:12\n+  |\n+3 | struct Foo<'x> {\n+  |            ^^\n+  |\n+```\n+\n+## trivial-casts\n+\n+This lint detects trivial casts which could be removed. Some example code\n+that triggers this lint:\n+\n+```rust\n+let x: &u32 = &42;\n+let _ = x as *const u32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial cast: `&u32` as `*const u32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:5:13\n+  |\n+5 |     let _ = x as *const u32;\n+  |             ^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> src/main.rs:1:9\n+  |\n+1 | #![deny(trivial_casts)]\n+  |         ^^^^^^^^^^^^^\n+```\n+\n+## trivial-numeric-casts\n+\n+This lint detects trivial casts of numeric types which could be removed. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 42i32 as i32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial numeric cast: `i32` as `i32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:4:13\n+  |\n+4 |     let x = 42i32 as i32;\n+  |             ^^^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-pub\n+\n+This lint triggers for `pub` items not reachable from the crate root. Some\n+example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub mod bar {\n+        \n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unreachable `pub` item\n+ --> src/main.rs:4:5\n+  |\n+4 |     pub mod bar {\n+  |     ---^^^^^^^^\n+  |     |\n+  |     help: consider restricting its visibility: `pub(crate)`\n+  |\n+```\n+\n+## unsafe-code\n+\n+This lint catches usage of `unsafe` code. Some example code that triggers this lint:\n+\n+```rust\n+fn main() {\n+    unsafe {\n+\n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: usage of an `unsafe` block\n+ --> src/main.rs:4:5\n+  |\n+4 | /     unsafe {\n+5 | |         \n+6 | |     }\n+  | |_____^\n+  |\n+```\n+\n+## unstable-features\n+\n+This lint is deprecated and no longer used.\n+\n+## unused-extern-crates\n+\n+This lint guards against `extern crate` items that are never used. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+extern crate semver;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused extern crate\n+ --> src/main.rs:3:1\n+  |\n+3 | extern crate semver;\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-import-braces\n+\n+This lint catches unnecessary braces around an imported item. Some example\n+code that triggers this lint:\n+\n+```rust\n+use test::{A};\n+\n+pub mod test {\n+    pub struct A;\n+}\n+# fn main() {}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: braces around A is unnecessary\n+ --> src/main.rs:3:1\n+  |\n+3 | use test::{A};\n+  | ^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix it, `use test::A;`\n+\n+## unused-qualifications\n+\n+This lint detects unnecessarily qualified names. Some example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub fn bar() {}\n+}\n+\n+fn main() {\n+    use foo::bar;\n+    foo::bar();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unnecessary qualification\n+ --> src/main.rs:9:5\n+  |\n+9 |     foo::bar();\n+  |     ^^^^^^^^\n+  |\n+```\n+\n+You can call `bar()` directly, without the `foo::`.\n+\n+## unused-results\n+\n+This lint checks for the unused result of an expression in a statement. Some\n+example code that triggers this lint:\n+\n+```rust,no_run\n+fn foo<T>() -> T { panic!() }\n+\n+fn main() {\n+    foo::<usize>();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused result\n+ --> src/main.rs:6:5\n+  |\n+6 |     foo::<usize>();\n+  |     ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## variant-size-differences\n+\n+This lint detects enums with widely varying variant sizes. Some example code that triggers this lint:\n+\n+```rust\n+enum En {\n+    V0(u8),\n+    VBig([u8; 1024]),\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: enum variant is more than three times larger (1024 bytes) than the next largest\n+ --> src/main.rs:5:5\n+  |\n+5 |     VBig([u8; 1024]),   //~ ERROR variant is more than three times larger\n+  |     ^^^^^^^^^^^^^^^^\n+  |\n+```"}, {"sha": "e7ec6af8be1e3752a89a2a1e5bc0eb8f2e05151f", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,241 @@\n+# Deny-by-default lints\n+\n+These lints are all set to the 'deny' level by default.\n+\n+## exceeding-bitshifts\n+\n+This lint detects that a shift exceeds the type's number of bits. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+1_i32 << 32;\n+```\n+\n+This will produce:\n+\n+```text\n+error: bitshift exceeds the type's number of bits\n+ --> src/main.rs:2:5\n+  |\n+2 |     1_i32 << 32;\n+  |     ^^^^^^^^^^^\n+  |\n+```\n+\n+## invalid-type-param-default\n+\n+This lint detects type parameter default erroneously allowed in invalid location. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+fn foo<T=i32>(t: T) {}\n+```\n+\n+This will produce:\n+\n+```text\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+ --> src/main.rs:4:8\n+  |\n+4 | fn foo<T=i32>(t: T) {}\n+  |        ^\n+  |\n+  = note: #[deny(invalid_type_param_default)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+```\n+\n+## legacy-constructor-visibility\n+\n+[RFC 1506](https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md) modified some\n+visibility rules, and changed the visibility of struct constructors. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+mod m {\n+    pub struct S(u8);\n+    \n+    fn f() {\n+        // this is trying to use S from the 'use' line, but becuase the `u8` is\n+        // not pub, it is private\n+        ::S;\n+    }\n+}\n+\n+use m::S;\n+```\n+\n+This will produce:\n+\n+```text\n+error: private struct constructors are not usable through re-exports in outer modules\n+ --> src/main.rs:5:9\n+  |\n+5 |         ::S;\n+  |         ^^^\n+  |\n+  = note: #[deny(legacy_constructor_visibility)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n+```\n+\n+\n+## legacy-directory-ownership\n+\n+The legacy_directory_ownership warning is issued when\n+\n+* There is a non-inline module with a #[path] attribute (e.g. #[path = \"foo.rs\"] mod bar;),\n+* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n+* The module's file contains a non-inline child module without a #[path] attribute.\n+\n+The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n+it into its own directory if appropriate.\n+\n+## legacy-imports\n+\n+This lint detects names that resolve to ambiguous glob imports. Some example\n+code that triggers this lint:\n+\n+```rust,ignore\n+pub struct Foo;\n+\n+mod bar {\n+    struct Foo;\n+\n+    mod baz {\n+        use *;\n+        use bar::*;\n+        fn f(_: Foo) {}\n+    }\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: `Foo` is ambiguous\n+ --> src/main.rs:9:17\n+  |\n+7 |         use *;\n+  |             - `Foo` could refer to the name imported here\n+8 |         use bar::*;\n+  |             ------ `Foo` could also refer to the name imported here\n+9 |         fn f(_: Foo) {}\n+  |                 ^^^\n+  |\n+  = note: #[deny(legacy_imports)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+```\n+\n+\n+## missing-fragment-specifier\n+\n+The missing_fragment_specifier warning is issued when an unused pattern in a\n+`macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\n+followed by a fragment specifier (e.g. `:expr`).\n+\n+This warning can always be fixed by removing the unused pattern in the\n+`macro_rules!` macro definition.\n+\n+## mutable-transmutes\n+\n+This lint catches transmuting from `&T` to `&mut T` becuase it is undefined\n+behavior. Some example code that triggers this lint:\n+\n+```rust,ignore\n+unsafe {\n+    let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: mutating transmuted &mut T from &T may cause undefined behavior, consider instead using an UnsafeCell\n+ --> src/main.rs:3:17\n+  |\n+3 |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+\n+## no-mangle-const-items\n+\n+This lint detects any `const` items with the `#[no_mangle]` attribute.\n+Constants do not have their symbols exported, and therefore, this probably\n+means you meant to use a `static`, not a `const`. Some example code that\n+triggers this lint:\n+\n+```rust,ignore\n+#[no_mangle]\n+const FOO: i32 = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+error: const items should never be #[no_mangle]\n+ --> src/main.rs:3:1\n+  |\n+3 | const FOO: i32 = 5;\n+  | -----^^^^^^^^^^^^^^\n+  | |\n+  | help: try a static value: `pub static`\n+  |\n+```\n+\n+## parenthesized-params-in-types-and-modules\n+\n+This lint detects incorrect parentheses. Some example code that triggers this\n+lint:\n+\n+```rust,ignore\n+let x = 5 as usize();\n+```\n+\n+This will produce:\n+\n+```text\n+error: parenthesized parameters may only be used with a trait\n+ --> src/main.rs:2:21\n+  |\n+2 |   let x = 5 as usize();\n+  |                     ^^\n+  |\n+  = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+```\n+\n+To fix it, remove the `()`s.\n+\n+## pub-use-of-private-extern-crate\n+\n+This lint detects a specific situation of re-exporting a private `extern crate`;\n+\n+## safe-extern-statics\n+\n+In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n+to be accessed in safe code. This lint now catches and denies this kind of code.\n+\n+## unknown-crate-types\n+\n+This lint detects an unknown crate type found in a `#[crate_type]` directive. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+#![crate_type=\"lol\"]\n+```\n+\n+This will produce:\n+\n+```text\n+error: invalid `crate_type` value\n+ --> src/lib.rs:1:1\n+  |\n+1 | #![crate_type=\"lol\"]\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```"}, {"sha": "18cd2fe32a3cc75707effe23e285c4d187d5373f", "filename": "src/doc/rustc/src/lints/listing/index.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,5 @@\n+# Lint listing\n+\n+This section lists out all of the lints, grouped by their default lint levels.\n+\n+You can also see this list by running `rustc -W help`.\n\\ No newline at end of file"}, {"sha": "1171f75caa1fdf69ac32e2c02ee562a85df2f7a4", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "added", "additions": 1039, "deletions": 0, "changes": 1039, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,1039 @@\n+# Warn-by-default lints\n+\n+These lints are all set to the 'warn' level by default.\n+\n+## const-err\n+\n+This lint detects an erroneous expression while doing constant evaluation. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+let b = 200u8 + 200u8;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: attempt to add with overflow\n+ --> src/main.rs:2:9\n+  |\n+2 | let b = 200u8 + 200u8;\n+  |         ^^^^^^^^^^^^^\n+  |\n+```\n+\n+## dead-code\n+\n+This lint detects detect unused, unexported items. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function is never used: `foo`\n+ --> src/lib.rs:2:1\n+  |\n+2 | fn foo() {}\n+  | ^^^^^^^^\n+  |\n+```\n+\n+## deprecated\n+\n+This lint detects detects use of deprecated items. Some\n+example code that triggers this lint:\n+\n+```rust\n+#[deprecated]\n+fn foo() {}\n+\n+fn bar() {\n+    foo();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: use of deprecated item 'foo'\n+ --> src/lib.rs:7:5\n+  |\n+7 |     foo();\n+  |     ^^^\n+  |\n+```\n+\n+## illegal-floating-point-literal-pattern\n+\n+This lint detects floating-point literals used in patterns. Some example code\n+that triggers this lint:\n+\n+```rust\n+let x = 42.0;\n+\n+match x {\n+    5.0 => {},\n+    _ => {},\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: floating-point literals cannot be used in patterns\n+ --> src/main.rs:4:9\n+  |\n+4 |         5.0 => {},\n+  |         ^^^\n+  |\n+  = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+```\n+\n+## improper-ctypes\n+\n+This lint detects proper use of libc types in foreign modules. Some\n+example code that triggers this lint:\n+\n+```rust\n+extern \"C\" {\n+    static STATIC: String;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+ --> src/main.rs:2:20\n+  |\n+2 |     static STATIC: String;\n+  |                    ^^^^^^\n+  |\n+```\n+\n+## incoherent-fundamental-impls\n+\n+This lint detects potentially-conflicting impls that were erroneously allowed. Some\n+example code that triggers this lint:\n+\n+```rust\n+pub trait Trait1<X> {\n+    type Output;\n+}\n+\n+pub trait Trait2<X> {}\n+\n+pub struct A;\n+\n+impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+    type Output = ();\n+}\n+\n+impl<X> Trait1<Box<X>> for A {\n+    type Output = i32;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n+  --> src/main.rs:13:1\n+   |\n+9  | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+   | --------------------------------------------- first implementation here\n+...\n+13 | impl<X> Trait1<Box<X>> for A {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n+   |\n+   = note: #[warn(incoherent_fundamental_impls)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n+   = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n+```\n+\n+## late-bound-lifetime-arguments\n+\n+This lint detects detects generic lifetime arguments in path segments with\n+late bound lifetime parameters. Some example code that triggers this lint:\n+\n+```rust\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+}\n+\n+fn main() {\n+    S.late::<'static>(&0, &0);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+ --> src/main.rs:8:14\n+  |\n+4 |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+  |             -- the late bound lifetime parameter is introduced here\n+...\n+8 |     S.late::<'static>(&0, &0);\n+  |              ^^^^^^^\n+  |\n+  = note: #[warn(late_bound_lifetime_arguments)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+```\n+\n+## non-camel-case-types\n+\n+This lint detects types, variants, traits and type parameters that don't have\n+camel case names. Some example code that triggers this lint:\n+\n+```rust\n+struct s;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type `s` should have a camel case name such as `S`\n+ --> src/main.rs:1:1\n+  |\n+1 | struct s;\n+  | ^^^^^^^^^\n+  |\n+```\n+\n+## non-shorthand-field-patterns\n+\n+This lint detects using `Struct { x: x }` instead of `Struct { x }` in a pattern. Some\n+example code that triggers this lint:\n+\n+```rust\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+\n+fn main() {\n+    let p = Point {\n+        x: 5,\n+        y: 5,\n+    };\n+\n+    match p {\n+        Point { x: x, y: y } => (),\n+    }\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: the `x:` in this pattern is redundant\n+  --> src/main.rs:14:17\n+   |\n+14 |         Point { x: x, y: y } => (),\n+   |                 --^^\n+   |                 |\n+   |                 help: remove this\n+   |\n+\n+warning: the `y:` in this pattern is redundant\n+  --> src/main.rs:14:23\n+   |\n+14 |         Point { x: x, y: y } => (),\n+   |                       --^^\n+   |                       |\n+   |                       help: remove this\n+\n+```\n+\n+## non-snake-case\n+\n+This lint detects variables, methods, functions, lifetime parameters and\n+modules that don't have snake case names. Some example code that triggers\n+this lint:\n+\n+```rust\n+let X = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: variable `X` should have a snake case name such as `x`\n+ --> src/main.rs:2:9\n+  |\n+2 |     let X = 5;\n+  |         ^\n+  |\n+```\n+\n+## non-upper-case-globals\n+\n+This lint detects static constants that don't have uppercase identifiers.\n+Some example code that triggers this lint:\n+\n+```rust\n+static x: i32 = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: static variable `x` should have an upper case name such as `X`\n+ --> src/main.rs:1:1\n+  |\n+1 | static x: i32 = 5;\n+  | ^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## no-mangle-generic-items\n+\n+This lint detects generic items must be mangled. Some\n+example code that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+fn foo<T>(t: T) {\n+\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: functions generic over types must be mangled\n+ --> src/main.rs:2:1\n+  |\n+1 |   #[no_mangle]\n+  |   ------------ help: remove this attribute\n+2 | / fn foo<T>(t: T) {\n+3 | |     \n+4 | | }\n+  | |_^\n+  |\n+```\n+\n+## overflowing-literals\n+\n+This lint detects literal out of range for its type. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x: u8 = 1000;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: literal out of range for u8\n+ --> src/main.rs:2:17\n+  |\n+2 |     let x: u8 = 1000;\n+  |                 ^^^^\n+  |\n+```\n+\n+## path-statements\n+\n+This lint detects path statements with no effect. Some example code that\n+triggers this lint:\n+\n+```rust\n+let x = 42;\n+\n+x;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: path statement with no effect\n+ --> src/main.rs:3:5\n+  |\n+3 |     x;\n+  |     ^^\n+  |\n+```\n+\n+## patterns-in-fns-without-body\n+\n+This lint detects patterns in functions without body were that were\n+previously erroneously allowed. Some example code that triggers this lint:\n+\n+```rust\n+trait Trait {\n+    fn foo(mut arg: u8);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: patterns aren't allowed in methods without bodies\n+ --> src/main.rs:2:12\n+  |\n+2 |     fn foo(mut arg: u8);\n+  |            ^^^^^^^\n+  |\n+  = note: #[warn(patterns_in_fns_without_body)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n+```\n+\n+To fix this, remove the pattern; it can be used in the implementation without\n+being used in the definition. That is:\n+\n+```rust\n+trait Trait {\n+    fn foo(arg: u8);\n+}\n+\n+impl Trait for i32 {\n+    fn foo(mut arg: u8) {\n+\n+    }\n+}\n+```\n+\n+## plugin-as-library\n+\n+This lint detects when compiler plugins are used as ordinary library in\n+non-plugin crate. Some example code that triggers this lint:\n+\n+```rust,ignore\n+#![feature(plugin)]\n+#![plugin(macro_crate_test)]\n+\n+extern crate macro_crate_test;\n+```\n+\n+## private-in-public\n+\n+This lint detects detect private items in public interfaces not caught by the old implementation. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+pub trait Trait {\n+    type A;\n+}\n+\n+pub struct S;\n+\n+mod foo {\n+    struct Z;\n+\n+    impl ::Trait for ::S {\n+        type A = Z;\n+    }\n+}\n+# fn main() {}\n+```\n+\n+This will produce:\n+\n+```text\n+error[E0446]: private type `foo::Z` in public interface\n+  --> src/main.rs:11:9\n+   |\n+11 |         type A = Z;\n+   |         ^^^^^^^^^^^ can't leak private type\n+```\n+\n+## private-no-mangle-fns\n+\n+This lint detects functions marked `#[no_mangle]` that are also private.\n+Given that private functions aren't exposed publicly, and `#[no_mangle]`\n+controls the public symbol, this combination is erroneous. Some example code\n+that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+fn foo() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function is marked #[no_mangle], but not exported\n+ --> src/main.rs:2:1\n+  |\n+2 | fn foo() {}\n+  | -^^^^^^^^^^\n+  | |\n+  | help: try making it public: `pub`\n+  |\n+```\n+\n+To fix this, either make it public or remove the `#[no_mangle]`.\n+\n+## private-no-mangle-statics\n+\n+This lint detects any statics marked `#[no_mangle]` that are private.\n+Given that private statics aren't exposed publicly, and `#[no_mangle]`\n+controls the public symbol, this combination is erroneous. Some example code\n+that triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+static X: i32 = 4;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: static is marked #[no_mangle], but not exported\n+ --> src/main.rs:2:1\n+  |\n+2 | static X: i32 = 4;\n+  | -^^^^^^^^^^^^^^^^^\n+  | |\n+  | help: try making it public: `pub`\n+  |\n+```\n+\n+To fix this, either make it public or remove the `#[no_mangle]`.\n+\n+## renamed-and-removed-lints\n+\n+This lint detects lints that have been renamed or removed. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![deny(raw_pointer_derive)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: lint raw_pointer_derive has been removed: using derive with raw pointers is ok\n+ --> src/main.rs:1:9\n+  |\n+1 | #![deny(raw_pointer_derive)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix this, either remove the lint or use the new name.\n+\n+## safe-packed-borrows\n+\n+This lint detects borrowing a field in the interior of a packed structure\n+with alignment other than 1. Some example code that triggers this lint:\n+\n+```rust\n+#[repr(packed)]\n+pub struct Unaligned<T>(pub T);\n+\n+pub struct Foo {\n+    start: u8,\n+    data: Unaligned<u32>,\n+}\n+\n+fn main() {\n+    let x = Foo { start: 0, data: Unaligned(1) };\n+    let y = &x.data.0;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: borrow of packed field requires unsafe function or block (error E0133)\n+  --> src/main.rs:11:13\n+   |\n+11 |     let y = &x.data.0; \n+   |             ^^^^^^^^^\n+   |\n+   = note: #[warn(safe_packed_borrows)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+```\n+\n+## stable-features\n+\n+This lint detects a `#[feature]` attribute that's since been made stable. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(test_accepted_feature)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: this feature has been stable since 1.0.0. Attribute no longer needed\n+ --> src/main.rs:1:12\n+  |\n+1 | #![feature(test_accepted_feature)]\n+  |            ^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix, simply remove the `#![feature]` attribute, as it's no longer needed.\n+\n+## type-alias-bounds\n+\n+This lint detects bounds in type aliases. These are not currently enforced.\n+Some example code that triggers this lint:\n+\n+```rust\n+type SendVec<T: Send> = Vec<T>;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type alias is never used: `SendVec`\n+ --> src/main.rs:1:1\n+  |\n+1 | type SendVec<T: Send> = Vec<T>;\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## tyvar-behind-raw-pointer\n+\n+This lint detects raw pointer to an inference variable. Some\n+example code that triggers this lint:\n+\n+```rust\n+let data = std::ptr::null();\n+let _ = &data as *const *const ();\n+\n+if data.is_null() {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: type annotations needed\n+ --> src/main.rs:4:13\n+  |\n+4 |     if data.is_null() {}\n+  |             ^^^^^^^\n+  |\n+  = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+  = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n+```\n+\n+## unconditional-recursion\n+\n+This lint detects functions that cannot return without calling themselves.\n+Some example code that triggers this lint:\n+\n+```rust\n+fn foo() {\n+    foo();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: function cannot return without recurring\n+ --> src/main.rs:1:1\n+  |\n+1 | fn foo() {\n+  | ^^^^^^^^ cannot return without recurring\n+2 |     foo();\n+  |     ----- recursive call site\n+  |\n+```\n+\n+## unions-with-drop-fields\n+\n+This lint detects use of unions that contain fields with possibly non-trivial drop code. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(untagged_unions)]\n+\n+union U {\n+    s: String,\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: union contains a field with possibly non-trivial drop code, drop code of union fields is ignored when dropping the union\n+ --> src/main.rs:4:5\n+  |\n+4 |     s: String,\n+  |     ^^^^^^^^^\n+  |\n+```\n+\n+## unknown-lints\n+\n+This lint detects unrecognized lint attribute. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+#[allow(not_a_real_lint)]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unknown lint: `not_a_real_lint`\n+ --> src/main.rs:1:10\n+  |\n+1 | #![allow(not_a_real_lint)]\n+  |          ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-code\n+\n+This lint detects detects unreachable code paths. Some example code that\n+triggers this lint:\n+\n+```rust,no_run\n+panic!(\"we never go past here!\");\n+\n+let x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unreachable statement\n+ --> src/main.rs:4:5\n+  |\n+4 |     let x = 5;\n+  |     ^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-patterns\n+\n+This lint detects detects unreachable patterns. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 5;\n+match x {\n+    y => (),\n+    5 => (),\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unreachable pattern\n+ --> src/main.rs:5:5\n+  |\n+5 |     5 => (),\n+  |     ^\n+  |\n+```\n+\n+The `y` pattern will always match, so the five is impossible to reach.\n+Remember, match arms match in order, you probably wanted to put the `5` case\n+above the `y` case.\n+\n+## unstable-name-collision\n+\n+This lint detects that you've used a name that the standard library plans to\n+add in the future, which means that your code may fail to compile without\n+additional type annotations in the future. Either rename, or add those\n+annotations now.\n+\n+## unused-allocation\n+\n+This lint detects detects unnecessary allocations that can be eliminated.\n+\n+## unused-assignments\n+\n+This lint detects detect assignments that will never be read. Some\n+example code that triggers this lint:\n+\n+```rust\n+let mut x = 5;\n+x = 6;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: value assigned to `x` is never read\n+ --> src/main.rs:4:5\n+  |\n+4 |     x = 6;\n+  |     ^\n+  |\n+```\n+\n+## unused-attributes\n+\n+This lint detects detects attributes that were not used by the compiler. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![feature(custom_attribute)]\n+\n+#![mutable_doc]\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused attribute\n+ --> src/main.rs:4:1\n+  |\n+4 | #![mutable_doc]\n+  | ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-comparisons\n+\n+This lint detects comparisons made useless by limits of the types involved. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo(x: u8) {\n+    x >= 0;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: comparison is useless due to type limits\n+ --> src/main.rs:6:5\n+  |\n+6 |     x >= 0;\n+  |     ^^^^^^\n+  |\n+```\n+\n+## unused-doc-comment\n+\n+This lint detects detects doc comments that aren't used by rustdoc. Some\n+example code that triggers this lint:\n+\n+```rust\n+/// docs for x\n+let x = 12;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: doc comment not used by rustdoc\n+ --> src/main.rs:2:5\n+  |\n+2 |     /// docs for x\n+  |     ^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-features\n+\n+This lint detects unused or unknown features found in crate-level #[feature] directives.\n+To fix this, simply remove the feature flag.\n+\n+## unused-imports\n+\n+This lint detects imports that are never used. Some\n+example code that triggers this lint:\n+\n+```rust\n+use std::collections::HashMap;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused import: `std::collections::HashMap`\n+ --> src/main.rs:1:5\n+  |\n+1 | use std::collections::HashMap;\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-macros\n+\n+This lint detects detects macros that were not used. Some example code that\n+triggers this lint:\n+\n+```rust\n+macro_rules! unused {\n+    () => {};\n+}\n+\n+fn main() {\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused macro definition\n+ --> src/main.rs:1:1\n+  |\n+1 | / macro_rules! unused {\n+2 | |     () => {};\n+3 | | }\n+  | |_^\n+  |\n+```\n+\n+## unused-must-use\n+\n+This lint detects unused result of a type flagged as #[must_use]. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn returns_result() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn main() {\n+    returns_result();\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused `std::result::Result` which must be used\n+ --> src/main.rs:6:5\n+  |\n+6 |     returns_result();\n+  |     ^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-mut\n+\n+This lint detects detect mut variables which don't need to be mutable. Some\n+example code that triggers this lint:\n+\n+```rust\n+let mut x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: variable does not need to be mutable\n+ --> src/main.rs:2:9\n+  |\n+2 |     let mut x = 5;\n+  |         ----^\n+  |         |\n+  |         help: remove this `mut`\n+  |\n+```\n+\n+## unused-parens\n+\n+This lint detects `if`, `match`, `while` and `return` with parentheses; they\n+do not need them. Some example code that triggers this lint:\n+\n+```rust\n+if(true) {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unnecessary parentheses around `if` condition\n+ --> src/main.rs:2:7\n+  |\n+2 |     if(true) {}\n+  |       ^^^^^^ help: remove these parentheses\n+  |\n+```\n+\n+## unused-unsafe\n+\n+This lint detects unnecessary use of an `unsafe` block. Some\n+example code that triggers this lint:\n+\n+```rust\n+unsafe {}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unnecessary `unsafe` block\n+ --> src/main.rs:2:5\n+  |\n+2 |     unsafe {}\n+  |     ^^^^^^ unnecessary `unsafe` block\n+  |\n+```\n+\n+## unused-variables\n+\n+This lint detects detect variables which are not used in any way. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+warning: unused variable: `x`\n+ --> src/main.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^ help: consider using `_x` instead\n+  |\n+```\n+\n+## warnings\n+\n+This lint is a bit special; by changing its level, you change every other warning\n+that would produce a warning to whatever value you'd like:\n+\n+```rust\n+#![deny(warnings)]\n+```\n+\n+As such, you won't ever trigger this lint in your code directly.\n+\n+## while-true\n+\n+This lint detects `while true { }`. Some example code that triggers this\n+lint:\n+\n+```rust,no_run\n+while true {\n+\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+warning: denote infinite loops with `loop { ... }`\n+ --> src/main.rs:2:5\n+  |\n+2 |     while true {\n+  |     ^^^^^^^^^^ help: use `loop`\n+  |\n+```"}, {"sha": "8620346e5b7480fcb5eb5240fdfc9ee6c9c42a17", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,10 @@\n+# Built-in Targets\n+\n+`rustc` ships with the ability to compile to many targets automatically, we\n+call these \"built-in\" targets, and they generally correspond to targets that\n+the team is supporting directly.\n+\n+To see the list of built-in targets, you can run `rustc --print target-list`,\n+or look at [the API\n+docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/#modules).\n+Each module there defines a builder for a particular target.\n\\ No newline at end of file"}, {"sha": "0691afc60eae12c5b4dcb860aa586b2be92cd2ca", "filename": "src/doc/rustc/src/targets/custom.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,17 @@\n+# Custom Targets\n+\n+If you'd like to build for a target that is not yet supported by `rustc`, you can use a\n+\"custom target specification\" to define a target. These target specification files\n+are JSON. To see the JSON for the host target, you can run:\n+\n+```bash\n+$ rustc +nightly -Z unstable-options --print target-spec-json\n+```\n+\n+To see it for a different target, add the `--target` flag:\n+\n+```bash\n+$ rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json\n+```\n+\n+To use a custom target, see [`xargo`](https://github.com/japaric/xargo).\n\\ No newline at end of file"}, {"sha": "07e3a79471f5b5f4d877ed2129ef782df76fbdc9", "filename": "src/doc/rustc/src/targets/index.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,13 @@\n+# Targets\n+\n+`rustc` is a cross-compiler by default. This means that you can use any compiler to build for any\n+architecture. The list of *targets* are the possible architectures that you can build for.\n+\n+To see all the options that you can set with a target, see the docs\n+[here](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/struct.Target.html).\n+\n+To compile to a particular target, use the `--target` flag:\n+\n+```bash\n+$ rustc src/main.rs --target=wasm32-unknown-unknown\n+```"}, {"sha": "bed1b71c24e00132f7211802645949d8a2e081c2", "filename": "src/doc/rustc/src/what-is-rustc.md", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -0,0 +1,68 @@\n+# What is rustc?\n+\n+Welcome to \"The rustc book\"! `rustc` is the compiler for the Rust programming\n+language, provided by the project itself. Compilers take your source code and\n+produce binary code, either as a library or executable.\n+\n+Most Rust programmers don't invoke `rustc` directly, but instead do it through\n+[Cargo](../cargo/index.html). It's all in service of `rustc` though! If you\n+want to see how Cargo calls `rustc`, you can\n+\n+```bash\n+$ cargo build --verbose\n+```\n+\n+And it will print out each `rustc` invocation. This book can help you\n+understand what each of these options does. Additionally, while most\n+Rustaceans use Cargo, not all do: sometimes they integrate `rustc` into other\n+build systems. This book should provide a guide to all of the options you'd\n+need to do so.\n+\n+## Basic usage\n+\n+Let's say you've got a little hello world program in a file `hello.rs`:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+To turn this source code into an executable, you can use `rustc`:\n+\n+```bash\n+$ rustc hello.rs\n+$ ./hello # on a *NIX\n+$ .\\hello.exe # on Windows\n+```\n+\n+Note that we only ever pass `rustc` the *crate root*, not every file we wish\n+to compile. For example, if we had a `main.rs` that looked like this:\n+\n+```rust,ignore\n+mod foo;\n+\n+fn main() {\n+    foo::hello();\n+}\n+```\n+\n+And a `foo.rs` that had this:\n+\n+```rust,ignore\n+fn hello() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+To compile this, we'd run this command:\n+\n+```bash\n+$ rustc main.rs\n+```\n+\n+No need to tell `rustc` about `foo.rs`; the `mod` statements give it\n+everything that it needs. This is different than how you would use a C\n+compiler, where you invoke the compiler on each file, and then link\n+everything together. In other words, the *crate* is a translation unit, not a\n+particular module.\n\\ No newline at end of file"}, {"sha": "13e838773a5875faf0a0da4117644d9f45776c94", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -106,6 +106,8 @@ use self::Ordering::*;\n /// ```\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"==\")]\n+#[doc(alias = \"!=\")]\n #[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n@@ -160,6 +162,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// }\n /// impl Eq for Book {}\n /// ```\n+#[doc(alias = \"==\")]\n+#[doc(alias = \"!=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // this method is used solely by #[deriving] to assert\n@@ -428,6 +432,10 @@ impl<T: Ord> Ord for Reverse<T> {\n /// }\n /// ```\n #[lang = \"ord\"]\n+#[doc(alias = \"<\")]\n+#[doc(alias = \">\")]\n+#[doc(alias = \"<=\")]\n+#[doc(alias = \">=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -599,6 +607,10 @@ impl PartialOrd for Ordering {\n /// ```\n #[lang = \"partial_ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \">\")]\n+#[doc(alias = \"<\")]\n+#[doc(alias = \"<=\")]\n+#[doc(alias = \">=\")]\n #[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists."}, {"sha": "99e3012c9bf8cd5e038310ca4205577cb71e569c", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -547,6 +547,7 @@ impl<'a> Display for Arguments<'a> {\n     message=\"`{Self}` doesn't implement `{Debug}`\",\n     label=\"`{Self}` cannot be formatted using `:?` because it doesn't implement `{Debug}`\",\n )]\n+#[doc(alias = \"{:?}\")]\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -612,6 +613,7 @@ pub trait Debug {\n     label=\"`{Self}` cannot be formatted with the default formatter; \\\n            try using `:?` instead if you are using a format string\",\n )]\n+#[doc(alias = \"{}\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "02b6f62db6eb109d52bd6a8e9cba4aa2470c357b", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -119,6 +119,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 & bv2, expected);\n /// ```\n #[lang = \"bitand\"]\n+#[doc(alias = \"&\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n                          label=\"no implementation for `{Self} & {RHS}`\")]\n@@ -201,6 +202,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 | bv2, expected);\n /// ```\n #[lang = \"bitor\"]\n+#[doc(alias = \"|\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n                          label=\"no implementation for `{Self} | {RHS}`\")]\n@@ -286,6 +288,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 ^ bv2, expected);\n /// ```\n #[lang = \"bitxor\"]\n+#[doc(alias = \"^\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n                          label=\"no implementation for `{Self} ^ {RHS}`\")]\n@@ -372,6 +375,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///            SpinVector { vec: vec![2, 3, 4, 0, 1] });\n /// ```\n #[lang = \"shl\"]\n+#[doc(alias = \"<<\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n                          label=\"no implementation for `{Self} << {RHS}`\")]\n@@ -479,6 +483,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n ///            SpinVector { vec: vec![3, 4, 0, 1, 2] });\n /// ```\n #[lang = \"shr\"]\n+#[doc(alias = \">>\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n                          label=\"no implementation for `{Self} >> {RHS}`\")]\n@@ -593,6 +598,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// assert_eq!(bv, expected);\n /// ```\n #[lang = \"bitand_assign\"]\n+#[doc(alias = \"&=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} &= {Rhs}`\",\n                          label=\"no implementation for `{Self} &= {Rhs}`\")]\n@@ -641,6 +647,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(prefs, PersonalPreferences { likes_cats: true, likes_dogs: true });\n /// ```\n #[lang = \"bitor_assign\"]\n+#[doc(alias = \"|=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} |= {Rhs}`\",\n                          label=\"no implementation for `{Self} |= {Rhs}`\")]\n@@ -689,6 +696,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(personality, Personality { has_soul: true, likes_knitting: false});\n /// ```\n #[lang = \"bitxor_assign\"]\n+#[doc(alias = \"^=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} ^= {Rhs}`\",\n                          label=\"no implementation for `{Self} ^= {Rhs}`\")]\n@@ -735,6 +743,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(scalar, Scalar(16));\n /// ```\n #[lang = \"shl_assign\"]\n+#[doc(alias = \"<<=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} <<= {Rhs}`\",\n                          label=\"no implementation for `{Self} <<= {Rhs}`\")]\n@@ -802,6 +811,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// assert_eq!(scalar, Scalar(4));\n /// ```\n #[lang = \"shr_assign\"]\n+#[doc(alias = \">>=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} >>= {Rhs}`\",\n                          label=\"no implementation for `{Self} >>= {Rhs}`\")]"}, {"sha": "332d154170f4da6346696871c894c58292329c7a", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -68,6 +68,8 @@\n /// assert_eq!('a', *x);\n /// ```\n #[lang = \"deref\"]\n+#[doc(alias = \"*\")]\n+#[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n@@ -162,6 +164,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// assert_eq!('b', *x);\n /// ```\n #[lang = \"deref_mut\"]\n+#[doc(alias = \"*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DerefMut: Deref {\n     /// Mutably dereferences the value."}, {"sha": "d70f7ae66f9038ee27f8b8ff0e8342539cbda178", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -45,6 +45,7 @@ use fmt;\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n@@ -74,6 +75,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1.. ], [     'b', 'c', 'd']);\n /// assert_eq!(arr[1..3], [     'b', 'c'     ]);  // Range\n /// ```\n+#[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n@@ -175,6 +177,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// ```\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n+#[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n@@ -256,6 +259,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n@@ -323,6 +327,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[ ..=2], [0,1,2  ]);\n /// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n /// ```\n+#[doc(alias = \"..=\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n@@ -449,6 +454,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..=\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeToInclusive<Idx> {"}, {"sha": "f5d590f25c80f19e2167ccd8f8cd77be326393bb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -655,7 +655,7 @@ impl<'a> LoweringContext<'a> {\n                 self.resolver.definitions().create_def_with_parent(\n                     parent_id.index,\n                     def_node_id,\n-                    DefPathData::LifetimeDef(str_name),\n+                    DefPathData::LifetimeDef(str_name.as_interned_str()),\n                     DefIndexAddressSpace::High,\n                     Mark::root(),\n                     span,\n@@ -1302,7 +1302,7 @@ impl<'a> LoweringContext<'a> {\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n-                        DefPathData::LifetimeDef(name.name().as_str()),\n+                        DefPathData::LifetimeDef(name.name().as_interned_str()),\n                         DefIndexAddressSpace::High,\n                         Mark::root(),\n                         lifetime.span,"}, {"sha": "ebd8e6235825cd4c67d2b18637a2943df72e9c75", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -107,18 +107,18 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n-            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_str()),\n+            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_interned_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.name.as_str()),\n+                DefPathData::TypeNs(i.ident.name.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_interned_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.name.as_str()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n+                DefPathData::ValueNs(i.ident.name.as_interned_str()),\n+            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_interned_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n@@ -133,15 +133,16 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.ident.name.as_str()),\n+                                            DefPathData::EnumVariant(v.node.ident\n+                                                                      .name.as_interned_str()),\n                                             REGULAR_SPACE,\n                                             v.span);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n                                 this.create_def(field.id,\n-                                                DefPathData::Field(name.as_str()),\n+                                                DefPathData::Field(name.as_interned_str()),\n                                                 REGULAR_SPACE,\n                                                 field.span);\n                             }\n@@ -165,7 +166,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                         let name = field.ident.map(|ident| ident.name)\n                             .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n                         this.create_def(field.id,\n-                                        DefPathData::Field(name.as_str()),\n+                                        DefPathData::Field(name.as_interned_str()),\n                                         REGULAR_SPACE,\n                                         field.span);\n                     }\n@@ -187,7 +188,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n \n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n+                                  DefPathData::ValueNs(foreign_item.ident.name.as_interned_str()),\n                                   REGULAR_SPACE,\n                                   foreign_item.span);\n \n@@ -201,15 +202,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             GenericParam::Lifetime(ref lifetime_def) => {\n                 self.create_def(\n                     lifetime_def.lifetime.id,\n-                    DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_str()),\n+                    DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_interned_str()),\n                     REGULAR_SPACE,\n                     lifetime_def.lifetime.ident.span\n                 );\n             }\n             GenericParam::Type(ref ty_param) => {\n                 self.create_def(\n                     ty_param.id,\n-                    DefPathData::TypeParam(ty_param.ident.name.as_str()),\n+                    DefPathData::TypeParam(ty_param.ident.name.as_interned_str()),\n                     REGULAR_SPACE,\n                     ty_param.ident.span\n                 );\n@@ -222,8 +223,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name.as_str()),\n-            TraitItemKind::Type(..) => DefPathData::AssocTypeInTrait(ti.ident.name.as_str()),\n+                DefPathData::ValueNs(ti.ident.name.as_interned_str()),\n+            TraitItemKind::Type(..) => {\n+                DefPathData::AssocTypeInTrait(ti.ident.name.as_interned_str())\n+            },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -240,8 +243,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.name.as_str()),\n-            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_str()),\n+                DefPathData::ValueNs(ii.ident.name.as_interned_str()),\n+            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_interned_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n "}, {"sha": "616dc22486d92a4a4ecb4eda686383cb659d89f3", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -701,7 +701,7 @@ impl DefPathData {\n             Typeof => \"{{typeof}}\",\n         };\n \n-        Symbol::intern(s).as_str()\n+        Symbol::intern(s).as_interned_str()\n     }\n \n     pub fn to_string(&self) -> String {\n@@ -731,7 +731,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name().as_str()),\n+                        DefPathData::GlobalMetaData(instance.name().as_interned_str()),\n                         GLOBAL_MD_ADDRESS_SPACE,\n                         Mark::root(),\n                         DUMMY_SP\n@@ -746,7 +746,7 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name().as_str()),\n+                        data: DefPathData::GlobalMetaData(self.name().as_interned_str()),\n                         disambiguator: 0,\n                     }\n                 };"}, {"sha": "c1e86473996d0f82bb3416954ec4e3634e95936f", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -19,7 +19,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::{InternedString, LocalInternedString};\n use syntax::tokenstream;\n use syntax_pos::FileMap;\n \n@@ -34,8 +34,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for InternedString {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        let s: &str = &**self;\n-        s.hash_stable(hcx, hasher);\n+        self.with(|s| s.hash_stable(hcx, hasher))\n     }\n }\n \n@@ -50,6 +49,27 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n     }\n }\n \n+impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let s: &str = &**self;\n+        s.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n+    type KeyType = LocalInternedString;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self,\n+                          _: &StableHashingContext<'a>)\n+                          -> LocalInternedString {\n+        self.clone()\n+    }\n+}\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -66,7 +86,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n                           -> InternedString {\n-        self.as_str()\n+        self.as_interned_str()\n     }\n }\n "}, {"sha": "c2b1d7f09149e2c8a3dec39a4b2c3edb30237cb8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -58,6 +58,7 @@\n #![feature(nonzero)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n+#![feature(optin_builtin_traits)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]"}, {"sha": "d1fd70ae02d6987b4ec5170570259079822a9367", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -18,10 +18,10 @@ use util::nodemap::FxHashMap;\n use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax_pos::Span;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::LocalInternedString;\n \n #[derive(Clone, Debug)]\n-pub struct OnUnimplementedFormatString(InternedString);\n+pub struct OnUnimplementedFormatString(LocalInternedString);\n \n #[derive(Debug)]\n pub struct OnUnimplementedDirective {\n@@ -225,7 +225,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     pub fn try_parse(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                      trait_def_id: DefId,\n-                     from: InternedString,\n+                     from: LocalInternedString,\n                      err_sp: Span)\n                      -> Result<Self, ErrorReported>\n     {"}, {"sha": "d38c003ef8aeb6f4992af1cfe5ac1aaf55c2f5b1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -2471,7 +2471,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_self_type(self) -> Ty<'tcx> {\n-        self.mk_param(0, keywords::SelfType.name().as_str())\n+        self.mk_param(0, keywords::SelfType.name().as_interned_str())\n     }\n \n     pub fn mk_param_from_def(self, def: &ty::TypeParameterDef) -> Ty<'tcx> {"}, {"sha": "752b7f69a6a7ffc41d14c260d33f9eb6cf218db8", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -14,7 +14,7 @@ use ty::{self, Ty, TyCtxt};\n use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n \n use std::cell::Cell;\n \n@@ -131,7 +131,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n-        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<InternedString>::new());\n+        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<LocalInternedString>::new());\n         loop {\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n@@ -168,8 +168,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             let data = cur_def_key.disambiguated_data.data;\n-            let symbol =\n-                data.get_opt_name().unwrap_or_else(|| Symbol::intern(\"<unnamed>\").as_str());\n+            let symbol = data.get_opt_name().map(|n| n.as_str()).unwrap_or_else(|| {\n+                Symbol::intern(\"<unnamed>\").as_str()\n+            });\n             cur_path.push(symbol);\n \n             match visible_parent_map.get(&cur_def) {\n@@ -221,7 +222,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::GlobalMetaData(..) => {\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n                 self.push_item_path(buffer, parent_def_id);\n-                buffer.push(&data.as_interned_str());\n+                buffer.push(&data.as_interned_str().as_symbol().as_str());\n             }\n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();"}, {"sha": "d3d06248792400678bd2112a6fc32e1e0c06c7ce", "filename": "src/librustc/ty/maps/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n     fn from_cycle_error<'a>(_: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        ty::SymbolName { name: Symbol::intern(\"<error>\").as_str() }\n+        ty::SymbolName { name: Symbol::intern(\"<error>\").as_interned_str() }\n     }\n }\n "}, {"sha": "19532bc80aa0d12b1a72cb50a011b5b52685b18c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -51,7 +51,7 @@ use std::mem;\n use syntax::ast::{self, DUMMY_NODE_ID, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::{Symbol, LocalInternedString, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -2463,7 +2463,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn item_name(self, id: DefId) -> InternedString {\n         if id.index == CRATE_DEF_INDEX {\n-            self.original_crate_name(id.krate).as_str()\n+            self.original_crate_name(id.krate).as_interned_str()\n         } else {\n             let def_key = self.def_key(id);\n             // The name of a StructCtor is that of its struct parent.\n@@ -2820,15 +2820,13 @@ impl_stable_hash_for!(struct self::SymbolName {\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {\n-            name: Symbol::intern(name).as_str()\n+            name: Symbol::intern(name).as_interned_str()\n         }\n     }\n-}\n-\n-impl Deref for SymbolName {\n-    type Target = str;\n \n-    fn deref(&self) -> &str { &self.name }\n+    pub fn as_str(&self) -> LocalInternedString {\n+        self.name.as_str()\n+    }\n }\n \n impl fmt::Display for SymbolName {"}, {"sha": "e9c1e87676b5d13846e1cf56721aabe51a632fe2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n     }\n \n     pub fn for_self() -> ParamTy {\n-        ParamTy::new(0, keywords::SelfType.name().as_str())\n+        ParamTy::new(0, keywords::SelfType.name().as_interned_str())\n     }\n \n     pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy {"}, {"sha": "b777f513e6df072425698918e36935642be51525", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -462,7 +462,7 @@ impl PrintContext {\n                 0 => Symbol::intern(\"'r\"),\n                 1 => Symbol::intern(\"'s\"),\n                 i => Symbol::intern(&format!(\"'t{}\", i-2)),\n-            }.as_str()\n+            }.as_interned_str()\n         }\n \n         // Replace any anonymous late-bound regions with named"}, {"sha": "d2ee3d8743c2cd74886d8e3b3a5d18098c5d22e7", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -303,11 +303,11 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n-        self.infcx.tcx.mk_param(index, Symbol::intern(&name).as_str())\n+        self.infcx.tcx.mk_param(index, Symbol::intern(&name).as_interned_str())\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> ty::Region<'tcx> {\n-        let name = Symbol::intern(name).as_str();\n+        let name = Symbol::intern(name).as_interned_str();\n         self.infcx.tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: self.infcx.tcx.hir.local_def_id(ast::CRATE_NODE_ID),\n             index,"}, {"sha": "6906dacfc5ef69af281e585b34bce8d0c50aa994", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n \n         let mname = self.field(attr, MODULE);\n         let mangled_cgu_name = CodegenUnit::mangle_name(&mname.as_str());\n-        let mangled_cgu_name = Symbol::intern(&mangled_cgu_name).as_str();\n+        let mangled_cgu_name = Symbol::intern(&mangled_cgu_name).as_interned_str();\n \n         let dep_node = DepNode::new(self.tcx,\n                                     DepConstructor::CompileCodegenUnit(mangled_cgu_name));"}, {"sha": "91f8beeaafb00432242b80bae093a50cb3d29127", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -535,7 +535,7 @@ impl CrateStore for cstore::CStore {\n             .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n \n         LoadedMacro::MacroDef(ast::Item {\n-            ident: ast::Ident::from_str(&name),\n+            ident: ast::Ident::from_str(&name.as_str()),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "388bf1fb99a34ecd35fa11bc0d4158d6bd5ed2e5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -40,7 +40,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::codemap;\n-use syntax::symbol::{InternedString, Symbol};\n+use syntax::symbol::InternedString;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n \n@@ -537,12 +537,12 @@ impl<'a, 'tcx> CrateMetadata {\n \n         ty::VariantDef {\n             did: self.local_def_id(data.struct_ctor.unwrap_or(index)),\n-            name: Symbol::intern(&self.item_name(index)),\n+            name: self.item_name(index).as_symbol(),\n             fields: item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    name: Symbol::intern(&self.item_name(index)),\n+                    name: self.item_name(index).as_symbol(),\n                     vis: f.visibility.decode(self)\n                 }\n             }).collect(),\n@@ -730,7 +730,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n                                     def,\n-                                    ident: Ident::from_str(&self.item_name(child_index)),\n+                                    ident: Ident::from_interned_str(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                     is_import: false,\n@@ -748,7 +748,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 let span = child.span.decode((self, sess));\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    let ident = Ident::from_str(&name);\n+                    let ident = Ident::from_interned_str(name);\n                     let vis = self.get_visibility(child_index);\n                     let is_import = false;\n                     callback(def::Export { def, ident, vis, span, is_import });\n@@ -847,7 +847,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssociatedItem {\n-            name: Symbol::intern(&name),\n+            name: name.as_symbol(),\n             kind,\n             vis: item.visibility.decode(self),\n             defaultness: container.defaultness(),\n@@ -914,7 +914,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| Symbol::intern(&self.item_name(index)))\n+            .map(|index| self.item_name(index).as_symbol())\n             .collect()\n     }\n \n@@ -1106,7 +1106,7 @@ impl<'a, 'tcx> CrateMetadata {\n             DefKey {\n                 parent: Some(CRATE_DEF_INDEX),\n                 disambiguated_data: DisambiguatedDefPathData {\n-                    data: DefPathData::MacroDef(name.as_str()),\n+                    data: DefPathData::MacroDef(name.as_interned_str()),\n                     disambiguator: 0,\n                 }\n             }"}, {"sha": "562f890b4c0fb9704314dc5bc4f2f2aa8b8bcc4c", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         let f = ty.fn_sig(this.hir.tcx());\n                         if f.abi() == Abi::RustIntrinsic ||\n                            f.abi() == Abi::PlatformIntrinsic {\n-                            Some(this.hir.tcx().item_name(def_id))\n+                            Some(this.hir.tcx().item_name(def_id).as_str())\n                         } else {\n                             None\n                         }"}, {"sha": "dff9fa271aba52f99b6b03c7ad54dbc03889bbd0", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -263,7 +263,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     ) -> EvalResult<'tcx> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &ecx.tcx.item_name(instance.def_id())[..];\n+        let intrinsic_name = &ecx.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n             \"min_align_of\" => {\n                 let elem_ty = substs.type_at(0);"}, {"sha": "f6e9994b5da3f9f885bb59f9852ecb47087a810b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -768,9 +768,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n         }\n \n-        if log_enabled!(::log::Level::Trace) {\n-            self.dump_local(dest);\n-        }\n+        self.dump_local(dest);\n \n         Ok(())\n     }\n@@ -1572,6 +1570,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n     pub fn dump_local(&self, place: Place) {\n         // Debug output\n+        if !log_enabled!(::log::Level::Trace) {\n+            return;\n+        }\n         match place {\n             Place::Local { frame, local } => {\n                 let mut allocs = Vec::new();"}, {"sha": "7f8205b8327face1250c757888a8dbfaaf8039d7", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -334,11 +334,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     /// For debugging, print an allocation and all allocations it points to, recursively.\n     pub fn dump_alloc(&self, id: AllocId) {\n+        if !log_enabled!(::log::Level::Trace) {\n+            return;\n+        }\n         self.dump_allocs(vec![id]);\n     }\n \n     /// For debugging, print a list of allocations and all allocations they point to, recursively.\n     pub fn dump_allocs(&self, mut allocs: Vec<AllocId>) {\n+        if !log_enabled!(::log::Level::Trace) {\n+            return;\n+        }\n         use std::fmt::Write;\n         allocs.sort();\n         allocs.dedup();"}, {"sha": "d03204bfab16d6cb384fc2eea11c42ad220b208a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -219,9 +219,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         };\n \n-        if log_enabled!(::log::Level::Trace) {\n-            self.dump_local(place);\n-        }\n+        self.dump_local(place);\n \n         Ok(place)\n     }"}, {"sha": "9e43bed1b63af1958dfa089ffb22c4ecd22e5016", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -76,7 +76,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::GlobalAsm(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n                 ty::SymbolName {\n-                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_str()\n+                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_interned_str()\n                 }\n             }\n         }"}, {"sha": "3a65cd4ea770b5664ae05aa9c0653706221caaef", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -146,7 +146,7 @@ pub trait CodegenUnitExt<'tcx> {\n     }\n \n     fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(self.name())\n+        WorkProductId::from_cgu_name(&self.name().as_str())\n     }\n \n     fn items_in_deterministic_order<'a>(&self,\n@@ -206,9 +206,9 @@ fn fallback_cgu_name(tcx: TyCtxt) -> InternedString {\n     const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n \n     if tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n-        Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str()\n+        Symbol::intern(FALLBACK_CODEGEN_UNIT).as_interned_str()\n     } else {\n-        Symbol::intern(&CodegenUnit::mangle_name(FALLBACK_CODEGEN_UNIT)).as_str()\n+        Symbol::intern(&CodegenUnit::mangle_name(FALLBACK_CODEGEN_UNIT)).as_interned_str()\n     }\n }\n \n@@ -740,7 +740,7 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         }\n                     }) {\n         cgu_name.push_str(\"-\");\n-        cgu_name.push_str(&part.data.as_interned_str());\n+        cgu_name.push_str(&part.data.as_interned_str().as_str());\n     }\n \n     if volatile {\n@@ -753,11 +753,11 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         CodegenUnit::mangle_name(&cgu_name)\n     };\n \n-    Symbol::intern(&cgu_name[..]).as_str()\n+    Symbol::intern(&cgu_name[..]).as_interned_str()\n }\n \n fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {\n-    Symbol::intern(&format!(\"{}{}\", crate_name, index)).as_str()\n+    Symbol::intern(&format!(\"{}{}\", crate_name, index)).as_interned_str()\n }\n \n fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -772,7 +772,7 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (trans_item, linkage) in cgu.items() {\n-                let symbol_name = trans_item.symbol_name(tcx);\n+                let symbol_name = trans_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "2bf5a49c97e8ff31eaf648f27dc810065de63878", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.visibility_scope_info[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n-                    description: Symbol::intern(\"borrow of packed field\").as_str(),\n+                    description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n                     kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                 }], &[]);\n             }\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.visibility_scope_info[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: Symbol::intern(\"use of extern static\").as_str(),\n+                        description: Symbol::intern(\"use of extern static\").as_interned_str(),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n-            description: Symbol::intern(description).as_str(),\n+            description: Symbol::intern(description).as_interned_str(),\n             kind: UnsafetyViolationKind::General,\n         }], &[]);\n     }\n@@ -444,15 +444,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} requires unsafe function or block\", description)\n-                    .span_label(source_info.span, &description[..])\n+                    .span_label(source_info.span, &description.as_str()[..])\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node(SAFE_EXTERN_STATICS,\n                               lint_node_id,\n                               source_info.span,\n                               &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", &description[..]));\n+                                        block (error E0133)\", &description.as_str()[..]));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -462,7 +462,7 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                   lint_node_id,\n                                   source_info.span,\n                                   &format!(\"{} requires unsafe function or \\\n-                                            block (error E0133)\", &description[..]));\n+                                            block (error E0133)\", &description.as_str()[..]));\n                 }\n             }\n         }"}, {"sha": "4762c6aaa27cc8143e78f65ffe3058c493a67d62", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -868,7 +868,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n-                        match &self.tcx.item_name(def_id)[..] {\n+                        match &self.tcx.item_name(def_id).as_str()[..] {\n                             \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {"}, {"sha": "14ceb5f59a3ec60b429bbb9e529bd2aa5bb6ccc7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -41,7 +41,6 @@ use syntax::ext::tt::macro_rules;\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n-use syntax::symbol::Symbol;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -544,14 +543,14 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.cstore.crate_name_untracked(def_id.krate).as_str(), None)\n+            (self.cstore.crate_name_untracked(def_id.krate).as_interned_str(), None)\n         } else {\n             let def_key = self.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n \n-        let kind = ModuleKind::Def(Def::Mod(def_id), Symbol::intern(&name));\n+        let kind = ModuleKind::Def(Def::Mod(def_id), name.as_symbol());\n         let module =\n             self.arenas.alloc_module(ModuleData::new(parent, kind, def_id, Mark::root(), DUMMY_SP));\n         self.extern_module_map.insert((def_id, macros_only), module);"}, {"sha": "d8520b61d9157b624e6c0917a08a51a5d676504a", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -132,7 +132,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .map(|def_id| {\n             let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n                 // We can probably do better here by just ensuring that\n                 // it has hidden visibility rather than public\n                 // visibility, as this is primarily here to ensure it's"}, {"sha": "b756a6695f9415bec8628cbdc980b23f9cd1dfeb", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1037,7 +1037,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push_str(\" \");\n-                    output.push_str(&cgu_name);\n+                    output.push_str(&cgu_name.as_str());\n \n                     let linkage_abbrev = match linkage {\n                         Linkage::External => \"External\","}, {"sha": "9263d9a5f5dc2096dfa972a592efe1bec38c9c74", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -52,7 +52,7 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance);\n+    let sym = tcx.symbol_name(instance).as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n \n     // Create a fn pointer with the substituted signature."}, {"sha": "4a0619b23360df1684b3efffd0566943990b1363", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -33,7 +33,7 @@ use libc::{c_uint, c_char};\n use std::iter;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use context::CodegenCx;\n@@ -183,7 +183,7 @@ pub fn C_u8(cx: &CodegenCx, i: u8) -> ValueRef {\n \n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n-pub fn C_cstr(cx: &CodegenCx, s: InternedString, null_terminated: bool) -> ValueRef {\n+pub fn C_cstr(cx: &CodegenCx, s: LocalInternedString, null_terminated: bool) -> ValueRef {\n     unsafe {\n         if let Some(&llval) = cx.const_cstr_cache.borrow().get(&s) {\n             return llval;\n@@ -208,7 +208,7 @@ pub fn C_cstr(cx: &CodegenCx, s: InternedString, null_terminated: bool) -> Value\n \n // NB: Do not use `do_spill_noroot` to make this into a constant string, or\n // you will be kicked off fast isel. See issue #4352 for an example of this.\n-pub fn C_str_slice(cx: &CodegenCx, s: InternedString) -> ValueRef {\n+pub fn C_str_slice(cx: &CodegenCx, s: LocalInternedString) -> ValueRef {\n     let len = s.len();\n     let cs = consts::ptrcast(C_cstr(cx, s, false),\n         cx.layout_of(cx.tcx.mk_str()).llvm_type(cx).ptr_to());"}, {"sha": "405cb83ad4d754a4e443b0d51b842542435c92bf", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -118,7 +118,7 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n              def_id);\n \n     let ty = instance.ty(cx.tcx);\n-    let sym = cx.tcx.symbol_name(instance);\n+    let sym = cx.tcx.symbol_name(instance).as_str();\n \n     let g = if let Some(id) = cx.tcx.hir.as_local_node_id(def_id) {\n "}, {"sha": "90b2fb4b59a7016aa37f38a3ce2d0dbc9361f729", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -39,7 +39,7 @@ use std::ptr;\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use abi::Abi;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n@@ -62,7 +62,7 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n     pub vtables: RefCell<FxHashMap<(Ty<'tcx>,\n                                 Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<InternedString, ValueRef>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, ValueRef>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a ValueRef holding a *T,\n@@ -273,7 +273,7 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n             let dbg_cx = if tcx.sess.opts.debuginfo != NoDebugInfo {\n                 let dctx = debuginfo::CrateDebugContext::new(llmod);\n                 debuginfo::metadata::compile_unit_metadata(tcx,\n-                                                           codegen_unit.name(),\n+                                                           &codegen_unit.name().as_str(),\n                                                            &dctx);\n                 Some(dctx)\n             } else {"}, {"sha": "123b9cf7931a58a1aae89fd4e0d3fdc454105e44", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1399,7 +1399,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     (discr.size(cx), discr.align(cx));\n                 let discriminant_base_type_metadata =\n                     type_metadata(cx, discr.to_ty(cx.tcx), syntax_pos::DUMMY_SP);\n-                let discriminant_name = get_enum_discriminant_name(cx, enum_def_id);\n+                let discriminant_name = get_enum_discriminant_name(cx, enum_def_id).as_str();\n \n                 let name = CString::new(discriminant_name.as_bytes()).unwrap();\n                 let discriminant_type_metadata = unsafe {"}, {"sha": "193db15303f97251d2813c2f5d48a48a82490348", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -394,7 +394,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             substs.types().zip(names).map(|(ty, name)| {\n                 let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n-                let name = CString::new(name.as_bytes()).unwrap();\n+                let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {\n                     llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),"}, {"sha": "51c45de9dc22a7633f1e8a6bdcaa35d5638acd28", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -47,7 +47,7 @@ pub fn item_namespace(cx: &CodegenCx, def_id: DefId) -> DIScope {\n \n     let namespace_name = match def_key.disambiguated_data.data {\n         DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_interned_str()\n+        data => data.as_interned_str().as_str()\n     };\n \n     let namespace_name = CString::new(namespace_name.as_bytes()).unwrap();"}, {"sha": "825fac36c93d7bed47119c18a6674bd5f76c215b", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -190,10 +190,10 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             output.push_str(&cx.tcx.crate_name(def_id.krate).as_str());\n             for path_element in cx.tcx.def_path(def_id).data {\n                 output.push_str(\"::\");\n-                output.push_str(&path_element.data.as_interned_str());\n+                output.push_str(&path_element.data.as_interned_str().as_str());\n             }\n         } else {\n-            output.push_str(&cx.tcx.item_name(def_id));\n+            output.push_str(&cx.tcx.item_name(def_id).as_str());\n         }\n     }\n "}, {"sha": "49a207a2d8ab5b299f54812d1c45ea0bcf879fd2", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -103,7 +103,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     let arg_tys = sig.inputs();\n     let ret_ty = sig.output();\n-    let name = &*tcx.item_name(def_id);\n+    let name = &*tcx.item_name(def_id).as_str();\n \n     let llret_ty = cx.layout_of(ret_ty).llvm_type(cx);\n     let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align);"}, {"sha": "fb6a17a1c75b49a3da487c37d118c7f3d968e0f6", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match def {\n                     Some(ty::InstanceDef::Intrinsic(def_id))\n-                        => Some(bx.tcx().item_name(def_id)),\n+                        => Some(bx.tcx().item_name(def_id).as_str()),\n                     _ => None\n                 };\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);"}, {"sha": "d19b5af25273d30a5de19fbc219306ffcb38d6a5", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -88,7 +88,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                self.to_raw_string(),\n                cx.codegen_unit.name());\n \n-        let symbol_name = self.symbol_name(cx.tcx);\n+        let symbol_name = self.symbol_name(cx.tcx).as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "be5bff60805c3b2b8242ff3c755c93211b1afc10", "filename": "src/librustc_trans_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fsymbol_names.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -229,7 +229,7 @@ fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n fn symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>)\n                          -> ty::SymbolName\n {\n-    ty::SymbolName { name: Symbol::intern(&compute_symbol_name(tcx, instance)).as_str() }\n+    ty::SymbolName { name: Symbol::intern(&compute_symbol_name(tcx, instance)).as_interned_str() }\n }\n \n fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>)\n@@ -355,12 +355,12 @@ impl SymbolPathBuffer {\n             result: String::with_capacity(64),\n             temp_buf: String::with_capacity(16)\n         };\n-        result.result.push_str(&symbol.name);\n+        result.result.push_str(&symbol.name.as_str());\n         result\n     }\n \n     fn into_interned(self) -> ty::SymbolName {\n-        ty::SymbolName { name: Symbol::intern(&self.result).as_str() }\n+        ty::SymbolName { name: Symbol::intern(&self.result).as_interned_str() }\n     }\n \n     fn finish(mut self, hash: u64) -> String {"}, {"sha": "93dbba6e873a9d4f807e906dfd8008c2f1335a93", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -101,7 +101,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_str()\n+            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_interned_str()\n         };\n \n         let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n@@ -981,7 +981,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n-                tcx.mk_param(index, tcx.hir.name(node_id).as_str())\n+                tcx.mk_param(index, tcx.hir.name(node_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type)."}, {"sha": "91264849cadf85f41f6930da4045cb23c54e89b1", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -732,8 +732,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         if impl_ty.synthetic != trait_ty.synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);\n-            let trait_node_id = tcx.hir.as_local_node_id(trait_ty.def_id).unwrap();\n-            let trait_span = tcx.hir.span(trait_node_id);\n+            let trait_span = tcx.def_span(trait_ty.def_id);\n             let mut err = struct_span_err!(tcx.sess,\n                                            impl_span,\n                                            E0643,"}, {"sha": "fcf7541a159b02388449edd83fb53f0e0465d162", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -76,7 +76,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_str());\n+    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n     let name = it.name.as_str();\n     let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n         let split : Vec<&str> = name.split('_').collect();\n@@ -341,7 +341,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = Symbol::intern(&format!(\"P{}\", n)).as_str();\n+        let name = Symbol::intern(&format!(\"P{}\", n)).as_interned_str();\n         tcx.mk_param(n, name)\n     };\n "}, {"sha": "db859e42057e951999d34f480bf49d2abfaf7d09", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -124,7 +124,7 @@ use syntax::attr;\n use syntax::codemap::{original_sp, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, InternedString, keywords};\n+use syntax::symbol::{Symbol, LocalInternedString, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span, MultiSpan};\n \n@@ -3172,7 +3172,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &Spanned<ast::Name>,\n-                          skip: Vec<InternedString>)\n+                          skip: Vec<LocalInternedString>)\n                           -> Option<Symbol> {\n         let name = field.node.as_str();\n         let names = variant.fields.iter().filter_map(|field| {"}, {"sha": "d0ff44c8e7e10e65da9a3ad874edecb4ecdf7cb3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -655,7 +655,7 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n             // local so it should be okay to just unwrap everything.\n             let trait_def_id = impl_params[&method_param.name];\n             let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, &method_param.name[..]);\n+            error_194(tcx, type_span, trait_decl_span, &method_param.name.as_str()[..]);\n         }\n     }\n }"}, {"sha": "1b8f2e661c30d95ca827fe68a2af7ac987d69553", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -244,7 +244,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.type_param_to_index[&def_id];\n-    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_str());\n+    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_interned_str());\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -842,7 +842,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     opt_self = Some(ty::TypeParameterDef {\n                         index: 0,\n-                        name: keywords::SelfType.name().as_str(),\n+                        name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n@@ -888,7 +888,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n         ty::RegionParameterDef {\n-            name: l.lifetime.name.name().as_str(),\n+            name: l.lifetime.name.name().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n             pure_wrt_drop: l.pure_wrt_drop,\n@@ -918,7 +918,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         ty::TypeParameterDef {\n             index: type_start + i as u32,\n-            name: p.name.as_str(),\n+            name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n             has_default: p.default.is_some(),\n             object_lifetime_default:\n@@ -937,7 +937,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure kind\n         types.push(ty::TypeParameterDef {\n             index: type_start,\n-            name: Symbol::intern(\"<closure_kind>\").as_str(),\n+            name: Symbol::intern(\"<closure_kind>\").as_interned_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -948,7 +948,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure signature\n         types.push(ty::TypeParameterDef {\n             index: type_start + 1,\n-            name: Symbol::intern(\"<closure_signature>\").as_str(),\n+            name: Symbol::intern(\"<closure_signature>\").as_interned_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -959,7 +959,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.with_freevars(node_id, |fv| {\n             types.extend(fv.iter().zip(2..).map(|(_, i)| ty::TypeParameterDef {\n                 index: type_start + i,\n-                name: Symbol::intern(\"<upvar>\").as_str(),\n+                name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                 def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n@@ -1429,7 +1429,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n             index,\n-            name: param.lifetime.name.name().as_str(),\n+            name: param.lifetime.name.name().as_interned_str(),\n         }));\n         index += 1;\n \n@@ -1443,7 +1443,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T:Foo>`).\n     for param in ast_generics.ty_params() {\n-        let param_ty = ty::ParamTy::new(index, param.name.as_str()).to_ty(tcx);\n+        let param_ty = ty::ParamTy::new(index, param.name.as_interned_str()).to_ty(tcx);\n         index += 1;\n \n         let bounds = compute_bounds(&icx,"}, {"sha": "221fc4dab723253d0c34a364001d14e077106cd0", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     let name = if p.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {\n-                        hir::LifetimeName::Name(Symbol::intern(&p.name))\n+                        hir::LifetimeName::Name(p.name.as_symbol())\n                     };\n \n                     hir::Lifetime {\n@@ -261,7 +261,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     span: DUMMY_SP,\n                     def: Def::TyParam(param.def_id),\n                     segments: HirVec::from_vec(vec![\n-                        hir::PathSegment::from_name(Symbol::intern(&param.name))\n+                        hir::PathSegment::from_name(param.name.as_symbol())\n                     ]),\n                 }),\n             )),"}, {"sha": "6623d5ab3c2c2176067e4cf3e1dd80b568ccd27a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1367,7 +1367,7 @@ impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, &cx.tcx.item_name(did),\n+        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id),\n+        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n                                  Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n@@ -2801,7 +2801,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, &cx.tcx.item_name(did),\n+                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n@@ -2812,7 +2812,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             }\n             ty::TyForeign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n-                let path = external_path(cx, &cx.tcx.item_name(did),\n+                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], Substs::empty());\n                 ResolvedPath {\n                     path: path,\n@@ -2830,7 +2830,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     reg.clean(cx).map(|b| typarams.push(RegionBound(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n-                        let path = external_path(cx, &cx.tcx.item_name(did),\n+                        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                             Some(did), false, vec![], empty);\n                         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                         let bound = TraitBound(PolyTrait {\n@@ -2853,7 +2853,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         });\n                     }\n \n-                    let path = external_path(cx, &cx.tcx.item_name(did), Some(did),\n+                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n                         false, bindings, principal.skip_binder().substs);\n                     ResolvedPath {\n                         path,"}, {"sha": "4e9781cc56080c3972e87a93d91f346b1ea5e0ce", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1595,6 +1595,8 @@ impl<'a> Settings<'a> {\n             settings: vec![\n                 (\"item-declarations\", \"Auto-hide item declarations.\", true),\n                 (\"item-attributes\", \"Auto-hide item attributes.\", true),\n+                (\"go-to-only-result\", \"Directly go to item in search if there is only one result\",\n+                 false),\n             ],\n             root_path,\n             suffix,"}, {"sha": "bcad2eb19f57496aa401e6e81044d7fb0a4b4330", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 57, "deletions": 31, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -1013,7 +1013,8 @@\n                 'returned': sortResults(results_returned, true),\n                 'others': sortResults(results),\n             };\n-            if (ALIASES[window.currentCrate][query.raw]) {\n+            if (ALIASES && ALIASES[window.currentCrate] &&\n+                    ALIASES[window.currentCrate][query.raw]) {\n                 var aliases = ALIASES[window.currentCrate][query.raw];\n                 for (var i = 0; i < aliases.length; ++i) {\n                     ret['others'].unshift(aliases[i]);\n@@ -1188,6 +1189,44 @@\n             return '<span>' + path.replace(/::/g, '::</span><span>');\n         }\n \n+        function buildHrefAndPath(item) {\n+            var displayPath;\n+            var href;\n+            var type = itemTypes[item.ty];\n+            var name = item.name;\n+\n+            if (type === 'mod') {\n+                displayPath = item.path + '::';\n+                href = rootPath + item.path.replace(/::/g, '/') + '/' +\n+                       name + '/index.html';\n+            } else if (type === \"primitive\") {\n+                displayPath = \"\";\n+                href = rootPath + item.path.replace(/::/g, '/') +\n+                       '/' + type + '.' + name + '.html';\n+            } else if (type === \"externcrate\") {\n+                displayPath = \"\";\n+                href = rootPath + name + '/index.html';\n+            } else if (item.parent !== undefined) {\n+                var myparent = item.parent;\n+                var anchor = '#' + type + '.' + name;\n+                var parentType = itemTypes[myparent.ty];\n+                if (parentType === \"primitive\") {\n+                    displayPath = myparent.name + '::';\n+                } else {\n+                    displayPath = item.path + '::' + myparent.name + '::';\n+                }\n+                href = rootPath + item.path.replace(/::/g, '/') +\n+                       '/' + parentType +\n+                       '.' + myparent.name +\n+                       '.html' + anchor;\n+            } else {\n+                displayPath = item.path + '::';\n+                href = rootPath + item.path.replace(/::/g, '/') +\n+                       '/' + type + '.' + name + '.html';\n+            }\n+            return [displayPath, href];\n+        }\n+\n         function addTab(array, query, display) {\n             var extraStyle = '';\n             if (display === false) {\n@@ -1211,35 +1250,9 @@\n                     name = item.name;\n                     type = itemTypes[item.ty];\n \n-                    if (type === 'mod') {\n-                        displayPath = item.path + '::';\n-                        href = rootPath + item.path.replace(/::/g, '/') + '/' +\n-                               name + '/index.html';\n-                    } else if (type === \"primitive\") {\n-                        displayPath = \"\";\n-                        href = rootPath + item.path.replace(/::/g, '/') +\n-                               '/' + type + '.' + name + '.html';\n-                    } else if (type === \"externcrate\") {\n-                        displayPath = \"\";\n-                        href = rootPath + name + '/index.html';\n-                    } else if (item.parent !== undefined) {\n-                        var myparent = item.parent;\n-                        var anchor = '#' + type + '.' + name;\n-                        var parentType = itemTypes[myparent.ty];\n-                        if (parentType === \"primitive\") {\n-                            displayPath = myparent.name + '::';\n-                        } else {\n-                            displayPath = item.path + '::' + myparent.name + '::';\n-                        }\n-                        href = rootPath + item.path.replace(/::/g, '/') +\n-                               '/' + parentType +\n-                               '.' + myparent.name +\n-                               '.html' + anchor;\n-                    } else {\n-                        displayPath = item.path + '::';\n-                        href = rootPath + item.path.replace(/::/g, '/') +\n-                               '/' + type + '.' + name + '.html';\n-                    }\n+                    var res = buildHrefAndPath(item);\n+                    var href = res[1];\n+                    var displayPath = res[0];\n \n                     output += '<tr class=\"' + type + ' result\"><td>' +\n                               '<a href=\"' + href + '\">' +\n@@ -1268,6 +1281,16 @@\n         }\n \n         function showResults(results) {\n+            if (results['others'].length === 1 &&\n+                getCurrentValue('rustdoc-go-to-only-result') === \"true\") {\n+                var elem = document.createElement('a');\n+                var res = buildHrefAndPath(results['others'][0]);\n+                elem.href = res[1];\n+                elem.style.display = 'none';\n+                // For firefox, we need the element to be in the DOM so it can be clicked.\n+                document.body.appendChild(elem);\n+                elem.click();\n+            }\n             var output, query = getQuery(search_input.value);\n \n             currentResults = query.id;\n@@ -1721,6 +1744,9 @@\n \n     function toggleAllDocs(pageId) {\n         var toggle = document.getElementById(\"toggle-all-docs\");\n+        if (!toggle) {\n+            return;\n+        }\n         if (hasClass(toggle, \"will-expand\")) {\n             updateLocalStorage(\"rustdoc-collapse\", \"false\");\n             removeClass(toggle, \"will-expand\");\n@@ -1977,7 +2003,7 @@\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }\n         }\n-    })\n+    });\n \n     autoCollapseAllImpls(getPageId());\n "}, {"sha": "4a8b1e8b1c1e46edb8569c04006a1258a9be7b0a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 164, "deletions": 28, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -18,6 +18,7 @@ use {Span, DUMMY_SP, GLOBALS};\n use rustc_data_structures::fx::FxHashMap;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n+use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n #[derive(Copy, Clone, Eq)]\n@@ -36,6 +37,11 @@ impl Ident {\n         Ident::new(name, DUMMY_SP)\n     }\n \n+    /// Maps an interned string to an identifier with an empty syntax context.\n+    pub fn from_interned_str(string: InternedString) -> Ident {\n+        Ident::with_empty_ctxt(string.as_symbol())\n+    }\n+\n     /// Maps a string to an identifier with an empty syntax context.\n     pub fn from_str(string: &str) -> Ident {\n         Ident::with_empty_ctxt(Symbol::intern(string))\n@@ -138,14 +144,20 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n-    pub fn as_str(self) -> InternedString {\n+    pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n-            InternedString {\n+            LocalInternedString {\n                 string: ::std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n     }\n \n+    pub fn as_interned_str(self) -> InternedString {\n+        with_interner(|interner| InternedString {\n+            symbol: interner.interned(self)\n+        })\n+    }\n+\n     pub fn as_u32(self) -> u32 {\n         self.0\n     }\n@@ -365,84 +377,208 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// Represents a string stored in the thread-local interner. Because the\n-/// interner lives for the life of the thread, this can be safely treated as an\n-/// immortal string, as long as it never crosses between threads.\n-///\n-/// FIXME(pcwalton): You must be careful about what you do in the destructors\n-/// of objects stored in TLS, because they may run after the interner is\n-/// destroyed. In particular, they must not access string contents. This can\n-/// be fixed in the future by just leaking all strings until thread death\n-/// somehow.\n+/// Represents a string stored in the interner. Because the interner outlives any thread\n+/// which uses this type, we can safely treat `string` which points to interner data,\n+/// as an immortal string, as long as this type never crosses between threads.\n+// FIXME: Ensure that the interner outlives any thread which uses LocalInternedString,\n+//        by creating a new thread right after constructing the interner\n #[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n-pub struct InternedString {\n+pub struct LocalInternedString {\n     string: &'static str,\n }\n \n-impl<U: ?Sized> ::std::convert::AsRef<U> for InternedString where str: ::std::convert::AsRef<U> {\n+impl LocalInternedString {\n+    pub fn as_interned_str(self) -> InternedString {\n+        InternedString {\n+            symbol: Symbol::intern(self.string)\n+        }\n+    }\n+}\n+\n+impl<U: ?Sized> ::std::convert::AsRef<U> for LocalInternedString\n+where\n+    str: ::std::convert::AsRef<U>\n+{\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for InternedString {\n+impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for LocalInternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl ::std::cmp::PartialEq<InternedString> for str {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl ::std::cmp::PartialEq<LocalInternedString> for str {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<InternedString> for &'a str {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a str {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl ::std::cmp::PartialEq<InternedString> for String {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl ::std::cmp::PartialEq<LocalInternedString> for String {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<InternedString> for &'a String {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl !Send for InternedString { }\n+impl !Send for LocalInternedString {}\n+impl !Sync for LocalInternedString {}\n \n-impl ::std::ops::Deref for InternedString {\n+impl ::std::ops::Deref for LocalInternedString {\n     type Target = str;\n     fn deref(&self) -> &str { self.string }\n }\n \n-impl fmt::Debug for InternedString {\n+impl fmt::Debug for LocalInternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n-impl fmt::Display for InternedString {\n+impl fmt::Display for LocalInternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n \n+impl Decodable for LocalInternedString {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n+        Ok(Symbol::intern(&d.read_str()?).as_str())\n+    }\n+}\n+\n+impl Encodable for LocalInternedString {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_str(self.string)\n+    }\n+}\n+\n+/// Represents a string stored in the string interner\n+#[derive(Clone, Copy, Eq)]\n+pub struct InternedString {\n+    symbol: Symbol,\n+}\n+\n+impl InternedString {\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        let str = with_interner(|interner| {\n+            interner.get(self.symbol) as *const str\n+        });\n+        // This is safe because the interner keeps string alive until it is dropped.\n+        // We can access it because we know the interner is still alive since we use a\n+        // scoped thread local to access it, and it was alive at the begining of this scope\n+        unsafe { f(&*str) }\n+    }\n+\n+    pub fn as_symbol(self) -> Symbol {\n+        self.symbol\n+    }\n+\n+    pub fn as_str(self) -> LocalInternedString {\n+        self.symbol.as_str()\n+    }\n+}\n+\n+impl Hash for InternedString {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.with(|str| str.hash(state))\n+    }\n+}\n+\n+impl PartialOrd<InternedString> for InternedString {\n+    fn partial_cmp(&self, other: &InternedString) -> Option<Ordering> {\n+        if self.symbol == other.symbol {\n+            return Some(Ordering::Equal);\n+        }\n+        self.with(|self_str| other.with(|other_str| self_str.partial_cmp(&other_str)))\n+    }\n+}\n+\n+impl Ord for InternedString {\n+    fn cmp(&self, other: &InternedString) -> Ordering {\n+        if self.symbol == other.symbol {\n+            return Ordering::Equal;\n+        }\n+        self.with(|self_str| other.with(|other_str| self_str.cmp(&other_str)))\n+    }\n+}\n+\n+impl<T: ::std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n+    fn eq(&self, other: &T) -> bool {\n+        self.with(|string| string == other.deref())\n+    }\n+}\n+\n+impl PartialEq<InternedString> for InternedString {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        self.symbol == other.symbol\n+    }\n+}\n+\n+impl PartialEq<InternedString> for str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| self == string)\n+    }\n+}\n+\n+impl<'a> PartialEq<InternedString> for &'a str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| *self == string)\n+    }\n+}\n+\n+impl PartialEq<InternedString> for String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| self == string)\n+    }\n+}\n+\n+impl<'a> PartialEq<InternedString> for &'a String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| *self == string)\n+    }\n+}\n+\n+impl ::std::convert::From<InternedString> for String {\n+    fn from(val: InternedString) -> String {\n+        val.as_symbol().to_string()\n+    }\n+}\n+\n+impl fmt::Debug for InternedString {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.with(|str| fmt::Debug::fmt(&str, f))\n+    }\n+}\n+\n+impl fmt::Display for InternedString {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.with(|str| fmt::Display::fmt(&str, f))\n+    }\n+}\n+\n impl Decodable for InternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(Symbol::intern(&d.read_str()?).as_str())\n+        Ok(Symbol::intern(&d.read_str()?).as_interned_str())\n     }\n }\n \n impl Encodable for InternedString {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self.string)\n+        self.with(|string| s.emit_str(string))\n     }\n }\n "}, {"sha": "a5ad2b315a1dd629d4e4000ca2720e8bb5176740", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-04-04\n+date: 2018-04-24\n rustc: beta\n cargo: beta\n "}, {"sha": "d6707f590113ce5e464edd019ca0b55225d610e1", "filename": "src/test/compile-fail/impl-trait/impl-generic-mismatch.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=ada45fd49a2dfcf2a163e1f4641ac34f2803eb9b", "patch": "@@ -28,4 +28,15 @@ impl Bar for () {\n     //~^ Error method `bar` has incompatible signature for trait\n }\n \n+// With non-local trait (#49841):\n+\n+use std::hash::{Hash, Hasher};\n+\n+struct X;\n+\n+impl Hash for X {\n+    fn hash(&self, hasher: &mut impl Hasher) {}\n+    //~^ Error method `hash` has incompatible signature for trait\n+}\n+\n fn main() {}"}]}