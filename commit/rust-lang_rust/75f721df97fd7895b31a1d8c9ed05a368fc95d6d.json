{"sha": "75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZjcyMWRmOTdmZDc4OTViMzFhMWQ4YzllZDA1YTM2OGZjOTVkNmQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-12-14T16:06:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-19T19:28:47Z"}, "message": "Move VecDeque Drain iterator to new file", "tree": {"sha": "81653be2544a1df71dfe42a209a166d2d7850a68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81653be2544a1df71dfe42a209a166d2d7850a68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "html_url": "https://github.com/rust-lang/rust/commit/75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f721df97fd7895b31a1d8c9ed05a368fc95d6d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f373f4aeb279c6bf98976aee419db967c4f56f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f373f4aeb279c6bf98976aee419db967c4f56f6", "html_url": "https://github.com/rust-lang/rust/commit/1f373f4aeb279c6bf98976aee419db967c4f56f6"}], "stats": {"total": 252, "additions": 131, "deletions": 121}, "files": [{"sha": "85d1d98b8a9c23bfb3b908baeb7f7f78d99f481c", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 5, "deletions": 121, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/75f721df97fd7895b31a1d8c9ed05a368fc95d6d/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f721df97fd7895b31a1d8c9ed05a368fc95d6d/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "patch": "@@ -22,6 +22,11 @@ use crate::collections::TryReserveError;\n use crate::raw_vec::RawVec;\n use crate::vec::Vec;\n \n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+pub use self::drain::Drain;\n+\n+mod drain;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -2541,127 +2546,6 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// A draining iterator over the elements of a `VecDeque`.\n-///\n-/// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n-/// documentation for more.\n-///\n-/// [`drain`]: struct.VecDeque.html#method.drain\n-/// [`VecDeque`]: struct.VecDeque.html\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-pub struct Drain<'a, T: 'a> {\n-    after_tail: usize,\n-    after_head: usize,\n-    iter: Iter<'a, T>,\n-    deque: NonNull<VecDeque<T>>,\n-}\n-\n-#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_tuple(\"Drain\")\n-            .field(&self.after_tail)\n-            .field(&self.after_head)\n-            .field(&self.iter)\n-            .finish()\n-    }\n-}\n-\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<T: Send> Send for Drain<'_, T> {}\n-\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> Drop for Drain<'_, T> {\n-    fn drop(&mut self) {\n-        struct DropGuard<'r, 'a, T>(&'r mut Drain<'a, T>);\n-\n-        impl<'r, 'a, T> Drop for DropGuard<'r, 'a, T> {\n-            fn drop(&mut self) {\n-                self.0.for_each(drop);\n-\n-                let source_deque = unsafe { self.0.deque.as_mut() };\n-\n-                // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n-                //\n-                //        T   t   h   H\n-                // [. . . o o x x o o . . .]\n-                //\n-                let orig_tail = source_deque.tail;\n-                let drain_tail = source_deque.head;\n-                let drain_head = self.0.after_tail;\n-                let orig_head = self.0.after_head;\n-\n-                let tail_len = count(orig_tail, drain_tail, source_deque.cap());\n-                let head_len = count(drain_head, orig_head, source_deque.cap());\n-\n-                // Restore the original head value\n-                source_deque.head = orig_head;\n-\n-                match (tail_len, head_len) {\n-                    (0, 0) => {\n-                        source_deque.head = 0;\n-                        source_deque.tail = 0;\n-                    }\n-                    (0, _) => {\n-                        source_deque.tail = drain_head;\n-                    }\n-                    (_, 0) => {\n-                        source_deque.head = drain_tail;\n-                    }\n-                    _ => unsafe {\n-                        if tail_len <= head_len {\n-                            source_deque.tail = source_deque.wrap_sub(drain_head, tail_len);\n-                            source_deque.wrap_copy(source_deque.tail, orig_tail, tail_len);\n-                        } else {\n-                            source_deque.head = source_deque.wrap_add(drain_tail, head_len);\n-                            source_deque.wrap_copy(drain_tail, drain_head, head_len);\n-                        }\n-                    },\n-                }\n-            }\n-        }\n-\n-        while let Some(item) = self.next() {\n-            let guard = DropGuard(self);\n-            drop(item);\n-            mem::forget(guard);\n-        }\n-\n-        DropGuard(self);\n-    }\n-}\n-\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> Iterator for Drain<'_, T> {\n-    type Item = T;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<T> {\n-        self.iter.next().map(|elt| unsafe { ptr::read(elt) })\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-}\n-\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> DoubleEndedIterator for Drain<'_, T> {\n-    #[inline]\n-    fn next_back(&mut self) -> Option<T> {\n-        self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n-    }\n-}\n-\n-#[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> ExactSizeIterator for Drain<'_, T> {}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<T> FusedIterator for Drain<'_, T> {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialEq> PartialEq for VecDeque<A> {\n     fn eq(&self, other: &VecDeque<A>) -> bool {"}, {"sha": "1ae94de75adb7174f076a4cb61b10260089c142a", "filename": "src/liballoc/collections/vec_deque/drain.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/75f721df97fd7895b31a1d8c9ed05a368fc95d6d/src%2Fliballoc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f721df97fd7895b31a1d8c9ed05a368fc95d6d/src%2Fliballoc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=75f721df97fd7895b31a1d8c9ed05a368fc95d6d", "patch": "@@ -0,0 +1,126 @@\n+use core::iter::FusedIterator;\n+use core::ptr::{self, NonNull};\n+use core::{fmt, mem};\n+\n+use super::{count, Iter, VecDeque};\n+\n+/// A draining iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.VecDeque.html#method.drain\n+/// [`VecDeque`]: struct.VecDeque.html\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+pub struct Drain<'a, T: 'a> {\n+    pub(crate) after_tail: usize,\n+    pub(crate) after_head: usize,\n+    pub(crate) iter: Iter<'a, T>,\n+    pub(crate) deque: NonNull<VecDeque<T>>,\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"Drain\")\n+            .field(&self.after_tail)\n+            .field(&self.after_head)\n+            .field(&self.iter)\n+            .finish()\n+    }\n+}\n+\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+unsafe impl<T: Send> Send for Drain<'_, T> {}\n+\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+impl<T> Drop for Drain<'_, T> {\n+    fn drop(&mut self) {\n+        struct DropGuard<'r, 'a, T>(&'r mut Drain<'a, T>);\n+\n+        impl<'r, 'a, T> Drop for DropGuard<'r, 'a, T> {\n+            fn drop(&mut self) {\n+                self.0.for_each(drop);\n+\n+                let source_deque = unsafe { self.0.deque.as_mut() };\n+\n+                // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n+                //\n+                //        T   t   h   H\n+                // [. . . o o x x o o . . .]\n+                //\n+                let orig_tail = source_deque.tail;\n+                let drain_tail = source_deque.head;\n+                let drain_head = self.0.after_tail;\n+                let orig_head = self.0.after_head;\n+\n+                let tail_len = count(orig_tail, drain_tail, source_deque.cap());\n+                let head_len = count(drain_head, orig_head, source_deque.cap());\n+\n+                // Restore the original head value\n+                source_deque.head = orig_head;\n+\n+                match (tail_len, head_len) {\n+                    (0, 0) => {\n+                        source_deque.head = 0;\n+                        source_deque.tail = 0;\n+                    }\n+                    (0, _) => {\n+                        source_deque.tail = drain_head;\n+                    }\n+                    (_, 0) => {\n+                        source_deque.head = drain_tail;\n+                    }\n+                    _ => unsafe {\n+                        if tail_len <= head_len {\n+                            source_deque.tail = source_deque.wrap_sub(drain_head, tail_len);\n+                            source_deque.wrap_copy(source_deque.tail, orig_tail, tail_len);\n+                        } else {\n+                            source_deque.head = source_deque.wrap_add(drain_tail, head_len);\n+                            source_deque.wrap_copy(drain_tail, drain_head, head_len);\n+                        }\n+                    },\n+                }\n+            }\n+        }\n+\n+        while let Some(item) = self.next() {\n+            let guard = DropGuard(self);\n+            drop(item);\n+            mem::forget(guard);\n+        }\n+\n+        DropGuard(self);\n+    }\n+}\n+\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+impl<T> Iterator for Drain<'_, T> {\n+    type Item = T;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<T> {\n+        self.iter.next().map(|elt| unsafe { ptr::read(elt) })\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+impl<T> DoubleEndedIterator for Drain<'_, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<T> {\n+        self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n+    }\n+}\n+\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n+impl<T> ExactSizeIterator for Drain<'_, T> {}\n+\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<T> FusedIterator for Drain<'_, T> {}"}]}