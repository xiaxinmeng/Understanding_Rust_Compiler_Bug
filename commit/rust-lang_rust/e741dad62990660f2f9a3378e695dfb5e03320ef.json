{"sha": "e741dad62990660f2f9a3378e695dfb5e03320ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NDFkYWQ2Mjk5MDY2MGYyZjlhMzM3OGU2OTVkZmI1ZTAzMzIwZWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-23T13:05:58Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-12-19T18:37:10Z"}, "message": "adding lint for single use lifetime names", "tree": {"sha": "4086765e046740f57a69477f9b74a3e42be23d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4086765e046740f57a69477f9b74a3e42be23d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e741dad62990660f2f9a3378e695dfb5e03320ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e741dad62990660f2f9a3378e695dfb5e03320ef", "html_url": "https://github.com/rust-lang/rust/commit/e741dad62990660f2f9a3378e695dfb5e03320ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e741dad62990660f2f9a3378e695dfb5e03320ef/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a02a919c5109c55c652dd6671553df6452be04", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a02a919c5109c55c652dd6671553df6452be04", "html_url": "https://github.com/rust-lang/rust/commit/75a02a919c5109c55c652dd6671553df6452be04"}], "stats": {"total": 273, "additions": 258, "deletions": 15}, "files": [{"sha": "de0bd9d02959760f230305e8dd784cd18ec2bd1c", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -234,6 +234,12 @@ declare_lint! {\n     \"detect coercion to !\"\n }\n \n+declare_lint! {\n+    pub SINGLE_USE_LIFETIME,\n+    Allow,\n+   \"detects single use lifetimes\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -277,7 +283,8 @@ impl LintPass for HardwiredLints {\n             DEPRECATED,\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n-            COERCE_NEVER\n+            COERCE_NEVER,\n+            SINGLE_USE_LIFETIME\n         )\n     }\n }"}, {"sha": "dfa739e69ca7d0f8125f4697cc257976102ef283", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -31,6 +31,7 @@ use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n use std::slice;\n+use rustc::lint;\n \n use hir;\n use hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -56,6 +57,13 @@ impl LifetimeDefOrigin {\n     }\n }\n \n+// This counts the no of times a lifetime is used\n+#[derive(Clone, Copy, Debug)]\n+pub enum LifetimeUseSet<'tcx> {\n+    One(&'tcx hir::Lifetime),\n+    Many,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum Region {\n     Static,\n@@ -245,6 +253,8 @@ struct LifetimeContext<'a, 'tcx: 'a> {\n \n     // Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n+\n+    lifetime_uses: DefIdMap<LifetimeUseSet<'tcx>>,\n }\n \n #[derive(Debug)]\n@@ -407,6 +417,7 @@ fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {\n             is_in_fn_syntax: false,\n             labels_in_fn: vec![],\n             xcrate_object_lifetime_defaults: DefIdMap(),\n+            lifetime_uses: DefIdMap(),\n         };\n         for (_, item) in &krate.items {\n             visitor.visit_item(item);\n@@ -443,8 +454,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             hir::ItemFn(ref decl, _, _, _, ref generics, _) => {\n-                self.visit_early_late(None, decl, generics, |this| {\n-                    intravisit::walk_item(this, item);\n+                self.visit_early_late(None,\n+                                      decl,\n+                                      generics,\n+                                      |this| {\n+                                          intravisit::walk_item(this, item);\n                 });\n             }\n             hir::ItemExternCrate(_)\n@@ -498,9 +512,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n         match item.node {\n             hir::ForeignItemFn(ref decl, _, ref generics) => {\n-                self.visit_early_late(None, decl, generics, |this| {\n-                    intravisit::walk_foreign_item(this, item);\n-                })\n+                self.visit_early_late(None,\n+                                      decl,\n+                                      generics,\n+                                      |this| {\n+                                          intravisit::walk_foreign_item(this, item);\n+                                      })\n             }\n             hir::ForeignItemStatic(..) => {\n                 intravisit::walk_foreign_item(self, item);\n@@ -1142,12 +1159,41 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             is_in_fn_syntax: self.is_in_fn_syntax,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n+            lifetime_uses: DefIdMap(),\n         };\n         debug!(\"entering scope {:?}\", this.scope);\n         f(self.scope, &mut this);\n         debug!(\"exiting scope {:?}\", this.scope);\n         self.labels_in_fn = this.labels_in_fn;\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n+\n+        for (def_id, lifetimeuseset) in &this.lifetime_uses {\n+            match lifetimeuseset {\n+                &LifetimeUseSet::One(_) => {\n+                    let node_id = this.tcx.hir.as_local_node_id(*def_id).unwrap();\n+                    debug!(\"node id first={:?}\", node_id);\n+                    if let hir::map::NodeLifetime(hir_lifetime) = this.tcx.hir.get(node_id) {\n+                        let span = hir_lifetime.span;\n+                        let id = hir_lifetime.id;\n+                        debug!(\"id ={:?} span = {:?} hir_lifetime = {:?}\",\n+                            node_id,\n+                            span,\n+                            hir_lifetime);\n+\n+                        this.tcx\n+                            .struct_span_lint_node(lint::builtin::SINGLE_USE_LIFETIME,\n+                                                   id,\n+                                                   span,\n+                                                   &format!(\"lifetime name `{}` only used once\",\n+                                                   hir_lifetime.name.name()))\n+                            .emit();\n+                    }\n+                }\n+                _ => {\n+                    debug!(\"Not one use lifetime\");\n+                }\n+            }\n+        }\n     }\n \n     /// Visits self by adding a scope and handling recursive walk over the contents with `walk`.\n@@ -1239,9 +1285,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_lifetime_ref(&mut self, lifetime_ref: &hir::Lifetime) {\n+    fn resolve_lifetime_ref(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         debug!(\"resolve_lifetime_ref(lifetime_ref={:?})\", lifetime_ref);\n-\n         // Walk up the scope chain, tracking the number of fn scopes\n         // that we pass through, until we find a lifetime with the\n         // given name or we run out of scopes.\n@@ -1533,8 +1578,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             // Foreign functions, `fn(...) -> R` and `Trait(...) -> R` (both types and bounds).\n-            hir::map::NodeForeignItem(_) | hir::map::NodeTy(_) | hir::map::NodeTraitRef(_) => None,\n-\n+            hir::map::NodeForeignItem(_) | hir::map::NodeTy(_) | hir::map::NodeTraitRef(_) =>\n+                None,\n             // Everything else (only closures?) doesn't\n             // actually enjoy elision in return types.\n             _ => {\n@@ -1710,7 +1755,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_elided_lifetimes(&mut self, lifetime_refs: &[hir::Lifetime]) {\n+    fn resolve_elided_lifetimes(&mut self, lifetime_refs: &'tcx [hir::Lifetime]) {\n         if lifetime_refs.is_empty() {\n             return;\n         }\n@@ -1865,7 +1910,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_object_lifetime_default(&mut self, lifetime_ref: &hir::Lifetime) {\n+    fn resolve_object_lifetime_default(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n         let lifetime = loop {\n@@ -1887,7 +1932,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.insert_lifetime(lifetime_ref, lifetime.shifted(late_depth));\n     }\n \n-    fn check_lifetime_defs(&mut self, old_scope: ScopeRef, lifetimes: &[hir::LifetimeDef]) {\n+    fn check_lifetime_defs(&mut self, old_scope: ScopeRef, lifetimes: &'tcx [hir::LifetimeDef]) {\n         for i in 0..lifetimes.len() {\n             let lifetime_i = &lifetimes[i];\n \n@@ -1971,7 +2016,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn check_lifetime_def_for_shadowing(&self, mut old_scope: ScopeRef, lifetime: &hir::Lifetime) {\n+    fn check_lifetime_def_for_shadowing(&self,\n+                                        mut old_scope: ScopeRef,\n+                                        lifetime: &'tcx hir::Lifetime) {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n             if lifetime.name.name() == label {\n@@ -2020,7 +2067,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn insert_lifetime(&mut self, lifetime_ref: &hir::Lifetime, def: Region) {\n+    fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         if lifetime_ref.id == ast::DUMMY_NODE_ID {\n             span_bug!(\n                 lifetime_ref.span,\n@@ -2036,6 +2083,25 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             self.tcx.sess.codemap().span_to_string(lifetime_ref.span)\n         );\n         self.map.defs.insert(lifetime_ref.id, def);\n+\n+        match def {\n+            Region::LateBoundAnon(..) |\n+            Region::Static => {\n+                // These are anonymous lifetimes or lifetimes that are not declared.\n+            }\n+\n+            Region::Free(_, def_id) |\n+            Region::LateBound(_, def_id, _) |\n+            Region::EarlyBound(_, def_id, _) => {\n+                // A lifetime declared by the user.\n+                if !self.lifetime_uses.contains_key(&def_id) {\n+                    self.lifetime_uses\n+                        .insert(def_id, LifetimeUseSet::One(lifetime_ref));\n+                } else {\n+                    self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "005f1f033b6eb16bc9388cdae8d09448ddbf4237", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(single_use_lifetime)]\n+// FIXME(#44752) -- this scenario should not be warned\n+fn deref<'x>() -> &'x u32 { //~ ERROR lifetime name `'x` only used once\n+    22\n+}\n+\n+fn main() { }"}, {"sha": "a90add79b76aad5b1bcbe926a93374ca2ada7a33", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes-2.rs:12:10\n+   |\n+12 | fn deref<'x>() -> &'x u32 { //~ ERROR lifetime name `'x` only used once\n+   |          ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/single_use_lifetimes-2.rs:10:9\n+   |\n+10 | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "263548ca7f4dd41fb81b75df24a92db14c5e3a32", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(single_use_lifetime)]\n+struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+    x: &'x u32 // no warning!\n+}\n+\n+// Once #44524 is fixed, this should issue a warning.\n+impl<'y> Foo<'y> { //~ ERROR lifetime name `'y` only used once\n+    fn method() { }\n+}\n+\n+fn main() { }"}, {"sha": "8595ce5effb7829a8ab198f86534be10d50658cd", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-3.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes-3.rs:11:12\n+   |\n+11 | struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+   |            ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/single_use_lifetimes-3.rs:10:9\n+   |\n+10 | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime name `'y` only used once\n+  --> $DIR/single_use_lifetimes-3.rs:16:6\n+   |\n+16 | impl<'y> Foo<'y> { //~ ERROR lifetime name `'y` only used once\n+   |      ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ead987a09ab97e33f8851f6ac479ce78a0dc5883", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-4.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(single_use_lifetime)]\n+ // Neither should issue a warning, as explicit lifetimes are mandatory in this case\n+struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+    x: &'x u32\n+}\n+\n+enum Bar<'x> { //~ ERROR lifetime name `'x` only used once\n+    Variant(&'x u32)\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "1b952c8db09d769ac891defdf02c3d6698f74d28", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-4.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes-4.rs:12:12\n+   |\n+12 | struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+   |            ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/single_use_lifetimes-4.rs:10:9\n+   |\n+10 | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes-4.rs:16:10\n+   |\n+16 | enum Bar<'x> { //~ ERROR lifetime name `'x` only used once\n+   |          ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "cef904c48962c9b9f7b03ce97f8f8a6796ba6c01", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-5.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(single_use_lifetime)]\n+// Should not issue a warning, as explicit lifetimes are mandatory in this case:\n+trait Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+    fn foo(&self, arg: &'x u32);\n+}\n+\n+fn main() { }"}, {"sha": "59e1254836ba97a30288e405680e6095ba3d49c2", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-5.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes-5.rs:12:11\n+   |\n+12 | trait Foo<'x> { //~ ERROR lifetime name `'x` only used once\n+   |           ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/single_use_lifetimes-5.rs:10:9\n+   |\n+10 | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "96aaf8923f1404d552cb458e8a0207346408e818", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(single_use_lifetime)]\n+\n+fn deref<'x>(v: &'x u32) -> u32 { //~ ERROR lifetime name `'x` only used once\n+    *v\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "bdcce1f22eceea9b7520cdc42d24918356125d70", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e741dad62990660f2f9a3378e695dfb5e03320ef/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr?ref=e741dad62990660f2f9a3378e695dfb5e03320ef", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime name `'x` only used once\n+  --> $DIR/single_use_lifetimes.rs:12:10\n+   |\n+12 | fn deref<'x>(v: &'x u32) -> u32 { //~ ERROR lifetime name `'x` only used once\n+   |          ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/single_use_lifetimes.rs:10:9\n+   |\n+10 | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}