{"sha": "292de22276467bc786f38fd31b8bc1889f04efb4", "node_id": "C_kwDOAAsO6NoAKDI5MmRlMjIyNzY0NjdiYzc4NmYzOGZkMzFiOGJjMTg4OWYwNGVmYjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-05T23:50:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-10T21:30:26Z"}, "message": "Add a struct with an unsized field to the `deriving-all-codegen.rs` test.\n\nIt's an interesting case, requiring the use of `&&` in `Debug::fmt`.", "tree": {"sha": "05a000bbe10e6bd4e3e38b37db8d1345a9108cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a000bbe10e6bd4e3e38b37db8d1345a9108cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292de22276467bc786f38fd31b8bc1889f04efb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292de22276467bc786f38fd31b8bc1889f04efb4", "html_url": "https://github.com/rust-lang/rust/commit/292de22276467bc786f38fd31b8bc1889f04efb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292de22276467bc786f38fd31b8bc1889f04efb4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ff90b00ec443a73748f99952ba07372dce87ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ff90b00ec443a73748f99952ba07372dce87ae", "html_url": "https://github.com/rust-lang/rust/commit/c6ff90b00ec443a73748f99952ba07372dce87ae"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "157994c0d172421fc5b68f52deb8f7a7046722b1", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292de22276467bc786f38fd31b8bc1889f04efb4/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292de22276467bc786f38fd31b8bc1889f04efb4/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=292de22276467bc786f38fd31b8bc1889f04efb4", "patch": "@@ -31,9 +31,13 @@ struct Point {\n // A large struct.\n #[derive(Clone, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n struct Big {\n-    b1: u32, b2: u32, b3: u32, b4: u32, b5: u32, b6: u32, b7: u32, b8:u32,\n+    b1: u32, b2: u32, b3: u32, b4: u32, b5: u32, b6: u32, b7: u32, b8: u32,\n }\n \n+// A struct with an unsized field. Some derives are not usable in this case.\n+#[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+struct Unsized([u32]);\n+\n // A packed tuple struct.\n #[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n #[repr(packed)]"}, {"sha": "38c26f4942e01f92084747d3be1a7354a07d1aa9", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/292de22276467bc786f38fd31b8bc1889f04efb4/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/292de22276467bc786f38fd31b8bc1889f04efb4/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=292de22276467bc786f38fd31b8bc1889f04efb4", "patch": "@@ -367,6 +367,61 @@ impl ::core::cmp::Ord for Big {\n     }\n }\n \n+// A struct with an unsized field. Some derives are not usable in this case.\n+struct Unsized([u32]);\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for Unsized {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        ::core::fmt::Formatter::debug_tuple_field1_finish(f, \"Unsized\",\n+            &&self.0)\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for Unsized {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        ::core::hash::Hash::hash(&self.0, state)\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for Unsized {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for Unsized {\n+    #[inline]\n+    fn eq(&self, other: &Unsized) -> bool { self.0 == other.0 }\n+    #[inline]\n+    fn ne(&self, other: &Unsized) -> bool { self.0 != other.0 }\n+}\n+impl ::core::marker::StructuralEq for Unsized {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for Unsized {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () {\n+        let _: ::core::cmp::AssertParamIsEq<[u32]>;\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for Unsized {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Unsized)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for Unsized {\n+    #[inline]\n+    fn cmp(&self, other: &Unsized) -> ::core::cmp::Ordering {\n+        ::core::cmp::Ord::cmp(&self.0, &other.0)\n+    }\n+}\n+\n // A packed tuple struct.\n #[repr(packed)]\n struct Packed(u32);"}]}