{"sha": "d8d813c4ad7cb357f56636c0974147914e2b1311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDgxM2M0YWQ3Y2IzNTdmNTY2MzZjMDk3NDE0NzkxNGUyYjEzMTE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T11:12:33Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T11:22:59Z"}, "message": "Resolve associated constants.\n\nFixes #130.", "tree": {"sha": "aa1d013e1a0d3d6f22e21b3c28a92095818dacbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1d013e1a0d3d6f22e21b3c28a92095818dacbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d813c4ad7cb357f56636c0974147914e2b1311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d813c4ad7cb357f56636c0974147914e2b1311", "html_url": "https://github.com/rust-lang/rust/commit/d8d813c4ad7cb357f56636c0974147914e2b1311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d813c4ad7cb357f56636c0974147914e2b1311/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e248938793b213eeb1d725c298dc7b5cfd9cfb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e248938793b213eeb1d725c298dc7b5cfd9cfb8", "html_url": "https://github.com/rust-lang/rust/commit/9e248938793b213eeb1d725c298dc7b5cfd9cfb8"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "31c4915185da18633450976d3b9af6d1b8bb7b9b", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=d8d813c4ad7cb357f56636c0974147914e2b1311", "patch": "@@ -814,6 +814,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             // function items are zero sized\n                             Value::ByRef(self.memory.allocate(0, 0)?)\n                         } else {\n+                            let (def_id, substs) = self.resolve_associated_const(def_id, substs);\n                             let cid = GlobalId { def_id, substs, promoted: None };\n                             self.read_lvalue(Lvalue::Global(cid))\n                         }"}, {"sha": "f44a292f0ce82f787ae31a16d100c870ca567de6", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=d8d813c4ad7cb357f56636c0974147914e2b1311", "patch": "@@ -149,6 +149,7 @@ struct ConstantExtractor<'a, 'b: 'a, 'tcx: 'b> {\n \n impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n     fn global_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span, immutable: bool) {\n+        let (def_id, substs) = self.ecx.resolve_associated_const(def_id, substs);\n         let cid = GlobalId { def_id, substs, promoted: None };\n         if self.ecx.globals.contains_key(&cid) {\n             return;"}, {"sha": "a40e5a95542e9c7dbff937f08bcabdd89ad9ee7c", "filename": "src/traits.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d813c4ad7cb357f56636c0974147914e2b1311/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=d8d813c4ad7cb357f56636c0974147914e2b1311", "patch": "@@ -209,4 +209,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             fulfill_cx.select_all_or_error(&infcx).is_ok()\n         })\n     }\n+\n+    pub(crate) fn resolve_associated_const(\n+        &self,\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>,\n+    ) -> (DefId, &'tcx Substs<'tcx>) {\n+        if let Some(trait_id) = self.tcx.trait_of_item(def_id) {\n+            let trait_ref = ty::Binder(ty::TraitRef::new(trait_id, substs));\n+            let vtable = self.fulfill_obligation(trait_ref);\n+            if let traits::VtableImpl(vtable_impl) = vtable {\n+                let name = self.tcx.item_name(def_id);\n+                let assoc_const_opt = self.tcx.associated_items(vtable_impl.impl_def_id)\n+                    .find(|item| item.kind == ty::AssociatedKind::Const && item.name == name);\n+                if let Some(assoc_const) = assoc_const_opt {\n+                    return (assoc_const.def_id, vtable_impl.substs);\n+                }\n+            }\n+        }\n+        (def_id, substs)\n+    }\n }"}]}