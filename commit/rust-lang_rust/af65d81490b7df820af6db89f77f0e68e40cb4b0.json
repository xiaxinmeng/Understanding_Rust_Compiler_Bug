{"sha": "af65d81490b7df820af6db89f77f0e68e40cb4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjVkODE0OTBiN2RmODIwYWY2ZGI4OWY3N2YwZTY4ZTQwY2I0YjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-17T16:39:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-17T16:39:10Z"}, "message": "std: Revert addition of `into_ascii_*` methods\n\nThe addition of these methods in #31335 required adding impls of the trait for\nthe `String` and `Vec<T>` types. This unfortunately caused a regression (#32074)\nin type inference for using these methods which the libs team has decided to not\npush forward with. These methods were stabilized in #32020 which was intended to\nget backported to beta, but the backport hasn't happened just yet. This commit\nreverts both the addition and stabilization of these methods.\n\nOne proposed method of handling this, in #32076, was to move the methods to an\nextra trait to avoid conflicts with type inference. After some discussion,\nhowever, the libs team concluded that we probably want to reevaluate what we're\ndoing here, so discussion will continue on the tracking issue, #27809.", "tree": {"sha": "bc91f89d588ad922b399739b448f05622fe5f80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc91f89d588ad922b399739b448f05622fe5f80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af65d81490b7df820af6db89f77f0e68e40cb4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af65d81490b7df820af6db89f77f0e68e40cb4b0", "html_url": "https://github.com/rust-lang/rust/commit/af65d81490b7df820af6db89f77f0e68e40cb4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af65d81490b7df820af6db89f77f0e68e40cb4b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68d40edf49496e8d7a9ab03d75c9de2096446c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68d40edf49496e8d7a9ab03d75c9de2096446c5", "html_url": "https://github.com/rust-lang/rust/commit/e68d40edf49496e8d7a9ab03d75c9de2096446c5"}], "stats": {"total": 102, "additions": 0, "deletions": 102}, "files": [{"sha": "a8a3353da4c0027cfbcb989a04fdc1b323f789ff", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/af65d81490b7df820af6db89f77f0e68e40cb4b0/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af65d81490b7df820af6db89f77f0e68e40cb4b0/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=af65d81490b7df820af6db89f77f0e68e40cb4b0", "patch": "@@ -160,108 +160,6 @@ pub trait AsciiExt {\n     /// ```\n     #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_lowercase(&mut self);\n-\n-    /// Converts this type to its ASCII upper case,\n-    /// consuming the value to avoid allocating memory where `to_ascii_uppercase` would.\n-    ///\n-    /// See `to_ascii_uppercase` for more information.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n-    ///\n-    /// let ascii: String = \"a\".to_owned();\n-    ///\n-    /// let upper = ascii.into_ascii_uppercase();\n-    ///\n-    /// assert_eq!(upper, \"A\");\n-    /// ```\n-    #[stable(feature = \"into_ascii\", since = \"1.8.0\")]\n-    fn into_ascii_uppercase(self) -> Self::Owned where Self: Sized {\n-        self.to_ascii_uppercase()\n-    }\n-\n-    /// Converts this type to its ASCII lower case,\n-    /// consuming the value to avoid allocating memory where `to_ascii_lowercase` would.\n-    ///\n-    /// See `to_ascii_lowercase` for more information.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ascii::AsciiExt;\n-    ///\n-    /// let ascii: String = \"A\".to_owned();\n-    ///\n-    /// let lower = ascii.into_ascii_lowercase();\n-    ///\n-    /// assert_eq!(lower, \"a\");\n-    /// ```\n-    #[stable(feature = \"into_ascii\", since = \"1.8.0\")]\n-    fn into_ascii_lowercase(self) -> Self::Owned where Self: Sized {\n-        self.to_ascii_lowercase()\n-    }\n-}\n-\n-/// Implement `into_ascii_lowercase` and `into_ascii_uppercase` without memory allocation,\n-/// defer other methods to `str`.\n-#[stable(feature = \"into_ascii\", since = \"1.8.0\")]\n-impl AsciiExt for String {\n-    type Owned = Self;\n-\n-    #[inline] fn is_ascii(&self) -> bool { (**self).is_ascii() }\n-    #[inline] fn to_ascii_uppercase(&self) -> Self { (**self).to_ascii_uppercase() }\n-    #[inline] fn to_ascii_lowercase(&self) -> Self { (**self).to_ascii_lowercase() }\n-    #[inline] fn eq_ignore_ascii_case(&self, o: &Self) -> bool { (**self).eq_ignore_ascii_case(o) }\n-    #[inline] fn make_ascii_uppercase(&mut self) { (**self).make_ascii_uppercase() }\n-    #[inline] fn make_ascii_lowercase(&mut self) { (**self).make_ascii_lowercase() }\n-\n-    fn into_ascii_lowercase(mut self) -> Self {\n-        unsafe {\n-            for byte in self.as_mut_vec() {\n-                *byte = byte.to_ascii_lowercase()\n-            }\n-        }\n-        self\n-    }\n-\n-    fn into_ascii_uppercase(mut self) -> Self {\n-        unsafe {\n-            for byte in self.as_mut_vec() {\n-                *byte = byte.to_ascii_uppercase()\n-            }\n-        }\n-        self\n-    }\n-}\n-\n-/// Implement `into_ascii_lowercase` and `into_ascii_uppercase` without memory allocation,\n-/// defer other methods to `[u8]`.\n-#[stable(feature = \"into_ascii\", since = \"1.8.0\")]\n-impl AsciiExt for Vec<u8> {\n-    type Owned = Self;\n-\n-    #[inline] fn is_ascii(&self) -> bool { (**self).is_ascii() }\n-    #[inline] fn to_ascii_uppercase(&self) -> Self { (**self).to_ascii_uppercase() }\n-    #[inline] fn to_ascii_lowercase(&self) -> Self { (**self).to_ascii_lowercase() }\n-    #[inline] fn eq_ignore_ascii_case(&self, o: &Self) -> bool { (**self).eq_ignore_ascii_case(o) }\n-    #[inline] fn make_ascii_uppercase(&mut self) { (**self).make_ascii_uppercase() }\n-    #[inline] fn make_ascii_lowercase(&mut self) { (**self).make_ascii_lowercase() }\n-\n-    fn into_ascii_lowercase(mut self) -> Self {\n-        for byte in &mut self {\n-            *byte = byte.to_ascii_lowercase()\n-        }\n-        self\n-    }\n-\n-    fn into_ascii_uppercase(mut self) -> Self {\n-        for byte in &mut self {\n-            *byte = byte.to_ascii_uppercase()\n-        }\n-        self\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}