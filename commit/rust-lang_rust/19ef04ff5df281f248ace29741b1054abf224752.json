{"sha": "19ef04ff5df281f248ace29741b1054abf224752", "node_id": "C_kwDOAAsO6NoAKDE5ZWYwNGZmNWRmMjgxZjI0OGFjZTI5NzQxYjEwNTRhYmYyMjQ3NTI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-30T04:33:56Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-30T04:33:56Z"}, "message": "Fix the order of `trait_duplication_in_bounds`\n* Emit the lint in source order\n* Make suggestions with multiple traits be in source order rather than alphabetical", "tree": {"sha": "0d151895076656dd94e0ab7a57b2caa445b91f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d151895076656dd94e0ab7a57b2caa445b91f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ef04ff5df281f248ace29741b1054abf224752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ef04ff5df281f248ace29741b1054abf224752", "html_url": "https://github.com/rust-lang/rust/commit/19ef04ff5df281f248ace29741b1054abf224752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ef04ff5df281f248ace29741b1054abf224752/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df60321003440948a6628c348746e94a1518ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4df60321003440948a6628c348746e94a1518ae0", "html_url": "https://github.com/rust-lang/rust/commit/4df60321003440948a6628c348746e94a1518ae0"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "2ffa022b04f7a4b870e32717c5cd45aa189d23cf", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19ef04ff5df281f248ace29741b1054abf224752/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ef04ff5df281f248ace29741b1054abf224752/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=19ef04ff5df281f248ace29741b1054abf224752", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{BytePos, Span};\n+use std::collections::hash_map::Entry;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -255,7 +256,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n                 then {\n                     return Some(\n                         rollup_traits(cx, bound_predicate.bounds, \"these where clauses contain repeated elements\")\n-                        .into_keys().map(|trait_ref| (path.res, trait_ref)))\n+                        .into_iter().map(|(trait_ref, _)| (path.res, trait_ref)))\n                 }\n             }\n             None\n@@ -295,8 +296,13 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n struct ComparableTraitRef(Res, Vec<Res>);\n+impl Default for ComparableTraitRef {\n+    fn default() -> Self {\n+        Self(Res::Err, Vec::new())\n+    }\n+}\n \n fn get_trait_info_from_bound<'a>(bound: &'a GenericBound<'_>) -> Option<(Res, &'a [PathSegment<'a>], Span)> {\n     if let GenericBound::Trait(t, tbm) = bound {\n@@ -339,7 +345,7 @@ fn into_comparable_trait_ref(trait_ref: &TraitRef<'_>) -> ComparableTraitRef {\n     )\n }\n \n-fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) -> FxHashMap<ComparableTraitRef, Span> {\n+fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) -> Vec<(ComparableTraitRef, Span)> {\n     let mut map = FxHashMap::default();\n     let mut repeated_res = false;\n \n@@ -351,23 +357,33 @@ fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) -\n         }\n     };\n \n+    let mut i = 0usize;\n     for bound in bounds.iter().filter_map(only_comparable_trait_refs) {\n         let (comparable_bound, span_direct) = bound;\n-        if map.insert(comparable_bound, span_direct).is_some() {\n-            repeated_res = true;\n+        match map.entry(comparable_bound) {\n+            Entry::Occupied(_) => repeated_res = true,\n+            Entry::Vacant(e) => {\n+                e.insert((span_direct, i));\n+                i += 1;\n+            },\n         }\n     }\n \n+    // Put bounds in source order\n+    let mut comparable_bounds = vec![Default::default(); map.len()];\n+    for (k, (v, i)) in map {\n+        comparable_bounds[i] = (k, v);\n+    }\n+\n     if_chain! {\n         if repeated_res;\n         if let [first_trait, .., last_trait] = bounds;\n         then {\n             let all_trait_span = first_trait.span().to(last_trait.span());\n \n-            let mut traits = map.values()\n-                .filter_map(|span| snippet_opt(cx, *span))\n+            let traits = comparable_bounds.iter()\n+                .filter_map(|&(_, span)| snippet_opt(cx, span))\n                 .collect::<Vec<_>>();\n-            traits.sort_unstable();\n             let traits = traits.join(\" + \");\n \n             span_lint_and_sugg(\n@@ -382,5 +398,5 @@ fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) -\n         }\n     }\n \n-    map\n+    comparable_bounds\n }"}, {"sha": "4ce5d421782250987f5efcbaab50ba825f2a9c2b", "filename": "tests/ui/trait_duplication_in_bounds.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=19ef04ff5df281f248ace29741b1054abf224752", "patch": "@@ -97,15 +97,15 @@ fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n     unimplemented!();\n }\n \n-fn bad_generic<T: GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n     unimplemented!();\n }\n \n mod foo {\n     pub trait Clone {}\n }\n \n-fn qualified_path<T: Clone + foo::Clone>(arg0: T) {\n+fn qualified_path<T: std::clone::Clone + foo::Clone>(arg0: T) {\n     unimplemented!();\n }\n "}, {"sha": "af800ba78880c39ed5e5b936c850e5138f993c59", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=19ef04ff5df281f248ace29741b1054abf224752", "patch": "@@ -44,13 +44,13 @@ error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:100:19\n    |\n LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u32> + GenericTrait<u64>`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`\n \n error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:108:22\n    |\n LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + foo::Clone`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fbd9abb005f1f1fdf069c3c96691c12964ff5d24", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ef04ff5df281f248ace29741b1054abf224752/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=19ef04ff5df281f248ace29741b1054abf224752", "patch": "@@ -1,8 +1,8 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |                       ^^^^^^^\n+   |               ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/trait_duplication_in_bounds_unfixable.rs:1:9\n@@ -12,10 +12,10 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |               ^^^^^\n+   |                       ^^^^^^^\n    |\n    = help: consider removing this trait bound\n "}]}