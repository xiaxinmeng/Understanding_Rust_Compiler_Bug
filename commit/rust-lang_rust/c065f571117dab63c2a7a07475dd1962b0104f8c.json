{"sha": "c065f571117dab63c2a7a07475dd1962b0104f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjVmNTcxMTE3ZGFiNjNjMmE3YTA3NDc1ZGQxOTYyYjAxMDRmOGM=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-16T02:55:10Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-16T02:55:10Z"}, "message": "Remove ToPolyTraitRef impl for TraitRef", "tree": {"sha": "bdd98e96b0516e052bf3576398381eb218caddab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd98e96b0516e052bf3576398381eb218caddab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c065f571117dab63c2a7a07475dd1962b0104f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c065f571117dab63c2a7a07475dd1962b0104f8c", "html_url": "https://github.com/rust-lang/rust/commit/c065f571117dab63c2a7a07475dd1962b0104f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c065f571117dab63c2a7a07475dd1962b0104f8c/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be76bdf9058172dd22a67332b45c0ab93268b3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be76bdf9058172dd22a67332b45c0ab93268b3b3", "html_url": "https://github.com/rust-lang/rust/commit/be76bdf9058172dd22a67332b45c0ab93268b3b3"}], "stats": {"total": 78, "additions": 33, "deletions": 45}, "files": [{"sha": "3fd9a3c14f8fc36b64d29b5dfcebabb5ac92e714", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -769,12 +769,6 @@ pub trait ToPolyTraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;\n }\n \n-impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> {\n-    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n-        ty::Binder::dummy(*self)\n-    }\n-}\n-\n impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n         self.map_bound_ref(|trait_pred| trait_pred.trait_ref)"}, {"sha": "9825309fc8a27e03542d263f8d94674aa4faa1a0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -844,8 +844,11 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n-        TraitRef { def_id, substs: InternalSubsts::identity_for_item(tcx, def_id) }\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n+        ty::Binder::dummy(TraitRef {\n+            def_id,\n+            substs: InternalSubsts::identity_for_item(tcx, def_id),\n+        })\n     }\n \n     #[inline]"}, {"sha": "0bb00dfeb43ad92fd54f6d035dd4d545403df7f7", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -250,7 +250,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -554,11 +554,11 @@ fn object_ty_for_trait<'tcx>(\n \n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n \n-    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n-        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n-    ));\n+    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n+        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n+    });\n \n-    let mut associated_types = traits::supertraits(tcx, ty::Binder::dummy(trait_ref))\n+    let mut associated_types = traits::supertraits(tcx, trait_ref)\n         .flat_map(|super_trait_ref| {\n             tcx.associated_items(super_trait_ref.def_id())\n                 .in_definition_order()\n@@ -791,8 +791,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref =\n-                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}, {"sha": "da6ef8bf9ab2e8acd1a751dda0300aa73a2fd865", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -1020,7 +1020,7 @@ fn normalize_to_error<'a, 'tcx>(\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n ) -> NormalizedTy<'tcx> {\n-    let trait_ref = projection_ty.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let trait_ref = ty::Binder::dummy(projection_ty.trait_ref(selcx.tcx()));\n     let trait_obligation = Obligation {\n         cause,\n         recursion_depth: depth,\n@@ -1282,7 +1282,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n \n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n-    let poly_trait_ref = obligation.predicate.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n     let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {"}, {"sha": "9e1211336a4b01472026ee7a2cb0d53ecdfb3fac", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -141,6 +141,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let placeholder_trait_predicate =\n                 self.infcx().replace_bound_vars_with_placeholders(trait_predicate);\n             let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n+            let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n             let (def_id, substs) = match *placeholder_self_ty.kind() {\n                 ty::Projection(proj) => (proj.item_def_id, proj.substs),\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n@@ -164,7 +165,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate.value)\n+                    .sup(placeholder_trait_predicate.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);"}, {"sha": "2c4c80a1a910bf0a746e2c1eddf80125c5674b5a", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -330,7 +330,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = ty::TraitRef::new(trait_def_id, substs);\n \n         // Construct an obligation\n-        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n         let obligation = traits::Obligation::misc(\n             span,\n             self.body_id,"}, {"sha": "5aa579f33a9d2148448ff80a0cd4c64b1d664be0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -21,9 +21,7 @@ use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};\n@@ -967,7 +965,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, assume all super-traits are relevant.\n-            let bounds = iter::once(trait_ref.to_poly_trait_ref());\n+            let bounds = iter::once(ty::Binder::dummy(trait_ref));\n             self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n                 let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n \n@@ -1372,7 +1370,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_ref: ty::TraitRef<'tcx>,\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-        let predicate = trait_ref.to_poly_trait_ref().to_poly_trait_predicate();\n+        let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n         let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }"}, {"sha": "91a164ce063ea6cae022e8254e572e8149338bb9", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -12,9 +12,7 @@ use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fast_reject::simplify_type;\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{\n-    self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, Span};\n@@ -53,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .into()],\n                         );\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n-                        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n                             span,\n                             self.body_id,"}, {"sha": "a2d749fffe0b028490a87d794dd90d9162610ce1", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c065f571117dab63c2a7a07475dd1962b0104f8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c065f571117dab63c2a7a07475dd1962b0104f8c", "patch": "@@ -40,7 +40,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -607,8 +607,7 @@ fn type_param_predicates(\n                 ItemKind::Trait(_, _, ref generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_hir_id {\n-                        let identity_trait_ref =\n-                            ty::Binder::dummy(ty::TraitRef::identity(tcx, item_def_id));\n+                        let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n                         extend =\n                             Some((identity_trait_ref.without_const().to_predicate(tcx), item.span));\n                     }\n@@ -2003,14 +2002,11 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n             // *current* state of an external file.\n             span = tcx.sess.source_map().guess_head_span(span);\n         }\n-        result.predicates = tcx.arena.alloc_from_iter(\n-            result.predicates.iter().copied().chain(std::iter::once((\n-                ty::Binder::dummy(ty::TraitRef::identity(tcx, def_id))\n-                    .without_const()\n-                    .to_predicate(tcx),\n+        result.predicates =\n+            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n+                ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),\n                 span,\n-            ))),\n-        );\n+            ))));\n     }\n     debug!(\"predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n@@ -2046,7 +2042,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             match item.kind {\n                 ItemKind::Impl(ref impl_) => {\n                     if impl_.defaultness.is_default() {\n-                        is_default_impl_trait = tcx.impl_trait_ref(def_id);\n+                        is_default_impl_trait = tcx\n+                            .impl_trait_ref(def_id)\n+                            .map(|trait_ref| ty::Binder::dummy(trait_ref));\n                     }\n                     &impl_.generics\n                 }\n@@ -2126,10 +2124,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // (see below). Recall that a default impl is not itself an impl, but rather a\n     // set of defaults that can be incorporated into another impl.\n     if let Some(trait_ref) = is_default_impl_trait {\n-        predicates.insert((\n-            trait_ref.to_poly_trait_ref().without_const().to_predicate(tcx),\n-            tcx.def_span(def_id),\n-        ));\n+        predicates.insert((trait_ref.without_const().to_predicate(tcx), tcx.def_span(def_id)));\n     }\n \n     // Collect the region predicates that were declared inline as"}]}