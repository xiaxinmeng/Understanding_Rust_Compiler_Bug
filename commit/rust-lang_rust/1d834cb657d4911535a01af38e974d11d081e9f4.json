{"sha": "1d834cb657d4911535a01af38e974d11d081e9f4", "node_id": "C_kwDOAAsO6NoAKDFkODM0Y2I2NTdkNDkxMTUzNWEwMWFmMzhlOTc0ZDExZDA4MWU5ZjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-14T03:57:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-04T05:55:47Z"}, "message": "opaque types may also be sized", "tree": {"sha": "7002fa486dabb13ba31df4afde2b7cb257cff425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7002fa486dabb13ba31df4afde2b7cb257cff425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d834cb657d4911535a01af38e974d11d081e9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d834cb657d4911535a01af38e974d11d081e9f4", "html_url": "https://github.com/rust-lang/rust/commit/1d834cb657d4911535a01af38e974d11d081e9f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d834cb657d4911535a01af38e974d11d081e9f4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "html_url": "https://github.com/rust-lang/rust/commit/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "f64d1e06f6c4b3e4237966d9b77cb6cb3184979b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834cb657d4911535a01af38e974d11d081e9f4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834cb657d4911535a01af38e974d11d081e9f4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1d834cb657d4911535a01af38e974d11d081e9f4", "patch": "@@ -2282,19 +2282,18 @@ impl<'tcx> Ty<'tcx> {\n             ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                (tcx.type_of(dyn_metadata).subst(tcx, &[self.into()]), false)\n+                (tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n \n             // type parameters only have unit metadata if they're sized, so return true\n             // to make sure we double check this during confirmation\n-            ty::Param(_) |  ty::Projection(_) => (tcx.types.unit, true),\n+            ty::Param(_) |  ty::Projection(_) | ty::Opaque(..) => (tcx.types.unit, true),\n \n-            ty::Opaque(..)\n-            | ty::Infer(ty::TyVar(_))\n+            ty::Infer(ty::TyVar(_))\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n-                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", self)\n+                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?} (tail = {:?})\", self, tail)\n             }\n         }\n     }"}, {"sha": "26f7d0782c283b73cd6f961f8b995532032679a1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d834cb657d4911535a01af38e974d11d081e9f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834cb657d4911535a01af38e974d11d081e9f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1d834cb657d4911535a01af38e974d11d081e9f4", "patch": "@@ -1439,10 +1439,18 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // Integers and floats are always Sized, and so have unit type metadata.\n                     | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n \n-                    // type parameters and unnormalized projections have pointer metadata if they're still known to be sized\n-                    ty::Param(_) | ty::Projection(..) => tail.is_sized(selcx.tcx().at(obligation.cause.span), obligation.param_env),\n+                    // type parameters, opaques, and unnormalized projections have pointer\n+                    // metadata if they're known (e.g. by the param_env) to be sized\n+                    ty::Param(_) | ty::Projection(..) | ty::Opaque(..)\n+                        if tail.is_sized(selcx.tcx().at(obligation.cause.span), obligation.param_env) =>\n+                    {\n+                        true\n+                    }\n \n-                    ty::Opaque(..)\n+                    // FIXME(compiler-errors): are Bound and Placeholder types ever known sized?\n+                    ty::Param(_)\n+                    | ty::Projection(..)\n+                    | ty::Opaque(..)\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n@@ -1451,7 +1459,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             candidate_set.mark_ambiguous();\n                         }\n                         false\n-                    },\n+                    }\n                 }\n             }\n             super::ImplSource::Param(..) => {"}, {"sha": "e0da0fc38613d8a17c89fbcfa0f9d9bfa72aa556", "filename": "src/test/ui/traits/pointee-tail-is-generic.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1d834cb657d4911535a01af38e974d11d081e9f4/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834cb657d4911535a01af38e974d11d081e9f4/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs?ref=1d834cb657d4911535a01af38e974d11d081e9f4", "patch": "@@ -1,12 +1,29 @@\n // check-pass\n+// edition:2018\n \n #![feature(ptr_metadata)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque = impl std::future::Future;\n+\n+fn opaque() -> Opaque {\n+    async {}\n+}\n \n fn a<T>() {\n-    b::<T>();\n-    b::<std::cell::Cell<T>>();\n+    // type parameter T is known to be sized\n+    is_thin::<T>();\n+    // tail of ADT (which is a type param) is known to be sized\n+    is_thin::<std::cell::Cell<T>>();\n+    // opaque type is known to be sized\n+    is_thin::<Opaque>();\n+}\n+\n+fn a2<T: Iterator>() {\n+    // associated type is known to be sized\n+    is_thin::<T::Item>();\n }\n \n-fn b<T: std::ptr::Pointee<Metadata = ()>>() {}\n+fn is_thin<T: std::ptr::Pointee<Metadata = ()>>() {}\n \n fn main() {}"}]}