{"sha": "4082053b007f5d318adbac8424d3641cd3ce80f9", "node_id": "C_kwDOAAsO6NoAKDQwODIwNTNiMDA3ZjVkMzE4YWRiYWM4NDI0ZDM2NDFjZDNjZTgwZjk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-12T17:34:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-22T16:35:35Z"}, "message": "rustdoc: Cleanup doc string collapsing", "tree": {"sha": "bd4ab0e71544d1115b95c8ab9e0e5bd6e4c7d415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd4ab0e71544d1115b95c8ab9e0e5bd6e4c7d415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4082053b007f5d318adbac8424d3641cd3ce80f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4082053b007f5d318adbac8424d3641cd3ce80f9", "html_url": "https://github.com/rust-lang/rust/commit/4082053b007f5d318adbac8424d3641cd3ce80f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4082053b007f5d318adbac8424d3641cd3ce80f9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03761a50a3b26daded09e6da79252692c9bbad5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/03761a50a3b26daded09e6da79252692c9bbad5f", "html_url": "https://github.com/rust-lang/rust/commit/03761a50a3b26daded09e6da79252692c9bbad5f"}], "stats": {"total": 135, "additions": 51, "deletions": 84}, "files": [{"sha": "e9ccea2cf270f5cd68cfbc06e6ccc52d4d4cd324", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -401,12 +401,18 @@ impl Item {\n             .unwrap_or_else(|| self.span(tcx).map_or(rustc_span::DUMMY_SP, |span| span.inner()))\n     }\n \n-    /// Finds the `doc` attribute as a NameValue and returns the corresponding\n-    /// value found.\n-    pub(crate) fn doc_value(&self) -> Option<String> {\n+    /// Combine all doc strings into a single value handling indentation and newlines as needed.\n+    pub(crate) fn doc_value(&self) -> String {\n         self.attrs.doc_value()\n     }\n \n+    /// Combine all doc strings into a single value handling indentation and newlines as needed.\n+    /// Returns `None` is there's no documentation at all, and `Some(\"\")` if there is some\n+    /// documentation but it is empty (e.g. `#[doc = \"\"]`).\n+    pub(crate) fn opt_doc_value(&self) -> Option<String> {\n+        self.attrs.opt_doc_value()\n+    }\n+\n     pub(crate) fn from_def_id_and_parts(\n         def_id: DefId,\n         name: Option<Symbol>,\n@@ -443,12 +449,6 @@ impl Item {\n         }\n     }\n \n-    /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n-    /// with newlines.\n-    pub(crate) fn collapsed_doc_value(&self) -> Option<String> {\n-        self.attrs.collapsed_doc_value()\n-    }\n-\n     pub(crate) fn links(&self, cx: &Context<'_>) -> Vec<RenderedLink> {\n         use crate::html::format::{href, link_tooltip};\n \n@@ -1068,17 +1068,6 @@ impl<I: Iterator<Item = ast::NestedMetaItem>> NestedAttributesExt for I {\n     }\n }\n \n-/// Collapse a collection of [`DocFragment`]s into one string,\n-/// handling indentation and newlines as needed.\n-pub(crate) fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n-    let mut acc = String::new();\n-    for frag in doc_strings {\n-        add_doc_fragment(&mut acc, frag);\n-    }\n-    acc.pop();\n-    acc\n-}\n-\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n@@ -1163,29 +1152,23 @@ impl Attributes {\n         Attributes { doc_strings, other_attrs }\n     }\n \n-    /// Finds the `doc` attribute as a NameValue and returns the corresponding\n-    /// value found.\n-    pub(crate) fn doc_value(&self) -> Option<String> {\n-        let mut iter = self.doc_strings.iter();\n-\n-        let ori = iter.next()?;\n-        let mut out = String::new();\n-        add_doc_fragment(&mut out, ori);\n-        for new_frag in iter {\n-            add_doc_fragment(&mut out, new_frag);\n-        }\n-        out.pop();\n-        if out.is_empty() { None } else { Some(out) }\n+    /// Combine all doc strings into a single value handling indentation and newlines as needed.\n+    pub(crate) fn doc_value(&self) -> String {\n+        self.opt_doc_value().unwrap_or_default()\n     }\n \n-    /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n-    /// with newlines.\n-    pub(crate) fn collapsed_doc_value(&self) -> Option<String> {\n-        if self.doc_strings.is_empty() {\n-            None\n-        } else {\n-            Some(collapse_doc_fragments(&self.doc_strings))\n-        }\n+    /// Combine all doc strings into a single value handling indentation and newlines as needed.\n+    /// Returns `None` is there's no documentation at all, and `Some(\"\")` if there is some\n+    /// documentation but it is empty (e.g. `#[doc = \"\"]`).\n+    pub(crate) fn opt_doc_value(&self) -> Option<String> {\n+        (!self.doc_strings.is_empty()).then(|| {\n+            let mut res = String::new();\n+            for frag in &self.doc_strings {\n+                add_doc_fragment(&mut res, frag);\n+            }\n+            res.pop();\n+            res\n+        })\n     }\n \n     pub(crate) fn get_doc_aliases(&self) -> Box<[Symbol]> {"}, {"sha": "394954208a48e6fae70690cac77fbd8c0de5d5f2", "filename": "src/librustdoc/clean/types/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -1,7 +1,5 @@\n use super::*;\n \n-use crate::clean::collapse_doc_fragments;\n-\n use rustc_resolve::rustdoc::{unindent_doc_fragments, DocFragment, DocFragmentKind};\n use rustc_span::create_default_session_globals_then;\n use rustc_span::source_map::DUMMY_SP;\n@@ -22,7 +20,8 @@ fn run_test(input: &str, expected: &str) {\n     create_default_session_globals_then(|| {\n         let mut s = create_doc_fragment(input);\n         unindent_doc_fragments(&mut s);\n-        assert_eq!(collapse_doc_fragments(&s), expected);\n+        let attrs = Attributes { doc_strings: s, other_attrs: Default::default() };\n+        assert_eq!(attrs.doc_value(), expected);\n     });\n }\n "}, {"sha": "e10a629777526fbd8543f4f4d08f99528253ae5d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -367,7 +367,7 @@ pub(crate) fn run_global_ctxt(\n \n     let mut krate = tcx.sess.time(\"clean_crate\", || clean::krate(&mut ctxt));\n \n-    if krate.module.doc_value().map(|d| d.is_empty()).unwrap_or(true) {\n+    if krate.module.doc_value().is_empty() {\n         let help = format!(\n             \"The following guide may be of use:\\n\\\n             {}/rustdoc/how-to-write-documentation.html\","}, {"sha": "f6631b66f5b65f5e195d061642da622cd865cd75", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -1237,7 +1237,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         // The collapse-docs pass won't combine sugared/raw doc attributes, or included files with\n         // anything else, this will combine them for us.\n         let attrs = Attributes::from_ast(ast_attrs);\n-        if let Some(doc) = attrs.collapsed_doc_value() {\n+        if let Some(doc) = attrs.opt_doc_value() {\n             // Use the outermost invocation, so that doctest names come from where the docs were written.\n             let span = ast_attrs\n                 .iter()"}, {"sha": "c4758fd9866558a32a289268659c37c2f99f8ee8", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -327,9 +327,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n                     if item.item_id.as_def_id().map_or(false, |idx| !idx.is_crate_root()) {\n-                        let desc = item.doc_value().map_or_else(String::new, |x| {\n-                            short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n-                        });\n+                        let desc =\n+                            short_markdown_summary(&item.doc_value(), &item.link_names(self.cache));\n                         let ty = item.type_();\n                         if ty != ItemType::StructField\n                             || u16::from_str_radix(s.as_str(), 10).is_err()"}, {"sha": "56af257fd5eb9ef014fcd61b086c4aa7a853a4aa", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -184,11 +184,8 @@ impl<'tcx> Context<'tcx> {\n         };\n         title.push_str(\" - Rust\");\n         let tyname = it.type_();\n-        let desc = it\n-            .doc_value()\n-            .as_ref()\n-            .map(|doc| plain_text_summary(doc, &it.link_names(&self.cache())));\n-        let desc = if let Some(desc) = desc {\n+        let desc = plain_text_summary(&it.doc_value(), &it.link_names(&self.cache()));\n+        let desc = if !desc.is_empty() {\n             desc\n         } else if it.is_crate() {\n             format!(\"API documentation for the Rust `{}` crate.\", self.shared.layout.krate)"}, {"sha": "42e27d35a94b1dcc4c15f1c03d6006777128f549", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -468,7 +468,8 @@ fn document_short<'a, 'cx: 'a>(\n         if !show_def_docs {\n             return Ok(());\n         }\n-        if let Some(s) = item.doc_value() {\n+        let s = item.doc_value();\n+        if !s.is_empty() {\n             let (mut summary_html, has_more_content) =\n                 MarkdownSummaryLine(&s, &item.links(cx)).into_string_with_has_more_content();\n \n@@ -511,7 +512,7 @@ fn document_full_inner<'a, 'cx: 'a>(\n     heading_offset: HeadingOffset,\n ) -> impl fmt::Display + 'a + Captures<'cx> {\n     display_fn(move |f| {\n-        if let Some(s) = item.collapsed_doc_value() {\n+        if let Some(s) = item.opt_doc_value() {\n             debug!(\"Doc block: =====\\n{}\\n=====\", s);\n             if is_collapsible {\n                 write!(\n@@ -1476,7 +1477,7 @@ fn render_impl(\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        if item.doc_value().is_some() {\n+                        if !item.doc_value().is_empty() {\n                             document_item_info(cx, it, Some(parent))\n                                 .render_into(&mut info_buffer)\n                                 .unwrap();\n@@ -1747,7 +1748,7 @@ fn render_impl(\n             write!(w, \"</summary>\")\n         }\n \n-        if let Some(ref dox) = i.impl_item.collapsed_doc_value() {\n+        if let Some(ref dox) = i.impl_item.opt_doc_value() {\n             if trait_.is_none() && i.inner_impl().items.is_empty() {\n                 w.write_str(\n                     \"<div class=\\\"item-info\\\">\\"}, {"sha": "76c8e0885a0a2ba864d6bd5328d52883ba62c258", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -420,9 +420,9 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     _ => \"\",\n                 };\n \n-                let doc_value = myitem.doc_value().unwrap_or_default();\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n-                let docs = MarkdownSummaryLine(&doc_value, &myitem.links(cx)).into_string();\n+                let docs =\n+                    MarkdownSummaryLine(&myitem.doc_value(), &myitem.links(cx)).into_string();\n                 let (docs_before, docs_after) = if docs.is_empty() {\n                     (\"\", \"\")\n                 } else {\n@@ -1338,7 +1338,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 clean::VariantKind::Tuple(fields) => {\n                     // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n                     // the section if at least one field is documented.\n-                    if fields.iter().any(|f| f.doc_value().is_some()) {\n+                    if fields.iter().any(|f| !f.doc_value().is_empty()) {\n                         Some((\"Tuple Fields\", fields))\n                     } else {\n                         None"}, {"sha": "846299f02e33c39252f4dc51b1bccf7c1f82c3bd", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -28,9 +28,7 @@ pub(crate) fn build_index<'tcx>(\n     // has since been learned.\n     for &OrphanImplItem { parent, ref item, ref impl_generics } in &cache.orphan_impl_items {\n         if let Some((fqp, _)) = cache.paths.get(&parent) {\n-            let desc = item\n-                .doc_value()\n-                .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(cache)));\n+            let desc = short_markdown_summary(&item.doc_value(), &item.link_names(cache));\n             cache.search_index.push(IndexItem {\n                 ty: item.type_(),\n                 name: item.name.unwrap(),\n@@ -45,10 +43,8 @@ pub(crate) fn build_index<'tcx>(\n         }\n     }\n \n-    let crate_doc = krate\n-        .module\n-        .doc_value()\n-        .map_or_else(String::new, |s| short_markdown_summary(&s, &krate.module.link_names(cache)));\n+    let crate_doc =\n+        short_markdown_summary(&krate.module.doc_value(), &krate.module.link_names(cache));\n \n     // Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n     // we need the alias element to have an array of items."}, {"sha": "935bb721f1803f402490f9876a7935afdba22722", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -40,7 +40,7 @@ impl JsonRenderer<'_> {\n                 (String::from(&**link), id_from_item_default(id.into(), self.tcx))\n             })\n             .collect();\n-        let docs = item.attrs.collapsed_doc_value();\n+        let docs = item.opt_doc_value();\n         let attrs = item.attributes(self.tcx, true);\n         let span = item.span(self.tcx);\n         let visibility = item.visibility(self.tcx);"}, {"sha": "6ead0cd961a3143a8b382a61c13fae0c15253e6d", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -206,13 +206,7 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                 let has_docs = !i.attrs.doc_strings.is_empty();\n                 let mut tests = Tests { found_tests: 0 };\n \n-                find_testable_code(\n-                    &i.attrs.collapsed_doc_value().unwrap_or_default(),\n-                    &mut tests,\n-                    ErrorCodes::No,\n-                    false,\n-                    None,\n-                );\n+                find_testable_code(&i.doc_value(), &mut tests, ErrorCodes::No, false, None);\n \n                 let has_doc_example = tests.found_tests != 0;\n                 let hir_id = DocContext::as_local_hir_id(self.ctx.tcx, i.item_id).unwrap();"}, {"sha": "b6cd897d317546ef703aa604ca5718369d240e53", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -34,9 +34,7 @@ pub(crate) fn check_doc_test_visibility(krate: Crate, cx: &mut DocContext<'_>) -\n \n impl<'a, 'tcx> DocVisitor for DocTestVisibilityLinter<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n-        let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n-\n-        look_for_tests(self.cx, &dox, item);\n+        look_for_tests(self.cx, &item.doc_value(), item);\n \n         self.visit_item_recur(item)\n     }"}, {"sha": "a10d5fdb410a9ad448d91a58996ac346808c03bc", "filename": "src/librustdoc/passes/lint/bare_urls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -18,7 +18,7 @@ pub(super) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n             // If non-local, no need to check anything.\n             return;\n         };\n-    let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+    let dox = item.doc_value();\n     if !dox.is_empty() {\n         let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n             let sp = source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)"}, {"sha": "f489f5081daa21e243643fe7841c50b84a4161ec", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -17,7 +17,7 @@ use crate::html::markdown::{self, RustCodeBlock};\n use crate::passes::source_span_for_markdown_range;\n \n pub(crate) fn visit_item(cx: &DocContext<'_>, item: &clean::Item) {\n-    if let Some(dox) = &item.attrs.collapsed_doc_value() {\n+    if let Some(dox) = &item.opt_doc_value() {\n         let sp = item.attr_span(cx.tcx);\n         let extra = crate::html::markdown::ExtraInfo::new(cx.tcx, item.item_id.expect_def_id(), sp);\n         for code_block in markdown::rust_code_blocks(dox, &extra) {"}, {"sha": "f0403647af0dae5ae120d6080b208441f8a7de18", "filename": "src/librustdoc/passes/lint/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n     let Some(hir_id) = DocContext::as_local_hir_id(tcx, item.item_id)\n     // If non-local, no need to check anything.\n     else { return };\n-    let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+    let dox = item.doc_value();\n     if !dox.is_empty() {\n         let report_diag = |msg: &str, range: &Range<usize>, is_open_tag: bool| {\n             let sp = match source_span_for_markdown_range(tcx, &dox, range, &item.attrs) {"}, {"sha": "683c224c4be5c4bc61fd45ff46945235d503ed6d", "filename": "src/librustdoc/passes/lint/unescaped_backticks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n         return;\n     };\n \n-    let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+    let dox = item.doc_value();\n     if dox.is_empty() {\n         return;\n     }"}, {"sha": "73fc26a6b043a5867a16f776fe77fa645ffebcf5", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082053b007f5d318adbac8424d3641cd3ce80f9/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=4082053b007f5d318adbac8424d3641cd3ce80f9", "patch": "@@ -194,7 +194,7 @@ impl<'a> DocFolder for ImplStripper<'a, '_> {\n                     })\n                 {\n                     return None;\n-                } else if imp.items.is_empty() && i.doc_value().is_none() {\n+                } else if imp.items.is_empty() && i.doc_value().is_empty() {\n                     return None;\n                 }\n             }"}]}