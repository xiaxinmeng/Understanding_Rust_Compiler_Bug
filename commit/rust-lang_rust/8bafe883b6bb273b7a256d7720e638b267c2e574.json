{"sha": "8bafe883b6bb273b7a256d7720e638b267c2e574", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYWZlODgzYjZiYjI3M2I3YTI1NmQ3NzIwZTYzOGIyNjdjMmU1NzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-14T06:45:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-17T02:41:02Z"}, "message": "Select an appropriate unused lifetime name in suggestion", "tree": {"sha": "98aa52fddb1fbdfb3ea3f8dfeca993a538f94994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98aa52fddb1fbdfb3ea3f8dfeca993a538f94994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bafe883b6bb273b7a256d7720e638b267c2e574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bafe883b6bb273b7a256d7720e638b267c2e574", "html_url": "https://github.com/rust-lang/rust/commit/8bafe883b6bb273b7a256d7720e638b267c2e574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bafe883b6bb273b7a256d7720e638b267c2e574/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a643ee8d693b8100e6f54f2a01ff7cde05eb65c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a643ee8d693b8100e6f54f2a01ff7cde05eb65c5", "html_url": "https://github.com/rust-lang/rust/commit/a643ee8d693b8100e6f54f2a01ff7cde05eb65c5"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "ca3bcac1206be1fab98f3c39228a82a21cfcde0b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8bafe883b6bb273b7a256d7720e638b267c2e574", "patch": "@@ -33,7 +33,7 @@ use rustc::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -369,10 +369,12 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                         hir::ItemKind::Enum(_, generics)\n                         | hir::ItemKind::Struct(_, generics)\n                         | hir::ItemKind::Union(_, generics) => {\n-                            // FIXME: look for an appropriate lt name if `'a` is already used\n+                            let lt_name = get_new_lifetime_name(self.tcx, poly_trait_ref, generics);\n                             let (lt_sp, sugg) = match &generics.params[..] {\n-                                [] => (generics.span, \"<'a>\".to_string()),\n-                                [bound, ..] => (bound.span.shrink_to_lo(), \"'a, \".to_string()),\n+                                [] => (generics.span, format!(\"<{}>\", lt_name)),\n+                                [bound, ..] => {\n+                                    (bound.span.shrink_to_lo(), format!(\"{}, \", lt_name))\n+                                }\n                             };\n                             let suggestions = vec![\n                                 (lt_sp, sugg),\n@@ -387,7 +389,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                                                     ty::EarlyBoundRegion {\n                                                         def_id: item_def_id,\n                                                         index: 0,\n-                                                        name: Symbol::intern(\"'a\"),\n+                                                        name: Symbol::intern(&lt_name),\n                                                     },\n                                                 ))\n                                             })\n@@ -445,6 +447,43 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n }\n \n+/// Synthesize a new lifetime name that doesn't clash with any of the lifetimes already present.\n+fn get_new_lifetime_name<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    poly_trait_ref: ty::PolyTraitRef<'tcx>,\n+    generics: &hir::Generics<'tcx>,\n+) -> String {\n+    let existing_lifetimes = tcx\n+        .collect_referenced_late_bound_regions(&poly_trait_ref)\n+        .into_iter()\n+        .filter_map(|lt| {\n+            if let ty::BoundRegion::BrNamed(_, name) = lt {\n+                Some(name.as_str().to_string())\n+            } else {\n+                None\n+            }\n+        })\n+        .chain(generics.params.iter().filter_map(|param| {\n+            if let hir::GenericParamKind::Lifetime { .. } = &param.kind {\n+                Some(param.name.ident().as_str().to_string())\n+            } else {\n+                None\n+            }\n+        }))\n+        .collect::<FxHashSet<String>>();\n+\n+    let a_to_z_repeat_n = |n| {\n+        (b'a'..=b'z').map(move |c| {\n+            let mut s = format!(\"'\");\n+            s.extend(std::iter::repeat(char::from(c)).take(n));\n+            s\n+        })\n+    };\n+\n+    // If all single char lifetime names are present, we wrap around and double the chars.\n+    (1..).flat_map(a_to_z_repeat_n).find(|lt| !existing_lifetimes.contains(lt.as_str())).unwrap()\n+}\n+\n /// Returns the predicates defined on `item_def_id` of the form\n /// `X: Foo` where `X` is the type parameter `def_id`.\n fn type_param_predicates(\n@@ -1588,7 +1627,6 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n-    use rustc_data_structures::fx::FxHashSet;\n     use rustc_hir::*;\n \n     debug!(\"explicit_predicates_of(def_id={:?})\", def_id);"}, {"sha": "58f186d7775ea6d4b844594bea3465847c1fb9d8", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=8bafe883b6bb273b7a256d7720e638b267c2e574", "patch": "@@ -12,11 +12,12 @@ struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n-enum SomeEnum<I: for<'x> Foo<&'x isize>> {\n+enum SomeEnum<'b, I: for<'a> Foo<&'a isize>> {\n     TupleVariant(I::A),\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n     StructVariant { field: I::A },\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    OkVariant(&'b usize),\n }\n \n // FIXME(eddyb) This one doesn't even compile because of the unsupported syntax.\n@@ -26,7 +27,13 @@ enum SomeEnum<I: for<'x> Foo<&'x isize>> {\n // }\n \n struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n-    field: <I as Foo<&'a isize>>::A\n+    field: <I as Foo<&'a isize>>::A,\n+}\n+\n+struct Why<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n+    'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n+    field: I::A,\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n pub fn main() {}"}, {"sha": "e3fd2860ebcf38efcd13187322220dcf03fbea19", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bafe883b6bb273b7a256d7720e638b267c2e574/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=8bafe883b6bb273b7a256d7720e638b267c2e574", "patch": "@@ -18,8 +18,8 @@ LL |     TupleVariant(I::A),\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n-LL |     TupleVariant(<I as Foo<&'a isize>>::A),\n+LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n+LL |     TupleVariant(<I as Foo<&'c isize>>::A),\n    |\n \n error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n@@ -30,11 +30,24 @@ LL |     StructVariant { field: I::A },\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n+LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n LL |     TupleVariant(I::A),\n LL |\n-LL |     StructVariant { field: <I as Foo<&'a isize>>::A },\n+LL |     StructVariant { field: <I as Foo<&'c isize>>::A },\n    |\n \n-error: aborting due to 3 previous errors\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:35:12\n+   |\n+LL |     field: I::A,\n+   |            ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | struct Why<'bb, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n+LL |     'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n+LL |     field: <I as Foo<&'bb &'bb isize>>::A,\n+   |\n+\n+error: aborting due to 4 previous errors\n "}]}