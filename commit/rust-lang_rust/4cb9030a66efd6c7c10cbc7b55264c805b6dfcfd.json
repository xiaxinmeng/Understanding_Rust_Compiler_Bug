{"sha": "4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "node_id": "C_kwDOAAsO6NoAKDRjYjkwMzBhNjZlZmQ2YzdjMTBjYmM3YjU1MjY0YzgwNWI2ZGZjZmQ", "commit": {"author": {"name": "Troy Neubauer", "email": "tneubauer@anduril.com", "date": "2023-01-02T02:08:02Z"}, "committer": {"name": "Troy Neubauer", "email": "tneubauer@anduril.com", "date": "2023-01-02T02:26:28Z"}, "message": "Implement fix for #67535", "tree": {"sha": "cf6a6df1543c08f847249368bc962f489a6b5185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6a6df1543c08f847249368bc962f489a6b5185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEbPzBkg3lK+VaNk7JqdhNhXPHqoUFAmOyQSgACgkQqdhNhXPH\nqoWD9g//fCJcU8xafuhR0x97YDjM7rNYfclj42UVyHXgL9Jz/jhANPRPpSoHwGxN\n0eNyg87Jbwv2bx6YUJ0eYvq1U/gPrP5dYQhbQygtRfTdTWRp9lDqgY7dB+btWeR9\ntO5RxyMW/Zq3hFhzVhAaLGTCoJK7Vk/nrTROv+Ng0ZJfaGyT2K8SD4GaUtBL9/lC\nyPZIgKMBDmQDJusr6KXGJNLf93ejCDKmr3h094A+YL2JOK5y3xWnl67XrgOsFC01\n7qVmPvrUq7iv3YE8+/T+D8pq0dcqnI4wTGQdAGO6xIxF/VdLO6nFLQDzqTdcrMqk\nkn7MuL6Qp6cjhYZz8upM828X2DQiJ3gyb/7FwSabO/Ho6GaEXsFdPI8O7iI/p9vq\n20+gU2Ns4JsC5iPhDYe1fNIgCAPVLpSCC7Rn3+JM47OE37Rx1Tez63VnyuN5nUw+\nN5KKeI4g9gBamdU3zTHKtOzBFuvPc4Y/mmb3wq9bhT3ou3lG+d8VlQgdg+m+ypmq\nfJrwMMYIzpOaTwmpCJmJZJ2+hTYE86MVAZF54An7cSOM5HROf/zd45Bn8itqSVbR\njB5OxZcJ/cSn3JbOqdsy3zjhiHe5a1DbW2bvch2OZYFTd0eeCT0uutMWGiphaGvc\noNieZIHIQ/SVCiwsH6hYY1i2zsRShKhX3kqW0M293KsmO2gHqz0=\n=1q7P\n-----END PGP SIGNATURE-----", "payload": "tree cf6a6df1543c08f847249368bc962f489a6b5185\nparent e11cb36c751550cf197e23440d53f04156c3a2a3\nauthor Troy Neubauer <tneubauer@anduril.com> 1672625282 -0800\ncommitter Troy Neubauer <tneubauer@anduril.com> 1672626388 -0800\n\nImplement fix for #67535\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "html_url": "https://github.com/rust-lang/rust/commit/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/comments", "author": {"login": "TroyNeubauer", "id": 13263959, "node_id": "MDQ6VXNlcjEzMjYzOTU5", "avatar_url": "https://avatars.githubusercontent.com/u/13263959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TroyNeubauer", "html_url": "https://github.com/TroyNeubauer", "followers_url": "https://api.github.com/users/TroyNeubauer/followers", "following_url": "https://api.github.com/users/TroyNeubauer/following{/other_user}", "gists_url": "https://api.github.com/users/TroyNeubauer/gists{/gist_id}", "starred_url": "https://api.github.com/users/TroyNeubauer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TroyNeubauer/subscriptions", "organizations_url": "https://api.github.com/users/TroyNeubauer/orgs", "repos_url": "https://api.github.com/users/TroyNeubauer/repos", "events_url": "https://api.github.com/users/TroyNeubauer/events{/privacy}", "received_events_url": "https://api.github.com/users/TroyNeubauer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TroyNeubauer", "id": 13263959, "node_id": "MDQ6VXNlcjEzMjYzOTU5", "avatar_url": "https://avatars.githubusercontent.com/u/13263959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TroyNeubauer", "html_url": "https://github.com/TroyNeubauer", "followers_url": "https://api.github.com/users/TroyNeubauer/followers", "following_url": "https://api.github.com/users/TroyNeubauer/following{/other_user}", "gists_url": "https://api.github.com/users/TroyNeubauer/gists{/gist_id}", "starred_url": "https://api.github.com/users/TroyNeubauer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TroyNeubauer/subscriptions", "organizations_url": "https://api.github.com/users/TroyNeubauer/orgs", "repos_url": "https://api.github.com/users/TroyNeubauer/repos", "events_url": "https://api.github.com/users/TroyNeubauer/events{/privacy}", "received_events_url": "https://api.github.com/users/TroyNeubauer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11cb36c751550cf197e23440d53f04156c3a2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11cb36c751550cf197e23440d53f04156c3a2a3", "html_url": "https://github.com/rust-lang/rust/commit/e11cb36c751550cf197e23440d53f04156c3a2a3"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "e8b3f139623ed56ce750a81dc1a6765f0fc2fd62", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "patch": "@@ -53,7 +53,7 @@ fn do_orphan_check_impl<'tcx>(\n             sp,\n             item.span,\n             tr.path.span,\n-            trait_ref.self_ty(),\n+            trait_ref,\n             impl_.self_ty.span,\n             &impl_.generics,\n             err,\n@@ -154,11 +154,12 @@ fn emit_orphan_check_error<'tcx>(\n     sp: Span,\n     full_impl_span: Span,\n     trait_span: Span,\n-    self_ty: Ty<'tcx>,\n+    trait_ref: ty::TraitRef<'tcx>,\n     self_ty_span: Span,\n     generics: &hir::Generics<'tcx>,\n     err: traits::OrphanCheckErr<'tcx>,\n ) -> Result<!, ErrorGuaranteed> {\n+    let self_ty = trait_ref.self_ty();\n     Err(match err {\n         traits::OrphanCheckErr::NonLocalInputType(tys) => {\n             let msg = match self_ty.kind() {\n@@ -187,7 +188,14 @@ fn emit_orphan_check_error<'tcx>(\n                 let msg = |ty: &str, postfix: &str| {\n                     format!(\"{ty} is not defined in the current crate{postfix}\")\n                 };\n-                let this = |name: &str| msg(\"this\", &format!(\" because {name} are always foreign\"));\n+\n+                let this = |name: &str| {\n+                    if !trait_ref.def_id.is_local() && !is_target_ty {\n+                        msg(\"this\", &format!(\" because this is a foreign trait\"))\n+                    } else {\n+                        msg(\"this\", &format!(\" because {name} are always foreign\"))\n+                    }\n+                };\n                 let msg = match &ty.kind() {\n                     ty::Slice(_) => this(\"slices\"),\n                     ty::Array(..) => this(\"arrays\"),"}, {"sha": "24f50621310f1b325b890d2be8e5286c1b862c4d", "filename": "src/test/ui/issues/issue-67535.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs?ref=4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "patch": "@@ -0,0 +1,22 @@\n+fn main() {}\n+\n+impl std::ops::AddAssign for () {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: ()) -> () {\n+        ()\n+    }\n+}\n+\n+impl std::ops::AddAssign for [(); 1] {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: [(); 1]) -> [(); 1] {\n+        [()]\n+    }\n+}\n+\n+impl std::ops::AddAssign for &[u8] {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: &[u8]) -> &[u8] {\n+        self\n+    }\n+}"}, {"sha": "4d7a02a50969f090132030fff05acadd940c64cb", "filename": "src/test/ui/issues/issue-67535.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr?ref=4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "patch": "@@ -0,0 +1,39 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:3:1\n+   |\n+LL | impl std::ops::AddAssign for () {\n+   | ^^^^^-------------------^^^^^--\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because tuples are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:10:1\n+   |\n+LL | impl std::ops::AddAssign for [(); 1] {\n+   | ^^^^^-------------------^^^^^-------\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because arrays are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:17:1\n+   |\n+LL | impl std::ops::AddAssign for &[u8] {\n+   | ^^^^^-------------------^^^^^-----\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because slices are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "070e72437be80d037dac237e4420e509e4146150", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "patch": "@@ -10,7 +10,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 939;\n-const ISSUES_ENTRY_LIMIT: usize = 2020;\n+const ISSUES_ENTRY_LIMIT: usize = 2050;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     for dir in Walk::new(&path.join(\"test/ui\")) {"}]}