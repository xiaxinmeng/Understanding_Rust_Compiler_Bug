{"sha": "6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "node_id": "C_kwDOAAsO6NoAKDZmNDgxZjhiNzE1YzZhMjZlNDNhODY0MDdlODgzOWQ3YmY5YTYyZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T23:24:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T23:24:39Z"}, "message": "Auto merge of #97600 - matthiaskrgr:rollup-yivyeu5, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #97316 (Put a bound on collection misbehavior)\n - #97578 (alloc: remove repeated word in comment)\n - #97593 (:arrow_up: rust-analyzer)\n - #97596 (Fixup feature name to be more consistent with others)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a7815c315d7583604c21f371444e0f9bb63c6c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7815c315d7583604c21f371444e0f9bb63c6c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "html_url": "https://github.com/rust-lang/rust/commit/6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0944922007e1bb4fe59809293acf4364410cccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0944922007e1bb4fe59809293acf4364410cccc", "html_url": "https://github.com/rust-lang/rust/commit/e0944922007e1bb4fe59809293acf4364410cccc"}, {"sha": "31fccd1a446fee1e67ac264589487188d1d9d5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fccd1a446fee1e67ac264589487188d1d9d5e7", "html_url": "https://github.com/rust-lang/rust/commit/31fccd1a446fee1e67ac264589487188d1d9d5e7"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "839088eac21eadf84207b3727f413458210aaa8b", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -166,9 +166,10 @@ mod tests;\n /// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n /// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n-/// behavior resulting from such a logic error is not specified (it\n-/// could include panics, incorrect results, aborts, memory leaks, or\n-/// non-termination) but will not be undefined behavior.\n+/// behavior resulting from such a logic error is not specified, but will\n+/// be encapsulated to the `BinaryHeap` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n+/// aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}, {"sha": "6027991a0ed2fbb9b1e518ba7e937e6fde87ddae", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -64,9 +64,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified (it could include panics,\n-/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n-/// behavior.\n+/// The behavior resulting from such a logic error is not specified, but will be encapsulated to the\n+/// `BTreeMap` that observed the logic error and not result in undefined behavior. This could\n+/// include panics, incorrect results, aborts, memory leaks, and non-termination.\n ///\n /// Iterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::values`], or\n /// [`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and"}, {"sha": "20ef834eaeef3153ee62f7eeab94e5200052a800", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -23,9 +23,9 @@ use super::Recover;\n /// It is a logic error for an item to be modified in such a way that the item's ordering relative\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified (it could include panics,\n-/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n-/// behavior.\n+/// The behavior resulting from such a logic error is not specified, but will be encapsulated to the\n+/// `BTreeSet` that observed the logic error and not result in undefined behavior. This could\n+/// include panics, incorrect results, aborts, memory leaks, and non-termination.\n ///\n /// Iterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\n /// logarithmic and amortized constant time per item returned."}, {"sha": "45947c4f4a584e50c6b4862da7ef6f16a1b91651", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -2472,7 +2472,7 @@ impl<T: Copy, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n             // SAFETY:\n             // - Both pointers are created from unique slice references (`&mut [_]`)\n             //   so they are valid and do not overlap.\n-            // - Elements are :Copy so it's OK to to copy them, without doing\n+            // - Elements are :Copy so it's OK to copy them, without doing\n             //   anything with the original values\n             // - `count` is equal to the len of `source`, so source is valid for\n             //   `count` reads"}, {"sha": "fcafcbeafbce65958e1123551519df5808321cfb", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -264,7 +264,7 @@ pub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n ///\n /// [valid]: ptr#safety\n #[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n-#[rustc_const_unstable(feature = \"slice_from_mut_ptr_range_const\", issue = \"89792\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_mut_ptr_range\", issue = \"89792\")]\n pub const unsafe fn from_mut_ptr_range<'a, T>(range: Range<*mut T>) -> &'a mut [T] {\n     // SAFETY: the caller must uphold the safety contract for `from_mut_ptr_range`.\n     unsafe { from_raw_parts_mut(range.start, range.end.sub_ptr(range.start)) }"}, {"sha": "4ec423eb27f31093f5689e700b06edac0fe392a6", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -54,7 +54,8 @@ use crate::sys;\n /// the [`Eq`] trait, changes while it is in the map. This is normally only\n /// possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n /// The behavior resulting from such a logic error is not specified, but will\n-/// not result in undefined behavior. This could include panics, incorrect results,\n+/// be encapsulated to the `HashMap` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n /// aborts, memory leaks, and non-termination.\n ///\n /// The hash table implementation is a Rust port of Google's [SwissTable]."}, {"sha": "da0572047eca803fe0053ddf855cd780ec59be7b", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f481f8b715c6a26e43a86407e8839d7bf9a62f8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -33,13 +33,14 @@ use super::map::{map_try_reserve_error, RandomState};\n /// In other words, if two keys are equal, their hashes must be equal.\n ///\n ///\n-/// It is a logic error for an item to be modified in such a way that the\n-/// item's hash, as determined by the [`Hash`] trait, or its equality, as\n-/// determined by the [`Eq`] trait, changes while it is in the set. This is\n-/// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or\n-/// unsafe code. The behavior resulting from such a logic error is not\n-/// specified (it could include panics, incorrect results, aborts, memory\n-/// leaks, or non-termination) but will not be undefined behavior.\n+/// It is a logic error for a key to be modified in such a way that the key's\n+/// hash, as determined by the [`Hash`] trait, or its equality, as determined by\n+/// the [`Eq`] trait, changes while it is in the map. This is normally only\n+/// possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n+/// The behavior resulting from such a logic error is not specified, but will\n+/// be encapsulated to the `HashSet` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n+/// aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}, {"sha": "f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=6f481f8b715c6a26e43a86407e8839d7bf9a62f8", "patch": "@@ -1 +1 @@\n-Subproject commit 5d5bbec9b60010dd7389a084c56693baf6bda780\n+Subproject commit f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57"}]}