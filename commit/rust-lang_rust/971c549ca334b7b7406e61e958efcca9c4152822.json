{"sha": "971c549ca334b7b7406e61e958efcca9c4152822", "node_id": "C_kwDOAAsO6NoAKDk3MWM1NDljYTMzNGI3Yjc0MDZlNjFlOTU4ZWZjY2E5YzQxNTI4MjI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-11-30T18:08:41Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-11-30T18:08:41Z"}, "message": "re-format with new rustfmt", "tree": {"sha": "9f60931f71ae045bb5b312f2b31ff1450093b774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f60931f71ae045bb5b312f2b31ff1450093b774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971c549ca334b7b7406e61e958efcca9c4152822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971c549ca334b7b7406e61e958efcca9c4152822", "html_url": "https://github.com/rust-lang/rust/commit/971c549ca334b7b7406e61e958efcca9c4152822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971c549ca334b7b7406e61e958efcca9c4152822/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b221c877e89c701fa138e8d6ef1d615391491a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/b221c877e89c701fa138e8d6ef1d615391491a14", "html_url": "https://github.com/rust-lang/rust/commit/b221c877e89c701fa138e8d6ef1d615391491a14"}], "stats": {"total": 192, "additions": 111, "deletions": 81}, "files": [{"sha": "f441c105f70039e8308322ca9cdf6ddd93a6d365", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -519,8 +519,10 @@ pub fn eval_condition(\n                 [NestedMetaItem::Literal(Lit { kind: LitKind::Str(sym, ..), span, .. })] => {\n                     (sym, span)\n                 }\n-                [NestedMetaItem::Literal(Lit { span, .. })\n-                | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n+                [\n+                    NestedMetaItem::Literal(Lit { span, .. })\n+                    | NestedMetaItem::MetaItem(MetaItem { span, .. }),\n+                ] => {\n                     sess.span_diagnostic\n                         .struct_span_err(*span, \"expected a version literal\")\n                         .emit();"}, {"sha": "8c4508ed18882dcad064805ca7c83915260ec93c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -977,9 +977,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 Some(ref name),\n                 BorrowExplanation::MustBeValidFor {\n                     category:\n-                        category\n-                        @\n-                        (ConstraintCategory::Return(_)\n+                        category @ (ConstraintCategory::Return(_)\n                         | ConstraintCategory::CallArgument\n                         | ConstraintCategory::OpaqueType),\n                     from_closure: false,"}, {"sha": "b4821ee36e0a391a00cb8792ec7f867e19447fcb", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -165,10 +165,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 local: _,\n                 projection:\n-                    [.., ProjectionElem::Index(_)\n-                    | ProjectionElem::ConstantIndex { .. }\n-                    | ProjectionElem::Subslice { .. }\n-                    | ProjectionElem::Downcast(..)],\n+                    [\n+                        ..,\n+                        ProjectionElem::Index(_)\n+                        | ProjectionElem::ConstantIndex { .. }\n+                        | ProjectionElem::Subslice { .. }\n+                        | ProjectionElem::Downcast(..),\n+                    ],\n             } => bug!(\"Unexpected immutable place.\"),\n         }\n \n@@ -217,7 +220,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 local,\n                 projection:\n-                    [proj_base @ .., ProjectionElem::Deref, ProjectionElem::Field(field, _), ProjectionElem::Deref],\n+                    [\n+                        proj_base @ ..,\n+                        ProjectionElem::Deref,\n+                        ProjectionElem::Field(field, _),\n+                        ProjectionElem::Deref,\n+                    ],\n             } => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n@@ -763,11 +771,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                 kind:\n                                                     Call(\n                                                         _,\n-                                                        [Expr {\n-                                                            kind: MethodCall(path_segment, ..),\n-                                                            hir_id,\n-                                                            ..\n-                                                        }, ..],\n+                                                        [\n+                                                            Expr {\n+                                                                kind: MethodCall(path_segment, ..),\n+                                                                hir_id,\n+                                                                ..\n+                                                            },\n+                                                            ..,\n+                                                        ],\n                                                     ),\n                                                 ..\n                                             },"}, {"sha": "5f8bfe4c4d0dec83cba78f504403f302d4c32702", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -769,20 +769,24 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             let opaque_ty = hir.item(id);\n             if let hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                 bounds:\n-                    [hir::GenericBound::LangItemTrait(\n-                        hir::LangItem::Future,\n-                        _,\n-                        _,\n-                        hir::GenericArgs {\n-                            bindings:\n-                                [hir::TypeBinding {\n-                                    ident: Ident { name: sym::Output, .. },\n-                                    kind: hir::TypeBindingKind::Equality { ty },\n-                                    ..\n-                                }],\n-                            ..\n-                        },\n-                    )],\n+                    [\n+                        hir::GenericBound::LangItemTrait(\n+                            hir::LangItem::Future,\n+                            _,\n+                            _,\n+                            hir::GenericArgs {\n+                                bindings:\n+                                    [\n+                                        hir::TypeBinding {\n+                                            ident: Ident { name: sym::Output, .. },\n+                                            kind: hir::TypeBindingKind::Equality { ty },\n+                                            ..\n+                                        },\n+                                    ],\n+                                ..\n+                            },\n+                        ),\n+                    ],\n                 ..\n             }) = opaque_ty.kind\n             {"}, {"sha": "10c7bb2eaea943ef8f3adeb5455b481af7cbe3da", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -1525,14 +1525,12 @@ fn generator_layout_and_saved_local_names(\n                 // Deref of the `Pin<&mut Self>` state argument.\n                 mir::ProjectionElem::Field(..),\n                 mir::ProjectionElem::Deref,\n-\n                 // Field of a variant of the state.\n                 mir::ProjectionElem::Downcast(_, variant),\n                 mir::ProjectionElem::Field(field, _),\n             ] => {\n-                let name = &mut generator_saved_local_names[\n-                    generator_layout.variant_fields[variant][field]\n-                ];\n+                let name = &mut generator_saved_local_names\n+                    [generator_layout.variant_fields[variant][field]];\n                 if name.is_none() {\n                     name.replace(var.name);\n                 }"}, {"sha": "dd82add08dd98db17e9e6e3bb7f5804aee06d5da", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -584,9 +584,7 @@ fn inner_parse_loop<'root, 'tt>(\n                 //\n                 // At the beginning of the loop, if we reach the end of the delimited submatcher,\n                 // we pop the stack to backtrack out of the descent.\n-                seq\n-                @\n-                (TokenTree::Delimited(..)\n+                seq @ (TokenTree::Delimited(..)\n                 | TokenTree::Token(Token { kind: DocComment(..), .. })) => {\n                     let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));\n                     let idx = item.idx;"}, {"sha": "4a8236b2cf38d457a2028a120b36db654bca3895", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -65,24 +65,33 @@ fn string_to_tts_macro() {\n         let tts: &[TokenTree] = &tts[..];\n \n         match tts {\n-            [TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }), TokenTree::Token(Token { kind: token::Not, .. }), TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }), TokenTree::Delimited(_, macro_delim, macro_tts)]\n-                if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" =>\n-            {\n+            [\n+                TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }),\n+                TokenTree::Token(Token { kind: token::Not, .. }),\n+                TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }),\n+                TokenTree::Delimited(_, macro_delim, macro_tts),\n+            ] if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" => {\n                 let tts = &macro_tts.trees().collect::<Vec<_>>();\n                 match &tts[..] {\n-                    [TokenTree::Delimited(_, first_delim, first_tts), TokenTree::Token(Token { kind: token::FatArrow, .. }), TokenTree::Delimited(_, second_delim, second_tts)]\n-                        if macro_delim == &token::Paren =>\n-                    {\n+                    [\n+                        TokenTree::Delimited(_, first_delim, first_tts),\n+                        TokenTree::Token(Token { kind: token::FatArrow, .. }),\n+                        TokenTree::Delimited(_, second_delim, second_tts),\n+                    ] if macro_delim == &token::Paren => {\n                         let tts = &first_tts.trees().collect::<Vec<_>>();\n                         match &tts[..] {\n-                            [TokenTree::Token(Token { kind: token::Dollar, .. }), TokenTree::Token(Token { kind: token::Ident(name, false), .. })]\n-                                if first_delim == &token::Paren && name.as_str() == \"a\" => {}\n+                            [\n+                                TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n+                            ] if first_delim == &token::Paren && name.as_str() == \"a\" => {}\n                             _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                         }\n                         let tts = &second_tts.trees().collect::<Vec<_>>();\n                         match &tts[..] {\n-                            [TokenTree::Token(Token { kind: token::Dollar, .. }), TokenTree::Token(Token { kind: token::Ident(name, false), .. })]\n-                                if second_delim == &token::Paren && name.as_str() == \"a\" => {}\n+                            [\n+                                TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n+                            ] if second_delim == &token::Paren && name.as_str() == \"a\" => {}\n                             _ => panic!(\"value 4: {:?} {:?}\", second_delim, second_tts),\n                         }\n                     }"}, {"sha": "275a2128c45564f5f468e6eba57940d7b30fd5f6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -1111,7 +1111,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             };\n             debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             if let Some(\n-                &[ast::NestedMetaItem::Literal(ast::Lit { kind: ast::LitKind::Int(a, _), .. })],\n+                &[\n+                    ast::NestedMetaItem::Literal(ast::Lit {\n+                        kind: ast::LitKind::Int(a, _), ..\n+                    }),\n+                ],\n             ) = attr.meta_item_list().as_deref()\n             {\n                 Bound::Included(a)"}, {"sha": "6bd761d61e247905e41a368844802f5207c71df3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -356,14 +356,17 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// The ordering assumed here must match that used by `ClosureSubsts::new` above.\n     fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {\n         match self.substs[..] {\n-            [ref parent_substs @ .., closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty] => {\n-                ClosureSubstsParts {\n-                    parent_substs,\n-                    closure_kind_ty,\n-                    closure_sig_as_fn_ptr_ty,\n-                    tupled_upvars_ty,\n-                }\n-            }\n+            [\n+                ref parent_substs @ ..,\n+                closure_kind_ty,\n+                closure_sig_as_fn_ptr_ty,\n+                tupled_upvars_ty,\n+            ] => ClosureSubstsParts {\n+                parent_substs,\n+                closure_kind_ty,\n+                closure_sig_as_fn_ptr_ty,\n+                tupled_upvars_ty,\n+            },\n             _ => bug!(\"closure substs missing synthetics\"),\n         }\n     }"}, {"sha": "28f5ffee38f8f299dc43d231a332fc7967d13d7c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -2026,9 +2026,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n         match node {\n             hir::Node::Item(\n-                item\n-                @\n-                hir::Item {\n+                item @ hir::Item {\n                     // Only suggest indirection for uses of type parameters in ADTs.\n                     kind:\n                         hir::ItemKind::Enum(..) | hir::ItemKind::Struct(..) | hir::ItemKind::Union(..),"}, {"sha": "b4810b4e22fe4f8a6603f1e640c419200d5fe81a", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -1126,8 +1126,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for expr in exprs {\n             let expr = expr.as_coercion_site();\n             let noop = match self.typeck_results.borrow().expr_adjustments(expr) {\n-                &[Adjustment { kind: Adjust::Deref(_), .. }, Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(_, mutbl_adj)), .. }] =>\n-                {\n+                &[\n+                    Adjustment { kind: Adjust::Deref(_), .. },\n+                    Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(_, mutbl_adj)), .. },\n+                ] => {\n                     match *self.node_ty(expr.hir_id).kind() {\n                         ty::Ref(_, _, mt_orig) => {\n                             let mutbl_adj: hir::Mutability = mutbl_adj.into();"}, {"sha": "a02a7d7cbfeb281c712f27e62ca8afb25ef75464", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -304,20 +304,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // is a valid NeverToAny adjustment, because it can't\n                     // be reached.\n                     (&[Adjustment { kind: Adjust::NeverToAny, .. }], _) => return,\n-                    (&[\n-                        Adjustment { kind: Adjust::Deref(_), .. },\n-                        Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n-                    ], &[\n-                        Adjustment { kind: Adjust::Deref(_), .. },\n-                        .. // Any following adjustments are allowed.\n-                    ]) => {\n+                    (\n+                        &[\n+                            Adjustment { kind: Adjust::Deref(_), .. },\n+                            Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n+                        ],\n+                        &[\n+                            Adjustment { kind: Adjust::Deref(_), .. },\n+                            .., // Any following adjustments are allowed.\n+                        ],\n+                    ) => {\n                         // A reborrow has no effect before a dereference.\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ =>\n-                        bug!(\"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                             expr, entry.get(), adj)\n+                    _ => bug!(\n+                        \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                        expr,\n+                        entry.get(),\n+                        adj\n+                    ),\n                 };\n                 *entry.get_mut() = adj;\n             }"}, {"sha": "d01e21bcb23602511ad9341ded7af8a4b28aa657", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -440,8 +440,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // If we have an autoref followed by unsizing at the end, fix the unsize target.\n-            if let [.., Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. }, Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target }] =\n-                adjustments[..]\n+            if let [\n+                ..,\n+                Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n+                Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target },\n+            ] = adjustments[..]\n             {\n                 *target = method.sig.inputs()[0];\n             }"}, {"sha": "41bbf322a6ecc42577bc6b67c8842b203cd7e2db", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -687,15 +687,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             r\n                         ),\n                         (\n-                            l\n-                            @\n-                            (ProjectionKind::Index\n+                            l @ (ProjectionKind::Index\n                             | ProjectionKind::Subslice\n                             | ProjectionKind::Deref\n                             | ProjectionKind::Field(..)),\n-                            r\n-                            @\n-                            (ProjectionKind::Index\n+                            r @ (ProjectionKind::Index\n                             | ProjectionKind::Subslice\n                             | ProjectionKind::Deref\n                             | ProjectionKind::Field(..)),"}, {"sha": "19b309d6a30c8ea10514b5abb950ebd9610d8fae", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971c549ca334b7b7406e61e958efcca9c4152822/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971c549ca334b7b7406e61e958efcca9c4152822/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=971c549ca334b7b7406e61e958efcca9c4152822", "patch": "@@ -395,9 +395,7 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n     let (did, kind) = match res {\n         // These should be added to the cache using `record_extern_fqn`.\n         Res::Def(\n-            kind\n-            @\n-            (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n+            kind @ (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n             | Union | Mod | ForeignTy | Const | Static | Macro(..) | TraitAlias),\n             i,\n         ) => (i, kind.into()),"}]}