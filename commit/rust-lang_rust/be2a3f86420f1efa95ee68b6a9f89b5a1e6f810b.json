{"sha": "be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmEzZjg2NDIwZjFlZmE5NWVlNjhiNmE5Zjg5YjVhMWU2ZjgxMGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-05T00:52:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T00:52:37Z"}, "message": "Rollup merge of #80538 - JulianKnodt:err_usize, r=lcnr\n\nAdd check for `[T;N]`/`usize` mismatch in astconv\n\nHelps clarify the issue in #80506\nby adding a specific check for mismatches between [T;N] and usize.\n\nr? `@lcnr`", "tree": {"sha": "9ad7b6e251634b0f7714e55542bdab9434d1f144", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad7b6e251634b0f7714e55542bdab9434d1f144"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf87hVCRBK7hj4Ov3rIwAAdHIIAB7m/SA+zfyCQYoE+tyyRfEu\n3a2rPe/DP7uD5EbisrmNEUvUdral8SldSENpeMTh9BirAKal8dxYjsnPSgEKnl+5\n2gCj1fs8JFZh4QtSZZMDUr4jS0IYPwuiglN4/WI2sfVDVH1nrBNTrs8uB9sU1Cy2\nE+lj63xOTnQ44KgUbfOWtUpXgNACUqQf0EY4+GA/vAfv39gEaUrUbkQA/cUoc6Gj\nYIvJKCjdPVe4EtOsOXOwtGxkp4B8zrYJUL9bQN0f+jLAUFngtjGDi6s2/2b45YJY\n1Ygs2OH4j/v0JfRAHyOMtQDvfizT9SOwLTqp2fVy+seLaI0PjIhvHV0HHXZ12Jg=\n=WtvU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ad7b6e251634b0f7714e55542bdab9434d1f144\nparent 4c4e8e70bb5f28c9ed7b0b30d70c80261871c8ec\nparent 54883e0a1c8ffb61424bd6bee010dc872445a911\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609807957 +0900\ncommitter GitHub <noreply@github.com> 1609807957 +0900\n\nRollup merge of #80538 - JulianKnodt:err_usize, r=lcnr\n\nAdd check for `[T;N]`/`usize` mismatch in astconv\n\nHelps clarify the issue in #80506\nby adding a specific check for mismatches between [T;N] and usize.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "html_url": "https://github.com/rust-lang/rust/commit/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4e8e70bb5f28c9ed7b0b30d70c80261871c8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4e8e70bb5f28c9ed7b0b30d70c80261871c8ec", "html_url": "https://github.com/rust-lang/rust/commit/4c4e8e70bb5f28c9ed7b0b30d70c80261871c8ec"}, {"sha": "54883e0a1c8ffb61424bd6bee010dc872445a911", "url": "https://api.github.com/repos/rust-lang/rust/commits/54883e0a1c8ffb61424bd6bee010dc872445a911", "html_url": "https://github.com/rust-lang/rust/commit/54883e0a1c8ffb61424bd6bee010dc872445a911"}], "stats": {"total": 136, "additions": 95, "deletions": 41}, "files": [{"sha": "e82eb89ef21e9f88e40c45afa19322a5a76903c2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -3745,6 +3745,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "c14165454ed8f21cffee559b0e251eae77af7ca0", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -9,6 +9,7 @@ doctest = false\n \n [dependencies]\n rustc_target = { path = \"../rustc_target\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_index = { path = \"../rustc_index\" }"}, {"sha": "acd254ae85cb15cb92bcda58f0bc47afdb29a9e8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -290,6 +290,14 @@ impl GenericArg<'_> {\n             GenericArg::Const(_) => \"const\",\n         }\n     }\n+\n+    pub fn to_ord(&self, feats: &rustc_feature::Features) -> ast::ParamKindOrd {\n+        match self {\n+            GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n+            GenericArg::Type(_) => ast::ParamKindOrd::Type,\n+            GenericArg::Const(_) => ast::ParamKindOrd::Const { unordered: feats.const_generics },\n+        }\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "59a3ac9463463d22eac67ec4911de858d08fd80d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -801,6 +801,15 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const => \"constant\",\n         }\n     }\n+    pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n+        match self {\n+            GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n+            GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n+            GenericParamDefKind::Const => {\n+                ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n+            }\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "1100401ed12dde8eb0df5273152822b900914e89", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 51, "deletions": 41, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::GenericArg;\n use rustc_middle::ty::{\n     self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, Ty, TyCtxt,\n };\n-use rustc_session::{lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS, Session};\n+use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, MultiSpan, Span};\n \n use smallvec::SmallVec;\n@@ -20,62 +20,72 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Report an error that a generic argument did not match the generic parameter that was\n     /// expected.\n     fn generic_arg_mismatch_err(\n-        sess: &Session,\n+        tcx: TyCtxt<'_>,\n         arg: &GenericArg<'_>,\n-        kind: &'static str,\n+        param: &GenericParamDef,\n         possible_ordering_error: bool,\n         help: Option<&str>,\n     ) {\n+        let sess = tcx.sess;\n         let mut err = struct_span_err!(\n             sess,\n             arg.span(),\n             E0747,\n             \"{} provided when a {} was expected\",\n             arg.descr(),\n-            kind,\n+            param.kind.descr(),\n         );\n \n-        let unordered = sess.features_untracked().const_generics;\n-        let kind_ord = match kind {\n-            \"lifetime\" => ParamKindOrd::Lifetime,\n-            \"type\" => ParamKindOrd::Type,\n-            \"constant\" => ParamKindOrd::Const { unordered },\n-            // It's more concise to match on the string representation, though it means\n-            // the match is non-exhaustive.\n-            _ => bug!(\"invalid generic parameter kind {}\", kind),\n-        };\n-\n-        if let ParamKindOrd::Const { .. } = kind_ord {\n+        if let GenericParamDefKind::Const { .. } = param.kind {\n             if let GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) = arg {\n                 err.help(\"const arguments cannot yet be inferred with `_`\");\n             }\n         }\n \n-        let arg_ord = match arg {\n-            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n-            GenericArg::Type(_) => ParamKindOrd::Type,\n-            GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n-        };\n-\n-        if matches!(arg, GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }))\n-            && matches!(kind_ord, ParamKindOrd::Const { .. })\n-        {\n-            let suggestions = vec![\n-                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                (arg.span().shrink_to_hi(), String::from(\" }\")),\n-            ];\n-            err.multipart_suggestion(\n-                \"if this generic argument was intended as a const parameter, \\\n+        // Specific suggestion set for diagnostics\n+        match (arg, &param.kind) {\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }),\n+                GenericParamDefKind::Const { .. },\n+            ) => {\n+                let suggestions = vec![\n+                    (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                    (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                ];\n+                err.multipart_suggestion(\n+                    \"if this generic argument was intended as a const parameter, \\\n                 try surrounding it with braces:\",\n-                suggestions,\n-                Applicability::MaybeIncorrect,\n-            );\n+                    suggestions,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n+                GenericParamDefKind::Const { .. },\n+            ) if tcx.type_of(param.def_id) == tcx.types.usize => {\n+                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id));\n+                if let Ok(snippet) = snippet {\n+                    err.span_suggestion(\n+                        arg.span(),\n+                        \"array type provided where a `usize` was expected, try\",\n+                        format!(\"{{ {} }}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            _ => {}\n         }\n \n+        let kind_ord = param.kind.to_ord(tcx);\n+        let arg_ord = arg.to_ord(&tcx.features());\n+\n         // This note is only true when generic parameters are strictly ordered by their kind.\n         if possible_ordering_error && kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n-            let (first, last) =\n-                if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n+            let (first, last) = if kind_ord < arg_ord {\n+                (param.kind.descr(), arg.descr())\n+            } else {\n+                (arg.descr(), param.kind.descr())\n+            };\n             err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n             if let Some(help) = help {\n                 err.help(help);\n@@ -203,7 +213,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(ctx.inferred_kind(None, param, infer_args));\n-                                force_infer_lt = Some(arg);\n+                                force_infer_lt = Some((arg, param));\n                                 params.next();\n                             }\n                             (GenericArg::Lifetime(_), _, ExplicitLateBound::Yes) => {\n@@ -213,7 +223,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // ignore it.\n                                 args.next();\n                             }\n-                            (_, kind, _) => {\n+                            (_, _, _) => {\n                                 // We expected one kind of parameter, but the user provided\n                                 // another. This is an error. However, if we already know that\n                                 // the arguments don't match up with the parameters, we won't issue\n@@ -256,9 +266,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     param_types_present.dedup();\n \n                                     Self::generic_arg_mismatch_err(\n-                                        tcx.sess,\n+                                        tcx,\n                                         arg,\n-                                        kind.descr(),\n+                                        param,\n                                         !args_iter.clone().is_sorted_by_key(|arg| match arg {\n                                             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n                                             GenericArg::Type(_) => ParamKindOrd::Type,\n@@ -315,9 +325,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         {\n                             let kind = arg.descr();\n                             assert_eq!(kind, \"lifetime\");\n-                            let provided =\n+                            let (provided_arg, param) =\n                                 force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n-                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind, false, None);\n+                            Self::generic_arg_mismatch_err(tcx, provided_arg, param, false, None);\n                         }\n \n                         break;"}, {"sha": "f3e5a3186cdd63509d8e3fac70b5b01292299acb", "filename": "src/test/ui/const-generics/suggest_const_for_array.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+\n+fn example<const N: usize>() {}\n+\n+fn other() {\n+  example::<[usize; 3]>();\n+  //~^ ERROR type provided when a const\n+  example::<[usize; 4+5]>();\n+  //~^ ERROR type provided when a const\n+}"}, {"sha": "a617bf2bb0d963c0039227d0d8d244194744a2b3", "filename": "src/test/ui/const-generics/suggest_const_for_array.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr?ref=be2a3f86420f1efa95ee68b6a9f89b5a1e6f810b", "patch": "@@ -0,0 +1,15 @@\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/suggest_const_for_array.rs:6:13\n+   |\n+LL |   example::<[usize; 3]>();\n+   |             ^^^^^^^^^^ help: array type provided where a `usize` was expected, try: `{ 3 }`\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/suggest_const_for_array.rs:8:13\n+   |\n+LL |   example::<[usize; 4+5]>();\n+   |             ^^^^^^^^^^^^ help: array type provided where a `usize` was expected, try: `{ 4+5 }`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0747`."}]}