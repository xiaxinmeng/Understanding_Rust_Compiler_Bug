{"sha": "b650e91cf40500b60475c17ff289e1db761d7836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTBlOTFjZjQwNTAwYjYwNDc1YzE3ZmYyODllMWRiNzYxZDc4MzY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-09T02:48:00Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-09T21:38:40Z"}, "message": "Label unmarked time", "tree": {"sha": "af0c1909e8ecd78ff1728032bd2cd34c225702de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af0c1909e8ecd78ff1728032bd2cd34c225702de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b650e91cf40500b60475c17ff289e1db761d7836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b650e91cf40500b60475c17ff289e1db761d7836", "html_url": "https://github.com/rust-lang/rust/commit/b650e91cf40500b60475c17ff289e1db761d7836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b650e91cf40500b60475c17ff289e1db761d7836/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59eb49d0da83fff01ae3c63f2e282b953e5f88df", "url": "https://api.github.com/repos/rust-lang/rust/commits/59eb49d0da83fff01ae3c63f2e282b953e5f88df", "html_url": "https://github.com/rust-lang/rust/commit/59eb49d0da83fff01ae3c63f2e282b953e5f88df"}], "stats": {"total": 176, "additions": 117, "deletions": 59}, "files": [{"sha": "7436b7b9a4f56e07754a57f05beee2c258e8c58f", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -53,6 +53,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     crate_name: &str,\n     target_cpu: &str,\n ) {\n+    let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n@@ -71,9 +72,11 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             );\n         }\n \n-        for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n-            check_file_is_writeable(obj, sess);\n-        }\n+        sess.time(\"link_binary_check_files_are_writeable\", || {\n+            for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n+                check_file_is_writeable(obj, sess);\n+            }\n+        });\n \n         let tmpdir = TempFileBuilder::new()\n             .prefix(\"rustc\")\n@@ -84,6 +87,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n             match crate_type {\n                 config::CrateType::Rlib => {\n+                    let _timer = sess.timer(\"link_rlib\");\n                     link_rlib::<B>(\n                         sess,\n                         codegen_results,\n@@ -118,29 +122,34 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n-    if !sess.opts.cg.save_temps {\n-        if sess.opts.output_types.should_codegen() && !preserve_objects_for_their_debuginfo(sess) {\n-            for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n-                remove(sess, obj);\n+    sess.time(\"link_binary_remove_temps\", || {\n+        if !sess.opts.cg.save_temps {\n+            if sess.opts.output_types.should_codegen()\n+                && !preserve_objects_for_their_debuginfo(sess)\n+            {\n+                for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n+                    remove(sess, obj);\n+                }\n             }\n-        }\n-        for obj in codegen_results.modules.iter().filter_map(|m| m.bytecode_compressed.as_ref()) {\n-            remove(sess, obj);\n-        }\n-        if let Some(ref metadata_module) = codegen_results.metadata_module {\n-            if let Some(ref obj) = metadata_module.object {\n+            for obj in codegen_results.modules.iter().filter_map(|m| m.bytecode_compressed.as_ref())\n+            {\n                 remove(sess, obj);\n             }\n-        }\n-        if let Some(ref allocator_module) = codegen_results.allocator_module {\n-            if let Some(ref obj) = allocator_module.object {\n-                remove(sess, obj);\n+            if let Some(ref metadata_module) = codegen_results.metadata_module {\n+                if let Some(ref obj) = metadata_module.object {\n+                    remove(sess, obj);\n+                }\n             }\n-            if let Some(ref bc) = allocator_module.bytecode_compressed {\n-                remove(sess, bc);\n+            if let Some(ref allocator_module) = codegen_results.allocator_module {\n+                if let Some(ref obj) = allocator_module.object {\n+                    remove(sess, obj);\n+                }\n+                if let Some(ref bc) = allocator_module.bytecode_compressed {\n+                    remove(sess, bc);\n+                }\n             }\n         }\n-    }\n+    });\n }\n \n // The third parameter is for env vars, used on windows to set up the"}, {"sha": "4d09e23ee7f7a498e51c06240e6f4c6b02c49d4d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -479,6 +479,8 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n         return work_products;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_copy_cgu_workproducts\");\n+\n     for module in compiled_modules.modules.iter().filter(|m| m.kind == ModuleKind::Regular) {\n         let mut files = vec![];\n \n@@ -1714,8 +1716,11 @@ pub struct OngoingCodegen<B: ExtraBackendMethods> {\n \n impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n     pub fn join(self, sess: &Session) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n+        let _timer = sess.timer(\"finish_ongoing_codegen\");\n+\n         self.shared_emitter_main.check(sess, true);\n-        let compiled_modules = match self.future.join() {\n+        let future = self.future;\n+        let compiled_modules = sess.time(\"join_worker_thread\", || match future.join() {\n             Ok(Ok(compiled_modules)) => compiled_modules,\n             Ok(Err(())) => {\n                 sess.abort_if_errors();\n@@ -1724,7 +1729,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             Err(_) => {\n                 bug!(\"panic during codegen/LLVM phase\");\n             }\n-        };\n+        });\n \n         sess.cgu_reuse_tracker.check_expected_reuse(sess.diagnostic());\n "}, {"sha": "892509fc2d66f95717344004b6e9746023ae8502", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -347,6 +347,12 @@ impl<'a> TimingGuard<'a> {\n     pub fn none() -> TimingGuard<'a> {\n         TimingGuard(None)\n     }\n+\n+    #[inline(always)]\n+    pub fn run<R>(self, f: impl FnOnce() -> R) -> R {\n+        let _timer = self;\n+        f()\n+    }\n }\n \n #[must_use]"}, {"sha": "a334124bf7e0078e487c91a91b313d01c94e163b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -389,6 +389,7 @@ pub fn run_compiler(\n                 })?;\n             } else {\n                 // Drop AST after creating GlobalCtxt to free memory\n+                let _timer = sess.prof.generic_activity(\"drop_ast\");\n                 mem::drop(queries.expansion()?.take());\n             }\n \n@@ -408,11 +409,13 @@ pub fn run_compiler(\n                 sess.code_stats.print_type_sizes();\n             }\n \n+            let _timer = sess.timer(\"query_linker\");\n             let linker = queries.linker()?;\n             Ok(Some(linker))\n         })?;\n \n         if let Some(linker) = linker {\n+            let _timer = sess.timer(\"link\");\n             linker.link()?\n         }\n "}, {"sha": "ba20006d73cccf0f4866140bc8dd52379bf0a5de", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -190,6 +190,8 @@ pub fn prepare_session_directory(\n         return;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_prepare_session_directory\");\n+\n     debug!(\"prepare_session_directory\");\n \n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n@@ -306,6 +308,8 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n         return;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_finalize_session_directory\");\n+\n     let incr_comp_session_dir: PathBuf = sess.incr_comp_session_dir().clone();\n \n     if sess.has_errors_or_delayed_span_bugs() {"}, {"sha": "6c57f79e1a7fb911e03edc5ce52a1ce7a249a2e4", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -102,6 +102,8 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n         return MaybeAsync::Sync(LoadResult::Ok { data: Default::default() });\n     }\n \n+    let _timer = sess.prof.generic_activity(\"incr_comp_prepare_load_dep_graph\");\n+\n     // Calling `sess.incr_comp_session_dir()` will panic if `sess.opts.incremental.is_none()`.\n     // Fortunately, we just checked that this isn't the case.\n     let path = dep_graph_path_from(&sess.incr_comp_session_dir());"}, {"sha": "d00875f6fee88f50f03d119205e8bdda4233a53f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -177,11 +177,17 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n         override_queries: config.override_queries,\n     };\n \n-    let _sess_abort_error = OnDrop(|| {\n-        compiler.sess.diagnostic().print_error_count(registry);\n-    });\n+    let r = {\n+        let _sess_abort_error = OnDrop(|| {\n+            compiler.sess.diagnostic().print_error_count(registry);\n+        });\n \n-    f(&compiler)\n+        f(&compiler)\n+    };\n+\n+    let prof = compiler.sess.prof.clone();\n+    prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n+    r\n }\n \n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {"}, {"sha": "76ceeabdb728bcf5a9028270b542c0d3b7b09461", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -163,19 +163,22 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let (krate, features) = rustc_expand::config::features(\n-        krate,\n-        &sess.parse_sess,\n-        sess.edition(),\n-        &sess.opts.debugging_opts.allow_features,\n-    );\n+    let (krate, features) = sess.time(\"compute_features\", || {\n+        rustc_expand::config::features(\n+            krate,\n+            &sess.parse_sess,\n+            sess.edition(),\n+            &sess.opts.debugging_opts.allow_features,\n+        )\n+    });\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n \n     let crate_types = util::collect_crate_types(sess, &krate.attrs);\n     sess.crate_types.set(crate_types);\n \n-    let disambiguator = util::compute_crate_disambiguator(sess);\n+    let disambiguator =\n+        sess.time(\"compute_crate_disambiguator\", || util::compute_crate_disambiguator(sess));\n     sess.crate_disambiguator.set(disambiguator);\n     rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator);\n \n@@ -611,6 +614,8 @@ pub fn prepare_outputs(\n     boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n     crate_name: &str,\n ) -> Result<OutputFilenames> {\n+    let _timer = sess.timer(\"prepare_outputs\");\n+\n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n     let outputs = util::build_output_filenames(\n         &compiler.input,\n@@ -721,33 +726,40 @@ pub fn create_global_ctxt<'tcx>(\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n-    let codegen_backend = compiler.codegen_backend();\n-    let mut local_providers = ty::query::Providers::default();\n-    default_provide(&mut local_providers);\n-    codegen_backend.provide(&mut local_providers);\n+    let codegen_backend = sess.time(\"load_codegen_backend\", || compiler.codegen_backend());\n \n-    let mut extern_providers = local_providers;\n-    default_provide_extern(&mut extern_providers);\n-    codegen_backend.provide_extern(&mut extern_providers);\n+    let (local_providers, extern_providers) = sess.time(\"load_codegen_backend\", || {\n+        let mut local_providers = ty::query::Providers::default();\n+        default_provide(&mut local_providers);\n+        codegen_backend.provide(&mut local_providers);\n \n-    if let Some(callback) = compiler.override_queries {\n-        callback(sess, &mut local_providers, &mut extern_providers);\n-    }\n+        let mut extern_providers = local_providers;\n+        default_provide_extern(&mut extern_providers);\n+        codegen_backend.provide_extern(&mut extern_providers);\n \n-    let gcx = global_ctxt.init_locking(|| {\n-        TyCtxt::create_global_ctxt(\n-            sess,\n-            lint_store,\n-            local_providers,\n-            extern_providers,\n-            &all_arenas,\n-            arena,\n-            resolver_outputs,\n-            hir_map,\n-            query_result_on_disk_cache,\n-            &crate_name,\n-            &outputs,\n-        )\n+        if let Some(callback) = compiler.override_queries {\n+            callback(sess, &mut local_providers, &mut extern_providers);\n+        }\n+\n+        (local_providers, extern_providers)\n+    });\n+\n+    let gcx = sess.time(\"setup_global_ctxt\", || {\n+        global_ctxt.init_locking(|| {\n+            TyCtxt::create_global_ctxt(\n+                sess,\n+                lint_store,\n+                local_providers,\n+                extern_providers,\n+                &all_arenas,\n+                arena,\n+                resolver_outputs,\n+                hir_map,\n+                query_result_on_disk_cache,\n+                &crate_name,\n+                &outputs,\n+            )\n+        })\n     });\n \n     // Do some initialization of the DepGraph that can only be done with the tcx available."}, {"sha": "3ec043624accbd182d81ee1c3982f6cc3622b5c9", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b650e91cf40500b60475c17ff289e1db761d7836/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=b650e91cf40500b60475c17ff289e1db761d7836", "patch": "@@ -158,6 +158,7 @@ impl<'tcx> Queries<'tcx> {\n             Ok(match self.compiler.crate_name {\n                 Some(ref crate_name) => crate_name.clone(),\n                 None => {\n+                    let _timer = self.session().timer(\"crate_name\");\n                     let parse_result = self.parse()?;\n                     let krate = parse_result.peek();\n                     rustc_codegen_utils::link::find_crate_name(\n@@ -176,6 +177,7 @@ impl<'tcx> Queries<'tcx> {\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, lint_store) = self.register_plugins()?.take();\n+            let _timer = self.session().timer(\"configure_and_expand\");\n             passes::configure_and_expand(\n                 self.session().clone(),\n                 lint_store.clone(),\n@@ -256,6 +258,7 @@ impl<'tcx> Queries<'tcx> {\n             let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?.peek();\n             let (ref hir_forest, ref resolver_outputs) = &*hir;\n+            let _timer = self.session().timer(\"create_global_ctxt\");\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n@@ -312,14 +315,19 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        self.codegen_backend\n+        let r = self\n+            .codegen_backend\n             .join_codegen_and_link(\n                 self.ongoing_codegen,\n                 &self.sess,\n                 &self.dep_graph,\n                 &self.prepare_outputs,\n             )\n-            .map_err(|_| ErrorReported)\n+            .map_err(|_| ErrorReported);\n+        let prof = self.sess.prof.clone();\n+        let dep_graph = self.dep_graph;\n+        prof.generic_activity(\"drop_dep_graph\").run(move || drop(dep_graph));\n+        r\n     }\n }\n \n@@ -328,6 +336,7 @@ impl Compiler {\n     where\n         F: for<'tcx> FnOnce(&'tcx Queries<'tcx>) -> T,\n     {\n+        let mut _timer = None;\n         let queries = Queries::new(&self);\n         let ret = f(&queries);\n \n@@ -337,6 +346,8 @@ impl Compiler {\n             }\n         }\n \n+        _timer = Some(self.session().timer(\"free_global_ctxt\"));\n+\n         ret\n     }\n "}]}