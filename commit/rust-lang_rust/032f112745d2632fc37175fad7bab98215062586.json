{"sha": "032f112745d2632fc37175fad7bab98215062586", "node_id": "C_kwDOAAsO6NoAKDAzMmYxMTI3NDVkMjYzMmZjMzcxNzVmYWQ3YmFiOTgyMTUwNjI1ODY", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-07-08T09:30:17Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-08-16T22:34:51Z"}, "message": "Fix adjacent code", "tree": {"sha": "b2320bfe290fe0362d64a03498172fd70d431764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2320bfe290fe0362d64a03498172fd70d431764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032f112745d2632fc37175fad7bab98215062586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032f112745d2632fc37175fad7bab98215062586", "html_url": "https://github.com/rust-lang/rust/commit/032f112745d2632fc37175fad7bab98215062586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032f112745d2632fc37175fad7bab98215062586/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05cb74d3080f0359a97c7380913edd2a5ebe7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05cb74d3080f0359a97c7380913edd2a5ebe7ee", "html_url": "https://github.com/rust-lang/rust/commit/a05cb74d3080f0359a97c7380913edd2a5ebe7ee"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "92b2771f3fe73aeccc27b51c1edd243108f0e35d", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -37,7 +37,7 @@ fn update_reference_file(test_output_entry: &DirEntry, ignore_timestamp: bool) {\n         return;\n     }\n \n-    let test_output_file = fs::read(&test_output_path).expect(\"Unable to read test output file\");\n+    let test_output_file = fs::read(test_output_path).expect(\"Unable to read test output file\");\n     let reference_file = fs::read(&reference_file_path).unwrap_or_default();\n \n     if test_output_file != reference_file {"}, {"sha": "357cf6fc43aadada9baabbce3ac08cd70c5d0f93", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -46,7 +46,7 @@ pub fn run(check: bool, verbose: bool) {\n         // dependency\n         if fs::read_to_string(project_root.join(\"Cargo.toml\"))\n             .expect(\"Failed to read clippy Cargo.toml\")\n-            .contains(&\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\")\n+            .contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\")\n         {\n             return Err(CliError::IntellijSetupActive);\n         }\n@@ -193,10 +193,10 @@ fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n     let args = &[\"--version\"];\n \n     if context.verbose {\n-        println!(\"{}\", format_command(&program, &dir, args));\n+        println!(\"{}\", format_command(program, &dir, args));\n     }\n \n-    let output = Command::new(&program).current_dir(&dir).args(args.iter()).output()?;\n+    let output = Command::new(program).current_dir(&dir).args(args.iter()).output()?;\n \n     if output.status.success() {\n         Ok(())\n@@ -207,7 +207,7 @@ fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n         Err(CliError::RustfmtNotInstalled)\n     } else {\n         Err(CliError::CommandFailed(\n-            format_command(&program, &dir, args),\n+            format_command(program, &dir, args),\n             std::str::from_utf8(&output.stderr).unwrap_or(\"\").to_string(),\n         ))\n     }"}, {"sha": "c503142e5e4552b1cdc28877dca9ab3734ba2083", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -418,7 +418,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n             .expect(\"failed to find `impl_lint_pass` terminator\");\n \n         impl_lint_pass_end += impl_lint_pass_start;\n-        if let Some(lint_name_pos) = content[impl_lint_pass_start..impl_lint_pass_end].find(&lint_name_upper) {\n+        if let Some(lint_name_pos) = content[impl_lint_pass_start..impl_lint_pass_end].find(lint_name_upper) {\n             let mut lint_name_end = impl_lint_pass_start + (lint_name_pos + lint_name_upper.len());\n             for c in content[lint_name_end..impl_lint_pass_end].chars() {\n                 // Remove trailing whitespace\n@@ -451,7 +451,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                 }\n \n                 let mut content =\n-                    fs::read_to_string(&path).unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n+                    fs::read_to_string(path).unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n \n                 eprintln!(\n                     \"warn: you will have to manually remove any code related to `{}` from `{}`\","}, {"sha": "429dddc42ea9157f6830be6792489b3ab3d08f95", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -84,7 +84,7 @@ impl std::fmt::Debug for VersionInfo {\n #[must_use]\n pub fn get_commit_hash() -> Option<String> {\n     std::process::Command::new(\"git\")\n-        .args(&[\"rev-parse\", \"--short\", \"HEAD\"])\n+        .args([\"rev-parse\", \"--short\", \"HEAD\"])\n         .output()\n         .ok()\n         .and_then(|r| String::from_utf8(r.stdout).ok())\n@@ -93,7 +93,7 @@ pub fn get_commit_hash() -> Option<String> {\n #[must_use]\n pub fn get_commit_date() -> Option<String> {\n     std::process::Command::new(\"git\")\n-        .args(&[\"log\", \"-1\", \"--date=short\", \"--pretty=format:%cd\"])\n+        .args([\"log\", \"-1\", \"--date=short\", \"--pretty=format:%cd\"])\n         .output()\n         .ok()\n         .and_then(|r| String::from_utf8(r.stdout).ok())"}, {"sha": "e106583de4a2eb0a099d145cafe71b60453c2ef2", "filename": "tests/check-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fcheck-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fcheck-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcheck-fmt.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -13,7 +13,7 @@ fn fmt() {\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     let output = Command::new(\"cargo\")\n         .current_dir(root_dir)\n-        .args(&[\"dev\", \"fmt\", \"--check\"])\n+        .args([\"dev\", \"fmt\", \"--check\"])\n         .output()\n         .unwrap();\n "}, {"sha": "961525bbd9101dfbc6759f69ba3f05d7aa94e170", "filename": "tests/dogfood.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -87,11 +87,11 @@ fn run_clippy_for_package(project: &str, args: &[&str]) {\n \n     if cfg!(feature = \"internal\") {\n         // internal lints only exist if we build with the internal feature\n-        command.args(&[\"-D\", \"clippy::internal\"]);\n+        command.args([\"-D\", \"clippy::internal\"]);\n     } else {\n         // running a clippy built without internal lints on the clippy source\n         // that contains e.g. `allow(clippy::invalid_paths)`\n-        command.args(&[\"-A\", \"unknown_lints\"]);\n+        command.args([\"-A\", \"unknown_lints\"]);\n     }\n \n     let output = command.output().unwrap();"}, {"sha": "23a9bef3ccceaee4b9df52ecb40afb848e8f1873", "filename": "tests/integration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -19,7 +19,7 @@ fn integration_test() {\n     repo_dir.push(crate_name);\n \n     let st = Command::new(\"git\")\n-        .args(&[\n+        .args([\n             OsStr::new(\"clone\"),\n             OsStr::new(\"--depth=1\"),\n             OsStr::new(&repo_url),\n@@ -37,7 +37,7 @@ fn integration_test() {\n         .current_dir(repo_dir)\n         .env(\"RUST_BACKTRACE\", \"full\")\n         .env(\"CARGO_TARGET_DIR\", target_dir)\n-        .args(&[\n+        .args([\n             \"clippy\",\n             \"--all-targets\",\n             \"--all-features\","}, {"sha": "2e0f4e76075b38a1eaec8e6380001dcd5109886a", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -19,7 +19,7 @@ impl Message {\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n         // also no punctuation (except for \"?\" ?) at the end of a line\n         static REGEX_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n-            RegexSet::new(&[\n+            RegexSet::new([\n                 r\"error: [A-Z]\",\n                 r\"help: [A-Z]\",\n                 r\"warning: [A-Z]\",\n@@ -37,7 +37,7 @@ impl Message {\n         // sometimes the first character is capitalized and it is legal (like in \"C-like enum variants\") or\n         // we want to ask a question ending in \"?\"\n         static EXCEPTIONS_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n-            RegexSet::new(&[\n+            RegexSet::new([\n                 r\"\\.\\.\\.$\",\n                 r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n                 r\".*Intel x86 assembly syntax used\","}, {"sha": "f0e1a8128d7c36b5bc44d3d77c7ee270988780d7", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused)]\n+#![allow(unused, clippy::needless_borrow)]\n #![warn(clippy::invalid_regex, clippy::trivial_regex)]\n \n extern crate regex;"}, {"sha": "af01a8df71b015cff39987006088878f8a4db000", "filename": "tests/ui/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -151,6 +151,7 @@ fn main() {\n \n     // Fix #6987\n     let mut vec = Vec::new();\n+    #[allow(clippy::needless_borrow)]\n     for _ in 0..10 {\n         vec.push(1);\n         vec.extend(&[2]);"}, {"sha": "df267e9872a0a0a6bdd6984c7aeca3e77c4e4d88", "filename": "tests/ui/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fui%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fverbose_file_reads.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -18,7 +18,7 @@ fn main() -> std::io::Result<()> {\n     s.read_to_end();\n     s.read_to_string();\n     // Should catch this\n-    let mut f = File::open(&path)?;\n+    let mut f = File::open(path)?;\n     let mut buffer = Vec::new();\n     f.read_to_end(&mut buffer)?;\n     // ...and this"}, {"sha": "95325e06037829c2fb9a519f5b3a50e10ddee1e1", "filename": "tests/workspace.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/032f112745d2632fc37175fad7bab98215062586/tests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f112745d2632fc37175fad7bab98215062586/tests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace.rs?ref=032f112745d2632fc37175fad7bab98215062586", "patch": "@@ -20,8 +20,8 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         .current_dir(&cwd)\n         .env(\"CARGO_TARGET_DIR\", &target_dir)\n         .arg(\"clean\")\n-        .args(&[\"-p\", \"subcrate\"])\n-        .args(&[\"-p\", \"path_dep\"])\n+        .args([\"-p\", \"subcrate\"])\n+        .args([\"-p\", \"path_dep\"])\n         .output()\n         .unwrap();\n \n@@ -32,11 +32,11 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n         .env(\"CARGO_TARGET_DIR\", &target_dir)\n         .arg(\"clippy\")\n-        .args(&[\"-p\", \"subcrate\"])\n+        .args([\"-p\", \"subcrate\"])\n         .arg(\"--no-deps\")\n         .arg(\"--\")\n         .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-        .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+        .args([\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n         .output()\n         .unwrap();\n     println!(\"status: {}\", output.status);\n@@ -52,10 +52,10 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .env(\"CARGO_TARGET_DIR\", &target_dir)\n             .arg(\"clippy\")\n-            .args(&[\"-p\", \"subcrate\"])\n+            .args([\"-p\", \"subcrate\"])\n             .arg(\"--\")\n             .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .args([\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n             .output()\n             .unwrap();\n         println!(\"status: {}\", output.status);\n@@ -79,7 +79,7 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .env(\"CARGO_TARGET_DIR\", &target_dir)\n             .arg(\"clippy\")\n-            .args(&[\"-p\", \"subcrate\"])\n+            .args([\"-p\", \"subcrate\"])\n             .arg(\"--\")\n             .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n             .output()"}]}