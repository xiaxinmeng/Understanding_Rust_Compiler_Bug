{"sha": "e892e32df48f9fc180e085fe0d8a4969525c0130", "node_id": "C_kwDOAAsO6NoAKGU4OTJlMzJkZjQ4ZjlmYzE4MGUwODVmZTBkOGE0OTY5NTI1YzAxMzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-20T06:51:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-20T06:51:00Z"}, "message": "Rollup merge of #111665 - est31:offset_of_tests, r=WaffleLapkin\n\nAdd more tests for the offset_of macro\n\nImplements what I [suggested in the tracking issue](https://github.com/rust-lang/rust/issues/106655#issuecomment-1535007205), plus some further improvements:\n\n* ensuring that offset_of!(Self, ...) works iff inside an impl block\n* ensuring that the output type is usize and doesn't coerce. this can be changed in the future, but if it is done, it should be a conscious decision\n* improving the privacy checking test\n* ensuring that generics don't let you escape the unsized check\n\nr? `````@WaffleLapkin`````", "tree": {"sha": "2558d635a673efac0474da4b7cc05e9b4cfdc0f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2558d635a673efac0474da4b7cc05e9b4cfdc0f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e892e32df48f9fc180e085fe0d8a4969525c0130", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaG3UCRBK7hj4Ov3rIwAAEcAIABDpjI+WWZebRO+9jFfRy5uM\nsFVybMxl+JYe7kkJSNIeTxrV259VojjY7aeQyJ4TPasieBJysl7+yK/AxLEk7N+D\nXL/ClDcfAg0oT2soalqApZnta7wCcNZ4bDitDlnRMwc6QVOjR9rjBxSSYCoIq878\noT5UWlfeEJUJGkJsT0ebK3ZH75nCox0F8hxqMyBS2bNvkiTOs0LwMhkAYpwvkub7\nkKpGHdyLG2BoeO/Lh+EYtZomytm4Fj0LCpr7/TO56EEwFaIKEsLpNNUU6T+bOCs1\nUVhGQ/leuf8vZ/73zQqkvoymHTPGyuV1TEuE2pu3K/Cfh/DRWLZ0I464CR/TvZA=\n=qy1U\n-----END PGP SIGNATURE-----\n", "payload": "tree 2558d635a673efac0474da4b7cc05e9b4cfdc0f1\nparent 13f3585dc6ad4332a171b3ff9a6a3c933241dbb0\nparent 30c0e4e72b85c7d125dd05a071027965e2236d64\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684565460 +0530\ncommitter GitHub <noreply@github.com> 1684565460 +0530\n\nRollup merge of #111665 - est31:offset_of_tests, r=WaffleLapkin\n\nAdd more tests for the offset_of macro\n\nImplements what I [suggested in the tracking issue](https://github.com/rust-lang/rust/issues/106655#issuecomment-1535007205), plus some further improvements:\n\n* ensuring that offset_of!(Self, ...) works iff inside an impl block\n* ensuring that the output type is usize and doesn't coerce. this can be changed in the future, but if it is done, it should be a conscious decision\n* improving the privacy checking test\n* ensuring that generics don't let you escape the unsized check\n\nr? `````@WaffleLapkin`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e892e32df48f9fc180e085fe0d8a4969525c0130", "html_url": "https://github.com/rust-lang/rust/commit/e892e32df48f9fc180e085fe0d8a4969525c0130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e892e32df48f9fc180e085fe0d8a4969525c0130/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f3585dc6ad4332a171b3ff9a6a3c933241dbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f3585dc6ad4332a171b3ff9a6a3c933241dbb0", "html_url": "https://github.com/rust-lang/rust/commit/13f3585dc6ad4332a171b3ff9a6a3c933241dbb0"}, {"sha": "30c0e4e72b85c7d125dd05a071027965e2236d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c0e4e72b85c7d125dd05a071027965e2236d64", "html_url": "https://github.com/rust-lang/rust/commit/30c0e4e72b85c7d125dd05a071027965e2236d64"}], "stats": {"total": 352, "additions": 345, "deletions": 7}, "files": [{"sha": "0a9850146e5a3c11299567640c3301083214b71a", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -386,6 +386,21 @@ fn offset_of() {\n     // Layout of tuples is unstable\n     assert!(offset_of!((u8, u16), 0) <= size_of::<(u8, u16)>() - 1);\n     assert!(offset_of!((u8, u16), 1) <= size_of::<(u8, u16)>() - 2);\n+\n+    #[repr(C)]\n+    struct Generic<T> {\n+        x: u8,\n+        y: u32,\n+        z: T\n+    }\n+\n+    // Ensure that this type of generics works\n+    fn offs_of_z<T>() -> usize {\n+        offset_of!(Generic<T>, z)\n+    }\n+\n+    assert_eq!(offset_of!(Generic<u8>, z), 8);\n+    assert_eq!(offs_of_z::<u8>(), 8);\n }\n \n #[test]"}, {"sha": "89e73b8c6b84d96c5942aa2d40be22a3f8a96747", "filename": "tests/ui/offset-of/offset-of-dst-field.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -26,8 +26,23 @@ struct Gamma {\n     z: Extern,\n }\n \n+struct Delta<T: ?Sized> {\n+    x: u8,\n+    y: u16,\n+    z: T,\n+}\n+\n fn main() {\n     offset_of!(Alpha, z); //~ ERROR the size for values of type\n     offset_of!(Beta, z); //~ ERROR the size for values of type\n     offset_of!(Gamma, z); //~ ERROR the size for values of type\n }\n+\n+fn delta() {\n+    offset_of!(Delta<Alpha>, z); //~ ERROR the size for values of type\n+    offset_of!(Delta<Extern>, z); //~ ERROR the size for values of type\n+}\n+\n+fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+    offset_of!(Delta<T>, z) //~ ERROR the size for values of type\n+}"}, {"sha": "992eab3d4bdf03d5c7ceb8ec2fca55ec6cac1015", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:30:5\n+  --> $DIR/offset-of-dst-field.rs:36:5\n    |\n LL |     offset_of!(Alpha, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -8,7 +8,7 @@ LL |     offset_of!(Alpha, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:31:5\n+  --> $DIR/offset-of-dst-field.rs:37:5\n    |\n LL |     offset_of!(Beta, z);\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -17,14 +17,52 @@ LL |     offset_of!(Beta, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:32:5\n+  --> $DIR/offset-of-dst-field.rs:38:5\n    |\n LL |     offset_of!(Gamma, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `Extern`\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:43:5\n+   |\n+LL |     offset_of!(Delta<Extern>, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `Extern`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:42:5\n+   |\n+LL |     offset_of!(Delta<Alpha>, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `Alpha`, the trait `Sized` is not implemented for `[u8]`\n+note: required because it appears within the type `Alpha`\n+  --> $DIR/offset-of-dst-field.rs:5:8\n+   |\n+LL | struct Alpha {\n+   |        ^^^^^\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:47:5\n+   |\n+LL | fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+   |                             - this type parameter needs to be `std::marker::Sized`\n+LL |     offset_of!(Delta<T>, z)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+LL + fn generic_with_maybe_sized<T>() -> usize {\n+   |\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "50c2e93841f9f25ea7a0135b9362cd5020dde194", "filename": "tests/ui/offset-of/offset-of-output-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -0,0 +1,20 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+struct S {\n+    v: u8,\n+    w: u16,\n+}\n+\n+\n+fn main() {\n+    let _: u8 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u16 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u32 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u64 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: isize = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: usize = offset_of!(S, v);\n+\n+    offset_of!(S, v) //~ ERROR mismatched types\n+}"}, {"sha": "6f8c94750299eafb051beed36ab670aae9b7d613", "filename": "tests/ui/offset-of/offset-of-output-type.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -0,0 +1,64 @@\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:12:17\n+   |\n+LL |     let _: u8 = offset_of!(S, v);\n+   |            --   ^^^^^^^^^^^^^^^^ expected `u8`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:13:18\n+   |\n+LL |     let _: u16 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u16`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:14:18\n+   |\n+LL |     let _: u32 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u32`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:15:18\n+   |\n+LL |     let _: u64 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:16:20\n+   |\n+LL |     let _: isize = offset_of!(S, v);\n+   |            -----   ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:19:5\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+...\n+LL |     offset_of!(S, v)\n+   |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6b1a16ba62b67e34129b330c079e97c3681c7619", "filename": "tests/ui/offset-of/offset-of-private.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.rs?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -8,9 +8,21 @@ mod m {\n         pub public: u8,\n         private: u8,\n     }\n+    #[repr(C)]\n+    pub struct FooTuple(pub u8, u8);\n+    #[repr(C)]\n+    struct Bar {\n+        pub public: u8,\n+        private: u8,\n+    }\n }\n \n fn main() {\n     offset_of!(m::Foo, public);\n     offset_of!(m::Foo, private); //~ ERROR field `private` of struct `Foo` is private\n+    offset_of!(m::FooTuple, 0);\n+    offset_of!(m::FooTuple, 1); //~ ERROR field `1` of struct `FooTuple` is private\n+    offset_of!(m::Bar, public); //~ ERROR struct `Bar` is private\n+    offset_of!(m::Bar, private); //~ ERROR struct `Bar` is private\n+    //~| ERROR field `private` of struct `Bar` is private\n }"}, {"sha": "0674b58f8608cd195bffd28ccf31c58c7bd0acc6", "filename": "tests/ui/offset-of/offset-of-private.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -1,9 +1,46 @@\n+error[E0603]: struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:25:19\n+   |\n+LL |     offset_of!(m::Bar, public);\n+   |                   ^^^ private struct\n+   |\n+note: the struct `Bar` is defined here\n+  --> $DIR/offset-of-private.rs:14:5\n+   |\n+LL |     struct Bar {\n+   |     ^^^^^^^^^^\n+\n+error[E0603]: struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:26:19\n+   |\n+LL |     offset_of!(m::Bar, private);\n+   |                   ^^^ private struct\n+   |\n+note: the struct `Bar` is defined here\n+  --> $DIR/offset-of-private.rs:14:5\n+   |\n+LL |     struct Bar {\n+   |     ^^^^^^^^^^\n+\n error[E0616]: field `private` of struct `Foo` is private\n-  --> $DIR/offset-of-private.rs:15:24\n+  --> $DIR/offset-of-private.rs:22:24\n    |\n LL |     offset_of!(m::Foo, private);\n    |                        ^^^^^^^ private field\n \n-error: aborting due to previous error\n+error[E0616]: field `1` of struct `FooTuple` is private\n+  --> $DIR/offset-of-private.rs:24:29\n+   |\n+LL |     offset_of!(m::FooTuple, 1);\n+   |                             ^ private field\n+\n+error[E0616]: field `private` of struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:26:24\n+   |\n+LL |     offset_of!(m::Bar, private);\n+   |                        ^^^^^^^ private field\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0616`.\n+Some errors have detailed explanations: E0603, E0616.\n+For more information about an error, try `rustc --explain E0603`."}, {"sha": "dbeef0e74dc37f7362d6145ad257d3eb55407af0", "filename": "tests/ui/offset-of/offset-of-self.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-self.rs?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -0,0 +1,58 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+struct C<T> {\n+    v: T,\n+    w: T,\n+}\n+\n+struct S {\n+    v: u8,\n+    w: u16,\n+}\n+\n+impl S {\n+    fn v_offs() -> usize {\n+        offset_of!(Self, v)\n+    }\n+    fn v_offs_wrong_syntax() {\n+        offset_of!(Self, Self::v); //~ ERROR no rules expected the token `::`\n+        offset_of!(S, Self); //~ ERROR expected identifier, found keyword `Self`\n+        //~| no field `Self` on type `S`\n+    }\n+    fn offs_in_c() -> usize {\n+        offset_of!(C<Self>, w)\n+    }\n+    fn offs_in_c_colon() -> usize {\n+        offset_of!(C::<Self>, w)\n+    }\n+}\n+\n+mod m {\n+    use std::mem::offset_of;\n+    fn off() {\n+        offset_of!(self::S, v); //~ ERROR cannot find type `S` in module\n+        offset_of!(super::S, v);\n+        offset_of!(crate::S, v);\n+    }\n+    impl super::n::T {\n+        fn v_offs_self() -> usize {\n+            offset_of!(Self, v) //~ ERROR field `v` of struct `T` is private\n+        }\n+    }\n+}\n+\n+mod n {\n+    pub struct T { v: u8, }\n+}\n+\n+fn main() {\n+    offset_of!(self::S, v);\n+    offset_of!(Self, v); //~ ERROR cannot find type `Self` in this scope\n+\n+    offset_of!(S, self); //~ ERROR expected identifier, found keyword `self`\n+    //~| no field `self` on type `S`\n+    offset_of!(S, v.self); //~ ERROR expected identifier, found keyword `self`\n+    //~| no field `self` on type `u8`\n+}"}, {"sha": "df555463f98842984269286258c2011a77634355", "filename": "tests/ui/offset-of/offset-of-self.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e892e32df48f9fc180e085fe0d8a4969525c0130/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr?ref=e892e32df48f9fc180e085fe0d8a4969525c0130", "patch": "@@ -0,0 +1,79 @@\n+error: no rules expected the token `::`\n+  --> $DIR/offset-of-self.rs:20:30\n+   |\n+LL |         offset_of!(Self, Self::v);\n+   |                              ^^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n+\n+error: expected identifier, found keyword `Self`\n+  --> $DIR/offset-of-self.rs:21:23\n+   |\n+LL |         offset_of!(S, Self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected identifier, found keyword `self`\n+  --> $DIR/offset-of-self.rs:54:19\n+   |\n+LL |     offset_of!(S, self);\n+   |                   ^^^^ expected identifier, found keyword\n+\n+error: expected identifier, found keyword `self`\n+  --> $DIR/offset-of-self.rs:56:21\n+   |\n+LL |     offset_of!(S, v.self);\n+   |                     ^^^^ expected identifier, found keyword\n+\n+error[E0412]: cannot find type `S` in module `self`\n+  --> $DIR/offset-of-self.rs:35:26\n+   |\n+LL |         offset_of!(self::S, v);\n+   |                          ^ not found in `self`\n+   |\n+help: consider importing this struct\n+   |\n+LL +     use S;\n+   |\n+help: if you import `S`, refer to it directly\n+   |\n+LL -         offset_of!(self::S, v);\n+LL +         offset_of!(S, v);\n+   |\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/offset-of-self.rs:52:16\n+   |\n+LL | fn main() {\n+   |    ---- `Self` not allowed in a function\n+LL |     offset_of!(self::S, v);\n+LL |     offset_of!(Self, v);\n+   |                ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0609]: no field `Self` on type `S`\n+  --> $DIR/offset-of-self.rs:21:23\n+   |\n+LL |         offset_of!(S, Self);\n+   |                       ^^^^\n+\n+error[E0616]: field `v` of struct `T` is private\n+  --> $DIR/offset-of-self.rs:41:30\n+   |\n+LL |             offset_of!(Self, v)\n+   |                              ^ private field\n+\n+error[E0609]: no field `self` on type `S`\n+  --> $DIR/offset-of-self.rs:54:19\n+   |\n+LL |     offset_of!(S, self);\n+   |                   ^^^^\n+\n+error[E0609]: no field `self` on type `u8`\n+  --> $DIR/offset-of-self.rs:56:21\n+   |\n+LL |     offset_of!(S, v.self);\n+   |                     ^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0411, E0412, E0609, E0616.\n+For more information about an error, try `rustc --explain E0411`."}]}