{"sha": "610f82726172c26d0a9f72fee3d72caad9bdb514", "node_id": "C_kwDOAAsO6NoAKDYxMGY4MjcyNjE3MmMyNmQwYTlmNzJmZWUzZDcyY2FhZDliZGI1MTQ", "commit": {"author": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2023-04-21T14:45:17Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2023-04-21T17:15:04Z"}, "message": "junit: also include per-case stdout in xml\n\nBy placing the stdout in a CDATA block we avoid almost all escaping, as\nthere's only two byte sequences you can't sneak into a CDATA and you can\nhandle that with some only slightly regrettable CDATA-splitting. I've\ndone this in at least two other implementations of the junit xml format\nover the years and it's always worked out. The only quirk new to this\n(for me) is smuggling newlines as &#xA; to avoid literal newlines in the\noutput.", "tree": {"sha": "45db417d15e169f1cb5ef6fa45831f4147189615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45db417d15e169f1cb5ef6fa45831f4147189615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610f82726172c26d0a9f72fee3d72caad9bdb514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610f82726172c26d0a9f72fee3d72caad9bdb514", "html_url": "https://github.com/rust-lang/rust/commit/610f82726172c26d0a9f72fee3d72caad9bdb514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610f82726172c26d0a9f72fee3d72caad9bdb514/comments", "author": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77f636c6339d97ef3fa790f974d56b182cd59d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77f636c6339d97ef3fa790f974d56b182cd59d1", "html_url": "https://github.com/rust-lang/rust/commit/d77f636c6339d97ef3fa790f974d56b182cd59d1"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "65883dd36a16901859ebbac66d2bcac656fb52e0", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/610f82726172c26d0a9f72fee3d72caad9bdb514/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610f82726172c26d0a9f72fee3d72caad9bdb514/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=610f82726172c26d0a9f72fee3d72caad9bdb514", "patch": "@@ -11,7 +11,7 @@ use crate::{\n \n pub struct JunitFormatter<T> {\n     out: OutputLocation<T>,\n-    results: Vec<(TestDesc, TestResult, Duration)>,\n+    results: Vec<(TestDesc, TestResult, Duration, Vec<u8>)>,\n }\n \n impl<T: Write> JunitFormatter<T> {\n@@ -26,6 +26,18 @@ impl<T: Write> JunitFormatter<T> {\n     }\n }\n \n+fn str_to_cdata(s: &str) -> String {\n+    // Drop the stdout in a cdata. Unfortunately, you can't put either of `]]>` or\n+    // `<?'` in a CDATA block, so the escaping gets a little weird.\n+    let escaped_output = s.replace(\"]]>\", \"]]]]><![CDATA[>\");\n+    let escaped_output = escaped_output.replace(\"<?\", \"<]]><![CDATA[?\");\n+    // We also smuggle newlines as &#xa so as to keep all the output on line line\n+    let escaped_output = escaped_output.replace(\"\\n\", \"]]>&#xA;<![CDATA[\");\n+    // Prune empty CDATA blocks resulting from any escaping\n+    let escaped_output = escaped_output.replace(\"<![CDATA[]]>\", \"\");\n+    format!(\"<![CDATA[{}]]>\", escaped_output)\n+}\n+\n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_discovery_start(&mut self) -> io::Result<()> {\n         Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n@@ -63,14 +75,14 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         desc: &TestDesc,\n         result: &TestResult,\n         exec_time: Option<&time::TestExecTime>,\n-        _stdout: &[u8],\n+        stdout: &[u8],\n         _state: &ConsoleTestState,\n     ) -> io::Result<()> {\n         // Because the testsuite node holds some of the information as attributes, we can't write it\n         // until all of the tests have finished. Instead of writing every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n         let duration = exec_time.map(|t| t.0).unwrap_or_default();\n-        self.results.push((desc.clone(), result.clone(), duration));\n+        self.results.push((desc.clone(), result.clone(), duration, stdout.to_vec()));\n         Ok(())\n     }\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n@@ -85,7 +97,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::take(&mut self.results) {\n+        for (desc, result, duration, stdout) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n@@ -98,6 +110,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -110,6 +127,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -136,11 +158,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 TestResult::TrOk => {\n                     self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n-                         name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n+                         name=\\\"{}\\\" time=\\\"{}\\\"\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n+                    if stdout.is_empty() {\n+                        self.write_message(\"/>\")?;\n+                    } else {\n+                        self.write_message(\"><system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                        self.write_message(\"</testcase>\")?;\n+                    }\n                 }\n             }\n         }"}, {"sha": "0c300611e1f76c1fd71957f51c4f24af77b636bb", "filename": "tests/run-make/libtest-junit/output-default.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610f82726172c26d0a9f72fee3d72caad9bdb514/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "raw_url": "https://github.com/rust-lang/rust/raw/610f82726172c26d0a9f72fee3d72caad9bdb514/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml?ref=610f82726172c26d0a9f72fee3d72caad9bdb514", "patch": "@@ -1 +1 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"/><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"/><system-out/><system-err/></testsuite></testsuites>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"><system-out><![CDATA[print from successful test]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"><system-out><![CDATA[thread 'c' panicked at 'assertion failed: false', f.rs:16:5]]>&#xA;<![CDATA[]]></system-out></testcase><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "0c300611e1f76c1fd71957f51c4f24af77b636bb", "filename": "tests/run-make/libtest-junit/output-stdout-success.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610f82726172c26d0a9f72fee3d72caad9bdb514/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "raw_url": "https://github.com/rust-lang/rust/raw/610f82726172c26d0a9f72fee3d72caad9bdb514/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml?ref=610f82726172c26d0a9f72fee3d72caad9bdb514", "patch": "@@ -1 +1 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"/><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"/><system-out/><system-err/></testsuite></testsuites>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"><system-out><![CDATA[print from successful test]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"><system-out><![CDATA[thread 'c' panicked at 'assertion failed: false', f.rs:16:5]]>&#xA;<![CDATA[]]></system-out></testcase><system-out/><system-err/></testsuite></testsuites>"}]}