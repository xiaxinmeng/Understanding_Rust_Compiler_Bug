{"sha": "5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjNlZTgyNzRmZGI3Y2RlYjJiMDg3MWI0ZWZlYThjYmY0NzI0YTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-28T22:54:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-28T22:54:07Z"}, "message": "Merge #7816\n\n7816: Lift Ty::Fn into a struct r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c1769a152888b97134e3f3811d4504f467ce1047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1769a152888b97134e3f3811d4504f467ce1047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPB8PCRBK7hj4Ov3rIwAAdHIIAGFQ/L3oGKZibJIu2LbFgS2E\nVgUWrofVwDK9tJfHW3LywrJaIn8oSrR3GM13O+a7BKqIFdQLZ9TRGJKu5irjs0eg\nIuw73H5GGJWxuANkP1atRjvjLEN3bG/YYsoAeAZHweG9g//F9l2kBTz4CdRXnnjN\nIym8vGuz9bEhgpO3pT/8p88BrOJ2DaratcMt4WBbd7loyT4oxeigqMoRvmt8pGjR\nAP6PWpUytHrB9LSFm2LhAE6tcld9T4DtpCkOaBgqMYz6p5z54yNAZhRQ0C5OSpXI\nY8rF+NRScMZt7PfNiPD9yIbwz+qPk49GPrnYAkCcASf4eE8A9ycUt8HbFFzdbHw=\n=2yn8\n-----END PGP SIGNATURE-----\n", "payload": "tree c1769a152888b97134e3f3811d4504f467ce1047\nparent 72457d022d704c47ab9dbfee6a1b29063cc9cc5d\nparent 407196b8c0f23e3ddc26e789b84542b1fd9b0eb8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614552847 +0000\ncommitter GitHub <noreply@github.com> 1614552847 +0000\n\nMerge #7816\n\n7816: Lift Ty::Fn into a struct r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "html_url": "https://github.com/rust-lang/rust/commit/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72457d022d704c47ab9dbfee6a1b29063cc9cc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72457d022d704c47ab9dbfee6a1b29063cc9cc5d", "html_url": "https://github.com/rust-lang/rust/commit/72457d022d704c47ab9dbfee6a1b29063cc9cc5d"}, {"sha": "407196b8c0f23e3ddc26e789b84542b1fd9b0eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/407196b8c0f23e3ddc26e789b84542b1fd9b0eb8", "html_url": "https://github.com/rust-lang/rust/commit/407196b8c0f23e3ddc26e789b84542b1fd9b0eb8"}], "stats": {"total": 184, "additions": 98, "deletions": 86}, "files": [{"sha": "5a1691effe55717d64a816d6341607796f6d650e", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -31,9 +31,9 @@ use hir_ty::{\n     display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n     method_resolution,\n     traits::{FnTrait, Solution, SolutionVariables},\n-    BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate, InEnvironment,\n-    Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitEnvironment, Ty, TyDefId,\n-    TyKind,\n+    BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n+    InEnvironment, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitEnvironment,\n+    Ty, TyDefId, TyKind,\n };\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n@@ -1692,7 +1692,7 @@ impl Type {\n     }\n \n     pub fn is_fn(&self) -> bool {\n-        matches!(&self.ty.value, Ty::FnDef(..) | Ty::FnPtr { .. })\n+        matches!(&self.ty.value, Ty::FnDef(..) | Ty::Function { .. })\n     }\n \n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n@@ -1974,7 +1974,7 @@ impl HirDisplay for Type {\n #[derive(Debug)]\n pub struct Callable {\n     ty: Type,\n-    sig: FnSig,\n+    sig: CallableSig,\n     def: Option<CallableDefId>,\n     pub(crate) is_bound_method: bool,\n }"}, {"sha": "179f7ff442a73e71d9f18f5171cf90826570d383", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -3,8 +3,8 @@\n use std::{borrow::Cow, fmt};\n \n use crate::{\n-    db::HirDatabase, primitive, utils::generics, CallableDefId, FnSig, GenericPredicate, Lifetime,\n-    Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n+    db::HirDatabase, primitive, utils::generics, CallableDefId, CallableSig, GenericPredicate,\n+    Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n };\n use arrayvec::ArrayVec;\n use hir_def::{\n@@ -341,8 +341,8 @@ impl HirDisplay for Ty {\n                     write!(f, \")\")?;\n                 }\n             }\n-            Ty::FnPtr { is_varargs, substs, .. } => {\n-                let sig = FnSig::from_fn_ptr_substs(&substs, *is_varargs);\n+            Ty::Function(fn_ptr) => {\n+                let sig = CallableSig::from_fn_ptr(fn_ptr);\n                 sig.hir_fmt(f)?;\n             }\n             Ty::FnDef(def, parameters) => {\n@@ -494,7 +494,7 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            Ty::Closure { substs, .. } => {\n+            Ty::Closure(.., substs) => {\n                 let sig = substs[0].callable_sig(f.db);\n                 if let Some(sig) = sig {\n                     if sig.params().is_empty() {\n@@ -571,7 +571,7 @@ impl HirDisplay for Ty {\n     }\n }\n \n-impl HirDisplay for FnSig {\n+impl HirDisplay for CallableSig {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"fn(\")?;\n         f.write_joined(self.params(), \", \")?;"}, {"sha": "4cca3590481b46ce0bdd143f774f7109acf55178", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -89,14 +89,14 @@ impl<'a> InferenceContext<'a> {\n             | (Ty::Ref(Mutability::Shared, ..), Ty::Ref(Mutability::Mut, ..)) => return false,\n \n             // `{function_type}` -> `fn()`\n-            (Ty::FnDef(..), Ty::FnPtr { .. }) => match from_ty.callable_sig(self.db) {\n+            (Ty::FnDef(..), Ty::Function { .. }) => match from_ty.callable_sig(self.db) {\n                 None => return false,\n                 Some(sig) => {\n                     from_ty = Ty::fn_ptr(sig);\n                 }\n             },\n \n-            (Ty::Closure { substs, .. }, Ty::FnPtr { .. }) => {\n+            (Ty::Closure(.., substs), Ty::Function { .. }) => {\n                 from_ty = substs[0].clone();\n             }\n "}, {"sha": "23d4ac8ef81ed1f9ca4ddb593ff2161ac8e9b710", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -18,8 +18,8 @@ use crate::{\n     primitive::{self, UintTy},\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    Binders, CallableDefId, InferTy, Mutability, Obligation, OpaqueTyId, Rawness, Scalar, Substs,\n-    TraitRef, Ty,\n+    Binders, CallableDefId, FnPointer, FnSig, InferTy, Mutability, Obligation, OpaqueTyId, Rawness,\n+    Scalar, Substs, TraitRef, Ty,\n };\n \n use super::{\n@@ -247,13 +247,12 @@ impl<'a> InferenceContext<'a> {\n                     None => self.table.new_type_var(),\n                 };\n                 sig_tys.push(ret_ty.clone());\n-                let sig_ty = Ty::FnPtr {\n-                    num_args: sig_tys.len() as u16 - 1,\n-                    is_varargs: false,\n+                let sig_ty = Ty::Function(FnPointer {\n+                    num_args: sig_tys.len() - 1,\n+                    sig: FnSig { variadic: false },\n                     substs: Substs(sig_tys.clone().into()),\n-                };\n-                let closure_ty =\n-                    Ty::Closure { def: self.owner, expr: tgt_expr, substs: Substs::single(sig_ty) };\n+                });\n+                let closure_ty = Ty::Closure(self.owner, tgt_expr, Substs::single(sig_ty));\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to"}, {"sha": "1abb0440fda95e6847d5a8be40db9459b84080bc", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 48, "deletions": 32, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -99,6 +99,18 @@ impl TypeWalk for ProjectionTy {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n+pub struct FnSig {\n+    pub variadic: bool,\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n+pub struct FnPointer {\n+    pub num_args: usize,\n+    pub sig: FnSig,\n+    pub substs: Substs,\n+}\n+\n /// A type.\n ///\n /// See also the `TyKind` enum in rustc (librustc/ty/sty.rs), which represents\n@@ -166,7 +178,7 @@ pub enum Ty {\n     ///\n     /// The closure signature is stored in a `FnPtr` type in the first type\n     /// parameter.\n-    Closure { def: DefWithBodyId, expr: ExprId, substs: Substs },\n+    Closure(DefWithBodyId, ExprId, Substs),\n \n     /// Represents a foreign type declared in external blocks.\n     ForeignType(TypeAliasId),\n@@ -179,8 +191,7 @@ pub enum Ty {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    // FIXME make this a Ty variant like in Chalk\n-    FnPtr { num_args: u16, is_varargs: bool, substs: Substs },\n+    Function(FnPointer),\n \n     /// A \"projection\" type corresponds to an (unnormalized)\n     /// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n@@ -535,22 +546,29 @@ pub enum TyKind {\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct FnSig {\n+pub struct CallableSig {\n     params_and_return: Arc<[Ty]>,\n     is_varargs: bool,\n }\n \n /// A polymorphic function signature.\n-pub type PolyFnSig = Binders<FnSig>;\n+pub type PolyFnSig = Binders<CallableSig>;\n \n-impl FnSig {\n-    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty, is_varargs: bool) -> FnSig {\n+impl CallableSig {\n+    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty, is_varargs: bool) -> CallableSig {\n         params.push(ret);\n-        FnSig { params_and_return: params.into(), is_varargs }\n+        CallableSig { params_and_return: params.into(), is_varargs }\n+    }\n+\n+    pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n+        CallableSig {\n+            params_and_return: Arc::clone(&fn_ptr.substs.0),\n+            is_varargs: fn_ptr.sig.variadic,\n+        }\n     }\n \n-    pub fn from_fn_ptr_substs(substs: &Substs, is_varargs: bool) -> FnSig {\n-        FnSig { params_and_return: Arc::clone(&substs.0), is_varargs }\n+    pub fn from_substs(substs: &Substs) -> CallableSig {\n+        CallableSig { params_and_return: Arc::clone(&substs.0), is_varargs: false }\n     }\n \n     pub fn params(&self) -> &[Ty] {\n@@ -562,7 +580,7 @@ impl FnSig {\n     }\n }\n \n-impl TypeWalk for FnSig {\n+impl TypeWalk for CallableSig {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         for t in self.params_and_return.iter() {\n             t.walk(f);\n@@ -585,12 +603,12 @@ impl Ty {\n         Ty::Tuple(0, Substs::empty())\n     }\n \n-    pub fn fn_ptr(sig: FnSig) -> Self {\n-        Ty::FnPtr {\n-            num_args: sig.params().len() as u16,\n-            is_varargs: sig.is_varargs,\n+    pub fn fn_ptr(sig: CallableSig) -> Self {\n+        Ty::Function(FnPointer {\n+            num_args: sig.params().len(),\n+            sig: FnSig { variadic: sig.is_varargs },\n             substs: Substs(sig.params_and_return),\n-        }\n+        })\n     }\n \n     pub fn builtin(builtin: BuiltinType) -> Self {\n@@ -673,17 +691,17 @@ impl Ty {\n             (Ty::OpaqueType(ty_id, ..), Ty::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n             (Ty::AssociatedType(ty_id, ..), Ty::AssociatedType(ty_id2, ..))\n             | (Ty::ForeignType(ty_id, ..), Ty::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n-            (Ty::Closure { def, expr, .. }, Ty::Closure { def: def2, expr: expr2, .. }) => {\n+            (Ty::Closure(def, expr, _), Ty::Closure(def2, expr2, _)) => {\n                 expr == expr2 && def == def2\n             }\n             (Ty::Ref(mutability, ..), Ty::Ref(mutability2, ..))\n             | (Ty::RawPtr(mutability, ..), Ty::RawPtr(mutability2, ..)) => {\n                 mutability == mutability2\n             }\n             (\n-                Ty::FnPtr { num_args, is_varargs, .. },\n-                Ty::FnPtr { num_args: num_args2, is_varargs: is_varargs2, .. },\n-            ) => num_args == num_args2 && is_varargs == is_varargs2,\n+                Ty::Function(FnPointer { num_args, sig, .. }),\n+                Ty::Function(FnPointer { num_args: num_args2, sig: sig2, .. }),\n+            ) => num_args == num_args2 && sig == sig2,\n             (Ty::Tuple(cardinality, _), Ty::Tuple(cardinality2, _)) => cardinality == cardinality2,\n             (Ty::Str, Ty::Str) | (Ty::Never, Ty::Never) => true,\n             (Ty::Scalar(scalar), Ty::Scalar(scalar2)) => scalar == scalar2,\n@@ -722,17 +740,15 @@ impl Ty {\n         }\n     }\n \n-    pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n+    pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<CallableSig> {\n         match self {\n-            Ty::FnPtr { is_varargs, substs: parameters, .. } => {\n-                Some(FnSig::from_fn_ptr_substs(&parameters, *is_varargs))\n-            }\n+            Ty::Function(fn_ptr) => Some(CallableSig::from_fn_ptr(fn_ptr)),\n             Ty::FnDef(def, parameters) => {\n                 let sig = db.callable_item_signature(*def);\n                 Some(sig.subst(&parameters))\n             }\n-            Ty::Closure { substs: parameters, .. } => {\n-                let sig_param = &parameters[0];\n+            Ty::Closure(.., substs) => {\n+                let sig_param = &substs[0];\n                 sig_param.callable_sig(db)\n             }\n             _ => None,\n@@ -751,11 +767,11 @@ impl Ty {\n             | Ty::RawPtr(_, substs)\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n-            | Ty::FnPtr { substs, .. }\n+            | Ty::Function(FnPointer { substs, .. })\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::Closure { substs, .. } => {\n+            | Ty::Closure(.., substs) => {\n                 assert_eq!(substs.len(), new_substs.len());\n                 *substs = new_substs;\n             }\n@@ -774,11 +790,11 @@ impl Ty {\n             | Ty::RawPtr(_, substs)\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n-            | Ty::FnPtr { substs, .. }\n+            | Ty::Function(FnPointer { substs, .. })\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::Closure { substs, .. } => Some(substs),\n+            | Ty::Closure(.., substs) => Some(substs),\n             _ => None,\n         }\n     }\n@@ -791,11 +807,11 @@ impl Ty {\n             | Ty::RawPtr(_, substs)\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n-            | Ty::FnPtr { substs, .. }\n+            | Ty::Function(FnPointer { substs, .. })\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::Closure { substs, .. } => Some(substs),\n+            | Ty::Closure(.., substs) => Some(substs),\n             _ => None,\n         }\n     }"}, {"sha": "44bd95a9ab228d0129fd703f8b4f535976be1ad6", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -31,9 +31,9 @@ use crate::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         make_mut_slice, variant_data,\n     },\n-    Binders, BoundVar, DebruijnIndex, FnSig, GenericPredicate, OpaqueTy, OpaqueTyId, PolyFnSig,\n-    ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait, ReturnTypeImplTraits, Substs,\n-    TraitEnvironment, TraitRef, Ty, TypeWalk,\n+    Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, GenericPredicate, OpaqueTy,\n+    OpaqueTyId, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n+    ReturnTypeImplTraits, Substs, TraitEnvironment, TraitRef, Ty, TypeWalk,\n };\n \n #[derive(Debug)]\n@@ -173,8 +173,12 @@ impl Ty {\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n             TypeRef::Fn(params, is_varargs) => {\n-                let sig = Substs(params.iter().map(|tr| Ty::from_hir(ctx, tr)).collect());\n-                Ty::FnPtr { num_args: sig.len() as u16 - 1, is_varargs: *is_varargs, substs: sig }\n+                let substs = Substs(params.iter().map(|tr| Ty::from_hir(ctx, tr)).collect());\n+                Ty::Function(FnPointer {\n+                    num_args: substs.len() - 1,\n+                    sig: FnSig { variadic: *is_varargs },\n+                    substs,\n+                })\n             }\n             TypeRef::DynTrait(bounds) => {\n                 let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n@@ -1010,7 +1014,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n     let ret = Ty::from_hir(&ctx_ret, &data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n     let num_binders = generics.len();\n-    Binders::new(num_binders, FnSig::from_params_and_return(params, ret, data.is_varargs))\n+    Binders::new(num_binders, CallableSig::from_params_and_return(params, ret, data.is_varargs))\n }\n \n /// Build the declared type of a function. This should not need to look at the\n@@ -1050,7 +1054,7 @@ fn fn_sig_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> PolyFnS\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.into());\n-    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value, false))\n+    Binders::new(ret.num_binders, CallableSig::from_params_and_return(params, ret.value, false))\n }\n \n /// Build the type of a tuple struct constructor.\n@@ -1074,7 +1078,7 @@ fn fn_sig_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId)\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.parent.into());\n-    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value, false))\n+    Binders::new(ret.num_binders, CallableSig::from_params_and_return(params, ret.value, false))\n }\n \n /// Build the type of a tuple enum variant constructor."}, {"sha": "c8a0ad5f1f708e2cd8e20bcf71d560bf52cfebe9", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -18,8 +18,8 @@ use crate::{\n     db::HirDatabase,\n     primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n-    Canonical, DebruijnIndex, InEnvironment, Scalar, Substs, TraitEnvironment, TraitRef, Ty,\n-    TyKind, TypeWalk,\n+    Canonical, DebruijnIndex, FnPointer, FnSig, InEnvironment, Scalar, Substs, TraitEnvironment,\n+    TraitRef, Ty, TyKind, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -35,7 +35,7 @@ pub enum TyFingerprint {\n     Dyn(TraitId),\n     Tuple(usize),\n     ForeignType(TypeAliasId),\n-    FnPtr { num_args: u16, is_varargs: bool },\n+    FnPtr(usize, FnSig),\n }\n \n impl TyFingerprint {\n@@ -53,9 +53,7 @@ impl TyFingerprint {\n             &Ty::Tuple(cardinality, _) => TyFingerprint::Tuple(cardinality),\n             &Ty::RawPtr(mutability, ..) => TyFingerprint::RawPtr(mutability),\n             &Ty::ForeignType(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n-            &Ty::FnPtr { num_args, is_varargs, .. } => {\n-                TyFingerprint::FnPtr { num_args, is_varargs }\n-            }\n+            &Ty::Function(FnPointer { num_args, sig, .. }) => TyFingerprint::FnPtr(num_args, sig),\n             Ty::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n             _ => return None,\n         };"}, {"sha": "3f5f5091f97ba047881e94452cf3fd80f82a6ade", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     display::HirDisplay,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     utils::generics,\n-    BoundVar, CallableDefId, DebruijnIndex, FnSig, GenericPredicate, ProjectionPredicate,\n+    BoundVar, CallableDefId, CallableSig, DebruijnIndex, GenericPredicate, ProjectionPredicate,\n     ProjectionTy, Substs, TraitRef, Ty,\n };\n use mapping::{\n@@ -286,9 +286,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     ) -> chalk_ir::Binders<rust_ir::FnDefInputsAndOutputDatum<Interner>> {\n         let sig_ty: Ty =\n             from_chalk(self.db, substs.at(&Interner, 0).assert_ty_ref(&Interner).clone());\n-        let sig = FnSig::from_fn_ptr_substs(\n+        let sig = CallableSig::from_substs(\n             &sig_ty.substs().expect(\"first closure param should be fn ptr\"),\n-            false,\n         );\n         let io = rust_ir::FnDefInputsAndOutputDatum {\n             argument_types: sig.params().iter().map(|ty| ty.clone().to_chalk(self.db)).collect(),"}, {"sha": "60d74e21abd3865829a9f957514e5ba177275480", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1", "patch": "@@ -16,8 +16,8 @@ use crate::{\n     db::HirDatabase,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n-    CallableDefId, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId, ProjectionPredicate,\n-    ProjectionTy, Scalar, Substs, TraitEnvironment, TraitRef, Ty, TyKind,\n+    CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId,\n+    ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitEnvironment, TraitRef, Ty, TyKind,\n };\n \n use super::interner::*;\n@@ -29,15 +29,11 @@ impl ToChalk for Ty {\n         match self {\n             Ty::Ref(m, parameters) => ref_to_chalk(db, m, parameters),\n             Ty::Array(parameters) => array_to_chalk(db, parameters),\n-            Ty::FnPtr { num_args: _, is_varargs, substs } => {\n+            Ty::Function(FnPointer { sig: FnSig { variadic }, substs, .. }) => {\n                 let substitution = chalk_ir::FnSubst(substs.to_chalk(db).shifted_in(&Interner));\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: 0,\n-                    sig: chalk_ir::FnSig {\n-                        abi: (),\n-                        safety: chalk_ir::Safety::Safe,\n-                        variadic: is_varargs,\n-                    },\n+                    sig: chalk_ir::FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic },\n                     substitution,\n                 })\n                 .intern(&Interner)\n@@ -82,7 +78,7 @@ impl ToChalk for Ty {\n             }\n             Ty::Never => chalk_ir::TyKind::Never.intern(&Interner),\n \n-            Ty::Closure { def, expr, substs } => {\n+            Ty::Closure(def, expr, substs) => {\n                 let closure_id = db.intern_closure((def, expr));\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::Closure(closure_id.into(), substitution).intern(&Interner)\n@@ -164,15 +160,15 @@ impl ToChalk for Ty {\n                 ..\n             }) => {\n                 assert_eq!(num_binders, 0);\n-                let parameters: Substs = from_chalk(\n+                let substs: Substs = from_chalk(\n                     db,\n                     substitution.0.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n                 );\n-                Ty::FnPtr {\n-                    num_args: (parameters.len() - 1) as u16,\n-                    is_varargs: variadic,\n-                    substs: parameters,\n-                }\n+                Ty::Function(FnPointer {\n+                    num_args: (substs.len() - 1),\n+                    sig: FnSig { variadic },\n+                    substs,\n+                })\n             }\n             chalk_ir::TyKind::BoundVar(idx) => Ty::Bound(idx),\n             chalk_ir::TyKind::InferenceVar(_iv, _kind) => Ty::Unknown,\n@@ -218,7 +214,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Closure(id, subst) => {\n                 let id: crate::db::ClosureId = id.into();\n                 let (def, expr) = db.lookup_intern_closure(id);\n-                Ty::Closure { def, expr, substs: from_chalk(db, subst) }\n+                Ty::Closure(def, expr, from_chalk(db, subst))\n             }\n \n             chalk_ir::TyKind::Foreign(foreign_def_id) => {"}]}