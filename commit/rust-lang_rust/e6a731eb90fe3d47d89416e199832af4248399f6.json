{"sha": "e6a731eb90fe3d47d89416e199832af4248399f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTczMWViOTBmZTNkNDdkODk0MTZlMTk5ODMyYWY0MjQ4Mzk5ZjY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-28T15:28:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-28T17:30:36Z"}, "message": "Be stricter about rejecting LLVM reserved registers in asm!", "tree": {"sha": "cfd471549592a70ddf9cd0b7bdcd9d57aa35ba26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd471549592a70ddf9cd0b7bdcd9d57aa35ba26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a731eb90fe3d47d89416e199832af4248399f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a731eb90fe3d47d89416e199832af4248399f6", "html_url": "https://github.com/rust-lang/rust/commit/e6a731eb90fe3d47d89416e199832af4248399f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a731eb90fe3d47d89416e199832af4248399f6/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154858c4308d771e29ad90057bf199867c271d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/154858c4308d771e29ad90057bf199867c271d09", "html_url": "https://github.com/rust-lang/rust/commit/154858c4308d771e29ad90057bf199867c271d09"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "dd51574efca0a262b95fc29accacfdc2acee5200", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -83,10 +83,8 @@ def_regs! {\n         x13: reg = [\"x13\", \"w13\"],\n         x14: reg = [\"x14\", \"w14\"],\n         x15: reg = [\"x15\", \"w15\"],\n-        x16: reg = [\"x16\", \"w16\"],\n         x17: reg = [\"x17\", \"w17\"],\n         x18: reg = [\"x18\", \"w18\"],\n-        x19: reg = [\"x19\", \"w19\"],\n         x20: reg = [\"x20\", \"w20\"],\n         x21: reg = [\"x21\", \"w21\"],\n         x22: reg = [\"x22\", \"w22\"],\n@@ -96,7 +94,7 @@ def_regs! {\n         x26: reg = [\"x26\", \"w26\"],\n         x27: reg = [\"x27\", \"w27\"],\n         x28: reg = [\"x28\", \"w28\"],\n-        x30: reg = [\"x30\", \"w30\", \"lr\"],\n+        x30: reg = [\"x30\", \"w30\", \"lr\", \"wlr\"],\n         v0: vreg, vreg_low16 = [\"v0\", \"b0\", \"h0\", \"s0\", \"d0\", \"q0\"],\n         v1: vreg, vreg_low16 = [\"v1\", \"b1\", \"h1\", \"s1\", \"d1\", \"q1\"],\n         v2: vreg, vreg_low16 = [\"v2\", \"b2\", \"h2\", \"s2\", \"d2\", \"q2\"],\n@@ -129,7 +127,11 @@ def_regs! {\n         v29: vreg = [\"v29\", \"b29\", \"h29\", \"s29\", \"d29\", \"q29\"],\n         v30: vreg = [\"v30\", \"b30\", \"h30\", \"s30\", \"d30\", \"q30\"],\n         v31: vreg = [\"v31\", \"b31\", \"h31\", \"s31\", \"d31\", \"q31\"],\n-        #error = [\"x29\", \"fp\"] =>\n+        #error = [\"x16\", \"w16\"] =>\n+            \"x16 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"x19\", \"w19\"] =>\n+            \"x19 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"x29\", \"w29\", \"fp\", \"wfp\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n         #error = [\"sp\", \"wsp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\","}, {"sha": "4c323fc35d643c4d3b991ba921af021cc61164e4", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -98,7 +98,6 @@ def_regs! {\n         r5: reg, reg_thumb = [\"r5\", \"v2\"],\n         r7: reg, reg_thumb = [\"r7\", \"v4\"] % frame_pointer_r7,\n         r8: reg = [\"r8\", \"v5\"],\n-        r9: reg = [\"r9\", \"v6\", \"rfp\"],\n         r10: reg = [\"r10\", \"sl\"],\n         r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n         r12: reg = [\"r12\", \"ip\"],\n@@ -185,6 +184,8 @@ def_regs! {\n         q15: qreg = [\"q15\"],\n         #error = [\"r6\", \"v3\"] =>\n             \"r6 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"r9\", \"v6\", \"rfp\"] =>\n+            \"r9 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r13\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r15\", \"pc\"] =>"}, {"sha": "74afddb69dc753461abb81fe71d64a24cd58b19f", "filename": "compiler/rustc_target/src/asm/hexagon.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -60,7 +60,6 @@ def_regs! {\n         r16: reg = [\"r16\"],\n         r17: reg = [\"r17\"],\n         r18: reg = [\"r18\"],\n-        r19: reg = [\"r19\"],\n         r20: reg = [\"r20\"],\n         r21: reg = [\"r21\"],\n         r22: reg = [\"r22\"],\n@@ -70,6 +69,8 @@ def_regs! {\n         r26: reg = [\"r26\"],\n         r27: reg = [\"r27\"],\n         r28: reg = [\"r28\"],\n+        #error = [\"r19\"] =>\n+            \"r19 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r29\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r30\", \"fr\"] =>"}, {"sha": "e276a9175f9ab5626e0a00eab52e2cf41643c69a", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -66,7 +66,6 @@ def_regs! {\n         x5: reg = [\"x5\", \"t0\"],\n         x6: reg = [\"x6\", \"t1\"],\n         x7: reg = [\"x7\", \"t2\"],\n-        x9: reg = [\"x9\", \"s1\"],\n         x10: reg = [\"x10\", \"a0\"],\n         x11: reg = [\"x11\", \"a1\"],\n         x12: reg = [\"x12\", \"a2\"],\n@@ -121,6 +120,8 @@ def_regs! {\n         f29: freg = [\"f29\", \"ft9\"],\n         f30: freg = [\"f30\", \"ft10\"],\n         f31: freg = [\"f31\", \"ft11\"],\n+        #error = [\"x9\", \"s1\"] =>\n+            \"s1 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"x8\", \"s0\", \"fp\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n         #error = [\"x2\", \"sp\"] =>"}, {"sha": "48f83ca7cd49a41c2623f210fb71568e956f03af", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -152,13 +152,41 @@ fn high_byte(\n     }\n }\n \n+fn rbx_reserved(\n+    arch: InlineAsmArch,\n+    _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    match arch {\n+        InlineAsmArch::X86 => Ok(()),\n+        InlineAsmArch::X86_64 => {\n+            Err(\"rbx is used internally by LLVM and cannot be used as an operand for inline asm\")\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n+fn esi_reserved(\n+    arch: InlineAsmArch,\n+    _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    match arch {\n+        InlineAsmArch::X86 => {\n+            Err(\"esi is used internally by LLVM and cannot be used as an operand for inline asm\")\n+        }\n+        InlineAsmArch::X86_64 => Ok(()),\n+        _ => unreachable!(),\n+    }\n+}\n+\n def_regs! {\n     X86 X86InlineAsmReg X86InlineAsmRegClass {\n         ax: reg, reg_abcd = [\"ax\", \"eax\", \"rax\"],\n-        bx: reg, reg_abcd = [\"bx\", \"ebx\", \"rbx\"],\n+        bx: reg, reg_abcd = [\"bx\", \"ebx\", \"rbx\"] % rbx_reserved,\n         cx: reg, reg_abcd = [\"cx\", \"ecx\", \"rcx\"],\n         dx: reg, reg_abcd = [\"dx\", \"edx\", \"rdx\"],\n-        si: reg = [\"si\", \"esi\", \"rsi\"],\n+        si: reg = [\"si\", \"esi\", \"rsi\"] % esi_reserved,\n         di: reg = [\"di\", \"edi\", \"rdi\"],\n         r8: reg = [\"r8\", \"r8w\", \"r8d\"] % x86_64_only,\n         r9: reg = [\"r9\", \"r9w\", \"r9d\"] % x86_64_only,"}, {"sha": "7c2bf6218553075e91674436412ab9cb26b3b855", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -535,20 +535,20 @@ Here is the list of currently supported register classes:\n \n | Architecture | Register class | Registers | LLVM constraint code |\n | ------------ | -------------- | --------- | -------------------- |\n-| x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `r[8-15]` (x86-64 only) | `r` |\n+| x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `bp`, `r[8-15]` (x86-64 only) | `r` |\n | x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n | x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n-| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b` | `q` |\n+| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `bpl`, `r[8-15]b` | `q` |\n | x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n | x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n | x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n | x86 | `kreg` | `k[1-7]` | `Yk` |\n-| AArch64 | `reg` | `x[0-28]`, `x30` | `r` |\n+| AArch64 | `reg` | `x[0-30]` | `r` |\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n-| ARM | `reg` | `r[0-5]` `r7`\\*, `r[8-10]`, `r11`\\*, `r12`, `r14` | `r` |\n+| ARM | `reg` | `r[0-12]`, `r14` | `r` |\n | ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n-| ARM (ARM) | `reg_thumb` | `r[0-r10]`, `r12`, `r14` | `l` |\n+| ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n | ARM | `sreg_low16` | `s[0-15]` | `x` |\n | ARM | `dreg` | `d[0-31]` | `w` |\n@@ -573,9 +573,7 @@ Here is the list of currently supported register classes:\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >\n-> Note #4: On ARM the frame pointer is either `r7` or `r11` depending on the platform.\n->\n-> Note #5: WebAssembly doesn't have registers, so named registers are not supported.\n+> Note #4: WebAssembly doesn't have registers, so named registers are not supported.\n \n Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n \n@@ -677,13 +675,15 @@ Some registers cannot be used for input or output operands:\n | All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n | All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon), `$fp` (MIPS) | The frame pointer cannot be used as an input or output. |\n | ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n-| ARM | `r6` | `r6` is used internally by LLVM as a base pointer and therefore cannot be used as an input or output. |\n+| All | `si` (x86-32), `bx` (x86-64), `r6` (ARM), `x19` (AArch64), `r19` (Hexagon), `x9` (RISC-V) | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames. |\n | x86 | `k0` | This is a constant zero register which can't be modified. |\n | x86 | `ip` | This is the program counter, not a real register. |\n | x86 | `mm[0-7]` | MMX registers are not currently supported (but may be in the future). |\n | x86 | `st([0-7])` | x87 registers are not currently supported (but may be in the future). |\n | AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n+| AArch64 | `x16` | This is used internally by LLVM for speculative load hardening. |\n | ARM | `pc` | This is the program counter, not a real register. |\n+| ARM | `r9` | This is a reserved register on some ARM targets. |\n | MIPS | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n | MIPS | `$1` or `$at` | Reserved for assembler. |\n | MIPS | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n@@ -693,9 +693,10 @@ Some registers cannot be used for input or output operands:\n | RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n | Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n \n-In some cases LLVM will allocate a \"reserved register\" for `reg` operands even though this register cannot be explicitly specified. Assembly code making use of reserved registers should be careful since `reg` operands may alias with those registers. Reserved registers are:\n-- The frame pointer on all architectures.\n-- `r6` on ARM.\n+In some cases LLVM will allocate a \"reserved register\" for `reg` operands even though this register cannot be explicitly specified. Assembly code making use of reserved registers should be careful since `reg` operands may alias with those registers. Reserved registers are the frame pointer and base pointer\n+- The frame pointer and LLVM base pointer on all architectures.\n+- `x16` on AArch64.\n+- `r6` and `r9` on ARM.\n \n ## Template modifiers\n "}, {"sha": "baf9f3e9bd14d23959ea71ab6699db9f289719e2", "filename": "src/test/codegen/asm-multiple-options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -10,7 +10,7 @@\n #[no_mangle]\n pub unsafe fn pure(x: i32) {\n     let y: i32;\n-    asm!(\"\", out(\"ax\") y, in(\"bx\") x, options(pure), options(nomem));\n+    asm!(\"\", out(\"ax\") y, in(\"cx\") x, options(pure), options(nomem));\n }\n \n pub static mut VAR: i32 = 0;"}, {"sha": "70391661b0cfbcb3f3593a292460159a62be26c7", "filename": "src/test/codegen/asm-options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fcodegen%2Fasm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fcodegen%2Fasm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-options.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -10,7 +10,7 @@\n #[no_mangle]\n pub unsafe fn pure(x: i32) {\n     let y: i32;\n-    asm!(\"\", out(\"ax\") y, in(\"bx\") x, options(pure, nomem));\n+    asm!(\"\", out(\"ax\") y, in(\"cx\") x, options(pure, nomem));\n }\n \n // CHECK-LABEL: @noreturn"}, {"sha": "a2065039692b7763541e2a28c107a7c8febdc6b4", "filename": "src/test/pretty/asm.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fpretty%2Fasm.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fpretty%2Fasm.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm.pp?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -21,7 +21,7 @@\n         asm!(\"{0}\", out(reg) a);\n         asm!(\"{0}\", inout(reg) b);\n         asm!(\"{0} {1}\", out(reg) _, inlateout(reg) b => _);\n-        asm!(\"\", out(\"al\") _, lateout(\"rbx\") _);\n+        asm!(\"\", out(\"al\") _, lateout(\"rcx\") _);\n         asm!(\"inst1\\ninst2\");\n         asm!(\"inst1 {0}, 42\\ninst2 {1}, 24\", in(reg) a, out(reg) b);\n         asm!(\"inst2 {1}, 24\\ninst1 {0}, 42\", in(reg) a, out(reg) b);"}, {"sha": "1156ab769a0433210254862185096f557d99da7c", "filename": "src/test/pretty/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fpretty%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a731eb90fe3d47d89416e199832af4248399f6/src%2Ftest%2Fpretty%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm.rs?ref=e6a731eb90fe3d47d89416e199832af4248399f6", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n         asm!(\"{0}\", out(reg) a);\n         asm!(\"{name}\", name = inout(reg) b);\n         asm!(\"{} {}\", out(reg) _, inlateout(reg) b => _);\n-        asm!(\"\", out(\"al\") _, lateout(\"rbx\") _);\n+        asm!(\"\", out(\"al\") _, lateout(\"rcx\") _);\n         asm!(\"inst1\", \"inst2\");\n         asm!(\"inst1 {}, 42\", \"inst2 {}, 24\", in(reg) a, out(reg) b);\n         asm!(\"inst2 {1}, 24\", \"inst1 {0}, 42\", in(reg) a, out(reg) b);"}]}