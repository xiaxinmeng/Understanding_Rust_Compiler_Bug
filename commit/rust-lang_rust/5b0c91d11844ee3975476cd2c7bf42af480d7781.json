{"sha": "5b0c91d11844ee3975476cd2c7bf42af480d7781", "node_id": "C_kwDOAAsO6NoAKDViMGM5MWQxMTg0NGVlMzk3NTQ3NmNkMmM3YmY0MmFmNDgwZDc3ODE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-03T11:52:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-03T12:06:44Z"}, "message": "fix: fix insert_use incorrectly merging glob imports", "tree": {"sha": "7e3b640b325d561664fe12853299ed53993d5f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e3b640b325d561664fe12853299ed53993d5f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0c91d11844ee3975476cd2c7bf42af480d7781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c91d11844ee3975476cd2c7bf42af480d7781", "html_url": "https://github.com/rust-lang/rust/commit/5b0c91d11844ee3975476cd2c7bf42af480d7781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c91d11844ee3975476cd2c7bf42af480d7781/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68423532995cccd8e437e60ceab694cf7987be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68423532995cccd8e437e60ceab694cf7987be6", "html_url": "https://github.com/rust-lang/rust/commit/e68423532995cccd8e437e60ceab694cf7987be6"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "f3b9c7130f42e9640ca53984fb10fcd21cc96ba8", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c91d11844ee3975476cd2c7bf42af480d7781/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c91d11844ee3975476cd2c7bf42af480d7781/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=5b0c91d11844ee3975476cd2c7bf42af480d7781", "patch": "@@ -612,6 +612,7 @@ fn merge_mod_into_glob() {\n \n #[test]\n fn merge_self_glob() {\n+    cov_mark::check!(merge_self_glob);\n     check_with_config(\n         \"self\",\n         r\"use self::*;\",\n@@ -627,6 +628,17 @@ fn merge_self_glob() {\n     // FIXME: have it emit `use {self, *}`?\n }\n \n+#[test]\n+fn merge_glob() {\n+    check_crate(\n+        \"syntax::SyntaxKind\",\n+        r\"\n+use syntax::{SyntaxKind::*};\",\n+        r\"\n+use syntax::{SyntaxKind::{*, self}};\",\n+    )\n+}\n+\n #[test]\n fn merge_glob_nested() {\n     check_crate(\n@@ -931,5 +943,5 @@ fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior\n fn check_guess(ra_fixture: &str, expected: ImportGranularityGuess) {\n     let syntax = ast::SourceFile::parse(ra_fixture).tree().syntax().clone();\n     let file = super::ImportScope::from(syntax).unwrap();\n-    assert_eq!(file.guess_granularity_from_scope(), expected);\n+    assert_eq!(super::guess_granularity_from_scope(&file), expected);\n }"}, {"sha": "6a7a9b8f61c689bb8eed7d947c76702e2974339a", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c91d11844ee3975476cd2c7bf42af480d7781/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c91d11844ee3975476cd2c7bf42af480d7781/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=5b0c91d11844ee3975476cd2c7bf42af480d7781", "patch": "@@ -19,7 +19,6 @@ pub enum MergeBehavior {\n }\n \n impl MergeBehavior {\n-    #[inline]\n     fn is_tree_allowed(&self, tree: &ast::UseTree) -> bool {\n         match self {\n             MergeBehavior::Crate => true,\n@@ -114,7 +113,7 @@ fn recursive_merge(\n                 let rhs_path = rhs_path?;\n                 let (lhs_prefix, rhs_prefix) = common_prefix(&lhs_path, &rhs_path)?;\n                 if lhs_prefix == lhs_path && rhs_prefix == rhs_path {\n-                    let tree_is_self = |tree: ast::UseTree| {\n+                    let tree_is_self = |tree: &ast::UseTree| {\n                         tree.path().as_ref().map(path_is_self).unwrap_or(false)\n                     };\n                     // Check if only one of the two trees has a tree list, and\n@@ -123,7 +122,7 @@ fn recursive_merge(\n                     // the list is already included in the other one via `self`.\n                     let tree_contains_self = |tree: &ast::UseTree| {\n                         tree.use_tree_list()\n-                            .map(|tree_list| tree_list.use_trees().any(tree_is_self))\n+                            .map(|tree_list| tree_list.use_trees().any(|it| tree_is_self(&it)))\n                             .unwrap_or(false)\n                     };\n                     match (tree_contains_self(lhs_t), tree_contains_self(&rhs_t)) {\n@@ -141,17 +140,18 @@ fn recursive_merge(\n                     // glob import of said module see the `merge_self_glob` or\n                     // `merge_mod_into_glob` tests.\n                     if lhs_t.star_token().is_some() || rhs_t.star_token().is_some() {\n-                        *lhs_t = make::use_tree(\n-                            make::path_unqualified(make::path_segment_self()),\n-                            None,\n-                            None,\n-                            false,\n-                        );\n-                        use_trees.insert(idx, make::use_tree_glob());\n-                        continue;\n-                    }\n-\n-                    if lhs_t.use_tree_list().is_none() && rhs_t.use_tree_list().is_none() {\n+                        if tree_is_self(lhs_t) || tree_is_self(&rhs_t) {\n+                            cov_mark::hit!(merge_self_glob);\n+                            *lhs_t = make::use_tree(\n+                                make::path_unqualified(make::path_segment_self()),\n+                                None,\n+                                None,\n+                                false,\n+                            );\n+                            use_trees.insert(idx, make::use_tree_glob());\n+                            continue;\n+                        }\n+                    } else if lhs_t.use_tree_list().is_none() && rhs_t.use_tree_list().is_none() {\n                         continue;\n                     }\n                 }"}]}