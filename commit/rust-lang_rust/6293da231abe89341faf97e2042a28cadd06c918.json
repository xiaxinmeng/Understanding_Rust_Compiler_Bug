{"sha": "6293da231abe89341faf97e2042a28cadd06c918", "node_id": "C_kwDOAAsO6NoAKDYyOTNkYTIzMWFiZTg5MzQxZmFmOTdlMjA0MmEyOGNhZGQwNmM5MTg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-07T10:46:22Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-07T10:46:22Z"}, "message": "`UnsafeCell` now has no niches, ever.", "tree": {"sha": "b76e798f71dba9241a6133cd4174739c3896d678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b76e798f71dba9241a6133cd4174739c3896d678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6293da231abe89341faf97e2042a28cadd06c918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6293da231abe89341faf97e2042a28cadd06c918", "html_url": "https://github.com/rust-lang/rust/commit/6293da231abe89341faf97e2042a28cadd06c918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6293da231abe89341faf97e2042a28cadd06c918/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5483a7dd44a91e190ba8eb1361879ac3936cc415", "url": "https://api.github.com/repos/rust-lang/rust/commits/5483a7dd44a91e190ba8eb1361879ac3936cc415", "html_url": "https://github.com/rust-lang/rust/commit/5483a7dd44a91e190ba8eb1361879ac3936cc415"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "6bce5fbd4c1fecf24cb1144fa812569186834f26", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6293da231abe89341faf97e2042a28cadd06c918/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6293da231abe89341faf97e2042a28cadd06c918/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=6293da231abe89341faf97e2042a28cadd06c918", "patch": "@@ -148,7 +148,7 @@ fn is_value_unfrozen_raw<'tcx>(\n         match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n-            ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n+            ty::Adt(ty_def, ..) if ty_def.is_unsafe_cell() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))"}]}