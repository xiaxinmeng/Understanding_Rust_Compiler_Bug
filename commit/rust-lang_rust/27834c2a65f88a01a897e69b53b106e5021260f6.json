{"sha": "27834c2a65f88a01a897e69b53b106e5021260f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODM0YzJhNjVmODhhMDFhODk3ZTY5YjUzYjEwNmU1MDIxMjYwZjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-12T22:09:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-12T22:09:44Z"}, "message": "test: Switch lib-either over to interior vectors. Puts out burning tinderbox.", "tree": {"sha": "6c16da213efb28349dbcfbbfd5ef19d3d53c96aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c16da213efb28349dbcfbbfd5ef19d3d53c96aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27834c2a65f88a01a897e69b53b106e5021260f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27834c2a65f88a01a897e69b53b106e5021260f6", "html_url": "https://github.com/rust-lang/rust/commit/27834c2a65f88a01a897e69b53b106e5021260f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27834c2a65f88a01a897e69b53b106e5021260f6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab579e1c9fb0308e180e58c1d860a70cb271efd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab579e1c9fb0308e180e58c1d860a70cb271efd3", "html_url": "https://github.com/rust-lang/rust/commit/ab579e1c9fb0308e180e58c1d860a70cb271efd3"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "047c728967012cba87644e14ff21743bb84598fd", "filename": "src/test/run-pass/lib-either.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/27834c2a65f88a01a897e69b53b106e5021260f6/src%2Ftest%2Frun-pass%2Flib-either.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27834c2a65f88a01a897e69b53b106e5021260f6/src%2Ftest%2Frun-pass%2Flib-either.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-either.rs?ref=27834c2a65f88a01a897e69b53b106e5021260f6", "patch": "@@ -2,7 +2,7 @@\n \n use std;\n import std::either::*;\n-import std::vec::len;\n+import std::ivec::len;\n \n fn test_either_left() {\n   auto val = left(10);\n@@ -19,57 +19,57 @@ fn test_either_right() {\n }\n \n fn test_lefts() {\n-  auto input = [left(10),\n-                right(11),\n-                left(12),\n-                right(13),\n-                left(14)];\n+  auto input = ~[left(10),\n+                 right(11),\n+                 left(12),\n+                 right(13),\n+                 left(14)];\n   auto result = lefts(input);\n-  assert (result == [10, 12, 14]);\n+  assert (result == ~[10, 12, 14]);\n }\n \n fn test_lefts_none() {\n-  let vec[t[int, int]] input = [right(10),\n+  let (t[int, int])[] input = ~[right(10),\n                                 right(10)];\n   auto result = lefts(input);\n   assert (len(result) == 0u);\n }\n \n fn test_lefts_empty() {\n-  let vec[t[int, int]] input = [];\n+  let (t[int, int])[] input = ~[];\n   auto result = lefts(input);\n   assert (len(result) == 0u);\n }\n \n fn test_rights() {\n-  auto input = [left(10),\n-                right(11),\n-                left(12),\n-                right(13),\n-                left(14)];\n+  auto input = ~[left(10),\n+                 right(11),\n+                 left(12),\n+                 right(13),\n+                 left(14)];\n   auto result = rights(input);\n-  assert (result == [11, 13]);\n+  assert (result == ~[11, 13]);\n }\n \n fn test_rights_none() {\n-  let vec[t[int, int]] input = [left(10),\n+  let (t[int, int])[] input = ~[left(10),\n                                 left(10)];\n   auto result = rights(input);\n   assert (len(result) == 0u);\n }\n \n fn test_rights_empty() {\n-    let vec[t[int, int]] input = [];\n+    let (t[int, int])[] input = ~[];\n     auto result = rights(input);\n     assert (len(result) == 0u);\n }\n \n fn test_partition() {\n-  auto input = [left(10),\n-                right(11),\n-                left(12),\n-                right(13),\n-                left(14)];\n+  auto input = ~[left(10),\n+                 right(11),\n+                 left(12),\n+                 right(13),\n+                 left(14)];\n   auto result = partition(input);\n   assert (result._0.(0) == 10);\n   assert (result._0.(1) == 12);\n@@ -79,23 +79,23 @@ fn test_partition() {\n }\n \n fn test_partition_no_lefts() {\n-  let vec[t[int, int]] input = [right(10),\n+  let (t[int, int])[] input = ~[right(10),\n                                 right(11)];\n   auto result = partition(input);\n   assert (len(result._0) == 0u);\n   assert (len(result._1) == 2u);\n }\n \n fn test_partition_no_rights() {\n-  let vec[t[int, int]] input = [left(10),\n+  let (t[int, int])[] input = ~[left(10),\n                                 left(11)];\n   auto result = partition(input);\n   assert (len(result._0) == 2u);\n   assert (len(result._1) == 0u);\n }\n \n fn test_partition_empty() {\n-  let vec[t[int, int]] input = [];\n+  let (t[int, int])[] input = ~[];\n   auto result = partition(input);\n   assert (len(result._0) == 0u);\n   assert (len(result._1) == 0u);\n@@ -114,4 +114,4 @@ fn main() {\n   test_partition_no_lefts();\n   test_partition_no_rights();\n   test_partition_empty();\n-}\n\\ No newline at end of file\n+}"}]}