{"sha": "0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjY2UyYmMwYWIwM2EyOTFmMDY5MmY1Mjk4ZjA0NTE5YTZmZjhhYmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-16T10:27:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-16T10:27:03Z"}, "message": "Merge #2020\n\n2020: minor cleanup r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b7830a8cc37a5a09bc36fd6d14231c870fafe157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7830a8cc37a5a09bc36fd6d14231c870fafe157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpvB3CRBK7hj4Ov3rIwAAdHIIACuW2HYvfFhJNRZuarNuT4IM\n2Bhk3A0gmjh4vpsE+DiDm13UOdf+jC9xFlHurQomWeMrc/kKdp6nShZZ6oICHC8C\nitNy0tZV6VNRUUOSybiP5TxugBomHFB2cQRXhl5QUtPkdperj6UxxEkDY3s7H1X7\n2xiATp18qVvL/Swa0MHwseAVAX8gnpkTA0DM7uNkSPY4XYtx1juOLilSflEXG6PK\n2GMhWXHl3A5ZP6CYJRL8Dutbtj/MZhu9RTwJEqRQl7/Icb7p5FKmV//oAlOq+ksK\n0FVJPVlsnT6lvDpHoUqltnwVsftIybXXixwFXWcT6n0i9j5ozLngFwiMGYAH80A=\n=S+02\n-----END PGP SIGNATURE-----\n", "payload": "tree b7830a8cc37a5a09bc36fd6d14231c870fafe157\nparent e53c916ce2ab7274b68be80b6791afe5b550500f\nparent 260ae2dbc99a6e56228525baca57317ecd8306dc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571221623 +0000\ncommitter GitHub <noreply@github.com> 1571221623 +0000\n\nMerge #2020\n\n2020: minor cleanup r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "html_url": "https://github.com/rust-lang/rust/commit/0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53c916ce2ab7274b68be80b6791afe5b550500f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53c916ce2ab7274b68be80b6791afe5b550500f", "html_url": "https://github.com/rust-lang/rust/commit/e53c916ce2ab7274b68be80b6791afe5b550500f"}, {"sha": "260ae2dbc99a6e56228525baca57317ecd8306dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/260ae2dbc99a6e56228525baca57317ecd8306dc", "html_url": "https://github.com/rust-lang/rust/commit/260ae2dbc99a6e56228525baca57317ecd8306dc"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "489a3b19cabfb0af252ebaa44a6e7fef701404b2", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "patch": "@@ -111,37 +111,37 @@ pub trait DefDatabase: InternDatabase + HirDebugDatabase {\n     #[salsa::invoke(CrateDefMap::crate_def_map_query)]\n     fn crate_def_map(&self, krate: Crate) -> Arc<CrateDefMap>;\n \n-    #[salsa::invoke(crate::impl_block::impls_in_module_with_source_map_query)]\n+    #[salsa::invoke(ModuleImplBlocks::impls_in_module_with_source_map_query)]\n     fn impls_in_module_with_source_map(\n         &self,\n         module: Module,\n     ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>);\n \n-    #[salsa::invoke(crate::impl_block::impls_in_module)]\n+    #[salsa::invoke(ModuleImplBlocks::impls_in_module_query)]\n     fn impls_in_module(&self, module: Module) -> Arc<ModuleImplBlocks>;\n \n     #[salsa::invoke(crate::generics::GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDef) -> Arc<GenericParams>;\n \n-    #[salsa::invoke(crate::FnData::fn_data_query)]\n+    #[salsa::invoke(FnData::fn_data_query)]\n     fn fn_data(&self, func: Function) -> Arc<FnData>;\n \n-    #[salsa::invoke(crate::type_alias::type_alias_data_query)]\n+    #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, typ: TypeAlias) -> Arc<TypeAliasData>;\n \n-    #[salsa::invoke(crate::ConstData::const_data_query)]\n+    #[salsa::invoke(ConstData::const_data_query)]\n     fn const_data(&self, konst: Const) -> Arc<ConstData>;\n \n-    #[salsa::invoke(crate::ConstData::static_data_query)]\n+    #[salsa::invoke(ConstData::static_data_query)]\n     fn static_data(&self, konst: Static) -> Arc<ConstData>;\n \n-    #[salsa::invoke(crate::lang_item::LangItems::module_lang_items_query)]\n+    #[salsa::invoke(LangItems::module_lang_items_query)]\n     fn module_lang_items(&self, module: Module) -> Option<Arc<LangItems>>;\n \n-    #[salsa::invoke(crate::lang_item::LangItems::crate_lang_items_query)]\n+    #[salsa::invoke(LangItems::crate_lang_items_query)]\n     fn crate_lang_items(&self, krate: Crate) -> Arc<LangItems>;\n \n-    #[salsa::invoke(crate::lang_item::LangItems::lang_item_query)]\n+    #[salsa::invoke(LangItems::lang_item_query)]\n     fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n \n     #[salsa::invoke(crate::code_model::docs::documentation_query)]"}, {"sha": "33ef875636d0a1d5efa544e8b1a8a6ed0891b3c4", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "patch": "@@ -176,6 +176,25 @@ pub struct ModuleImplBlocks {\n }\n \n impl ModuleImplBlocks {\n+    pub(crate) fn impls_in_module_with_source_map_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        module: Module,\n+    ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n+        let mut source_map = ImplSourceMap::default();\n+        let crate_graph = db.crate_graph();\n+        let cfg_options = crate_graph.cfg_options(module.krate.crate_id());\n+\n+        let result = ModuleImplBlocks::collect(db, cfg_options, module, &mut source_map);\n+        (Arc::new(result), Arc::new(source_map))\n+    }\n+\n+    pub(crate) fn impls_in_module_query(\n+        db: &impl DefDatabase,\n+        module: Module,\n+    ) -> Arc<ModuleImplBlocks> {\n+        db.impls_in_module_with_source_map(module).0\n+    }\n+\n     fn collect(\n         db: &(impl DefDatabase + AstDatabase),\n         cfg_options: &CfgOptions,\n@@ -264,19 +283,3 @@ impl ModuleImplBlocks {\n         }\n     }\n }\n-\n-pub(crate) fn impls_in_module_with_source_map_query(\n-    db: &(impl DefDatabase + AstDatabase),\n-    module: Module,\n-) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n-    let mut source_map = ImplSourceMap::default();\n-    let crate_graph = db.crate_graph();\n-    let cfg_options = crate_graph.cfg_options(module.krate.crate_id());\n-\n-    let result = ModuleImplBlocks::collect(db, cfg_options, module, &mut source_map);\n-    (Arc::new(result), Arc::new(source_map))\n-}\n-\n-pub(crate) fn impls_in_module(db: &impl DefDatabase, module: Module) -> Arc<ModuleImplBlocks> {\n-    db.impls_in_module_with_source_map(module).0\n-}"}, {"sha": "674a4610204473c40a24ba29ddae5f282ebfd8c7", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cce2bc0ab03a291f0692f5298f04519a6ff8abe/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=0cce2bc0ab03a291f0692f5298f04519a6ff8abe", "patch": "@@ -17,12 +17,14 @@ pub struct TypeAliasData {\n     pub(crate) type_ref: Option<TypeRef>,\n }\n \n-pub(crate) fn type_alias_data_query(\n-    db: &(impl DefDatabase + AstDatabase),\n-    typ: TypeAlias,\n-) -> Arc<TypeAliasData> {\n-    let node = typ.source(db).ast;\n-    let name = node.name().map_or_else(Name::missing, |n| n.as_name());\n-    let type_ref = node.type_ref().map(TypeRef::from_ast);\n-    Arc::new(TypeAliasData { name, type_ref })\n+impl TypeAliasData {\n+    pub(crate) fn type_alias_data_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        typ: TypeAlias,\n+    ) -> Arc<TypeAliasData> {\n+        let node = typ.source(db).ast;\n+        let name = node.name().map_or_else(Name::missing, |n| n.as_name());\n+        let type_ref = node.type_ref().map(TypeRef::from_ast);\n+        Arc::new(TypeAliasData { name, type_ref })\n+    }\n }"}]}