{"sha": "66afdd1f4292e7fda6ea89113c0c8343e3321d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YWZkZDFmNDI5MmU3ZmRhNmVhODkxMTNjMGM4MzQzZTMzMjFkOTk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-22T01:21:12Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-22T22:44:47Z"}, "message": "Enhance collapsible_match for adjusted bindings", "tree": {"sha": "571ecd0dd2bccb8b0173d4c534b23dd8fd695707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571ecd0dd2bccb8b0173d4c534b23dd8fd695707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66afdd1f4292e7fda6ea89113c0c8343e3321d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66afdd1f4292e7fda6ea89113c0c8343e3321d99", "html_url": "https://github.com/rust-lang/rust/commit/66afdd1f4292e7fda6ea89113c0c8343e3321d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66afdd1f4292e7fda6ea89113c0c8343e3321d99/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d509f8b404b77fd7fa949a13fd38c9f5f51b9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d509f8b404b77fd7fa949a13fd38c9f5f51b9fb", "html_url": "https://github.com/rust-lang/rust/commit/2d509f8b404b77fd7fa949a13fd38c9f5f51b9fb"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "604ba1020469714be54f7911ccbb082e5a271a55", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66afdd1f4292e7fda6ea89113c0c8343e3321d99/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66afdd1f4292e7fda6ea89113c0c8343e3321d99/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=66afdd1f4292e7fda6ea89113c0c8343e3321d99", "patch": "@@ -2,7 +2,7 @@ use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,8 +72,7 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         if arms_inner.iter().all(|arm| arm.guard.is_none());\n         // match expression must be a local binding\n         // match <local> { .. }\n-        if let ExprKind::Path(QPath::Resolved(None, path)) = expr_in.kind;\n-        if let Res::Local(binding_id) = path.res;\n+        if let Some(binding_id) = addr_adjusted_binding(expr_in, cx);\n         // one of the branches must be \"wild-like\"\n         if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n         let (wild_inner_arm, non_wild_inner_arm) =\n@@ -175,3 +174,20 @@ fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n     }\n     false\n }\n+\n+/// Retrieves a binding ID with optional `&` and/or `*` operators removed. (e.g. `&**foo`)\n+/// Returns `None` if a non-reference type is de-referenced.\n+/// For example, if `Vec` is de-referenced to a slice, `None` is returned.\n+fn addr_adjusted_binding(mut expr: &Expr<'_>, cx: &LateContext<'_>) -> Option<HirId> {\n+    loop {\n+        match expr.kind {\n+            ExprKind::AddrOf(_, _, e) => expr = e,\n+            ExprKind::Path(QPath::Resolved(None, path)) => match path.res {\n+                Res::Local(binding_id) => break Some(binding_id),\n+                _ => break None,\n+            },\n+            ExprKind::Unary(UnOp::UnDeref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n+            _ => break None,\n+        }\n+    }\n+}"}, {"sha": "8372a21247734626ebae426ea0cdac42b9e79a13", "filename": "tests/ui/collapsible_match2.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/66afdd1f4292e7fda6ea89113c0c8343e3321d99/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66afdd1f4292e7fda6ea89113c0c8343e3321d99/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=66afdd1f4292e7fda6ea89113c0c8343e3321d99", "patch": "@@ -40,6 +40,35 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n         // there is still a better way to write this.\n         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n     }\n+\n+    // deref reference value\n+    match Some(&[1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+\n+    // ref pattern and deref\n+    match Some(&[1]) {\n+        Some(ref s) => match &*s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+}\n+\n+fn no_lint() {\n+    // deref inner value (cannot pattern match with Vec)\n+    match Some(vec![1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n }\n \n fn make<T>() -> T {"}, {"sha": "b2eb457d1732622898250d32158c696db3e2a3b3", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/66afdd1f4292e7fda6ea89113c0c8343e3321d99/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66afdd1f4292e7fda6ea89113c0c8343e3321d99/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=66afdd1f4292e7fda6ea89113c0c8343e3321d99", "patch": "@@ -57,5 +57,41 @@ LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n    |                            Replace this binding\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:46:20\n+   |\n+LL |           Some(s) => match *s {\n+   |  ____________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:46:14\n+   |\n+LL |         Some(s) => match *s {\n+   |              ^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:55:24\n+   |\n+LL |           Some(ref s) => match &*s {\n+   |  ________________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:55:14\n+   |\n+LL |         Some(ref s) => match &*s {\n+   |              ^^^^^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: aborting due to 5 previous errors\n "}]}