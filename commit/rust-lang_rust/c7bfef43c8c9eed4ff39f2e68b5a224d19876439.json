{"sha": "c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YmZlZjQzYzhjOWVlZDRmZjM5ZjJlNjhiNWEyMjRkMTk4NzY0Mzk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T14:04:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T14:04:40Z"}, "message": "Ignore current scope when resolving self-shadowing imports\n\nThat is, for example, import x::y::x, which defines a local x,\nand thus wouldn't be able to find x::y anymore.\n\nCloses issue #624", "tree": {"sha": "2cf4dfb8010adde4bfe3305934dad533d7e0c0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf4dfb8010adde4bfe3305934dad533d7e0c0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "html_url": "https://github.com/rust-lang/rust/commit/c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfef43c8c9eed4ff39f2e68b5a224d19876439/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "html_url": "https://github.com/rust-lang/rust/commit/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "b666532d445ff0400903f9a478dcc466e380c0c0", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfef43c8c9eed4ff39f2e68b5a224d19876439/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfef43c8c9eed4ff39f2e68b5a224d19876439/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "patch": "@@ -58,17 +58,10 @@ type scopes = list[scope];\n \n tag import_state {\n     todo(@ast::view_item, scopes); // only used for explicit imports\n-\n     resolving(span);\n-    resolved(option::t[def],\n-\n-             /* value */\n-             option::t[def],\n-\n-             /* type */\n-             option::t[def]);\n-    /* module */\n-\n+    resolved(option::t[def], /* value */\n+             option::t[def], /* type */\n+             option::t[def]); /* module */\n }\n \n type ext_hash = hashmap[tup(def_id, str, namespace), def];\n@@ -94,8 +87,7 @@ tag mod_index_entry {\n     mie_view_item(@ast::view_item);\n     mie_item(@ast::item);\n     mie_native_item(@ast::native_item);\n-    mie_tag_variant(@ast::item, /* tag item */uint);\n-    /* variant index */\n+    mie_tag_variant(@ast::item /* tag item */, uint /* variant index */);\n \n }\n \n@@ -445,24 +437,29 @@ fn add_constr(&@env e, node_id id, &ty::constr_def c) {\n \n \n // Import resolution\n-fn resolve_import(&env e, &@ast::view_item it, &scopes sc) {\n+fn resolve_import(&env e, &@ast::view_item it, scopes sc) {\n     auto defid;\n     auto ids;\n+    auto name;\n     alt (it.node) {\n-        case (ast::view_item_import(_, ?_ids, ?_id)) {\n+        case (ast::view_item_import(?_name, ?_ids, ?_id)) {\n             defid = local_def(_id);\n             ids = _ids;\n+            name = _name;\n         }\n     }\n     e.imports.insert(defid._1, resolving(it.span));\n     auto n_idents = ivec::len(ids);\n     auto end_id = ids.(n_idents - 1u);\n+    // Ignore the current scope if this import would shadow itself.\n+    if (str::eq(name, ids.(0))) {\n+        sc = std::list::cdr(sc);\n+    }\n     if (n_idents == 1u) {\n-        auto next_sc = std::list::cdr(sc);\n         register(e, defid, it.span, end_id,\n-                 lookup_in_scope(e, next_sc, it.span, end_id, ns_value),\n-                 lookup_in_scope(e, next_sc, it.span, end_id, ns_type),\n-                 lookup_in_scope(e, next_sc, it.span, end_id, ns_module));\n+                 lookup_in_scope(e, sc, it.span, end_id, ns_value),\n+                 lookup_in_scope(e, sc, it.span, end_id, ns_type),\n+                 lookup_in_scope(e, sc, it.span, end_id, ns_module));\n         remove_if_unresolved(e.imports, defid._1);\n     } else {\n         auto dcur = alt(lookup_in_scope(e, sc, it.span, ids.(0), ns_module)) {"}, {"sha": "04548c88d35464f4d83832fea802c187f0bf1629", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfef43c8c9eed4ff39f2e68b5a224d19876439/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfef43c8c9eed4ff39f2e68b5a224d19876439/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "patch": "@@ -0,0 +1,16 @@\n+mod a {\n+    mod b {\n+        mod a {\n+            fn foo() -> int { ret 1; }\n+        }\n+    }\n+}\n+\n+mod c {\n+    import a::b::a;\n+    fn bar() { assert a::foo() == 1; }\n+}\n+\n+fn main() {\n+    c::bar();\n+}"}]}