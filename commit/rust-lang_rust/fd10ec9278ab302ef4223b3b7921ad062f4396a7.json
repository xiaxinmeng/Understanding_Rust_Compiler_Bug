{"sha": "fd10ec9278ab302ef4223b3b7921ad062f4396a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTBlYzkyNzhhYjMwMmVmNDIyM2IzYjc5MjFhZDA2MmY0Mzk2YTc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T16:14:47Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T16:14:47Z"}, "message": "Clean up unused things.", "tree": {"sha": "92194fe4424735e554ce3c5e66ab9f17229a461a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92194fe4424735e554ce3c5e66ab9f17229a461a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd10ec9278ab302ef4223b3b7921ad062f4396a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd10ec9278ab302ef4223b3b7921ad062f4396a7", "html_url": "https://github.com/rust-lang/rust/commit/fd10ec9278ab302ef4223b3b7921ad062f4396a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd10ec9278ab302ef4223b3b7921ad062f4396a7/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b530b0b027c47954961bf8f222d773248d2917f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b530b0b027c47954961bf8f222d773248d2917f1", "html_url": "https://github.com/rust-lang/rust/commit/b530b0b027c47954961bf8f222d773248d2917f1"}], "stats": {"total": 48, "additions": 10, "deletions": 38}, "files": [{"sha": "d4e2d949b5d6d3d243bc668fee556ee17060acb6", "filename": "src/interpreter.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd10ec9278ab302ef4223b3b7921ad062f4396a7/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd10ec9278ab302ef4223b3b7921ad062f4396a7/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=fd10ec9278ab302ef4223b3b7921ad062f4396a7", "patch": "@@ -1,21 +1,11 @@\n-// TODO(tsion): Remove this.\n-#![allow(unused_imports, dead_code, unused_variables)]\n-\n-use byteorder::{self, ByteOrder};\n use rustc::middle::const_eval;\n-use rustc::middle::cstore::CrateStore;\n-use rustc::middle::def_id;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::mir_map::MirMap;\n-use rustc::mir::repr::{self as mir, Mir};\n-use std::collections::HashMap;\n+use rustc::mir::repr as mir;\n use std::error::Error;\n use std::fmt;\n-use std::iter;\n-use syntax::ast::Attribute;\n-use syntax::attr::AttrMetaMethods;\n \n-use memory::{self, Pointer, Repr, Allocation};\n+use memory::{Memory, Pointer, Repr};\n \n const TRACE_EXECUTION: bool = true;\n \n@@ -59,7 +49,7 @@ impl fmt::Display for EvalError {\n /// A stack frame.\n struct Frame<'a, 'tcx: 'a> {\n     /// The MIR for the fucntion called on this frame.\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a mir::Mir<'tcx>,\n \n     /// A pointer for writing the return value of the current call, if it's not a diverging call.\n     return_ptr: Option<Pointer>,\n@@ -93,7 +83,7 @@ impl<'a, 'tcx: 'a> Frame<'a, 'tcx> {\n struct Interpreter<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n     mir_map: &'a MirMap<'tcx>,\n-    memory: memory::Memory,\n+    memory: Memory,\n     stack: Vec<Frame<'a, 'tcx>>,\n }\n \n@@ -102,12 +92,12 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         Interpreter {\n             tcx: tcx,\n             mir_map: mir_map,\n-            memory: memory::Memory::new(),\n+            memory: Memory::new(),\n             stack: Vec::new(),\n         }\n     }\n \n-    fn push_stack_frame(&mut self, mir: &'a Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n+    fn push_stack_frame(&mut self, mir: &'a mir::Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n                         return_ptr: Option<Pointer>) -> EvalResult<()> {\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n@@ -146,7 +136,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         // TODO(tsion): Deallocate local variables.\n     }\n \n-    fn call(&mut self, mir: &'a Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n+    fn call(&mut self, mir: &'a mir::Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n             return_ptr: Option<Pointer>) -> EvalResult<()> {\n         try!(self.push_stack_frame(mir, args, return_ptr));\n         let mut current_block = mir::START_BLOCK;\n@@ -194,6 +184,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 }\n \n                 // Call { ref func, ref args, ref destination, .. } => {\n+                //     use rustc::middle::cstore::CrateStore;\n                 //     let ptr = destination.as_ref().map(|&(ref lv, _)| self.lvalue_to_ptr(lv));\n                 //     let func_val = self.operand_to_ptr(func);\n \n@@ -357,7 +348,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 match constant.literal {\n                     Value { ref value } => self.const_to_ptr(value),\n \n-                    Item { def_id, kind, .. } => match kind {\n+                    Item { kind, .. } => match kind {\n                         // mir::ItemKind::Function | mir::ItemKind::Method => Value::Func(def_id),\n                         _ => panic!(\"can't handle item literal: {:?}\", constant.literal),\n                     },\n@@ -450,6 +441,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>) {\n     for (&id, mir) in &mir_map.map {\n         for attr in tcx.map.attrs(id) {\n+            use syntax::attr::AttrMetaMethods;\n             if attr.check_name(\"miri_run\") {\n                 let item = tcx.map.expect_item(id);\n \n@@ -469,23 +461,3 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n         }\n     }\n }\n-\n-fn check_expected(actual: &str, attr: &Attribute) -> bool {\n-    if let Some(meta_items) = attr.meta_item_list() {\n-        for meta_item in meta_items {\n-            if meta_item.check_name(\"expected\") {\n-                let expected = meta_item.value_str().unwrap();\n-\n-                if actual == &expected[..] {\n-                    println!(\"Test passed!\\n\");\n-                } else {\n-                    println!(\"Actual value:\\t{}\\nExpected value:\\t{}\\n\", actual, expected);\n-                }\n-\n-                return true;\n-            }\n-        }\n-    }\n-\n-    false\n-}"}]}