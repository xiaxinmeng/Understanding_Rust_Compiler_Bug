{"sha": "d94b88ef9837569d0efeb4725d03475e2b816e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NGI4OGVmOTgzNzU2OWQwZWZlYjQ3MjVkMDM0NzVlMmI4MTZlMDM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T04:21:33Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T04:21:33Z"}, "message": "Add support for AT_EMPTY_PATH to statx shim", "tree": {"sha": "01fe7b26a94efdce492e1be4dba742239b4cc2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01fe7b26a94efdce492e1be4dba742239b4cc2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d94b88ef9837569d0efeb4725d03475e2b816e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d94b88ef9837569d0efeb4725d03475e2b816e03", "html_url": "https://github.com/rust-lang/rust/commit/d94b88ef9837569d0efeb4725d03475e2b816e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d94b88ef9837569d0efeb4725d03475e2b816e03/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b222677766dca2d055dfb6ea7f0e7e25c4588c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b222677766dca2d055dfb6ea7f0e7e25c4588c0b", "html_url": "https://github.com/rust-lang/rust/commit/b222677766dca2d055dfb6ea7f0e7e25c4588c0b"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "0875a3314c80db5a479191e7e03c91f6ca4c9150", "filename": "src/shims/fs.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d94b88ef9837569d0efeb4725d03475e2b816e03/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d94b88ef9837569d0efeb4725d03475e2b816e03/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d94b88ef9837569d0efeb4725d03475e2b816e03", "patch": "@@ -345,7 +345,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let buf = this.deref_operand(buf_op)?;\n \n-        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n+        let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n@@ -454,6 +454,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.read_scalar(flags_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n                 err_unsup_format!(\"Failed to convert pointer sized operand to integer: {}\", e)\n             })?;\n+        let empty_path_flag = flags & this.eval_libc(\"AT_EMPTY_PATH\")?.to_i32()? != 0;\n         // `dirfd` should be a `c_int` but the `syscall` function provides an `isize`.\n         let dirfd: i32 =\n             this.read_scalar(dirfd_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n@@ -463,7 +464,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // to `dirfd` when the latter is `AT_FDCWD`. The behavior of `statx` with a relative path\n         // and a directory file descriptor other than `AT_FDCWD` is specified but it cannot be\n         // tested from `libstd`. If you found this error, please open an issue reporting it.\n-        if !(path.is_absolute() || dirfd == this.eval_libc_i32(\"AT_FDCWD\")?) {\n+        if !(\n+            path.is_absolute() ||\n+            dirfd == this.eval_libc_i32(\"AT_FDCWD\")? ||\n+            (path.as_os_str().is_empty() && empty_path_flag)\n+        ) {\n             throw_unsup_format!(\n                 \"Using statx with a relative path and a file descriptor different from `AT_FDCWD` is not supported\"\n             )\n@@ -480,7 +485,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // symbolic links.\n         let follow_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? == 0;\n \n-        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n+        // If the path is empty, and the AT_EMPTY_PATH flag is set, we query the open file\n+        // represented by dirfd, whether it's a directory or otherwise.\n+        let metadata = if path.as_os_str().is_empty() && empty_path_flag {\n+            FileMetadata::from_fd(this, dirfd)?\n+        } else {\n+            FileMetadata::from_path(this, path, follow_symlink)?\n+        };\n+        let metadata = match metadata {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n@@ -589,7 +601,7 @@ struct FileMetadata {\n }\n \n impl FileMetadata {\n-    fn new<'tcx, 'mir>(\n+    fn from_path<'tcx, 'mir>(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n         path: PathBuf,\n         follow_symlink: bool\n@@ -600,6 +612,27 @@ impl FileMetadata {\n             std::fs::symlink_metadata(path)\n         };\n \n+        FileMetadata::from_meta(ecx, metadata)\n+    }\n+\n+    fn from_fd<'tcx, 'mir>(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        fd: i32,\n+    ) -> InterpResult<'tcx, Option<FileMetadata>> {\n+        let option = ecx.machine.file_handler.handles.get(&fd);\n+        let handle = match option {\n+            Some(handle) => handle,\n+            None => return ecx.handle_not_found().map(|_: i32| None),\n+        };\n+        let metadata = handle.file.metadata();\n+\n+        FileMetadata::from_meta(ecx, metadata)\n+    }\n+\n+    fn from_meta<'tcx, 'mir>(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        metadata: Result<std::fs::Metadata, std::io::Error>,\n+    ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = match metadata {\n             Ok(metadata) => metadata,\n             Err(e) => {"}, {"sha": "cc8f6e01f323155e00dc2300c5a306fed45943a6", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d94b88ef9837569d0efeb4725d03475e2b816e03/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d94b88ef9837569d0efeb4725d03475e2b816e03/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=d94b88ef9837569d0efeb4725d03475e2b816e03", "patch": "@@ -29,8 +29,10 @@ fn main() {\n     let mut file = File::create(&path).unwrap();\n     // Writing 0 bytes should not change the file contents.\n     file.write(&mut []).unwrap();\n+    assert_eq!(file.metadata().unwrap().len(), 0);\n \n     file.write(bytes).unwrap();\n+    assert_eq!(file.metadata().unwrap().len(), bytes.len() as u64);\n     // Test opening, reading and closing a file.\n     let mut file = File::open(&path).unwrap();\n     let mut contents = Vec::new();"}]}