{"sha": "5ab87dd8568208016a82a7d087292312af786921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYjg3ZGQ4NTY4MjA4MDE2YTgyYTdkMDg3MjkyMzEyYWY3ODY5MjE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-05T07:11:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-19T05:09:09Z"}, "message": "Fix missing_const_for_fn for impl trait methods", "tree": {"sha": "8fa3612fc6c1be967195d6816906ba21207767e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fa3612fc6c1be967195d6816906ba21207767e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab87dd8568208016a82a7d087292312af786921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab87dd8568208016a82a7d087292312af786921", "html_url": "https://github.com/rust-lang/rust/commit/5ab87dd8568208016a82a7d087292312af786921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab87dd8568208016a82a7d087292312af786921/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29559fdfd685553cb4587eeaabb4d541c4e7885", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29559fdfd685553cb4587eeaabb4d541c4e7885", "html_url": "https://github.com/rust-lang/rust/commit/e29559fdfd685553cb4587eeaabb4d541c4e7885"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "633105ff60bb73959c1ba000442aeb3e35278a39", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ab87dd8568208016a82a7d087292312af786921/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab87dd8568208016a82a7d087292312af786921/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=5ab87dd8568208016a82a7d087292312af786921", "patch": "@@ -1,4 +1,5 @@\n use crate::utils::{is_entrypoint_fn, span_lint};\n+use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n@@ -95,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if already_const(sig.header) {\n+                if is_trait_method(cx, hir_id) || already_const(sig.header) {\n                     return;\n                 }\n             },\n@@ -114,6 +115,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n+fn is_trait_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n+    // Get the implemented trait for the current function\n+    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n+    if_chain! {\n+        if parent_impl != hir::CRATE_HIR_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n+        if let hir::ItemKind::Impl(_, _, _, _, Some(_trait_ref), _, _) = &item.node;\n+        then { return true; }\n+    }\n+    false\n+}\n+\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "115cc954dc7860f0287a7419f9a96641a8fa1f01", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ab87dd8568208016a82a7d087292312af786921/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab87dd8568208016a82a7d087292312af786921/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=5ab87dd8568208016a82a7d087292312af786921", "patch": "@@ -59,3 +59,12 @@ trait Foo {\n // Don't lint in external macros (derive)\n #[derive(PartialEq, Eq)]\n struct Point(isize, isize);\n+\n+impl std::ops::Add for Point {\n+    type Output = Self;\n+\n+    // Don't lint in trait impls of derived methods\n+    fn add(self, other: Self) -> Self {\n+        Point(self.0 + other.0, self.1 + other.1)\n+    }\n+}"}]}