{"sha": "9a857b4472142b6d0bf65e9185c4c2619e722fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODU3YjQ0NzIxNDJiNmQwYmY2NWU5MTg1YzRjMjYxOWU3MjJmYjA=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-22T15:02:49Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-23T11:17:30Z"}, "message": "libsyntax: Forbid type parameters in tuple indices\n\nThis breaks code like\n\n```\nlet t = (42i, 42i);\n... t.0::<int> ...;\n```\n\nChange this code to not contain an unused type parameter. For example:\n\n```\nlet t = (42i, 42i);\n... t.0 ...;\n```\n\nCloses https://github.com/rust-lang/rust/issues/19096\n\n[breaking-change]", "tree": {"sha": "db9b9e6b482778f490924def2b5a2b3c3a438ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db9b9e6b482778f490924def2b5a2b3c3a438ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a857b4472142b6d0bf65e9185c4c2619e722fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a857b4472142b6d0bf65e9185c4c2619e722fb0", "html_url": "https://github.com/rust-lang/rust/commit/9a857b4472142b6d0bf65e9185c4c2619e722fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a857b4472142b6d0bf65e9185c4c2619e722fb0/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfdb14044bc5a8320536d19c381fb9c04420e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfdb14044bc5a8320536d19c381fb9c04420e3b", "html_url": "https://github.com/rust-lang/rust/commit/acfdb14044bc5a8320536d19c381fb9c04420e3b"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "e4fa650882029578006312538b2024e0661cb575", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a857b4472142b6d0bf65e9185c4c2619e722fb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a857b4472142b6d0bf65e9185c4c2619e722fb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9a857b4472142b6d0bf65e9185c4c2619e722fb0", "patch": "@@ -49,8 +49,7 @@ use ast::{PolyTraitRef};\n use ast::{QPath, RequiredMethod};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n-use ast::{StructVariantKind, BiSub};\n-use ast::StrStyle;\n+use ast::{StructVariantKind, BiSub, StrStyle};\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n@@ -65,10 +64,8 @@ use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause, WherePredicate};\n use ast;\n-use ast_util::{as_prec, ident_to_path, operator_prec};\n-use ast_util;\n-use codemap::{Span, BytePos, Spanned, spanned, mk_sp};\n-use codemap;\n+use ast_util::{mod, as_prec, ident_to_path, operator_prec};\n+use codemap::{mod, Span, BytePos, Spanned, spanned, mk_sp};\n use diagnostic;\n use ext::tt::macro_parser;\n use parse;\n@@ -2472,24 +2469,19 @@ impl<'a> Parser<'a> {\n                   }\n                   token::Literal(token::Integer(n), suf) => {\n                     let sp = self.span;\n+\n+                    // A tuple index may not have a suffix\n                     self.expect_no_suffix(sp, \"tuple index\", suf);\n \n-                    let index = n.as_str();\n                     let dot = self.last_span.hi;\n                     hi = self.span.hi;\n                     self.bump();\n-                    let (_, tys) = if self.eat(&token::ModSep) {\n-                        self.expect_lt();\n-                        self.parse_generic_values_after_lt()\n-                    } else {\n-                        (Vec::new(), Vec::new())\n-                    };\n \n-                    let num = from_str::<uint>(index);\n-                    match num {\n+                    let index = from_str::<uint>(n.as_str());\n+                    match index {\n                         Some(n) => {\n                             let id = spanned(dot, hi, n);\n-                            let field = self.mk_tup_field(e, id, tys);\n+                            let field = self.mk_tup_field(e, id, Vec::new());\n                             e = self.mk_expr(lo, hi, field);\n                         }\n                         None => {"}]}