{"sha": "71e0e59b63a5476e8a215d76014efb51335e2151", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZTBlNTliNjNhNTQ3NmU4YTIxNWQ3NjAxNGVmYjUxMzM1ZTIxNTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-11T08:48:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-11T08:49:59Z"}, "message": "README: make our cross-interpretation feature stand out more", "tree": {"sha": "b88f008e117119d1f7e479ca1847b2d2800f422e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b88f008e117119d1f7e479ca1847b2d2800f422e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71e0e59b63a5476e8a215d76014efb51335e2151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71e0e59b63a5476e8a215d76014efb51335e2151", "html_url": "https://github.com/rust-lang/rust/commit/71e0e59b63a5476e8a215d76014efb51335e2151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71e0e59b63a5476e8a215d76014efb51335e2151/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4c80e787f400e0ac36685b51460e52c1f31412", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4c80e787f400e0ac36685b51460e52c1f31412", "html_url": "https://github.com/rust-lang/rust/commit/9d4c80e787f400e0ac36685b51460e52c1f31412"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "66f4801fc6055b1d78ea72f3b71de361e41ac499", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71e0e59b63a5476e8a215d76014efb51335e2151/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/71e0e59b63a5476e8a215d76014efb51335e2151/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=71e0e59b63a5476e8a215d76014efb51335e2151", "patch": "@@ -87,11 +87,6 @@ can pass arguments to Miri via `MIRIFLAGS`. For example,\n `MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\n without checking the aliasing of references.\n \n-Miri supports cross-execution: if you want to run the program as if it was a\n-Linux program, you can do `cargo miri run --target x86_64-unknown-linux-gnu`.\n-This is particularly useful if you are using Windows, as the Linux target is\n-much better supported than Windows targets.\n-\n When compiling code via `cargo miri`, the `cfg(miri)` config flag is set.  You\n can use this to ignore test cases that fail under Miri because they do things\n Miri does not support:\n@@ -116,6 +111,19 @@ error: unsupported operation: can't call foreign function: bind\n             performed an operation that the interpreter does not support\n ```\n \n+### Cross-interpretation: running for different targets\n+\n+Miri cannot just run a binary or test suite for your host target, it can also\n+perform cross-interpretation for arbitrary foreign targets: `cargo miri run\n+--target x86_64-unknown-linux-gnu` will run your program as if it was a Linux\n+program, no matter your host OS.  This is particularly useful if you are using\n+Windows, as the Linux target is much better supported than Windows targets.\n+\n+You can also use this to test platforms with different properties than your host\n+platform.  For example `cargo miri test --target mips64-unknown-linux-gnuabi64`\n+will run your test suite on a big-endian target, which is useful for testing\n+endian-sensitive code.\n+\n ### Running Miri on CI\n \n To run Miri on CI, make sure that you handle the case where the latest nightly"}]}