{"sha": "84539eb7b5de1b15467c591dcfb272fefa488bc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTM5ZWI3YjVkZTFiMTU0NjdjNTkxZGNmYjI3MmZlZmE0ODhiYzg=", "commit": {"author": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-14T16:27:42Z"}, "committer": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-14T16:27:42Z"}, "message": "remove primitive type links", "tree": {"sha": "0b1ab267721404ae9b570183b4074b2cd9b89147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b1ab267721404ae9b570183b4074b2cd9b89147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84539eb7b5de1b15467c591dcfb272fefa488bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84539eb7b5de1b15467c591dcfb272fefa488bc8", "html_url": "https://github.com/rust-lang/rust/commit/84539eb7b5de1b15467c591dcfb272fefa488bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84539eb7b5de1b15467c591dcfb272fefa488bc8/comments", "author": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232e3d04b359a5867b530f26698f986ba1732d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/232e3d04b359a5867b530f26698f986ba1732d85", "html_url": "https://github.com/rust-lang/rust/commit/232e3d04b359a5867b530f26698f986ba1732d85"}], "stats": {"total": 20, "additions": 0, "deletions": 20}, "files": [{"sha": "8256b725acfa399877768d57c53b9b6c35915d4b", "filename": "library/std/src/os/raw/char.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -7,5 +7,3 @@ C chars are most commonly used to make C strings. Unlike Rust, where the length\n [C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n [Rust's `char` type]: char\n [`CStr`]: crate::ffi::CStr\n-[`i8`]: i8\n-[`u8`]: u8"}, {"sha": "57f4534829ec834a1b69ae377b393adc3dfd0519", "filename": "library/std/src/os/raw/double.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -4,4 +4,3 @@ This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754\n \n [IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n [`float`]: c_float\n-[`f64`]: f64"}, {"sha": "61e2abc05189df2e12d7fa1b77894868f3e2d269", "filename": "library/std/src/os/raw/float.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `float` type.\n This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n \n [IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n-[`f32`]: f32"}, {"sha": "8062ff2307a9537ccf9007c982aa5e0eda09135e", "filename": "library/std/src/os/raw/int.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `signed int` (`int`) type.\n This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n \n [`short`]: c_short\n-[`i32`]: i32\n-[`i16`]: i16"}, {"sha": "cc160783f78b7d5b429f92ac9e8750531ce64063", "filename": "library/std/src/os/raw/long.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `signed long` (`long`) type.\n This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n \n [`int`]: c_int\n-[`i32`]: i32\n-[`i64`]: i64"}, {"sha": "49c61bd61f4ad71c2c569289b978b182f125c85c", "filename": "library/std/src/os/raw/longlong.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `signed long long` (`long long`) type.\n This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n \n [`long`]: c_int\n-[`i64`]: i64\n-[`i128`]: i128"}, {"sha": "69879c9f17f4d80af70250424ed18558942cdc5c", "filename": "library/std/src/os/raw/schar.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `signed char` type.\n This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n \n [`char`]: c_char\n-[`i8`]: i8"}, {"sha": "3d1e53d1325f31a12fee0825a30a8e89a2c0c857", "filename": "library/std/src/os/raw/short.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `signed short` (`short`) type.\n This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n \n [`char`]: c_char\n-[`i16`]: i16"}, {"sha": "b633bb7f8dacf5bf2ca300d0ab0a793acbbc3a49", "filename": "library/std/src/os/raw/uchar.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `unsigned char` type.\n This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n \n [`char`]: c_char\n-[`u8`]: u8"}, {"sha": "f3abea35937abd712a916313955b86932570fb00", "filename": "library/std/src/os/raw/uint.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `unsigned int` type.\n This type will almost always be [`u32`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n \n [`int`]: c_int\n-[`u32`]: u32\n-[`u16`]: u16"}, {"sha": "4ab304e65777326eeef30e4e950e0296bb38881b", "filename": "library/std/src/os/raw/ulong.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `unsigned long` type.\n This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n \n [`long`]: c_long\n-[`u32`]: u32\n-[`u64`]: u64"}, {"sha": "a27d70e17537d440fcddae685df71b4e1d6a9fd8", "filename": "library/std/src/os/raw/ulonglong.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,5 +3,3 @@ Equivalent to C's `unsigned long long` type.\n This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n \n [`long long`]: c_longlong\n-[`u64`]: u64\n-[`u128`]: u128"}, {"sha": "6928e51b352c82d2a5aa413f20c402f4ff28dca4", "filename": "library/std/src/os/raw/ushort.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/84539eb7b5de1b15467c591dcfb272fefa488bc8/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md?ref=84539eb7b5de1b15467c591dcfb272fefa488bc8", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `unsigned short` type.\n This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n \n [`short`]: c_short\n-[`u16`]: u16"}]}