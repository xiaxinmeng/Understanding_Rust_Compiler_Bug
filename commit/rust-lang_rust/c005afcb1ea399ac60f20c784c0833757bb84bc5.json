{"sha": "c005afcb1ea399ac60f20c784c0833757bb84bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDVhZmNiMWVhMzk5YWM2MGYyMGM3ODRjMDgzMzc1N2JiODRiYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T10:27:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T10:27:50Z"}, "message": "Auto merge of #58238 - Mark-Simulacrum:doctest-fix, r=alexcrichton\n\nFixes rustdoc in stage 0, stage 1\n\nWhen a request for rustdoc is passed for stage 0, x.py build --stage 0\nsrc/tools/rustdoc or ensure(tool::Rustdoc { .. }) with top_stage = 0, we\nreturn the rustdoc for that compiler (i.e., the beta rustdoc).\n\nThis fixes stage 0 of https://github.com/rust-lang/rust/issues/52186 as well as being part of general workflow improvements (making stage 0 testing for std work) for rustbuild.\n\nThe stage 1 fix (second commit) completely resolves the problem, so this fixes https://github.com/rust-lang/rust/issues/52186.", "tree": {"sha": "401a42623e17c54b5943fadc22aaa2e59b03ff4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401a42623e17c54b5943fadc22aaa2e59b03ff4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c005afcb1ea399ac60f20c784c0833757bb84bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c005afcb1ea399ac60f20c784c0833757bb84bc5", "html_url": "https://github.com/rust-lang/rust/commit/c005afcb1ea399ac60f20c784c0833757bb84bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c005afcb1ea399ac60f20c784c0833757bb84bc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd23b95e5077a89a2ce35d09cbd4141ccc94f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd23b95e5077a89a2ce35d09cbd4141ccc94f58", "html_url": "https://github.com/rust-lang/rust/commit/ccd23b95e5077a89a2ce35d09cbd4141ccc94f58"}, {"sha": "bb23b175e97b5f0c18440bb04efcb562f9026813", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb23b175e97b5f0c18440bb04efcb562f9026813", "html_url": "https://github.com/rust-lang/rust/commit/bb23b175e97b5f0c18440bb04efcb562f9026813"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "9d037dad9ccbd15a9d88d379b59439fc39ae2da4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c005afcb1ea399ac60f20c784c0833757bb84bc5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005afcb1ea399ac60f20c784c0833757bb84bc5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c005afcb1ea399ac60f20c784c0833757bb84bc5", "patch": "@@ -677,10 +677,9 @@ impl<'a> Builder<'a> {\n         let compiler = self.compiler(self.top_stage, host);\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n-            .env(\n-                \"RUSTDOC_LIBDIR\",\n-                self.sysroot_libdir(compiler, self.config.build),\n-            )\n+            // Note that this is *not* the sysroot_libdir because rustdoc must be linked\n+            // equivalently to rustc.\n+            .env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n@@ -874,7 +873,7 @@ impl<'a> Builder<'a> {\n         } else {\n             &maybe_sysroot\n         };\n-        let libdir = sysroot.join(libdir(&compiler.host));\n+        let libdir = self.rustc_libdir(compiler);\n \n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n@@ -916,7 +915,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n         if cmd != \"build\" && cmd != \"check\" && cmd != \"rustc\" && want_rustdoc {\n-            cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n+            cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n         if mode.is_tool() {"}, {"sha": "6383a2ecc75832a2498fe45d66ef8c55923648f1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c005afcb1ea399ac60f20c784c0833757bb84bc5/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005afcb1ea399ac60f20c784c0833757bb84bc5/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c005afcb1ea399ac60f20c784c0833757bb84bc5", "patch": "@@ -418,25 +418,25 @@ impl Step for Rustdoc {\n \n     fn run(self, builder: &Builder) -> PathBuf {\n         let target_compiler = builder.compiler(builder.top_stage, self.host);\n+        if target_compiler.stage == 0 {\n+            if !target_compiler.is_snapshot(builder) {\n+                panic!(\"rustdoc in stage 0 must be snapshot rustdoc\");\n+            }\n+            return builder.initial_rustc.with_file_name(exe(\"rustdoc\", &target_compiler.host));\n+        }\n         let target = target_compiler.host;\n-        let build_compiler = if target_compiler.stage == 0 {\n-            builder.compiler(0, builder.config.build)\n-        } else if target_compiler.stage >= 2 {\n-            // Past stage 2, we consider the compiler to be ABI-compatible and hence capable of\n-            // building rustdoc itself.\n-            builder.compiler(target_compiler.stage, builder.config.build)\n-        } else {\n-            // Similar to `compile::Assemble`, build with the previous stage's compiler. Otherwise\n-            // we'd have stageN/bin/rustc and stageN/bin/rustdoc be effectively different stage\n-            // compilers, which isn't what we want.\n-            builder.compiler(target_compiler.stage - 1, builder.config.build)\n-        };\n-\n-        builder.ensure(compile::Rustc { compiler: build_compiler, target });\n-        builder.ensure(compile::Rustc {\n-            compiler: build_compiler,\n-            target: builder.config.build,\n-        });\n+        // Similar to `compile::Assemble`, build with the previous stage's compiler. Otherwise\n+        // we'd have stageN/bin/rustc and stageN/bin/rustdoc be effectively different stage\n+        // compilers, which isn't what we want. Rustdoc should be linked in the same way as the\n+        // rustc compiler it's paired with, so it must be built with the previous stage compiler.\n+        let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n+\n+        // The presence of `target_compiler` ensures that the necessary libraries (codegen backends,\n+        // compiler libraries, ...) are built. Rustdoc does not require the presence of any\n+        // libraries within sysroot_libdir (i.e., rustlib), though doctests may want it (since\n+        // they'll be linked to those libraries). As such, don't explicitly `ensure` any additional\n+        // libraries here. The intuition here is that If we've built a compiler, we should be able\n+        // to build rustdoc.\n \n         let mut cargo = prepare_tool_cargo(\n             builder,"}]}