{"sha": "c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZWViNjBiNjM4ZmNiMzQ3YzdjNmJhMDY2MzkwMTQ0ZDhjN2EyNGU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-05T16:19:24Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:33Z"}, "message": "Deduplicate some code", "tree": {"sha": "c8e298dad522f52501822589458bfa760bd0b77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e298dad522f52501822589458bfa760bd0b77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "html_url": "https://github.com/rust-lang/rust/commit/c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9eeb60b638fcb347c7c6ba066390144d8c7a24e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "html_url": "https://github.com/rust-lang/rust/commit/022c148fcd9e4339b4b59dfaee58ca5905d71b2d"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "223635e9aecd91aa70f80c259fd002011b3acd4c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c9eeb60b638fcb347c7c6ba066390144d8c7a24e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eeb60b638fcb347c7c6ba066390144d8c7a24e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "patch": "@@ -50,6 +50,19 @@ impl<'tcx> RustIrDatabase<'tcx> {\n             .map(|wc| wc.fold_with(&mut regions_substitutor))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect()\n     }\n+\n+    fn bounds_for<T>(&self, def_id: DefId, bound_vars: SubstsRef<'tcx>) -> Vec<T>\n+    where\n+        ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n+    {\n+        self.interner\n+            .tcx\n+            .explicit_item_bounds(def_id)\n+            .iter()\n+            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n+            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, &self.interner))\n+            .collect()\n+    }\n }\n \n impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'tcx> {\n@@ -75,19 +88,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n-\n-        let bounds = self\n-            .interner\n-            .tcx\n-            .explicit_item_bounds(def_id)\n-            .iter()\n-            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| {\n-                LowerInto::<\n-                        Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>>,\n-                    >::lower_into(bound, &self.interner)\n-            })\n-            .collect();\n+        let bounds = self.bounds_for(def_id, bound_vars);\n \n         Arc::new(chalk_solve::rust_ir::AssociatedTyDatum {\n             trait_id: chalk_ir::TraitId(trait_def_id),\n@@ -453,17 +454,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let bound_vars = bound_vars_for_item(self.interner.tcx, opaque_ty_id.0);\n         let binders = binders_for(&self.interner, bound_vars);\n         let where_clauses = self.where_clauses_for(opaque_ty_id.0, bound_vars);\n-\n-        let bounds: Vec<_> = self\n-            .interner\n-            .tcx\n-            .explicit_item_bounds(opaque_ty_id.0)\n-            .iter()\n-            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| {\n-                LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(bound, &self.interner)\n-            })\n-            .collect();\n+        let bounds = self.bounds_for(opaque_ty_id.0, bound_vars);\n \n         let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n             bounds: chalk_ir::Binders::new(binders.clone(), bounds),"}]}