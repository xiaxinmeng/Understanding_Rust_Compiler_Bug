{"sha": "e3863735144095312ab6486191fc8666d7c54e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODYzNzM1MTQ0MDk1MzEyYWI2NDg2MTkxZmM4NjY2ZDdjNTRlNGI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T20:53:09Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:09:32Z"}, "message": "Remove substs from OpaqueTypeDecl, use the one in OpaqueTypeKey", "tree": {"sha": "69f79c1719f59de4347542c7873416c973cd4540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f79c1719f59de4347542c7873416c973cd4540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3863735144095312ab6486191fc8666d7c54e4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mR0ACgkQgTGiTgx5\n76/DMBAAr4OZV56wMDo9XlpCIKErbviEE66PzFARywWJlpkCqS8bKNSiuSVO7OQP\nc4NhIn1l5jG6tb//nUCrzFb/GWk6zGELWAjiYQ4So/nKquHKJcbYPnBxJF4AMU7S\nxzJWfIbAzL0OuLQU9C1L5odMGRQtvqSGdoW3iMGJsr+7QygGL9qeZQgJzcXhRTOp\naw56rxTQNXc/gL41/ZcFc7MmLxBf4bE5qL27LA/Tp3oXg9jUbOG75uKVGYG6K/k5\nWDEdqO9dOIJv2IRLbx8HOFvbRbwd36KhGMPEX1CezWqqpMID4l5ymrgFkzraYakK\nhXAW1cdLYg7xNTCW+Flkj/JwX9f5ESKqgR6d46K3FR4J9tByPtW61GCiNn4OX1Pm\n9nNBuafAup5aZN260kb7QzaJ4AFjT+uM02KD4u4sQsvIkGccPiomietzC64mbZsx\nnx+j/l3Qs9ukcZOg5AGhAZ3+4f/fnafhnvI5f3uOBE9ZitWtSRJKmjlX2XKCAqK6\nKYOhkzagWOmNBbF9zE9RfUv4aCFk155BbXY4u6q1yP4eiaWdTs+dEfYRbx2nD06x\nVthnnhYNbSyjS+3CEHGQ7yQoERU844V/HSPQooq5M2P9VFHhV0YeuqS0yfGnvabF\n927Xb58gfprzAvqZrsxfBEW8rPaKu7nT6kGTVhwSbe648UZAVJ0=\n=MCVX\n-----END PGP SIGNATURE-----", "payload": "tree 69f79c1719f59de4347542c7873416c973cd4540\nparent 5dabd55d7dc3324bbc49a941584358e931b2cdd6\nauthor Santiago Pastorino <spastorino@gmail.com> 1623099189 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103772 -0300\n\nRemove substs from OpaqueTypeDecl, use the one in OpaqueTypeKey\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3863735144095312ab6486191fc8666d7c54e4b", "html_url": "https://github.com/rust-lang/rust/commit/e3863735144095312ab6486191fc8666d7c54e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3863735144095312ab6486191fc8666d7c54e4b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dabd55d7dc3324bbc49a941584358e931b2cdd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dabd55d7dc3324bbc49a941584358e931b2cdd6", "html_url": "https://github.com/rust-lang/rust/commit/5dabd55d7dc3324bbc49a941584358e931b2cdd6"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "60dd2e833e046c5196fc96238c050f9b34071375", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=e3863735144095312ab6486191fc8666d7c54e4b", "patch": "@@ -1382,7 +1382,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CustomTypeOp::new(\n                         |_cx| {\n                             infcx.constrain_opaque_type(\n-                                opaque_type_key.def_id,\n+                                opaque_type_key,\n                                 &opaque_decl,\n                                 GenerateMemberConstraints::IfNoStaticBound,\n                                 universal_region_relations,"}, {"sha": "8b864d6753608ba516a781f05e4936c88f7c57b2", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=e3863735144095312ab6486191fc8666d7c54e4b", "patch": "@@ -27,19 +27,6 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// The opaque type (`ty::Opaque`) for this declaration.\n     pub opaque_type: Ty<'tcx>,\n \n-    /// The substitutions that we apply to the opaque type that this\n-    /// `impl Trait` desugars to. e.g., if:\n-    ///\n-    ///     fn foo<'a, 'b, T>() -> impl Trait<'a>\n-    ///\n-    /// winds up desugared to:\n-    ///\n-    ///     type Foo<'x, X> = impl Trait<'x>\n-    ///     fn foo<'a, 'b, T>() -> Foo<'a, T>\n-    ///\n-    /// then `substs` would be `['a, T]`.\n-    pub substs: SubstsRef<'tcx>,\n-\n     /// The span of this particular definition of the opaque type. So\n     /// for example:\n     ///\n@@ -126,7 +113,7 @@ pub trait InferCtxtExt<'tcx> {\n \n     fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n         &self,\n-        def_id: DefId,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n         mode: GenerateMemberConstraints,\n         free_region_relations: &FRR,\n@@ -137,7 +124,7 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         concrete_ty: Ty<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         first_own_region_index: usize,\n     );\n \n@@ -372,7 +359,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         for &(opaque_type_key, opaque_defn) in opaque_types {\n             self.constrain_opaque_type(\n-                opaque_type_key.def_id,\n+                opaque_type_key,\n                 &opaque_defn,\n                 GenerateMemberConstraints::WhenRequired,\n                 free_region_relations,\n@@ -383,11 +370,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// See `constrain_opaque_types` for documentation.\n     fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n         &self,\n-        def_id: DefId,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n         mode: GenerateMemberConstraints,\n         free_region_relations: &FRR,\n     ) {\n+        let def_id = opaque_type_key.def_id;\n+\n         debug!(\"constrain_opaque_type()\");\n         debug!(\"constrain_opaque_type: def_id={:?}\", def_id);\n         debug!(\"constrain_opaque_type: opaque_defn={:#?}\", opaque_defn);\n@@ -426,9 +415,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let bounds = tcx.explicit_item_bounds(def_id);\n             debug!(\"constrain_opaque_type: predicates: {:#?}\", bounds);\n             let bounds: Vec<_> =\n-                bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_defn.substs)).collect();\n+                bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs)).collect();\n             debug!(\"constrain_opaque_type: bounds={:#?}\", bounds);\n-            let opaque_type = tcx.mk_opaque(def_id, opaque_defn.substs);\n+            let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n \n             let required_region_bounds =\n                 required_region_bounds(tcx, opaque_type, bounds.into_iter());\n@@ -440,7 +429,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 });\n             }\n             if let GenerateMemberConstraints::IfNoStaticBound = mode {\n-                self.generate_member_constraint(concrete_ty, opaque_defn, def_id, first_own_region);\n+                self.generate_member_constraint(\n+                    concrete_ty,\n+                    opaque_defn,\n+                    opaque_type_key,\n+                    first_own_region,\n+                );\n             }\n             return;\n         }\n@@ -454,7 +448,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // second.\n         let mut least_region = None;\n \n-        for subst_arg in &opaque_defn.substs[first_own_region..] {\n+        for subst_arg in &opaque_type_key.substs[first_own_region..] {\n             let subst_region = match subst_arg.unpack() {\n                 GenericArgKind::Lifetime(r) => r,\n                 GenericArgKind::Type(_) | GenericArgKind::Const(_) => continue,\n@@ -484,7 +478,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         return self.generate_member_constraint(\n                             concrete_ty,\n                             opaque_defn,\n-                            def_id,\n+                            opaque_type_key,\n                             first_own_region,\n                         );\n                     }\n@@ -497,7 +491,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         if let GenerateMemberConstraints::IfNoStaticBound = mode {\n             if least_region != tcx.lifetimes.re_static {\n-                self.generate_member_constraint(concrete_ty, opaque_defn, def_id, first_own_region);\n+                self.generate_member_constraint(\n+                    concrete_ty,\n+                    opaque_defn,\n+                    opaque_type_key,\n+                    first_own_region,\n+                );\n             }\n         }\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n@@ -517,14 +516,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         concrete_ty: Ty<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         first_own_region: usize,\n     ) {\n         // Create the set of choice regions: each region in the hidden\n         // type can be equal to any of the region parameters of the\n         // opaque type definition.\n         let choice_regions: Lrc<Vec<ty::Region<'tcx>>> = Lrc::new(\n-            opaque_defn.substs[first_own_region..]\n+            opaque_type_key.substs[first_own_region..]\n                 .iter()\n                 .filter_map(|arg| match arg.unpack() {\n                     GenericArgKind::Lifetime(r) => Some(r),\n@@ -537,7 +536,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n             op: |r| {\n                 self.member_constraint(\n-                    opaque_type_def_id,\n+                    opaque_type_key.def_id,\n                     opaque_defn.definition_span,\n                     concrete_ty,\n                     r,\n@@ -1087,7 +1086,6 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             OpaqueTypeKey { def_id, substs },\n             OpaqueTypeDecl {\n                 opaque_type: ty,\n-                substs,\n                 definition_span,\n                 concrete_ty: ty_var,\n                 has_required_region_bounds: !required_region_bounds.is_empty(),"}, {"sha": "6b9ad128e2892a40dab1a65fd471825a6ed34c28", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3863735144095312ab6486191fc8666d7c54e4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e3863735144095312ab6486191fc8666d7c54e4b", "patch": "@@ -719,7 +719,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         for (opaque_type_key, opaque_defn) in opaque_type_map {\n             match infcx.at(&misc_cause, param_env).eq(\n                 opaque_defn.concrete_ty,\n-                tcx.type_of(opaque_type_key.def_id).subst(tcx, opaque_defn.substs),\n+                tcx.type_of(opaque_type_key.def_id).subst(tcx, opaque_type_key.substs),\n             ) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n                 Err(ty_err) => tcx.sess.delay_span_bug("}]}