{"sha": "0e34b73996e87bb3f761b52616b3ac0e081fa84d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzRiNzM5OTZlODdiYjNmNzYxYjUyNjE2YjNhYzBlMDgxZmE4NGQ=", "commit": {"author": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-11-11T18:18:06Z"}, "committer": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-11-11T18:18:06Z"}, "message": "Change capitalization of Spirv to SpirV\n\nThis matches the capitalization of RiscV", "tree": {"sha": "7baa5338563e4239c4dc35c2bc400bf720adf5ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7baa5338563e4239c4dc35c2bc400bf720adf5ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e34b73996e87bb3f761b52616b3ac0e081fa84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e34b73996e87bb3f761b52616b3ac0e081fa84d", "html_url": "https://github.com/rust-lang/rust/commit/0e34b73996e87bb3f761b52616b3ac0e081fa84d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e34b73996e87bb3f761b52616b3ac0e081fa84d/comments", "author": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3441348e09b0a617e26565e579b755d5cf87f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3441348e09b0a617e26565e579b755d5cf87f03", "html_url": "https://github.com/rust-lang/rust/commit/f3441348e09b0a617e26565e579b755d5cf87f03"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "b5d279eeb6f2fd1bf6b7638c32936137e036e582", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=0e34b73996e87bb3f761b52616b3ac0e081fa84d", "patch": "@@ -260,7 +260,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n-                InlineAsmArch::Spirv => {}\n+                InlineAsmArch::SpirV => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -519,7 +519,7 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n-            InlineAsmRegClass::Spirv(SpirvInlineAsmRegClass::reg) => {\n+            InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n         }\n@@ -584,7 +584,7 @@ fn modifier_to_llvm(\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n-        InlineAsmRegClass::Spirv(SpirvInlineAsmRegClass::reg) => {\n+        InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n     }\n@@ -626,7 +626,7 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n-        InlineAsmRegClass::Spirv(SpirvInlineAsmRegClass::reg) => {\n+        InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n     }"}, {"sha": "5ebd6c4a2349f5a689656f22b6ee9ce77462cca4", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=0e34b73996e87bb3f761b52616b3ac0e081fa84d", "patch": "@@ -164,7 +164,7 @@ pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n-pub use spirv::{SpirvInlineAsmReg, SpirvInlineAsmRegClass};\n+pub use spirv::{SpirVInlineAsmReg, SpirVInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n \n #[derive(Copy, Clone, Encodable, Decodable, Debug, Eq, PartialEq, Hash)]\n@@ -179,7 +179,7 @@ pub enum InlineAsmArch {\n     Hexagon,\n     Mips,\n     Mips64,\n-    Spirv,\n+    SpirV,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -197,7 +197,7 @@ impl FromStr for InlineAsmArch {\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n-            \"spirv\" => Ok(Self::Spirv),\n+            \"spirv\" => Ok(Self::SpirV),\n             _ => Err(()),\n         }\n     }\n@@ -212,7 +212,7 @@ pub enum InlineAsmReg {\n     Nvptx(NvptxInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n-    Spirv(SpirvInlineAsmReg),\n+    SpirV(SpirVInlineAsmReg),\n }\n \n impl InlineAsmReg {\n@@ -269,8 +269,8 @@ impl InlineAsmReg {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Spirv => {\n-                Self::Spirv(SpirvInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            InlineAsmArch::SpirV => {\n+                Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n         })\n     }\n@@ -314,7 +314,7 @@ pub enum InlineAsmRegClass {\n     Nvptx(NvptxInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n-    Spirv(SpirvInlineAsmRegClass),\n+    SpirV(SpirVInlineAsmRegClass),\n }\n \n impl InlineAsmRegClass {\n@@ -327,7 +327,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n-            Self::Spirv(r) => r.name(),\n+            Self::SpirV(r) => r.name(),\n         }\n     }\n \n@@ -343,7 +343,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n-            Self::Spirv(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Spirv),\n+            Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n         }\n     }\n \n@@ -366,7 +366,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n-            Self::Spirv(r) => r.suggest_modifier(arch, ty),\n+            Self::SpirV(r) => r.suggest_modifier(arch, ty),\n         }\n     }\n \n@@ -385,7 +385,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n-            Self::Spirv(r) => r.default_modifier(arch),\n+            Self::SpirV(r) => r.default_modifier(arch),\n         }\n     }\n \n@@ -403,7 +403,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n-            Self::Spirv(r) => r.supported_types(arch),\n+            Self::SpirV(r) => r.supported_types(arch),\n         }\n     }\n \n@@ -428,7 +428,7 @@ impl InlineAsmRegClass {\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                     Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n                 }\n-                InlineAsmArch::Spirv => Self::Spirv(SpirvInlineAsmRegClass::parse(arch, name)?),\n+                InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n             })\n         })\n     }\n@@ -444,7 +444,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n-            Self::Spirv(r) => r.valid_modifiers(arch),\n+            Self::SpirV(r) => r.valid_modifiers(arch),\n         }\n     }\n }\n@@ -587,7 +587,7 @@ pub fn allocatable_registers(\n             mips::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-        InlineAsmArch::Spirv => {\n+        InlineAsmArch::SpirV => {\n             let mut map = spirv::regclass_map();\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);\n             map"}, {"sha": "da82749e96a16704719374cbe2fdafc23045aa69", "filename": "compiler/rustc_target/src/asm/spirv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e34b73996e87bb3f761b52616b3ac0e081fa84d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs?ref=0e34b73996e87bb3f761b52616b3ac0e081fa84d", "patch": "@@ -2,12 +2,12 @@ use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n \n def_reg_class! {\n-    Spirv SpirvInlineAsmRegClass {\n+    SpirV SpirVInlineAsmRegClass {\n         reg,\n     }\n }\n \n-impl SpirvInlineAsmRegClass {\n+impl SpirVInlineAsmRegClass {\n     pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n         &[]\n     }\n@@ -42,5 +42,5 @@ impl SpirvInlineAsmRegClass {\n \n def_regs! {\n     // SPIR-V is SSA-based, it does not have registers.\n-    Spirv SpirvInlineAsmReg SpirvInlineAsmRegClass {}\n+    SpirV SpirVInlineAsmReg SpirVInlineAsmRegClass {}\n }"}]}