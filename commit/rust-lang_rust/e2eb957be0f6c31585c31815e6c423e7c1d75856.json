{"sha": "e2eb957be0f6c31585c31815e6c423e7c1d75856", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZWI5NTdiZTBmNmMzMTU4NWMzMTgxNWU2YzQyM2U3YzFkNzU4NTY=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-26T16:43:12Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-07-27T03:28:02Z"}, "message": "Allow lifetime elision in `Pin<&(mut) Self>`", "tree": {"sha": "5357078ae17f46674ca6f03014fab81d4b035fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5357078ae17f46674ca6f03014fab81d4b035fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2eb957be0f6c31585c31815e6c423e7c1d75856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2eb957be0f6c31585c31815e6c423e7c1d75856", "html_url": "https://github.com/rust-lang/rust/commit/e2eb957be0f6c31585c31815e6c423e7c1d75856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2eb957be0f6c31585c31815e6c423e7c1d75856/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e39897587dca70f0b15093d425a682c392349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e39897587dca70f0b15093d425a682c392349c", "html_url": "https://github.com/rust-lang/rust/commit/09e39897587dca70f0b15093d425a682c392349c"}], "stats": {"total": 166, "additions": 165, "deletions": 1}, "files": [{"sha": "0e99190c20c4dd3be87edc3c833ccdde66c5fb83", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -2174,7 +2174,34 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 false\n             };\n \n-            if let hir::TyKind::Rptr(lifetime_ref, ref mt) = inputs[0].node {\n+            let mut self_arg = &inputs[0].node;\n+\n+            // Apply `self: &(mut) Self` elision rules even if nested in `Pin`.\n+            loop {\n+                if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = *self_arg {\n+                    if let Res::Def(DefKind::Struct, def_id) = path.res {\n+                        if self.tcx.lang_items().pin_type() == Some(def_id) {\n+                            if let Some(args) = path\n+                                .segments\n+                                .last()\n+                                .and_then(|segment| segment.args.as_ref())\n+                            {\n+                                if args.args.len() == 1 {\n+                                    if let GenericArg::Type(ty) = &args.args[0] {\n+                                        self_arg = &ty.node;\n+                                        // Keep dereferencing `self_arg` until we get to non-`Pin`\n+                                        // types.\n+                                        continue;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+                break;\n+            }\n+\n+            if let hir::TyKind::Rptr(lifetime_ref, ref mt) = *self_arg {\n                 if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node {\n                     if is_self_ty(path.res) {\n                         if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {"}, {"sha": "668aaf7166a0f47720459f4d9ea99d57d3fc69dc", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,60 @@\n+// compile-pass\n+\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn pin_ref(self: Pin<&Self>) -> Pin<&Self> { self }\n+\n+    fn pin_mut(self: Pin<&mut Self>) -> Pin<&mut Self> { self }\n+\n+    fn pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> Pin<Pin<Pin<&Self>>> { self }\n+\n+    fn pin_ref_impl_trait(self: Pin<&Self>) -> impl Clone + '_ { self }\n+\n+    fn b(self: Pin<&Foo>, f: &Foo) -> Pin<&Foo> { self }\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+}\n+\n+struct Bar<T: Unpin, U: Unpin> {\n+    field1: T,\n+    field2: U,\n+}\n+\n+impl<T: Unpin, U: Unpin> Bar<T, U> {\n+    fn fields(self: Pin<&mut Self>) -> (Pin<&mut T>, Pin<&mut U>) {\n+        let this = self.get_mut();\n+        (Pin::new(&mut this.field1), Pin::new(&mut this.field2))\n+    }\n+}\n+\n+trait AsyncBufRead {\n+    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>)\n+        -> Poll<std::io::Result<&[u8]>>;\n+}\n+\n+struct Baz(Vec<u8>);\n+\n+impl AsyncBufRead for Baz {\n+    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>)\n+        -> Poll<std::io::Result<&[u8]>>\n+    {\n+        Poll::Ready(Ok(&self.get_mut().0))\n+    }\n+}\n+\n+fn main() {\n+    let mut foo = Foo;\n+    { Pin::new(&foo).pin_ref() };\n+    { Pin::new(&mut foo).pin_mut() };\n+    { Pin::new(Pin::new(Pin::new(&foo))).pin_pin_pin_ref() };\n+    { Pin::new(&foo).pin_ref_impl_trait() };\n+    let mut bar = Bar { field1: 0u8, field2: 1u8 };\n+    { Pin::new(&mut bar).fields() };\n+}"}, {"sha": "ad8959727cbee5abb0405a4dd7ebc78fb618e0f6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,13 @@\n+// compile-fail\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn f(self: Pin<&Self>) -> impl Clone { self } //~ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {\n+    { Pin::new(&Foo).f() };\n+}"}, {"sha": "5118280e7ec0cbde38da93b7c01d6a0a10a5d111", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,20 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:44\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                               ----------   ^^^^ ...but this borrow...\n+   |                               |\n+   |                               this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8:5\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:5\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ed5e6bdd72118534d3e5ee17eb3e3c49c8479a9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,13 @@\n+// compile-fail\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f } //~ ERROR E0623\n+\n+    fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) } //~ ERROR E0623\n+}\n+\n+fn main() {}"}, {"sha": "6e345b03056e9ce1ef4bbfc04052f54777b47b73", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,18 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+   |\n+LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                              ----     ----   ^ ...but data from `f` is returned here\n+   |                              |\n+   |                              this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:76\n+   |\n+LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                               ----              -----------------          ^ ...but data from `f` is returned here\n+   |                               |\n+   |                               this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a3163ade0404f9af03c8160276bffbc8dcf23f7c", "filename": "src/test/ui/self/self_lifetime.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eb957be0f6c31585c31815e6c423e7c1d75856/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs?ref=e2eb957be0f6c31585c31815e6c423e7c1d75856", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+\n+struct Foo<'a>(&'a ());\n+impl<'a> Foo<'a> {\n+    fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+}\n+\n+type Alias = Foo<'static>;\n+impl Alias {\n+    fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n+}\n+\n+fn main() {}"}]}