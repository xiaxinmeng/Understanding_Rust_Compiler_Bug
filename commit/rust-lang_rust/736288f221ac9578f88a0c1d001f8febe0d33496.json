{"sha": "736288f221ac9578f88a0c1d001f8febe0d33496", "node_id": "C_kwDOAAsO6NoAKDczNjI4OGYyMjFhYzk1NzhmODhhMGMxZDAwMWY4ZmViZTBkMzM0OTY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-17T16:14:25Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-17T16:14:25Z"}, "message": "dedup some code", "tree": {"sha": "0a7ce652892deb73d5c33f310613c3e5fa6d3849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7ce652892deb73d5c33f310613c3e5fa6d3849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/736288f221ac9578f88a0c1d001f8febe0d33496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/736288f221ac9578f88a0c1d001f8febe0d33496", "html_url": "https://github.com/rust-lang/rust/commit/736288f221ac9578f88a0c1d001f8febe0d33496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/736288f221ac9578f88a0c1d001f8febe0d33496/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57e6fa453341a8012f0cdf951e0cd10f5e58ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57e6fa453341a8012f0cdf951e0cd10f5e58ab0", "html_url": "https://github.com/rust-lang/rust/commit/f57e6fa453341a8012f0cdf951e0cd10f5e58ab0"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "136b94321459ee062840443e9534b30dc101f835", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=736288f221ac9578f88a0c1d001f8febe0d33496", "patch": "@@ -3,7 +3,8 @@ use std::cell::RefCell;\n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n use crate::infer::InferCtxtExt;\n-use rustc_hir::def_id::DefId;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::{InferCtxt, InferOk};\n use rustc_infer::traits::{\n     FulfillmentError, Obligation, ObligationCause, PredicateObligation, TraitEngineExt as _,\n@@ -12,6 +13,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self>;\n@@ -109,4 +111,23 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     pub fn select_all_or_error(&self) -> Vec<FulfillmentError<'tcx>> {\n         self.engine.borrow_mut().select_all_or_error(self.infcx)\n     }\n+\n+    pub fn assumed_wf_types(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        span: Span,\n+        def_id: LocalDefId,\n+    ) -> FxHashSet<Ty<'tcx>> {\n+        let tcx = self.infcx.tcx;\n+        let assumed_wf_types = tcx.assumed_wf_types(def_id);\n+        let mut implied_bounds = FxHashSet::default();\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        let cause = ObligationCause::misc(span, hir_id);\n+        for ty in assumed_wf_types {\n+            implied_bounds.insert(ty);\n+            let normalized = self.normalize(cause.clone(), param_env, ty);\n+            implied_bounds.insert(normalized);\n+        }\n+        implied_bounds\n+    }\n }"}, {"sha": "e42f18db1f5c5673a674ef0feaa55b3c7ac24325", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=736288f221ac9578f88a0c1d001f8febe0d33496", "patch": "@@ -1454,15 +1454,8 @@ pub fn check_type_bounds<'tcx>(\n     tcx.infer_ctxt().enter(move |infcx| {\n         let ocx = ObligationCtxt::new(&infcx);\n \n-        let assumed_wf_types = tcx.assumed_wf_types(impl_ty.def_id);\n-        let mut implied_bounds = FxHashSet::default();\n-        let cause = ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-        for ty in assumed_wf_types {\n-            implied_bounds.insert(ty);\n-            let normalized = ocx.normalize(cause.clone(), param_env, ty);\n-            implied_bounds.insert(normalized);\n-        }\n-        let implied_bounds = implied_bounds;\n+        let assumed_wf_types =\n+            ocx.assumed_wf_types(param_env, impl_ty_span, impl_ty.def_id.expect_local());\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n         let normalize_cause = ObligationCause::new(\n@@ -1521,7 +1514,7 @@ pub fn check_type_bounds<'tcx>(\n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n-        outlives_environment.add_implied_bounds(&infcx, implied_bounds, impl_ty_hir_id);\n+        outlives_environment.add_implied_bounds(&infcx, assumed_wf_types, impl_ty_hir_id);\n         infcx.check_region_obligations_and_report_errors(\n             impl_ty.def_id.expect_local(),\n             &outlives_environment,"}, {"sha": "4814aea7afb9e6322e1ec1065948c2e11736011d", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=736288f221ac9578f88a0c1d001f8febe0d33496", "patch": "@@ -90,15 +90,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let ocx = ObligationCtxt::new(infcx);\n \n-        let assumed_wf_types = tcx.assumed_wf_types(body_def_id);\n-        let mut implied_bounds = FxHashSet::default();\n-        let cause = ObligationCause::misc(span, body_id);\n-        for ty in assumed_wf_types {\n-            implied_bounds.insert(ty);\n-            let normalized = ocx.normalize(cause.clone(), param_env, ty);\n-            implied_bounds.insert(normalized);\n-        }\n-        let implied_bounds = implied_bounds;\n+        let assumed_wf_types = ocx.assumed_wf_types(param_env, span, body_def_id);\n \n         let mut wfcx = WfCheckingCtxt { ocx, span, body_id, param_env };\n \n@@ -113,7 +105,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n         }\n \n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n-        outlives_environment.add_implied_bounds(infcx, implied_bounds, body_id);\n+        outlives_environment.add_implied_bounds(infcx, assumed_wf_types, body_id);\n         infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n     })\n }"}, {"sha": "97346f0f834c88337da2a8e7b25171be3e463d03", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736288f221ac9578f88a0c1d001f8febe0d33496/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=736288f221ac9578f88a0c1d001f8febe0d33496", "patch": "@@ -74,7 +74,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::specialization_graph::Node;\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n@@ -145,15 +144,8 @@ fn get_impl_substs<'tcx>(\n         let param_env = tcx.param_env(impl1_def_id);\n         let impl1_hir_id = tcx.hir().local_def_id_to_hir_id(impl1_def_id);\n \n-        let assumed_wf_types = tcx.assumed_wf_types(impl1_def_id);\n-        let mut implied_bounds = FxHashSet::default();\n-        let cause = ObligationCause::misc(tcx.def_span(impl1_def_id), impl1_hir_id);\n-        for ty in assumed_wf_types {\n-            implied_bounds.insert(ty);\n-            let normalized = ocx.normalize(cause.clone(), param_env, ty);\n-            implied_bounds.insert(normalized);\n-        }\n-        let implied_bounds = implied_bounds;\n+        let assumed_wf_types =\n+            ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n         let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n         let impl2_substs =\n@@ -166,7 +158,7 @@ fn get_impl_substs<'tcx>(\n         }\n \n         let mut outlives_env = OutlivesEnvironment::new(param_env);\n-        outlives_env.add_implied_bounds(infcx, implied_bounds, impl1_hir_id);\n+        outlives_env.add_implied_bounds(infcx, assumed_wf_types, impl1_hir_id);\n         infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n         let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n             let span = tcx.def_span(impl1_def_id);"}]}