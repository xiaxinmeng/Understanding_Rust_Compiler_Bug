{"sha": "5e34740ab60463a5f890bb1904fe7402f1e1b24a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzQ3NDBhYjYwNDYzYTVmODkwYmIxOTA0ZmU3NDAyZjFlMWIyNGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-30T08:44:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-30T08:44:52Z"}, "message": "implement packed struct field access", "tree": {"sha": "7fd46cbdc1b4fe39748e0f7677a0d17b34f84146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd46cbdc1b4fe39748e0f7677a0d17b34f84146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e34740ab60463a5f890bb1904fe7402f1e1b24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e34740ab60463a5f890bb1904fe7402f1e1b24a", "html_url": "https://github.com/rust-lang/rust/commit/5e34740ab60463a5f890bb1904fe7402f1e1b24a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e34740ab60463a5f890bb1904fe7402f1e1b24a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b490a4077cbb2d3c4038fecfd913a0049027d8e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b490a4077cbb2d3c4038fecfd913a0049027d8e5", "html_url": "https://github.com/rust-lang/rust/commit/b490a4077cbb2d3c4038fecfd913a0049027d8e5"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "87f4cb9e5dd3cf680b8c63606cc13439886f47fd", "filename": "src/eval_context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -443,6 +443,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n                         let offsets = variant.offsets.iter().map(|s| s.bytes());\n+                        if variant.packed {\n+                            let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                            self.memory.mark_packed(ptr, variant.stride().bytes());\n+                        }\n                         self.assign_fields(dest, offsets, operands)?;\n                     }\n \n@@ -460,6 +464,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u128_unchecked();\n                             let discr_size = discr.size().bytes();\n+                            if variants[variant].packed {\n+                                let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                                self.memory.mark_packed(ptr, variants[variant].stride().bytes());\n+                            }\n \n                             self.assign_discr_and_fields(\n                                 dest,\n@@ -496,6 +504,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield, .. } => {\n                         if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n+                            if nonnull.packed {\n+                                let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                                self.memory.mark_packed(ptr, nonnull.stride().bytes());\n+                            }\n                             if nndiscr == variant as u64 {\n                                 let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n                                 self.assign_fields(dest, offsets, operands)?;"}, {"sha": "2908e31a4931ca6f5919b87aa15c56664e96af2a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -5,6 +5,7 @@\n     i128_type,\n     pub_restricted,\n     rustc_private,\n+    collections_bound,\n )]\n \n // From rustc."}, {"sha": "64c01cc2fc4ea78d264dc837473f7f5783819ed2", "filename": "src/lvalue.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -173,13 +173,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let field = field.index();\n \n                 use rustc::ty::layout::Layout::*;\n-                let offset = match *base_layout {\n-                    Univariant { ref variant, .. } => variant.offsets[field],\n+                let (offset, packed) = match *base_layout {\n+                    Univariant { ref variant, .. } => {\n+                        (variant.offsets[field], variant.packed)\n+                    },\n \n                     General { ref variants, .. } => {\n                         if let LvalueExtra::DowncastVariant(variant_idx) = base_extra {\n                             // +1 for the discriminant, which is field 0\n-                            variants[variant_idx].offsets[field + 1]\n+                            (variants[variant_idx].offsets[field + 1], variants[variant_idx].packed)\n                         } else {\n                             bug!(\"field access on enum had no variant index\");\n                         }\n@@ -191,7 +193,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     StructWrappedNullablePointer { ref nonnull, .. } => {\n-                        nonnull.offsets[field]\n+                        (nonnull.offsets[field], nonnull.packed)\n                     }\n \n                     UntaggedUnion { .. } => return Ok(base),\n@@ -200,12 +202,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let field = field as u64;\n                         assert!(field < count);\n                         let elem_size = element.size(&self.tcx.data_layout).bytes();\n-                        Size::from_bytes(field * elem_size)\n+                        (Size::from_bytes(field * elem_size), false)\n                     }\n \n                     _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                 };\n \n+                if packed {\n+                    let size = self.type_size(field_ty)?.expect(\"packed struct must be sized\");\n+                    self.memory.mark_packed(base_ptr, size);\n+                }\n+\n                 let ptr = base_ptr.offset(offset.bytes());\n                 let extra = if self.type_is_sized(field_ty) {\n                     LvalueExtra::None"}, {"sha": "43bb0e23ba1108fe7e2f22ad1486c721748158c2", "filename": "src/memory.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -1,5 +1,5 @@\n use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian};\n-use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n+use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque, BTreeSet};\n use std::{fmt, iter, ptr, mem, io};\n \n use rustc::hir::def_id::DefId;\n@@ -120,6 +120,8 @@ pub struct Memory<'a, 'tcx> {\n     function_alloc_cache: HashMap<FunctionDefinition<'tcx>, AllocId>,\n     next_id: AllocId,\n     pub layout: &'a TargetDataLayout,\n+    /// List of memory regions containing packed structures\n+    packed: BTreeSet<Entry>,\n }\n \n const ZST_ALLOC_ID: AllocId = AllocId(0);\n@@ -135,6 +137,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             layout,\n             memory_size: max_memory,\n             memory_usage: 0,\n+            packed: BTreeSet::new(),\n         }\n     }\n \n@@ -280,8 +283,16 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.layout.endian\n     }\n \n-    pub fn check_align(&self, ptr: Pointer, align: u64) -> EvalResult<'tcx, ()> {\n+    pub fn check_align(&self, ptr: Pointer, align: u64, len: u64) -> EvalResult<'tcx, ()> {\n         let alloc = self.get(ptr.alloc_id)?;\n+        // check whether the memory was marked as aligned\n+        let start = Entry(ptr.alloc_id, 0, ptr.offset + len);\n+        let end = Entry(ptr.alloc_id, ptr.offset + len, 0);\n+        for &Entry(_, start, end) in self.packed.range(start..end) {\n+            if start <= ptr.offset && (ptr.offset + len) <= end {\n+                return Ok(());\n+            }\n+        }\n         if alloc.align < align {\n             return Err(EvalError::AlignmentCheckFailed {\n                 has: alloc.align,\n@@ -297,8 +308,19 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             })\n         }\n     }\n+\n+    pub(crate) fn mark_packed(&mut self, ptr: Pointer, len: u64) {\n+        self.packed.insert(Entry(ptr.alloc_id, ptr.offset, ptr.offset + len));\n+    }\n+\n+    pub(crate) fn clear_packed(&mut self) {\n+        self.packed.clear();\n+    }\n }\n \n+#[derive(Eq, PartialEq, Ord, PartialOrd)]\n+struct Entry(AllocId, u64, u64);\n+\n /// Allocation accessors\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation> {\n@@ -451,7 +473,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(&[]);\n         }\n-        self.check_align(ptr, align)?;\n+        self.check_align(ptr, align, size)?;\n         if self.relocations(ptr, size)?.count() != 0 {\n             return Err(EvalError::ReadPointerAsBytes);\n         }\n@@ -463,7 +485,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(&mut []);\n         }\n-        self.check_align(ptr, align)?;\n+        self.check_align(ptr, align, size)?;\n         self.clear_relocations(ptr, size)?;\n         self.mark_definedness(ptr, size, true)?;\n         self.get_bytes_unchecked_mut(ptr, size)"}, {"sha": "53a3aefed849f8ac41a7c95050cbd35eb2f845d8", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -28,6 +28,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// Returns true as long as there are more things to do.\n     pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n+        self.memory.clear_packed();\n         self.inc_step_counter_and_check_limit(1)?;\n         if self.stack.is_empty() {\n             return Ok(false);"}, {"sha": "93aecbb3d77c575f87a36b3a09940f0165fce6f9", "filename": "tests/run-pass/packed_struct.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e34740ab60463a5f890bb1904fe7402f1e1b24a/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e34740ab60463a5f890bb1904fe7402f1e1b24a/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=5e34740ab60463a5f890bb1904fe7402f1e1b24a", "patch": "@@ -0,0 +1,14 @@\n+#[repr(packed)]\n+struct S {\n+    a: i32,\n+    b: i64,\n+}\n+\n+fn main() {\n+    let x = S {\n+        a: 42,\n+        b: 99,\n+    };\n+    assert_eq!(x.a, 42);\n+    assert_eq!(x.b, 99);\n+}"}]}