{"sha": "d3d6f76887921d2e2ac5444790872bd030c1b669", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZDZmNzY4ODc5MjFkMmUyYWM1NDQ0NzkwODcyYmQwMzBjMWI2Njk=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-07-27T15:22:16Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-04T23:49:57Z"}, "message": "introduce \"early passes\" an convert a few over", "tree": {"sha": "6ff3d88a0592195c6794794b1d8816bf9a0c8b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff3d88a0592195c6794794b1d8816bf9a0c8b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d6f76887921d2e2ac5444790872bd030c1b669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d6f76887921d2e2ac5444790872bd030c1b669", "html_url": "https://github.com/rust-lang/rust/commit/d3d6f76887921d2e2ac5444790872bd030c1b669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d6f76887921d2e2ac5444790872bd030c1b669/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "html_url": "https://github.com/rust-lang/rust/commit/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d"}], "stats": {"total": 224, "additions": 150, "deletions": 74}, "files": [{"sha": "f6310417dacc0b55bee21627a65f5983dfbe1b9e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -45,8 +45,9 @@ use std::path::PathBuf;\n \n use visit_ast::RustdocVisitor;\n use clean;\n-use clean::{get_path_for_type, Clean, MAX_DEF_ID};\n+use clean::{get_path_for_type, Clean, MAX_DEF_ID, AttributesExt};\n use html::render::RenderInfo;\n+use passes;\n \n pub use rustc::session::config::{Input, Options, CodegenOptions};\n pub use rustc::session::search_paths::SearchPaths;\n@@ -322,7 +323,9 @@ pub fn run_core(search_paths: SearchPaths,\n                 error_format: ErrorOutputType,\n                 cmd_lints: Vec<(String, lint::Level)>,\n                 lint_cap: Option<lint::Level>,\n-                describe_lints: bool) -> (clean::Crate, RenderInfo)\n+                describe_lints: bool,\n+                mut manual_passes: Vec<String>,\n+                mut default_passes: passes::DefaultPassOption) -> (clean::Crate, RenderInfo, Vec<String>)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -527,13 +530,76 @@ pub fn run_core(search_paths: SearchPaths,\n             };\n             debug!(\"crate: {:?}\", tcx.hir.krate());\n \n-            let krate = {\n+            let mut krate = {\n                 let mut v = RustdocVisitor::new(&ctxt);\n                 v.visit(tcx.hir.krate());\n                 v.clean(&ctxt)\n             };\n \n-            (krate, ctxt.renderinfo.into_inner())\n+            fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n+                let mut msg = diag.struct_warn(&format!(\"the `#![doc({})]` attribute is \\\n+                                                         considered deprecated\", name));\n+                msg.warn(\"please see https://github.com/rust-lang/rust/issues/44136\");\n+\n+                if name == \"no_default_passes\" {\n+                    msg.help(\"you may want to use `#![doc(document_private_items)]`\");\n+                }\n+\n+                msg.emit();\n+            }\n+\n+            // Process all of the crate attributes, extracting plugin metadata along\n+            // with the passes which we are supposed to run.\n+            for attr in krate.module.as_ref().unwrap().attrs.lists(\"doc\") {\n+                let diag = ctxt.sess().diagnostic();\n+\n+                let name = attr.name().map(|s| s.as_str());\n+                let name = name.as_ref().map(|s| &s[..]);\n+                if attr.is_word() {\n+                    if name == Some(\"no_default_passes\") {\n+                        report_deprecated_attr(\"no_default_passes\", diag);\n+                        if default_passes == passes::DefaultPassOption::Default {\n+                            default_passes = passes::DefaultPassOption::None;\n+                        }\n+                    }\n+                } else if let Some(value) = attr.value_str() {\n+                    let sink = match name {\n+                        Some(\"passes\") => {\n+                            report_deprecated_attr(\"passes = \\\"...\\\"\", diag);\n+                            &mut manual_passes\n+                        },\n+                        Some(\"plugins\") => {\n+                            report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n+                            eprintln!(\"WARNING: #![doc(plugins = \\\"...\\\")] no longer functions; \\\n+                                      see CVE-2018-1000622\");\n+                            continue\n+                        },\n+                        _ => continue,\n+                    };\n+                    for p in value.as_str().split_whitespace() {\n+                        sink.push(p.to_string());\n+                    }\n+                }\n+\n+                if attr.is_word() && name == Some(\"document_private_items\") {\n+                    if default_passes == passes::DefaultPassOption::Default {\n+                        default_passes = passes::DefaultPassOption::Private;\n+                    }\n+                }\n+            }\n+\n+            let mut passes: Vec<String> =\n+                passes::defaults(default_passes).iter().map(|p| p.to_string()).collect();\n+            passes.extend(manual_passes);\n+\n+            for pass in &passes {\n+                // the \"unknown pass\" error will be reported when late passes are run\n+                if let Some(pass) = passes::find_pass(pass).and_then(|p| p.early_fn()) {\n+                    krate = pass(krate, &ctxt);\n+                }\n+            }\n+\n+            (krate, ctxt.renderinfo.into_inner(), passes)\n         }), &sess)\n     })\n }"}, {"sha": "bd7f7386fd14b6aa7ce56898ee182dd592460d81", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 60, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -97,8 +97,6 @@ mod visit_lib;\n mod test;\n mod theme;\n \n-use clean::AttributesExt;\n-\n struct Output {\n     krate: clean::Crate,\n     renderinfo: html::render::RenderInfo,\n@@ -631,16 +629,16 @@ fn rust_input<R, F>(cratefile: PathBuf,\n where R: 'static + Send,\n       F: 'static + Send + FnOnce(Output) -> R\n {\n-    let mut default_passes = if matches.opt_present(\"no-defaults\") {\n+    let default_passes = if matches.opt_present(\"no-defaults\") {\n         passes::DefaultPassOption::None\n     } else if matches.opt_present(\"document-private-items\") {\n         passes::DefaultPassOption::Private\n     } else {\n         passes::DefaultPassOption::Default\n     };\n \n-    let mut manual_passes = matches.opt_strs(\"passes\");\n-    let mut plugins = matches.opt_strs(\"plugins\");\n+    let manual_passes = matches.opt_strs(\"passes\");\n+    let plugins = matches.opt_strs(\"plugins\");\n \n     // First, parse the crate and extract all relevant information.\n     let mut paths = SearchPaths::new();\n@@ -674,11 +672,11 @@ where R: 'static + Send,\n     let result = rustc_driver::monitor(move || syntax::with_globals(move || {\n         use rustc::session::config::Input;\n \n-        let (mut krate, renderinfo) =\n+        let (mut krate, renderinfo, passes) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n                            force_unstable_if_unmarked, edition, cg, error_format,\n-                           lint_opts, lint_cap, describe_lints);\n+                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes);\n \n         info!(\"finished with rustc\");\n \n@@ -688,58 +686,6 @@ where R: 'static + Send,\n \n         krate.version = crate_version;\n \n-        let diag = core::new_handler(error_format, None);\n-\n-        fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n-            let mut msg = diag.struct_warn(&format!(\"the `#![doc({})]` attribute is \\\n-                                                     considered deprecated\", name));\n-            msg.warn(\"please see https://github.com/rust-lang/rust/issues/44136\");\n-\n-            if name == \"no_default_passes\" {\n-                msg.help(\"you may want to use `#![doc(document_private_items)]`\");\n-            }\n-\n-            msg.emit();\n-        }\n-\n-        // Process all of the crate attributes, extracting plugin metadata along\n-        // with the passes which we are supposed to run.\n-        for attr in krate.module.as_ref().unwrap().attrs.lists(\"doc\") {\n-            let name = attr.name().map(|s| s.as_str());\n-            let name = name.as_ref().map(|s| &s[..]);\n-            if attr.is_word() {\n-                if name == Some(\"no_default_passes\") {\n-                    report_deprecated_attr(\"no_default_passes\", &diag);\n-                    if default_passes == passes::DefaultPassOption::Default {\n-                        default_passes = passes::DefaultPassOption::None;\n-                    }\n-                }\n-            } else if let Some(value) = attr.value_str() {\n-                let sink = match name {\n-                    Some(\"passes\") => {\n-                        report_deprecated_attr(\"passes = \\\"...\\\"\", &diag);\n-                        &mut manual_passes\n-                    },\n-                    Some(\"plugins\") => {\n-                        report_deprecated_attr(\"plugins = \\\"...\\\"\", &diag);\n-                        &mut plugins\n-                    },\n-                    _ => continue,\n-                };\n-                sink.extend(value.as_str().split_whitespace().map(|p| p.to_string()));\n-            }\n-\n-            if attr.is_word() && name == Some(\"document_private_items\") {\n-                if default_passes == passes::DefaultPassOption::Default {\n-                    default_passes = passes::DefaultPassOption::Private;\n-                }\n-            }\n-        }\n-\n-        let mut passes: Vec<String> =\n-            passes::defaults(default_passes).iter().map(|p| p.to_string()).collect();\n-        passes.extend(manual_passes);\n-\n         if !plugins.is_empty() {\n             eprintln!(\"WARNING: --plugins no longer functions; see CVE-2018-1000622\");\n         }\n@@ -752,7 +698,7 @@ where R: 'static + Send,\n \n         for pass in &passes {\n             // determine if we know about this pass\n-            let pass = match passes::PASSES.iter().find(|p| p.name() == pass) {\n+            let pass = match passes::find_pass(pass) {\n                 Some(pass) => if let Some(pass) = pass.late_fn() {\n                     pass\n                 } else {"}, {"sha": "329e489f7b7899ff2f724731f65a244488cb480d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -8,12 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Contains information about \"passes\", used to modify crate information during the documentation\n+//! process.\n+\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n+use std::fmt;\n \n use clean::{self, GetDefId, Item};\n+use core::DocContext;\n use fold;\n use fold::StripItem;\n \n@@ -35,41 +40,87 @@ pub use self::unindent_comments::UNINDENT_COMMENTS;\n mod propagate_doc_cfg;\n pub use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n \n-#[derive(Copy, Clone, Debug)]\n+/// Represents a single pass.\n+#[derive(Copy, Clone)]\n pub enum Pass {\n+    /// An \"early pass\" is run in the compiler context, and can gather information about types and\n+    /// traits and the like.\n+    EarlyPass {\n+        name: &'static str,\n+        pass: fn(clean::Crate, &DocContext) -> clean::Crate,\n+        description: &'static str,\n+    },\n+    /// A \"late pass\" is run between crate cleaning and page generation.\n     LatePass {\n         name: &'static str,\n         pass: fn(clean::Crate) -> clean::Crate,\n         description: &'static str,\n+    },\n+}\n+\n+impl fmt::Debug for Pass {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let mut dbg = match *self {\n+            Pass::EarlyPass { .. } => f.debug_struct(\"EarlyPass\"),\n+            Pass::LatePass { .. } => f.debug_struct(\"LatePass\"),\n+        };\n+\n+        dbg.field(\"name\", &self.name())\n+           .field(\"pass\", &\"...\")\n+           .field(\"description\", &self.description())\n+           .finish()\n     }\n }\n \n impl Pass {\n+    /// Constructs a new early pass.\n+    pub const fn early(name: &'static str,\n+                       pass: fn(clean::Crate, &DocContext) -> clean::Crate,\n+                       description: &'static str) -> Pass {\n+        Pass::EarlyPass { name, pass, description }\n+    }\n+\n+    /// Constructs a new late pass.\n     pub const fn late(name: &'static str,\n                       pass: fn(clean::Crate) -> clean::Crate,\n                       description: &'static str) -> Pass {\n         Pass::LatePass { name, pass, description }\n     }\n \n+    /// Returns the name of this pass.\n     pub fn name(self) -> &'static str {\n         match self {\n-            Pass::LatePass { name, .. } => name,\n+            Pass::EarlyPass { name, .. } |\n+                Pass::LatePass { name, .. } => name,\n         }\n     }\n \n+    /// Returns the description of this pass.\n     pub fn description(self) -> &'static str {\n         match self {\n-            Pass::LatePass { description, .. } => description,\n+            Pass::EarlyPass { description, .. } |\n+                Pass::LatePass { description, .. } => description,\n         }\n     }\n \n+    /// If this pass is an early pass, returns the pointer to its function.\n+    pub fn early_fn(self) -> Option<fn(clean::Crate, &DocContext) -> clean::Crate> {\n+        match self {\n+            Pass::EarlyPass { pass, .. } => Some(pass),\n+            _ => None,\n+        }\n+    }\n+\n+    /// If this pass is a late pass, returns the pointer to its function.\n     pub fn late_fn(self) -> Option<fn(clean::Crate) -> clean::Crate> {\n         match self {\n             Pass::LatePass { pass, .. } => Some(pass),\n+            _ => None,\n         }\n     }\n }\n \n+/// The full list of passes.\n pub const PASSES: &'static [Pass] = &[\n     STRIP_HIDDEN,\n     UNINDENT_COMMENTS,\n@@ -79,6 +130,7 @@ pub const PASSES: &'static [Pass] = &[\n     PROPAGATE_DOC_CFG,\n ];\n \n+/// The list of passes run by default.\n pub const DEFAULT_PASSES: &'static [&'static str] = &[\n     \"strip-hidden\",\n     \"strip-private\",\n@@ -87,20 +139,24 @@ pub const DEFAULT_PASSES: &'static [&'static str] = &[\n     \"propagate-doc-cfg\",\n ];\n \n+/// The list of default passes run with `--document-private-items` is passed to rustdoc.\n pub const DEFAULT_PRIVATE_PASSES: &'static [&'static str] = &[\n     \"strip-priv-imports\",\n     \"collapse-docs\",\n     \"unindent-comments\",\n     \"propagate-doc-cfg\",\n ];\n \n+/// A shorthand way to refer to which set of passes to use, based on the presence of\n+/// `--no-defaults` or `--document-private-items`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum DefaultPassOption {\n     Default,\n     Private,\n     None,\n }\n \n+/// Returns the given default set of passes.\n pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n     match default_set {\n         DefaultPassOption::Default => DEFAULT_PASSES,\n@@ -109,6 +165,11 @@ pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n     }\n }\n \n+/// If the given name matches a known pass, returns its information.\n+pub fn find_pass(pass_name: &str) -> Option<Pass> {\n+    PASSES.iter().find(|p| p.name() == pass_name).cloned()\n+}\n+\n struct Stripper<'a> {\n     retained: &'a mut DefIdSet,\n     access_levels: &'a AccessLevels<DefId>,"}, {"sha": "cc0b6fb6d67053b16219e896f9209920177e395b", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -13,17 +13,18 @@ use std::mem;\n \n use clean::{self, AttributesExt, NestedAttributesExt};\n use clean::Item;\n+use core::DocContext;\n use fold;\n use fold::DocFolder;\n use fold::StripItem;\n use passes::{ImplStripper, Pass};\n \n pub const STRIP_HIDDEN: Pass =\n-    Pass::late(\"strip-hidden\", strip_hidden,\n-               \"strips all doc(hidden) items from the output\");\n+    Pass::early(\"strip-hidden\", strip_hidden,\n+                \"strips all doc(hidden) items from the output\");\n \n /// Strip items marked `#[doc(hidden)]`\n-pub fn strip_hidden(krate: clean::Crate) -> clean::Crate {\n+pub fn strip_hidden(krate: clean::Crate, _: &DocContext) -> clean::Crate {\n     let mut retained = DefIdSet();\n \n     // strip all #[doc(hidden)] items"}, {"sha": "f01c333d742d380fa1f3b2591267ba5933ffd62d", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n use clean;\n+use core::DocContext;\n use fold::DocFolder;\n use passes::{ImportStripper, Pass};\n \n-pub const STRIP_PRIV_IMPORTS: Pass = Pass::late(\"strip-priv-imports\", strip_priv_imports,\n+pub const STRIP_PRIV_IMPORTS: Pass = Pass::early(\"strip-priv-imports\", strip_priv_imports,\n      \"strips all private import statements (`use`, `extern crate`) from a crate\");\n \n-pub fn strip_priv_imports(krate: clean::Crate)  -> clean::Crate {\n+pub fn strip_priv_imports(krate: clean::Crate, _: &DocContext)  -> clean::Crate {\n     ImportStripper.fold_crate(krate)\n }"}, {"sha": "3b17a768ffdee6fd6ca8d5bb0a0d91a9dfa86c9c", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d6f76887921d2e2ac5444790872bd030c1b669/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=d3d6f76887921d2e2ac5444790872bd030c1b669", "patch": "@@ -11,17 +11,18 @@\n use rustc::util::nodemap::DefIdSet;\n \n use clean;\n+use core::DocContext;\n use fold::DocFolder;\n use passes::{ImplStripper, ImportStripper, Stripper, Pass};\n \n pub const STRIP_PRIVATE: Pass =\n-    Pass::late(\"strip-private\", strip_private,\n+    Pass::early(\"strip-private\", strip_private,\n         \"strips all private items from a crate which cannot be seen externally, \\\n          implies strip-priv-imports\");\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag.\n-pub fn strip_private(mut krate: clean::Crate) -> clean::Crate {\n+pub fn strip_private(mut krate: clean::Crate, _: &DocContext) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = DefIdSet();\n     let access_levels = krate.access_levels.clone();"}]}