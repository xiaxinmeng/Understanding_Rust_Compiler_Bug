{"sha": "64bfe81cae96e7178f1b53f80e175167aed510fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YmZlODFjYWU5NmU3MTc4ZjFiNTNmODBlMTc1MTY3YWVkNTEwZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T08:06:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T08:06:30Z"}, "message": "Auto merge of #1190 - RalfJung:canonical-alloc-id, r=RalfJung\n\nCanonical AllocID\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/69408.\nThis just ports the existing extern statics to the new system; no new shims are added.\n\nCc @christianpoveda", "tree": {"sha": "444212e9de3ad90ce2b2d8f6ab7d850d53b92254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/444212e9de3ad90ce2b2d8f6ab7d850d53b92254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64bfe81cae96e7178f1b53f80e175167aed510fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64bfe81cae96e7178f1b53f80e175167aed510fb", "html_url": "https://github.com/rust-lang/rust/commit/64bfe81cae96e7178f1b53f80e175167aed510fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64bfe81cae96e7178f1b53f80e175167aed510fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "url": "https://api.github.com/repos/rust-lang/rust/commits/263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "html_url": "https://github.com/rust-lang/rust/commit/263eedc6eac2b5a5f173cbdbd02cadf1861d960f"}, {"sha": "59bddba5f39ab0f61062d06d54aa12eaf18da364", "url": "https://api.github.com/repos/rust-lang/rust/commits/59bddba5f39ab0f61062d06d54aa12eaf18da364", "html_url": "https://github.com/rust-lang/rust/commit/59bddba5f39ab0f61062d06d54aa12eaf18da364"}], "stats": {"total": 122, "additions": 76, "deletions": 46}, "files": [{"sha": "b4ad1575104e2da60dcfe043a55b3076d6063356", "filename": "bench-cargo-miri/mse/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -2,7 +2,7 @@ static EXPECTED: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n static PCM: &[i16] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 0, -2, 0, -2, 0, -2, 0, -2, -2, -2, -3, -3, -3, -3, -4, -2, -5, -2, -5, -2, -4, 0, -4, 0, -4, 0, -4, 1, -4, 1, -4, 2, -4, 2, -4, 2, -4, 2, -4, 2, -3, 1, -4, 0, -4, 0, -5, 0, -5, 0, -5, 0, -4, 2, -4, 3, -4, 4, -3, 5, -2, 5, -3, 6, -3, 6, -3, 5, -3, 5, -2, 4, -2, 3, -5, 0, -6, 0, -3, -2, -4, -4, -9, -5, -9, -4, -4, -2, -4, -2, -4, 0, -2, 1, 1, 1, 4, 2, 8, 2, 12, 1, 13, 0, 12, 0, 11, 0, 8, -2, 7, 0, 7, -3, 11, -8, 15, -9, 17, -6, 17, -5, 13, -3, 7, 0, 3, 0, -2, 0, -4, 0, -4, -2, -6, 0, -14, -2, -17, -4, -8, 0, -7, 5, -17, 7, -18, 10, -7, 18, -2, 25, -3, 27, 0, 31, 4, 34, 4, 34, 8, 36, 8, 37, 2, 36, 4, 34, 8, 28, 3, 15, 0, 11, 0, 12, -5, 8, -4, 10, 0, 23, -4, 31, -8, 30, -2, 30, 0, 26, -6, 22, -6, 20, -12, 15, -19, 10, -10, 13, -14, 6, -43, -13, -43, -16, -9, -12, -10, -29, -42, -40, -37, -28, -5, -21, 1, -24, -8, -20, 4, -18, 26, -24, 44, -26, 66, -30, 86, -37, 88, -41, 72, -46, 50, -31, 28, 23, 14, 64, 16, 51, 26, 32, 34, 39, 42, 48, 35, 58, 0, 72, -36, 69, -59, 58, -98, 54, -124, 36, -103, 12, -110, 5, -173, -19, -146, -59, -4, -42, 51, 1, -23, -6, -30, -6, 45, 46, 47, 70, 6, 55, 19, 60, 38, 62, 42, 47, 61, 46, 40, 42, -19, 22, -34, 6, -35, -50, -61, -141, -37, -171, 17, -163, 26, -180, 46, -154, 80, -63, 48, -4, 18, 20, 50, 47, 58, 53, 44, 61, 57, 85, 37, 80, 0, 86, -8, 106, -95, 49, -213, -8, -131, 47, 49, 63, 40, -39, -69, -74, -37, -20, 63, -12, 58, -14, -12, 25, -31, 41, 11, 45, 76, 47, 167, 5, 261, -37, 277, -83, 183, -172, 35, -122, -79, 138, -70, 266, 69, 124, 228, 0, 391, -29, 594, -84, 702, -78, 627, -8, 551, -13, 509, 13, 372, 120, 352, 125, 622, 127, 691, 223, 362, 126, 386, -33, 915, 198, 958, 457, 456, 298, 500, 233, 1027, 469, 1096, 426, 918, 160, 1067, 141, 1220, 189, 1245, 164, 1375, 297, 1378, 503, 1299, 702, 1550, 929, 1799, 855, 1752, 547, 1830, 602, 1928, 832, 1736, 796, 1735, 933, 1961, 1385, 1935, 1562, 2105, 1485, 2716, 1449, 2948, 1305, 2768, 1205, 2716, 1346, 2531, 1450, 2470, 1653, 3117, 2111, 3370, 2176, 2696, 1947, 2925, 2305, 3846, 2658, 2425, 2184, -877, 1981, -2261, 2623, -1645, 2908, -1876, 2732, -2704, 2953, -2484, 3116, -2120, 2954, -2442, 3216, -2466, 3499, -2192, 3234, -2392, 3361, -2497, 3869, -2078, 3772, -1858, 3915, -2066, 4438, -2285, 2934, -2294, -280, -2066, -1762, -1992, -1412, -2298, -1535, -2399, -1789, -2223, -1419, -2244, -1334, -2092, -1476, -1777, -1396, -2014, -1571, -2199, -1574, -1843, -1167, -1910, -1446, -2007, -1818];\n \n fn main() {\n-    for i in 0..5 {\n+    for _ in 0..2 {\n         mse(PCM.len(), PCM, EXPECTED);\n     }\n }"}, {"sha": "82d8da1d030110a8cd0f043cd161be7ed4f872a9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -1 +1 @@\n-d9051341a1c142542a3f7dab509266606c775382\n+e86c9e6ef8be7ddec0360f20aae7d86c69c59a83"}, {"sha": "267b79d0eba7ef7551e1d0cdcc9bb4a61b469129", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -58,6 +58,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ),\n     );\n     // Complete initialization.\n+    MemoryExtra::init_extern_statics(&mut ecx)?;\n     EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame\n@@ -90,14 +91,14 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             // Make space for `0` terminator.\n             let size = arg.len() as u64 + 1;\n             let arg_type = tcx.mk_array(tcx.types.u8, size);\n-            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Env.into());\n+            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into());\n             ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n             argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout =\n             ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), argvs.len() as u64))?;\n-        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n+        let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n             let place = ecx.mplace_field(argvs_place, idx as u64)?;\n             ecx.write_scalar(arg, place.into())?;\n@@ -108,13 +109,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n             let argc_place =\n-                ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Env.into());\n+                ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n             ecx.write_scalar(argc, argc_place.into())?;\n             ecx.machine.argc = Some(argc_place.ptr);\n \n             let argv_place = ecx.allocate(\n                 ecx.layout_of(tcx.mk_imm_ptr(tcx.types.unit))?,\n-                MiriMemoryKind::Env.into(),\n+                MiriMemoryKind::Machine.into(),\n             );\n             ecx.write_scalar(argv, argv_place.into())?;\n             ecx.machine.argv = Some(argv_place.ptr);\n@@ -134,7 +135,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n-            let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());\n+            let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into());\n             ecx.machine.cmd_line = Some(cmd_place.ptr);\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n             let char_size = Size::from_bytes(2);\n@@ -147,7 +148,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     };\n \n     // Return place (in static memory so that it does not count as leak).\n-    let ret_place = ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Env.into());\n+    let ret_place = ecx.allocate(ecx.layout_of(tcx.types.isize)?, MiriMemoryKind::Machine.into());\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n@@ -158,7 +159,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     // Set the last_error to 0\n     let errno_layout = ecx.layout_of(tcx.types.u32)?;\n-    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Env.into());\n+    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Machine.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);\n "}, {"sha": "375ebf09967dba54c4ee28531998bdb973d9d08b", "filename": "src/intptrcast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -5,7 +5,7 @@ use std::collections::{hash_map::Entry, HashMap};\n use rand::Rng;\n \n use rustc::ty::layout::HasDataLayout;\n-use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Pointer, PointerArithmetic};\n+use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Machine, Pointer, PointerArithmetic};\n use rustc_target::abi::Size;\n \n use crate::{Evaluator, Tag, STACK_ADDR};\n@@ -80,12 +80,13 @@ impl<'mir, 'tcx> GlobalState {\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;\n+        let id = Evaluator::canonical_alloc_id(memory, ptr.alloc_id);\n \n         // There is nothing wrong with a raw pointer being cast to an integer only after\n         // it became dangling.  Hence `MaybeDead`.\n-        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?;\n+        let (size, align) = memory.get_size_and_align(id, AllocCheck::MaybeDead)?;\n \n-        let base_addr = match global_state.base_addr.entry(ptr.alloc_id) {\n+        let base_addr = match global_state.base_addr.entry(id) {\n             Entry::Occupied(entry) => *entry.get(),\n             Entry::Vacant(entry) => {\n                 // This allocation does not have a base address yet, pick one.\n@@ -102,7 +103,7 @@ impl<'mir, 'tcx> GlobalState {\n                 trace!(\n                     \"Assigning base address {:#x} to allocation {:?} (slack: {}, align: {})\",\n                     base_addr,\n-                    ptr.alloc_id,\n+                    id,\n                     slack,\n                     align.bytes(),\n                 );\n@@ -112,7 +113,7 @@ impl<'mir, 'tcx> GlobalState {\n                 global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n-                global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id));\n+                global_state.int_to_ptr_map.push((base_addr, id));\n \n                 base_addr\n             }"}, {"sha": "331e75414a0ba8f93d2bee31773649d68570beb8", "filename": "src/machine.rs", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -3,6 +3,7 @@\n \n use std::borrow::Cow;\n use std::cell::RefCell;\n+use std::collections::HashMap;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n \n@@ -12,10 +13,9 @@ use rustc::mir;\n use rustc::ty::{\n     self,\n     layout::{LayoutOf, Size},\n-    Ty, TyCtxt,\n+    Ty,\n };\n use rustc_ast::attr;\n-use rustc_hir::def_id::DefId;\n use rustc_span::{source_map::Span, symbol::sym};\n \n use crate::*;\n@@ -48,8 +48,8 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Memory for env vars and args, errno and other parts of the machine-managed environment.\n-    Env,\n+    /// Memory for env vars and args, errno, extern statics and other parts of the machine-managed environment.\n+    Machine,\n     /// Rust statics.\n     Static,\n }\n@@ -74,7 +74,11 @@ pub struct MemoryExtra {\n     pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n+    /// Mapping extern static names to their canonical allocation.\n+    pub(crate) extern_statics: HashMap<&'static str, AllocId>,\n+\n     /// The random number generator used for resolving non-determinism.\n+    /// Needs to be queried by ptr_to_int, hence needs interior mutability.\n     pub(crate) rng: RefCell<StdRng>,\n }\n \n@@ -85,7 +89,34 @@ impl MemoryExtra {\n         } else {\n             None\n         };\n-        MemoryExtra { stacked_borrows, intptrcast: Default::default(), rng: RefCell::new(rng) }\n+        MemoryExtra {\n+            stacked_borrows,\n+            intptrcast: Default::default(),\n+            extern_statics: HashMap::default(),\n+            rng: RefCell::new(rng),\n+        }\n+    }\n+\n+    /// Sets up the \"extern statics\" for this machine.\n+    pub fn init_extern_statics<'mir, 'tcx>(\n+        this: &mut MiriEvalContext<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        match this.tcx.sess.target.target.target_os.as_str() {\n+            \"linux\" => {\n+                // \"__cxa_thread_atexit_impl\"\n+                // This should be all-zero, pointer-sized.\n+                let layout = this.layout_of(this.tcx.types.usize)?;\n+                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n+                this.memory\n+                    .extra\n+                    .extern_statics\n+                    .insert(\"__cxa_thread_atexit_impl\", place.ptr.assert_ptr().alloc_id)\n+                    .unwrap_none();\n+            }\n+            _ => {} // No \"extern statics\" supported on this platform\n+        }\n+        Ok(())\n     }\n }\n \n@@ -267,32 +298,29 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         Ok(())\n     }\n \n-    fn find_foreign_static(\n-        tcx: TyCtxt<'tcx>,\n-        def_id: DefId,\n-    ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n+    fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n+        let tcx = mem.tcx;\n+        // Figure out if this is an extern static, and if yes, which one.\n+        let def_id = match tcx.alloc_map.lock().get(id) {\n+            Some(GlobalAlloc::Static(def_id)) if tcx.is_foreign_item(def_id) => def_id,\n+            _ => {\n+                // No need to canonicalize anything.\n+                return id;\n+            }\n+        };\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => tcx.item_name(def_id).as_str(),\n         };\n-\n-        let alloc = match &*link_name {\n-            \"__cxa_thread_atexit_impl\" => {\n-                // This should be all-zero, pointer-sized.\n-                let size = tcx.data_layout.pointer_size;\n-                let data = vec![0; size.bytes() as usize];\n-                Allocation::from_bytes(&data, tcx.data_layout.pointer_align.abi)\n-            }\n-            _ => throw_unsup_format!(\"can't access foreign static: {}\", link_name),\n-        };\n-        Ok(Cow::Owned(alloc))\n-    }\n-\n-    #[inline(always)]\n-    fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        // We are not interested in detecting loops.\n-        Ok(())\n+        // Check if we know this one.\n+        if let Some(canonical_id) = mem.extra.extern_statics.get(&*link_name) {\n+            trace!(\"canonical_alloc_id: {:?} ({}) -> {:?}\", id, link_name, canonical_id);\n+            *canonical_id\n+        } else {\n+            // Return original id; `Memory::get_static_alloc` will throw an error.\n+            id\n+        }\n     }\n \n     fn init_allocation_extra<'b>(\n@@ -433,7 +461,7 @@ impl MayLeak for MiriMemoryKind {\n         use self::MiriMemoryKind::*;\n         match self {\n             Rust | C | WinHeap => false,\n-            Env | Static => true,\n+            Machine | Static => true,\n         }\n     }\n }"}, {"sha": "10f749216541eecdf78d721add6e424d3c824a18", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -40,7 +40,7 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n+    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into())\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -80,7 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this);\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             Ok(0)\n         } else {\n@@ -102,7 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(old) = success {\n             if let Some(var) = old {\n                 this.memory\n-                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             Ok(0)\n         } else {"}, {"sha": "11c5a882be9b25847a4d3fab84a7131f05d052e9", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -187,7 +187,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // First arg: Message.\n                 let msg = msg.description();\n-                let msg = this.allocate_str(msg, MiriMemoryKind::Env.into());\n+                let msg = this.allocate_str(msg, MiriMemoryKind::Machine.into());\n \n                 // Call the lang item.\n                 let panic = this.tcx.lang_items().panic_fn().unwrap();"}, {"sha": "9a511aaed577fc03b58bd55020fdcb6e9517fcd0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bfe81cae96e7178f1b53f80e175167aed510fb/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=64bfe81cae96e7178f1b53f80e175167aed510fb", "patch": "@@ -453,7 +453,7 @@ impl Stacks {\n             // Thus we call `static_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(MiriMemoryKind::Static) =>\n+            MemoryKind::Machine(MiriMemoryKind::Static) | MemoryKind::Machine(MiriMemoryKind::Machine) =>\n                 (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n             // Everything else we handle entirely untagged for now.\n             // FIXME: experiment with more precise tracking."}]}