{"sha": "dae2e22e814931ea26e571c7d6e72aa1b05a871d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZTJlMjJlODE0OTMxZWEyNmU1NzFjN2Q2ZTcyYWExYjA1YTg3MWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-25T09:04:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:23Z"}, "message": "Make correct resolver available in rustdoc", "tree": {"sha": "bb0c1fcbdf6547751fd5c89027d45d485ce08599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb0c1fcbdf6547751fd5c89027d45d485ce08599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae2e22e814931ea26e571c7d6e72aa1b05a871d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae2e22e814931ea26e571c7d6e72aa1b05a871d", "html_url": "https://github.com/rust-lang/rust/commit/dae2e22e814931ea26e571c7d6e72aa1b05a871d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae2e22e814931ea26e571c7d6e72aa1b05a871d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "html_url": "https://github.com/rust-lang/rust/commit/fe0c10019d7ee96909cc42cc265ef999a6b5dd70"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "b890a980d43151dea795367ea14dc581c59924fd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dae2e22e814931ea26e571c7d6e72aa1b05a871d", "patch": "@@ -127,7 +127,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n+impl<'a, 'b, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n \n@@ -821,7 +821,6 @@ impl Clean<Attributes> for [ast::Attribute] {\n                     // but it can't because that would break object safety. This can still be\n                     // fixed.\n                     let components = link.split(\"::\").skip(1).collect::<Vec<_>>();\n-                    println!(\"{:?}\", components);\n                     cx.resolver.borrow_mut().std_path(DUMMY_SP, None, &components, false)\n                 };\n "}, {"sha": "6fc21f0541b1b9af9f7e711e0ffc211a2600fb29", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=dae2e22e814931ea26e571c7d6e72aa1b05a871d", "patch": "@@ -44,9 +44,9 @@ pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n-pub struct DocContext<'a, 'tcx: 'a, 'rcx> {\n+pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub resolver: RefCell<resolve::Resolver<'rcx>>,\n+    pub resolver: &'a RefCell<resolve::Resolver<'rcx>>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -162,34 +162,52 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let name = ::rustc_trans_utils::link::find_crate_name(Some(&sess), &krate.attrs, &input);\n \n-    let driver::ExpansionResult {\n-        expanded_crate,\n-        defs,\n-        analysis,\n-        resolutions,\n-        mut hir_forest\n-    } = {\n-        let result = driver::phase_2_configure_and_expand(&sess,\n-                                                          &cstore,\n-                                                          krate,\n-                                                          None,\n-                                                          &name,\n-                                                          None,\n-                                                          resolve::MakeGlobMap::No,\n-                                                          |_| Ok(()));\n-        abort_on_err(result, &sess)\n+    let mut crate_loader = CrateLoader::new(&sess, &cstore, &name);\n+\n+    let resolver_arenas = resolve::Resolver::arenas();\n+    let result = driver::phase_2_configure_and_expand_inner(&sess,\n+                                                      &cstore,\n+                                                      krate,\n+                                                      None,\n+                                                      &name,\n+                                                      None,\n+                                                      resolve::MakeGlobMap::No,\n+                                                      &resolver_arenas,\n+                                                      &mut crate_loader,\n+                                                      |_| Ok(()));\n+    let driver::InnerExpansionResult {\n+        mut hir_forest,\n+        resolver,\n+        ..\n+    } = abort_on_err(result, &sess);\n+\n+    // We need to hold on to the complete resolver, so we clone everything\n+    // for the analysis passes to use. Suboptimal, but necessary in the\n+    // current architecture.\n+    let defs = resolver.definitions.clone();\n+    let resolutions = ty::Resolutions {\n+        freevars: resolver.freevars.clone(),\n+        export_map: resolver.export_map.clone(),\n+        trait_map: resolver.trait_map.clone(),\n+        maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n+        maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n+    };\n+    let analysis = ty::CrateAnalysis {\n+        access_levels: Rc::new(AccessLevels::default()),\n+        name: name.to_string(),\n+        glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n     };\n \n     let arenas = AllArenas::new();\n-    let mut crate_loader = CrateLoader::new(&sess, &cstore, &name);\n-    let resolver_arenas = resolve::Resolver::arenas();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n     let output_filenames = driver::build_output_filenames(&input,\n                                                           &None,\n                                                           &None,\n                                                           &[],\n                                                           &sess);\n \n+    let resolver = RefCell::new(resolver);\n+\n     abort_on_err(driver::phase_3_run_analysis_passes(&*trans,\n                                                      control,\n                                                      &sess,\n@@ -215,20 +233,9 @@ pub fn run_core(search_paths: SearchPaths,\n                                   .collect()\n         };\n \n-        // Set up a Resolver so that the doc cleaning can look up paths in the docs\n-        let mut resolver = resolve::Resolver::new(&sess,\n-                                                  &*cstore,\n-                                                  &expanded_crate,\n-                                                  &name,\n-                                                  resolve::MakeGlobMap::No,\n-                                                  &mut crate_loader,\n-                                                  &resolver_arenas);\n-        resolver.resolve_imports();\n-        resolver.resolve_crate(&expanded_crate);\n-\n         let ctxt = DocContext {\n             tcx,\n-            resolver: RefCell::new(resolver),\n+            resolver: &resolver,\n             populated_all_crate_impls: Cell::new(false),\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),"}, {"sha": "5206c3667b006f4a50598edf93537a9e30de336e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=dae2e22e814931ea26e571c7d6e72aa1b05a871d", "patch": "@@ -12,7 +12,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n-#![deny(warnings)]\n+\n \n #![feature(ascii_ctype)]\n #![feature(rustc_private)]"}, {"sha": "d2f7da29b33ab1a2b97e3db2ff2c668894fa983a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=dae2e22e814931ea26e571c7d6e72aa1b05a871d", "patch": "@@ -40,21 +40,21 @@ use doctree::*;\n // also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?\n \n-pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n-    cstore: &'tcx CrateStore,\n+pub struct RustdocVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'b> {\n+    cstore: &'a CrateStore,\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n+    pub cx: &'a core::DocContext<'b, 'tcx, 'rcx>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n     reexported_macros: FxHashSet<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n-    pub fn new(cstore: &'tcx CrateStore,\n-               cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n+impl<'a, 'b, 'tcx, 'rcx> RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n+    pub fn new(cstore: &'a CrateStore,\n+               cx: &'a core::DocContext<'b, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "55f3fdefd1b4193e2fe31a7070d3438dd5c77579", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae2e22e814931ea26e571c7d6e72aa1b05a871d/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=dae2e22e814931ea26e571c7d6e72aa1b05a871d", "patch": "@@ -22,7 +22,7 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'a> {\n+pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'b> {\n     cx: &'a ::core::DocContext<'b, 'tcx, 'rcx>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,"}]}