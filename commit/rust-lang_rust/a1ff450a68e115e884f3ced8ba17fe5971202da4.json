{"sha": "a1ff450a68e115e884f3ced8ba17fe5971202da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZmY0NTBhNjhlMTE1ZTg4NGYzY2VkOGJhMTdmZTU5NzEyMDJkYTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-12T23:49:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-12T23:49:26Z"}, "message": "Rollup merge of #61398 - kennytm:stabilize-copy-within, r=SimonSapin\n\nStabilize copy_within\n\nCloses #54236.", "tree": {"sha": "ecc8eb6011832a3a03a135a0604f7ba77d33606b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc8eb6011832a3a03a135a0604f7ba77d33606b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ff450a68e115e884f3ced8ba17fe5971202da4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdAY+GCRBK7hj4Ov3rIwAAdHIIAH5iUtCV2z4FF9IS1Fzbny04\na43A+yDeSyyClD3EAlzcgbYdGLrvltbrRHVtsU65IhNHQZ11lboqcV46BXvp13jD\nKfEwwLTKZQLNOkdrAA2P4YPELZtsdCYaPqS9KNpP/BWBHVZQUBVYsxXPlVjp6t8B\nYl4qJSrviRpSHJXaciG3AfIQ/OeafTVzPslQQJ2EEpMkNk7Phve0MzcszDgmc6B3\nMhSr6pWTRdH9dTadu9ZTF5TZiRV8gKJgVi6VnW2UwYWVUCYTuCyanYzWWFE4ojpj\nlvcUIv1cORgdYrzZdGW1GtpmGNLJEGKCY3ydxEL9juTzkp9rYTTHGOlYbWZHQ/4=\n=gWZJ\n-----END PGP SIGNATURE-----\n", "payload": "tree ecc8eb6011832a3a03a135a0604f7ba77d33606b\nparent b35aeae5b443e9c3b2ae66eb40c6e31be36d2dcd\nparent 427f1a49f677395fbc4415f2917207fb7e4bc061\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560383366 +0200\ncommitter GitHub <noreply@github.com> 1560383366 +0200\n\nRollup merge of #61398 - kennytm:stabilize-copy-within, r=SimonSapin\n\nStabilize copy_within\n\nCloses #54236.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ff450a68e115e884f3ced8ba17fe5971202da4", "html_url": "https://github.com/rust-lang/rust/commit/a1ff450a68e115e884f3ced8ba17fe5971202da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ff450a68e115e884f3ced8ba17fe5971202da4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b35aeae5b443e9c3b2ae66eb40c6e31be36d2dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b35aeae5b443e9c3b2ae66eb40c6e31be36d2dcd", "html_url": "https://github.com/rust-lang/rust/commit/b35aeae5b443e9c3b2ae66eb40c6e31be36d2dcd"}, {"sha": "427f1a49f677395fbc4415f2917207fb7e4bc061", "url": "https://api.github.com/repos/rust-lang/rust/commits/427f1a49f677395fbc4415f2917207fb7e4bc061", "html_url": "https://github.com/rust-lang/rust/commit/427f1a49f677395fbc4415f2917207fb7e4bc061"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "d93e5a9ca2b6348e88f8c7e208acd810d4a4970e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=a1ff450a68e115e884f3ced8ba17fe5971202da4", "patch": "@@ -2146,14 +2146,13 @@ impl<T> [T] {\n     /// Copying four bytes within a slice:\n     ///\n     /// ```\n-    /// # #![feature(copy_within)]\n     /// let mut bytes = *b\"Hello, World!\";\n     ///\n     /// bytes.copy_within(1..5, 8);\n     ///\n     /// assert_eq!(&bytes, b\"Hello, Wello!\");\n     /// ```\n-    #[unstable(feature = \"copy_within\", issue = \"54236\")]\n+    #[stable(feature = \"copy_within\", since = \"1.37.0\")]\n     pub fn copy_within<R: ops::RangeBounds<usize>>(&mut self, src: R, dest: usize)\n     where\n         T: Copy,\n@@ -2178,8 +2177,8 @@ impl<T> [T] {\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         unsafe {\n             ptr::copy(\n-                self.get_unchecked(src_start),\n-                self.get_unchecked_mut(dest),\n+                self.as_ptr().add(src_start),\n+                self.as_mut_ptr().add(dest),\n                 count,\n             );\n         }"}, {"sha": "bf072a9243b5107b5e9cea84be5b66baebaedfe7", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=a1ff450a68e115e884f3ced8ba17fe5971202da4", "patch": "@@ -28,7 +28,6 @@\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(copy_within)]\n #![feature(int_error_matching)]\n #![feature(const_fn)]\n #![warn(rust_2018_idioms)]"}, {"sha": "eaa799fa96ee2d5abc0b9f8c05db5b2106299a59", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ff450a68e115e884f3ced8ba17fe5971202da4/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=a1ff450a68e115e884f3ced8ba17fe5971202da4", "patch": "@@ -1512,6 +1512,13 @@ fn test_copy_within() {\n     let mut bytes = *b\"Hello, World!\";\n     bytes.copy_within(.., 0);\n     assert_eq!(&bytes, b\"Hello, World!\");\n+\n+    // Ensure that copying at the end of slice won't cause UB.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(13..13, 5);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n+    bytes.copy_within(5..5, 13);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n }\n \n #[test]\n@@ -1536,6 +1543,13 @@ fn test_copy_within_panics_src_inverted() {\n     // 2 is greater than 1, so this range is invalid.\n     bytes.copy_within(2..1, 0);\n }\n+#[test]\n+#[should_panic(expected = \"attempted to index slice up to maximum usize\")]\n+fn test_copy_within_panics_src_out_of_bounds() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // an inclusive range ending at usize::max_value() would make src_end overflow\n+    bytes.copy_within(usize::max_value()..=usize::max_value(), 0);\n+}\n \n #[test]\n fn test_is_sorted() {"}]}