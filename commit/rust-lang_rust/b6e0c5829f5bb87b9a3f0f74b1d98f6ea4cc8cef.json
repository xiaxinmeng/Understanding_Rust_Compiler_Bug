{"sha": "b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTBjNTgyOWY1YmI4N2I5YTNmMGY3NGIxZDk4ZjZlYTRjYzhjZWY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-28T00:01:08Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-28T00:42:09Z"}, "message": "Check the declaration type in a for loop against the sequence type\n\nChanged the typechecker to correctly typecheck the declared variable\ntype in a for or for-each loop against the vector element type (for\na for loop) or the iterator type (for a for-each loop). Added a\ntest case.", "tree": {"sha": "73a1da2f5f47baa70997b007cf7f3a00de3cc170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a1da2f5f47baa70997b007cf7f3a00de3cc170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "html_url": "https://github.com/rust-lang/rust/commit/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5a55f2755138a6ddd2fbdfc7b11a4117409c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5a55f2755138a6ddd2fbdfc7b11a4117409c5e", "html_url": "https://github.com/rust-lang/rust/commit/0c5a55f2755138a6ddd2fbdfc7b11a4117409c5e"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "0147806efc369c60410370aac1fcc7b80155e6dd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "patch": "@@ -1872,6 +1872,22 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n         check_call_or_bind(scx, f, args_opt_0);\n     }\n \n+    // A generic function for checking for or for-each loops\n+    fn check_for_or_for_each(&@stmt_ctxt scx, &@ast::decl decl,\n+                             &ty::t element_ty, &ast::block body,\n+                             uint node_id) {\n+        check_decl_local(scx.fcx, decl);\n+        check_block(scx, body);\n+\n+        // Unify type of decl with element type of the seq\n+        demand::simple(scx, decl.span, ty::decl_local_ty(scx.fcx.ccx.tcx,\n+                                                         decl),\n+                       element_ty);\n+        \n+        auto typ = ty::mk_nil(scx.fcx.ccx.tcx);\n+        write::ty_only_fixup(scx, node_id, typ);\n+    }\n+\n     alt (expr.node) {\n         case (ast::expr_lit(?lit, ?a)) {\n             auto typ = check_lit(scx.fcx.ccx, lit);\n@@ -2000,8 +2016,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n                 case (none[@ast::expr]) {\n                     auto nil = ty::mk_nil(scx.fcx.ccx.tcx);\n                     if (!are_compatible(scx, scx.fcx.ret_ty, nil)) {\n-                        // TODO: span_err\n-                        scx.fcx.ccx.tcx.sess.span_err(expr.span,\n+                         scx.fcx.ccx.tcx.sess.span_err(expr.span,\n                             \"put; in iterator yielding non-nil\");\n                     }\n \n@@ -2159,24 +2174,33 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n         }\n \n         case (ast::expr_for(?decl, ?seq, ?body, ?a)) {\n-            check_decl_local(scx.fcx, decl);\n             check_expr(scx, seq);\n-            check_block(scx, body);\n-\n-            // FIXME: enforce that the type of the decl is the element type\n-            // of the seq.\n-\n-            auto typ = ty::mk_nil(scx.fcx.ccx.tcx);\n-            write::ty_only_fixup(scx, a.id, typ);\n+            alt (struct (scx.fcx.ccx.tcx,\n+                         expr_ty(scx.fcx.ccx.tcx, seq))) {\n+                // FIXME: I include the check_for_or_each call in \n+                // each case because of a bug in typestate;\n+                // once that bug is fixed, the call can be moved\n+                // out of the alt expression\n+                case (ty::ty_vec(?vec_elt_ty)) {\n+                    auto elt_ty = vec_elt_ty.ty;\n+                    check_for_or_for_each(scx, decl, elt_ty, body, a.id);\n+                }\n+                case (ty::ty_str) {\n+                    auto elt_ty = ty::mk_mach(scx.fcx.ccx.tcx, \n+                                         util::common::ty_u8);\n+                    check_for_or_for_each(scx, decl, elt_ty, body, a.id);\n+                }\n+                case (_) {\n+                    scx.fcx.ccx.tcx.sess.span_err(expr.span,\n+                      \"type of for loop iterator is not a vector or string\");\n+                }\n+            }\n         }\n \n         case (ast::expr_for_each(?decl, ?seq, ?body, ?a)) {\n-            check_decl_local(scx.fcx, decl);\n             check_expr(scx, seq);\n-            check_block(scx, body);\n-\n-            auto typ = ty::mk_nil(scx.fcx.ccx.tcx);\n-            write::ty_only_fixup(scx, a.id, typ);\n+            check_for_or_for_each(scx, decl, expr_ty(scx.fcx.ccx.tcx, seq),\n+                                  body, a.id);\n         }\n \n         case (ast::expr_while(?cond, ?body, ?a)) {"}, {"sha": "00da58e17450b84eb3a15d6fa50ba38d8a5782d7", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=b6e0c5829f5bb87b9a3f0f74b1d98f6ea4cc8cef", "patch": "@@ -0,0 +1,23 @@\n+// error-pattern: mismatched types\n+use std;\n+import std::map::hashmap;\n+import std::bitv;\n+\n+type fn_info = rec(hashmap[uint, var_info] vars);\n+type var_info = rec(uint a, uint b);\n+\n+fn bitv_to_str(fn_info enclosing, bitv::t v) -> str {\n+  auto s = \"\";\n+\n+  // error is that the value type in the hash map is var_info, not a tuple\n+  for each (@tup(uint, tup(uint, uint)) p in enclosing.vars.items()) {\n+    if (bitv::get(v, p._1._0)) {\n+      s += \"foo\"; // \" \" + p._1._1 + \" \" + \"[\" + p._0 + \"]\";\n+    }\n+  }\n+  ret s;\n+}\n+\n+fn main() {\n+  log \"OK\";\n+}\n\\ No newline at end of file"}]}