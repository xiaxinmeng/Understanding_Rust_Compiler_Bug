{"sha": "474626af50ae9836b56a351edf59c1ca9b104b5c", "node_id": "C_kwDOAAsO6NoAKDQ3NDYyNmFmNTBhZTk4MzZiNTZhMzUxZWRmNTljMWNhOWIxMDRiNWM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-15T22:59:32Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-27T02:20:16Z"}, "message": "Eagerly replace `{integer}`/`{float}` with `i32`/`f64` for suggestion", "tree": {"sha": "7596f2f21457d46baa99d269313cc4a07a741863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7596f2f21457d46baa99d269313cc4a07a741863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/474626af50ae9836b56a351edf59c1ca9b104b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/474626af50ae9836b56a351edf59c1ca9b104b5c", "html_url": "https://github.com/rust-lang/rust/commit/474626af50ae9836b56a351edf59c1ca9b104b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/474626af50ae9836b56a351edf59c1ca9b104b5c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe3b89cd57229343eeca753fdd8c63d9b03c65c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe3b89cd57229343eeca753fdd8c63d9b03c65c", "html_url": "https://github.com/rust-lang/rust/commit/3fe3b89cd57229343eeca753fdd8c63d9b03c65c"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "5878cfdf0b7fcf767ffbe07cc807ea6cb0e578b5", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/474626af50ae9836b56a351edf59c1ca9b104b5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474626af50ae9836b56a351edf59c1ca9b104b5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=474626af50ae9836b56a351edf59c1ca9b104b5c", "patch": "@@ -1434,6 +1434,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         value.fold_with(&mut r)\n     }\n \n+    pub fn resolve_numeric_literals_with_default<T>(&self, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        if !value.needs_infer() {\n+            return value; // Avoid duplicated subst-folding.\n+        }\n+        let mut r = InferenceLiteralEraser { infcx: self };\n+        value.fold_with(&mut r)\n+    }\n+\n     /// Returns the first unresolved variable contained in `T`. In the\n     /// process of visiting `T`, this will resolve (where possible)\n     /// type variables in `T`, but it never constructs the final,\n@@ -1785,6 +1796,26 @@ impl<'tcx> TyOrConstInferVar<'tcx> {\n     }\n }\n \n+/// Replace `{integer}` with `i32` and `{float}` with `f64`.\n+/// Used only for diagnostics.\n+struct InferenceLiteralEraser<'a, 'tcx> {\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'a, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        match ty.kind() {\n+            ty::Infer(ty::IntVar(_) | ty::FreshIntTy(_)) => self.tcx().types.i32,\n+            ty::Infer(ty::FloatVar(_) | ty::FreshFloatTy(_)) => self.tcx().types.f64,\n+            _ => ty.super_fold_with(self),\n+        }\n+    }\n+}\n+\n struct ShallowResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }"}, {"sha": "37014b5eea5c10784f87ea1f712165ceb70cda03", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/474626af50ae9836b56a351edf59c1ca9b104b5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474626af50ae9836b56a351edf59c1ca9b104b5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=474626af50ae9836b56a351edf59c1ca9b104b5c", "patch": "@@ -521,6 +521,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         can_suggest: bool,\n         fn_id: hir::HirId,\n     ) -> bool {\n+        let found =\n+            self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n         match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {"}, {"sha": "e8cb18f5c1e62bcc2ef14398a524296ad5f9babc", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=474626af50ae9836b56a351edf59c1ca9b104b5c", "patch": "@@ -36,23 +36,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:2:5\n    |\n LL | fn a() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:14:5\n    |\n LL | fn c() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:20:5\n    |\n LL | fn d() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n "}, {"sha": "66c68be2f09de527c94804d60cd9068398959b63", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=474626af50ae9836b56a351edf59c1ca9b104b5c", "patch": "@@ -38,31 +38,31 @@ error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:39:5\n    |\n LL | extern \"C\" fn bar() {\n-   |                     - possibly return type missing here?\n+   |                     - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:44:5\n    |\n LL | extern \"C\" fn baz() {\n-   |                     - possibly return type missing here?\n+   |                     - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:49:5\n    |\n LL | extern \"Rust\" fn rust_abi() {\n-   |                             - possibly return type missing here?\n+   |                             - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:54:5\n    |\n LL | extern \"\\x43\" fn c_abi_escaped() {\n-   |                                  - possibly return type missing here?\n+   |                                  - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n "}, {"sha": "5af136e6011238497ff2b145661577b7a4ce979f", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/474626af50ae9836b56a351edf59c1ca9b104b5c/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=474626af50ae9836b56a351edf59c1ca9b104b5c", "patch": "@@ -1,15 +1,19 @@\n error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n-LL | fn bar() {\n-   |          - possibly return type missing here?\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n-   |     |\n-   |     expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n+help: consider using a semicolon here\n+   |\n+LL |     foo(4 as usize);\n+   |                    +\n+help: try adding a return type\n+   |\n+LL | fn bar() -> S<usize> {\n+   |          +++++++++++\n \n error: aborting due to previous error\n "}]}