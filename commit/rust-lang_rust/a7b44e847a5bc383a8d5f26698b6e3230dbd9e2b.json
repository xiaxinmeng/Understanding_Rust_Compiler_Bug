{"sha": "a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjQ0ZTg0N2E1YmMzODNhOGQ1ZjI2Njk4YjZlMzIzMGRiZDllMmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T01:04:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T01:23:30Z"}, "message": "rt: Make the builtins no longer take an explicit task parameter", "tree": {"sha": "43b4bb2b0e890086d8967bd07ab5461b5394abac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b4bb2b0e890086d8967bd07ab5461b5394abac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "html_url": "https://github.com/rust-lang/rust/commit/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5bb42acfb4962005e056f763bfcc160240483cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bb42acfb4962005e056f763bfcc160240483cc", "html_url": "https://github.com/rust-lang/rust/commit/b5bb42acfb4962005e056f763bfcc160240483cc"}], "stats": {"total": 159, "additions": 99, "deletions": 60}, "files": [{"sha": "314e85eecc4806f524297ac23bd5b51c1cc4d011", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 98, "deletions": 59, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "patch": "@@ -1,14 +1,16 @@\n+/* Native builtins. */\n \n #include \"rust_internal.h\"\n+#include \"rust_scheduler.h\"\n \n #if !defined(__WIN32__)\n #include <sys/time.h>\n #endif\n \n-/* Native builtins. */\n-\n extern \"C\" CDECL rust_str*\n-last_os_error(rust_task *task) {\n+last_os_error(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n+\n     LOG(task, task, \"last_os_error()\");\n \n #if defined(__WIN32__)\n@@ -49,7 +51,8 @@ last_os_error(rust_task *task) {\n }\n \n extern \"C\" CDECL rust_str *\n-rust_getcwd(rust_task *task) {\n+rust_getcwd(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, task, \"rust_getcwd()\");\n \n     char cbuf[BUF_BYTES];\n@@ -66,48 +69,51 @@ rust_getcwd(rust_task *task) {\n     return make_str(task->kernel, cbuf, strlen(cbuf), \"rust_str(getcwd\");\n }\n \n+// TODO: Allow calling native functions that return double results.\n extern \"C\" CDECL\n-void squareroot(rust_task *task, double *input, double *output) {\n+void squareroot(void *unused_task, double *input, double *output) {\n     *output = sqrt(*input);\n }\n \n extern \"C\" CDECL size_t\n-size_of(rust_task *task, type_desc *t) {\n+size_of(void *unused_task, type_desc *t) {\n   return t->size;\n }\n \n extern \"C\" CDECL size_t\n-align_of(rust_task *task, type_desc *t) {\n+align_of(void *unused_task, type_desc *t) {\n   return t->align;\n }\n \n extern \"C\" CDECL void\n-leak(rust_task *task, type_desc *t, void *thing) {\n+leak(void *unused_task, type_desc *t, void *thing) {\n     // Do nothing. Call this with move-mode in order to say \"Don't worry rust,\n     // I'll take care of this.\"\n }\n \n extern \"C\" CDECL intptr_t\n-refcount(rust_task *task, type_desc *t, intptr_t *v) {\n+refcount(void *unused_task, type_desc *t, intptr_t *v) {\n \n     // Passed-in value has refcount 1 too high\n     // because it was ref'ed while making the call.\n     return (*v) - 1;\n }\n \n extern \"C\" CDECL void\n-do_gc(rust_task *task) {\n+do_gc(void *unused_task) {\n     // TODO\n }\n \n extern \"C\" CDECL void\n-unsupervise(rust_task *task) {\n+unsupervise(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     task->unsupervise();\n }\n \n extern \"C\" CDECL void\n-vec_reserve_shared(rust_task* task, type_desc* ty, rust_vec** vp,\n-                    size_t n_elts) {\n+vec_reserve_shared(void *unused_task, type_desc* ty, rust_vec** vp,\n+                   size_t n_elts) {\n+    rust_task *task = rust_scheduler::get_task();\n     reserve_vec(task, vp, n_elts * ty->size);\n }\n \n@@ -116,8 +122,9 @@ vec_reserve_shared(rust_task* task, type_desc* ty, rust_vec** vp,\n  * vector must have size zero.\n  */\n extern \"C\" CDECL rust_vec*\n-vec_from_buf_shared(rust_task *task, type_desc *ty,\n-                     void *ptr, size_t count) {\n+vec_from_buf_shared(void *unused_task, type_desc *ty,\n+                    void *ptr, size_t count) {\n+    rust_task *task = rust_scheduler::get_task();\n     size_t fill = ty->size * count;\n     rust_vec* v = (rust_vec*)task->kernel->malloc(fill + sizeof(rust_vec),\n                                                     \"vec_from_buf\");\n@@ -127,7 +134,8 @@ vec_from_buf_shared(rust_task *task, type_desc *ty,\n }\n \n extern \"C\" CDECL void\n-rust_str_push(rust_task* task, rust_vec** sp, uint8_t byte) {\n+rust_str_push(void *unused_task, rust_vec** sp, uint8_t byte) {\n+    rust_task *task = rust_scheduler::get_task();\n     size_t fill = (*sp)->fill;\n     reserve_vec(task, sp, fill + 1);\n     (*sp)->data[fill-1] = byte;\n@@ -136,8 +144,9 @@ rust_str_push(rust_task* task, rust_vec** sp, uint8_t byte) {\n }\n \n extern \"C\" CDECL void *\n-rand_new(rust_task *task)\n+rand_new(void *unused_task)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     rust_scheduler *sched = task->sched;\n     randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"randctx\");\n     if (!rctx) {\n@@ -149,29 +158,33 @@ rand_new(rust_task *task)\n }\n \n extern \"C\" CDECL size_t\n-rand_next(rust_task *task, randctx *rctx)\n+rand_next(void *unused_task, randctx *rctx)\n {\n     return isaac_rand(rctx);\n }\n \n extern \"C\" CDECL void\n-rand_free(rust_task *task, randctx *rctx)\n+rand_free(void *unused_task, randctx *rctx)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     task->free(rctx);\n }\n \n extern \"C\" CDECL void\n-task_sleep(rust_task *task, size_t time_in_us) {\n+task_sleep(void *unused_task, size_t time_in_us) {\n+    rust_task *task = rust_scheduler::get_task();\n     task->yield(time_in_us);\n }\n \n extern \"C\" CDECL void\n-task_yield(rust_task *task) {\n+task_yield(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     task->yield(1);\n }\n \n extern \"C\" CDECL intptr_t\n-task_join(rust_task *task, rust_task_id tid) {\n+task_join(void *unused_task, rust_task_id tid) {\n+    rust_task *task = rust_scheduler::get_task();\n     // If the other task is already dying, we don't have to wait for it.\n     rust_task *join_task = task->kernel->get_task_by_id(tid);\n     // FIXME: find task exit status and return that.\n@@ -195,26 +208,29 @@ task_join(rust_task *task, rust_task_id tid) {\n     }\n }\n \n-/* Debug builtins for std.dbg. */\n+/* Debug builtins for std::dbg. */\n \n static void\n-debug_tydesc_helper(rust_task *task, type_desc *t)\n+debug_tydesc_helper(void *unused_task, type_desc *t)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"  size %\" PRIdPTR \", align %\" PRIdPTR\n         \", first_param 0x%\" PRIxPTR,\n         t->size, t->align, t->first_param);\n }\n \n extern \"C\" CDECL void\n-debug_tydesc(rust_task *task, type_desc *t)\n+debug_tydesc(void *unused_task, type_desc *t)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_tydesc\");\n     debug_tydesc_helper(task, t);\n }\n \n extern \"C\" CDECL void\n-debug_opaque(rust_task *task, type_desc *t, uint8_t *front)\n+debug_opaque(void *unused_task, type_desc *t, uint8_t *front)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_opaque\");\n     debug_tydesc_helper(task, t);\n     // FIXME may want to actually account for alignment.  `front` may not\n@@ -232,8 +248,9 @@ struct rust_box {\n };\n \n extern \"C\" CDECL void\n-debug_box(rust_task *task, type_desc *t, rust_box *box)\n+debug_box(void *unused_task, type_desc *t, rust_box *box)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_box(0x%\" PRIxPTR \")\", box);\n     debug_tydesc_helper(task, t);\n     LOG(task, stdlib, \"  refcount %\" PRIdPTR,\n@@ -249,8 +266,10 @@ struct rust_tag {\n };\n \n extern \"C\" CDECL void\n-debug_tag(rust_task *task, type_desc *t, rust_tag *tag)\n+debug_tag(void *unused_task, type_desc *t, rust_tag *tag)\n {\n+    rust_task *task = rust_scheduler::get_task();\n+\n     LOG(task, stdlib, \"debug_tag\");\n     debug_tydesc_helper(task, t);\n     LOG(task, stdlib, \"  discriminant %\" PRIdPTR, tag->discriminant);\n@@ -266,9 +285,11 @@ struct rust_obj {\n };\n \n extern \"C\" CDECL void\n-debug_obj(rust_task *task, type_desc *t, rust_obj *obj,\n+debug_obj(void *unused_task, type_desc *t, rust_obj *obj,\n           size_t nmethods, size_t nbytes)\n {\n+    rust_task *task = rust_scheduler::get_task();\n+\n     LOG(task, stdlib, \"debug_obj with %\" PRIdPTR \" methods\", nmethods);\n     debug_tydesc_helper(task, t);\n     LOG(task, stdlib, \"  vtbl at 0x%\" PRIxPTR, obj->vtbl);\n@@ -288,8 +309,9 @@ struct rust_fn {\n };\n \n extern \"C\" CDECL void\n-debug_fn(rust_task *task, type_desc *t, rust_fn *fn)\n+debug_fn(void *unused_task, type_desc *t, rust_fn *fn)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_fn\");\n     debug_tydesc_helper(task, t);\n     LOG(task, stdlib, \"  thunk at 0x%\" PRIxPTR, fn->thunk);\n@@ -300,11 +322,12 @@ debug_fn(rust_task *task, type_desc *t, rust_fn *fn)\n }\n \n extern \"C\" CDECL void *\n-debug_ptrcast(rust_task *task,\n+debug_ptrcast(void *unused_task,\n               type_desc *from_ty,\n               type_desc *to_ty,\n               void *ptr)\n {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_ptrcast from\");\n     debug_tydesc_helper(task, from_ty);\n     LOG(task, stdlib, \"to\");\n@@ -313,7 +336,8 @@ debug_ptrcast(rust_task *task,\n }\n \n extern \"C\" CDECL rust_vec*\n-rust_list_files(rust_task *task, rust_vec **path) {\n+rust_list_files(void *unused_task, rust_vec **path) {\n+    rust_task *task = rust_scheduler::get_task();\n     array_list<rust_str*> strings;\n #if defined(__WIN32__)\n     WIN32_FIND_DATA FindFileData;\n@@ -351,7 +375,7 @@ rust_list_files(rust_task *task, rust_vec **path) {\n }\n \n extern \"C\" CDECL int\n-rust_file_is_dir(rust_task *task, char *path) {\n+rust_file_is_dir(void *unused_task, char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n         return 0;\n@@ -364,13 +388,14 @@ extern \"C\" CDECL FILE* rust_get_stdout() {return stdout;}\n extern \"C\" CDECL FILE* rust_get_stderr() {return stderr;}\n \n extern \"C\" CDECL int\n-rust_ptr_eq(rust_task *task, type_desc *t, rust_box *a, rust_box *b) {\n+rust_ptr_eq(void *unused_task, type_desc *t, rust_box *a, rust_box *b) {\n     return a == b;\n }\n \n #if defined(__WIN32__)\n extern \"C\" CDECL void\n-get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n+get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n+    rust_task *task = rust_scheduler::get_task();\n     SYSTEMTIME systemTime;\n     FILETIME fileTime;\n     GetSystemTime(&systemTime);\n@@ -385,7 +410,7 @@ get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n }\n #else\n extern \"C\" CDECL void\n-get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n+get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     *sec = tv.tv_sec;\n@@ -394,46 +419,51 @@ get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n #endif\n \n extern \"C\" CDECL void\n-nano_time(rust_task *task, uint64_t *ns) {\n+nano_time(void *unused_task, uint64_t *ns) {\n     timer t;\n     *ns = t.time_ns();\n }\n \n extern \"C\" CDECL void\n-pin_task(rust_task *task) {\n+pin_task(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     task->pin();\n }\n \n extern \"C\" CDECL void\n-unpin_task(rust_task *task) {\n+unpin_task(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     task->unpin();\n }\n \n extern \"C\" CDECL rust_task_id\n-get_task_id(rust_task *task) {\n+get_task_id(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     return task->user.id;\n }\n \n extern \"C\" CDECL rust_task_id\n-new_task(rust_task *task) {\n+new_task(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     return task->kernel->create_task(task, NULL);\n }\n \n extern \"C\" CDECL void\n-drop_task(rust_task *task, rust_task *target) {\n+drop_task(void *unused_task, rust_task *target) {\n     if(target) {\n         target->deref();\n     }\n }\n \n extern \"C\" CDECL rust_task *\n-get_task_pointer(rust_task *task, rust_task_id id) {\n+get_task_pointer(void *unused_task, rust_task_id id) {\n+    rust_task *task = rust_scheduler::get_task();\n     return task->kernel->get_task_by_id(id);\n }\n \n // FIXME: Transitional. Remove\n extern \"C\" CDECL void **\n-get_task_trampoline(rust_task *task) {\n+get_task_trampoline(void *unused_task) {\n     return NULL;\n }\n \n@@ -445,14 +475,16 @@ struct fn_env_pair {\n extern \"C\" CDECL uintptr_t get_spawn_wrapper();\n \n extern \"C\" CDECL void\n-start_task(rust_task *task, rust_task_id id, fn_env_pair *f) {\n+start_task(void *unused_task, rust_task_id id, fn_env_pair *f) {\n+    rust_task *task = rust_scheduler::get_task();\n     rust_task *target = task->kernel->get_task_by_id(id);\n     target->start(get_spawn_wrapper(), f->f, f->env);\n     target->deref();\n }\n \n extern \"C\" CDECL void\n-migrate_alloc(rust_task *task, void *alloc, rust_task_id tid) {\n+migrate_alloc(void *unused_task, void *alloc, rust_task_id tid) {\n+    rust_task *task = rust_scheduler::get_task();\n     if(!alloc) return;\n     rust_task *target = task->kernel->get_task_by_id(tid);\n     if(target) {\n@@ -469,17 +501,19 @@ migrate_alloc(rust_task *task, void *alloc, rust_task_id tid) {\n // defined in rust_task.cpp\n extern size_t g_custom_min_stack_size;\n extern \"C\" CDECL void\n-set_min_stack(rust_task *task, uintptr_t stack_size) {\n+set_min_stack(void *unused_task, uintptr_t stack_size) {\n     g_custom_min_stack_size = stack_size;\n }\n \n extern \"C\" CDECL int\n-sched_threads(rust_task *task) {\n+sched_threads(void *unused_task) {\n+    rust_task *task = rust_scheduler::get_task();\n     return task->kernel->num_threads;\n }\n \n extern \"C\" CDECL rust_port*\n-new_port(rust_task *task, size_t unit_sz) {\n+new_port(void *unused_task, size_t unit_sz) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n     // take a reference on behalf of the port\n@@ -488,7 +522,8 @@ new_port(rust_task *task, size_t unit_sz) {\n }\n \n extern \"C\" CDECL void\n-del_port(rust_task *task, rust_port *port) {\n+del_port(void *unused_task, rust_port *port) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     I(task->sched, !port->ref_count);\n     delete port;\n@@ -498,12 +533,13 @@ del_port(rust_task *task, rust_port *port) {\n }\n \n extern \"C\" CDECL rust_port_id\n-get_port_id(rust_task *task, rust_port *port) {\n+get_port_id(void *unused_task, rust_port *port) {\n     return port->id;\n }\n \n extern \"C\" CDECL rust_chan*\n-new_chan(rust_task *task, rust_port *port) {\n+new_chan(void *unused_task, rust_port *port) {\n+    rust_task *task = rust_scheduler::get_task();\n     rust_scheduler *sched = task->sched;\n     LOG(task, comm, \"new_chan(\"\n         \"task=0x%\" PRIxPTR \" (%s), port=0x%\" PRIxPTR \")\",\n@@ -514,35 +550,37 @@ new_chan(rust_task *task, rust_port *port) {\n }\n \n extern \"C\" CDECL\n-void del_chan(rust_task *task, rust_chan *chan) {\n+void del_chan(void *unused_task, rust_chan *chan) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n     I(task->sched, false);\n }\n \n extern \"C\" CDECL\n-void take_chan(rust_task *task, rust_chan *chan) {\n+void take_chan(void *unused_task, rust_chan *chan) {\n     chan->ref();\n }\n \n extern \"C\" CDECL\n-void drop_chan(rust_task *task, rust_chan *chan) {\n+void drop_chan(void *unused_task, rust_chan *chan) {\n     chan->deref();\n }\n \n extern \"C\" CDECL\n-void drop_port(rust_task *, rust_port *port) {\n+void drop_port(void *, rust_port *port) {\n     port->ref_count--;\n }\n \n extern \"C\" CDECL void\n-chan_send(rust_task *task, rust_chan *chan, void *sptr) {\n+chan_send(void *unused_task, rust_chan *chan, void *sptr) {\n     chan->send(sptr);\n }\n \n extern \"C\" CDECL void\n-chan_id_send(rust_task *task, type_desc *t, rust_task_id target_task_id,\n+chan_id_send(void *unused_task, type_desc *t, rust_task_id target_task_id,\n              rust_port_id target_port_id, void *sptr) {\n     // FIXME: make sure this is thread-safe\n+    rust_task *task = rust_scheduler::get_task();\n     rust_task *target_task = task->kernel->get_task_by_id(target_task_id);\n     if(target_task) {\n         rust_port *port = target_task->get_port_by_id(target_port_id);\n@@ -555,7 +593,8 @@ chan_id_send(rust_task *task, type_desc *t, rust_task_id target_task_id,\n }\n \n extern \"C\" CDECL void\n-port_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n+port_recv(void *unused_task, uintptr_t *dptr, rust_port *port) {\n+    rust_task *task = rust_scheduler::get_task();\n     {\n         scoped_lock with(port->lock);\n "}, {"sha": "b76592b429a32096bfcc5431229f41090fdf37cf", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=a7b44e847a5bc383a8d5f26698b6e3230dbd9e2b", "patch": "@@ -288,7 +288,7 @@ struct type_desc {\n #include \"memory.h\"\n \n extern \"C\" CDECL void\n-port_recv(rust_task *task, uintptr_t *dptr, rust_port *port);\n+port_recv(void *unused_task, uintptr_t *dptr, rust_port *port);\n \n #include \"test/rust_test_harness.h\"\n #include \"test/rust_test_util.h\""}]}