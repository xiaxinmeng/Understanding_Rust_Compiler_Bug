{"sha": "e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTBmNDkxZTlmNmVlMmUyMjQ5Yjk5NWNiNzQ0OWJiN2QzNjk3ZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T07:03:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T07:03:49Z"}, "message": "Auto merge of #4250 - mikerite:fix-3992, r=phansch\n\nFix allow bug in `trivially_copy_pass_by_ref`\n\nCloses #3992\n\nchangelog: Fix allow bug in `trivially_copy_pass_by_ref`", "tree": {"sha": "50d7d62b5a6a56633d5203c567b9c4ac85a2d857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d7d62b5a6a56633d5203c567b9c4ac85a2d857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "html_url": "https://github.com/rust-lang/rust/commit/e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e490f491e9f6ee2e2249b995cb7449bb7d3697f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfc21bbac59e3c7c7b5952843750e5f1d83afaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfc21bbac59e3c7c7b5952843750e5f1d83afaf", "html_url": "https://github.com/rust-lang/rust/commit/8dfc21bbac59e3c7c7b5952843750e5f1d83afaf"}, {"sha": "8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "html_url": "https://github.com/rust-lang/rust/commit/8fa023272ffe3e6679ef3aec7a80b41accd1e05f"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "e6246a2af5d565400c38dee6de6a1f7a77633c11", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e490f491e9f6ee2e2249b995cb7449bb7d3697f4/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e490f491e9f6ee2e2249b995cb7449bb7d3697f4/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "patch": "@@ -72,30 +72,22 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n         Self { limit }\n     }\n \n-    fn check_trait_method(&mut self, cx: &LateContext<'_, 'tcx>, item: &TraitItemRef) {\n-        let method_def_id = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n-        let method_sig = cx.tcx.fn_sig(method_def_id);\n-        let method_sig = cx.tcx.erase_late_bound_regions(&method_sig);\n-\n-        let decl = match cx.tcx.hir().fn_decl_by_hir_id(item.id.hir_id) {\n-            Some(b) => b,\n-            None => return,\n-        };\n+    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, hir_id: HirId, decl: &FnDecl, span: Option<Span>) {\n+        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n-        self.check_poly_fn(cx, &decl, &method_sig, None);\n-    }\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, decl: &FnDecl, sig: &FnSig<'tcx>, span: Option<Span>) {\n         // Use lifetimes to determine if we're returning a reference to the\n         // argument. In that case we can't switch to pass-by-value as the\n         // argument will not live long enough.\n-        let output_lts = match sig.output().sty {\n+        let output_lts = match fn_sig.output().sty {\n             ty::Ref(output_lt, _, _) => vec![output_lt],\n             ty::Adt(_, substs) => substs.regions().collect(),\n             _ => vec![],\n         };\n \n-        for (input, &ty) in decl.inputs.iter().zip(sig.inputs()) {\n+        for (input, &ty) in decl.inputs.iter().zip(fn_sig.inputs()) {\n             // All spans generated from a proc-macro invocation are the same...\n             match span {\n                 Some(s) if s == input.span => return,\n@@ -128,25 +120,18 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n             }\n         }\n     }\n-\n-    fn check_trait_items(&mut self, cx: &LateContext<'_, '_>, trait_items: &[TraitItemRef]) {\n-        for item in trait_items {\n-            if let AssocItemKind::Method { .. } = item.kind {\n-                self.check_trait_method(cx, item);\n-            }\n-        }\n-    }\n }\n \n impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n         if in_macro_or_desugar(item.span) {\n             return;\n         }\n-        if let ItemKind::Trait(_, _, _, _, ref trait_items) = item.node {\n-            self.check_trait_items(cx, trait_items);\n+\n+        if let hir::TraitItemKind::Method(method_sig, _) = &item.node {\n+            self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n         }\n     }\n \n@@ -187,11 +172,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n             }\n         }\n \n-        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n-\n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n-\n-        self.check_poly_fn(cx, decl, &fn_sig, Some(span));\n+        self.check_poly_fn(cx, hir_id, decl, Some(span));\n     }\n }"}, {"sha": "bd23aa99ceb0e8abb81b25414dc300fb691a921c", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e490f491e9f6ee2e2249b995cb7449bb7d3697f4/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e490f491e9f6ee2e2249b995cb7449bb7d3697f4/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=e490f491e9f6ee2e2249b995cb7449bb7d3697f4", "patch": "@@ -85,6 +85,17 @@ impl MyTrait for Foo {\n     }\n }\n \n+#[allow(unused_variables)]\n+mod issue3992 {\n+    pub trait A {\n+        #[allow(clippy::trivially_copy_pass_by_ref)]\n+        fn a(b: &u16) {}\n+    }\n+\n+    #[allow(clippy::trivially_copy_pass_by_ref)]\n+    pub fn c(d: &u16) {}\n+}\n+\n fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);"}]}