{"sha": "91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "node_id": "C_kwDOAAsO6NoAKDkxYjkzMTkyNmZkNDlmYzk3ZDFlMzlmMmI4MjA2YWJmMWQ3N2NlN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-23T15:53:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-23T15:53:50Z"}, "message": "Auto merge of #90203 - matthiaskrgr:rollup-v215wew, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #85833 (Scrape code examples from examples/ directory for Rustdoc)\n - #88041 (Make all proc-macro back-compat lints deny-by-default)\n - #89829 (Consider types appearing in const expressions to be invariant)\n - #90168 (Reset qualifs when a storage of a local ends)\n - #90198 (Add caveat about changing parallelism and function call overhead)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2304d283890f1617344bf59c4994e2f1e096f14e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2304d283890f1617344bf59c4994e2f1e096f14e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "html_url": "https://github.com/rust-lang/rust/commit/91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5740c715001f981515ed46faaddebf67cb9539", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5740c715001f981515ed46faaddebf67cb9539", "html_url": "https://github.com/rust-lang/rust/commit/aa5740c715001f981515ed46faaddebf67cb9539"}, {"sha": "1680359dad8f412a145c565ac84ea3711d5f97a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1680359dad8f412a145c565ac84ea3711d5f97a0", "html_url": "https://github.com/rust-lang/rust/commit/1680359dad8f412a145c565ac84ea3711d5f97a0"}], "stats": {"total": 1430, "additions": 1281, "deletions": 149}, "files": [{"sha": "e20b86dd4523cd2c946ae55bed60bdf287e67a3d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{self, BasicBlock, Local, Location};\n+use rustc_middle::mir::{self, BasicBlock, Local, Location, Statement, StatementKind};\n \n use std::marker::PhantomData;\n \n@@ -120,6 +120,15 @@ where\n         self.super_assign(place, rvalue, location);\n     }\n \n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        match statement.kind {\n+            StatementKind::StorageDead(local) => {\n+                self.qualifs_per_local.remove(local);\n+            }\n+            _ => self.super_statement(statement, location),\n+        }\n+    }\n+\n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`."}, {"sha": "f35ca2659fd65661eae69ac75c8aa58e4f886729", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1957,7 +1957,7 @@ declare_lint! {\n     /// [issue #50504]: https://github.com/rust-lang/rust/issues/50504\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-    Warn,\n+    Deny,\n     \"detects proc macro derives using inaccessible names from parent modules\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n@@ -3253,7 +3253,7 @@ declare_lint! {\n     /// [issue #83125]: https://github.com/rust-lang/rust/issues/83125\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub PROC_MACRO_BACK_COMPAT,\n-    Warn,\n+    Deny,\n     \"detects usage of old versions of certain proc-macro crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\","}, {"sha": "33c27ce86ddb5f8357f2a42a763b9559afbb3932", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -223,8 +223,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance_i)\n                 }\n             }\n         }\n@@ -263,7 +263,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, _) => {\n+            ty::Array(typ, len) => {\n+                self.add_constraints_from_const(current, len, variance);\n                 self.add_constraints_from_ty(current, typ, variance);\n             }\n \n@@ -385,13 +386,32 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance)\n                 }\n             }\n         }\n     }\n \n+    /// Adds constraints appropriate for a const expression `val`\n+    /// in a context with ambient variance `variance`\n+    fn add_constraints_from_const(\n+        &mut self,\n+        current: &CurrentItem,\n+        val: &ty::Const<'tcx>,\n+        variance: VarianceTermPtr<'a>,\n+    ) {\n+        debug!(\"add_constraints_from_const(val={:?}, variance={:?})\", val, variance);\n+\n+        match &val.val {\n+            ty::ConstKind::Unevaluated(uv) => {\n+                let substs = uv.substs(self.tcx());\n+                self.add_constraints_from_invariant_substs(current, substs, variance);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig("}, {"sha": "1a5cf5ab8226a3b76d06fffae566afbe4274c790", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1449,6 +1449,10 @@ fn _assert_sync_and_send() {\n /// global state in order to more accurately query the amount of available\n /// parallelism.\n ///\n+/// Resource limits can be changed during the runtime of a program, therefore the value is\n+/// not cached and instead recomputed every time this function is called. It should not be\n+/// called from hot code.\n+///\n /// The value returned by this function should be considered a simplified\n /// approximation of the actual amount of parallelism available at any given\n /// time. To get a more detailed or precise overview of the amount of"}, {"sha": "51f365be922fa3225746cccbfa4e6c2723389819", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -455,3 +455,27 @@ Calculating code examples follows these rules:\n   * static\n   * typedef\n 2. If one of the previously listed items has a code example, then it'll be counted.\n+\n+### `--with-examples`: include examples of uses of items as documentation\n+\n+This option, combined with `--scrape-examples-target-crate` and\n+`--scrape-examples-output-path`, is used to implement the functionality in [RFC\n+#3123](https://github.com/rust-lang/rfcs/pull/3123). Uses of an item (currently\n+functions / call-sites) are found in a crate and its reverse-dependencies, and\n+then the uses are included as documentation for that item. This feature is\n+intended to be used via `cargo doc --scrape-examples`, but the rustdoc-only\n+workflow looks like:\n+\n+```bash\n+$ rustdoc examples/ex.rs -Z unstable-options \\\n+    --extern foobar=target/deps/libfoobar.rmeta \\\n+    --scrape-examples-target-crate foobar \\\n+    --scrape-examples-output-path output.calls\n+$ rustdoc src/lib.rs -Z unstable-options --with-examples output.calls\n+```\n+\n+First, the library must be checked to generate an `rmeta`. Then a\n+reverse-dependency like `examples/ex.rs` is given to rustdoc with the target\n+crate being documented (`foobar`) and a path to output the calls\n+(`output.calls`). Then, the generated calls file can be passed via\n+`--with-examples` to the subsequent documentation of `foobar`."}, {"sha": "7a1c561c8e53125dd6ef5f7fc0361b752621cd92", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -2062,7 +2062,8 @@ fn clean_use_statement(\n impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n-        cx.with_param_env(item.def_id.to_def_id(), |cx| {\n+        let def_id = item.def_id.to_def_id();\n+        cx.with_param_env(def_id, |cx| {\n             let kind = match item.kind {\n                 hir::ForeignItemKind::Fn(ref decl, ref names, ref generics) => {\n                     let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());"}, {"sha": "7342478c3ec0d257d83193cb19dfc638b6b2339c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -25,6 +25,7 @@ use crate::html::render::StylePath;\n use crate::html::static_files;\n use crate::opts;\n use crate::passes::{self, Condition, DefaultPassOption};\n+use crate::scrape_examples::{AllCallLocations, ScrapeExamplesOptions};\n use crate::theme;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n@@ -158,6 +159,10 @@ crate struct Options {\n     crate json_unused_externs: bool,\n     /// Whether to skip capturing stdout and stderr of tests.\n     crate nocapture: bool,\n+\n+    /// Configuration for scraping examples from the current crate. If this option is Some(..) then\n+    /// the compiler will scrape examples and not generate documentation.\n+    crate scrape_examples_options: Option<ScrapeExamplesOptions>,\n }\n \n impl fmt::Debug for Options {\n@@ -202,6 +207,7 @@ impl fmt::Debug for Options {\n             .field(\"run_check\", &self.run_check)\n             .field(\"no_run\", &self.no_run)\n             .field(\"nocapture\", &self.nocapture)\n+            .field(\"scrape_examples_options\", &self.scrape_examples_options)\n             .finish()\n     }\n }\n@@ -280,6 +286,7 @@ crate struct RenderOptions {\n     crate emit: Vec<EmitType>,\n     /// If `true`, HTML source pages will generate links for items to their definition.\n     crate generate_link_to_definition: bool,\n+    crate call_locations: AllCallLocations,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -671,6 +678,10 @@ impl Options {\n             return Err(1);\n         }\n \n+        let scrape_examples_options = ScrapeExamplesOptions::new(&matches, &diag)?;\n+        let with_examples = matches.opt_strs(\"with-examples\");\n+        let call_locations = crate::scrape_examples::load_call_locations(with_examples, &diag)?;\n+\n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n         Ok(Options {\n@@ -737,10 +748,12 @@ impl Options {\n                 ),\n                 emit,\n                 generate_link_to_definition,\n+                call_locations,\n             },\n             crate_name,\n             output_format,\n             json_unused_externs,\n+            scrape_examples_options,\n         })\n     }\n "}, {"sha": "fa8ad2a37e726d3419f6635d151fcc3b0965f5cf", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -12,6 +12,7 @@ use crate::html::render::Context;\n use std::collections::VecDeque;\n use std::fmt::{Display, Write};\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_lexer::{LiteralKind, TokenKind};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n@@ -30,6 +31,10 @@ crate struct ContextInfo<'a, 'b, 'c> {\n     crate root_path: &'c str,\n }\n \n+/// Decorations are represented as a map from CSS class to vector of character ranges.\n+/// Each range will be wrapped in a span with that class.\n+crate struct DecorationInfo(crate FxHashMap<&'static str, Vec<(u32, u32)>>);\n+\n /// Highlights `src`, returning the HTML output.\n crate fn render_with_highlighting(\n     src: &str,\n@@ -40,6 +45,7 @@ crate fn render_with_highlighting(\n     edition: Edition,\n     extra_content: Option<Buffer>,\n     context_info: Option<ContextInfo<'_, '_, '_>>,\n+    decoration_info: Option<DecorationInfo>,\n ) {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     if let Some((edition_info, class)) = tooltip {\n@@ -56,7 +62,7 @@ crate fn render_with_highlighting(\n     }\n \n     write_header(out, class, extra_content);\n-    write_code(out, &src, edition, context_info);\n+    write_code(out, &src, edition, context_info, decoration_info);\n     write_footer(out, playground_button);\n }\n \n@@ -89,17 +95,23 @@ fn write_code(\n     src: &str,\n     edition: Edition,\n     context_info: Option<ContextInfo<'_, '_, '_>>,\n+    decoration_info: Option<DecorationInfo>,\n ) {\n     // This replace allows to fix how the code source with DOS backline characters is displayed.\n     let src = src.replace(\"\\r\\n\", \"\\n\");\n-    Classifier::new(&src, edition, context_info.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP))\n-        .highlight(&mut |highlight| {\n-            match highlight {\n-                Highlight::Token { text, class } => string(out, Escape(text), class, &context_info),\n-                Highlight::EnterSpan { class } => enter_span(out, class),\n-                Highlight::ExitSpan => exit_span(out),\n-            };\n-        });\n+    Classifier::new(\n+        &src,\n+        edition,\n+        context_info.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n+        decoration_info,\n+    )\n+    .highlight(&mut |highlight| {\n+        match highlight {\n+            Highlight::Token { text, class } => string(out, Escape(text), class, &context_info),\n+            Highlight::EnterSpan { class } => enter_span(out, class),\n+            Highlight::ExitSpan => exit_span(out),\n+        };\n+    });\n }\n \n fn write_footer(out: &mut Buffer, playground_button: Option<&str>) {\n@@ -127,6 +139,7 @@ enum Class {\n     PreludeTy,\n     PreludeVal,\n     QuestionMark,\n+    Decoration(&'static str),\n }\n \n impl Class {\n@@ -150,6 +163,7 @@ impl Class {\n             Class::PreludeTy => \"prelude-ty\",\n             Class::PreludeVal => \"prelude-val\",\n             Class::QuestionMark => \"question-mark\",\n+            Class::Decoration(kind) => kind,\n         }\n     }\n \n@@ -248,6 +262,24 @@ impl Iterator for PeekIter<'a> {\n     }\n }\n \n+/// Custom spans inserted into the source. Eg --scrape-examples uses this to highlight function calls\n+struct Decorations {\n+    starts: Vec<(u32, &'static str)>,\n+    ends: Vec<u32>,\n+}\n+\n+impl Decorations {\n+    fn new(info: DecorationInfo) -> Self {\n+        let (starts, ends) = info\n+            .0\n+            .into_iter()\n+            .map(|(kind, ranges)| ranges.into_iter().map(move |(lo, hi)| ((lo, kind), hi)))\n+            .flatten()\n+            .unzip();\n+        Decorations { starts, ends }\n+    }\n+}\n+\n /// Processes program tokens, classifying strings of text by highlighting\n /// category (`Class`).\n struct Classifier<'a> {\n@@ -259,13 +291,20 @@ struct Classifier<'a> {\n     byte_pos: u32,\n     file_span: Span,\n     src: &'a str,\n+    decorations: Option<Decorations>,\n }\n \n impl<'a> Classifier<'a> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n     /// file span which will be used later on by the `span_correspondance_map`.\n-    fn new(src: &str, edition: Edition, file_span: Span) -> Classifier<'_> {\n+    fn new(\n+        src: &str,\n+        edition: Edition,\n+        file_span: Span,\n+        decoration_info: Option<DecorationInfo>,\n+    ) -> Classifier<'_> {\n         let tokens = PeekIter::new(TokenIter { src });\n+        let decorations = decoration_info.map(Decorations::new);\n         Classifier {\n             tokens,\n             in_attribute: false,\n@@ -275,6 +314,7 @@ impl<'a> Classifier<'a> {\n             byte_pos: 0,\n             file_span,\n             src,\n+            decorations,\n         }\n     }\n \n@@ -356,6 +396,19 @@ impl<'a> Classifier<'a> {\n     /// token is used.\n     fn highlight(mut self, sink: &mut dyn FnMut(Highlight<'a>)) {\n         loop {\n+            if let Some(decs) = self.decorations.as_mut() {\n+                let byte_pos = self.byte_pos;\n+                let n_starts = decs.starts.iter().filter(|(i, _)| byte_pos >= *i).count();\n+                for (_, kind) in decs.starts.drain(0..n_starts) {\n+                    sink(Highlight::EnterSpan { class: Class::Decoration(kind) });\n+                }\n+\n+                let n_ends = decs.ends.iter().filter(|i| byte_pos >= **i).count();\n+                for _ in decs.ends.drain(0..n_ends) {\n+                    sink(Highlight::ExitSpan);\n+                }\n+            }\n+\n             if self\n                 .tokens\n                 .peek()\n@@ -657,7 +710,7 @@ fn string<T: Display>(\n                 // https://github.com/rust-lang/rust/blob/60f1a2fc4b535ead9c85ce085fdce49b1b097531/src/librustdoc/html/render/context.rs#L315-L338\n                 match href {\n                     LinkFromSrc::Local(span) => context\n-                        .href_from_span(*span)\n+                        .href_from_span(*span, true)\n                         .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n                     LinkFromSrc::External(def_id) => {\n                         format::href_with_root_path(*def_id, context, Some(context_info.root_path))"}, {"sha": "45f567880c9d9af7efa06de44e76901cdea480ed", "filename": "src/librustdoc/html/highlight/fixtures/decorations.html", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,2 @@\n+<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"number\">1</span>;</span>\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"number\">2</span>;\n\\ No newline at end of file"}, {"sha": "1fea7e983b4482d4113f6d71b6b1dbde88e35088", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,6 +1,7 @@\n-use super::write_code;\n+use super::{write_code, DecorationInfo};\n use crate::html::format::Buffer;\n use expect_test::expect_file;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::create_default_session_globals_then;\n use rustc_span::edition::Edition;\n \n@@ -22,7 +23,7 @@ fn test_html_highlighting() {\n         let src = include_str!(\"fixtures/sample.rs\");\n         let html = {\n             let mut out = Buffer::new();\n-            write_code(&mut out, src, Edition::Edition2018, None);\n+            write_code(&mut out, src, Edition::Edition2018, None, None);\n             format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n         };\n         expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n@@ -36,7 +37,7 @@ fn test_dos_backline() {\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None);\n+        write_code(&mut html, src, Edition::Edition2018, None, None);\n         expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -50,7 +51,7 @@ let x = super::b::foo;\n let y = Self::whatever;\";\n \n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None);\n+        write_code(&mut html, src, Edition::Edition2018, None, None);\n         expect_file![\"fixtures/highlight.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -60,7 +61,21 @@ fn test_union_highlighting() {\n     create_default_session_globals_then(|| {\n         let src = include_str!(\"fixtures/union.rs\");\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None);\n+        write_code(&mut html, src, Edition::Edition2018, None, None);\n         expect_file![\"fixtures/union.html\"].assert_eq(&html.into_inner());\n     });\n }\n+\n+#[test]\n+fn test_decorations() {\n+    create_default_session_globals_then(|| {\n+        let src = \"let x = 1;\n+let y = 2;\";\n+        let mut decorations = FxHashMap::default();\n+        decorations.insert(\"example\", vec![(0, 10)]);\n+\n+        let mut html = Buffer::new();\n+        write_code(&mut html, src, Edition::Edition2018, None, Some(DecorationInfo(decorations)));\n+        expect_file![\"fixtures/decorations.html\"].assert_eq(&html.into_inner());\n+    });\n+}"}, {"sha": "bd06f88cb3587def54ae87baace749e5549c5330", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -22,6 +22,8 @@ crate struct Layout {\n     /// If false, the `select` element to have search filtering by crates on rendered docs\n     /// won't be generated.\n     crate generate_search_filter: bool,\n+    /// If true, then scrape-examples.js will be included in the output HTML file\n+    crate scrape_examples_extension: bool,\n }\n \n #[derive(Serialize)]"}, {"sha": "bda0f0aa3f13efb139f577ca25af474cc0581f62", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -360,6 +360,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             edition,\n             None,\n             None,\n+            None,\n         );\n         Some(Event::Html(s.into_inner().into()))\n     }"}, {"sha": "d7ef8513d6a8958eaa80ffcc37cee25975eec5d6", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -34,6 +34,7 @@ use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n use crate::html::{layout, sources};\n+use crate::scrape_examples::AllCallLocations;\n \n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n@@ -123,6 +124,8 @@ crate struct SharedContext<'tcx> {\n     crate span_correspondance_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n     /// The [`Cache`] used during rendering.\n     crate cache: Cache,\n+\n+    crate call_locations: AllCallLocations,\n }\n \n impl SharedContext<'_> {\n@@ -291,10 +294,10 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        self.href_from_span(item.span(self.tcx()))\n+        self.href_from_span(item.span(self.tcx()), true)\n     }\n \n-    crate fn href_from_span(&self, span: clean::Span) -> Option<String> {\n+    crate fn href_from_span(&self, span: clean::Span, with_lines: bool) -> Option<String> {\n         if span.is_dummy() {\n             return None;\n         }\n@@ -341,16 +344,26 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = span.lo(self.sess()).line;\n-        let hiline = span.hi(self.sess()).line;\n-        let lines =\n-            if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n+        let anchor = if with_lines {\n+            let loline = span.lo(self.sess()).line;\n+            let hiline = span.hi(self.sess()).line;\n+            format!(\n+                \"#{}\",\n+                if loline == hiline {\n+                    loline.to_string()\n+                } else {\n+                    format!(\"{}-{}\", loline, hiline)\n+                }\n+            )\n+        } else {\n+            \"\".to_string()\n+        };\n         Some(format!(\n-            \"{root}src/{krate}/{path}#{lines}\",\n+            \"{root}src/{krate}/{path}{anchor}\",\n             root = Escape(&root),\n             krate = krate,\n             path = path,\n-            lines = lines\n+            anchor = anchor\n         ))\n     }\n }\n@@ -388,6 +401,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             generate_redirect_map,\n             show_type_layout,\n             generate_link_to_definition,\n+            call_locations,\n             ..\n         } = options;\n \n@@ -412,6 +426,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             krate: krate.name.to_string(),\n             css_file_extension: extension_css,\n             generate_search_filter,\n+            scrape_examples_extension: !call_locations.is_empty(),\n         };\n         let mut issue_tracker_base_url = None;\n         let mut include_sources = true;\n@@ -474,6 +489,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             templates,\n             span_correspondance_map: matches,\n             cache,\n+            call_locations,\n         };\n \n         // Add the default themes to the `Vec` of stylepaths"}, {"sha": "bd6cb9c2988429319786a0d73f34161dddd3be9b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 236, "deletions": 2, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -40,20 +40,25 @@ crate use span_map::{collect_spans_and_sources, LinkFromSrc};\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt;\n+use std::fs;\n+use std::iter::Peekable;\n use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n \n use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{\n+    symbol::{kw, sym, Symbol},\n+    BytePos, FileName, RealFileName,\n+};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n@@ -68,7 +73,10 @@ use crate::html::format::{\n     href, print_abi_with_space, print_constness_with_space, print_default_space,\n     print_generic_bounds, print_where_clause, Buffer, HrefError, PrintWithSpace,\n };\n+use crate::html::highlight;\n use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::sources;\n+use crate::scrape_examples::CallData;\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -585,6 +593,14 @@ fn document_full_inner(\n             render_markdown(w, cx, &s, item.links(cx), heading_offset);\n         }\n     }\n+\n+    let kind = match &*item.kind {\n+        clean::ItemKind::StrippedItem(box kind) | kind => kind,\n+    };\n+\n+    if let clean::ItemKind::FunctionItem(..) | clean::ItemKind::MethodItem(..) = kind {\n+        render_call_locations(w, cx, item);\n+    }\n }\n \n /// Add extra information about an item such as:\n@@ -2490,3 +2506,221 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n     }\n     out\n }\n+\n+const MAX_FULL_EXAMPLES: usize = 5;\n+const NUM_VISIBLE_LINES: usize = 10;\n+\n+/// Generates the HTML for example call locations generated via the --scrape-examples flag.\n+fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n+    let tcx = cx.tcx();\n+    let def_id = item.def_id.expect_def_id();\n+    let key = tcx.def_path_hash(def_id);\n+    let call_locations = match cx.shared.call_locations.get(&key) {\n+        Some(call_locations) => call_locations,\n+        _ => {\n+            return;\n+        }\n+    };\n+\n+    // Generate a unique ID so users can link to this section for a given method\n+    let id = cx.id_map.borrow_mut().derive(\"scraped-examples\");\n+    write!(\n+        w,\n+        \"<div class=\\\"docblock scraped-example-list\\\">\\\n+          <span></span>\\\n+          <h5 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n+             <a href=\\\"#{id}\\\">Examples found in repository</a>\\\n+          </h5>\",\n+        id = id\n+    );\n+\n+    // Generate the HTML for a single example, being the title and code block\n+    let write_example = |w: &mut Buffer, (path, call_data): (&PathBuf, &CallData)| -> bool {\n+        let contents = match fs::read_to_string(&path) {\n+            Ok(contents) => contents,\n+            Err(err) => {\n+                let span = item.span(tcx).inner();\n+                tcx.sess\n+                    .span_err(span, &format!(\"failed to read file {}: {}\", path.display(), err));\n+                return false;\n+            }\n+        };\n+\n+        // To reduce file sizes, we only want to embed the source code needed to understand the example, not\n+        // the entire file. So we find the smallest byte range that covers all items enclosing examples.\n+        assert!(!call_data.locations.is_empty());\n+        let min_loc =\n+            call_data.locations.iter().min_by_key(|loc| loc.enclosing_item.byte_span.0).unwrap();\n+        let byte_min = min_loc.enclosing_item.byte_span.0;\n+        let line_min = min_loc.enclosing_item.line_span.0;\n+        let max_loc =\n+            call_data.locations.iter().max_by_key(|loc| loc.enclosing_item.byte_span.1).unwrap();\n+        let byte_max = max_loc.enclosing_item.byte_span.1;\n+        let line_max = max_loc.enclosing_item.line_span.1;\n+\n+        // The output code is limited to that byte range.\n+        let contents_subset = &contents[(byte_min as usize)..(byte_max as usize)];\n+\n+        // The call locations need to be updated to reflect that the size of the program has changed.\n+        // Specifically, the ranges are all subtracted by `byte_min` since that's the new zero point.\n+        let (mut byte_ranges, line_ranges): (Vec<_>, Vec<_>) = call_data\n+            .locations\n+            .iter()\n+            .map(|loc| {\n+                let (byte_lo, byte_hi) = loc.call_expr.byte_span;\n+                let (line_lo, line_hi) = loc.call_expr.line_span;\n+                let byte_range = (byte_lo - byte_min, byte_hi - byte_min);\n+                let line_range = (line_lo - line_min, line_hi - line_min);\n+                let (anchor, line_title) = if line_lo == line_hi {\n+                    (format!(\"{}\", line_lo + 1), format!(\"line {}\", line_lo + 1))\n+                } else {\n+                    (\n+                        format!(\"{}-{}\", line_lo + 1, line_hi + 1),\n+                        format!(\"lines {}-{}\", line_lo + 1, line_hi + 1),\n+                    )\n+                };\n+                let line_url = format!(\"{}{}#{}\", cx.root_path(), call_data.url, anchor);\n+\n+                (byte_range, (line_range, line_url, line_title))\n+            })\n+            .unzip();\n+\n+        let (_, init_url, init_title) = &line_ranges[0];\n+        let needs_expansion = line_max - line_min > NUM_VISIBLE_LINES;\n+        let locations_encoded = serde_json::to_string(&line_ranges).unwrap();\n+\n+        write!(\n+            w,\n+            \"<div class=\\\"scraped-example {expanded_cls}\\\" data-locs=\\\"{locations}\\\">\\\n+                <div class=\\\"scraped-example-title\\\">\\\n+                   {name} (<a href=\\\"{url}\\\">{title}</a>)\\\n+                </div>\\\n+                <div class=\\\"code-wrapper\\\">\",\n+            expanded_cls = if needs_expansion { \"\" } else { \"expanded\" },\n+            name = call_data.display_name,\n+            url = init_url,\n+            title = init_title,\n+            // The locations are encoded as a data attribute, so they can be read\n+            // later by the JS for interactions.\n+            locations = Escape(&locations_encoded)\n+        );\n+\n+        if line_ranges.len() > 1 {\n+            write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n+        }\n+\n+        if needs_expansion {\n+            write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n+        }\n+\n+        // Look for the example file in the source map if it exists, otherwise return a dummy span\n+        let file_span = (|| {\n+            let source_map = tcx.sess.source_map();\n+            let crate_src = tcx.sess.local_crate_source_file.as_ref()?;\n+            let abs_crate_src = crate_src.canonicalize().ok()?;\n+            let crate_root = abs_crate_src.parent()?.parent()?;\n+            let rel_path = path.strip_prefix(crate_root).ok()?;\n+            let files = source_map.files();\n+            let file = files.iter().find(|file| match &file.name {\n+                FileName::Real(RealFileName::LocalPath(other_path)) => rel_path == other_path,\n+                _ => false,\n+            })?;\n+            Some(rustc_span::Span::with_root_ctxt(\n+                file.start_pos + BytePos(byte_min),\n+                file.start_pos + BytePos(byte_max),\n+            ))\n+        })()\n+        .unwrap_or(rustc_span::DUMMY_SP);\n+\n+        // The root path is the inverse of Context::current\n+        let root_path = vec![\"../\"; cx.current.len() - 1].join(\"\");\n+\n+        let mut decoration_info = FxHashMap::default();\n+        decoration_info.insert(\"highlight focus\", vec![byte_ranges.remove(0)]);\n+        decoration_info.insert(\"highlight\", byte_ranges);\n+\n+        sources::print_src(\n+            w,\n+            contents_subset,\n+            call_data.edition,\n+            file_span,\n+            cx,\n+            &root_path,\n+            Some(highlight::DecorationInfo(decoration_info)),\n+            sources::SourceContext::Embedded { offset: line_min },\n+        );\n+        write!(w, \"</div></div>\");\n+\n+        true\n+    };\n+\n+    // The call locations are output in sequence, so that sequence needs to be determined.\n+    // Ideally the most \"relevant\" examples would be shown first, but there's no general algorithm\n+    // for determining relevance. Instead, we prefer the smallest examples being likely the easiest to\n+    // understand at a glance.\n+    let ordered_locations = {\n+        let sort_criterion = |(_, call_data): &(_, &CallData)| {\n+            // Use the first location because that's what the user will see initially\n+            let (lo, hi) = call_data.locations[0].enclosing_item.byte_span;\n+            hi - lo\n+        };\n+\n+        let mut locs = call_locations.into_iter().collect::<Vec<_>>();\n+        locs.sort_by_key(sort_criterion);\n+        locs\n+    };\n+\n+    let mut it = ordered_locations.into_iter().peekable();\n+\n+    // An example may fail to write if its source can't be read for some reason, so this method\n+    // continues iterating until a write suceeds\n+    let write_and_skip_failure = |w: &mut Buffer, it: &mut Peekable<_>| {\n+        while let Some(example) = it.next() {\n+            if write_example(&mut *w, example) {\n+                break;\n+            }\n+        }\n+    };\n+\n+    // Write just one example that's visible by default in the method's description.\n+    write_and_skip_failure(w, &mut it);\n+\n+    // Then add the remaining examples in a hidden section.\n+    if it.peek().is_some() {\n+        write!(\n+            w,\n+            \"<details class=\\\"rustdoc-toggle more-examples-toggle\\\">\\\n+                  <summary class=\\\"hideme\\\">\\\n+                     <span>More examples</span>\\\n+                  </summary>\\\n+                  <div class=\\\"more-scraped-examples\\\">\\\n+                    <div class=\\\"toggle-line\\\"><div class=\\\"toggle-line-inner\\\"></div></div>\\\n+                    <div class=\\\"more-scraped-examples-inner\\\">\"\n+        );\n+\n+        // Only generate inline code for MAX_FULL_EXAMPLES number of examples. Otherwise we could\n+        // make the page arbitrarily huge!\n+        for _ in 0..MAX_FULL_EXAMPLES {\n+            write_and_skip_failure(w, &mut it);\n+        }\n+\n+        // For the remaining examples, generate a <ul> containing links to the source files.\n+        if it.peek().is_some() {\n+            write!(w, r#\"<div class=\"example-links\">Additional examples can be found in:<br><ul>\"#);\n+            it.for_each(|(_, call_data)| {\n+                write!(\n+                    w,\n+                    r#\"<li><a href=\"{root}{url}\">{name}</a></li>\"#,\n+                    root = cx.root_path(),\n+                    url = call_data.url,\n+                    name = call_data.display_name\n+                );\n+            });\n+            write!(w, \"</ul></div>\");\n+        }\n+\n+        write!(w, \"</div></div></details>\");\n+    }\n+\n+    write!(w, \"</div>\");\n+}"}, {"sha": "f4528369622271b9acebe0d5a90dde6259ddccc6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1159,6 +1159,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             it.span(cx.tcx()).inner().edition(),\n             None,\n             None,\n+            None,\n         );\n     });\n     document(w, cx, it, None, HeadingOffset::H2)"}, {"sha": "31aaf46d7d595aadb32a6fefcc74343a8e3db597", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -304,6 +304,15 @@ pub(super) fn write_shared(\n         )?;\n     }\n \n+    if cx.shared.layout.scrape_examples_extension {\n+        cx.write_minify(\n+            SharedResource::InvocationSpecific { basename: \"scrape-examples.js\" },\n+            static_files::SCRAPE_EXAMPLES_JS,\n+            options.enable_minification,\n+            &options.emit,\n+        )?;\n+    }\n+\n     if let Some(ref css) = cx.shared.layout.css_file_extension {\n         let buffer = try_err!(fs::read_to_string(css), css);\n         // This varies based on the invocation, so it can't go through the write_minify wrapper."}, {"sha": "ffefc5450cd730c594393dc3d050089e73084861", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -204,7 +204,16 @@ impl SourceCollector<'_, 'tcx> {\n             &page,\n             \"\",\n             |buf: &mut _| {\n-                print_src(buf, contents, self.cx.shared.edition(), file_span, &self.cx, &root_path)\n+                print_src(\n+                    buf,\n+                    contents,\n+                    self.cx.shared.edition(),\n+                    file_span,\n+                    &self.cx,\n+                    &root_path,\n+                    None,\n+                    SourceContext::Standalone,\n+                )\n             },\n             &self.cx.shared.style_files,\n         );\n@@ -241,15 +250,22 @@ where\n     }\n }\n \n+crate enum SourceContext {\n+    Standalone,\n+    Embedded { offset: usize },\n+}\n+\n /// Wrapper struct to render the source code of a file. This will do things like\n /// adding line numbers to the left-hand side.\n-fn print_src(\n+crate fn print_src(\n     buf: &mut Buffer,\n     s: &str,\n     edition: Edition,\n     file_span: rustc_span::Span,\n     context: &Context<'_>,\n     root_path: &str,\n+    decoration_info: Option<highlight::DecorationInfo>,\n+    source_context: SourceContext,\n ) {\n     let lines = s.lines().count();\n     let mut line_numbers = Buffer::empty_from(buf);\n@@ -261,7 +277,14 @@ fn print_src(\n     }\n     line_numbers.write_str(\"<pre class=\\\"line-numbers\\\">\");\n     for i in 1..=lines {\n-        writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols);\n+        match source_context {\n+            SourceContext::Standalone => {\n+                writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols)\n+            }\n+            SourceContext::Embedded { offset } => {\n+                writeln!(line_numbers, \"<span>{0:1$}</span>\", i + offset, cols)\n+            }\n+        }\n     }\n     line_numbers.write_str(\"</pre>\");\n     highlight::render_with_highlighting(\n@@ -273,5 +296,6 @@ fn print_src(\n         edition,\n         Some(line_numbers),\n         Some(highlight::ContextInfo { context, file_span, root_path }),\n+        decoration_info,\n     );\n }"}, {"sha": "8139f115cbb392abfb75ac1f4298ac94a89efbd9", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -467,6 +467,11 @@ nav.sub {\n \toverflow-x: auto;\n }\n \n+.rustdoc:not(.source) .example-wrap > pre.line-numbers {\n+\twidth: auto;\n+\toverflow-x: visible;\n+}\n+\n .rustdoc .example-wrap > pre {\n \tmargin: 0;\n }\n@@ -1980,3 +1985,166 @@ details.undocumented[open] > summary::before {\n \t\toverflow-wrap: anywhere;\n \t}\n }\n+\n+\n+/* Begin: styles for --scrape-examples feature */\n+\n+.scraped-example-title {\n+\tfont-family: 'Fira Sans';\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n+\toverflow: hidden;\n+\tmax-height: 240px;\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+\toverflow-y: hidden;\n+\tmax-height: 240px;\n+\tpadding-bottom: 0;\n+}\n+\n+.scraped-example .code-wrapper .prev {\n+\tposition: absolute;\n+\ttop: 0.25em;\n+\tright: 2.25em;\n+\tz-index: 100;\n+\tcursor: pointer;\n+}\n+\n+.scraped-example .code-wrapper .next {\n+\tposition: absolute;\n+\ttop: 0.25em;\n+\tright: 1.25em;\n+\tz-index: 100;\n+\tcursor: pointer;\n+}\n+\n+.scraped-example .code-wrapper .expand {\n+\tposition: absolute;\n+\ttop: 0.25em;\n+\tright: 0.25em;\n+\tz-index: 100;\n+\tcursor: pointer;\n+}\n+\n+.scraped-example .code-wrapper {\n+\tposition: relative;\n+\tdisplay: flex;\n+\tflex-direction: row;\n+\tflex-wrap: wrap;\n+\twidth: 100%;\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper:before {\n+\tcontent: \" \";\n+\twidth: 100%;\n+\theight: 5px;\n+\tposition: absolute;\n+\tz-index: 100;\n+\ttop: 0;\n+\tbackground: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper:after {\n+\tcontent: \" \";\n+\twidth: 100%;\n+\theight: 5px;\n+\tposition: absolute;\n+\tz-index: 100;\n+\tbottom: 0;\n+\tbackground: linear-gradient(to top, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n+}\n+\n+.scraped-example:not(.expanded) .code-wrapper {\n+\toverflow: hidden;\n+\tmax-height: 240px;\n+}\n+\n+.scraped-example .code-wrapper .line-numbers {\n+\tmargin: 0;\n+\tpadding: 14px 0;\n+}\n+\n+.scraped-example .code-wrapper .line-numbers span {\n+\tpadding: 0 14px;\n+}\n+\n+.scraped-example .code-wrapper .example-wrap {\n+\tflex: 1;\n+\toverflow-x: auto;\n+\toverflow-y: hidden;\n+\tmargin-bottom: 0;\n+}\n+\n+.scraped-example .code-wrapper .example-wrap pre.rust {\n+\toverflow-x: inherit;\n+\twidth: inherit;\n+\toverflow-y: hidden;\n+}\n+\n+.scraped-example .example-wrap .rust span.highlight {\n+\tbackground: #fcffd6;\n+}\n+\n+.scraped-example .example-wrap .rust span.highlight.focus {\n+\tbackground: #f6fdb0;\n+}\n+\n+.more-examples-toggle {\n+\tmargin-top: 10px;\n+}\n+\n+.more-examples-toggle summary {\n+\tcolor: #999;\n+\tfont-family: 'Fira Sans';\n+}\n+\n+.more-scraped-examples {\n+\tmargin-left: 25px;\n+\tdisplay: flex;\n+\tflex-direction: row;\n+\twidth: calc(100% - 25px);\n+}\n+\n+.more-scraped-examples-inner {\n+\t/* 20px is width of toggle-line + toggle-line-inner */\n+\twidth: calc(100% - 20px);\n+}\n+\n+.toggle-line {\n+\talign-self: stretch;\n+\tmargin-right: 10px;\n+\tmargin-top: 5px;\n+\tpadding: 0 4px;\n+\tcursor: pointer;\n+}\n+\n+.toggle-line:hover .toggle-line-inner {\n+\tbackground: #aaa;\n+}\n+\n+.toggle-line-inner {\n+\tmin-width: 2px;\n+\tbackground: #ddd;\n+\theight: 100%;\n+}\n+\n+.more-scraped-examples .scraped-example {\n+\tmargin-bottom: 20px;\n+}\n+\n+.more-scraped-examples .scraped-example:last-child {\n+\tmargin-bottom: 0;\n+}\n+\n+.example-links a {\n+\tmargin-top: 20px;\n+\tfont-family: 'Fira Sans';\n+}\n+\n+.example-links ul {\n+\tmargin-bottom: 0;\n+}\n+\n+/* End: styles for --scrape-examples feature */"}, {"sha": "f9c84dc3e318dc9e5023131c8c76e39143eb65b3", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -613,3 +613,22 @@ div.files > .selected {\n input:checked + .slider {\n \tbackground-color: #ffb454 !important;\n }\n+\n+.scraped-example .example-wrap .rust span.highlight {\n+\tbackground: rgb(91, 59, 1);\n+}\n+.scraped-example .example-wrap .rust span.highlight.focus {\n+\tbackground: rgb(124, 75, 15);\n+}\n+.scraped-example:not(.expanded) .code-wrapper:before {\n+\tbackground: linear-gradient(to bottom, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n+}\n+.scraped-example:not(.expanded) .code-wrapper:after {\n+\tbackground: linear-gradient(to top, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n+}\n+.toggle-line-inner {\n+\tbackground: #616161;\n+}\n+.toggle-line:hover .toggle-line-inner {\n+\tbackground: ##898989;\n+}"}, {"sha": "9a38277d55905ca7a56e8b79b4d134c0059da7a8", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -485,3 +485,22 @@ div.files > .selected {\n .setting-line > .title {\n \tborder-bottom-color: #ddd;\n }\n+\n+.scraped-example .example-wrap .rust span.highlight {\n+\tbackground: rgb(91, 59, 1);\n+}\n+.scraped-example .example-wrap .rust span.highlight.focus {\n+\tbackground: rgb(124, 75, 15);\n+}\n+.scraped-example:not(.expanded) .code-wrapper:before {\n+\tbackground: linear-gradient(to bottom, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n+}\n+.scraped-example:not(.expanded) .code-wrapper:after {\n+\tbackground: linear-gradient(to top, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n+}\n+.toggle-line-inner {\n+\tbackground: #616161;\n+}\n+.toggle-line:hover .toggle-line-inner {\n+\tbackground: ##898989;\n+}"}, {"sha": "664b187e33e9f4d700e0f329bbf0394c608e57e8", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,86 @@\n+/* global addClass, hasClass, removeClass, onEach */\n+\n+(function () {\n+    // Scroll code block to put the given code location in the middle of the viewer\n+    function scrollToLoc(elt, loc) {\n+        var wrapper = elt.querySelector(\".code-wrapper\");\n+        var halfHeight = wrapper.offsetHeight / 2;\n+        var lines = elt.querySelector('.line-numbers');\n+        var offsetMid = (lines.children[loc[0]].offsetTop\n+                         + lines.children[loc[1]].offsetTop) / 2;\n+        var scrollOffset = offsetMid - halfHeight;\n+        lines.scrollTo(0, scrollOffset);\n+        elt.querySelector(\".rust\").scrollTo(0, scrollOffset);\n+    }\n+\n+    function updateScrapedExample(example) {\n+        var locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n+        var locIndex = 0;\n+        var highlights = example.querySelectorAll('.highlight');\n+        var link = example.querySelector('.scraped-example-title a');\n+\n+        if (locs.length > 1) {\n+            // Toggle through list of examples in a given file\n+            var onChangeLoc = function(changeIndex) {\n+                removeClass(highlights[locIndex], 'focus');\n+                changeIndex();\n+                scrollToLoc(example, locs[locIndex][0]);\n+                addClass(highlights[locIndex], 'focus');\n+\n+                var url = locs[locIndex][1];\n+                var title = locs[locIndex][2];\n+\n+                link.href = url;\n+                link.innerHTML = title;\n+            };\n+\n+            example.querySelector('.prev')\n+                .addEventListener('click', function() {\n+                    onChangeLoc(function() {\n+                        locIndex = (locIndex - 1 + locs.length) % locs.length;\n+                    });\n+                });\n+\n+            example.querySelector('.next')\n+                .addEventListener('click', function() {\n+                    onChangeLoc(function() {\n+                        locIndex = (locIndex + 1) % locs.length;\n+                    });\n+                });\n+        }\n+\n+        var expandButton = example.querySelector('.expand');\n+        if (expandButton) {\n+            expandButton.addEventListener('click', function () {\n+                if (hasClass(example, \"expanded\")) {\n+                    removeClass(example, \"expanded\");\n+                    scrollToLoc(example, locs[0][0]);\n+                } else {\n+                    addClass(example, \"expanded\");\n+                }\n+            });\n+        }\n+\n+        // Start with the first example in view\n+        scrollToLoc(example, locs[0][0]);\n+    }\n+\n+    var firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');\n+    onEach(firstExamples, updateScrapedExample);\n+    onEach(document.querySelectorAll('.more-examples-toggle'), function(toggle) {\n+        // Allow users to click the left border of the <details> section to close it,\n+        // since the section can be large and finding the [+] button is annoying.\n+        toggle.querySelector('.toggle-line').addEventListener('click', function() {\n+            toggle.open = false;\n+        });\n+\n+        var moreExamples = toggle.querySelectorAll('.scraped-example');\n+        toggle.querySelector('summary').addEventListener('click', function() {\n+            // Wrapping in setTimeout ensures the update happens after the elements are actually\n+            // visible. This is necessary since updateScrapedExample calls scrollToLoc which\n+            // depends on offsetHeight, a property that requires an element to be visible to\n+            // compute correctly.\n+            setTimeout(function() { onEach(moreExamples, updateScrapedExample); });\n+        }, {once: true});\n+    });\n+})();"}, {"sha": "9029933ad100ed67a6686327356a34edc8ebc124", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -35,6 +35,10 @@ crate static SETTINGS_JS: &str = include_str!(\"static/js/settings.js\");\n /// Storage, used to store documentation settings.\n crate static STORAGE_JS: &str = include_str!(\"static/js/storage.js\");\n \n+/// The file contents of `scraped-examples.js`, which contains functionality related to the\n+/// --scrape-examples flag that inserts automatically-found examples of usages of items.\n+crate static SCRAPE_EXAMPLES_JS: &str = include_str!(\"static/js/scrape-examples.js\");\n+\n /// The file contents of `brush.svg`, the icon used for the theme-switch button.\n crate static BRUSH_SVG: &[u8] = include_bytes!(\"static/images/brush.svg\");\n "}, {"sha": "b0174d59a7be21463e999fccd92f968c8a9c066d", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -109,6 +109,9 @@\n          data-search-js=\"{{static_root_path | safe}}search{{page.resource_suffix}}.js\"> {#- -#}\n     </div>\n     <script src=\"{{static_root_path | safe}}main{{page.resource_suffix}}.js\"></script> {#- -#}\n+    {%- if layout.scrape_examples_extension -%}\n+    <script src=\"{{static_root_path | safe}}scrape-examples{{page.resource_suffix}}.js\"></script> {#- -#}\n+    {%- endif -%}\n     {%- for script in page.static_extra_scripts -%}\n     <script src=\"{{static_root_path | safe}}{{script}}.js\"></script> {#- -#}\n     {% endfor %}"}, {"sha": "17e00e4b66271a181233ba78867bb8531c4db50a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -48,11 +48,13 @@ extern crate rustc_interface;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_lint_defs;\n+extern crate rustc_macros;\n extern crate rustc_metadata;\n extern crate rustc_middle;\n extern crate rustc_parse;\n extern crate rustc_passes;\n extern crate rustc_resolve;\n+extern crate rustc_serialize;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n@@ -120,6 +122,7 @@ mod json;\n crate mod lint;\n mod markdown;\n mod passes;\n+mod scrape_examples;\n mod theme;\n mod visit_ast;\n mod visit_lib;\n@@ -619,6 +622,30 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"Make the identifiers in the HTML source code pages navigable\",\n             )\n         }),\n+        unstable(\"scrape-examples-output-path\", |o| {\n+            o.optopt(\n+                \"\",\n+                \"scrape-examples-output-path\",\n+                \"\",\n+                \"collect function call information and output at the given path\",\n+            )\n+        }),\n+        unstable(\"scrape-examples-target-crate\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"scrape-examples-target-crate\",\n+                \"\",\n+                \"collect function call information for functions from the target crate\",\n+            )\n+        }),\n+        unstable(\"with-examples\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"with-examples\",\n+                \"\",\n+                \"path to function call information (for displaying examples in the documentation)\",\n+            )\n+        }),\n     ]\n }\n \n@@ -732,6 +759,7 @@ fn main_options(options: config::Options) -> MainResult {\n     // FIXME: fix this clone (especially render_options)\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n+    let scrape_examples_options = options.scrape_examples_options.clone();\n     let config = core::create_config(options);\n \n     interface::create_compiler_and_run(config, |compiler| {\n@@ -768,6 +796,10 @@ fn main_options(options: config::Options) -> MainResult {\n                 });\n                 info!(\"finished with rustc\");\n \n+                if let Some(options) = scrape_examples_options {\n+                    return scrape_examples::run(krate, render_opts, cache, tcx, options);\n+                }\n+\n                 cache.crate_version = crate_version;\n \n                 if show_coverage {"}, {"sha": "fc54e55b87655e5cf7baa10961086ce07498532d", "filename": "src/librustdoc/scrape_examples.rs", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,266 @@\n+//! This module analyzes crates to find call sites that can serve as examples in the documentation.\n+\n+use crate::clean;\n+use crate::config;\n+use crate::formats;\n+use crate::formats::renderer::FormatRenderer;\n+use crate::html::render::Context;\n+\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::{\n+    self as hir,\n+    intravisit::{self, Visitor},\n+    HirId,\n+};\n+use rustc_interface::interface;\n+use rustc_macros::{Decodable, Encodable};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_serialize::{\n+    opaque::{Decoder, FileEncoder},\n+    Decodable, Encodable,\n+};\n+use rustc_session::getopts;\n+use rustc_span::{\n+    def_id::{CrateNum, DefPathHash, LOCAL_CRATE},\n+    edition::Edition,\n+    BytePos, FileName, SourceFile,\n+};\n+\n+use std::fs;\n+use std::path::PathBuf;\n+\n+#[derive(Debug, Clone)]\n+crate struct ScrapeExamplesOptions {\n+    output_path: PathBuf,\n+    target_crates: Vec<String>,\n+}\n+\n+impl ScrapeExamplesOptions {\n+    crate fn new(\n+        matches: &getopts::Matches,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<Option<Self>, i32> {\n+        let output_path = matches.opt_str(\"scrape-examples-output-path\");\n+        let target_crates = matches.opt_strs(\"scrape-examples-target-crate\");\n+        match (output_path, !target_crates.is_empty()) {\n+            (Some(output_path), true) => Ok(Some(ScrapeExamplesOptions {\n+                output_path: PathBuf::from(output_path),\n+                target_crates,\n+            })),\n+            (Some(_), false) | (None, true) => {\n+                diag.err(&format!(\"must use --scrape-examples-output-path and --scrape-examples-target-crate together\"));\n+                Err(1)\n+            }\n+            (None, false) => Ok(None),\n+        }\n+    }\n+}\n+\n+#[derive(Encodable, Decodable, Debug, Clone)]\n+crate struct SyntaxRange {\n+    crate byte_span: (u32, u32),\n+    crate line_span: (usize, usize),\n+}\n+\n+impl SyntaxRange {\n+    fn new(span: rustc_span::Span, file: &SourceFile) -> Self {\n+        let get_pos = |bytepos: BytePos| file.original_relative_byte_pos(bytepos).0;\n+        let get_line = |bytepos: BytePos| file.lookup_line(bytepos).unwrap();\n+\n+        SyntaxRange {\n+            byte_span: (get_pos(span.lo()), get_pos(span.hi())),\n+            line_span: (get_line(span.lo()), get_line(span.hi())),\n+        }\n+    }\n+}\n+\n+#[derive(Encodable, Decodable, Debug, Clone)]\n+crate struct CallLocation {\n+    crate call_expr: SyntaxRange,\n+    crate enclosing_item: SyntaxRange,\n+}\n+\n+impl CallLocation {\n+    fn new(\n+        tcx: TyCtxt<'_>,\n+        expr_span: rustc_span::Span,\n+        expr_id: HirId,\n+        source_file: &SourceFile,\n+    ) -> Self {\n+        let enclosing_item_span =\n+            tcx.hir().span_with_body(tcx.hir().get_parent_item(expr_id)).source_callsite();\n+        assert!(enclosing_item_span.contains(expr_span));\n+\n+        CallLocation {\n+            call_expr: SyntaxRange::new(expr_span, source_file),\n+            enclosing_item: SyntaxRange::new(enclosing_item_span, source_file),\n+        }\n+    }\n+}\n+\n+#[derive(Encodable, Decodable, Debug, Clone)]\n+crate struct CallData {\n+    crate locations: Vec<CallLocation>,\n+    crate url: String,\n+    crate display_name: String,\n+    crate edition: Edition,\n+}\n+\n+crate type FnCallLocations = FxHashMap<PathBuf, CallData>;\n+crate type AllCallLocations = FxHashMap<DefPathHash, FnCallLocations>;\n+\n+/// Visitor for traversing a crate and finding instances of function calls.\n+struct FindCalls<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    map: Map<'tcx>,\n+    cx: Context<'tcx>,\n+    target_crates: Vec<CrateNum>,\n+    calls: &'a mut AllCallLocations,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FindCalls<'a, 'tcx>\n+where\n+    'tcx: 'a,\n+{\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::OnlyBodies(self.map)\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n+        intravisit::walk_expr(self, ex);\n+\n+        // Get type of function if expression is a function call\n+        let tcx = self.tcx;\n+        let (ty, span) = match ex.kind {\n+            hir::ExprKind::Call(f, _) => {\n+                let types = tcx.typeck(ex.hir_id.owner);\n+                (types.node_type(f.hir_id), ex.span)\n+            }\n+            hir::ExprKind::MethodCall(_, _, _, span) => {\n+                let types = tcx.typeck(ex.hir_id.owner);\n+                let def_id = types.type_dependent_def_id(ex.hir_id).unwrap();\n+                (tcx.type_of(def_id), span)\n+            }\n+            _ => {\n+                return;\n+            }\n+        };\n+\n+        // If this span comes from a macro expansion, then the source code may not actually show\n+        // a use of the given item, so it would be a poor example. Hence, we skip all uses in macros.\n+        if span.from_expansion() {\n+            return;\n+        }\n+\n+        // Save call site if the function resolves to a concrete definition\n+        if let ty::FnDef(def_id, _) = ty.kind() {\n+            // Ignore functions not from the crate being documented\n+            if self.target_crates.iter().all(|krate| *krate != def_id.krate) {\n+                return;\n+            }\n+\n+            let file = tcx.sess.source_map().lookup_char_pos(span.lo()).file;\n+            let file_path = match file.name.clone() {\n+                FileName::Real(real_filename) => real_filename.into_local_path(),\n+                _ => None,\n+            };\n+\n+            if let Some(file_path) = file_path {\n+                let abs_path = fs::canonicalize(file_path.clone()).unwrap();\n+                let cx = &self.cx;\n+                let mk_call_data = || {\n+                    let clean_span = crate::clean::types::Span::new(span);\n+                    let url = cx.href_from_span(clean_span, false).unwrap();\n+                    let display_name = file_path.display().to_string();\n+                    let edition = span.edition();\n+                    CallData { locations: Vec::new(), url, display_name, edition }\n+                };\n+\n+                let fn_key = tcx.def_path_hash(*def_id);\n+                let fn_entries = self.calls.entry(fn_key).or_default();\n+\n+                let location = CallLocation::new(tcx, span, ex.hir_id, &file);\n+                fn_entries.entry(abs_path).or_insert_with(mk_call_data).locations.push(location);\n+            }\n+        }\n+    }\n+}\n+\n+crate fn run(\n+    krate: clean::Crate,\n+    renderopts: config::RenderOptions,\n+    cache: formats::cache::Cache,\n+    tcx: TyCtxt<'_>,\n+    options: ScrapeExamplesOptions,\n+) -> interface::Result<()> {\n+    let inner = move || -> Result<(), String> {\n+        // Generates source files for examples\n+        let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n+\n+        // Collect CrateIds corresponding to provided target crates\n+        // If two different versions of the crate in the dependency tree, then examples will be collcted from both.\n+        let all_crates = tcx\n+            .crates(())\n+            .iter()\n+            .chain([&LOCAL_CRATE])\n+            .map(|crate_num| (crate_num, tcx.crate_name(*crate_num)))\n+            .collect::<Vec<_>>();\n+        let target_crates = options\n+            .target_crates\n+            .into_iter()\n+            .map(|target| all_crates.iter().filter(move |(_, name)| name.as_str() == target))\n+            .flatten()\n+            .map(|(crate_num, _)| **crate_num)\n+            .collect::<Vec<_>>();\n+\n+        debug!(\"All crates in TyCtxt: {:?}\", all_crates);\n+        debug!(\"Scrape examples target_crates: {:?}\", target_crates);\n+\n+        // Run call-finder on all items\n+        let mut calls = FxHashMap::default();\n+        let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n+        tcx.hir().visit_all_item_likes(&mut finder.as_deep_visitor());\n+\n+        // Save output to provided path\n+        let mut encoder = FileEncoder::new(options.output_path).map_err(|e| e.to_string())?;\n+        calls.encode(&mut encoder).map_err(|e| e.to_string())?;\n+        encoder.flush().map_err(|e| e.to_string())?;\n+\n+        Ok(())\n+    };\n+\n+    if let Err(e) = inner() {\n+        tcx.sess.fatal(&e);\n+    }\n+\n+    Ok(())\n+}\n+\n+// Note: the Handler must be passed in explicitly because sess isn't available while parsing options\n+crate fn load_call_locations(\n+    with_examples: Vec<String>,\n+    diag: &rustc_errors::Handler,\n+) -> Result<AllCallLocations, i32> {\n+    let inner = || {\n+        let mut all_calls: AllCallLocations = FxHashMap::default();\n+        for path in with_examples {\n+            let bytes = fs::read(&path).map_err(|e| format!(\"{} (for path {})\", e, path))?;\n+            let mut decoder = Decoder::new(&bytes, 0);\n+            let calls = AllCallLocations::decode(&mut decoder)?;\n+\n+            for (function, fn_calls) in calls.into_iter() {\n+                all_calls.entry(function).or_default().extend(fn_calls.into_iter());\n+            }\n+        }\n+\n+        Ok(all_calls)\n+    };\n+\n+    inner().map_err(|e: String| {\n+        diag.err(&format!(\"failed to load examples: {}\", e));\n+        1\n+    })\n+}"}, {"sha": "897805e4405b95908f659015acb6b511298c5ca8", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2FMakefile?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,5 @@\n+deps := ex ex2\n+\n+-include ./scrape.mk\n+\n+all: scrape"}, {"sha": "01b730c6149ce87fce8205d04c08fce38f99d209", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/examples/ex.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    foobar::ok();\n+    foobar::ok();\n+}"}, {"sha": "f83cf2f2709146e9cda6969221662c448f4ee03e", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/examples/ex2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fexamples%2Fex2.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    foobar::ok();\n+}"}, {"sha": "1fa1fae1a0b7102b4cd33522a678cf261fbfcf98", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/scrape.mk", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,20 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+$(TMPDIR)/%.calls: $(TMPDIR)/libfoobar.rmeta\n+\t$(RUSTDOC) examples/$*.rs --crate-name $* --crate-type bin --output $(OUTPUT_DIR) \\\n+\t  --extern foobar=$(TMPDIR)/libfoobar.rmeta \\\n+\t\t-Z unstable-options \\\n+\t\t--scrape-examples-output-path $@ \\\n+\t\t--scrape-examples-target-crate foobar\n+\n+$(TMPDIR)/lib%.rmeta: src/lib.rs\n+\t$(RUSTC) src/lib.rs --crate-name $* --crate-type lib --emit=metadata\n+\n+scrape: $(foreach d,$(deps),$(TMPDIR)/$(d).calls)\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --output $(OUTPUT_DIR) \\\n+\t\t-Z unstable-options \\\n+\t\t$(foreach d,$(deps),--with-examples $(TMPDIR)/$(d).calls)\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "bd59584bbbf4fafbb70c7920d901807bb6d6064e", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/src/lib.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,4 @@\n+// @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]//*[@class=\"prev\"]' ''\n+// @has foobar/fn.ok.html '//*[@class=\"more-scraped-examples\"]' ''\n+\n+pub fn ok() {}"}, {"sha": "339d539bfd57de0425a0bd25cc0a3f9b58aa7156", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2FMakefile?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,5 @@\n+deps := ex1 ex2\n+\n+-include ../rustdoc-scrape-examples-multiple/scrape.mk\n+\n+all: scrape"}, {"sha": "d6d5982087658066359803dbda99c85143ec88fe", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/examples/ex1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex1.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    foobar::ok();\n+\n+    // this is a\n+\n+    // BIG\n+\n+    // item\n+}"}, {"sha": "a1133117f861e9cab46ce570c989c199b9a4aa7c", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/examples/ex2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fexamples%2Fex2.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    foobar::ok();\n+    // small item\n+}"}, {"sha": "f1b7686d36800f774dc718d0ff793729bdd60302", "filename": "src/test/run-make/rustdoc-scrape-examples-ordering/src/lib.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-ordering%2Fsrc%2Flib.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,4 @@\n+// @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]' 'ex2'\n+// @has foobar/fn.ok.html '//*[@class=\"more-scraped-examples\"]' 'ex1'\n+\n+pub fn ok() {}"}, {"sha": "dce8b83eefe4efd68139f03ed800a171f42f9303", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,5 @@\n+deps := ex\n+\n+-include ../rustdoc-scrape-examples-multiple/scrape.mk\n+\n+all: scrape"}, {"sha": "1438fdba7072c3bab5fbb2b3370550e4679c0045", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/examples/ex.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    foobar::b::foo();\n+    foobar::c::foo();\n+}"}, {"sha": "b76b4321d62aa8e066b24d213c79ccc8230b8d7b", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/src/a.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1 @@\n+pub fn foo() {}"}, {"sha": "f525a4270dde10fa886a44119c68b08dce10f6bb", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/src/lib.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,8 @@\n+// @has foobar/b/fn.foo.html '//*[@class=\"scraped-example expanded\"]' 'ex.rs'\n+// @has foobar/c/fn.foo.html '//*[@class=\"scraped-example expanded\"]' 'ex.rs'\n+\n+#[path = \"a.rs\"]\n+pub mod b;\n+\n+#[path = \"a.rs\"]\n+pub mod c;"}, {"sha": "a1f005c32ee0fa837ee3d1e64d4f3f832122e785", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-1.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z unstable-options --scrape-examples-target-crate foobar"}, {"sha": "eb8e9f799681fee13b718594e5c336713dbb0fd2", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-1.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-1.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,2 @@\n+error: must use --scrape-examples-output-path and --scrape-examples-target-crate together\n+"}, {"sha": "4aacec7f09493fc8816b01007e2c4c17455f3935", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-2.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z unstable-options --scrape-examples-output-path ex.calls"}, {"sha": "eb8e9f799681fee13b718594e5c336713dbb0fd2", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options-2.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options-2.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,2 @@\n+error: must use --scrape-examples-output-path and --scrape-examples-target-crate together\n+"}, {"sha": "0cf69879a5c20fed0b30ab2f9524eb56a4424acf", "filename": "src/test/ui/const-generics/issues/issue-67375.full.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -8,15 +8,5 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-67375.rs:5:12\n-   |\n-LL | struct Bug<T> {\n-   |            ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0392`."}, {"sha": "8b4b276bae0ba65ed5af74066ed724338da5ba86", "filename": "src/test/ui/const-generics/issues/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -3,7 +3,7 @@\n #![cfg_attr(full, feature(generic_const_exprs))]\n \n struct Bug<T> {\n-    //~^ ERROR parameter `T` is never used\n+    //[min]~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n     //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR overly complex generic constant"}, {"sha": "8e18fcdffab7063dea9fd34e6262d89d8e2b356d", "filename": "src/test/ui/const-generics/issues/issue-67945-1.full.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -12,16 +12,6 @@ LL |         let x: S = MaybeUninit::uninit();\n    = note: expected type parameter `S`\n                        found union `MaybeUninit<_>`\n \n-error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-1.rs:7:12\n-   |\n-LL | struct Bug<S> {\n-   |            ^ unused parameter\n-   |\n-   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0392.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "99f88bc8e1055a75d4cffab97501ca664b21a098", "filename": "src/test/ui/const-generics/issues/issue-67945-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -5,7 +5,7 @@\n use std::mem::MaybeUninit;\n \n struct Bug<S> {\n-    //~^ ERROR parameter `S` is never used\n+    //[min]~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n         //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "52ef685e8f4f838bed471d66172245a243d407cc", "filename": "src/test/ui/consts/promoted-storage.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-storage.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,20 @@\n+// Check that storage statements reset local qualification.\n+// check-pass\n+use std::cell::Cell;\n+\n+const C: Option<Cell<u32>> = {\n+    let mut c = None;\n+    let mut i = 0;\n+    while i == 0 {\n+        let mut x = None;\n+        c = x;\n+        x = Some(Cell::new(0));\n+        let _ = x;\n+        i += 1;\n+    }\n+    c\n+};\n+\n+fn main() {\n+    let _: &'static _ = &C;\n+}"}, {"sha": "471f317edf96479f64ac9bbc3beadf5d934aaf71", "filename": "src/test/ui/proc-macro/generate-mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -13,15 +13,15 @@ generate_mod::check!(); //~ ERROR cannot find type `FromOutside` in this scope\n                             //~| ERROR cannot find type `OuterAttr` in this scope\n struct S;\n \n-#[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n-                                     //~| WARN cannot find type `OuterDerive` in this scope\n+#[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n+                                     //~| ERROR cannot find type `OuterDerive` in this scope\n                                      //~| WARN this was previously accepted\n                                      //~| WARN this was previously accepted\n struct Z;\n \n fn inner_block() {\n-    #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n-                                        //~| WARN cannot find type `OuterDerive` in this scope\n+    #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n+                                        //~| ERROR cannot find type `OuterDerive` in this scope\n                                         //~| WARN this was previously accepted\n                                         //~| WARN this was previously accepted\n     struct InnerZ;"}, {"sha": "a2c1b82b15f6872f9aff80a4b3346048543db653", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -38,94 +38,94 @@ LL | #[generate_mod::check_attr]\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors; 4 warnings emitted\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0412`.\n Future incompatibility report: Future breakage diagnostic:\n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n warning: cannot find type `FromOutside` in this scope"}, {"sha": "3a2a6fa2253fae3901fd15ac8308e6663d56dded", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // aux-build:pin-project-internal-0.4.0.rs\n // compile-flags: -Z span-debug\n \n@@ -24,7 +23,7 @@ mod no_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo); //~ WARN  using an old version\n+    impl_macros!(Foo); //~ ERROR  using an old version\n                        //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n@@ -41,9 +40,9 @@ mod with_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo); //~  WARN using an old version\n+    impl_macros!(Foo); //~  ERROR using an old version\n                        //~| WARN this was previously\n-    arrays!(Foo); //~  WARN using an old version\n+    arrays!(Foo); //~  ERROR using an old version\n                   //~| WARN this was previously\n     other!(Foo);\n }\n@@ -52,15 +51,15 @@ mod actix_web_test {\n     include!(\"actix-web/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo); //~ WARN using an old version\n+    tuple_from_req!(Foo); //~ ERROR using an old version\n     //~| WARN this was previously\n }\n \n mod actix_web_version_test {\n     include!(\"actix-web-2.0.0/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo); //~ WARN using an old version\n+    tuple_from_req!(Foo); //~ ERROR using an old version\n     //~| WARN this was previously\n }\n "}, {"sha": "bd9ba6a09fce5cc0b40ab46d4050c43dfd9cc74b", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,169 +1,169 @@\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:27:5\n+  ::: $DIR/group-compat-hack.rs:26:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:44:5\n+  ::: $DIR/group-compat-hack.rs:43:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `js-sys`\n+error: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:46:5\n+  ::: $DIR/group-compat-hack.rs:45:5\n    |\n LL |     arrays!(Foo);\n    |     ------------ in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:55:5\n+  ::: $DIR/group-compat-hack.rs:54:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:63:5\n+  ::: $DIR/group-compat-hack.rs:62:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 5 warnings emitted\n+error: aborting due to 5 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:27:5\n+  ::: $DIR/group-compat-hack.rs:26:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:44:5\n+  ::: $DIR/group-compat-hack.rs:43:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `js-sys`\n+error: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:46:5\n+  ::: $DIR/group-compat-hack.rs:45:5\n    |\n LL |     arrays!(Foo);\n    |     ------------ in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:55:5\n+  ::: $DIR/group-compat-hack.rs:54:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:63:5\n+  ::: $DIR/group-compat-hack.rs:62:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "51312b10ad17616bb7e4d4c187ee469f39e49073", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,11 +1,11 @@\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:30:12: 30:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:18: 44:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:48:12: 48:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:55:21: 55:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:63:21: 63:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:71:21: 71:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:78:21: 78:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:84:13: 84:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:26:18: 26:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:25: 21:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:32: 21:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:38: 21:43 (#14) }], span: $DIR/group-compat-hack.rs:21:37: 21:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:44: 21:45 (#14) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:13: 45:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:62:21: 62:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:70:21: 70:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:77:21: 77:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:83:13: 83:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]"}, {"sha": "113235051b2b92dfb46504782a0f526ac55df1c6", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,11 +1,10 @@\n-// check-pass\n // aux-build:test-macros.rs\n \n #[macro_use]\n extern crate test_macros;\n \n #[derive(Print)]\n-enum ProceduralMasqueradeDummyType { //~ WARN using\n+enum ProceduralMasqueradeDummyType { //~ ERROR using\n //~| WARN this was previously\n     Input\n }"}, {"sha": "dff71c9eacd4d8d24f6527e670e63caa61386294", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -1,24 +1,24 @@\n-warning: using `procedural-masquerade` crate\n-  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+error: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:7:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: using `procedural-masquerade` crate\n-  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+error: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:7:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling."}, {"sha": "8a8fbf0682470d90f59dc95beeb67b551cf5569a", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -3,20 +3,20 @@ PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: #0 bytes(100..104),\n+        span: #0 bytes(86..90),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: #0 bytes(105..134),\n+        span: #0 bytes(91..120),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: #0 bytes(186..191),\n+                span: #0 bytes(173..178),\n             },\n         ],\n-        span: #0 bytes(135..193),\n+        span: #0 bytes(121..180),\n     },\n ]"}, {"sha": "da55bc96244f2d0c5b1802348969354f9ff1ae38", "filename": "src/test/ui/variance/variance-associated-consts.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,17 @@\n+// Test that the variance computation considers types that\n+// appear in const expressions to be invariant.\n+\n+#![feature(rustc_attrs)]\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Trait {\n+    const Const: usize;\n+}\n+\n+#[rustc_variance]\n+struct Foo<T: Trait> { //~ ERROR [o]\n+    field: [u8; <T as Trait>::Const]\n+}\n+\n+fn main() { }"}, {"sha": "d1bf34781dfb29ff62196cdb761f2c227e46c140", "filename": "src/test/ui/variance/variance-associated-consts.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b931926fd49fc97d1e39f2b8206abf1d77ce7d/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr?ref=91b931926fd49fc97d1e39f2b8206abf1d77ce7d", "patch": "@@ -0,0 +1,10 @@\n+error[E0208]: [o]\n+  --> $DIR/variance-associated-consts.rs:13:1\n+   |\n+LL | / struct Foo<T: Trait> {\n+LL | |     field: [u8; <T as Trait>::Const]\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}