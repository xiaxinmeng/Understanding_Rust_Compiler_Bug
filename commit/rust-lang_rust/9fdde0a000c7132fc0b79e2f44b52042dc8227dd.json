{"sha": "9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGRlMGEwMDBjNzEzMmZjMGI3OWUyZjQ0YjUyMDQyZGM4MjI3ZGQ=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-23T18:27:13Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-23T18:27:13Z"}, "message": "Merge tests.\n\nMerge tests to a single test file.", "tree": {"sha": "0f2bd3ca9a6bec5bbda8b9f77e951e3b37de1b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2bd3ca9a6bec5bbda8b9f77e951e3b37de1b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "html_url": "https://github.com/rust-lang/rust/commit/9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fdde0a000c7132fc0b79e2f44b52042dc8227dd/comments", "author": null, "committer": null, "parents": [{"sha": "f080f944f134700c48801a3b826330c9bd3aa5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f080f944f134700c48801a3b826330c9bd3aa5cc", "html_url": "https://github.com/rust-lang/rust/commit/f080f944f134700c48801a3b826330c9bd3aa5cc"}], "stats": {"total": 98, "additions": 30, "deletions": 68}, "files": [{"sha": "6d56fe0d7b8e3b150c24c71b0ddd1d6ecdcc477a", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fdde0a000c7132fc0b79e2f44b52042dc8227dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdde0a000c7132fc0b79e2f44b52042dc8227dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `Range` should be usable within const generics:\n+struct _Range<const R: std::ops::Range<usize>>;\n+const RANGE : _Range<{ 0 .. 1000 }> = _Range;\n+\n+// `RangeFrom` should be usable within const generics:\n+struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n+const RANGE_FROM : _RangeFrom<{ 0 .. }> = _RangeFrom;\n+\n+// `RangeFull` should be usable within const generics:\n+struct _RangeFull<const R: std::ops::RangeFull>;\n+const RANGE_FULL : _RangeFull<{ .. }> = _RangeFull;\n+\n+// Regression test for #70155\n+// `RangeInclusive` should be usable within const generics:\n+struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n+const RANGE_INCLUSIVE : _RangeInclusive<{ 0 ..= 999 }> = _RangeInclusive;\n+\n+// `RangeTo` should be usable within const generics:\n+struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n+const RANGE_TO : _RangeTo<{ .. 1000 }> = _RangeTo;\n+\n+// `RangeToInclusive` should be usable within const generics:\n+struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n+const RANGE_TO_INCLUSIVE : _RangeToInclusive<{ ..= 999 }> = _RangeToInclusive;\n+\n+pub fn main() {}"}, {"sha": "487a51ddf25c44ab4b5040f193f254de9b259a29", "filename": "src/test/ui/const-generics/std/range/const-generics-range-from.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// `RangeFrom` should be usable within const generics:\n-\n-struct S<const R: std::ops::RangeFrom<usize>>;\n-\n-const C : S<{ 0 .. }> = S;\n-\n-pub fn main() {}"}, {"sha": "2af2dd8343be3f796340386fa4314000e6cb54b0", "filename": "src/test/ui/const-generics/std/range/const-generics-range-full.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// `RangeFull` should be usable within const generics:\n-\n-struct S<const R: std::ops::RangeFull>;\n-\n-const C : S<{ .. }> = S;\n-\n-pub fn main() {}"}, {"sha": "c9f7420f6ac4f8cdf0b0ec4cbbaf167deebc0600", "filename": "src/test/ui/const-generics/std/range/const-generics-range-inclusive.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// Regression test for #70155\n-\n-// `RangeInclusive` should be usable within const generics:\n-\n-struct S<const R: std::ops::RangeInclusive<usize>>;\n-\n-const C : S<{ 0 ..= 999 }> = S;\n-\n-pub fn main() {}"}, {"sha": "dbef24f853c18b993dcac8237f83930eaaf79b2f", "filename": "src/test/ui/const-generics/std/range/const-generics-range-to-inclusive.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// `RangeToInclusive` should be usable within const generics:\n-\n-struct S<const R: std::ops::RangeToInclusive<usize>>;\n-\n-const C : S<{ ..= 999 }> = S;\n-\n-pub fn main() {}"}, {"sha": "ed479316a8239a20e72adf7779e6ce9de7fcc501", "filename": "src/test/ui/const-generics/std/range/const-generics-range-to.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// `RangeTo` should be usable within const generics:\n-\n-struct S<const R: std::ops::RangeTo<usize>>;\n-\n-const C : S<{ .. 1000 }> = S;\n-\n-pub fn main() {}"}, {"sha": "ea4b72780c9ccf35c72c83bdfe2aff5773c442aa", "filename": "src/test/ui/const-generics/std/range/const-generics-range.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n-\n-// `Range` should be usable within const generics:\n-\n-struct S<const R: std::ops::Range<usize>>;\n-\n-const C : S<{ 0 .. 1000 }> = S;\n-\n-pub fn main() {}"}]}