{"sha": "ddad5e0f86176e7bd2edaa95ec5272911791669f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYWQ1ZTBmODYxNzZlN2JkMmVkYWE5NWVjNTI3MjkxMTc5MTY2OWY=", "commit": {"author": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-30T01:01:02Z"}, "committer": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-30T01:01:11Z"}, "message": "add tests for false positives", "tree": {"sha": "d3d28d79a694694e71b3b0eb9e9c3029d049f6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d28d79a694694e71b3b0eb9e9c3029d049f6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddad5e0f86176e7bd2edaa95ec5272911791669f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddad5e0f86176e7bd2edaa95ec5272911791669f", "html_url": "https://github.com/rust-lang/rust/commit/ddad5e0f86176e7bd2edaa95ec5272911791669f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddad5e0f86176e7bd2edaa95ec5272911791669f/comments", "author": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd11d23b04d6117e1e90c74b4091509c8aff249", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd11d23b04d6117e1e90c74b4091509c8aff249", "html_url": "https://github.com/rust-lang/rust/commit/7fd11d23b04d6117e1e90c74b4091509c8aff249"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "ad3398cb0782db9ed4b2a54bee677ae82b5245ee", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddad5e0f86176e7bd2edaa95ec5272911791669f/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad5e0f86176e7bd2edaa95ec5272911791669f/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=ddad5e0f86176e7bd2edaa95ec5272911791669f", "patch": "@@ -22,6 +22,7 @@ declare_lint! {\n \n const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n+const HELP: &str = \"Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\"; \n \n pub struct InvalidRef; \n \n@@ -34,26 +35,21 @@ impl LintPass for InvalidRef {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain!{[\n-            let ty::TyRef(..) = cx.tables.expr_ty(expr).sty,\n             let ExprCall(ref path, ref args) = expr.node,\n             let ExprPath(ref qpath) = path.node,\n             args.len() == 0,\n+            let ty::TyRef(..) = cx.tables.expr_ty(expr).sty, \n             let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id)),\n         ], {\n-            let help = \"Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\"; \n-            if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) | match_def_path(cx.tcx, def_id, &paths::INIT) {\n-                let lint = INVALID_REF;\n-                let msg = ZERO_REF_SUMMARY;\n-                span_help_and_lint(cx, lint, expr.span, &msg, &help);\n+            let msg = if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) | match_def_path(cx.tcx, def_id, &paths::INIT) {\n+                ZERO_REF_SUMMARY\n             } else if match_def_path(cx.tcx, def_id, &paths::MEM_UNINIT) | match_def_path(cx.tcx, def_id, &paths::UNINIT) {\n-                let lint = INVALID_REF;\n-                let msg = UNINIT_REF_SUMMARY;\n-                span_help_and_lint(cx, lint, expr.span, &msg, &help);\n+                UNINIT_REF_SUMMARY\n             } else {\n                 return;\n-            }\n-        }}            \n+            };\n+            span_help_and_lint(cx, INVALID_REF, expr.span, msg, HELP);\n+        }}        \n         return;\n     }\n }\n-"}, {"sha": "2b8f04c9781ce26505cb4b3ee9bc3666d25ae30b", "filename": "tests/ui/invalid_ref.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddad5e0f86176e7bd2edaa95ec5272911791669f/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad5e0f86176e7bd2edaa95ec5272911791669f/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=ddad5e0f86176e7bd2edaa95ec5272911791669f", "patch": "@@ -16,6 +16,10 @@ fn main() {\n         ref_to_uninit_std(&x);\n         ref_to_uninit_core(&x);\n         ref_to_uninit_intr(&x);\n+        some_ref();\n+        std_zeroed_no_ref();\n+        core_zeroed_no_ref();\n+        intr_init_no_ref();\n     }\n }\n \n@@ -43,3 +47,20 @@ unsafe fn ref_to_uninit_intr<T: ?Sized>(t: &T) {\n     let ref_uninit: &T = std::intrinsics::uninit();   // warning\n }\n \n+fn some_ref() {\n+    let some_ref = &1; \n+}\n+\n+unsafe fn std_zeroed_no_ref() {\n+    let mem_zero: usize = std::mem::zeroed();  // no warning\n+}\n+\n+unsafe fn core_zeroed_no_ref() {\n+    let mem_zero: usize = core::mem::zeroed();  // no warning\n+}\n+\n+unsafe fn intr_init_no_ref() {\n+    let mem_zero: usize = std::intrinsics::init(); // no warning\n+}\n+\n+"}, {"sha": "420fed017444c39375792948c409e1755bb4746b", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ddad5e0f86176e7bd2edaa95ec5272911791669f/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddad5e0f86176e7bd2edaa95ec5272911791669f/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=ddad5e0f86176e7bd2edaa95ec5272911791669f", "patch": "@@ -1,48 +1,48 @@\n error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:23:24\n+  --> $DIR/invalid_ref.rs:27:24\n    |\n-23 |     let ref_zero: &T = std::mem::zeroed();     // warning\n+27 |     let ref_zero: &T = std::mem::zeroed();     // warning\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D invalid-ref` implied by `-D warnings`\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:27:24\n+  --> $DIR/invalid_ref.rs:31:24\n    |\n-27 |     let ref_zero: &T = core::mem::zeroed();   // warning\n+31 |     let ref_zero: &T = core::mem::zeroed();   // warning\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:31:24\n+  --> $DIR/invalid_ref.rs:35:24\n    |\n-31 |     let ref_zero: &T = std::intrinsics::init();   // warning\n+35 |     let ref_zero: &T = std::intrinsics::init();   // warning\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:35:26\n+  --> $DIR/invalid_ref.rs:39:26\n    |\n-35 |     let ref_uninit: &T = std::mem::uninitialized();   // warning\n+39 |     let ref_uninit: &T = std::mem::uninitialized();   // warning\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:39:26\n+  --> $DIR/invalid_ref.rs:43:26\n    |\n-39 |     let ref_uninit: &T = core::mem::uninitialized();   // warning\n+43 |     let ref_uninit: &T = core::mem::uninitialized();   // warning\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:43:26\n+  --> $DIR/invalid_ref.rs:47:26\n    |\n-43 |     let ref_uninit: &T = std::intrinsics::uninit();   // warning\n+47 |     let ref_uninit: &T = std::intrinsics::uninit();   // warning\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html"}]}