{"sha": "5272e6c4c6ed57cd0faafea2925995d9b3023105", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNzJlNmM0YzZlZDU3Y2QwZmFhZmVhMjkyNTk5NWQ5YjMwMjMxMDU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-06T16:49:08Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-06T19:14:31Z"}, "message": "Add tests", "tree": {"sha": "db93ee4833d23cad12f95040b2b4adedb5640a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db93ee4833d23cad12f95040b2b4adedb5640a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5272e6c4c6ed57cd0faafea2925995d9b3023105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5272e6c4c6ed57cd0faafea2925995d9b3023105", "html_url": "https://github.com/rust-lang/rust/commit/5272e6c4c6ed57cd0faafea2925995d9b3023105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5272e6c4c6ed57cd0faafea2925995d9b3023105/comments", "author": null, "committer": null, "parents": [{"sha": "73b86e47786e14938048b7c298a70bc5ff536a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b86e47786e14938048b7c298a70bc5ff536a88", "html_url": "https://github.com/rust-lang/rust/commit/73b86e47786e14938048b7c298a70bc5ff536a88"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "aeef55fbbacd86f4f8b51bd8eb425e0db517df4f", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5272e6c4c6ed57cd0faafea2925995d9b3023105/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5272e6c4c6ed57cd0faafea2925995d9b3023105/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=5272e6c4c6ed57cd0faafea2925995d9b3023105", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::default::Default;\n+\n+#[deriving(Default)]\n+struct A {\n+    foo: Box<[bool]>,\n+}\n+\n+pub fn main() {\n+    let a: A = Default::default();\n+    let b: Box<[_]> = box [];\n+    assert_eq!(a.foo, b);\n+}"}, {"sha": "e21f64cd74c80bc1bd04b00b4226098f5585ad64", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5272e6c4c6ed57cd0faafea2925995d9b3023105/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5272e6c4c6ed57cd0faafea2925995d9b3023105/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=5272e6c4c6ed57cd0faafea2925995d9b3023105", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate serialize;\n+\n+use serialize::{Encodable, Decodable};\n+use serialize::json;\n+\n+#[deriving(Encodable, Decodable)]\n+struct A {\n+    foo: Box<[bool]>,\n+}\n+\n+fn main() {\n+    let obj = A { foo: box [true, false] };\n+    let s = json::encode(&obj);\n+    let obj2: A = json::decode(s.as_slice()).unwrap();\n+    assert!(obj.foo == obj2.foo);\n+}"}]}