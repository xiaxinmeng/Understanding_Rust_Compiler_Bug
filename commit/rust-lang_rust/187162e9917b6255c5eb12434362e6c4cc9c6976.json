{"sha": "187162e9917b6255c5eb12434362e6c4cc9c6976", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzE2MmU5OTE3YjYyNTVjNWViMTI0MzQzNjJlNmM0Y2M5YzY5NzY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-22T20:27:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-25T19:17:22Z"}, "message": "Add missing code examples on slice iter types", "tree": {"sha": "1f454d095d252e8f60a921ea66fd8c179680fdf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f454d095d252e8f60a921ea66fd8c179680fdf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187162e9917b6255c5eb12434362e6c4cc9c6976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187162e9917b6255c5eb12434362e6c4cc9c6976", "html_url": "https://github.com/rust-lang/rust/commit/187162e9917b6255c5eb12434362e6c4cc9c6976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187162e9917b6255c5eb12434362e6c4cc9c6976/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953f33c5cbe61817ed84e311731b132006a255ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/953f33c5cbe61817ed84e311731b132006a255ca", "html_url": "https://github.com/rust-lang/rust/commit/953f33c5cbe61817ed84e311731b132006a255ca"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "1bac35845dff08324cf9ea42a94ce419e1fd6522", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/187162e9917b6255c5eb12434362e6c4cc9c6976/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187162e9917b6255c5eb12434362e6c4cc9c6976/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=187162e9917b6255c5eb12434362e6c4cc9c6976", "patch": "@@ -270,6 +270,13 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n ///\n /// This struct is created by the [`split`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split`]: ../../std/primitive.slice.html#method.split\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -378,6 +385,15 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -476,6 +492,13 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n ///\n /// This struct is created by the [`split_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -591,6 +614,15 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -698,6 +730,13 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n ///\n /// This struct is created by the [`rsplit`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -770,6 +809,13 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`rsplit_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit_mut(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -875,6 +921,13 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n ///\n /// This struct is created by the [`splitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -901,6 +954,13 @@ where\n ///\n /// This struct is created by the [`rsplitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -926,6 +986,13 @@ where\n ///\n /// This struct is created by the [`splitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -952,6 +1019,13 @@ where\n ///\n /// This struct is created by the [`rsplitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -981,6 +1055,13 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n ///\n /// This struct is created by the [`windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['r', 'u', 's', 't'];\n+/// let iter = slice.windows(2);\n+/// ```\n+///\n /// [`windows`]: ../../std/primitive.slice.html#method.windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1113,6 +1194,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n ///\n /// This struct is created by the [`chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks(2);\n+/// ```\n+///\n /// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1267,6 +1355,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n ///\n /// This struct is created by the [`chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_mut(2);\n+/// ```\n+///\n /// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1419,6 +1514,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact(2);\n+/// ```\n+///\n /// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1559,6 +1661,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact_mut(2);\n+/// ```\n+///\n /// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1692,6 +1801,15 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n ///\n /// This struct is created by the [`array_windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_windows)]\n+///\n+/// let slice = [0, 1, 2, 3];\n+/// let iter = slice.array_windows::<2>();\n+/// ```\n+///\n /// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug, Clone, Copy)]\n@@ -1796,6 +1914,15 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n ///\n /// This struct is created by the [`array_chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks::<2>();\n+/// ```\n+///\n /// [`array_chunks`]: ../../std/primitive.slice.html#method.array_chunks\n /// [`remainder`]: ArrayChunks::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1903,6 +2030,15 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N>\n ///\n /// This struct is created by the [`array_chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks_mut::<2>();\n+/// ```\n+///\n /// [`array_chunks_mut`]: ../../std/primitive.slice.html#method.array_chunks_mut\n /// [`into_remainder`]: ../../std/slice/struct.ArrayChunksMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2001,6 +2137,13 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T,\n ///\n /// This struct is created by the [`rchunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks(2);\n+/// ```\n+///\n /// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2151,6 +2294,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n ///\n /// This struct is created by the [`rchunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_mut(2);\n+/// ```\n+///\n /// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2300,6 +2450,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact(2);\n+/// ```\n+///\n /// [`rchunks_exact`]: ../../std/primitive.slice.html#method.rchunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2445,6 +2602,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact_mut(2);\n+/// ```\n+///\n /// [`rchunks_exact_mut`]: ../../std/primitive.slice.html#method.rchunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html"}]}