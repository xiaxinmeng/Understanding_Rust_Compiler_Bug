{"sha": "e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2M2U1Y2RhYjAyNjU5YmVlYzBmZDRhNTBkNGIyNTU2YjdkNjUwMGQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-06-12T02:58:09Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T22:26:58Z"}, "message": "Support intra-doc links on macro re-exports\n\nThis includes both `macro_rules!` and proc-macros.", "tree": {"sha": "fd440ca1917e02228ebbc87dd8b059656d6643ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd440ca1917e02228ebbc87dd8b059656d6643ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "html_url": "https://github.com/rust-lang/rust/commit/e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f49f55eb4fc73dc89ab80c124b9eb158e51f57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f49f55eb4fc73dc89ab80c124b9eb158e51f57b", "html_url": "https://github.com/rust-lang/rust/commit/5f49f55eb4fc73dc89ab80c124b9eb158e51f57b"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "fa0cbea1d806286ae2750683322fdb0ecbefa2b5", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     }\n \n     /// Resolves a string as a macro.\n-    fn macro_resolve(&self, path_str: &str, parent_id: Option<hir::HirId>) -> Option<Res> {\n+    fn macro_resolve(&self, path_str: &str, parent_id: Option<DefId>) -> Option<Res> {\n         let cx = self.cx;\n         let path = ast::Path::from_ident(Ident::from_str(path_str));\n         cx.enter_resolver(|resolver| {\n@@ -142,8 +142,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             if let Some(res) = resolver.all_macros().get(&Symbol::intern(path_str)) {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n-            if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-                let module_id = cx.tcx.hir().local_def_id(module_id);\n+            if let Some(module_id) = parent_id {\n                 if let Ok((_, res)) =\n                     resolver.resolve_str_path_error(DUMMY_SP, path_str, MacroNS, module_id)\n                 {\n@@ -167,17 +166,13 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n-        mut parent_id: Option<DefId>,\n+        parent_id: Option<DefId>,\n         extra_fragment: &Option<String>,\n         item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n         // In case we're in a module, try to resolve the relative path.\n-        if parent_id.is_none() {\n-            let id = self.mod_ids.last().cloned();\n-            parent_id = id.map(|id| cx.tcx.hir().local_def_id(id).to_def_id());\n-        }\n         if let Some(module_id) = parent_id {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n@@ -659,8 +654,11 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 // we've already pushed this node onto the resolution stack but\n                 // for outer comments we explicitly try and resolve against the\n                 // parent_node first.\n-                let base_node =\n-                    if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n+                let base_node = if item.is_mod() && item.attrs.inner_docs {\n+                    self.mod_ids.last().map(|&id| self.cx.tcx.hir().local_def_id(id).to_def_id())\n+                } else {\n+                    parent_node\n+                };\n \n                 // replace `Self` with suitable item's parent name\n                 if path_str.starts_with(\"Self::\") {"}, {"sha": "e54539f0bc5df2e7257f39d980eb08997287db03", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/macro_inner.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs?ref=e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "patch": "@@ -0,0 +1,10 @@\n+#![crate_name = \"macro_inner\"]\n+#![deny(intra_doc_resolution_failure)]\n+\n+pub struct Foo;\n+\n+/// See also [`Foo`]\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => {}\n+}"}, {"sha": "0d5a954075df22c24bc813c3bccd7aaf6c2ac7ca", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/proc_macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs?ref=e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "patch": "@@ -0,0 +1,20 @@\n+// force-host\n+// no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro\n+#![crate_type=\"proc-macro\"]\n+#![crate_name=\"proc_macro_inner\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+/// Links to [`OtherDerive`]\n+#[proc_macro_derive(DeriveA)]\n+pub fn a_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(OtherDerive)]\n+pub fn other_derive(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "5c8cec128dfa0247e0723f4d59bc4cf116159ac7", "filename": "src/test/rustdoc/intra-doc-crate/macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63e5cdab02659beec0fd4a50d4b2556b7d6500d/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs?ref=e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+// aux-build:macro_inner.rs\n+// aux-build:proc_macro.rs\n+// build-aux-docs\n+#![deny(intra_doc_resolution_failure)]\n+extern crate macro_inner;\n+extern crate proc_macro_inner;\n+\n+// @has 'macro/macro.my_macro.html' '//a[@href=\"../macro_inner/struct.Foo.html\"]' 'Foo'\n+pub use macro_inner::my_macro;\n+// @has 'macro/derive.DeriveA.html' '//a[@href=\"../proc_macro_inner/derive.OtherDerive.html\"]' 'OtherDerive'\n+pub use proc_macro_inner::DeriveA;"}]}