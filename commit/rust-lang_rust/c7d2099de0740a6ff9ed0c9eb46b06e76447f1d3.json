{"sha": "c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDIwOTlkZTA3NDBhNmZmOWVkMGM5ZWI0NmIwNmU3NjQ0N2YxZDM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-07T09:03:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-01T14:51:11Z"}, "message": "Rename all_crate_nums query to crates and remove useless wrapper", "tree": {"sha": "c5dbbdce6fa7517d13094a8107e687c25aad0419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5dbbdce6fa7517d13094a8107e687c25aad0419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "html_url": "https://github.com/rust-lang/rust/commit/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98897e5dc9898707bf4331c43b2e76ab7e282fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98897e5dc9898707bf4331c43b2e76ab7e282fe", "html_url": "https://github.com/rust-lang/rust/commit/e98897e5dc9898707bf4331c43b2e76ab7e282fe"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "4ef21449d216e5c1771b2958fd8466a1b7aa1472", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -277,7 +277,7 @@ fn upstream_monomorphizations_provider(\n     tcx: TyCtxt<'_>,\n     (): (),\n ) -> DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n-    let cnums = tcx.all_crate_nums(());\n+    let cnums = tcx.crates(());\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n "}, {"sha": "d27eb7da810bef4f27f93f1e4c6840f110cf0f48", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -994,7 +994,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n             }\n             Lto::Fat | Lto::Thin => {\n                 exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n-                for &cnum in tcx.crates().iter() {\n+                for &cnum in tcx.crates(()).iter() {\n                     exported_symbols.insert(cnum, copy_symbols(cnum));\n                 }\n                 Some(Arc::new(exported_symbols))"}, {"sha": "277cabfe64a36f617aa0058130ad753d61e96078", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -789,7 +789,7 @@ impl CrateInfo {\n         };\n         let lang_items = tcx.lang_items();\n \n-        let crates = tcx.crates();\n+        let crates = tcx.crates(());\n \n         let n_crates = crates.len();\n         info.native_libraries.reserve(n_crates);"}, {"sha": "f7778d67d20d6295d25158c6658a8e1884010529", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -129,7 +129,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                 && sess.crt_static(Some(ty))\n                 && !sess.target.crt_static_allows_dylibs)\n         {\n-            for &cnum in tcx.crates().iter() {\n+            for &cnum in tcx.crates(()).iter() {\n                 if tcx.dep_kind(cnum).macros_only() {\n                     continue;\n                 }\n@@ -152,7 +152,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n     // Sweep all crates for found dylibs. Add all dylibs, as well as their\n     // dependencies, ensuring there are no conflicts. The only valid case for a\n     // dependency to be relied upon twice is for both cases to rely on a dylib.\n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         if tcx.dep_kind(cnum).macros_only() {\n             continue;\n         }\n@@ -170,7 +170,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n     }\n \n     // Collect what we've got so far in the return vector.\n-    let last_crate = tcx.crates().len();\n+    let last_crate = tcx.crates(()).len();\n     let mut ret = (1..last_crate + 1)\n         .map(|cnum| match formats.get(&CrateNum::new(cnum)) {\n             Some(&RequireDynamic) => Linkage::Dynamic,\n@@ -184,7 +184,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n     //\n     // If the crate hasn't been included yet and it's not actually required\n     // (e.g., it's an allocator) then we skip it here as well.\n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         let src = tcx.used_crate_source(cnum);\n         if src.dylib.is_none()\n             && !formats.contains_key(&cnum)\n@@ -281,7 +281,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n \n     // All crates are available in an rlib format, so we're just going to link\n     // everything in explicitly so long as it's actually required.\n-    let last_crate = tcx.crates().len();\n+    let last_crate = tcx.crates(()).len();\n     let mut ret = (1..last_crate + 1)\n         .map(|cnum| {\n             if tcx.dep_kind(CrateNum::new(cnum)) == CrateDepKind::Explicit {"}, {"sha": "27723a4b9d8673d2d4c8150bb417e24a02d13676", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -312,7 +312,7 @@ pub fn provide(providers: &mut Providers) {\n             // which is to say, its not deterministic in general. But\n             // we believe that libstd is consistently assigned crate\n             // num 1, so it should be enough to resolve #46112.\n-            let mut crates: Vec<CrateNum> = (*tcx.crates()).to_owned();\n+            let mut crates: Vec<CrateNum> = (*tcx.crates(())).to_owned();\n             crates.sort();\n \n             for &cnum in crates.iter() {"}, {"sha": "84499a8648b791fce674992032b25c7fecafaadc", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -1668,7 +1668,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {\n         empty_proc_macro!(self);\n-        let crates = self.tcx.crates();\n+        let crates = self.tcx.crates(());\n \n         let mut deps = crates\n             .iter()"}, {"sha": "e9bcbe016c7c903f0f9ff59a45e136cc501b09a7", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -229,7 +229,7 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n // positions.\n pub fn used_crates(tcx: TyCtxt<'_>, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)> {\n     let mut libs = tcx\n-        .crates()\n+        .crates(())\n         .iter()\n         .cloned()\n         .filter_map(|cnum| {"}, {"sha": "23ee0e05062723b0275e8a6cd3d7948e184eac8e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -1444,7 +1444,7 @@ rustc_queries! {\n         eval_always\n         desc { \"calculating the stability index for the local crate\" }\n     }\n-    query all_crate_nums(_: ()) -> &'tcx [CrateNum] {\n+    query crates(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }"}, {"sha": "b2cf7732c6ffe7880d1eeb863aeba9c019e807a2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -1259,10 +1259,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.stability_index(())\n     }\n \n-    pub fn crates(self) -> &'tcx [CrateNum] {\n-        self.all_crate_nums(())\n-    }\n-\n     pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(())\n     }\n@@ -2819,7 +2815,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.stability().local_deprecation_entry(id)\n     };\n     providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n-    providers.all_crate_nums = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n+    providers.crates = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n     providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {"}, {"sha": "c59394a23d044efdcd39c5ce8b89bc08403fef0d", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -2248,7 +2248,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     let queue = &mut Vec::new();\n     let mut seen_defs: DefIdSet = Default::default();\n \n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n \n         // Ignore crates that are not direct dependencies."}, {"sha": "2bdb1ccac595810209c8aad4730ee977ea4a6020", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -558,7 +558,7 @@ impl<'sess> OnDiskCache<'sess> {\n     // maps to None.\n     fn compute_cnum_map(tcx: TyCtxt<'_>) -> UnhashMap<StableCrateId, CrateNum> {\n         tcx.dep_graph.with_ignore(|| {\n-            tcx.all_crate_nums(())\n+            tcx.crates(())\n                 .iter()\n                 .chain(std::iter::once(&LOCAL_CRATE))\n                 .map(|&cnum| {"}, {"sha": "ae86f51e6ac3fd4bdc045e1f6df4d7e26216868f", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -215,7 +215,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n     // Traits defined in the current crate can't have impls in upstream\n     // crates, so we don't bother querying the cstore.\n     if !trait_id.is_local() {\n-        for &cnum in tcx.crates().iter() {\n+        for &cnum in tcx.crates(()).iter() {\n             for &(impl_def_id, simplified_self_ty) in\n                 tcx.implementations_of_trait((cnum, trait_id)).iter()\n             {"}, {"sha": "ddcc6fc123f7bb7bb28cea10b24b481e7a3f9ebe", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -121,7 +121,7 @@ fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashMap<Symbol, De\n     let mut collector = FxHashMap::default();\n \n     // Collect diagnostic items in other crates.\n-    for &cnum in tcx.crates().iter().chain(std::iter::once(&LOCAL_CRATE)) {\n+    for &cnum in tcx.crates(()).iter().chain(std::iter::once(&LOCAL_CRATE)) {\n         for (&name, &def_id) in tcx.diagnostic_items(cnum).iter() {\n             collect_item(tcx, &mut collector, name, def_id);\n         }"}, {"sha": "d8abffc5f64009c06468b91792e902999edd2795", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -309,7 +309,7 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     let mut collector = LanguageItemCollector::new(tcx);\n \n     // Collect lang items in other crates.\n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         for &(def_id, item_index) in tcx.defined_lang_items(cnum).iter() {\n             collector.collect_item(item_index, def_id);\n         }"}, {"sha": "5830245e837e46d7ac608f0d0a0efd388e56f76c", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -938,7 +938,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if !remaining_lib_features.is_empty() {\n         check_features(&mut remaining_lib_features, &local_defined_features);\n \n-        for &cnum in tcx.crates() {\n+        for &cnum in tcx.crates(()) {\n             if remaining_lib_features.is_empty() {\n                 break;\n             }"}, {"sha": "629513c7cfec9226819b994066faee42ae57c154", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -53,7 +53,7 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n     }\n \n     let mut missing = FxHashSet::default();\n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         for &item in tcx.missing_lang_items(cnum).iter() {\n             missing.insert(item);\n         }"}, {"sha": "4c3cd67ddc6efaa696b14c70a4c352b3507d3f20", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -109,9 +109,9 @@ impl<'tcx> SaveContext<'tcx> {\n \n     // List external crates used by the current crate.\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n-        let mut result = Vec::with_capacity(self.tcx.crates().len());\n+        let mut result = Vec::with_capacity(self.tcx.crates(()).len());\n \n-        for &n in self.tcx.crates().iter() {\n+        for &n in self.tcx.crates(()).iter() {\n             let span = match self.tcx.extern_crate(n.as_def_id()) {\n                 Some(&ExternCrate { span, .. }) => span,\n                 None => {"}, {"sha": "7f4754448ba84e040eba621bb4d6741639d1d88e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -1591,7 +1591,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n             _ => {}\n         }\n     }\n-    for &cnum in tcx.crates().iter() {\n+    for &cnum in tcx.crates(()).iter() {\n         let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n         handle_external_res(tcx, &mut traits, &mut external_mods, Res::Def(DefKind::Mod, def_id));\n     }"}, {"sha": "f70ccdd63f985a420f0d94669c25dfe9e035b013", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -30,7 +30,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     cx.cache.owned_box_did = cx.tcx.lang_items().owned_box();\n \n     let mut externs = Vec::new();\n-    for &cnum in cx.tcx.crates().iter() {\n+    for &cnum in cx.tcx.crates(()).iter() {\n         externs.push((cnum, cnum.clean(cx)));\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);"}, {"sha": "8280bbf0858b7cf48cabf3506b89a0210b4be949", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -29,7 +29,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n     let mut new_items = Vec::new();\n \n-    for &cnum in cx.tcx.crates().iter() {\n+    for &cnum in cx.tcx.crates(()).iter() {\n         for &(did, _) in cx.tcx.all_trait_implementations(cnum).iter() {\n             cx.tcx.sess.prof.generic_activity(\"build_extern_trait_impl\").run(|| {\n                 inline::build_impl(cx, None, did, None, &mut new_items);\n@@ -85,7 +85,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n         }\n     });\n \n-    // `tcx.crates()` doesn't include the local crate, and `tcx.all_trait_implementations`\n+    // `tcx.crates(())` doesn't include the local crate, and `tcx.all_trait_implementations`\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     let mut extra_attrs = Vec::new();\n     for &trait_did in cx.tcx.all_traits(()).iter() {"}, {"sha": "9dcfa66c4efba62bba6e448acf14d80abb4bab31", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c7d2099de0740a6ff9ed0c9eb46b06e76447f1d3", "patch": "@@ -493,7 +493,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let crates = tcx.crates();\n+    let crates = tcx.crates(());\n     let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n     let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n     let last = path"}]}