{"sha": "7e5a88a56cf14bf691c25cad04837e82c4c601f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNWE4OGE1NmNmMTRiZjY5MWMyNWNhZDA0ODM3ZTgyYzRjNjAxZjE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-04T18:02:51Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-04T18:02:51Z"}, "message": "Combine individual limit queries into single `limits` query", "tree": {"sha": "a84ecd36f97652e54076f32ac30666fac492ddab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84ecd36f97652e54076f32ac30666fac492ddab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5a88a56cf14bf691c25cad04837e82c4c601f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmDh994ACgkQtAh+UQ6Y\nsWR+cg//StUrwujv2JMawbZNZxzJC+/h/B2bHQ9nKAgUT1uwHuSr33PjPLEV971d\njm0iOE5qJ1niKIttToXw36X7hzqwszFzPGofi7quASFTltMamYsjSuyruij+JiKb\nH7bXJOoVpjbonbRR+JFx1ptGFPFVM39gLf+61nXBii7y4YNcRWXHqv0y976K2Pgg\nNPgC0NiC1oa+BTp3HAk3aMZ1agXeiGxOJ2r4zNnNM+GEF3ccKOKP4ymQZAgV5jhT\npxvDTkAS8nsMsGZMU5W2LE5BGaSyoK9SnxJAA+CdyP42n+K6Kyg5Al4Cl2mzxbfE\n8kMelbXWcY15/8RLaC/Rt7QHKOHKS/43rC7BCPcULMx6fr3VvbSYcuIKCiiCV4eC\nV3wEqoquR9F7tztm3mxIhC0ghyijxFE4O0sTEpsJaRVSqt0A2ofWH12iAkldEtk8\nQN8hrryICBAi0Ivgk4Sh+KUyxQ/4d+pd7qSqB6G4/DLHhFWM7YGMiRwDjxLerWTW\nILKuYXePVjJMbRN4fGm3Jdv7S71gzbZo7Oe6dDQNeQ2aPlFRgR715zJnggfujGpS\nXoPgI6NznBx+9FnnIJbo5PVOpXS7Kt0L6muY2Rt3dCjtQ2PTO2KSvUuBoeHB5gd3\nTO/C7+1ae9PgW6OTKCnuHO94dCsIh0Svm7vVUOvslaPM4aA6RhQ=\n=uY9e\n-----END PGP SIGNATURE-----", "payload": "tree a84ecd36f97652e54076f32ac30666fac492ddab\nparent ff15b5e2c76bb5c0fdd64e49ee76fbd2023415bd\nauthor Aaron Hill <aa1ronham@gmail.com> 1625421771 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1625421771 -0500\n\nCombine individual limit queries into single `limits` query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a88a56cf14bf691c25cad04837e82c4c601f1", "html_url": "https://github.com/rust-lang/rust/commit/7e5a88a56cf14bf691c25cad04837e82c4c601f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a88a56cf14bf691c25cad04837e82c4c601f1/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff15b5e2c76bb5c0fdd64e49ee76fbd2023415bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff15b5e2c76bb5c0fdd64e49ee76fbd2023415bd", "html_url": "https://github.com/rust-lang/rust/commit/ff15b5e2c76bb5c0fdd64e49ee76fbd2023415bd"}], "stats": {"total": 130, "additions": 75, "deletions": 55}, "files": [{"sha": "a7bfffbc38ae9c570496fe335a21190e0368fb5d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -872,13 +872,11 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 });\n             },\n             {\n-                // Mark the attributes as used, and ensure that\n-                // they're not ill-formed. We force these queries\n-                // to run, since they might not otherwise get called.\n-                tcx.ensure().recursion_limit(());\n-                tcx.ensure().move_size_limit(());\n-                tcx.ensure().type_length_limit(());\n-                tcx.ensure().const_eval_limit(());\n+                // We force these querie to run,\n+                // since they might not otherwise get called.\n+                // This marks the corresponding crate-level attributes\n+                // as used, and ensures that their values are valid.\n+                tcx.ensure().limits(());\n             }\n         );\n     });"}, {"sha": "c4bfd0ebb2fde61996d0e3f365ed89e0f027cf16", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -12,20 +12,29 @@\n use crate::bug;\n use crate::ty;\n use rustc_ast::Attribute;\n-use rustc_session::Limit;\n use rustc_session::Session;\n+use rustc_session::{Limit, Limits};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.recursion_limit = |tcx, ()| get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess);\n-    providers.move_size_limit =\n-        |tcx, ()| get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::move_size_limit, 0).0;\n-    providers.type_length_limit =\n-        |tcx, ()| get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::type_length_limit, 1048576);\n-    providers.const_eval_limit =\n-        |tcx, ()| get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::const_eval_limit, 1_000_000);\n+    providers.limits = |tcx, ()| Limits {\n+        recursion_limit: get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess),\n+        move_size_limit: get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::move_size_limit, 0),\n+        type_length_limit: get_limit(\n+            tcx.hir().krate_attrs(),\n+            tcx.sess,\n+            sym::type_length_limit,\n+            1048576,\n+        ),\n+        const_eval_limit: get_limit(\n+            tcx.hir().krate_attrs(),\n+            tcx.sess,\n+            sym::const_eval_limit,\n+            1_000_000,\n+        ),\n+    }\n }\n \n pub fn get_recursion_limit(krate_attrs: &[Attribute], sess: &Session) -> Limit {"}, {"sha": "3db413194b3132ec0e72baf5f89575a06679404c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -1713,25 +1713,7 @@ rustc_queries! {\n         desc { \"conservatively checking if {:?} is privately uninhabited\", key }\n     }\n \n-    /// The maximum recursion limit for potentially infinitely recursive\n-    /// operations such as auto-dereference and monomorphization.\n-    query recursion_limit(key: ()) -> Limit {\n-        desc { \"looking up recursion limit\" }\n-    }\n-\n-    /// The size at which the `large_assignments` lint starts\n-    /// being emitted.\n-    query move_size_limit(key: ()) -> usize {\n-        desc { \"looking up move size limit\" }\n-    }\n-\n-    /// The maximum length of types during monomorphization.\n-    query type_length_limit(key: ()) -> Limit {\n-        desc { \"looking up type length limit\" }\n-    }\n-\n-    /// The maximum blocks a const expression can evaluate.\n-    query const_eval_limit(key: ()) -> Limit {\n-        desc { \"looking up const eval limit\" }\n+    query limits(key: ()) -> Limits {\n+        desc { \"looking up limits\" }\n     }\n }"}, {"sha": "932187e15f4ab681382e2236f4b94a8147a7c965", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -53,6 +53,7 @@ use rustc_middle::ty::OpaqueTypeKey;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n+use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::source_map::MultiSpan;\n@@ -1569,6 +1570,22 @@ impl<'tcx> TyCtxt<'tcx> {\n             def_kind => (def_kind.article(), def_kind.descr(def_id)),\n         }\n     }\n+\n+    pub fn type_length_limit(self) -> Limit {\n+        self.limits(()).type_length_limit\n+    }\n+\n+    pub fn recursion_limit(self) -> Limit {\n+        self.limits(()).recursion_limit\n+    }\n+\n+    pub fn move_size_limit(self) -> Limit {\n+        self.limits(()).move_size_limit\n+    }\n+\n+    pub fn const_eval_limit(self) -> Limit {\n+        self.limits(()).const_eval_limit\n+    }\n }\n \n /// A trait implemented for all `X<'a>` types that can be safely and"}, {"sha": "dbb5064c4f546f9a0a0dea613934bca8f873fd1c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -221,7 +221,7 @@ fn layout_raw<'tcx>(\n     ty::tls::with_related_context(tcx, move |icx| {\n         let (param_env, ty) = query.into_parts();\n \n-        if !tcx.recursion_limit(()).value_within_limit(icx.layout_depth) {\n+        if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {\n             tcx.sess.fatal(&format!(\"overflow representing the type `{}`\", ty));\n         }\n "}, {"sha": "cb326996111b7b42ecc5a8c2f1c6711af82377d6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -1437,7 +1437,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.type_length_limit(());\n+        let type_length_limit = self.tcx.type_length_limit();\n         if type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)"}, {"sha": "875453bb80bb2f86bc3e3ae6e0bcdff4935bd775", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -49,7 +49,7 @@ use rustc_serialize::opaque;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::CrateDisambiguator;\n-use rustc_session::Limit;\n+use rustc_session::Limits;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast as ast;"}, {"sha": "17acb508de35bd9732c6628eb27910ca5f031981", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut ty: Ty<'tcx>,\n         normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> Ty<'tcx> {\n-        let recursion_limit = self.recursion_limit(());\n+        let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {\n             if !recursion_limit.value_within_limit(iteration) {\n                 return self.ty_error_with_message("}, {"sha": "c1c26d4e810d0727b08e2e48f48001d522a34ade", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -98,7 +98,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n         tcx,\n         root_span,\n         param_env,\n-        CompileTimeInterpreter::new(tcx.const_eval_limit(())),\n+        CompileTimeInterpreter::new(tcx.const_eval_limit()),\n         MemoryExtra { can_access_statics },\n     )\n }\n@@ -300,7 +300,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         tcx,\n         tcx.def_span(def.did),\n         key.param_env,\n-        CompileTimeInterpreter::new(tcx.const_eval_limit(())),\n+        CompileTimeInterpreter::new(tcx.const_eval_limit()),\n         // Statics (and promoteds inside statics) may access other statics, because unlike consts\n         // they do not have to behave \"as if\" they were evaluated at runtime.\n         MemoryExtra { can_access_statics: is_static },"}, {"sha": "227abeb7e7cc7c417746e48428625ddeb367549f", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -392,7 +392,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             tcx: tcx.at(root_span),\n             param_env,\n             memory: Memory::new(tcx, memory_extra),\n-            recursion_limit: tcx.recursion_limit(()),\n+            recursion_limit: tcx.recursion_limit(),\n         }\n     }\n "}, {"sha": "ced35d47b1102a1cb8489356bcfd1d8d39650caa", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -295,7 +295,7 @@ pub fn collect_crate_mono_items(\n \n     let mut visited = MTLock::new(FxHashSet::default());\n     let mut inlining_map = MTLock::new(InliningMap::new());\n-    let recursion_limit = tcx.recursion_limit(());\n+    let recursion_limit = tcx.recursion_limit();\n \n     {\n         let visited: MTRef<'_, _> = &mut visited;\n@@ -587,7 +587,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     // which means that rustc basically hangs.\n     //\n     // Bail out in these cases to avoid that bad user experience.\n-    if !tcx.type_length_limit(()).value_within_limit(type_length) {\n+    if !tcx.type_length_limit().value_within_limit(type_length) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n         let msg = format!(\"reached the type-length limit while instantiating `{}`\", shrunk);\n         let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n@@ -824,7 +824,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n-        let limit = self.tcx.move_size_limit(());\n+        let limit = self.tcx.move_size_limit().0;\n         if limit == 0 {\n             return;\n         }"}, {"sha": "c9eafafff57cd2f6f76f758dfa2d34faa483acf3", "filename": "compiler/rustc_mir/src/transform/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -133,7 +133,7 @@ crate fn mir_callgraph_reachable(\n         &mut Vec::new(),\n         &mut FxHashSet::default(),\n         &mut FxHashMap::default(),\n-        tcx.recursion_limit(()),\n+        tcx.recursion_limit(),\n     )\n }\n "}, {"sha": "70dddfb67046ada69f84d444ca016166e1f0f08c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -112,6 +112,20 @@ impl Mul<usize> for Limit {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, HashStable_Generic)]\n+pub struct Limits {\n+    /// The maximum recursion limit for potentially infinitely recursive\n+    /// operations such as auto-dereference and monomorphization.\n+    pub recursion_limit: Limit,\n+    /// The size at which the `large_assignments` lint starts\n+    /// being emitted.\n+    pub move_size_limit: Limit,\n+    /// The maximum length of types during monomorphization.\n+    pub type_length_limit: Limit,\n+    /// The maximum blocks a const expression can evaluate.\n+    pub const_eval_limit: Limit,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {"}, {"sha": "969962e55b0df3e4fb963572e1e3e8b06b321da2", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> Iterator for Autoderef<'a, 'tcx> {\n         }\n \n         // If we have reached the recursion limit, error gracefully.\n-        if !tcx.recursion_limit(()).value_within_limit(self.state.steps.len()) {\n+        if !tcx.recursion_limit().value_within_limit(self.state.steps.len()) {\n             if !self.silence_errors {\n                 report_autoderef_recursion_limit_error(tcx, self.span, self.state.cur_ty);\n             }\n@@ -217,7 +217,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n     // We've reached the recursion limit, error gracefully.\n-    let suggested_limit = tcx.recursion_limit(()) * 2;\n+    let suggested_limit = tcx.recursion_limit() * 2;\n     let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\", ty);\n     let error_id = (DiagnosticMessageId::ErrorId(55), Some(span), msg);\n     let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);"}, {"sha": "dd84a81a651210b409691307541cc0dae9013581", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -2310,7 +2310,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let current_limit = self.tcx.recursion_limit(());\n+        let current_limit = self.tcx.recursion_limit();\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\","}, {"sha": "0e685205069cb7cd7cd722706378973a67e3e3a8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().recursion_limit(());\n+                        let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),\n@@ -726,7 +726,7 @@ fn project_type<'cx, 'tcx>(\n ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {\n     debug!(?obligation, \"project_type\");\n \n-    if !selcx.tcx().recursion_limit(()).value_within_limit(obligation.recursion_depth) {\n+    if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {\n         debug!(\"project: overflow!\");\n         // This should really be an immediate error, but some existing code\n         // relies on being able to recover from this."}, {"sha": "6673e021bf30897326cb1ab8586ca87ca7f3120c", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -116,7 +116,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().recursion_limit(());\n+                        let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),"}, {"sha": "708688fa8a69d8a203052dece1fad8ee10c38209", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -993,7 +993,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,\n     ) -> Result<(), OverflowError> {\n-        if !self.infcx.tcx.recursion_limit(()).value_within_limit(obligation.recursion_depth) {\n+        if !self.infcx.tcx.recursion_limit().value_within_limit(obligation.recursion_depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n                     self.infcx().report_overflow_error(error_obligation, true);"}, {"sha": "4a41dfe01431eb6f1d3dd4307a4ebe0d043730ff", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -163,7 +163,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n ) -> Result<(), NoSolution> {\n     debug!(\"dtorck_constraint_for_ty({:?}, {:?}, {:?}, {:?})\", span, for_ty, depth, ty);\n \n-    if !tcx.recursion_limit(()).value_within_limit(depth) {\n+    if !tcx.recursion_limit().value_within_limit(depth) {\n         constraints.overflows.push(ty);\n         return Ok(());\n     }"}, {"sha": "d837af85d58ae912933b202a95a927b043026b97", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a88a56cf14bf691c25cad04837e82c4c601f1/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=7e5a88a56cf14bf691c25cad04837e82c4c601f1", "patch": "@@ -63,7 +63,7 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n             seen_tys,\n             query_ty: ty,\n             unchecked_tys: vec![(ty, 0)],\n-            recursion_limit: tcx.recursion_limit(()),\n+            recursion_limit: tcx.recursion_limit(),\n             adt_components,\n         }\n     }"}]}