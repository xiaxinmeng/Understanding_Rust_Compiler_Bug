{"sha": "0d69fe8308a76630a104504c14e1d3d74e2a3f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNjlmZTgzMDhhNzY2MzBhMTA0NTA0YzE0ZTFkM2Q3NGUyYTNmMTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-12T05:41:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-01-30T00:18:56Z"}, "message": "Use `P` for `NtTraitItem`, `NtImplItem`, and `NtForeignItem`.\n\nThis commit reduces the size of `Nonterminal` from a whopping 240 bytes\nto 72 bytes (on x86-64), which gets it below the `memcpy` threshold.\n\nIt also removes some impedance mismatches with `Annotatable`, which\nalready uses `P` for these variants.", "tree": {"sha": "8539fc7552335e7298ae1b556c32286671d1fadf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8539fc7552335e7298ae1b556c32286671d1fadf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d69fe8308a76630a104504c14e1d3d74e2a3f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d69fe8308a76630a104504c14e1d3d74e2a3f15", "html_url": "https://github.com/rust-lang/rust/commit/0d69fe8308a76630a104504c14e1d3d74e2a3f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d69fe8308a76630a104504c14e1d3d74e2a3f15/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "html_url": "https://github.com/rust-lang/rust/commit/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb"}], "stats": {"total": 256, "additions": 138, "deletions": 118}, "files": [{"sha": "9377f194dcd5e68eceb219037447b9ad4d242c14", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -531,13 +531,13 @@ impl<'a> TraitDef<'a> {\n         type_ident: Ident,\n         generics: &Generics,\n         field_tys: Vec<P<ast::Ty>>,\n-        methods: Vec<ast::AssocItem>,\n+        methods: Vec<P<ast::AssocItem>>,\n     ) -> P<ast::Item> {\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n         // Transform associated types from `deriving::ty::Ty` into `ast::AssocItem`\n-        let associated_types =\n-            self.associated_types.iter().map(|&(ident, ref type_def)| ast::AssocItem {\n+        let associated_types = self.associated_types.iter().map(|&(ident, ref type_def)| {\n+            P(ast::AssocItem {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n@@ -550,7 +550,8 @@ impl<'a> TraitDef<'a> {\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 ),\n                 tokens: None,\n-            });\n+            })\n+        });\n \n         let Generics { mut params, mut where_clause, span } =\n             self.generics.to_generics(cx, self.span, type_ident, generics);\n@@ -938,7 +939,7 @@ impl<'a> MethodDef<'a> {\n         explicit_self: Option<ast::ExplicitSelf>,\n         arg_types: Vec<(Ident, P<ast::Ty>)>,\n         body: P<Expr>,\n-    ) -> ast::AssocItem {\n+    ) -> P<ast::AssocItem> {\n         // Create the generics that aren't for `Self`.\n         let fn_generics = self.generics.to_generics(cx, trait_.span, type_ident, generics);\n \n@@ -968,7 +969,7 @@ impl<'a> MethodDef<'a> {\n         };\n \n         // Create the method.\n-        ast::AssocItem {\n+        P(ast::AssocItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n@@ -978,7 +979,7 @@ impl<'a> MethodDef<'a> {\n             ident: method_ident,\n             kind: ast::AssocItemKind::Fn(sig, Some(body_block)),\n             tokens: None,\n-        }\n+        })\n     }\n \n     /// ```"}, {"sha": "9debae19fa57e8708c1852d1803b662948a40fdd", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -136,23 +136,23 @@ impl Annotatable {\n         }\n     }\n \n-    pub fn expect_trait_item(self) -> ast::AssocItem {\n+    pub fn expect_trait_item(self) -> P<ast::AssocItem> {\n         match self {\n-            Annotatable::TraitItem(i) => i.into_inner(),\n+            Annotatable::TraitItem(i) => i,\n             _ => panic!(\"expected Item\"),\n         }\n     }\n \n-    pub fn expect_impl_item(self) -> ast::AssocItem {\n+    pub fn expect_impl_item(self) -> P<ast::AssocItem> {\n         match self {\n-            Annotatable::ImplItem(i) => i.into_inner(),\n+            Annotatable::ImplItem(i) => i,\n             _ => panic!(\"expected Item\"),\n         }\n     }\n \n-    pub fn expect_foreign_item(self) -> ast::ForeignItem {\n+    pub fn expect_foreign_item(self) -> P<ast::ForeignItem> {\n         match self {\n-            Annotatable::ForeignItem(i) => i.into_inner(),\n+            Annotatable::ForeignItem(i) => i,\n             _ => panic!(\"expected foreign item\"),\n         }\n     }\n@@ -382,17 +382,17 @@ pub trait MacResult {\n     }\n \n     /// Creates zero or more impl items.\n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         None\n     }\n \n     /// Creates zero or more trait items.\n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         None\n     }\n \n     /// Creates zero or more items in an `extern {}` block\n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[P<ast::ForeignItem>; 1]>> {\n         None\n     }\n \n@@ -470,9 +470,9 @@ make_MacEager! {\n     expr: P<ast::Expr>,\n     pat: P<ast::Pat>,\n     items: SmallVec<[P<ast::Item>; 1]>,\n-    impl_items: SmallVec<[ast::AssocItem; 1]>,\n-    trait_items: SmallVec<[ast::AssocItem; 1]>,\n-    foreign_items: SmallVec<[ast::ForeignItem; 1]>,\n+    impl_items: SmallVec<[P<ast::AssocItem>; 1]>,\n+    trait_items: SmallVec<[P<ast::AssocItem>; 1]>,\n+    foreign_items: SmallVec<[P<ast::ForeignItem>; 1]>,\n     stmts: SmallVec<[ast::Stmt; 1]>,\n     ty: P<ast::Ty>,\n }\n@@ -486,15 +486,15 @@ impl MacResult for MacEager {\n         self.items\n     }\n \n-    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         self.impl_items\n     }\n \n-    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         self.trait_items\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[P<ast::ForeignItem>; 1]>> {\n         self.foreign_items\n     }\n \n@@ -586,15 +586,15 @@ impl MacResult for DummyResult {\n         Some(SmallVec::new())\n     }\n \n-    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         Some(SmallVec::new())\n     }\n \n-    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::AssocItem; 1]>> {\n+    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[P<ast::AssocItem>; 1]>> {\n         Some(SmallVec::new())\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[P<ast::ForeignItem>; 1]>> {\n         Some(SmallVec::new())\n     }\n "}, {"sha": "ea459064b09570639083e58d086bc730a812b90c", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -152,13 +152,13 @@ ast_fragments! {\n     Items(SmallVec<[P<ast::Item>; 1]>) {\n         \"item\"; many fn flat_map_item; fn visit_item; fn make_items;\n     }\n-    TraitItems(SmallVec<[ast::AssocItem; 1]>) {\n+    TraitItems(SmallVec<[P<ast::AssocItem>; 1]>) {\n         \"trait item\"; many fn flat_map_trait_item; fn visit_trait_item; fn make_trait_items;\n     }\n-    ImplItems(SmallVec<[ast::AssocItem; 1]>) {\n+    ImplItems(SmallVec<[P<ast::AssocItem>; 1]>) {\n         \"impl item\"; many fn flat_map_impl_item; fn visit_impl_item; fn make_impl_items;\n     }\n-    ForeignItems(SmallVec<[ast::ForeignItem; 1]>) {\n+    ForeignItems(SmallVec<[P<ast::ForeignItem>; 1]>) {\n         \"foreign item\";\n         many fn flat_map_foreign_item;\n         fn visit_foreign_item;\n@@ -554,15 +554,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // we know that fold result vector will contain exactly one element\n         match item {\n             Annotatable::Item(item) => Annotatable::Item(cfg.flat_map_item(item).pop().unwrap()),\n-            Annotatable::TraitItem(item) => Annotatable::TraitItem(\n-                item.map(|item| cfg.flat_map_trait_item(item).pop().unwrap()),\n-            ),\n+            Annotatable::TraitItem(item) => {\n+                Annotatable::TraitItem(cfg.flat_map_trait_item(item).pop().unwrap())\n+            }\n             Annotatable::ImplItem(item) => {\n-                Annotatable::ImplItem(item.map(|item| cfg.flat_map_impl_item(item).pop().unwrap()))\n+                Annotatable::ImplItem(cfg.flat_map_impl_item(item).pop().unwrap())\n+            }\n+            Annotatable::ForeignItem(item) => {\n+                Annotatable::ForeignItem(cfg.flat_map_foreign_item(item).pop().unwrap())\n             }\n-            Annotatable::ForeignItem(item) => Annotatable::ForeignItem(\n-                item.map(|item| cfg.flat_map_foreign_item(item).pop().unwrap()),\n-            ),\n             Annotatable::Stmt(stmt) => {\n                 Annotatable::Stmt(stmt.map(|stmt| cfg.flat_map_stmt(stmt).pop().unwrap()))\n             }\n@@ -643,11 +643,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let item_tok = TokenTree::token(\n                         token::Interpolated(Lrc::new(match item {\n                             Annotatable::Item(item) => token::NtItem(item),\n-                            Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n-                            Annotatable::ImplItem(item) => token::NtImplItem(item.into_inner()),\n-                            Annotatable::ForeignItem(item) => {\n-                                token::NtForeignItem(item.into_inner())\n-                            }\n+                            Annotatable::TraitItem(item) => token::NtTraitItem(item),\n+                            Annotatable::ImplItem(item) => token::NtImplItem(item),\n+                            Annotatable::ForeignItem(item) => token::NtForeignItem(item),\n                             Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                             Annotatable::Expr(expr) => token::NtExpr(expr),\n                             Annotatable::Arm(..)\n@@ -1411,7 +1409,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_trait_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let mut item = configure!(self, item);\n \n         let (attr, traits, after_derive) = self.classify_item(&mut item);\n@@ -1420,24 +1418,28 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .collect_attr(\n                     attr,\n                     traits,\n-                    Annotatable::TraitItem(P(item)),\n+                    Annotatable::TraitItem(item),\n                     AstFragmentKind::TraitItems,\n                     after_derive,\n                 )\n                 .make_trait_items();\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::Macro(mac) => {\n-                let ast::AssocItem { attrs, span, .. } = item;\n-                self.check_attributes(&attrs);\n-                self.collect_bang(mac, span, AstFragmentKind::TraitItems).make_trait_items()\n+            ast::AssocItemKind::Macro(..) => {\n+                self.check_attributes(&item.attrs);\n+                item.and_then(|item| match item.kind {\n+                    ast::AssocItemKind::Macro(mac) => self\n+                        .collect_bang(mac, item.span, AstFragmentKind::TraitItems)\n+                        .make_trait_items(),\n+                    _ => unreachable!(),\n+                })\n             }\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_impl_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let mut item = configure!(self, item);\n \n         let (attr, traits, after_derive) = self.classify_item(&mut item);\n@@ -1446,18 +1448,22 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .collect_attr(\n                     attr,\n                     traits,\n-                    Annotatable::ImplItem(P(item)),\n+                    Annotatable::ImplItem(item),\n                     AstFragmentKind::ImplItems,\n                     after_derive,\n                 )\n                 .make_impl_items();\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::Macro(mac) => {\n-                let ast::AssocItem { attrs, span, .. } = item;\n-                self.check_attributes(&attrs);\n-                self.collect_bang(mac, span, AstFragmentKind::ImplItems).make_impl_items()\n+            ast::AssocItemKind::Macro(..) => {\n+                self.check_attributes(&item.attrs);\n+                item.and_then(|item| match item.kind {\n+                    ast::AssocItemKind::Macro(mac) => self\n+                        .collect_bang(mac, item.span, AstFragmentKind::ImplItems)\n+                        .make_impl_items(),\n+                    _ => unreachable!(),\n+                })\n             }\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n@@ -1482,30 +1488,34 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n     fn flat_map_foreign_item(\n         &mut self,\n-        mut foreign_item: ast::ForeignItem,\n-    ) -> SmallVec<[ast::ForeignItem; 1]> {\n+        mut foreign_item: P<ast::ForeignItem>,\n+    ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n         let (attr, traits, after_derive) = self.classify_item(&mut foreign_item);\n \n         if attr.is_some() || !traits.is_empty() {\n             return self\n                 .collect_attr(\n                     attr,\n                     traits,\n-                    Annotatable::ForeignItem(P(foreign_item)),\n+                    Annotatable::ForeignItem(foreign_item),\n                     AstFragmentKind::ForeignItems,\n                     after_derive,\n                 )\n                 .make_foreign_items();\n         }\n \n-        if let ast::ForeignItemKind::Macro(mac) = foreign_item.kind {\n-            self.check_attributes(&foreign_item.attrs);\n-            return self\n-                .collect_bang(mac, foreign_item.span, AstFragmentKind::ForeignItems)\n-                .make_foreign_items();\n+        match foreign_item.kind {\n+            ast::ForeignItemKind::Macro(..) => {\n+                self.check_attributes(&foreign_item.attrs);\n+                foreign_item.and_then(|item| match item.kind {\n+                    ast::ForeignItemKind::Macro(mac) => self\n+                        .collect_bang(mac, item.span, AstFragmentKind::ForeignItems)\n+                        .make_foreign_items(),\n+                    _ => unreachable!(),\n+                })\n+            }\n+            _ => noop_flat_map_foreign_item(foreign_item, self),\n         }\n-\n-        noop_flat_map_foreign_item(foreign_item, self)\n     }\n \n     fn visit_item_kind(&mut self, item: &mut ast::ItemKind) {"}, {"sha": "6bcb8f45f001e2b7b3fa0b901ddc393f50abddab", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -51,7 +51,7 @@ pub fn placeholder(\n             kind: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n         })]),\n-        AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::AssocItem {\n+        AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![P(ast::AssocItem {\n             id,\n             span,\n             ident,\n@@ -61,8 +61,8 @@ pub fn placeholder(\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n-        }]),\n-        AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::AssocItem {\n+        })]),\n+        AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![P(ast::AssocItem {\n             id,\n             span,\n             ident,\n@@ -72,16 +72,18 @@ pub fn placeholder(\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n-        }]),\n-        AstFragmentKind::ForeignItems => AstFragment::ForeignItems(smallvec![ast::ForeignItem {\n-            id,\n-            span,\n-            ident,\n-            vis,\n-            attrs,\n-            kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n-            tokens: None,\n-        }]),\n+        })]),\n+        AstFragmentKind::ForeignItems => {\n+            AstFragment::ForeignItems(smallvec![P(ast::ForeignItem {\n+                id,\n+                span,\n+                ident,\n+                vis,\n+                attrs,\n+                kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n+                tokens: None,\n+            })])\n+        }\n         AstFragmentKind::Pat => {\n             AstFragment::Pat(P(ast::Pat { id, span, kind: ast::PatKind::Mac(mac_placeholder()) }))\n         }\n@@ -250,21 +252,24 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         noop_flat_map_item(item, self)\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_trait_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         match item.kind {\n             ast::AssocItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_impl_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         match item.kind {\n             ast::AssocItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n-    fn flat_map_foreign_item(&mut self, item: ast::ForeignItem) -> SmallVec<[ast::ForeignItem; 1]> {\n+    fn flat_map_foreign_item(\n+        &mut self,\n+        item: P<ast::ForeignItem>,\n+    ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n         match item.kind {\n             ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n             _ => noop_flat_map_foreign_item(item, self),"}, {"sha": "00528eca9230111c5cc8a1777fd28542de412eaa", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -682,7 +682,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n     }\n \n-    fn flat_map_trait_item(&mut self, i: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n             ast::AssocItemKind::Fn(ref sig, _) => Self::is_sig_const(sig),\n@@ -691,7 +691,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n     }\n \n-    fn flat_map_impl_item(&mut self, i: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_impl_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         self.flat_map_trait_item(i)\n     }\n "}, {"sha": "da158e17f25e6d521938ed2003d6812efea75df6", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -531,11 +531,11 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         noop_flat_map_item(configure!(self, item), self)\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_impl_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+    fn flat_map_trait_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n "}, {"sha": "f170abac73a6378a23fa005a690c83f83ee31630", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -661,7 +661,7 @@ impl<'a> Parser<'a> {\n         Ok((Ident::invalid(), item_kind, Some(attrs)))\n     }\n \n-    fn parse_impl_body(&mut self) -> PResult<'a, (Vec<AssocItem>, Vec<Attribute>)> {\n+    fn parse_impl_body(&mut self) -> PResult<'a, (Vec<P<AssocItem>>, Vec<Attribute>)> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n         let attrs = self.parse_inner_attributes()?;\n \n@@ -786,12 +786,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n+    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n         maybe_whole!(self, NtImplItem, |x| x);\n         self.parse_assoc_item(at_end, |_| true)\n     }\n \n-    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n+    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n         maybe_whole!(self, NtTraitItem, |x| x);\n         // This is somewhat dubious; We don't want to allow\n         // param names to be left off if there is a definition...\n@@ -805,7 +805,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         at_end: &mut bool,\n         is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, AssocItem> {\n+    ) -> PResult<'a, P<AssocItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n@@ -818,7 +818,7 @@ impl<'a> Parser<'a> {\n         if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n             item.tokens = Some(tokens);\n         }\n-        Ok(item)\n+        Ok(P(item))\n     }\n \n     fn parse_assoc_item_(\n@@ -1064,7 +1064,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a foreign item.\n-    pub fn parse_foreign_item(&mut self, extern_sp: Span) -> PResult<'a, ForeignItem> {\n+    pub fn parse_foreign_item(&mut self, extern_sp: Span) -> PResult<'a, P<ForeignItem>> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n         let attrs = self.parse_outer_attributes()?;\n@@ -1112,15 +1112,15 @@ impl<'a> Parser<'a> {\n         }\n \n         match self.parse_assoc_macro_invoc(\"extern\", Some(&visibility), &mut false)? {\n-            Some(mac) => Ok(ForeignItem {\n+            Some(mac) => Ok(P(ForeignItem {\n                 ident: Ident::invalid(),\n                 span: lo.to(self.prev_span),\n                 id: DUMMY_NODE_ID,\n                 attrs,\n                 vis: visibility,\n                 kind: ForeignItemKind::Macro(mac),\n                 tokens: None,\n-            }),\n+            })),\n             None => {\n                 if !attrs.is_empty() {\n                     self.expected_item_err(&attrs)?;\n@@ -1138,22 +1138,22 @@ impl<'a> Parser<'a> {\n         vis: ast::Visibility,\n         lo: Span,\n         attrs: Vec<Attribute>,\n-    ) -> PResult<'a, ForeignItem> {\n+    ) -> PResult<'a, P<ForeignItem>> {\n         let mutbl = self.parse_mutability();\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         let hi = self.token.span;\n         self.expect_semi()?;\n-        Ok(ForeignItem {\n+        Ok(P(ForeignItem {\n             ident,\n             attrs,\n             kind: ForeignItemKind::Static(ty, mutbl),\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis,\n             tokens: None,\n-        })\n+        }))\n     }\n \n     /// Parses a type from a foreign module.\n@@ -1162,21 +1162,21 @@ impl<'a> Parser<'a> {\n         vis: ast::Visibility,\n         lo: Span,\n         attrs: Vec<Attribute>,\n-    ) -> PResult<'a, ForeignItem> {\n+    ) -> PResult<'a, P<ForeignItem>> {\n         self.expect_keyword(kw::Type)?;\n \n         let ident = self.parse_ident()?;\n         let hi = self.token.span;\n         self.expect_semi()?;\n-        Ok(ast::ForeignItem {\n+        Ok(P(ast::ForeignItem {\n             ident,\n             attrs,\n             kind: ForeignItemKind::Ty,\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis,\n             tokens: None,\n-        })\n+        }))\n     }\n \n     fn is_static_global(&mut self) -> bool {\n@@ -1740,21 +1740,21 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         attrs: Vec<Attribute>,\n         extern_sp: Span,\n-    ) -> PResult<'a, ForeignItem> {\n+    ) -> PResult<'a, P<ForeignItem>> {\n         self.expect_keyword(kw::Fn)?;\n         let (ident, decl, generics) =\n             self.parse_fn_sig(ParamCfg { is_self_allowed: false, is_name_required: |_| true })?;\n         let span = lo.to(self.token.span);\n         self.parse_semi_or_incorrect_foreign_fn_body(&ident, extern_sp)?;\n-        Ok(ast::ForeignItem {\n+        Ok(P(ast::ForeignItem {\n             ident,\n             attrs,\n             kind: ForeignItemKind::Fn(decl, generics),\n             id: DUMMY_NODE_ID,\n             span,\n             vis,\n             tokens: None,\n-        })\n+        }))\n     }\n \n     fn parse_assoc_fn("}, {"sha": "f1622af130e77c68c115de63d1ace0861192df02", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// When evaluating a `trait` use its associated types' idents for suggestionsa in E0412.\n     fn with_trait_items<T>(\n         &mut self,\n-        trait_items: &Vec<AssocItem>,\n+        trait_items: &Vec<P<AssocItem>>,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n         let trait_assoc_types = replace(\n@@ -1084,7 +1084,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         opt_trait_reference: &'ast Option<TraitRef>,\n         self_type: &'ast Ty,\n         item_id: NodeId,\n-        impl_items: &'ast [AssocItem],\n+        impl_items: &'ast [P<AssocItem>],\n     ) {\n         debug!(\"resolve_implementation\");\n         // If applicable, create a rib for the type parameters."}, {"sha": "2e3e06c36f22b8c9f2597c07ea7bfd0ac9754b25", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -650,7 +650,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         generics: &'l ast::Generics,\n         trait_ref: &'l Option<ast::TraitRef>,\n         typ: &'l ast::Ty,\n-        impl_items: &'l [ast::AssocItem],\n+        impl_items: &'l [P<ast::AssocItem>],\n     ) {\n         if let Some(impl_data) = self.save_ctxt.get_item_data(item) {\n             if !self.span.filter_generated(item.span) {\n@@ -681,7 +681,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         item: &'l ast::Item,\n         generics: &'l ast::Generics,\n         trait_refs: &'l ast::GenericBounds,\n-        methods: &'l [ast::AssocItem],\n+        methods: &'l [P<ast::AssocItem>],\n     ) {\n         let name = item.ident.to_string();\n         let qualname = format!("}, {"sha": "db4fd53fe1697f20434f3c5cd504695612f1016a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -2243,7 +2243,7 @@ pub struct Mod {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n     pub abi: Option<StrLit>,\n-    pub items: Vec<ForeignItem>,\n+    pub items: Vec<P<ForeignItem>>,\n }\n \n /// Global inline assembly.\n@@ -2605,7 +2605,7 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<AssocItem>),\n+    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<P<AssocItem>>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n@@ -2624,7 +2624,7 @@ pub enum ItemKind {\n         of_trait: Option<TraitRef>,\n \n         self_ty: P<Ty>,\n-        items: Vec<AssocItem>,\n+        items: Vec<P<AssocItem>>,\n     },\n     /// A macro invocation.\n     ///"}, {"sha": "e9e1675b9b06ebae58b1b25ff70ec60adf48b498", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -82,7 +82,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_use_tree(use_tree, self);\n     }\n \n-    fn flat_map_foreign_item(&mut self, ni: ForeignItem) -> SmallVec<[ForeignItem; 1]> {\n+    fn flat_map_foreign_item(&mut self, ni: P<ForeignItem>) -> SmallVec<[P<ForeignItem>; 1]> {\n         noop_flat_map_foreign_item(ni, self)\n     }\n \n@@ -102,11 +102,11 @@ pub trait MutVisitor: Sized {\n         noop_visit_item_kind(i, self);\n     }\n \n-    fn flat_map_trait_item(&mut self, i: AssocItem) -> SmallVec<[AssocItem; 1]> {\n+    fn flat_map_trait_item(&mut self, i: P<AssocItem>) -> SmallVec<[P<AssocItem>; 1]> {\n         noop_flat_map_assoc_item(i, self)\n     }\n \n-    fn flat_map_impl_item(&mut self, i: AssocItem) -> SmallVec<[AssocItem; 1]> {\n+    fn flat_map_impl_item(&mut self, i: P<AssocItem>) -> SmallVec<[P<AssocItem>; 1]> {\n         noop_flat_map_assoc_item(i, self)\n     }\n \n@@ -947,11 +947,11 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n }\n \n pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n-    mut item: AssocItem,\n+    mut item: P<AssocItem>,\n     visitor: &mut T,\n-) -> SmallVec<[AssocItem; 1]> {\n+) -> SmallVec<[P<AssocItem>; 1]> {\n     let AssocItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n-        &mut item;\n+        item.deref_mut();\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n@@ -1036,10 +1036,10 @@ pub fn noop_flat_map_item<T: MutVisitor>(\n }\n \n pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n-    mut item: ForeignItem,\n+    mut item: P<ForeignItem>,\n     visitor: &mut T,\n-) -> SmallVec<[ForeignItem; 1]> {\n-    let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = &mut item;\n+) -> SmallVec<[P<ForeignItem>; 1]> {\n+    let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n     visitor.visit_ident(ident);\n     visit_attrs(attrs, visitor);\n     match kind {"}, {"sha": "c826b728f8004a14b067991e223f4e4f2be05767", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69fe8308a76630a104504c14e1d3d74e2a3f15/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=0d69fe8308a76630a104504c14e1d3d74e2a3f15", "patch": "@@ -680,11 +680,15 @@ pub enum Nonterminal {\n     // Used only for passing items to proc macro attributes (they are not\n     // strictly necessary for that, `Annotatable` can be converted into\n     // tokens directly, but doing that naively regresses pretty-printing).\n-    NtTraitItem(ast::AssocItem),\n-    NtImplItem(ast::AssocItem),\n-    NtForeignItem(ast::ForeignItem),\n+    NtTraitItem(P<ast::AssocItem>),\n+    NtImplItem(P<ast::AssocItem>),\n+    NtForeignItem(P<ast::ForeignItem>),\n }\n \n+// `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+rustc_data_structures::static_assert_size!(Nonterminal, 72);\n+\n impl PartialEq for Nonterminal {\n     fn eq(&self, rhs: &Self) -> bool {\n         match (self, rhs) {"}]}