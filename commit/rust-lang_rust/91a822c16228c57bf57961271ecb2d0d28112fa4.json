{"sha": "91a822c16228c57bf57961271ecb2d0d28112fa4", "node_id": "C_kwDOAAsO6NoAKDkxYTgyMmMxNjIyOGM1N2JmNTc5NjEyNzFlY2IyZDBkMjgxMTJmYTQ", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-06T01:39:54Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-06T13:31:27Z"}, "message": "Address `unnecessary_to_owned` false positive", "tree": {"sha": "ffbd95e004cd5f7147275e06571e25d688e331bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbd95e004cd5f7147275e06571e25d688e331bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a822c16228c57bf57961271ecb2d0d28112fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a822c16228c57bf57961271ecb2d0d28112fa4", "html_url": "https://github.com/rust-lang/rust/commit/91a822c16228c57bf57961271ecb2d0d28112fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a822c16228c57bf57961271ecb2d0d28112fa4/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95f8b2600240022f0a82e703b35d4bc14a42eb1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f8b2600240022f0a82e703b35d4bc14a42eb1b", "html_url": "https://github.com/rust-lang/rust/commit/95f8b2600240022f0a82e703b35d4bc14a42eb1b"}], "stats": {"total": 205, "additions": 160, "deletions": 45}, "files": [{"sha": "1f426979c4a0b69864c9ec49fc2adb18f96833af", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/91a822c16228c57bf57961271ecb2d0d28112fa4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a822c16228c57bf57961271ecb2d0d28112fa4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=91a822c16228c57bf57961271ecb2d0d28112fa4", "patch": "@@ -65,13 +65,12 @@ fn check_addr_of_expr(\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, _) = parent.kind;\n         let adjustments = cx.typeck_results().expr_adjustments(parent).iter().collect::<Vec<_>>();\n-        if let Some(target_ty) = match adjustments[..]\n-        {\n+        if let\n             // For matching uses of `Cow::from`\n             [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Borrow(_),\n@@ -82,7 +81,7 @@ fn check_addr_of_expr(\n             | [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Borrow(_),\n@@ -97,7 +96,7 @@ fn check_addr_of_expr(\n             | [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Deref(Some(OverloadedDeref { .. })),\n@@ -107,17 +106,24 @@ fn check_addr_of_expr(\n                     kind: Adjust::Borrow(_),\n                     target: target_ty,\n                 },\n-            ] => Some(target_ty),\n-            _ => None,\n-        };\n+            ] = adjustments[..];\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n-        // Only flag cases where the receiver is copyable or the method is `Cow::into_owned`. This\n-        // restriction is to ensure there is not overlap between `redundant_clone` and this lint.\n-        if is_copy(cx, receiver_ty) || is_cow_into_owned(cx, method_name, method_def_id);\n+        let (target_ty, n_target_refs) = peel_mid_ty_refs(*target_ty);\n+        let (receiver_ty, n_receiver_refs) = peel_mid_ty_refs(receiver_ty);\n+        // Only flag cases satisfying at least one of the following three conditions:\n+        // * the referent and receiver types are distinct\n+        // * the referent/receiver type is a copyable array\n+        // * the method is `Cow::into_owned`\n+        // This restriction is to ensure there is no overlap between `redundant_clone` and this\n+        // lint. It also avoids the following false positive:\n+        //  https://github.com/rust-lang/rust-clippy/issues/8759\n+        //   Arrays are a bit of a corner case. Non-copyable arrays are handled by\n+        // `redundant_clone`, but copyable arrays are not.\n+        if *referent_ty != receiver_ty\n+            || (matches!(referent_ty.kind(), ty::Array(..)) && is_copy(cx, *referent_ty))\n+            || is_cow_into_owned(cx, method_name, method_def_id);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n-            let (target_ty, n_target_refs) = peel_mid_ty_refs(*target_ty);\n-            let (receiver_ty, n_receiver_refs) = peel_mid_ty_refs(receiver_ty);\n             if receiver_ty == target_ty && n_target_refs >= n_receiver_refs {\n                 span_lint_and_sugg(\n                     cx,\n@@ -207,7 +213,11 @@ fn check_into_iter_call_arg(\n             if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) { \"copied\" } else { \"cloned\" };\n+            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) {\n+                \"copied\"\n+            } else {\n+                \"cloned\"\n+            };\n             // The next suggestion may be incorrect because the removal of the `to_owned`-like\n             // function could cause the iterator to hold a reference to a resource that is used\n             // mutably. See https://github.com/rust-lang/rust-clippy/issues/8148."}, {"sha": "1a717ac92d8b7dac1dc6e256b39154ff42cec043", "filename": "tests/ui/recursive_format_impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Frecursive_format_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Frecursive_format_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursive_format_impl.stderr?ref=91a822c16228c57bf57961271ecb2d0d28112fa4", "patch": "@@ -6,15 +6,6 @@ LL |         write!(f, \"{}\", self.to_string())\n    |\n    = note: `-D clippy::recursive-format-impl` implied by `-D warnings`\n \n-error: unnecessary use of `to_string`\n-  --> $DIR/recursive_format_impl.rs:61:50\n-   |\n-LL |             Self::E(string) => write!(f, \"E {}\", string.to_string()),\n-   |                                                  ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unnecessary-to-owned` implied by `-D warnings`\n-   = note: this error originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n   --> $DIR/recursive_format_impl.rs:73:9\n    |\n@@ -87,5 +78,5 @@ LL |         write!(f, \"{}\", &&**&&*self)\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "f4f76cd3dd493e159a656fe95276b2a41002299b", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=91a822c16228c57bf57961271ecb2d0d28112fa4", "patch": "@@ -78,10 +78,10 @@ fn main() {\n     require_slice(array.as_ref());\n     require_slice(array_ref.as_ref());\n     require_slice(slice);\n-    require_slice(x_ref);\n+    require_slice(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_x(&Cow::<X>::Owned(x.clone()));\n-    require_x(x_ref);\n+    require_x(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_deref_c_str(c_str);\n     require_deref_os_str(os_str);\n@@ -152,6 +152,7 @@ fn main() {\n     require_os_str(&OsString::from(\"x\"));\n     require_path(&std::path::PathBuf::from(\"x\"));\n     require_str(&String::from(\"x\"));\n+    require_slice(&[String::from(\"x\")]);\n }\n \n fn require_c_str(_: &CStr) {}\n@@ -272,3 +273,59 @@ mod issue_8507 {\n         Box::new(build(y))\n     }\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8759\n+mod issue_8759 {\n+    #![allow(dead_code)]\n+\n+    #[derive(Default)]\n+    struct View {}\n+\n+    impl std::borrow::ToOwned for View {\n+        type Owned = View;\n+        fn to_owned(&self) -> Self::Owned {\n+            View {}\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}\n+\n+mod issue_8759_variant {\n+    #![allow(dead_code)]\n+\n+    #[derive(Clone, Default)]\n+    struct View {}\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}"}, {"sha": "fe09a489ab0a67b81cf5280f3dc8b9c1140aa061", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=91a822c16228c57bf57961271ecb2d0d28112fa4", "patch": "@@ -78,10 +78,10 @@ fn main() {\n     require_slice(&array.to_owned());\n     require_slice(&array_ref.to_owned());\n     require_slice(&slice.to_owned());\n-    require_slice(&x_ref.to_owned());\n+    require_slice(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_x(&Cow::<X>::Owned(x.clone()).into_owned());\n-    require_x(&x_ref.to_owned());\n+    require_x(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_deref_c_str(c_str.to_owned());\n     require_deref_os_str(os_str.to_owned());\n@@ -152,6 +152,7 @@ fn main() {\n     require_os_str(&OsString::from(\"x\").to_os_string());\n     require_path(&std::path::PathBuf::from(\"x\").to_path_buf());\n     require_str(&String::from(\"x\").to_string());\n+    require_slice(&[String::from(\"x\")].to_owned());\n }\n \n fn require_c_str(_: &CStr) {}\n@@ -272,3 +273,59 @@ mod issue_8507 {\n         Box::new(build(y.to_string()))\n     }\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8759\n+mod issue_8759 {\n+    #![allow(dead_code)]\n+\n+    #[derive(Default)]\n+    struct View {}\n+\n+    impl std::borrow::ToOwned for View {\n+        type Owned = View;\n+        fn to_owned(&self) -> Self::Owned {\n+            View {}\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}\n+\n+mod issue_8759_variant {\n+    #![allow(dead_code)]\n+\n+    #[derive(Clone, Default)]\n+    struct View {}\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}"}, {"sha": "af7e7b41fb0045a6a44652a20ce60436e05a62b4", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91a822c16228c57bf57961271ecb2d0d28112fa4/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=91a822c16228c57bf57961271ecb2d0d28112fa4", "patch": "@@ -47,6 +47,18 @@ note: this value is dropped without further use\n LL |     require_str(&String::from(\"x\").to_string());\n    |                  ^^^^^^^^^^^^^^^^^\n \n+error: redundant clone\n+  --> $DIR/unnecessary_to_owned.rs:155:39\n+   |\n+LL |     require_slice(&[String::from(\"x\")].to_owned());\n+   |                                       ^^^^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/unnecessary_to_owned.rs:155:20\n+   |\n+LL |     require_slice(&[String::from(\"x\")].to_owned());\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n error: unnecessary use of `into_owned`\n   --> $DIR/unnecessary_to_owned.rs:60:36\n    |\n@@ -151,24 +163,12 @@ error: unnecessary use of `to_owned`\n LL |     require_slice(&slice.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^ help: use: `slice`\n \n-error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:81:19\n-   |\n-LL |     require_slice(&x_ref.to_owned());\n-   |                   ^^^^^^^^^^^^^^^^^ help: use: `x_ref`\n-\n error: unnecessary use of `into_owned`\n   --> $DIR/unnecessary_to_owned.rs:83:42\n    |\n LL |     require_x(&Cow::<X>::Owned(x.clone()).into_owned());\n    |                                          ^^^^^^^^^^^^^ help: remove this\n \n-error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:84:15\n-   |\n-LL |     require_x(&x_ref.to_owned());\n-   |               ^^^^^^^^^^^^^^^^^ help: use: `x_ref`\n-\n error: unnecessary use of `to_owned`\n   --> $DIR/unnecessary_to_owned.rs:86:25\n    |\n@@ -476,7 +476,7 @@ LL |     let _ = IntoIterator::into_iter([std::path::PathBuf::new()][..].to_owne\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:197:14\n+  --> $DIR/unnecessary_to_owned.rs:198:14\n    |\n LL |     for t in file_types.to_vec() {\n    |              ^^^^^^^^^^^^^^^^^^^\n@@ -492,22 +492,22 @@ LL +         let path = match get_file_path(t) {\n    | \n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:220:14\n+  --> $DIR/unnecessary_to_owned.rs:221:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:225:14\n+  --> $DIR/unnecessary_to_owned.rs:226:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().copied()`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:272:24\n+  --> $DIR/unnecessary_to_owned.rs:273:24\n    |\n LL |         Box::new(build(y.to_string()))\n    |                        ^^^^^^^^^^^^^ help: use: `y`\n \n-error: aborting due to 79 previous errors\n+error: aborting due to 78 previous errors\n "}]}