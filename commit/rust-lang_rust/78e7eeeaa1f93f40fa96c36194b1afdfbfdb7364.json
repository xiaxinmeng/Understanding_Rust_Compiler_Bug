{"sha": "78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTdlZWVhYTFmOTNmNDBmYTk2YzM2MTk0YjFhZmRmYmZkYjczNjQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-10-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-09T06:54:02Z"}, "message": "Remove sanitizer runtime crates", "tree": {"sha": "9adbb7788d951a29bdeaf2326c06eab82b9ff8db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9adbb7788d951a29bdeaf2326c06eab82b9ff8db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "html_url": "https://github.com/rust-lang/rust/commit/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adc65725004c8aac16392fe4052c3e347181157d", "url": "https://api.github.com/repos/rust-lang/rust/commits/adc65725004c8aac16392fe4052c3e347181157d", "html_url": "https://github.com/rust-lang/rust/commit/adc65725004c8aac16392fe4052c3e347181157d"}], "stats": {"total": 404, "additions": 0, "deletions": 404}, "files": [{"sha": "1470e2be75df86c4428fa7f47503a0d6e280afcc", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "patch": "@@ -3348,17 +3348,6 @@ dependencies = [\n  \"smallvec 1.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_asan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_ast_lowering\"\n version = \"0.0.0\"\n@@ -3680,17 +3669,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"rustc_lsan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_macros\"\n version = \"0.1.0\"\n@@ -3752,17 +3730,6 @@ dependencies = [\n  \"syntax\",\n ]\n \n-[[package]]\n-name = \"rustc_msan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_parse\"\n version = \"0.0.0\"\n@@ -3935,17 +3902,6 @@ dependencies = [\n  \"syntax\",\n ]\n \n-[[package]]\n-name = \"rustc_tsan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n@@ -4307,10 +4263,6 @@ dependencies = [\n  \"panic_unwind\",\n  \"profiler_builtins\",\n  \"rand 0.7.0\",\n- \"rustc_asan\",\n- \"rustc_lsan\",\n- \"rustc_msan\",\n- \"rustc_tsan\",\n  \"unwind\",\n  \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]"}, {"sha": "8d13df3ee21a49e2f179a68ae999d8cb041dca59", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "patch": "@@ -984,10 +984,6 @@ impl Step for Src {\n             \"src/libcore\",\n             \"src/libpanic_abort\",\n             \"src/libpanic_unwind\",\n-            \"src/librustc_asan\",\n-            \"src/librustc_lsan\",\n-            \"src/librustc_msan\",\n-            \"src/librustc_tsan\",\n             \"src/libstd\",\n             \"src/libunwind\",\n             \"src/libtest\","}, {"sha": "43c3c5773ce5b2d45cd32ee1157cf2d8ce0dc1b2", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "patch": "@@ -1,7 +1,5 @@\n-use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n-use std::thread;\n use std::time::{SystemTime, UNIX_EPOCH};\n use std::{env, fs};\n \n@@ -181,108 +179,6 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     }\n }\n \n-#[must_use]\n-pub struct NativeLibBoilerplate {\n-    pub src_dir: PathBuf,\n-    pub out_dir: PathBuf,\n-}\n-\n-impl NativeLibBoilerplate {\n-    /// On macOS we don't want to ship the exact filename that compiler-rt builds.\n-    /// This conflicts with the system and ours is likely a wildly different\n-    /// version, so they can't be substituted.\n-    ///\n-    /// As a result, we rename it here but we need to also use\n-    /// `install_name_tool` on macOS to rename the commands listed inside of it to\n-    /// ensure it's linked against correctly.\n-    pub fn fixup_sanitizer_lib_name(&self, sanitizer_name: &str) {\n-        if env::var(\"TARGET\").unwrap() != \"x86_64-apple-darwin\" {\n-            return;\n-        }\n-\n-        let dir = self.out_dir.join(\"build/lib/darwin\");\n-        let name = format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name);\n-        let src = dir.join(&format!(\"lib{}.dylib\", name));\n-        let new_name = format!(\"lib__rustc__{}.dylib\", name);\n-        let dst = dir.join(&new_name);\n-\n-        println!(\"{} => {}\", src.display(), dst.display());\n-        fs::rename(&src, &dst).unwrap();\n-        let status = Command::new(\"install_name_tool\")\n-            .arg(\"-id\")\n-            .arg(format!(\"@rpath/{}\", new_name))\n-            .arg(&dst)\n-            .status()\n-            .expect(\"failed to execute `install_name_tool`\");\n-        assert!(status.success());\n-    }\n-}\n-\n-impl Drop for NativeLibBoilerplate {\n-    fn drop(&mut self) {\n-        if !thread::panicking() {\n-            t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n-        }\n-    }\n-}\n-\n-// Perform standard preparations for native libraries that are build only once for all stages.\n-// Emit rerun-if-changed and linking attributes for Cargo, check if any source files are\n-// updated, calculate paths used later in actual build with CMake/make or C/C++ compiler.\n-// If Err is returned, then everything is up-to-date and further build actions can be skipped.\n-// Timestamps are created automatically when the result of `native_lib_boilerplate` goes out\n-// of scope, so all the build actions should be completed until then.\n-pub fn native_lib_boilerplate(\n-    src_dir: &Path,\n-    out_name: &str,\n-    link_name: &str,\n-    search_subdir: &str,\n-) -> Result<NativeLibBoilerplate, ()> {\n-    rerun_if_changed_anything_in_dir(src_dir);\n-\n-    let out_dir =\n-        env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or_else(|| env::var_os(\"OUT_DIR\").unwrap());\n-    let out_dir = PathBuf::from(out_dir).join(out_name);\n-    t!(fs::create_dir_all(&out_dir));\n-    if link_name.contains('=') {\n-        println!(\"cargo:rustc-link-lib={}\", link_name);\n-    } else {\n-        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n-    }\n-    println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n-\n-    let timestamp = out_dir.join(\"rustbuild.timestamp\");\n-    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(src_dir, &timestamp) {\n-        Ok(NativeLibBoilerplate { src_dir: src_dir.to_path_buf(), out_dir })\n-    } else {\n-        Err(())\n-    }\n-}\n-\n-pub fn sanitizer_lib_boilerplate(\n-    sanitizer_name: &str,\n-) -> Result<(NativeLibBoilerplate, String), ()> {\n-    let (link_name, search_path, apple) = match &*env::var(\"TARGET\").unwrap() {\n-        \"x86_64-unknown-linux-gnu\" => {\n-            (format!(\"clang_rt.{}-x86_64\", sanitizer_name), \"build/lib/linux\", false)\n-        }\n-        \"x86_64-apple-darwin\" => {\n-            (format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name), \"build/lib/darwin\", true)\n-        }\n-        _ => return Err(()),\n-    };\n-    let to_link = if apple {\n-        format!(\"dylib=__rustc__{}\", link_name)\n-    } else {\n-        format!(\"static={}\", link_name)\n-    };\n-    // This env var is provided by rustbuild to tell us where `compiler-rt`\n-    // lives.\n-    let dir = env::var_os(\"RUST_COMPILER_RT_ROOT\").unwrap();\n-    let lib = native_lib_boilerplate(dir.as_ref(), sanitizer_name, &to_link, search_path)?;\n-    Ok((lib, link_name))\n-}\n-\n fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "df117de8720e067142a0b0c18ddee60bbf1919ed", "filename": "src/librustc_asan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_asan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_asan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "e276dc16c35eee447bab6e79112eb297a5013a27", "filename": "src/librustc_asan/build.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,30 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-        native.fixup_sanitizer_lib_name(\"asan\");\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_asan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "9a24361f44e6443feda59965d374de0b5a80337e", "filename": "src/librustc_lsan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_lsan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_lsan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "6201bc9356dce50bcdb8ea692ae9422f8cf8d3b8", "filename": "src/librustc_lsan/build.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,29 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_lsan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "bda4078572501d937cc2b55692633f22026c42bf", "filename": "src/librustc_msan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_msan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_msan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "dc08d51b51cb06f1058402b0760653a14e645543", "filename": "src/librustc_msan/build.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,29 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_msan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "82045dd0cddc7811bcef0458e8cb5fd7b042929c", "filename": "src/librustc_tsan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_tsan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_tsan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "570642a2eaa7645946c4bf11b85a52e13e25e206", "filename": "src/librustc_tsan/build.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,30 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-        native.fixup_sanitizer_lib_name(\"tsan\");\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_tsan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "c9ff93eac0295f3f2db15754a22ccf2631d14f43", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=78e7eeeaa1f93f40fa96c36194b1afdfbfdb7364", "patch": "@@ -34,16 +34,6 @@ features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into li\n [dev-dependencies]\n rand = \"0.7\"\n \n-[target.x86_64-apple-darwin.dependencies]\n-rustc_asan = { path = \"../librustc_asan\" }\n-rustc_tsan = { path = \"../librustc_tsan\" }\n-\n-[target.x86_64-unknown-linux-gnu.dependencies]\n-rustc_asan = { path = \"../librustc_asan\" }\n-rustc_lsan = { path = \"../librustc_lsan\" }\n-rustc_msan = { path = \"../librustc_msan\" }\n-rustc_tsan = { path = \"../librustc_tsan\" }\n-\n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n "}]}