{"sha": "d2584e3b6aa8ed60f291d71a86f849a7f667c2fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTg0ZTNiNmFhOGVkNjBmMjkxZDcxYTg2Zjg0OWE3ZjY2N2MyZmQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-01T02:53:27Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-01T02:53:27Z"}, "message": "Only track 'visited' state for function types", "tree": {"sha": "e77761e43196858fdd52a3812e609851358313f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77761e43196858fdd52a3812e609851358313f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyhfTEACgkQtAh+UQ6Y\nsWRdNQ/+LfRilMtgkNJkBMM42P6KYwv1vM/FWHBnx4QIJ4PrutY2WMCRZSyXVz3C\nSAgcwLRqx8jEDBhjWcSBx5a5MnbuM4yK8EY2Tr06vyE6E/q1IV3y6RlU3zcqaXYV\nCaMrmBqaqGUdOBmM3sT1ABbn5hC/xNAYob51zaHN3HSeZVmFZGot89s1i+7d7HaF\nGUnCopE/mKGRtsk20ErxMwemarYTeoLC8bMWcfL61ZpfJtApDdcUhflSxouR4c6U\nnpFjSYwMDJD8J7zWhUeLzzMGcxR5OyEwZEoRkkP0M7CbtT/YE+V30zhTgynp5KMi\n0b8KFhi53e8N1Mj7yllpraYhQQ+4VgUV1wZay4C8QHEyKMA+ENlOUGFN5J+ZLqh0\n1qlFCvh4+FedDvP1Csv43h3kzUEowYulJcYowP1p4Bp6ro6NbuHV1iHBq84VWtJ8\nhjrVfWSoJSM43bWsiPhwPq/72/JCSAGygkmmM5zTBVrGsKMnKLx1FvfGRdBjI27D\njOrnyR7rvm0mRBXQdiGEDhB71h4BMiim0zf+7GyILnr0uJmB4pIs3zTUaHYcfWG2\n5oI9yk9SxpMgFlR+B4Hhc4DOIar+H347ZRyaXtYPjnyZH8vXpPJdXSQy7febAF8u\nA5e+uC2KOhZ9BPe8HVNRcIM1r1Q0cN55NjopwWWQLJxJXfJVkVY=\n=OTLQ\n-----END PGP SIGNATURE-----", "payload": "tree e77761e43196858fdd52a3812e609851358313f3\nparent c4556a5a656b70a8be726847f540c2184dec4ef4\nauthor Aaron Hill <aa1ronham@gmail.com> 1554087207 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1554087207 -0400\n\nOnly track 'visited' state for function types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd", "html_url": "https://github.com/rust-lang/rust/commit/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4556a5a656b70a8be726847f540c2184dec4ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4556a5a656b70a8be726847f540c2184dec4ef4", "html_url": "https://github.com/rust-lang/rust/commit/c4556a5a656b70a8be726847f540c2184dec4ef4"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "05c6c9877acd72ec8b97743691db4974565bc51b", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2584e3b6aa8ed60f291d71a86f849a7f667c2fd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=d2584e3b6aa8ed60f291d71a86f849a7f667c2fd", "patch": "@@ -31,24 +31,6 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                           output: &mut String,\n                                           visited: &mut FxHashSet<Ty<'tcx>>) {\n \n-    // We've encountered a weird 'recursive type'\n-    // Currently, the only way to generate such a type\n-    // is by using 'impl trait':\n-    //\n-    // fn foo() -> impl Copy { foo }\n-    //\n-    // There's not really a sensible name we can generate,\n-    // since we don't include 'impl trait' types (e.g. ty::Opaque)\n-    // in the output\n-    //\n-    // Since we need to generate *something*, we just\n-    // use a dummy string that should make it clear\n-    // that something unusual is going on\n-    if !visited.insert(t) {\n-        output.push_str(\"<recursive_type>\");\n-        return;\n-    }\n-\n     // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n     let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n@@ -141,6 +123,25 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n         },\n         ty::FnDef(..) | ty::FnPtr(_) => {\n+            // We've encountered a weird 'recursive type'\n+            // Currently, the only way to generate such a type\n+            // is by using 'impl trait':\n+            //\n+            // fn foo() -> impl Copy { foo }\n+            //\n+            // There's not really a sensible name we can generate,\n+            // since we don't include 'impl trait' types (e.g. ty::Opaque)\n+            // in the output\n+            //\n+            // Since we need to generate *something*, we just\n+            // use a dummy string that should make it clear\n+            // that something unusual is going on\n+            if !visited.insert(t) {\n+                output.push_str(\"<recursive_type>\");\n+                return;\n+            }\n+\n+\n             let sig = t.fn_sig(cx.tcx);\n             if sig.unsafety() == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n@@ -179,6 +180,18 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 output.push_str(\" -> \");\n                 push_debuginfo_type_name(cx, sig.output(), true, output, visited);\n             }\n+\n+\n+            // We only keep the type in 'visited'\n+            // for the duration of the body of this method.\n+            // It's fine for a particular function type\n+            // to show up multiple times in one overall type\n+            // (e.g. MyType<fn() -> u8, fn() -> u8>\n+            //\n+            // We only care about avoiding recursing\n+            // directly back to the type we're currentlu\n+            // processing\n+            visited.remove(t);\n         },\n         ty::Closure(..) => {\n             output.push_str(\"closure\");"}]}