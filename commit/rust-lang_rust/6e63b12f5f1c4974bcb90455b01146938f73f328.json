{"sha": "6e63b12f5f1c4974bcb90455b01146938f73f328", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNjNiMTJmNWYxYzQ5NzRiY2I5MDQ1NWIwMTE0NjkzOGY3M2YzMjg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-09T10:02:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:58Z"}, "message": "Remove some internal ~[] from several libraries.\n\nSome straggling instances of `~[]` across a few different libs. Also,\nremove some public ones from workcache.", "tree": {"sha": "bfc1e8dc7f11d423e7c74a40f5e20b11992af3c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc1e8dc7f11d423e7c74a40f5e20b11992af3c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e63b12f5f1c4974bcb90455b01146938f73f328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e63b12f5f1c4974bcb90455b01146938f73f328", "html_url": "https://github.com/rust-lang/rust/commit/6e63b12f5f1c4974bcb90455b01146938f73f328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e63b12f5f1c4974bcb90455b01146938f73f328/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cf4a188c220d1d36a153af19ede1eb43cace05", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cf4a188c220d1d36a153af19ede1eb43cace05", "html_url": "https://github.com/rust-lang/rust/commit/32cf4a188c220d1d36a153af19ede1eb43cace05"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "c605596b9629ea54432e15cfc8900cc21b73e5af", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -451,7 +451,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n         let options_to_remove = [~\"-O\", ~\"-g\", ~\"--debuginfo\"];\n         let new_options = split_maybe_args(options).move_iter()\n                                                    .filter(|x| !options_to_remove.contains(x))\n-                                                   .collect::<~[~str]>()\n+                                                   .collect::<Vec<~str>>()\n                                                    .connect(\" \");\n         Some(new_options)\n     }"}, {"sha": "ea5ffb9965a0f91fe4f05c5dfb3d40024593f98f", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -117,13 +117,13 @@ mod tests {\n             words.push(r.gen_vec::<u8>(range));\n         }\n         for _ in range(0, 20) {\n-            let mut input = ~[];\n+            let mut input = vec![];\n             for _ in range(0, 2000) {\n                 input.push_all(r.choose(words.as_slice()).as_slice());\n             }\n             debug!(\"de/inflate of {} bytes of random word-sequences\",\n                    input.len());\n-            let cmp = deflate_bytes(input).expect(\"deflation failed\");\n+            let cmp = deflate_bytes(input.as_slice()).expect(\"deflation failed\");\n             let out = inflate_bytes(cmp.as_slice()).expect(\"inflation failed\");\n             debug!(\"{} bytes deflated to {} ({:.1f}% size)\",\n                    input.len(), cmp.len(),"}, {"sha": "52fbcc0cb1cab659243401f1f1fc03b21f182a59", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -53,7 +53,7 @@\n //!\n //!     let program = args[0].clone();\n //!\n-//!     let opts = ~[\n+//!     let opts = [\n //!         optopt(\"o\", \"\", \"set output file name\", \"NAME\"),\n //!         optflag(\"h\", \"help\", \"print this help menu\")\n //!     ];"}, {"sha": "ca1fd2b560ec8689ee88741bb4887fbfba1cc0ae", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -31,6 +31,8 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n+#![deny(deprecated_owned_vector)]\n+\n use std::cell::Cell;\n use std::{cmp, os, path};\n use std::io::fs;\n@@ -245,26 +247,26 @@ impl Pattern {\n      */\n     pub fn new(pattern: &str) -> Pattern {\n \n-        let chars = pattern.chars().collect::<~[_]>();\n+        let chars = pattern.chars().collect::<Vec<_>>();\n         let mut tokens = Vec::new();\n         let mut i = 0;\n \n         while i < chars.len() {\n-            match chars[i] {\n+            match *chars.get(i) {\n                 '?' => {\n                     tokens.push(AnyChar);\n                     i += 1;\n                 }\n                 '*' => {\n                     // *, **, ***, ****, ... are all equivalent\n-                    while i < chars.len() && chars[i] == '*' {\n+                    while i < chars.len() && *chars.get(i) == '*' {\n                         i += 1;\n                     }\n                     tokens.push(AnySequence);\n                 }\n                 '[' => {\n \n-                    if i <= chars.len() - 4 && chars[i + 1] == '!' {\n+                    if i <= chars.len() - 4 && *chars.get(i + 1) == '!' {\n                         match chars.slice_from(i + 3).position_elem(&']') {\n                             None => (),\n                             Some(j) => {\n@@ -276,7 +278,7 @@ impl Pattern {\n                             }\n                         }\n                     }\n-                    else if i <= chars.len() - 3 && chars[i + 1] != '!' {\n+                    else if i <= chars.len() - 3 && *chars.get(i + 1) != '!' {\n                         match chars.slice_from(i + 2).position_elem(&']') {\n                             None => (),\n                             Some(j) => {"}, {"sha": "b57ab8d0f2fc84c1aefc409f50a8ec190c995944", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -190,7 +190,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                 } else {\n                     None\n                 })\n-                .collect::<~[&ast::Attribute]>();\n+                .collect::<Vec<&ast::Attribute>>();\n             for m in link_args.iter() {\n                 match m.value_str() {\n                     Some(linkarg) => e.sess.cstore.add_used_link_args(linkarg.get()),\n@@ -205,7 +205,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                 } else {\n                     None\n                 })\n-                .collect::<~[&ast::Attribute]>();\n+                .collect::<Vec<&ast::Attribute>>();\n             for m in link_args.iter() {\n                 match m.meta_item_list() {\n                     Some(items) => {"}, {"sha": "788b2a5e6cd320848a238eb207a6b19eaf04043b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -133,7 +133,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n             slice::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().filter(|l| stripped_filtered_line(*l).is_none());\n-                let text = lines.collect::<~[&str]>().connect(\"\\n\");\n+                let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n \n                 let buf = buf {\n                     data: text.as_bytes().as_ptr(),\n@@ -186,7 +186,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n                 Some(s) => s.to_lower().into_str(),\n                 None => s.to_owned()\n             }\n-        }).collect::<~[~str]>().connect(\"-\");\n+        }).collect::<Vec<~str>>().connect(\"-\");\n \n         let opaque = unsafe {&mut *(opaque as *mut my_opaque)};\n \n@@ -285,7 +285,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 let tests = &mut *(opaque as *mut ::test::Collector);\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n-                let text = lines.collect::<~[&str]>().connect(\"\\n\");\n+                let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n                 tests.add_test(text, should_fail, no_run, ignore);\n             })\n         }"}, {"sha": "9e5c8f05c5008d6abcb6dfc8e6a0fb55dbadc102", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -1205,8 +1205,8 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n                   it.name.get_ref().as_slice(),\n                   t.generics,\n                   parents));\n-    let required = t.methods.iter().filter(|m| m.is_req()).collect::<~[&clean::TraitMethod]>();\n-    let provided = t.methods.iter().filter(|m| !m.is_req()).collect::<~[&clean::TraitMethod]>();\n+    let required = t.methods.iter().filter(|m| m.is_req()).collect::<Vec<&clean::TraitMethod>>();\n+    let provided = t.methods.iter().filter(|m| !m.is_req()).collect::<Vec<&clean::TraitMethod>>();\n \n     if t.methods.len() == 0 {\n         try!(write!(w, \"\\\\{ \\\\}\"));\n@@ -1502,11 +1502,11 @@ fn render_methods(w: &mut Writer, it: &clean::Item) -> fmt::Result {\n                 let mut non_trait = v.iter().filter(|p| {\n                     p.ref0().trait_.is_none()\n                 });\n-                let non_trait = non_trait.collect::<~[&(clean::Impl, Option<~str>)]>();\n+                let non_trait = non_trait.collect::<Vec<&(clean::Impl, Option<~str>)>>();\n                 let mut traits = v.iter().filter(|p| {\n                     p.ref0().trait_.is_some()\n                 });\n-                let traits = traits.collect::<~[&(clean::Impl, Option<~str>)]>();\n+                let traits = traits.collect::<Vec<&(clean::Impl, Option<~str>)>>();\n \n                 if non_trait.len() > 0 {\n                     try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));"}, {"sha": "be1a17e3e31434a432dd34e6687f5247c9723310", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -161,12 +161,12 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n }\n \n /// Run any tests/code examples in the markdown file `input`.\n-pub fn test(input: &str, libs: HashSet<Path>, mut test_args: ~[~str]) -> int {\n+pub fn test(input: &str, libs: HashSet<Path>, mut test_args: Vec<~str>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n     let mut collector = Collector::new(input.to_owned(), libs, true, true);\n     find_testable_code(input_str, &mut collector);\n     test_args.unshift(~\"rustdoctest\");\n-    testing::test_main(test_args, collector.tests);\n+    testing::test_main(test_args.as_slice(), collector.tests);\n     0\n }"}, {"sha": "3ea58a71cfe3ce59b2ce9d5e2b213170a0145563", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -31,15 +31,15 @@ pub struct Guard<'a> {\n }\n \n struct Inner {\n-    queue: ~[BlockedTask],\n+    queue: Vec<BlockedTask>,\n     held: bool,\n }\n \n impl Access {\n     pub fn new() -> Access {\n         Access {\n             inner: UnsafeArc::new(Inner {\n-                queue: ~[],\n+                queue: vec![],\n                 held: false,\n             })\n         }"}, {"sha": "f6c138b8c669d3afd7e528af93125473d687ca97", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -170,14 +170,14 @@ impl<'a> Stats for &'a [f64] {\n     // FIXME #11059 handle NaN, inf and overflow\n     #[allow(deprecated_owned_vector)]\n     fn sum(self) -> f64 {\n-        let mut partials : ~[f64] = ~[];\n+        let mut partials = vec![];\n \n         for &mut x in self.iter() {\n             let mut j = 0;\n             // This inner loop applies `hi`/`lo` summation to each\n             // partial so that the list of partial sums remains exact.\n             for i in range(0, partials.len()) {\n-                let mut y = partials[i];\n+                let mut y = *partials.get(i);\n                 if num::abs(x) < num::abs(y) {\n                     mem::swap(&mut x, &mut y);\n                 }\n@@ -186,15 +186,15 @@ impl<'a> Stats for &'a [f64] {\n                 let hi = x + y;\n                 let lo = y - (hi - x);\n                 if lo != 0f64 {\n-                    partials[j] = lo;\n+                    *partials.get_mut(j) = lo;\n                     j += 1;\n                 }\n                 x = hi;\n             }\n             if j >= partials.len() {\n                 partials.push(x);\n             } else {\n-                partials[j] = x;\n+                *partials.get_mut(j) = x;\n                 partials.truncate(j+1);\n             }\n         }"}, {"sha": "623488ac6129d148e9509dc2925b8af998881e20", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -17,6 +17,7 @@\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n #![feature(phase)]\n #![allow(visible_private_types)]\n+#![deny(deprecated_owned_vector)]\n \n #[phase(syntax, link)] extern crate log;\n extern crate serialize;\n@@ -319,8 +320,8 @@ impl Exec {\n     }\n \n     // returns pairs of (kind, name)\n-    pub fn lookup_discovered_inputs(&self) -> ~[(~str, ~str)] {\n-        let mut rs = ~[];\n+    pub fn lookup_discovered_inputs(&self) -> Vec<(~str, ~str)> {\n+        let mut rs = vec![];\n         let WorkMap(ref discovered_inputs) = self.discovered_inputs;\n         for (k, v) in discovered_inputs.iter() {\n             let KindMap(ref vmap) = *v;\n@@ -341,8 +342,8 @@ impl<'a> Prep<'a> {\n         }\n     }\n \n-    pub fn lookup_declared_inputs(&self) -> ~[~str] {\n-        let mut rs = ~[];\n+    pub fn lookup_declared_inputs(&self) -> Vec<~str> {\n+        let mut rs = vec![];\n         let WorkMap(ref declared_inputs) = self.declared_inputs;\n         for (_, v) in declared_inputs.iter() {\n             let KindMap(ref vmap) = *v;"}, {"sha": "49184e188ebb61fbcd08efb0e93a91f3028c18b9", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63b12f5f1c4974bcb90455b01146938f73f328/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=6e63b12f5f1c4974bcb90455b01146938f73f328", "patch": "@@ -76,7 +76,7 @@ fn main() {\n                 format!(\"{}\\t trees of depth {}\\t check: {}\",\n                         iterations * 2, depth, chk)\n             })\n-        }).collect::<~[Future<~str>]>();\n+        }).collect::<Vec<Future<~str>>>();\n \n     for message in messages.mut_iter() {\n         println!(\"{}\", *message.get_ref());"}]}