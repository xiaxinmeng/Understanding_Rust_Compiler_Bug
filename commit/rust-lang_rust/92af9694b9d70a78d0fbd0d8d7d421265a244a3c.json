{"sha": "92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYWY5Njk0YjlkNzBhNzhkMGZiZDBkOGQ3ZDQyMTI2NWEyNDRhM2M=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-13T12:27:55Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:36Z"}, "message": "rustc_codegen_llvm: use safe mutable references for output parameters.", "tree": {"sha": "c43714f60e7eb234dadc6976113a7aa5d2d403f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43714f60e7eb234dadc6976113a7aa5d2d403f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "html_url": "https://github.com/rust-lang/rust/commit/92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92af9694b9d70a78d0fbd0d8d7d421265a244a3c/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "html_url": "https://github.com/rust-lang/rust/commit/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "fffb3561744f7bcaec0a868ddd447e72f7500ae1", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92af9694b9d70a78d0fbd0d8d7d421265a244a3c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af9694b9d70a78d0fbd0d8d7d421265a244a3c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "patch": "@@ -273,7 +273,7 @@ pub fn const_get_real(v: &'ll Value) -> Option<(f64, bool)> {\n     unsafe {\n         if is_const_real(v) {\n             let mut loses_info: llvm::Bool = ::std::mem::uninitialized();\n-            let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info as *mut llvm::Bool);\n+            let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info);\n             let loses_info = if loses_info == 1 { true } else { false };\n             Some((r, loses_info))\n         } else {\n@@ -311,7 +311,7 @@ pub fn const_to_opt_u128(v: &'ll Value, sign_ext: bool) -> Option<u128> {\n         if is_const_integral(v) {\n             let (mut lo, mut hi) = (0u64, 0u64);\n             let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n-                                                       &mut hi as *mut u64, &mut lo as *mut u64);\n+                                                       &mut hi, &mut lo);\n             if success {\n                 Some(hi_lo_to_u128(lo, hi))\n             } else {"}, {"sha": "d55466726c2fa78fd34fd1c860cd4a9b7c9c0f37", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92af9694b9d70a78d0fbd0d8d7d421265a244a3c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af9694b9d70a78d0fbd0d8d7d421265a244a3c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "patch": "@@ -559,8 +559,8 @@ extern \"C\" {\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n-                                  high: *mut u64, low: *mut u64) -> bool;\n-    pub fn LLVMConstRealGetDouble (ConstantVal: &Value, losesInfo: *mut Bool) -> f64;\n+                                  high: &mut u64, low: &mut u64) -> bool;\n+    pub fn LLVMConstRealGetDouble (ConstantVal: &Value, losesInfo: &mut Bool) -> f64;\n \n \n     // Operations on composite constants\n@@ -1470,13 +1470,13 @@ extern \"C\" {\n     pub fn LLVMRustOpenArchive(path: *const c_char) -> Option<&'static mut Archive>;\n     pub fn LLVMRustArchiveIteratorNew(AR: &Archive) -> ArchiveIteratorRef;\n     pub fn LLVMRustArchiveIteratorNext(AIR: ArchiveIteratorRef) -> ArchiveChildRef;\n-    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef, size: &mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef, size: &mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildFree(ACR: ArchiveChildRef);\n     pub fn LLVMRustArchiveIteratorFree(AIR: ArchiveIteratorRef);\n     pub fn LLVMRustDestroyArchive(AR: &'static mut Archive);\n \n-    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: *mut *const c_char) -> size_t;\n+    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: &mut *const c_char) -> size_t;\n \n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n \n@@ -1492,9 +1492,9 @@ extern \"C\" {\n                                                 loc_filename_out: &RustString,\n                                                 message_out: &RustString);\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: &'a DiagnosticInfo,\n-                                             cookie_out: *mut c_uint,\n-                                             message_out: *mut Option<&'a Twine>,\n-                                             instruction_out: *mut Option<&'a Value>);\n+                                             cookie_out: &mut c_uint,\n+                                             message_out: &mut Option<&'a Twine>,\n+                                             instruction_out: &mut Option<&'a Value>);\n \n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n@@ -1572,8 +1572,8 @@ extern \"C\" {\n         Identifier: *const c_char,\n     ) -> Option<&Module>;\n     pub fn LLVMRustThinLTOGetDICompileUnit(M: &Module,\n-                                           CU1: *mut *mut c_void,\n-                                           CU2: *mut *mut c_void);\n+                                           CU1: &mut *mut c_void,\n+                                           CU2: &mut *mut c_void);\n     pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &Module) -> LinkerRef;"}]}