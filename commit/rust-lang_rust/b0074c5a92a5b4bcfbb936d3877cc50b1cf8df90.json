{"sha": "b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDc0YzVhOTJhNWI0YmNmYmI5MzZkMzg3N2NjNTBiMWNmOGRmOTA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T23:19:53Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T23:21:15Z"}, "message": "Disallow rebinding / matching against consts in alts\n\nAs per Issue #1193. Closes #1193.\n\nI had to rename a few variables (\"info\" and \"epsilon\") to avoid\nclashing with in-scope constants, which is responsible for all the\nchanges other than resolve and issue-1193.rs.", "tree": {"sha": "d79108d6f249656a04dd451b9b44fe6e900eb0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d79108d6f249656a04dd451b9b44fe6e900eb0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "html_url": "https://github.com/rust-lang/rust/commit/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e51196f3356ebcc854522a240921d33d95886b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e51196f3356ebcc854522a240921d33d95886b3", "html_url": "https://github.com/rust-lang/rust/commit/1e51196f3356ebcc854522a240921d33d95886b3"}], "stats": {"total": 113, "additions": 65, "deletions": 48}, "files": [{"sha": "5730c6562272ec1f31dc2f5b6fc96c937f5eb072", "filename": "src/libcore/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -51,10 +51,10 @@ fn to_str_common(num: float, digits: uint, exact: bool) -> str {\n     if (frac < epsilon && !exact) || digits == 0u { ret accum; }\n     accum += \".\";\n     let mut i = digits;\n-    let mut epsilon = 1. / pow_with_uint(10u, i);\n-    while i > 0u && (frac >= epsilon || exact) {\n+    let mut epsilon_prime = 1. / pow_with_uint(10u, i);\n+    while i > 0u && (frac >= epsilon_prime || exact) {\n         frac *= 10.0;\n-        epsilon *= 10.0;\n+        epsilon_prime *= 10.0;\n         let digit = frac as uint;\n         accum += uint::str(digit);\n         frac -= digit as float;"}, {"sha": "209e9e50c1d601db1a43d951b2d8834d688ad4bf", "filename": "src/librustsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fexpand.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -34,9 +34,8 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                   some(normal({expander: exp, span: exp_sp})) {\n                     let expanded = exp(cx, pth.span, args, body);\n \n-                    let info = {call_site: s,\n-                                callie: {name: extname, span: exp_sp}};\n-                    cx.bt_push(expanded_from(info));\n+                    cx.bt_push(expanded_from({call_site: s,\n+                                callie: {name: extname, span: exp_sp}}));\n                     //keep going, outside-in\n                     let fully_expanded = fld.fold_expr(expanded).node;\n                     cx.bt_pop();"}, {"sha": "5a15529e7752b7d1c966dd553c31563db5e2119b", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -500,19 +500,23 @@ fn resolve_names(e: @env, c: @ast::crate) {\n               }\n               _ {\n                 e.sess.span_err(p.span,\n-                                \"not a enum variant: \" +\n+                                \"not an enum variant: \" +\n                                     ast_util::path_name(p));\n               }\n             }\n           }\n           /* Here we determine whether a given pat_ident binds a new\n-           variable a refers to a nullary enum. */\n+           variable or refers to a nullary enum. */\n           ast::pat_ident(p, none) {\n               alt lookup_in_scope(*e, sc, p.span, path_to_ident(p),\n                                   ns_val, false) {\n                 some(fnd@ast::def_variant(_,_)) {\n                     e.def_map.insert(pat.id, fnd);\n                 }\n+                some(fnd@ast::def_const(_)) {\n+                    e.sess.span_err(p.span, \"Sorry, rebinding or matching \\\n+                      against symbolic constants is not allowed.\");\n+                }\n                 // Binds a var -- nothing needs to be done\n                 _ {}\n               }\n@@ -1446,16 +1450,16 @@ fn list_search<T: copy, U: copy>(ls: list<T>, f: fn(T) -> option<U>)\n \n fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n                        ns: namespace, dr: dir) -> option<def> {\n-    let info = alt e.mod_map.find(node_id) {\n+    let inf = alt e.mod_map.find(node_id) {\n             some(x) { x }\n             none { e.sess.span_bug(sp, #fmt(\"lookup_in_local_mod: \\\n                      module %d not in mod_map\", node_id)); }\n     };\n-    if dr == outside && !is_exported(e, id, info) {\n-        // if we're in a native mod, then dr==inside, so info.m is some _mod\n+    if dr == outside && !is_exported(e, id, inf) {\n+        // if we're in a native mod, then dr==inside, so inf.m is some _mod\n         ret none; // name is not visible\n     }\n-    alt info.index.find(id) {\n+    alt inf.index.find(id) {\n       none { }\n       some(lst) {\n         let found = list_search(lst, bind lookup_in_mie(e, _, ns));\n@@ -1465,7 +1469,7 @@ fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n       }\n     }\n     // not local or explicitly imported; try globs:\n-    ret lookup_glob_in_mod(e, info, sp, id, ns, outside);\n+    ret lookup_glob_in_mod(e, inf, sp, id, ns, outside);\n }\n \n fn lookup_in_globs(e: env, globs: [glob_imp_def], sp: span, id: ident,"}, {"sha": "add02f5615156ea3a804ed04ffd90df7108c6fbb", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -371,19 +371,19 @@ fn get_tydesc(ccx: @crate_ctxt, t: ty::t,\n               &static_ti: option<@tydesc_info>) -> ValueRef {\n     assert !ty::type_has_params(t);\n     // Otherwise, generate a tydesc if necessary, and return it.\n-    let info = get_static_tydesc(ccx, t);\n-    static_ti = some(info);\n-    info.tydesc\n+    let inf = get_static_tydesc(ccx, t);\n+    static_ti = some(inf);\n+    inf.tydesc\n }\n \n fn get_static_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     alt ccx.tydescs.find(t) {\n-      some(info) { ret info; }\n+      some(inf) { ret inf; }\n       none {\n         ccx.stats.n_static_tydescs += 1u;\n-        let info = declare_tydesc(ccx, t);\n-        ccx.tydescs.insert(t, info);\n-        ret info;\n+        let inf = declare_tydesc(ccx, t);\n+        ccx.tydescs.insert(t, inf);\n+        ret inf;\n       }\n     }\n }\n@@ -455,7 +455,7 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     let gvar = str::as_c_str(name, {|buf|\n         llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type, buf)\n     });\n-    let info =\n+    let inf =\n         @{ty: t,\n           tydesc: gvar,\n           size: llsize,\n@@ -464,7 +464,7 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n           mut drop_glue: none,\n           mut free_glue: none};\n     log(debug, \"--- declare_tydesc \" + ty_to_str(ccx.tcx, t));\n-    ret info;\n+    ret inf;\n }\n \n type glue_helper = fn@(block, ValueRef, ty::t);\n@@ -2870,8 +2870,8 @@ fn need_invoke(bcx: block) -> bool {\n     let mut cur = bcx;\n     loop {\n         alt cur.kind {\n-          block_scope(info) {\n-            for info.cleanups.each {|cleanup|\n+          block_scope(inf) {\n+            for inf.cleanups.each {|cleanup|\n                 alt cleanup {\n                   clean(_, cleanup_type) | clean_temp(_, _, cleanup_type) {\n                     if cleanup_type == normal_exit_and_unwind {\n@@ -2892,8 +2892,8 @@ fn need_invoke(bcx: block) -> bool {\n \n fn have_cached_lpad(bcx: block) -> bool {\n     let mut res = false;\n-    in_lpad_scope_cx(bcx) {|info|\n-        alt info.landing_pad {\n+    in_lpad_scope_cx(bcx) {|inf|\n+        alt inf.landing_pad {\n           some(_) { res = true; }\n           none { res = false; }\n         }\n@@ -2905,9 +2905,9 @@ fn in_lpad_scope_cx(bcx: block, f: fn(scope_info)) {\n     let mut bcx = bcx;\n     loop {\n         alt bcx.kind {\n-          block_scope(info) {\n-            if info.cleanups.len() > 0u || bcx.parent == parent_none {\n-                f(info); ret;\n+          block_scope(inf) {\n+            if inf.cleanups.len() > 0u || bcx.parent == parent_none {\n+                f(inf); ret;\n             }\n           }\n           _ {}\n@@ -2920,13 +2920,13 @@ fn get_landing_pad(bcx: block) -> BasicBlockRef {\n     let _icx = bcx.insn_ctxt(\"get_landing_pad\");\n \n     let mut cached = none, pad_bcx = bcx; // Guaranteed to be set below\n-    in_lpad_scope_cx(bcx) {|info|\n+    in_lpad_scope_cx(bcx) {|inf|\n         // If there is a valid landing pad still around, use it\n-        alt info.landing_pad {\n+        alt inf.landing_pad {\n           some(target) { cached = some(target); }\n           none {\n             pad_bcx = sub_block(bcx, \"unwind\");\n-            info.landing_pad = some(pad_bcx.llbb);\n+            inf.landing_pad = some(pad_bcx.llbb);\n           }\n         }\n     }\n@@ -3792,16 +3792,16 @@ fn cleanup_and_leave(bcx: block, upto: option<BasicBlockRef>,\n     let mut done = false;\n     loop {\n         alt cur.kind {\n-          block_scope(info) if info.cleanups.len() > 0u {\n-            option::iter(vec::find(info.cleanup_paths,\n+          block_scope(inf) if inf.cleanups.len() > 0u {\n+            option::iter(vec::find(inf.cleanup_paths,\n                                              {|cp| cp.target == leave})) {|cp|\n                 Br(bcx, cp.dest);\n                 done = true;\n             }\n             if done { ret; }\n             let sub_cx = sub_block(bcx, \"cleanup\");\n             Br(bcx, sub_cx.llbb);\n-            info.cleanup_paths += [{target: leave, dest: sub_cx.llbb}];\n+            inf.cleanup_paths += [{target: leave, dest: sub_cx.llbb}];\n             bcx = trans_block_cleanups_(sub_cx, cur, is_lpad);\n           }\n           _ {}"}, {"sha": "268719c9dc54bee89cea52fd1991fb989f6c0a5a", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -381,7 +381,7 @@ fn in_scope_cx(cx: block, f: fn(scope_info)) {\n     let mut cur = cx;\n     loop {\n         alt cur.kind {\n-          block_scope(info) { f(info); ret; }\n+          block_scope(inf) { f(inf); ret; }\n           _ {}\n         }\n         cur = block_parent(cur);"}, {"sha": "e031cf2462d72dbe1f8e438b26976effdd010c14", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -514,16 +514,16 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n     // to each variant shape). As we do so, build up the header.\n \n     let mut header = [];\n-    let mut info = [];\n+    let mut inf = [];\n     let header_sz = 2u16 * ccx.shape_cx.next_tag_id;\n     let data_sz = vec::len(data) as u16;\n \n-    let mut info_sz = 0u16;\n+    let mut inf_sz = 0u16;\n     for ccx.shape_cx.tag_order.each {|did_|\n         let did = did_; // Satisfy alias checker.\n         let num_variants = vec::len(*ty::enum_variants(ccx.tcx, did)) as u16;\n-        add_u16(header, header_sz + info_sz);\n-        info_sz += 2u16 * (num_variants + 2u16) + 3u16;\n+        add_u16(header, header_sz + inf_sz);\n+        inf_sz += 2u16 * (num_variants + 2u16) + 3u16;\n     }\n \n     // Construct the info tables, which contain offsets to the shape of each\n@@ -535,11 +535,11 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n     for ccx.shape_cx.tag_order.each {|did_|\n         let did = did_; // Satisfy alias checker.\n         let variants = ty::enum_variants(ccx.tcx, did);\n-        add_u16(info, vec::len(*variants) as u16);\n+        add_u16(inf, vec::len(*variants) as u16);\n \n         // Construct the largest-variants table.\n-        add_u16(info,\n-                header_sz + info_sz + data_sz + (vec::len(lv_table) as u16));\n+        add_u16(inf,\n+                header_sz + inf_sz + data_sz + (vec::len(lv_table) as u16));\n \n         let lv = largest_variants(ccx, did);\n         add_u16(lv_table, vec::len(lv) as u16);\n@@ -555,22 +555,22 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n         let size_align = if dynamic { {size: 0u16, align: 0u8} }\n                          else { compute_static_enum_size(ccx, lv, did) };\n         // Write in the static size and alignment of the enum.\n-        add_u16(info, size_align.size);\n-        info += [size_align.align];\n+        add_u16(inf, size_align.size);\n+        inf += [size_align.align];\n \n         // Now write in the offset of each variant.\n         for vec::each(*variants) {|_v|\n-            add_u16(info, header_sz + info_sz + offsets[i]);\n+            add_u16(inf, header_sz + inf_sz + offsets[i]);\n             i += 1u;\n         }\n     }\n \n     assert (i == vec::len(offsets));\n     assert (header_sz == vec::len(header) as u16);\n-    assert (info_sz == vec::len(info) as u16);\n+    assert (inf_sz == vec::len(inf) as u16);\n     assert (data_sz == vec::len(data) as u16);\n \n-    header += info;\n+    header += inf;\n     header += data;\n     header += lv_table;\n "}, {"sha": "9b3de9d4621195dfdad8a3756b2f2a7ce273bb80", "filename": "src/test/compile-fail/issue-1193.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1193.rs?ref=b0074c5a92a5b4bcfbb936d3877cc50b1cf8df90", "patch": "@@ -0,0 +1,14 @@\n+// error-pattern: Sorry, rebinding or matching against symbolic\n+mod foo {\n+    type t = u8;\n+\n+    const a : t = 0u8;\n+    const b : t = 1u8;\n+\n+    fn bar(v: t) -> bool {\n+        alt v {\n+            a { ret true; }\n+            b { ret false; }\n+        }\n+    }\n+}"}]}