{"sha": "1b95e029f978e71cf641c57fc9f446357e40e612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOTVlMDI5Zjk3OGU3MWNmNjQxYzU3ZmM5ZjQ0NjM1N2U0MGU2MTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T15:44:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-15T15:44:59Z"}, "message": "Rollup merge of #61785 - RalfJung:as-ref, r=rkruppe\n\nnote some safety concerns of raw-ptr-to-ref casts", "tree": {"sha": "55a1e4b5b9b7609516c60e1f665bfed3de88c9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a1e4b5b9b7609516c60e1f665bfed3de88c9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b95e029f978e71cf641c57fc9f446357e40e612", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBRJ7CRBK7hj4Ov3rIwAAdHIIAK8Hl+RMHRX/b0dTc6Z9J0xt\nevU60BQ9hOZUgUI0zaixAS4Um+WosJAnGxhL6ljhYYtfLMCrEYuJLr8ufby9nLMJ\nYCk9wKavCy7ABrDRZlH4Qm1+npQZztoxqab691toNv+2KQyjr8eKNOcMEdmA5Gbo\n2PiKP1IPgmfiAObRUXyTTRr2AmD4EwGUktusrRzELdsszXPEbiQi+/MgyqEHCXpS\nGAWHX7qtPjn0TB4K1z7ZkJjXXOW0zc9DdyzolPi8qyyc0zuhvYJ6XpSRR5Tq29kr\n67Yffx2hPPNr9bmOz9ERyayD4sqZlZ6cr2aeuj5M7oOIQ4tRR137MZf2yNxALGE=\n=JWC8\n-----END PGP SIGNATURE-----\n", "payload": "tree 55a1e4b5b9b7609516c60e1f665bfed3de88c9bb\nparent dbebcee8d07b77eae3725988879001e6205c6e47\nparent 00bae8774cf0a464b3ba88c546d4a615bb53206a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560613499 +0200\ncommitter GitHub <noreply@github.com> 1560613499 +0200\n\nRollup merge of #61785 - RalfJung:as-ref, r=rkruppe\n\nnote some safety concerns of raw-ptr-to-ref casts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b95e029f978e71cf641c57fc9f446357e40e612", "html_url": "https://github.com/rust-lang/rust/commit/1b95e029f978e71cf641c57fc9f446357e40e612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b95e029f978e71cf641c57fc9f446357e40e612/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbebcee8d07b77eae3725988879001e6205c6e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbebcee8d07b77eae3725988879001e6205c6e47", "html_url": "https://github.com/rust-lang/rust/commit/dbebcee8d07b77eae3725988879001e6205c6e47"}, {"sha": "00bae8774cf0a464b3ba88c546d4a615bb53206a", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bae8774cf0a464b3ba88c546d4a615bb53206a", "html_url": "https://github.com/rust-lang/rust/commit/00bae8774cf0a464b3ba88c546d4a615bb53206a"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "8f026a5b7d8dd0906ea19285c101e91a33333c0f", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1b95e029f978e71cf641c57fc9f446357e40e612/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b95e029f978e71cf641c57fc9f446357e40e612/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=1b95e029f978e71cf641c57fc9f446357e40e612", "patch": "@@ -984,8 +984,17 @@ impl<T: ?Sized> *const T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data.\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n     ///\n     /// # Examples\n     ///\n@@ -1610,8 +1619,17 @@ impl<T: ?Sized> *mut T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data.\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n     ///\n     /// # Examples\n     ///\n@@ -1755,10 +1773,24 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// As with `as_ref`, this is unsafe because it cannot verify the validity\n+    /// As with [`as_ref`], this is unsafe because it cannot verify the validity\n     /// of the returned pointer, nor can it ensure that the lifetime `'a`\n     /// returned is indeed a valid lifetime for the contained data.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get accessed through any other pointer.\n+    ///\n+    /// [`as_ref`]: #method.as_ref\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}]}