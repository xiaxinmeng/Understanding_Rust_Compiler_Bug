{"sha": "9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDc0NDczZGE1ZmVmNGIxZDllYmJiYjdmMTgxZWRjYjdhMzY1YTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-05T23:01:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T23:01:08Z"}, "message": "Rollup merge of #40943 - Amanieu:offset_to, r=alexcrichton\n\nAdd ptr::offset_to\n\nThis PR adds a method to calculate the signed distance (in number of elements) between two pointers. The resulting value can then be passed to `offset` to get one pointer from the other. This is similar to pointer subtraction in C/C++.\n\nThere are 2 special cases:\n\n- If the distance is not a multiple of the element size then the result is rounded towards zero. (in C/C++ this is UB)\n-  ZST return `None`, while normal types return `Some(isize)`. This forces the user to handle the ZST case in unsafe code. (C/C++ doesn't have ZSTs)", "tree": {"sha": "4c1ecbe25d9034e8a32979bf577c0de93e64da50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1ecbe25d9034e8a32979bf577c0de93e64da50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "html_url": "https://github.com/rust-lang/rust/commit/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5ff66b04af18b42a5278f1f74875311c957555", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5ff66b04af18b42a5278f1f74875311c957555", "html_url": "https://github.com/rust-lang/rust/commit/fc5ff66b04af18b42a5278f1f74875311c957555"}, {"sha": "1f70247446914a8b58bd088f32bcca792d30d75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f70247446914a8b58bd088f32bcca792d30d75f", "html_url": "https://github.com/rust-lang/rust/commit/1f70247446914a8b58bd088f32bcca792d30d75f"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "b424dd686afe72baae64df8ab3af4fde0070e012", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -123,6 +123,7 @@\n - [no_debug](no-debug.md)\n - [non_ascii_idents](non-ascii-idents.md)\n - [nonzero](nonzero.md)\n+- [offset_to](offset-to.md)\n - [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n - [on_unimplemented](on-unimplemented.md)\n - [once_poison](once-poison.md)"}, {"sha": "03d990eb4ae970421d5bdea89b0d6c76ba71076a", "filename": "src/doc/unstable-book/src/offset-to.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -0,0 +1,7 @@\n+# `offset_to`\n+\n+The tracking issue for this feature is: [#41079]\n+\n+[#41079]: https://github.com/rust-lang/rust/issues/41079\n+\n+------------------------"}, {"sha": "534d7cc7c7ec2d5053e74bd7e919aaafbe1afc21", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -62,6 +62,7 @@\n #![feature(untagged_unions)]\n #![cfg_attr(not(test), feature(str_checked_slicing))]\n #![cfg_attr(test, feature(rand, test))]\n+#![feature(offset_to)]\n \n #![no_std]\n "}, {"sha": "c258ac2bdea9be0a81930b2d5bbb56cd1935c340", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -2074,14 +2074,10 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let diff = (self.end as usize) - (self.ptr as usize);\n-        let size = mem::size_of::<T>();\n-        let exact = diff /\n-                    (if size == 0 {\n-                         1\n-                     } else {\n-                         size\n-                     });\n+        let exact = match self.ptr.offset_to(self.end) {\n+            Some(x) => x as usize,\n+            None => (self.end as usize).wrapping_sub(self.ptr as usize),\n+        };\n         (exact, Some(exact))\n     }\n "}, {"sha": "04480fc5d31da2e53d5479850fbf0ce9a560fcdb", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -500,6 +500,44 @@ impl<T: ?Sized> *const T {\n             intrinsics::arith_offset(self, count)\n         }\n     }\n+\n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    ///\n+    /// If the address different between the two pointers ia not a multiple of\n+    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n+    /// zero.\n+    ///\n+    /// This function returns `None` if `T` is a zero-sized typed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(offset_to)]\n+    ///\n+    /// fn main() {\n+    ///     let a = [0; 5];\n+    ///     let ptr1: *const i32 = &a[1];\n+    ///     let ptr2: *const i32 = &a[3];\n+    ///     assert_eq!(ptr1.offset_to(ptr2), Some(2));\n+    ///     assert_eq!(ptr2.offset_to(ptr1), Some(-2));\n+    ///     assert_eq!(unsafe { ptr1.offset(2) }, ptr2);\n+    ///     assert_eq!(unsafe { ptr2.offset(-2) }, ptr1);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"offset_to\", issue = \"41079\")]\n+    #[inline]\n+    pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n+        let size = mem::size_of::<T>();\n+        if size == 0 {\n+            None\n+        } else {\n+            let diff = (other as isize).wrapping_sub(self as isize);\n+            Some(diff / size as isize)\n+        }\n+    }\n }\n \n #[lang = \"mut_ptr\"]\n@@ -653,6 +691,44 @@ impl<T: ?Sized> *mut T {\n             Some(&mut *self)\n         }\n     }\n+\n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    ///\n+    /// If the address different between the two pointers ia not a multiple of\n+    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n+    /// zero.\n+    ///\n+    /// This function returns `None` if `T` is a zero-sized typed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(offset_to)]\n+    ///\n+    /// fn main() {\n+    ///     let mut a = [0; 5];\n+    ///     let ptr1: *mut i32 = &mut a[1];\n+    ///     let ptr2: *mut i32 = &mut a[3];\n+    ///     assert_eq!(ptr1.offset_to(ptr2), Some(2));\n+    ///     assert_eq!(ptr2.offset_to(ptr1), Some(-2));\n+    ///     assert_eq!(unsafe { ptr1.offset(2) }, ptr2);\n+    ///     assert_eq!(unsafe { ptr2.offset(-2) }, ptr1);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"offset_to\", issue = \"41079\")]\n+    #[inline]\n+    pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n+        let size = mem::size_of::<T>();\n+        if size == 0 {\n+            None\n+        } else {\n+            let diff = (other as isize).wrapping_sub(self as isize);\n+            Some(diff / size as isize)\n+        }\n+    }\n }\n \n // Equality for pointers"}, {"sha": "a425e418e42f15426a849705c75b3827c4b5395a", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d074473da5fef4b1d9ebbbb7f181edcb7a365a0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9d074473da5fef4b1d9ebbbb7f181edcb7a365a0", "patch": "@@ -1498,9 +1498,10 @@ unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n // Return the arithmetic difference if `T` is zero size.\n #[inline(always)]\n fn ptrdistance<T>(start: *const T, end: *const T) -> usize {\n-    let diff = (end as usize).wrapping_sub(start as usize);\n-    let size = mem::size_of::<T>();\n-    diff / (if size == 0 { 1 } else { size })\n+    match start.offset_to(end) {\n+        Some(x) => x as usize,\n+        None => (end as usize).wrapping_sub(start as usize),\n+    }\n }\n \n // Extension methods for raw pointers, used by the iterators"}]}