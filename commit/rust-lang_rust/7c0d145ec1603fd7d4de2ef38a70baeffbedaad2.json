{"sha": "7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMGQxNDVlYzE2MDNmZDdkNGRlMmVmMzhhNzBiYWVmZmJlZGFhZDI=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-04T15:19:52Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-08T18:24:38Z"}, "message": "improve non_snake_case diagnostics\n\nUse a structured suggestion and tighten the span to just the identifier.", "tree": {"sha": "00d0ad68dd743ac633d76021057103eba75ffcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00d0ad68dd743ac633d76021057103eba75ffcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlw06uYWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdFPsB/4qv00ce7tWnD8yx5+wmfuShlEx\nc7Ef7ccRKZRLZX7yYkLOhYWSWTSaHXUqt8ZstEqaYV2W1HBPX89OLindeFfQlSbs\nebHHQSQ4z5AiLcjyvviAX8Aumz+LP+ZX0Oa7Osd/uPIa2R/lncF34m7gEZ6wfgMU\nvBaqPgGF4TLBHiVle7Xd1NczqSw+HmyrxVU8kpvFcQzz2hU2VqQ4J6oMxFB/yYN6\nhVdAZ0/tF0G0I1gYaYWcUjO35M0ihgqRLusN29L2me3MT1J54qO61hGZHqkqecuZ\nO8zhuCV+OABATT857oOjn+No0fAAzElPYd83EAkKKeolwYEcYa8WPijLJi4b\n=qrPm\n-----END PGP SIGNATURE-----", "payload": "tree 00d0ad68dd743ac633d76021057103eba75ffcdb\nparent 3dfe36d09436317e035ee3caa19c7e1d260053e1\nauthor Andy Russell <arussell123@gmail.com> 1546615192 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1546971878 -0500\n\nimprove non_snake_case diagnostics\n\nUse a structured suggestion and tighten the span to just the identifier.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "html_url": "https://github.com/rust-lang/rust/commit/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dfe36d09436317e035ee3caa19c7e1d260053e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfe36d09436317e035ee3caa19c7e1d260053e1", "html_url": "https://github.com/rust-lang/rust/commit/3dfe36d09436317e035ee3caa19c7e1d260053e1"}], "stats": {"total": 370, "additions": 191, "deletions": 179}, "files": [{"sha": "fa6665d1ae735c7918274374b1ff5259ab7ff941", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 88, "deletions": 54, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -7,7 +7,8 @@ use lint::{EarlyContext, LateContext, LintContext, LintArray};\n use lint::{EarlyLintPass, LintPass, LateLintPass};\n use syntax::ast;\n use syntax::attr;\n-use syntax_pos::Span;\n+use syntax::errors::Applicability;\n+use syntax_pos::{BytePos, symbol::Ident, Span};\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {\n@@ -179,7 +180,8 @@ impl NonSnakeCase {\n         words.join(\"_\")\n     }\n \n-    fn check_snake_case(&self, cx: &LateContext, sort: &str, name: &str, span: Option<Span>) {\n+    /// Checks if a given identifier is snake case, and reports a diagnostic if not.\n+    fn check_snake_case(&self, cx: &LateContext, sort: &str, ident: &Ident) {\n         fn is_snake_case(ident: &str) -> bool {\n             if ident.is_empty() {\n                 return true;\n@@ -201,20 +203,28 @@ impl NonSnakeCase {\n             })\n         }\n \n+        let name = &ident.name.as_str();\n+\n         if !is_snake_case(name) {\n             let sc = NonSnakeCase::to_snake_case(name);\n-            let msg = if sc != name {\n-                format!(\"{} `{}` should have a snake case name such as `{}`\",\n-                        sort,\n-                        name,\n-                        sc)\n+\n+            let msg = format!(\"{} `{}` should have a snake case name\", sort, name);\n+            let mut err = cx.struct_span_lint(NON_SNAKE_CASE, ident.span, &msg);\n+\n+            // We have a valid span in almost all cases, but we don't have one when linting a crate\n+            // name provided via the command line.\n+            if !ident.span.is_dummy() {\n+                err.span_suggestion_with_applicability(\n+                    ident.span,\n+                    \"convert the identifier to snake case\",\n+                    sc,\n+                    Applicability::MaybeIncorrect,\n+                );\n             } else {\n-                format!(\"{} `{}` should have a snake case name\", sort, name)\n-            };\n-            match span {\n-                Some(span) => cx.span_lint(NON_SNAKE_CASE, span, &msg),\n-                None => cx.lint(NON_SNAKE_CASE, &msg),\n+                err.help(&format!(\"convert the identifier to snake case: `{}`\", sc));\n             }\n+\n+            err.emit();\n         }\n     }\n }\n@@ -227,87 +237,111 @@ impl LintPass for NonSnakeCase {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_crate(&mut self, cx: &LateContext, cr: &hir::Crate) {\n-        let attr_crate_name = attr::find_by_name(&cr.attrs, \"crate_name\")\n-            .and_then(|at| at.value_str().map(|s| (at, s)));\n-        if let Some(ref name) = cx.tcx.sess.opts.crate_name {\n-            self.check_snake_case(cx, \"crate\", name, None);\n-        } else if let Some((attr, name)) = attr_crate_name {\n-            self.check_snake_case(cx, \"crate\", &name.as_str(), Some(attr.span));\n+        let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n+            Some(Ident::from_str(name))\n+        } else {\n+            attr::find_by_name(&cr.attrs, \"crate_name\")\n+                .and_then(|attr| attr.meta())\n+                .and_then(|meta| {\n+                    meta.name_value_literal().and_then(|lit| {\n+                        if let ast::LitKind::Str(name, ..) = lit.node {\n+                            // Discard the double quotes surrounding the literal.\n+                            let sp = cx.sess().source_map().span_to_snippet(lit.span)\n+                                .ok()\n+                                .and_then(|snippet| {\n+                                    let left = snippet.find('\"')?;\n+                                    let right = snippet.rfind('\"').map(|pos| snippet.len() - pos)?;\n+\n+                                    Some(\n+                                        lit.span\n+                                            .with_lo(lit.span.lo() + BytePos(left as u32 + 1))\n+                                            .with_hi(lit.span.hi() - BytePos(right as u32)),\n+                                    )\n+                                })\n+                                .unwrap_or_else(|| lit.span);\n+\n+                            Some(Ident::new(name, sp))\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                })\n+        };\n+\n+        if let Some(ident) = &crate_ident {\n+            self.check_snake_case(cx, \"crate\", ident);\n         }\n     }\n \n     fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n-        match param.kind {\n-            GenericParamKind::Lifetime { .. } => {\n-                let name = param.name.ident().as_str();\n-                self.check_snake_case(cx, \"lifetime\", &name, Some(param.span));\n-            }\n-            GenericParamKind::Type { .. } => {}\n+        if let GenericParamKind::Lifetime { .. } = param.kind {\n+            self.check_snake_case(cx, \"lifetime\", &param.name.ident());\n         }\n     }\n \n-    fn check_fn(&mut self,\n-                cx: &LateContext,\n-                fk: FnKind,\n-                _: &hir::FnDecl,\n-                _: &hir::Body,\n-                span: Span,\n-                id: ast::NodeId) {\n-        match fk {\n-            FnKind::Method(name, ..) => {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext,\n+        fk: FnKind,\n+        _: &hir::FnDecl,\n+        _: &hir::Body,\n+        _: Span,\n+        id: ast::NodeId,\n+    ) {\n+        match &fk {\n+            FnKind::Method(ident, ..) => {\n                 match method_context(cx, id) {\n                     MethodLateContext::PlainImpl => {\n-                        self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n+                        self.check_snake_case(cx, \"method\", ident);\n                     }\n                     MethodLateContext::TraitAutoImpl => {\n-                        self.check_snake_case(cx, \"trait method\", &name.as_str(), Some(span))\n+                        self.check_snake_case(cx, \"trait method\", ident);\n                     }\n                     _ => (),\n                 }\n             }\n-            FnKind::ItemFn(name, _, header, _, attrs) => {\n+            FnKind::ItemFn(ident, _, header, _, attrs) => {\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n-                if header.abi != Abi::Rust && attr::find_by_name(attrs, \"no_mangle\").is_some() {\n+                if header.abi != Abi::Rust && attr::contains_name(attrs, \"no_mangle\") {\n                     return;\n                 }\n-                self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))\n+                self.check_snake_case(cx, \"function\", ident);\n             }\n             FnKind::Closure(_) => (),\n         }\n     }\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if let hir::ItemKind::Mod(_) = it.node {\n-            self.check_snake_case(cx, \"module\", &it.ident.as_str(), Some(it.span));\n+            self.check_snake_case(cx, \"module\", &it.ident);\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(ref pnames)) = item.node {\n-            self.check_snake_case(cx,\n-                                  \"trait method\",\n-                                  &item.ident.as_str(),\n-                                  Some(item.span));\n+        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.node {\n+            self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n-                self.check_snake_case(cx, \"variable\", &param_name.as_str(), Some(param_name.span));\n+                self.check_snake_case(cx, \"variable\", param_name);\n             }\n         }\n     }\n \n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n-        if let &PatKind::Binding(_, _, ref ident, _) = &p.node {\n-            self.check_snake_case(cx, \"variable\", &ident.as_str(), Some(p.span));\n+        if let &PatKind::Binding(_, _, ident, _) = &p.node {\n+            self.check_snake_case(cx, \"variable\", &ident);\n         }\n     }\n \n-    fn check_struct_def(&mut self,\n-                        cx: &LateContext,\n-                        s: &hir::VariantData,\n-                        _: ast::Name,\n-                        _: &hir::Generics,\n-                        _: ast::NodeId) {\n+    fn check_struct_def(\n+        &mut self,\n+        cx: &LateContext,\n+        s: &hir::VariantData,\n+        _: ast::Name,\n+        _: &hir::Generics,\n+        _: ast::NodeId,\n+    ) {\n         for sf in s.fields() {\n-            self.check_snake_case(cx, \"structure field\", &sf.ident.as_str(), Some(sf.span));\n+            self.check_snake_case(cx, \"structure field\", &sf.ident);\n         }\n     }\n }"}, {"sha": "fa6b825f2a2c21e8e4daa54aac69f5c3b7ae8167", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -117,16 +117,18 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n             ));\n         }\n     });\n-    let sym = Ident::with_empty_ctxt(Symbol::gensym(&format!(\n-        \"__register_diagnostic_{}\", code\n-    )));\n+\n+    let span = span.apply_mark(ecx.current_expansion.mark);\n+\n+    let sym = Ident::new(Symbol::gensym(&format!(\"__register_diagnostic_{}\", code)), span);\n+\n     MacEager::items(smallvec![\n         ecx.item_mod(\n             span,\n             span,\n             sym,\n-            Vec::new(),\n-            Vec::new()\n+            vec![],\n+            vec![],\n         )\n     ])\n }"}, {"sha": "51cfe7beade2dc467ffb4845a8e1f1f81585b68e", "filename": "src/test/ui/enable-unstable-lib-feature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: function `BOGUS` should have a snake case name such as `bogus`\n-  --> $DIR/enable-unstable-lib-feature.rs:12:1\n+error: function `BOGUS` should have a snake case name\n+  --> $DIR/enable-unstable-lib-feature.rs:12:8\n    |\n LL | pub fn BOGUS() { } //~ ERROR\n-   | ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^ help: convert the identifier to snake case: `bogus`\n    |\n note: lint level defined here\n   --> $DIR/enable-unstable-lib-feature.rs:6:9"}, {"sha": "8155514191ce35511f81bdae0a6f9a0f5602226f", "filename": "src/test/ui/expr_attr_paren_order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: variable `X` should have a snake case name such as `x`\n+error: variable `X` should have a snake case name\n   --> $DIR/expr_attr_paren_order.rs:19:17\n    |\n LL |             let X = 0; //~ ERROR snake case name\n-   |                 ^\n+   |                 ^ help: convert the identifier to snake case: `x`\n    |\n note: lint level defined here\n   --> $DIR/expr_attr_paren_order.rs:17:17"}, {"sha": "3250a41ee0ecdc940c459130a633181b6d3ab0f9", "filename": "src/test/ui/lint/command-line-lint-group-deny.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+error: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-deny.rs:4:9\n    |\n LL |     let _InappropriateCamelCasing = true; //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-D non-snake-case` implied by `-D bad-style`\n "}, {"sha": "39f6da400c4935b1e7da45567182519327951486", "filename": "src/test/ui/lint/command-line-lint-group-forbid.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+error: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-forbid.rs:4:9\n    |\n LL |     let _InappropriateCamelCasing = true; //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-F non-snake-case` implied by `-F bad-style`\n "}, {"sha": "42a198fe7e3e2bcfd41eb0383506f3a99235db83", "filename": "src/test/ui/lint/command-line-lint-group-warn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-warning: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+warning: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-warn.rs:5:9\n    |\n LL |     let _InappropriateCamelCasing = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-W non-snake-case` implied by `-W bad-style`\n "}, {"sha": "97e3ce6fd371f1064549338344fad4e50f1383d2", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -11,11 +11,11 @@ LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n    = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n \n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:4:1\n+error: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:4:4\n    |\n LL | fn CamelCase() {} //~ ERROR should have a snake\n-   | ^^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:1:9\n@@ -24,11 +24,11 @@ LL | #![deny(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^\n    = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n \n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:12:9\n+error: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:12:12\n    |\n LL |         fn CamelCase() {} //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:10:14\n@@ -50,11 +50,11 @@ LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n    = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n \n-warning: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:20:9\n+warning: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:20:12\n    |\n LL |         fn CamelCase() {} //~ WARN should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:18:17"}, {"sha": "1b763a9d868d91f1d590c58ce89c7803b55e56cd", "filename": "src/test/ui/lint/lint-non-snake-case-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --crate-name NonSnakeCase\n-// error-pattern: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+// error-pattern: crate `NonSnakeCase` should have a snake case name\n \n #![deny(non_snake_case)]\n "}, {"sha": "f3303191a06fe2ea85e22ae20bc33700dbfdc33c", "filename": "src/test/ui/lint/lint-non-snake-case-crate-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,10 +1,11 @@\n-error: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+error: crate `NonSnakeCase` should have a snake case name\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-crate-2.rs:4:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n+   = help: convert the identifier to snake case: `non_snake_case`\n \n error: aborting due to previous error\n "}, {"sha": "e4e84261a4ee9d062e01a148eb750a11a791459d", "filename": "src/test/ui/lint/lint-non-snake-case-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"NonSnakeCase\"]\n-//~^ ERROR crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+//~^ ERROR crate `NonSnakeCase` should have a snake case name\n #![deny(non_snake_case)]\n \n fn main() {}"}, {"sha": "5cfd60a76e437e09cba67449580cb5a0b28cd84e", "filename": "src/test/ui/lint/lint-non-snake-case-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n-  --> $DIR/lint-non-snake-case-crate.rs:1:1\n+error: crate `NonSnakeCase` should have a snake case name\n+  --> $DIR/lint-non-snake-case-crate.rs:1:18\n    |\n LL | #![crate_name = \"NonSnakeCase\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^ help: convert the identifier to snake case: `non_snake_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-crate.rs:3:9"}, {"sha": "fa64a9f980e75b51a070e2ac11b41aac5edc96cb", "filename": "src/test/ui/lint/lint-non-snake-case-functions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -5,28 +5,28 @@ struct Foo;\n \n impl Foo {\n     fn Foo_Method() {}\n-    //~^ ERROR method `Foo_Method` should have a snake case name such as `foo_method`\n+    //~^ ERROR method `Foo_Method` should have a snake case name\n \n     // Don't allow two underscores in a row\n     fn foo__method(&self) {}\n-    //~^ ERROR method `foo__method` should have a snake case name such as `foo_method`\n+    //~^ ERROR method `foo__method` should have a snake case name\n \n     pub fn xyZ(&mut self) {}\n-    //~^ ERROR method `xyZ` should have a snake case name such as `xy_z`\n+    //~^ ERROR method `xyZ` should have a snake case name\n \n     fn render_HTML() {}\n-    //~^ ERROR method `render_HTML` should have a snake case name such as `render_html`\n+    //~^ ERROR method `render_HTML` should have a snake case name\n }\n \n trait X {\n     fn ABC();\n-    //~^ ERROR trait method `ABC` should have a snake case name such as `abc`\n+    //~^ ERROR trait method `ABC` should have a snake case name\n \n     fn a_b_C(&self) {}\n-    //~^ ERROR trait method `a_b_C` should have a snake case name such as `a_b_c`\n+    //~^ ERROR trait method `a_b_C` should have a snake case name\n \n     fn something__else(&mut self);\n-    //~^ ERROR trait method `something__else` should have a snake case name such as `something_else`\n+    //~^ ERROR trait method `something__else` should have a snake case name\n }\n \n impl X for Foo {\n@@ -36,9 +36,9 @@ impl X for Foo {\n }\n \n fn Cookie() {}\n-//~^ ERROR function `Cookie` should have a snake case name such as `cookie`\n+//~^ ERROR function `Cookie` should have a snake case name\n \n pub fn bi_S_Cuit() {}\n-//~^ ERROR function `bi_S_Cuit` should have a snake case name such as `bi_s_cuit`\n+//~^ ERROR function `bi_S_Cuit` should have a snake case name\n \n fn main() { }"}, {"sha": "49cbfa941261055d30a2509083bdd64801d606f1", "filename": "src/test/ui/lint/lint-non-snake-case-functions.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,62 +1,62 @@\n-error: method `Foo_Method` should have a snake case name such as `foo_method`\n-  --> $DIR/lint-non-snake-case-functions.rs:7:5\n+error: method `Foo_Method` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:7:8\n    |\n LL |     fn Foo_Method() {}\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^ help: convert the identifier to snake case: `foo_method`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-functions.rs:1:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n \n-error: method `foo__method` should have a snake case name such as `foo_method`\n-  --> $DIR/lint-non-snake-case-functions.rs:11:5\n+error: method `foo__method` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:11:8\n    |\n LL |     fn foo__method(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `foo_method`\n \n-error: method `xyZ` should have a snake case name such as `xy_z`\n-  --> $DIR/lint-non-snake-case-functions.rs:14:5\n+error: method `xyZ` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:14:12\n    |\n LL |     pub fn xyZ(&mut self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^ help: convert the identifier to snake case: `xy_z`\n \n-error: method `render_HTML` should have a snake case name such as `render_html`\n-  --> $DIR/lint-non-snake-case-functions.rs:17:5\n+error: method `render_HTML` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:17:8\n    |\n LL |     fn render_HTML() {}\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `render_html`\n \n-error: trait method `ABC` should have a snake case name such as `abc`\n-  --> $DIR/lint-non-snake-case-functions.rs:22:5\n+error: trait method `ABC` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:22:8\n    |\n LL |     fn ABC();\n-   |     ^^^^^^^^^\n+   |        ^^^ help: convert the identifier to snake case: `abc`\n \n-error: trait method `a_b_C` should have a snake case name such as `a_b_c`\n-  --> $DIR/lint-non-snake-case-functions.rs:25:5\n+error: trait method `a_b_C` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:25:8\n    |\n LL |     fn a_b_C(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^ help: convert the identifier to snake case: `a_b_c`\n \n-error: trait method `something__else` should have a snake case name such as `something_else`\n-  --> $DIR/lint-non-snake-case-functions.rs:28:5\n+error: trait method `something__else` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:28:8\n    |\n LL |     fn something__else(&mut self);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `something_else`\n \n-error: function `Cookie` should have a snake case name such as `cookie`\n-  --> $DIR/lint-non-snake-case-functions.rs:38:1\n+error: function `Cookie` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:38:4\n    |\n LL | fn Cookie() {}\n-   | ^^^^^^^^^^^^^^\n+   |    ^^^^^^ help: convert the identifier to snake case: `cookie`\n \n-error: function `bi_S_Cuit` should have a snake case name such as `bi_s_cuit`\n-  --> $DIR/lint-non-snake-case-functions.rs:41:1\n+error: function `bi_S_Cuit` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:41:8\n    |\n LL | pub fn bi_S_Cuit() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^ help: convert the identifier to snake case: `bi_s_cuit`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "de76d2dbef26adabe93cd941ac8719a79b49d3dc", "filename": "src/test/ui/lint/lint-non-snake-case-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,7 +1,7 @@\n #![deny(non_snake_case)]\n #![allow(dead_code)]\n \n-fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n+fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name\n     _: &'FooBar ()\n ) {}\n "}, {"sha": "970666ebcfdc3cd9ce3f7744b5c638de2d47086d", "filename": "src/test/ui/lint/lint-non-snake-case-lifetimes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,8 +1,8 @@\n-error: lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n+error: lifetime `'FooBar` should have a snake case name\n   --> $DIR/lint-non-snake-case-lifetimes.rs:4:6\n    |\n-LL | fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n-   |      ^^^^^^^\n+LL | fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name\n+   |      ^^^^^^^ help: convert the identifier to snake case: `'foo_bar`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-lifetimes.rs:1:9"}, {"sha": "73f1233217225980422207fe92cbb19fd3a9f556", "filename": "src/test/ui/lint/lint-non-snake-case-modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,7 +1,7 @@\n #![deny(non_snake_case)]\n #![allow(dead_code)]\n \n-mod FooBar { //~ ERROR module `FooBar` should have a snake case name such as `foo_bar`\n+mod FooBar { //~ ERROR module `FooBar` should have a snake case name\n     pub struct S;\n }\n "}, {"sha": "651132e49d914c5dd0f55b996912729da1e8a7e8", "filename": "src/test/ui/lint/lint-non-snake-case-modules.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,10 +1,8 @@\n-error: module `FooBar` should have a snake case name such as `foo_bar`\n-  --> $DIR/lint-non-snake-case-modules.rs:4:1\n+error: module `FooBar` should have a snake case name\n+  --> $DIR/lint-non-snake-case-modules.rs:4:5\n    |\n-LL | / mod FooBar { //~ ERROR module `FooBar` should have a snake case name such as `foo_bar`\n-LL | |     pub struct S;\n-LL | | }\n-   | |_^\n+LL | mod FooBar { //~ ERROR module `FooBar` should have a snake case name\n+   |     ^^^^^^ help: convert the identifier to snake case: `foo_bar`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-modules.rs:1:9"}, {"sha": "9a6487d254239a12d49e9ca2cf7c2f459c029e4c", "filename": "src/test/ui/lint/lint-non-snake-case-no-lowercase-equivalent.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/snake-case-no-lowercase-equivalent.rs"}, {"sha": "86a39502a81cc62c8debf8bb685cc930ba7e2156", "filename": "src/test/ui/lint/lint-uppercase-variables.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -7,20 +7,20 @@ mod foo {\n }\n \n struct Something {\n-    X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n+    X: usize //~ ERROR structure field `X` should have a snake case name\n }\n \n-fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n+fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name\n     println!(\"{}\", Xx);\n }\n \n fn main() {\n-    let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n+    let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name\n     println!(\"{}\", Test);\n \n     match foo::Foo::Foo {\n         Foo => {}\n-//~^ ERROR variable `Foo` should have a snake case name such as `foo`\n+//~^ ERROR variable `Foo` should have a snake case name\n //~^^ WARN `Foo` is named the same as one of the variants of the type `foo::Foo`\n //~^^^ WARN unused variable: `Foo`\n     }"}, {"sha": "0741179c4a4ddf6170a48a1e6b534f41cd396a8b", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -17,35 +17,35 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n-error: structure field `X` should have a snake case name such as `x`\n+error: structure field `X` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:10:5\n    |\n-LL |     X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n-   |     ^^^^^^^^\n+LL |     X: usize //~ ERROR structure field `X` should have a snake case name\n+   |     ^ help: convert the identifier to snake case: `x`\n    |\n note: lint level defined here\n   --> $DIR/lint-uppercase-variables.rs:3:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n \n-error: variable `Xx` should have a snake case name such as `xx`\n+error: variable `Xx` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:13:9\n    |\n-LL | fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n-   |         ^^\n+LL | fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name\n+   |         ^^ help: convert the identifier to snake case: `xx`\n \n-error: variable `Test` should have a snake case name such as `test`\n+error: variable `Test` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:18:9\n    |\n-LL |     let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n-   |         ^^^^\n+LL |     let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name\n+   |         ^^^^ help: convert the identifier to snake case: `test`\n \n-error: variable `Foo` should have a snake case name such as `foo`\n+error: variable `Foo` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n LL |         Foo => {}\n-   |         ^^^\n+   |         ^^^ help: convert the identifier to snake case: `foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3bb1480a301095c12b3667c1d5e39e8ceffc0259", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -11,11 +11,11 @@ note: lint level defined here\n LL | #![warn(elided_lifetimes_in_paths,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: variable `Social_exchange_psychology` should have a snake case name such as `social_exchange_psychology`\n+warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9\n    |\n LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `social_exchange_psychology`\n    |\n    = note: people shouldn't have to change their usual style habits\n            to contribute to our project"}, {"sha": "9010770f1dc821dcf9877a315e3c1c2f3d8fbdd8", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n+#![allow(non_snake_case)]\n \n struct S;\n "}, {"sha": "61eaf9fcf109b01d782a96095a09581468d9c927", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=3dfe36d09436317e035ee3caa19c7e1d260053e1", "patch": "@@ -1,26 +0,0 @@\n-warning: function `want_F` should have a snake case name such as `want_f`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:18:1\n-   |\n-LL | fn want_F(f: F) { }\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(non_snake_case)] on by default\n-\n-warning: function `want_G` should have a snake case name such as `want_g`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:22:1\n-   |\n-LL | fn want_G(f: G) { }\n-   | ^^^^^^^^^^^^^^^^^^^\n-\n-warning: function `supply_F` should have a snake case name such as `supply_f`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:39:1\n-   |\n-LL | / fn supply_F() {\n-LL | |     want_F(foo);\n-LL | |\n-LL | |     want_F(bar);\n-LL | |\n-LL | |     want_F(baz);\n-LL | | }\n-   | |_^\n-"}, {"sha": "f052f866c901b863b13948e30485cc693dc3f95c", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d145ec1603fd7d4de2ef38a70baeffbedaad2/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=7c0d145ec1603fd7d4de2ef38a70baeffbedaad2", "patch": "@@ -11,17 +11,17 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n-warning: variable `theTwo` should have a snake case name such as `the_two`\n+warning: variable `theTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:12:9\n    |\n LL |     let theTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^\n+   |         ^^^^^^ help: convert the identifier to snake case: `the_two`\n    |\n    = note: #[warn(non_snake_case)] on by default\n \n-warning: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n+warning: variable `theOtherTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:13:9\n    |\n LL |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^^^^^^\n+   |         ^^^^^^^^^^^ help: convert the identifier to snake case: `the_other_two`\n "}]}