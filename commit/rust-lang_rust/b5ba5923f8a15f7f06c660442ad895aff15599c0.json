{"sha": "b5ba5923f8a15f7f06c660442ad895aff15599c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YmE1OTIzZjhhMTVmN2YwNmM2NjA0NDJhZDg5NWFmZjE1NTk5YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-21T17:52:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-21T17:52:15Z"}, "message": "Auto merge of #33074 - mitaa:rdoc-irlst, r=alexcrichton\n\nrustdoc: Fix the strip-hidden `ImplStripper`\n\nInstead of stripping impls which reference *stripped* items, we keep impls which reference *retained* items. We do this because when we strip an item we immediately return, and do not recurse into it - leaving the contained items non-stripped from the point of view of the `ImplStripper`.\n\nfixes #33069\n\nr? @alexcrichton", "tree": {"sha": "715cc7dc0e32756ee83aba9572d93cd52d4db3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715cc7dc0e32756ee83aba9572d93cd52d4db3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ba5923f8a15f7f06c660442ad895aff15599c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba5923f8a15f7f06c660442ad895aff15599c0", "html_url": "https://github.com/rust-lang/rust/commit/b5ba5923f8a15f7f06c660442ad895aff15599c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba5923f8a15f7f06c660442ad895aff15599c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e036082091bc253debeb22606a661af211610ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e036082091bc253debeb22606a661af211610ff", "html_url": "https://github.com/rust-lang/rust/commit/6e036082091bc253debeb22606a661af211610ff"}, {"sha": "574450a413a093d3ab97f8636f1c8f65e76bf1fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/574450a413a093d3ab97f8636f1c8f65e76bf1fb", "html_url": "https://github.com/rust-lang/rust/commit/574450a413a093d3ab97f8636f1c8f65e76bf1fb"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "34c83e1819df6f9d5026830554e118ba92bfe70c", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba5923f8a15f7f06c660442ad895aff15599c0/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba5923f8a15f7f06c660442ad895aff15599c0/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=b5ba5923f8a15f7f06c660442ad895aff15599c0", "patch": "@@ -24,62 +24,37 @@ use fold::FoldItem::Strip;\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n-    let mut stripped = DefIdSet();\n+    let mut retained = DefIdSet();\n \n     // strip all #[doc(hidden)] items\n     let krate = {\n         struct Stripper<'a> {\n-            stripped: &'a mut DefIdSet\n+            retained: &'a mut DefIdSet\n         }\n         impl<'a> fold::DocFolder for Stripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 if i.attrs.list(\"doc\").has_word(\"hidden\") {\n                     debug!(\"found one in strip_hidden; removing\");\n-                    self.stripped.insert(i.def_id);\n-\n                     // use a dedicated hidden item for given item type if any\n                     match i.inner {\n                         clean::StructFieldItem(..) | clean::ModuleItem(..) => {\n                             return Strip(i).fold()\n                         }\n                         _ => return None,\n                     }\n+                } else {\n+                    self.retained.insert(i.def_id);\n                 }\n                 self.fold_item_recur(i)\n             }\n         }\n-        let mut stripper = Stripper{ stripped: &mut stripped };\n+        let mut stripper = Stripper{ retained: &mut retained };\n         stripper.fold_crate(krate)\n     };\n \n-    // strip any traits implemented on stripped items\n-    {\n-        struct ImplStripper<'a> {\n-            stripped: &'a mut DefIdSet\n-        }\n-        impl<'a> fold::DocFolder for ImplStripper<'a> {\n-            fn fold_item(&mut self, i: Item) -> Option<Item> {\n-                if let clean::ImplItem(clean::Impl{\n-                           for_: clean::ResolvedPath{ did, .. },\n-                           ref trait_, ..\n-                }) = i.inner {\n-                    // Impls for stripped types don't need to exist\n-                    if self.stripped.contains(&did) {\n-                        return None;\n-                    }\n-                    // Impls of stripped traits also don't need to exist\n-                    if let Some(did) = trait_.def_id() {\n-                        if self.stripped.contains(&did) {\n-                            return None;\n-                        }\n-                    }\n-                }\n-                self.fold_item_recur(i)\n-            }\n-        }\n-        let mut stripper = ImplStripper{ stripped: &mut stripped };\n-        stripper.fold_crate(krate)\n-    }\n+    // strip all impls referencing stripped items\n+    let mut stripper = ImplStripper { retained: &retained };\n+    stripper.fold_crate(krate)\n }\n \n /// Strip private items from the point of view of a crate or externally from a\n@@ -98,11 +73,9 @@ pub fn strip_private(mut krate: clean::Crate) -> plugins::PluginResult {\n         krate = ImportStripper.fold_crate(stripper.fold_crate(krate));\n     }\n \n-    // strip all private implementations of traits\n-    {\n-        let mut stripper = ImplStripper(&retained);\n-        stripper.fold_crate(krate)\n-    }\n+    // strip all impls referencing private items\n+    let mut stripper = ImplStripper { retained: &retained };\n+    stripper.fold_crate(krate)\n }\n \n struct Stripper<'a> {\n@@ -201,13 +174,21 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n     }\n }\n \n-// This stripper discards all private impls of traits\n-struct ImplStripper<'a>(&'a DefIdSet);\n+// This stripper discards all impls which reference stripped items\n+struct ImplStripper<'a> {\n+    retained: &'a DefIdSet\n+}\n+\n impl<'a> fold::DocFolder for ImplStripper<'a> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if let clean::ImplItem(ref imp) = i.inner {\n+            if let Some(did) = imp.for_.def_id() {\n+                if did.is_local() && !self.retained.contains(&did) {\n+                    return None;\n+                }\n+            }\n             if let Some(did) = imp.trait_.def_id() {\n-                if did.is_local() && !self.0.contains(&did) {\n+                if did.is_local() && !self.retained.contains(&did) {\n                     return None;\n                 }\n             }"}, {"sha": "cd227fdef56dd0b886fe0ca0e2c8724b7f4d7936", "filename": "src/test/rustdoc/issue-33069.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba5923f8a15f7f06c660442ad895aff15599c0/src%2Ftest%2Frustdoc%2Fissue-33069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba5923f8a15f7f06c660442ad895aff15599c0/src%2Ftest%2Frustdoc%2Fissue-33069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33069.rs?ref=b5ba5923f8a15f7f06c660442ad895aff15599c0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Bar {}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Foo;\n+}\n+\n+// @has issue_33069/trait.Bar.html\n+// @!has - '//code' 'impl Bar for Foo'\n+impl Bar for hidden::Foo {}"}]}