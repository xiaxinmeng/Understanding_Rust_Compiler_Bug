{"sha": "fc6c08e799e1dc7fcfe1484b356da0ee7c16523d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNmMwOGU3OTllMWRjN2ZjZmUxNDg0YjM1NmRhMGVlN2MxNjUyM2Q=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-16T15:22:52Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-16T21:18:06Z"}, "message": "Rollup merge of #50726 - udoprog:read2-inner-fn, r=alexcrichton\n\nread2: Use inner function instead of closure\n\nVery minor thing, but there doesn't appear to be a reason to use a closure here.\n\nGenerated code is identical in my tests, but I believe it's clearer that nothing from the environment is being used.", "tree": {"sha": "918c00338d20082d53b25cfa8f3600d2a6e32e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918c00338d20082d53b25cfa8f3600d2a6e32e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlr8oA8ACgkQ/vbIBR0O\nATxJrQ/8C2xY2yXl6fRRV+k3Ib9AzKIpZsIHVX5cZ9KuH1DTfT1wzpNaf+e5sW3U\n9dD75eEiKTsoVkUizm0O+/IdOreJNZSM015jKW2ugC41wy+BjPLdAE2O1Mt7rHD8\nlVeptBgXxPMHgwoqbZDF5PX6daaWLW5hJ1h8BuqkKdmXDYFHIrIWlYVVRzHi0AEL\n2GeilhxMKUOsqxNc/4PzOVqH3cwpTVawuquDgM9OFnYG74gq8gGHzACupcprzbf/\nqgyiChm9ODeoN0ZWOXBUMprAymDJmlbVu9K4Ll/N0M756xf0S7J8np1Bnb9eTZ8B\n9z1pFUz6gcP0sr5ri+SO3TycJKcsLzeUoUAUTDVHCH0DfNn+ICnZrepF61RwDFFU\nIxWNEMvYL9tYusGvWqTv6q53KbVhVmNmzUAn7E6Z+9fDJLn6AXj+m3xZ0gFFatom\nVLyxt3T5gYje37H7J/mcacPV2iQsf4o6RZJe//a5minvo8XU+XofjKmXCDw2pgZL\nsc3rAdnjK7OAICSfEf9LuZ5bKPdapRujoCCFbx1YKNf00ziefR4A0CgmpdY0aPlg\nZBE6E+YZC0jLJW//QmE5rAAsurJxHvlLrnZp7Nlra18TbYYWaXutVDFitn5PdL/R\n70vljb3+4ogu//gyGJPVhWnbdw62HbFZ6KswFY15wPDioc1VI4A=\n=K2xz\n-----END PGP SIGNATURE-----", "payload": "tree 918c00338d20082d53b25cfa8f3600d2a6e32e6c\nparent 5074a7e13012a7c9ab2c0d2a29a84c141fb1e5a2\nparent 56f505e6c650106cb2328145f8f51ff4c9459124\nauthor kennytm <kennytm@gmail.com> 1526484172 +0800\ncommitter kennytm <kennytm@gmail.com> 1526505486 +0800\n\nRollup merge of #50726 - udoprog:read2-inner-fn, r=alexcrichton\n\nread2: Use inner function instead of closure\n\nVery minor thing, but there doesn't appear to be a reason to use a closure here.\n\nGenerated code is identical in my tests, but I believe it's clearer that nothing from the environment is being used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d", "html_url": "https://github.com/rust-lang/rust/commit/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5074a7e13012a7c9ab2c0d2a29a84c141fb1e5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5074a7e13012a7c9ab2c0d2a29a84c141fb1e5a2", "html_url": "https://github.com/rust-lang/rust/commit/5074a7e13012a7c9ab2c0d2a29a84c141fb1e5a2"}, {"sha": "56f505e6c650106cb2328145f8f51ff4c9459124", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f505e6c650106cb2328145f8f51ff4c9459124", "html_url": "https://github.com/rust-lang/rust/commit/56f505e6c650106cb2328145f8f51ff4c9459124"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "0a5dccddddae250c9e6cd35531b921bbf18f9ca4", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6c08e799e1dc7fcfe1484b356da0ee7c16523d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=fc6c08e799e1dc7fcfe1484b356da0ee7c16523d", "patch": "@@ -100,24 +100,6 @@ pub fn read2(p1: AnonPipe,\n         // wait for either pipe to become readable using `poll`\n         cvt_r(|| unsafe { libc::poll(fds.as_mut_ptr(), 2, -1) })?;\n \n-        // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n-        // EAGAIN. If we hit EOF, then this will happen because the underlying\n-        // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n-        // this case we flip the other fd back into blocking mode and read\n-        // whatever's leftover on that file descriptor.\n-        let read = |fd: &FileDesc, dst: &mut Vec<u8>| {\n-            match fd.read_to_end(dst) {\n-                Ok(_) => Ok(true),\n-                Err(e) => {\n-                    if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n-                       e.raw_os_error() == Some(libc::EAGAIN) {\n-                        Ok(false)\n-                    } else {\n-                        Err(e)\n-                    }\n-                }\n-            }\n-        };\n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking(false)?;\n             return p2.read_to_end(v2).map(|_| ());\n@@ -127,4 +109,23 @@ pub fn read2(p1: AnonPipe,\n             return p1.read_to_end(v1).map(|_| ());\n         }\n     }\n+\n+    // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n+    // EAGAIN. If we hit EOF, then this will happen because the underlying\n+    // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n+    // this case we flip the other fd back into blocking mode and read\n+    // whatever's leftover on that file descriptor.\n+    fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {\n+        match fd.read_to_end(dst) {\n+            Ok(_) => Ok(true),\n+            Err(e) => {\n+                if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n+                   e.raw_os_error() == Some(libc::EAGAIN) {\n+                    Ok(false)\n+                } else {\n+                    Err(e)\n+                }\n+            }\n+        }\n+    }\n }"}]}