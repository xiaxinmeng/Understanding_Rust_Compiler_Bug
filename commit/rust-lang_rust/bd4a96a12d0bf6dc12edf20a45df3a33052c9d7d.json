{"sha": "bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "node_id": "C_kwDOAAsO6NoAKGJkNGE5NmExMmQwYmY2ZGMxMmVkZjIwYTQ1ZGYzYTMzMDUyYzlkN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T08:44:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T08:44:30Z"}, "message": "Auto merge of #108300 - oli-obk:elsa, r=eholk\n\nUse a lock-free datastructure for source_span\n\nfollow up to the perf regression in https://github.com/rust-lang/rust/pull/105462\n\nThe main regression is likely the CStore, but let's evaluate the perf impact of this on its own", "tree": {"sha": "ed3ba2827ca35cc6c3da1d26b1de65fc63799745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3ba2827ca35cc6c3da1d26b1de65fc63799745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "html_url": "https://github.com/rust-lang/rust/commit/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9216b75646cde0c4c69ae00232778a47fc893d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9216b75646cde0c4c69ae00232778a47fc893d3", "html_url": "https://github.com/rust-lang/rust/commit/f9216b75646cde0c4c69ae00232778a47fc893d3"}, {"sha": "decfb4d123651a0673db47542e18ca60d1c501ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/decfb4d123651a0673db47542e18ca60d1c501ac", "html_url": "https://github.com/rust-lang/rust/commit/decfb4d123651a0673db47542e18ca60d1c501ac"}], "stats": {"total": 115, "additions": 79, "deletions": 36}, "files": [{"sha": "591a727cd7caa2be90aaab5e22fd47b91e540da4", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -1378,6 +1378,15 @@ dependencies = [\n  \"zeroize\",\n ]\n \n+[[package]]\n+name = \"elsa\"\n+version = \"1.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f74077c3c3aedb99a2683919698285596662518ea13e5eedcf8bdd43b0d0453b\"\n+dependencies = [\n+ \"stable_deref_trait\",\n+]\n+\n [[package]]\n name = \"ena\"\n version = \"0.14.0\"\n@@ -3884,6 +3893,7 @@ dependencies = [\n  \"arrayvec 0.7.0\",\n  \"bitflags\",\n  \"cfg-if\",\n+ \"elsa\",\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\","}, {"sha": "decbb6519ba37291c0155216dac6ff266dbd5bfe", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -31,6 +31,7 @@ stacker = \"0.1.15\"\n tempfile = \"3.2\"\n thin-vec = \"0.2.12\"\n tracing = \"0.1\"\n+elsa = \"1.8\"\n \n [dependencies.parking_lot]\n version = \"0.11\""}, {"sha": "31323c21df0092cef38cc422c024e0738833d56f", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -26,6 +26,10 @@ use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n pub use std::sync::atomic::Ordering;\n pub use std::sync::atomic::Ordering::SeqCst;\n \n+pub use vec::AppendOnlyVec;\n+\n+mod vec;\n+\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub auto trait Send {}"}, {"sha": "cbea4f059992282ffe7d5f9dd9d3b9c4a92de9ad", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -0,0 +1,41 @@\n+use std::marker::PhantomData;\n+\n+use rustc_index::vec::Idx;\n+\n+pub struct AppendOnlyVec<I: Idx, T: Copy> {\n+    #[cfg(not(parallel_compiler))]\n+    vec: elsa::vec::FrozenVec<T>,\n+    #[cfg(parallel_compiler)]\n+    vec: elsa::sync::LockFreeFrozenVec<T>,\n+    _marker: PhantomData<fn(&I)>,\n+}\n+\n+impl<I: Idx, T: Copy> AppendOnlyVec<I, T> {\n+    pub fn new() -> Self {\n+        Self {\n+            #[cfg(not(parallel_compiler))]\n+            vec: elsa::vec::FrozenVec::new(),\n+            #[cfg(parallel_compiler)]\n+            vec: elsa::sync::LockFreeFrozenVec::new(),\n+            _marker: PhantomData,\n+        }\n+    }\n+\n+    pub fn push(&self, val: T) -> I {\n+        #[cfg(not(parallel_compiler))]\n+        let i = self.vec.len();\n+        #[cfg(not(parallel_compiler))]\n+        self.vec.push(val);\n+        #[cfg(parallel_compiler)]\n+        let i = self.vec.push(val);\n+        I::new(i)\n+    }\n+\n+    pub fn get(&self, i: I) -> Option<T> {\n+        let i = i.index();\n+        #[cfg(not(parallel_compiler))]\n+        return self.vec.get_copy(i);\n+        #[cfg(parallel_compiler)]\n+        return self.vec.get(i);\n+    }\n+}"}, {"sha": "a96cc95a38446666304d170be928beeead074b0a", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -7,11 +7,10 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lrc, OnceCell, RwLock, WorkerLocal};\n+use rustc_data_structures::sync::{AppendOnlyVec, Lrc, OnceCell, RwLock, WorkerLocal};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_incremental::DepGraphFuture;\n-use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n@@ -195,10 +194,9 @@ impl<'tcx> Queries<'tcx> {\n \n             let cstore = RwLock::new(Box::new(CStore::new(sess)) as _);\n             let definitions = RwLock::new(Definitions::new(sess.local_stable_crate_id()));\n-            let mut source_span = IndexVec::default();\n+            let source_span = AppendOnlyVec::new();\n             let _id = source_span.push(krate.spans.inner_span);\n             debug_assert_eq!(_id, CRATE_DEF_ID);\n-            let source_span = RwLock::new(source_span);\n             let untracked = Untracked { cstore, source_span, definitions };\n \n             let qcx = passes::create_global_ctxt("}, {"sha": "7e6a6e71670f31e5cbdf1d4a7ed965628d13ed23", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// system if the result is otherwise tracked through queries\n     #[inline]\n     pub fn source_span_untracked(self, def_id: LocalDefId) -> Span {\n-        self.untracked.source_span.read().get(def_id).copied().unwrap_or(DUMMY_SP)\n+        self.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP)\n     }\n \n     #[inline(always)]\n@@ -2525,6 +2525,5 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n-    providers.source_span =\n-        |tcx, def_id| tcx.untracked.source_span.read().get(def_id).copied().unwrap_or(DUMMY_SP);\n+    providers.source_span = |tcx, def_id| tcx.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP);\n }"}, {"sha": "5593a15412fb7eb8c4a9dcbef96a2551806215e2", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -146,7 +146,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n \n     #[inline]\n     fn def_span(&self, def_id: LocalDefId) -> Span {\n-        *self.untracked.source_span.read().get(def_id).unwrap_or(&DUMMY_SP)\n+        self.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP)\n     }\n \n     #[inline]"}, {"sha": "80bc0a2653d9fd0c613da0c8b095f27478114ec9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -12,11 +12,10 @@ use rustc_errors::{struct_span_err, SuggestionStyle};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::bug;\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE;\n use rustc_session::lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -154,8 +153,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             if !candidates.is_empty() {\n                 show_candidates(\n-                    &self.tcx.sess,\n-                    &self.tcx.untracked().source_span.read(),\n+                    self.tcx,\n                     &mut err,\n                     span,\n                     &candidates,\n@@ -687,8 +685,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         err.span_help(span, &help_msg);\n                     }\n                     show_candidates(\n-                        &self.tcx.sess,\n-                        &self.tcx.untracked().source_span.read(),\n+                        self.tcx,\n                         &mut err,\n                         Some(span),\n                         &import_suggestions,\n@@ -1352,8 +1349,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let import_suggestions =\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n         show_candidates(\n-            &self.tcx.sess,\n-            &self.tcx.untracked().source_span.read(),\n+            self.tcx,\n             err,\n             None,\n             &import_suggestions,\n@@ -2358,8 +2354,7 @@ pub(crate) enum DiagnosticMode {\n }\n \n pub(crate) fn import_candidates(\n-    session: &Session,\n-    source_span: &IndexVec<LocalDefId, Span>,\n+    tcx: TyCtxt<'_>,\n     err: &mut Diagnostic,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -2368,8 +2363,7 @@ pub(crate) fn import_candidates(\n     append: &str,\n ) {\n     show_candidates(\n-        session,\n-        source_span,\n+        tcx,\n         err,\n         use_placement_span,\n         candidates,\n@@ -2385,8 +2379,7 @@ pub(crate) fn import_candidates(\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n fn show_candidates(\n-    session: &Session,\n-    source_span: &IndexVec<LocalDefId, Span>,\n+    tcx: TyCtxt<'_>,\n     err: &mut Diagnostic,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -2511,8 +2504,8 @@ fn show_candidates(\n             );\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n-                let span = source_span[local_def_id];\n-                let span = session.source_map().guess_head_span(span);\n+                let span = tcx.source_span(local_def_id);\n+                let span = tcx.sess.source_map().guess_head_span(span);\n                 let mut multi_span = MultiSpan::from_span(span);\n                 multi_span.push_span_label(span, \"not accessible\");\n                 err.span_note(multi_span, &msg);\n@@ -2542,8 +2535,8 @@ fn show_candidates(\n             let mut spans = Vec::new();\n             for (name, _, def_id, _) in &inaccessible_path_strings {\n                 if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n-                    let span = source_span[local_def_id];\n-                    let span = session.source_map().guess_head_span(span);\n+                    let span = tcx.source_span(local_def_id);\n+                    let span = tcx.sess.source_map().guess_head_span(span);\n                     spans.push((name, span));\n                 } else {\n                     if !has_colon {"}, {"sha": "e8e31cb498136c874eb2b0a4dbc7bbaea384d121", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -548,8 +548,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n             if let Some(candidates) = &err.candidates {\n                 match &import.kind {\n                     ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n-                        self.r.tcx.sess,\n-                        &self.r.tcx.untracked().source_span.read(),\n+                        self.r.tcx,\n                         &mut diag,\n                         Some(err.span),\n                         &candidates,\n@@ -561,8 +560,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n                     ),\n                     ImportKind::Single { nested: true, source, target, .. } => {\n                         import_candidates(\n-                            self.r.tcx.sess,\n-                            &self.r.tcx.untracked().source_span.read(),\n+                            self.r.tcx,\n                             &mut diag,\n                             None,\n                             &candidates,"}, {"sha": "9fd7edeb5a189682f6bb172f217ccd5f1e685bb3", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -1156,7 +1156,7 @@ impl<'tcx> Resolver<'_, 'tcx> {\n \n         // A relative span's parent must be an absolute span.\n         debug_assert_eq!(span.data_untracked().parent, None);\n-        let _id = self.tcx.untracked().source_span.write().push(span);\n+        let _id = self.tcx.untracked().source_span.push(span);\n         debug_assert_eq!(_id, def_id);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to"}, {"sha": "868ffdf0f1da076bfc957e77594e0a5f51d470cb", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -6,10 +6,9 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, MetadataRef, RwLock};\n+use rustc_data_structures::sync::{self, AppendOnlyVec, MetadataRef, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n-use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -252,10 +251,9 @@ pub trait CrateStore: std::fmt::Debug {\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync + sync::Send;\n \n-#[derive(Debug)]\n pub struct Untracked {\n     pub cstore: RwLock<Box<CrateStoreDyn>>,\n     /// Reference span for definitions.\n-    pub source_span: RwLock<IndexVec<LocalDefId, Span>>,\n+    pub source_span: AppendOnlyVec<LocalDefId, Span>,\n     pub definitions: RwLock<Definitions>,\n }"}, {"sha": "bddfdcfaf194165d826a5534a13573eb80a13bfc", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=bd4a96a12d0bf6dc12edf20a45df3a33052c9d7d", "patch": "@@ -120,6 +120,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"dissimilar\",\n     \"dlmalloc\",\n     \"either\",\n+    \"elsa\",\n     \"ena\",\n     \"expect-test\",\n     \"fallible-iterator\", // dependency of `thorin`"}]}