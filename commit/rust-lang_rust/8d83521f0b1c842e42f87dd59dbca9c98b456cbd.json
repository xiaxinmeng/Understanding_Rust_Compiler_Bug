{"sha": "8d83521f0b1c842e42f87dd59dbca9c98b456cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODM1MjFmMGIxYzg0MmU0MmY4N2RkNTlkYmNhOWM5OGI0NTZjYmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T15:49:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:16Z"}, "message": "Add const_generics feature flag\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "70e53eb78d62d6b27dee7338075ce29b21fb97d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e53eb78d62d6b27dee7338075ce29b21fb97d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d83521f0b1c842e42f87dd59dbca9c98b456cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d83521f0b1c842e42f87dd59dbca9c98b456cbd", "html_url": "https://github.com/rust-lang/rust/commit/8d83521f0b1c842e42f87dd59dbca9c98b456cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d83521f0b1c842e42f87dd59dbca9c98b456cbd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751dcdf606d4ff3b27b1c820535304bfb022170c", "url": "https://api.github.com/repos/rust-lang/rust/commits/751dcdf606d4ff3b27b1c820535304bfb022170c", "html_url": "https://github.com/rust-lang/rust/commit/751dcdf606d4ff3b27b1c820535304bfb022170c"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "0853b4399d2c17e8c1b7325fe0fe917198e9c3c8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d83521f0b1c842e42f87dd59dbca9c98b456cbd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d83521f0b1c842e42f87dd59dbca9c98b456cbd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8d83521f0b1c842e42f87dd59dbca9c98b456cbd", "patch": "@@ -15,7 +15,7 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use crate::ast::{self, NodeId, PatKind, RangeEnd};\n+use crate::ast::{self, NodeId, GenericParam, GenericParamKind, PatKind, RangeEnd};\n use crate::attr;\n use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::source_map::Spanned;\n@@ -462,6 +462,9 @@ declare_features! (\n     // Re-Rebalance coherence\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n+    // Const generic types.\n+    (active, const_generics, \"1.34.0\", Some(44580), None),\n+\n     // #[optimize(X)]\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n@@ -1899,6 +1902,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, fn_decl, span);\n     }\n \n+    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            gate_feature_post!(&self, const_generics, param.ident.span,\n+                \"const generics are unstable\");\n+        }\n+        visit::walk_generic_param(self, param);\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n         match ti.node {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n@@ -1984,7 +1995,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     // Some features are known to be incomplete and using them is likely to have\n     // unanticipated results, such as compiler crashes. We warn the user about these\n     // to alert them.\n-    let incomplete_features = [\"generic_associated_types\"];\n+    let incomplete_features = [\"generic_associated_types\", \"const_generics\"];\n \n     let mut features = Features::new();\n     let mut edition_enabled_features = FxHashMap::default();"}]}