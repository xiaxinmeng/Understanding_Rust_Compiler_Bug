{"sha": "ec711767a7ac6911faae85d4b9285d07d5ebf949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzExNzY3YTdhYzY5MTFmYWFlODVkNGI5Mjg1ZDA3ZDVlYmY5NDk=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T18:27:44Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:01:02Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "0eef0150e8781741914dd5f0821d810f602160cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eef0150e8781741914dd5f0821d810f602160cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec711767a7ac6911faae85d4b9285d07d5ebf949", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYL4ACgkQj1SKWi7R\nP1gUIw/9GzWd5M+7zXnrLPgc6BkzUqt4u9ED5J7HCPZ2oQzW5o6Q5/vyGlmYF7KF\nAOw4AgJJ5etkRYNZaTuE7OIDMiCJ627qjFIjEpZqtHLLfMsV8o/xLAltvlAH7vWg\nH56OTkiqLqleYL5A/2QzWWB174M9WxdPByIuMiO9mUfg+1xRU5CasJ0s72Swj/ji\nYXBZf6uOC+wwyAP6Bv4JR78r0sgEJywmNb8eoSQvHmlxM58RVwnqxZDt6FW/P3S7\nbOdQhNRUZOBQWmy7xLLVgJbRdOrQAU2egCb2XFSpVvWPsR2Yl42klfHKPW3nSNbO\n9FQol2c5a1SHn+4OxkZnGpT5UfUrQatB4r2Avn2qUXikMqEhXxiNexh/Q4+QNFN7\n2Loo0ad+IwkFhyUUycVBqINP56A5xdfCzrJA09YVoAiGLFiK8EEbfRMf3qg68LcX\nKUxgBb4YNFbsssS/sgrLgAasOX97QCsHfoZGbnS+xoooDGsbnIh7wf0U0Gh8QnaA\nlm3LXYQOmSKhp0mQfzIZskOB9tbEUQit4PAcqNQUsqe+FlwGa93AhCN3NtpK/8ob\nBk47DgYuuqOr/k/VcsZ/hyD7MHChEzDt3qeOSFbEo3F53jESB5oq889NgLoyHQSo\nUHmxArWSiCH0OwAZMXmrRuN0zQOBYDrSoFBsxGHafh3ucCiifwk=\n=uCbZ\n-----END PGP SIGNATURE-----", "payload": "tree 0eef0150e8781741914dd5f0821d810f602160cc\nparent d50a3a7b8696975a2a1116f8c4eb4673271ae968\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561141664 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140862 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec711767a7ac6911faae85d4b9285d07d5ebf949", "html_url": "https://github.com/rust-lang/rust/commit/ec711767a7ac6911faae85d4b9285d07d5ebf949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec711767a7ac6911faae85d4b9285d07d5ebf949/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50a3a7b8696975a2a1116f8c4eb4673271ae968", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50a3a7b8696975a2a1116f8c4eb4673271ae968", "html_url": "https://github.com/rust-lang/rust/commit/d50a3a7b8696975a2a1116f8c4eb4673271ae968"}], "stats": {"total": 198, "additions": 99, "deletions": 99}, "files": [{"sha": "dc7014d22ec4d3d6b74b43429b52c72ee6caab5d", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -84,9 +84,9 @@ struct PropagationContext<'a, 'tcx, O> {\n     changed: bool,\n }\n \n-fn get_cfg_indices<'a>(id: hir::ItemLocalId,\n-                       index: &'a FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n-                       -> &'a [CFGIndex] {\n+fn get_cfg_indices(id: hir::ItemLocalId,\n+                   index: &FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n+                   -> &[CFGIndex] {\n     index.get(&id).map_or(&[], |v| &v[..])\n }\n "}, {"sha": "21c19e167cfbe9299570d8fd652adbdc83d626d2", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -123,8 +123,8 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n \n     submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n \n-    fn module_codegen<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n+    fn module_codegen(\n+        tcx: TyCtxt<'_>,\n         cgu_name: InternedString,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);"}, {"sha": "f67c740b777488423bcce75cc8b3ce715c99967b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -144,7 +144,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self {\n+    fn build_sibling_block(&self, name: &str) -> Self {\n         Builder::new_block(self.cx, self.llfn(), name)\n     }\n "}, {"sha": "e6630e18165707c33cb80ab5d9b803035af5d506", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -124,7 +124,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString) {\n         base::compile_codegen_unit(tcx, cgu_name);\n     }\n     fn target_machine_factory("}, {"sha": "d06460fc856962bd27d5901c31d89eea643349c4", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -700,7 +700,7 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn assert_and_save_dep_graph(tcx: TyCtxt<'_>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || ::rustc_incremental::assert_dep_graph(tcx));"}, {"sha": "7ab29c5c4c3d024bc759a8bbc438adf49ae8bed3", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::{Symbol, sym};\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n \n-pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn report_symbol_names(tcx: TyCtxt<'_>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n     // attributes we are interested in cannot be present anyway, so\n     // skip the walk."}, {"sha": "1eb28bccbe382cd4663e853d3aaf62b959849da2", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -168,7 +168,7 @@ impl<T: Idx> BitSet<T> {\n \n     /// Iterates over the indices of set bits in a sorted order.\n     #[inline]\n-    pub fn iter<'a>(&'a self) -> BitIter<'a, T> {\n+    pub fn iter(&self) -> BitIter<'_, T> {\n         BitIter {\n             cur: None,\n             iter: self.words.iter().enumerate(),\n@@ -849,7 +849,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> BitIter<'a, C> {\n+    pub fn iter(&self, row: R) -> BitIter<'_, C> {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n         BitIter {"}, {"sha": "3bea965ef30411ce3dff6852b0101033a837434b", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -58,7 +58,7 @@ impl Fingerprint {\n         Ok(())\n     }\n \n-    pub fn decode_opaque<'a>(decoder: &mut Decoder<'a>) -> Result<Fingerprint, String> {\n+    pub fn decode_opaque(decoder: &mut Decoder<'_>) -> Result<Fingerprint, String> {\n         let mut bytes = [0; 16];\n \n         decoder.read_raw_bytes(&mut bytes)?;"}, {"sha": "ff0c4ff548b71eab6b23b93546bbe6eaedb0d1bb", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -188,7 +188,7 @@ impl PpSourceMode {\n             _ => panic!(\"Should use call_with_pp_support_hir\"),\n         }\n     }\n-    fn call_with_pp_support_hir<'tcx, A, F>(&self, tcx: TyCtxt<'tcx>, f: F) -> A\n+    fn call_with_pp_support_hir<A, F>(&self, tcx: TyCtxt<'_>, f: F) -> A\n     where\n         F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A,\n     {\n@@ -228,7 +228,7 @@ impl PpSourceMode {\n trait PrinterSupport: pprust::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Produces the pretty-print annotation object.\n     ///\n@@ -240,7 +240,7 @@ trait PrinterSupport: pprust::PpAnn {\n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n@@ -272,7 +272,7 @@ struct NoAnn<'hir> {\n }\n \n impl<'hir> PrinterSupport for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -282,7 +282,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -313,7 +313,7 @@ struct IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -360,7 +360,7 @@ impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -458,7 +458,7 @@ struct TypedAnnotation<'a, 'tcx> {\n }\n \n impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n \n@@ -866,8 +866,8 @@ pub fn print_after_hir_lowering<'tcx>(\n // analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n-fn print_with_analysis<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn print_with_analysis(\n+    tcx: TyCtxt<'_>,\n     ppm: PpMode,\n     uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>,"}, {"sha": "83a0fb486fd9a34c728910a571f74c00b5ea790d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -1635,7 +1635,7 @@ impl Destination {\n         }\n     }\n \n-    fn writable<'a>(&'a mut self) -> WritableDst<'a> {\n+    fn writable(&mut self) -> WritableDst<'_> {\n         match *self {\n             Destination::Terminal(ref mut t) => WritableDst::Terminal(t),\n             Destination::Buffered(ref mut t) => {"}, {"sha": "1ffee1cdf691f0be08c3fa835c2049a8eebc9696", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -438,26 +438,26 @@ impl Handler {\n         self.err_count.store(0, SeqCst);\n     }\n \n-    pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n+    pub fn struct_dummy(&self) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n-                                                    sp: S,\n-                                                    msg: &str)\n-                                                    -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(&self,\n+                                                sp: S,\n+                                                msg: &str)\n+                                                -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                              sp: S,\n-                                                              msg: &str,\n-                                                              code: DiagnosticId)\n-                                                              -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(&self,\n+                                                          sp: S,\n+                                                          msg: &str,\n+                                                          code: DiagnosticId)\n+                                                          -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code);\n@@ -466,63 +466,63 @@ impl Handler {\n         }\n         result\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                   sp: S,\n-                                                   msg: &str)\n-                                                   -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self,\n+                                               sp: S,\n+                                               msg: &str)\n+                                               -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                             sp: S,\n-                                                             msg: &str,\n-                                                             code: DiagnosticId)\n-                                                             -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n+                                                         sp: S,\n+                                                         msg: &str,\n+                                                         code: DiagnosticId)\n+                                                         -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.code(code);\n         result\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n-                                                     sp: S,\n-                                                     msg: &str)\n-                                                     -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self,\n+                                                 sp: S,\n+                                                 msg: &str)\n+                                                 -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                               sp: S,\n-                                                               msg: &str,\n-                                                               code: DiagnosticId)\n-                                                               -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(&self,\n+                                                           sp: S,\n+                                                           msg: &str,\n+                                                           code: DiagnosticId)\n+                                                           -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n@@ -563,10 +563,10 @@ impl Handler {\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);\n     }\n-    pub fn mut_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                sp: S,\n-                                                msg: &str)\n-                                                -> DiagnosticBuilder<'a> {\n+    pub fn mut_span_err<S: Into<MultiSpan>>(&self,\n+                                            sp: S,\n+                                            msg: &str)\n+                                            -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n@@ -605,10 +605,10 @@ impl Handler {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n     }\n-    pub fn span_note_diag<'a>(&'a self,\n-                              sp: Span,\n-                              msg: &str)\n-                              -> DiagnosticBuilder<'a> {\n+    pub fn span_note_diag(&self,\n+                          sp: Span,\n+                          msg: &str)\n+                          -> DiagnosticBuilder<'_> {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.set_span(sp);\n         db"}, {"sha": "38dc6edaf6325e8225514cfa1e19cffca77e6217", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -51,7 +51,7 @@ use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n \n-pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n             dump_graph(tcx);"}, {"sha": "046fdc72270dbb5cb48568b760189846c602e169", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -35,7 +35,7 @@ const MODULE: Symbol = sym::module;\n const CFG: Symbol = sym::cfg;\n const KIND: Symbol = sym::kind;\n \n-pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n             return;"}, {"sha": "d698728198130033bd1028f6ba4bb514a7612269", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -878,7 +878,7 @@ pub fn create_global_ctxt(\n \n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n-fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n+fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let sess = tcx.sess;\n@@ -995,8 +995,8 @@ fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n     Ok(())\n }\n \n-fn encode_and_write_metadata<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn encode_and_write_metadata(\n+    tcx: TyCtxt<'_>,\n     outputs: &OutputFilenames,\n ) -> (middle::cstore::EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "d888c9e57d326e03852fcca0f8929c2ce47c848c", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -6,11 +6,11 @@ use rustc::ty::query::Providers;\n use syntax::attr;\n use syntax::symbol::sym;\n \n-pub fn find<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.proc_macro_decls_static(LOCAL_CRATE)\n }\n \n-fn proc_macro_decls_static<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn proc_macro_decls_static(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };"}, {"sha": "4c6ceb14ca42a8fa0ec4b25a14788c68e584ddd9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -74,7 +74,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn lint_mod<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn lint_mod(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     lint::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n "}, {"sha": "914084d7e9ece4f489ef6dc9ee62a71c8a201b4e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -250,7 +250,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     exported_symbols => { Arc::new(cdata.exported_symbols(tcx)) }\n }\n \n-pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n@@ -550,7 +550,7 @@ impl CrateStore for cstore::CStore {\n         self.do_postorder_cnums_untracked()\n     }\n \n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }\n "}, {"sha": "73c20ccad5abff6cbf9fcd98fd2c957c2e3d033f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -1863,7 +1863,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n@@ -1905,7 +1905,7 @@ pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}, {"sha": "b1f4dfffc7898db33a3dc1450c476610bbd93c59", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<ForeignModule> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector {\n         tcx,\n         modules: Vec::new(),"}, {"sha": "728fd004fcb693a2ce8b71b88b6746a9bcb65212", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyCtxt;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::sym;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<String> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector {\n         args: Vec::new(),\n     };"}, {"sha": "4a01d0e559af411a08bb62e8db33faf68518792b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -11,7 +11,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, struct_span_err};\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<NativeLibrary> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,\n         libs: Vec::new(),"}, {"sha": "32b964dbadfa92ac3dcf5e4a5d0dab9f6844db46", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -829,7 +829,7 @@ fn build_call_shim<'tcx>(\n     body\n }\n \n-pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: DefId) -> &'tcx Body<'tcx> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span = tcx.hir().span_if_local(ctor_id)"}, {"sha": "e7f6abc410a32f90e945347af9089453dc77ac32", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -38,7 +38,7 @@ pub fn print_hir_stats(krate: &hir::Crate) {\n     collector.print(\"HIR STATS\");\n }\n \n-pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) {\n+pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n     let mut collector = StatCollector {\n         krate: None,\n         data: FxHashMap::default(),"}, {"sha": "6b1ce578240e4772646c31ef2e2ff71403d9be01", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n \n-pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n         tcx.hir()"}, {"sha": "616e6974110e680b5cec399a15de685b8024dcd1", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -45,7 +45,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n     cx: Context,\n }\n \n-fn check_mod_loops<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,\n         hir_map: &tcx.hir(),"}, {"sha": "e14fa07fbbfe4323fbcee04958b0ce7c1105e47c", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -39,7 +39,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn const_is_rvalue_promotable_to_static(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     assert!(def_id.is_local());\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id)\n@@ -48,7 +48,7 @@ fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId)\n     tcx.rvalue_promotable_map(def_id).contains(&body_id.hir_id.local_id)\n }\n \n-fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ItemLocalSet {\n+fn rvalue_promotable_map(tcx: TyCtxt<'_>, def_id: DefId) -> &ItemLocalSet {\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n         return tcx.rvalue_promotable_map(outer_def_id);"}, {"sha": "816e283a104604e7c4befed74ac8a12c1b50aa84", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -30,11 +30,11 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find_plugin_registrar(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.plugin_registrar_fn(LOCAL_CRATE)\n }\n \n-fn plugin_registrar_fn<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "2fb65a6069372df410413e4263b38cd8a389eb52", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -77,7 +77,7 @@ impl<'a> Registry<'a> {\n     ///\n     /// Returns empty slice in case the plugin was loaded\n     /// with `--extra-plugins`\n-    pub fn args<'b>(&'b self) -> &'b [ast::NestedMetaItem] {\n+    pub fn args(&self) -> &[ast::NestedMetaItem] {\n         self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n     }\n "}, {"sha": "339021f511afdfb2c23f58b3caae13669ee2198b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec711767a7ac6911faae85d4b9285d07d5ebf949/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ec711767a7ac6911faae85d4b9285d07d5ebf949", "patch": "@@ -337,7 +337,7 @@ fn item_tables<'a, 'tcx>(\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n-fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx>) -> ty::Visibility {\n+fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }\n \n@@ -384,14 +384,14 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n trait VisibilityLike: Sized {\n     const MAX: Self;\n     const SHALLOW: bool = false;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self;\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;\n \n     // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to\n     // associated types for which we can't determine visibility precisely.\n-    fn of_impl<'a, 'tcx>(\n+    fn of_impl(\n         hir_id: hir::HirId,\n-        tcx: TyCtxt<'tcx>,\n-        access_levels: &'a AccessLevels,\n+        tcx: TyCtxt<'_>,\n+        access_levels: &AccessLevels,\n     ) -> Self {\n         let mut find = FindMin { tcx, access_levels, min: Self::MAX };\n         let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n@@ -404,7 +404,7 @@ trait VisibilityLike: Sized {\n }\n impl VisibilityLike for ty::Visibility {\n     const MAX: Self = ty::Visibility::Public;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         min(def_id_visibility(find.tcx, def_id).0, find.min, find.tcx)\n     }\n }\n@@ -420,7 +420,7 @@ impl VisibilityLike for Option<AccessLevel> {\n     // both \"shallow\" version of its self type and \"shallow\" version of its trait if it exists\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         cmp::min(if let Some(hir_id) = find.tcx.hir().as_local_hir_id(def_id) {\n             find.access_levels.map.get(&hir_id).cloned()\n         } else {\n@@ -1828,7 +1828,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n@@ -1855,7 +1855,7 @@ fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n }\n \n-fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx AccessLevels {\n+fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     // Build up a set of all exported items in the AST. This is a set of all\n@@ -1879,7 +1879,7 @@ fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx Acce\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) {\n+fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);"}]}