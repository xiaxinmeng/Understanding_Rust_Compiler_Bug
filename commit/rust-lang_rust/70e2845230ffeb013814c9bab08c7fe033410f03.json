{"sha": "70e2845230ffeb013814c9bab08c7fe033410f03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTI4NDUyMzBmZmViMDEzODE0YzliYWIwOGM3ZmUwMzM0MTBmMDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T09:42:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T22:23:35Z"}, "message": "Avoid passing around the thread-local interner in `librustc_metadata`.", "tree": {"sha": "34d8f92c6c8902230d3c69ecc612bfd41dfb4388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d8f92c6c8902230d3c69ecc612bfd41dfb4388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e2845230ffeb013814c9bab08c7fe033410f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e2845230ffeb013814c9bab08c7fe033410f03", "html_url": "https://github.com/rust-lang/rust/commit/70e2845230ffeb013814c9bab08c7fe033410f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e2845230ffeb013814c9bab08c7fe033410f03/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eb6d0b485acc5f6e0d9f9b0946000bce12f5bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb6d0b485acc5f6e0d9f9b0946000bce12f5bfc", "html_url": "https://github.com/rust-lang/rust/commit/1eb6d0b485acc5f6e0d9f9b0946000bce12f5bfc"}], "stats": {"total": 201, "additions": 69, "deletions": 132}, "files": [{"sha": "84e040319231737c085f9e32a05bd53c567d244b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -97,7 +97,7 @@ use rustc::session::early_error;\n use syntax::{ast, json};\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::parse::{self, PResult, token};\n+use syntax::parse::{self, PResult};\n use syntax_pos::MultiSpan;\n use errors::emitter::Emitter;\n \n@@ -201,7 +201,7 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n     };\n \n     let dep_graph = DepGraph::new(sopts.build_dep_graph());\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let codemap = Rc::new(CodeMap::with_file_loader(loader));\n     let sess = session::build_session_with_codemap(sopts,\n                                                    &dep_graph,\n@@ -432,7 +432,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     return None;\n                 }\n                 let dep_graph = DepGraph::new(sopts.build_dep_graph());\n-                let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+                let cstore = Rc::new(CStore::new(&dep_graph));\n                 let sess = build_session(sopts.clone(),\n                     &dep_graph,\n                     None,"}, {"sha": "911becd3f569b99fadbb0982e5ae155743a67e1f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -106,7 +106,7 @@ fn test_env<F>(source_string: &str,\n \n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let sess = session::build_session_(options, &dep_graph, None, diagnostic_handler,\n                                        Rc::new(CodeMap::new()), cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "d4443c6d09d7cb6b6282a7b411eb476427a1715a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -557,7 +557,6 @@ impl<'a> CrateReader<'a> {\n         let source_name = format!(\"<{} macros>\", item.ident);\n         let mut macros = vec![];\n         decoder::each_exported_macro(ekrate.metadata.as_slice(),\n-                                     &self.cstore.intr,\n             |name, attrs, span, body| {\n                 // NB: Don't use parse::parse_tts_from_source_str because it parses with\n                 // quote_depth > 0."}, {"sha": "850d6c91f66ef05b2c7637d5367a221abe8fb9d1", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_adt_def(&self.intr, &cdata, def.index, tcx)\n+        decoder::get_adt_def(&cdata, def.index, tcx)\n     }\n \n     fn method_arg_names(&self, did: DefId) -> Vec<String>\n@@ -140,13 +140,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn item_name(&self, def: DefId) -> ast::Name {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_item_name(&self.intr, &cdata, def.index)\n+        decoder::get_item_name(&cdata, def.index)\n     }\n \n     fn opt_item_name(&self, def: DefId) -> Option<ast::Name> {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::maybe_get_item_name(&self.intr, &cdata, def.index)\n+        decoder::maybe_get_item_name(&cdata, def.index)\n     }\n \n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>\n@@ -176,7 +176,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_provided_trait_methods(self.intr.clone(), &cdata, def.index, tcx)\n+        decoder::get_provided_trait_methods(&cdata, def.index, tcx)\n     }\n \n     fn trait_item_def_ids(&self, def: DefId)\n@@ -222,7 +222,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                              -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_associated_consts(self.intr.clone(), &cdata, def.index, tcx)\n+        decoder::get_associated_consts(&cdata, def.index, tcx)\n     }\n \n     fn impl_parent(&self, impl_def: DefId) -> Option<DefId> {\n@@ -243,11 +243,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_impl_or_trait_item(\n-            self.intr.clone(),\n-            &cdata,\n-            def.index,\n-            tcx)\n+        decoder::get_impl_or_trait_item(&cdata, def.index, tcx)\n     }\n \n     fn is_const_fn(&self, did: DefId) -> bool\n@@ -460,7 +456,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_struct_field_names(&self.intr, &cdata, def.index)\n+        decoder::get_struct_field_names(&cdata, def.index)\n     }\n \n     fn item_children(&self, def_id: DefId) -> Vec<ChildItem>\n@@ -469,14 +465,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut result = vec![];\n         let crate_data = self.get_crate_data(def_id.krate);\n         let get_crate_data = |cnum| self.get_crate_data(cnum);\n-        decoder::each_child_of_item(\n-            self.intr.clone(), &crate_data,\n-            def_id.index, get_crate_data,\n-            |def, name, vis| result.push(ChildItem {\n-                def: def,\n-                name: name,\n-                vis: vis\n-            }));\n+        decoder::each_child_of_item(&crate_data, def_id.index, get_crate_data, |def, name, vis| {\n+            result.push(ChildItem { def: def, name: name, vis: vis });\n+        });\n         result\n     }\n \n@@ -485,13 +476,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut result = vec![];\n         let crate_data = self.get_crate_data(cnum);\n         let get_crate_data = |cnum| self.get_crate_data(cnum);\n-        decoder::each_top_level_item_of_crate(\n-            self.intr.clone(), &crate_data, get_crate_data,\n-            |def, name, vis| result.push(ChildItem {\n-                def: def,\n-                name: name,\n-                vis: vis\n-            }));\n+        decoder::each_top_level_item_of_crate(&crate_data, get_crate_data, |def, name, vis| {\n+            result.push(ChildItem { def: def, name: name, vis: vis });\n+        });\n         result\n     }\n "}, {"sha": "6baa0ac23f3f5073103ec8f6fcb709162544a547", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -37,7 +37,6 @@ use flate::Bytes;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap;\n-use syntax::parse::token::IdentInterner;\n use syntax_pos;\n \n pub use middle::cstore::{NativeLibraryKind, LinkagePreference};\n@@ -106,21 +105,18 @@ pub struct CStore {\n     used_libraries: RefCell<Vec<(String, NativeLibraryKind)>>,\n     used_link_args: RefCell<Vec<String>>,\n     statically_included_foreign_items: RefCell<NodeSet>,\n-    pub intr: Rc<IdentInterner>,\n     pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n }\n \n impl CStore {\n-    pub fn new(dep_graph: &DepGraph,\n-               intr: Rc<IdentInterner>) -> CStore {\n+    pub fn new(dep_graph: &DepGraph) -> CStore {\n         CStore {\n             dep_graph: dep_graph.clone(),\n             metas: RefCell::new(FnvHashMap()),\n             extern_mod_crate_map: RefCell::new(FnvHashMap()),\n             used_crate_sources: RefCell::new(Vec::new()),\n             used_libraries: RefCell::new(Vec::new()),\n             used_link_args: RefCell::new(Vec::new()),\n-            intr: intr,\n             statically_included_foreign_items: RefCell::new(NodeSet()),\n             visible_parent_map: RefCell::new(FnvHashMap()),\n         }"}, {"sha": "762f3609ac594656206402f875c771ee189410c3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 45, "deletions": 85, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -53,7 +53,7 @@ use rbml::reader;\n use rbml;\n use rustc_serialize::Decodable;\n use syntax::attr;\n-use syntax::parse::token::{self, IdentInterner};\n+use syntax::parse::token;\n use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap;\n@@ -284,17 +284,14 @@ fn item_trait_ref<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata:\n     doc_trait_ref(tp, tcx, cdata)\n }\n \n-fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name {\n-    maybe_item_name(intr, item).expect(\"no item in item_name\")\n+fn item_name(item: rbml::Doc) -> ast::Name {\n+    maybe_item_name(item).expect(\"no item in item_name\")\n }\n \n-fn maybe_item_name(intr: &IdentInterner, item: rbml::Doc) -> Option<ast::Name> {\n+fn maybe_item_name(item: rbml::Doc) -> Option<ast::Name> {\n     reader::maybe_get_doc(item, tag_paths_data_name).map(|name| {\n         let string = name.as_str_slice();\n-        match intr.find(string) {\n-            None => token::intern(string),\n-            Some(val) => val,\n-        }\n+        token::intern(string)\n     })\n }\n \n@@ -400,8 +397,7 @@ pub fn get_trait_def<'a, 'tcx>(cdata: Cmd,\n                       associated_type_names)\n }\n \n-pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n-                             cdata: Cmd,\n+pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,\n                              item_id: DefIndex,\n                              tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                              -> ty::AdtDefMaster<'tcx>\n@@ -412,9 +408,7 @@ pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n             _ => bug!(\"unexpected family: {:?}\", family),\n         }\n     }\n-    fn get_enum_variants<'tcx>(intr: &IdentInterner,\n-                               cdata: Cmd,\n-                               doc: rbml::Doc) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n+    fn get_enum_variants<'tcx>(cdata: Cmd, doc: rbml::Doc) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n         let mut disr_val = 0;\n         reader::tagged_docs(doc, tag_items_data_item_variant).map(|p| {\n             let did = translated_def_id(cdata, p);\n@@ -428,16 +422,14 @@ pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n \n             ty::VariantDefData {\n                 did: did,\n-                name: item_name(intr, item),\n-                fields: get_variant_fields(intr, cdata, item),\n+                name: item_name(item),\n+                fields: get_variant_fields(cdata, item),\n                 disr_val: ConstInt::Infer(disr),\n                 kind: expect_variant_kind(item_family(item)),\n             }\n         }).collect()\n     }\n-    fn get_variant_fields<'tcx>(intr: &IdentInterner,\n-                                cdata: Cmd,\n-                                doc: rbml::Doc) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n+    fn get_variant_fields<'tcx>(cdata: Cmd, doc: rbml::Doc) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n         let mut index = 0;\n         reader::tagged_docs(doc, tag_item_field).map(|f| {\n             let ff = item_family(f);\n@@ -446,24 +438,23 @@ pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n                 _ => bug!(\"expected field, found {:?}\", ff)\n             };\n             ty::FieldDefData::new(item_def_id(f, cdata),\n-                                  item_name(intr, f),\n+                                  item_name(f),\n                                   struct_field_family_to_visibility(ff))\n         }).chain(reader::tagged_docs(doc, tag_item_unnamed_field).map(|f| {\n             let ff = item_family(f);\n-            let name = intr.intern(index.to_string());\n+            let name = token::get_ident_interner().intern(index.to_string());\n             index += 1;\n             ty::FieldDefData::new(item_def_id(f, cdata), name,\n                                   struct_field_family_to_visibility(ff))\n         })).collect()\n     }\n-    fn get_struct_variant<'tcx>(intr: &IdentInterner,\n-                                cdata: Cmd,\n+    fn get_struct_variant<'tcx>(cdata: Cmd,\n                                 doc: rbml::Doc,\n                                 did: DefId) -> ty::VariantDefData<'tcx, 'tcx> {\n         ty::VariantDefData {\n             did: did,\n-            name: item_name(intr, doc),\n-            fields: get_variant_fields(intr, cdata, doc),\n+            name: item_name(doc),\n+            fields: get_variant_fields(cdata, doc),\n             disr_val: ConstInt::Infer(0),\n             kind: expect_variant_kind(item_family(doc)),\n         }\n@@ -475,15 +466,15 @@ pub fn get_adt_def<'a, 'tcx>(intr: &IdentInterner,\n     let (kind, variants) = match item_family(doc) {\n         Enum => {\n             (ty::AdtKind::Enum,\n-             get_enum_variants(intr, cdata, doc))\n+             get_enum_variants(cdata, doc))\n         }\n         Struct(..) => {\n             // Use separate constructor id for unit/tuple structs and reuse did for braced structs.\n             ctor_did = reader::maybe_get_doc(doc, tag_items_data_item_struct_ctor).map(|ctor_doc| {\n                 translated_def_id(cdata, ctor_doc)\n             });\n             (ty::AdtKind::Struct,\n-             vec![get_struct_variant(intr, cdata, doc, ctor_did.unwrap_or(did))])\n+             vec![get_struct_variant(cdata, doc, ctor_did.unwrap_or(did))])\n         }\n         _ => bug!(\"get_adt_def called on a non-ADT {:?} - {:?}\",\n                   item_family(doc), did)\n@@ -663,8 +654,7 @@ pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where\n     })\n }\n \n-fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n-                                     cdata: Cmd,\n+fn each_child_of_item_or_crate<F, G>(cdata: Cmd,\n                                      item_doc: rbml::Doc,\n                                      mut get_crate_data: G,\n                                      mut callback: F) where\n@@ -690,7 +680,7 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n         // Get the item.\n         if let Some(child_item_doc) = crate_data.get_item(child_def_id.index) {\n             // Hand off the item to the callback.\n-            let child_name = item_name(&intr, child_item_doc);\n+            let child_name = item_name(child_item_doc);\n             let def_like = item_to_def_like(crate_data, child_item_doc, child_def_id);\n             let visibility = item_visibility(child_item_doc);\n             callback(def_like, child_name, visibility);\n@@ -711,7 +701,7 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n                 if let Some(impl_method_doc) = cdata.get_item(impl_item_def_id.index) {\n                     if let StaticMethod = item_family(impl_method_doc) {\n                         // Hand off the static method to the callback.\n-                        let static_method_name = item_name(&intr, impl_method_doc);\n+                        let static_method_name = item_name(impl_method_doc);\n                         let static_method_def_like = item_to_def_like(cdata, impl_method_doc,\n                                                                       impl_item_def_id);\n                         callback(static_method_def_like,\n@@ -755,54 +745,41 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n }\n \n /// Iterates over each child of the given item.\n-pub fn each_child_of_item<F, G>(intr: Rc<IdentInterner>,\n-                               cdata: Cmd,\n-                               id: DefIndex,\n-                               get_crate_data: G,\n-                               callback: F) where\n-    F: FnMut(DefLike, ast::Name, ty::Visibility),\n-    G: FnMut(ast::CrateNum) -> Rc<CrateMetadata>,\n+pub fn each_child_of_item<F, G>(cdata: Cmd, id: DefIndex, get_crate_data: G, callback: F)\n+    where F: FnMut(DefLike, ast::Name, ty::Visibility),\n+          G: FnMut(ast::CrateNum) -> Rc<CrateMetadata>,\n {\n     // Find the item.\n     let item_doc = match cdata.get_item(id) {\n         None => return,\n         Some(item_doc) => item_doc,\n     };\n \n-    each_child_of_item_or_crate(intr,\n-                                cdata,\n-                                item_doc,\n-                                get_crate_data,\n-                                callback)\n+    each_child_of_item_or_crate(cdata, item_doc, get_crate_data, callback)\n }\n \n /// Iterates over all the top-level crate items.\n-pub fn each_top_level_item_of_crate<F, G>(intr: Rc<IdentInterner>,\n-                                          cdata: Cmd,\n-                                          get_crate_data: G,\n-                                          callback: F) where\n-    F: FnMut(DefLike, ast::Name, ty::Visibility),\n-    G: FnMut(ast::CrateNum) -> Rc<CrateMetadata>,\n+pub fn each_top_level_item_of_crate<F, G>(cdata: Cmd, get_crate_data: G, callback: F)\n+    where F: FnMut(DefLike, ast::Name, ty::Visibility),\n+          G: FnMut(ast::CrateNum) -> Rc<CrateMetadata>,\n {\n     let root_doc = rbml::Doc::new(cdata.data());\n     let misc_info_doc = reader::get_doc(root_doc, tag_misc_info);\n     let crate_items_doc = reader::get_doc(misc_info_doc,\n                                           tag_misc_info_crate_items);\n \n-    each_child_of_item_or_crate(intr,\n-                                cdata,\n+    each_child_of_item_or_crate(cdata,\n                                 crate_items_doc,\n                                 get_crate_data,\n                                 callback)\n }\n \n-pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex) -> ast::Name {\n-    item_name(intr, cdata.lookup_item(id))\n+pub fn get_item_name(cdata: Cmd, id: DefIndex) -> ast::Name {\n+    item_name(cdata.lookup_item(id))\n }\n \n-pub fn maybe_get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex)\n-                         -> Option<ast::Name> {\n-    maybe_item_name(intr, cdata.lookup_item(id))\n+pub fn maybe_get_item_name(cdata: Cmd, id: DefIndex) -> Option<ast::Name> {\n+    maybe_item_name(cdata.lookup_item(id))\n }\n \n pub fn maybe_get_item_ast<'a, 'tcx>(cdata: Cmd, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)\n@@ -955,12 +932,9 @@ pub fn get_impl_items(cdata: Cmd, impl_id: DefIndex)\n     }).collect()\n }\n \n-pub fn get_trait_name(intr: Rc<IdentInterner>,\n-                      cdata: Cmd,\n-                      id: DefIndex)\n-                      -> ast::Name {\n+pub fn get_trait_name(cdata: Cmd, id: DefIndex) -> ast::Name {\n     let doc = cdata.lookup_item(id);\n-    item_name(&intr, doc)\n+    item_name(doc)\n }\n \n pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool {\n@@ -973,10 +947,7 @@ pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool {\n     }\n }\n \n-pub fn get_impl_or_trait_item<'a, 'tcx>(intr: Rc<IdentInterner>,\n-                                        cdata: Cmd,\n-                                        id: DefIndex,\n-                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+pub fn get_impl_or_trait_item<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                         -> Option<ty::ImplOrTraitItem<'tcx>> {\n     let item_doc = cdata.lookup_item(id);\n \n@@ -993,7 +964,7 @@ pub fn get_impl_or_trait_item<'a, 'tcx>(intr: Rc<IdentInterner>,\n         _ => ImplContainer(container_id),\n     };\n \n-    let name = item_name(&intr, item_doc);\n+    let name = item_name(item_doc);\n     let vis = item_visibility(item_doc);\n     let defaultness = item_defaultness(item_doc);\n \n@@ -1068,8 +1039,7 @@ pub fn get_item_variances(cdata: Cmd, id: DefIndex) -> ty::ItemVariances {\n     Decodable::decode(&mut decoder).unwrap()\n }\n \n-pub fn get_provided_trait_methods<'a, 'tcx>(intr: Rc<IdentInterner>,\n-                                            cdata: Cmd,\n+pub fn get_provided_trait_methods<'a, 'tcx>(cdata: Cmd,\n                                             id: DefIndex,\n                                             tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                             -> Vec<Rc<ty::Method<'tcx>>> {\n@@ -1080,10 +1050,7 @@ pub fn get_provided_trait_methods<'a, 'tcx>(intr: Rc<IdentInterner>,\n         let mth = cdata.lookup_item(did.index);\n \n         if item_sort(mth) == Some('p') {\n-            let trait_item = get_impl_or_trait_item(intr.clone(),\n-                                                    cdata,\n-                                                    did.index,\n-                                                    tcx);\n+            let trait_item = get_impl_or_trait_item(cdata, did.index, tcx);\n             if let Some(ty::MethodTraitItem(ref method)) = trait_item {\n                 Some((*method).clone())\n             } else {\n@@ -1095,10 +1062,7 @@ pub fn get_provided_trait_methods<'a, 'tcx>(intr: Rc<IdentInterner>,\n     }).collect()\n }\n \n-pub fn get_associated_consts<'a, 'tcx>(intr: Rc<IdentInterner>,\n-                                       cdata: Cmd,\n-                                       id: DefIndex,\n-                                       tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+pub fn get_associated_consts<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                        -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n     let item = cdata.lookup_item(id);\n \n@@ -1109,10 +1073,7 @@ pub fn get_associated_consts<'a, 'tcx>(intr: Rc<IdentInterner>,\n \n             match item_sort(ac_doc) {\n                 Some('C') | Some('c') => {\n-                    let trait_item = get_impl_or_trait_item(intr.clone(),\n-                                                            cdata,\n-                                                            did.index,\n-                                                            tcx);\n+                    let trait_item = get_impl_or_trait_item(cdata, did.index, tcx);\n                     if let Some(ty::ConstTraitItem(ref ac)) = trait_item {\n                         Some((*ac).clone())\n                     } else {\n@@ -1180,14 +1141,13 @@ fn struct_field_family_to_visibility(family: Family) -> ty::Visibility {\n     }\n }\n \n-pub fn get_struct_field_names(intr: &IdentInterner, cdata: Cmd, id: DefIndex)\n-    -> Vec<ast::Name> {\n+pub fn get_struct_field_names(cdata: Cmd, id: DefIndex) -> Vec<ast::Name> {\n     let item = cdata.lookup_item(id);\n     let mut index = 0;\n     reader::tagged_docs(item, tag_item_field).map(|an_item| {\n-        item_name(intr, an_item)\n+        item_name(an_item)\n     }).chain(reader::tagged_docs(item, tag_item_unnamed_field).map(|_| {\n-        let name = intr.intern(index.to_string());\n+        let name = token::get_ident_interner().intern(index.to_string());\n         index += 1;\n         name\n     })).collect()\n@@ -1503,12 +1463,12 @@ pub fn get_plugin_registrar_fn(data: &[u8]) -> Option<DefIndex> {\n         .map(|doc| DefIndex::from_u32(reader::doc_as_u32(doc)))\n }\n \n-pub fn each_exported_macro<F>(data: &[u8], intr: &IdentInterner, mut f: F) where\n+pub fn each_exported_macro<F>(data: &[u8], mut f: F) where\n     F: FnMut(ast::Name, Vec<ast::Attribute>, Span, String) -> bool,\n {\n     let macros = reader::get_doc(rbml::Doc::new(data), tag_macro_defs);\n     for macro_doc in reader::tagged_docs(macros, tag_macro_def) {\n-        let name = item_name(intr, macro_doc);\n+        let name = item_name(macro_doc);\n         let attrs = get_attributes(macro_doc);\n         let span = get_macro_span(macro_doc);\n         let body = reader::get_doc(macro_doc, tag_macro_def_body);"}, {"sha": "49a3991ecbe0bfb7b1a51d74bb11c1fd2b6d65e7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -24,7 +24,6 @@ use rustc_metadata::cstore::CStore;\n \n use syntax::{ast, codemap};\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::parse::token;\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -136,7 +135,7 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let sess = session::build_session_(sessopts, &dep_graph, cpath, diagnostic_handler,\n                                        codemap, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "bb69ba6e568d573d7618602ad2f7d29ee5c52733", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -37,7 +37,6 @@ use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n use errors;\n use errors::emitter::ColorConfig;\n-use syntax::parse::token;\n \n use core;\n use clean;\n@@ -82,7 +81,7 @@ pub fn run(input: &str,\n \n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let sess = session::build_session_(sessopts,\n                                        &dep_graph,\n                                        Some(input_path.clone()),\n@@ -239,7 +238,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n     let dep_graph = DepGraph::new(false);\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let sess = session::build_session_(sessopts,\n                                        &dep_graph,\n                                        None,"}, {"sha": "2e90b51843263b48ec9f84938050e8713879b414", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -30,18 +30,16 @@ use std::thread::Builder;\n \n use rustc::dep_graph::DepGraph;\n use rustc::hir::map as ast_map;\n-use rustc::middle::cstore::{CrateStore, LinkagePreference};\n+use rustc::middle::cstore::LinkagePreference;\n use rustc::ty;\n use rustc::session::config::{self, basic_options, build_configuration, Input, Options};\n use rustc::session::build_session;\n use rustc_driver::{driver, abort_on_err};\n use rustc_resolve::MakeGlobMap;\n-use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n use libc::c_void;\n \n use rustc_errors::registry::Registry;\n-use syntax::parse::token;\n \n fn main() {\n     // Currently trips an assertion on i686-msvc, presumably because the support\n@@ -226,7 +224,7 @@ fn compile_program(input: &str, sysroot: PathBuf)\n     let handle = thread.spawn(move || {\n         let opts = build_exec_options(sysroot);\n         let dep_graph = DepGraph::new(opts.build_dep_graph());\n-        let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+        let cstore = Rc::new(CStore::new(&dep_graph));\n         let sess = build_session(opts,\n                                  &dep_graph,\n                                  None,"}, {"sha": "d5220316a20ff083381235e0bd499cff04721629", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e2845230ffeb013814c9bab08c7fe033410f03/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=70e2845230ffeb013814c9bab08c7fe033410f03", "patch": "@@ -23,7 +23,6 @@ use rustc::session::config::{basic_options, build_configuration, Input, OutputTy\n use rustc_driver::driver::{compile_input, CompileController, anon_src};\n use rustc_metadata::cstore::CStore;\n use rustc_errors::registry::Registry;\n-use syntax::parse::token;\n \n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -57,7 +56,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n     let dep_graph = DepGraph::new(opts.build_dep_graph());\n-    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let cstore = Rc::new(CStore::new(&dep_graph));\n     let sess = build_session(opts, &dep_graph, None, descriptions, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)"}]}