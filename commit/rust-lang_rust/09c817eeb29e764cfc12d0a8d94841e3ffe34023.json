{"sha": "09c817eeb29e764cfc12d0a8d94841e3ffe34023", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzgxN2VlYjI5ZTc2NGNmYzEyZDBhOGQ5NDg0MWUzZmZlMzQwMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T23:14:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T23:14:06Z"}, "message": "Auto merge of #72120 - Dylan-DPC:rollup-ca0tur2, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #72014 (Deprecated emoji)\n - #72019 (Fix debug assertion in error code)\n - #72027 (Use CDN for ci-caches on download)\n - #72044 (use min_specialization for some rustc crates where it requires no changes)\n - #72052 (display `ConstKind::Param`)\n - #72067 (Emit a warning when optimization fuel runs out)\n - #72072 (doc: minus (U+2212) instead of dash (U+002D) for negative infinity)\n - #72077 (Improve E0571 wording)\n - #72107 (Clean up E0579 explanation)\n - #72109 (Fix clippy warnings)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f118ca7b1552fec31eb6a93009347897c3e0c18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f118ca7b1552fec31eb6a93009347897c3e0c18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c817eeb29e764cfc12d0a8d94841e3ffe34023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c817eeb29e764cfc12d0a8d94841e3ffe34023", "html_url": "https://github.com/rust-lang/rust/commit/09c817eeb29e764cfc12d0a8d94841e3ffe34023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c817eeb29e764cfc12d0a8d94841e3ffe34023/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "html_url": "https://github.com/rust-lang/rust/commit/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1"}, {"sha": "dfa3677bee58a39296daf85645eff7d51cbad8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa3677bee58a39296daf85645eff7d51cbad8ae", "html_url": "https://github.com/rust-lang/rust/commit/dfa3677bee58a39296daf85645eff7d51cbad8ae"}], "stats": {"total": 303, "additions": 178, "deletions": 125}, "files": [{"sha": "291dbf603612a71441121ec13d1e601b06242158", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -34,6 +34,7 @@ jobs:\n       CI_JOB_NAME: \"${{ matrix.name }}\"\n       SCCACHE_BUCKET: rust-lang-gha-caches\n       TOOLSTATE_REPO: \"https://github.com/pietroalbini/rust-toolstate\"\n+      CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n     if: \"github.event_name == 'pull_request'\"\n     strategy:\n       matrix:\n@@ -146,6 +147,7 @@ jobs:\n       TOOLSTATE_PUBLISH: 1\n       CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n       ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+      CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n     if: \"github.event_name == 'push' && github.ref == 'refs/heads/try' && github.repository == 'rust-lang-ci/rust'\"\n     strategy:\n       matrix:\n@@ -255,6 +257,7 @@ jobs:\n       TOOLSTATE_PUBLISH: 1\n       CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n       ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+      CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n     if: \"github.event_name == 'push' && github.ref == 'refs/heads/auto' && github.repository == 'rust-lang-ci/rust'\"\n     strategy:\n       matrix:\n@@ -606,6 +609,7 @@ jobs:\n       TOOLSTATE_PUBLISH: 1\n       CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n       ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+      CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n     if: \"github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository == 'rust-lang-ci/rust'\"\n     steps:\n       - name: checkout the source code"}, {"sha": "d891ad1b6680e622323b7bbd21632d21a3e81fb2", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -17,6 +17,8 @@ dist=$objdir/build/dist\n \n source \"$ci_dir/shared.sh\"\n \n+CACHE_DOMAIN=\"${CACHE_DOMAIN:-ci-caches.rust-lang.org}\"\n+\n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n     if [ \"$CI\" != \"\" ]; then\n       hash_key=/tmp/.docker-hash-key.txt\n@@ -38,9 +40,7 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       cksum=$(sha512sum $hash_key | \\\n         awk '{print $1}')\n \n-      s3url=\"s3://$SCCACHE_BUCKET/docker/$cksum\"\n-      url=\"https://$SCCACHE_BUCKET.s3.amazonaws.com/docker/$cksum\"\n-      upload=\"aws s3 cp - $s3url\"\n+      url=\"https://$CACHE_DOMAIN/docker/$cksum\"\n \n       echo \"Attempting to download $url\"\n       rm -f /tmp/rustci_docker_cache\n@@ -65,7 +65,9 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       -f \"$dockerfile\" \\\n       \"$context\"\n \n-    if [ \"$upload\" != \"\" ]; then\n+    if [ \"$CI\" != \"\" ]; then\n+      s3url=\"s3://$SCCACHE_BUCKET/docker/$cksum\"\n+      upload=\"aws s3 cp - $s3url\"\n       digest=$(docker inspect rust-ci --format '{{.Id}}')\n       echo \"Built container $digest\"\n       if ! grep -q \"$digest\" <(echo \"$loaded_images\"); then"}, {"sha": "1c120f8163459579e0fcfdf4c8fa33df9c748976", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -37,6 +37,7 @@ x--expand-yaml-anchors--remove:\n   - &public-variables\n     SCCACHE_BUCKET: rust-lang-gha-caches\n     TOOLSTATE_REPO: https://github.com/pietroalbini/rust-toolstate\n+    CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n \n   - &prod-variables\n     SCCACHE_BUCKET: rust-lang-gha-caches\n@@ -51,6 +52,7 @@ x--expand-yaml-anchors--remove:\n     # (caches, artifacts...).\n     CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n     ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+    CACHE_DOMAIN: ci-caches-gha.rust-lang.org\n \n   - &base-job\n     env: {}"}, {"sha": "434569020d2a8b1b00cdfce94c6648113d0af2d8", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -367,7 +367,7 @@ impl f32 {\n     /// Infinity (\u221e).\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n-    /// Negative infinity (-\u221e).\n+    /// Negative infinity (\u2212\u221e).\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n "}, {"sha": "6476ddb4541ff8900952247be05e5082c3ba94e3", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -366,7 +366,7 @@ impl f64 {\n     /// Infinity (\u221e).\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n-    /// Negative infinity (-\u221e).\n+    /// Negative infinity (\u2212\u221e).\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n "}, {"sha": "2cf81af04166cb692d9012ffd7a1fc98b78d8da7", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -33,7 +33,7 @@\n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n #![feature(marker_trait_attr)]\n-#![feature(specialization)]\n+#![feature(specialization)] // FIXME: min_specialization does not work\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "af09779d072c313d608ea781676bb6e97699dae4", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -634,7 +634,7 @@ pub fn eval_condition(\n                 [NestedMetaItem::Literal(Lit { span, .. })\n                 | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n                     sess.span_diagnostic\n-                        .struct_span_err(*span, &*format!(\"expected a version literal\"))\n+                        .struct_span_err(*span, \"expected a version literal\")\n                         .emit();\n                     return false;\n                 }"}, {"sha": "7ee60176dbead16ce3eb0be88bfd9ec50a86b9e7", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -12,7 +12,7 @@\n #![feature(generators)]\n #![feature(generator_trait)]\n #![feature(fn_traits)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n #![feature(optin_builtin_traits)]\n #![feature(nll)]\n #![feature(allow_internal_unstable)]"}, {"sha": "e94a0c6eb5943d8012fc5c0e1a5ae3bc19d695a7", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -52,7 +52,7 @@ impl<T: PartialEq> TinyList<T> {\n             if &e.data == data {\n                 return true;\n             }\n-            elem = e.next.as_ref().map(|e| &**e);\n+            elem = e.next.as_deref();\n         }\n         false\n     }\n@@ -62,7 +62,7 @@ impl<T: PartialEq> TinyList<T> {\n         let (mut elem, mut count) = (self.head.as_ref(), 0);\n         while let Some(ref e) = elem {\n             count += 1;\n-            elem = e.next.as_ref().map(|e| &**e);\n+            elem = e.next.as_deref();\n         }\n         count\n     }"}, {"sha": "eadae05aa304c04af0f0c25ef6ebe1b310d29aa4", "filename": "src/librustc_error_codes/error_codes/E0571.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_error_codes%2Ferror_codes%2FE0571.md", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_error_codes%2Ferror_codes%2FE0571.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0571.md?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -7,7 +7,7 @@ Example of erroneous code:\n # fn satisfied(n: usize) -> bool { n % 23 == 0 }\n let result = while true {\n     if satisfied(i) {\n-        break 2*i; // error: `break` with value from a `while` loop\n+        break 2 * i; // error: `break` with value from a `while` loop\n     }\n     i += 1;\n };\n@@ -22,9 +22,9 @@ Make sure `break value;` statements only occur in `loop` loops:\n ```\n # let mut i = 1;\n # fn satisfied(n: usize) -> bool { n % 23 == 0 }\n-let result = loop { // ok!\n+let result = loop { // This is now a \"loop\" loop.\n     if satisfied(i) {\n-        break 2*i;\n+        break 2 * i; // ok!\n     }\n     i += 1;\n };"}, {"sha": "f554242a3d466e1265b0092959eec3bdf765bd12", "filename": "src/librustc_error_codes/error_codes/E0579.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_error_codes%2Ferror_codes%2FE0579.md", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_error_codes%2Ferror_codes%2FE0579.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0579.md?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -1,7 +1,4 @@\n-When matching against an exclusive range, the compiler verifies that the range\n-is non-empty. Exclusive range patterns include the start point but not the end\n-point, so this is equivalent to requiring the start of the range to be less\n-than the end of the range.\n+A lower range wasn't less than the upper range.\n \n Erroneous code example:\n \n@@ -17,3 +14,8 @@ fn main() {\n     }\n }\n ```\n+\n+When matching against an exclusive range, the compiler verifies that the range\n+is non-empty. Exclusive range patterns include the start point but not the end\n+point, so this is equivalent to requiring the start of the range to be less\n+than the end of the range."}, {"sha": "b51c0a6e98840b3374c18747cf8d6c709f8e9289", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -8,7 +8,7 @@\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n #![feature(or_patterns)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "b34685006e22301c111938ccadaed42a0ee56f57", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -112,8 +112,7 @@ pub fn elaborate_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let obligations =\n-        predicates.into_iter().map(|predicate| predicate_obligation(predicate, None)).collect();\n+    let obligations = predicates.map(|predicate| predicate_obligation(predicate, None)).collect();\n     elaborate_obligations(tcx, obligations)\n }\n \n@@ -149,7 +148,7 @@ impl Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.into_iter().map(|(pred, span)| {\n+                let obligations = predicates.predicates.iter().map(|(pred, span)| {\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n                         Some(*span),"}, {"sha": "94cd4bcd4c626008aa969a4c3f8ebbbe90a5a18d", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> Queries<'tcx> {\n             let result = passes::register_plugins(\n                 self.session(),\n                 &*self.codegen_backend().metadata_loader(),\n-                self.compiler.register_lints.as_ref().map(|p| &**p).unwrap_or_else(|| empty),\n+                self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n             );"}, {"sha": "2a2169880a54e6e826a67c01b99bfcbbfa0aa344", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -7,7 +7,7 @@\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]\n-#![feature(specialization)]\n+#![feature(specialization)] // FIXME: min_specialization ICEs\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "682b335c5d071775f7e583930ebea1475e546483", "filename": "src/librustc_middle/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -72,9 +72,9 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         })\n     }\n \n-    fn read_deps<OP>(op: OP) -> ()\n+    fn read_deps<OP>(op: OP)\n     where\n-        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps>>) -> (),\n+        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps>>),\n     {\n         ty::tls::with_context_opt(|icx| {\n             let icx = if let Some(icx) = icx { icx } else { return };"}, {"sha": "1e3676496ce3934313afbb8b29dfd61797af3838", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -78,7 +78,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n         &tcx.untracked_crate.modules[&module]\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n-    providers.hir_owner_nodes =\n-        |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes);\n+    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n     map::provide(providers);\n }"}, {"sha": "d0f627d8bc5764f36960a610d702a4f9bbed9c1b", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -41,7 +41,7 @@\n #![feature(option_expect_none)]\n #![feature(or_patterns)]\n #![feature(range_is_empty)]\n-#![feature(specialization)]\n+#![feature(specialization)] // FIXME: min_specialization does not work\n #![feature(track_caller)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]"}, {"sha": "571e50f5ae26b3a5d42ea38a5d43e4819d1bd735", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> AssociatedItems<'tcx> {\n         &self,\n         name: Symbol,\n     ) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.get_by_key(&name).map(|v| *v)\n+        self.items.get_by_key(&name).copied()\n     }\n \n     /// Returns an iterator over all associated items with the given name."}, {"sha": "cf34fa53a1bed3c17fafc25e6d7801bafb954a93", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -701,12 +701,14 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n-                    // do not try to evaluate unevaluated constants. If we are const evaluating an\n+                    // Do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(write(\"_\"));\n                 } else if let Some(n) = sz.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n+                } else if let ty::ConstKind::Param(param) = sz.val {\n+                    p!(write(\"{}\", param));\n                 } else {\n                     p!(write(\"_\"));\n                 }"}, {"sha": "8f125098ee68483638ad83c7f2683a7cfc0c3952", "filename": "src/librustc_middle/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -171,10 +171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n \n-        blanket_impls\n-            .into_iter()\n-            .chain(non_blanket_impls.into_iter().map(|(_, v)| v).flatten())\n-            .cloned()\n+        blanket_impls.iter().chain(non_blanket_impls.iter().map(|(_, v)| v).flatten()).cloned()\n     }\n }\n "}, {"sha": "785c6c21d74432f286b787795148d9627e0f53f5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -19,7 +19,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(exhaustive_patterns)]\n #![feature(iter_order_by)]\n #![feature(never_type)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n #![feature(associated_type_bounds)]"}, {"sha": "65ff311d18215da6a79e5815dbb2273271877b6c", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             );\n         }\n \n-        adt_defined_here(&mut cx, &mut err, pattern_ty, &witnesses);\n+        adt_defined_here(&cx, &mut err, pattern_ty, &witnesses);\n         err.note(&format!(\"the matched value is of type `{}`\", pattern_ty));\n         err.emit();\n     }"}, {"sha": "854f8eeaf344152d03546a0baa6ec1a9719627c3", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         )\n                     }\n                     traits::NonStructuralMatchTy::Dynamic => {\n-                        format!(\"trait objects cannot be used in patterns\")\n+                        \"trait objects cannot be used in patterns\".to_string()\n                     }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")"}, {"sha": "6e7d116ce1d7e0f408e98f87d55e7c4d307af458", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         if blk.targeted_by_break {\n             self.break_ln.insert(blk.hir_id, succ);\n         }\n-        let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n+        let succ = self.propagate_through_opt_expr(blk.expr.as_deref(), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| self.propagate_through_stmt(stmt, succ))\n     }\n \n@@ -952,7 +952,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // initialization, which is mildly more complex than checking\n                 // once at the func header but otherwise equivalent.\n \n-                let succ = self.propagate_through_opt_expr(local.init.as_ref().map(|e| &**e), succ);\n+                let succ = self.propagate_through_opt_expr(local.init.as_deref(), succ);\n                 self.define_bindings_in_pat(&local.pat, succ)\n             }\n             hir::StmtKind::Item(..) => succ,"}, {"sha": "a6fa677cbc0af1b15da8edadb250750865638a74", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -797,7 +797,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         resolve_expr(self, ex);\n     }\n     fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n-        resolve_local(self, Some(&l.pat), l.init.as_ref().map(|e| &**e));\n+        resolve_local(self, Some(&l.pat), l.init.as_deref());\n     }\n }\n "}, {"sha": "d8875f8ac64a202353a04eeba308eea315a97df7", "filename": "src/librustc_query_system/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -80,7 +80,7 @@ impl<K: DepKind> DepNode<K> {\n             }\n         }\n \n-        return dep_node;\n+        dep_node\n     }\n }\n "}, {"sha": "e8d02692f37ba48f960147cfef274bb69e85495f", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -77,9 +77,9 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Ord + Hash {\n         OP: FnOnce() -> R;\n \n     /// Access dependencies from current implicit context.\n-    fn read_deps<OP>(op: OP) -> ()\n+    fn read_deps<OP>(op: OP)\n     where\n-        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>) -> ();\n+        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>);\n \n     fn can_reconstruct_query_key(&self) -> bool;\n }"}, {"sha": "8e350d3ba267e9ec187acb6f6c7db234f945eeaa", "filename": "src/librustc_query_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_query_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -4,7 +4,7 @@\n #![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![feature(specialization)]\n+#![feature(specialization)] // FIXME: min_specialization rejects `default const`\n #![feature(stmt_expr_attributes)]\n #![feature(vec_remove_item)]\n "}, {"sha": "b39b15dc24428b3772e593914cc06edcd15dc7c3", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -808,7 +808,7 @@ impl Session {\n                 let mut fuel = self.optimization_fuel.lock();\n                 ret = fuel.remaining != 0;\n                 if fuel.remaining == 0 && !fuel.out_of_fuel {\n-                    eprintln!(\"optimization-fuel-exhausted: {}\", msg());\n+                    self.warn(&format!(\"optimization-fuel-exhausted: {}\", msg()));\n                     fuel.out_of_fuel = true;\n                 } else if fuel.remaining > 0 {\n                     fuel.remaining -= 1;"}, {"sha": "58cdb87158afe4a940907270a15600855782bc12", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -12,7 +12,7 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n \n // FIXME(#56935): Work around ICEs during cross-compilation.\n #[allow(unused)]"}, {"sha": "be0512dcac95b217d3f705f6ac09eddaed7c66f5", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -39,7 +39,7 @@ fn environment<'tcx>(\n     let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n-    let clauses = predicates.into_iter().map(|pred| ChalkEnvironmentClause::Predicate(pred));\n+    let clauses = predicates.into_iter().map(ChalkEnvironmentClause::Predicate);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n     let node = tcx.hir().get(hir_id);\n@@ -224,7 +224,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                 ),\n \n                                 Err(_err) => errors.push(FulfillmentError {\n-                                    obligation: obligation,\n+                                    obligation,\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented,\n                                     ),\n@@ -238,7 +238,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                     }\n \n                     Err(NoSolution) => errors.push(FulfillmentError {\n-                        obligation: obligation,\n+                        obligation,\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented,\n                         ),\n@@ -257,6 +257,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n-        self.obligations.iter().map(|obligation| obligation.clone()).collect()\n+        self.obligations.iter().cloned().collect()\n     }\n }"}, {"sha": "e0b99333fd10bda181f41c173bbf61c2c9de2dc9", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -691,6 +691,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             if let ty::Ref(region, t_type, mutability) = trait_ref.skip_binder().self_ty().kind {\n+                if region.is_late_bound() || t_type.has_escaping_bound_vars() {\n+                    // Avoid debug assertion in `mk_obligation_for_def_id`.\n+                    //\n+                    // If the self type has escaping bound vars then it's not\n+                    // going to be the type of an expression, so the suggestion\n+                    // probably won't apply anyway.\n+                    return;\n+                }\n+\n                 let trait_type = match mutability {\n                     hir::Mutability::Mut => self.tcx.mk_imm_ref(region, t_type),\n                     hir::Mutability::Not => self.tcx.mk_mut_ref(region, t_type),\n@@ -1854,7 +1863,7 @@ impl NextTypeParamName for &[hir::GenericParam<'_>] {\n     fn next_type_param_name(&self, name: Option<&str>) -> String {\n         // This is the whitelist of possible parameter names that we might suggest.\n         let name = name.and_then(|n| n.chars().next()).map(|c| c.to_string().to_uppercase());\n-        let name = name.as_ref().map(|s| s.as_str());\n+        let name = name.as_deref();\n         let possible_names = [name.unwrap_or(\"T\"), \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\"];\n         let used_names = self\n             .iter()"}, {"sha": "a2aee9b6ef74d777d9a6c8dc6e6dfe73e6a27511", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // clauses or bounds?\n         let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -88,7 +88,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n         let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -134,7 +134,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n                 let predicates = self.tcx.predicates_of(adt_def_id).predicates;\n                 let where_clauses: Vec<_> = predicates\n-                    .into_iter()\n+                    .iter()\n                     .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n                     .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n                     .collect();\n@@ -166,46 +166,42 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         fundamental: adt_def.is_fundamental(),\n                     },\n                 });\n-                return struct_datum;\n+                struct_datum\n             }\n-            RustDefId::Ref(_) => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::ParameterKinds::from(\n-                            &self.interner,\n-                            vec![\n-                                chalk_ir::ParameterKind::Lifetime(()),\n-                                chalk_ir::ParameterKind::Ty(()),\n-                            ],\n-                        ),\n-                        chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+            RustDefId::Ref(_) => Arc::new(chalk_rust_ir::StructDatum {\n+                id: struct_id,\n+                binders: chalk_ir::Binders::new(\n+                    chalk_ir::ParameterKinds::from(\n+                        &self.interner,\n+                        vec![\n+                            chalk_ir::ParameterKind::Lifetime(()),\n+                            chalk_ir::ParameterKind::Ty(()),\n+                        ],\n                     ),\n-                    flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n-            }\n-            RustDefId::Array | RustDefId::Slice => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::ParameterKinds::from(\n-                            &self.interner,\n-                            Some(chalk_ir::ParameterKind::Ty(())),\n-                        ),\n-                        chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                ),\n+                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n+            }),\n+            RustDefId::Array | RustDefId::Slice => Arc::new(chalk_rust_ir::StructDatum {\n+                id: struct_id,\n+                binders: chalk_ir::Binders::new(\n+                    chalk_ir::ParameterKinds::from(\n+                        &self.interner,\n+                        Some(chalk_ir::ParameterKind::Ty(())),\n                     ),\n-                    flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n-            }\n+                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                ),\n+                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n+            }),\n             RustDefId::Str | RustDefId::Never | RustDefId::FnDef(_) => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n+                Arc::new(chalk_rust_ir::StructDatum {\n                     id: struct_id,\n                     binders: chalk_ir::Binders::new(\n                         chalk_ir::ParameterKinds::new(&self.interner),\n                         chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n                     ),\n                     flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n+                })\n             }\n \n             _ => bug!(\"Used not struct variant when expecting struct variant.\"),\n@@ -228,7 +224,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let predicates = self.tcx.predicates_of(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -260,7 +256,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // not there yet.\n \n         let all_impls = self.tcx.all_impls(def_id);\n-        let matched_impls = all_impls.into_iter().filter(|impl_def_id| {\n+        let matched_impls = all_impls.filter(|impl_def_id| {\n             use chalk_ir::could_match::CouldMatch;\n             let trait_ref = self.tcx.impl_trait_ref(*impl_def_id).unwrap();\n             let bound_vars = bound_vars_for_item(self.tcx, *impl_def_id);\n@@ -304,7 +300,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 _ => {}\n             }\n         }\n-        return false;\n+        false\n     }\n \n     fn associated_ty_value(\n@@ -379,7 +375,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                                     ty::AdtKind::Enum => {\n                                         let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if constraint.0.len() > 0 {\n+                                        if !constraint.0.is_empty() {\n                                             unimplemented!()\n                                         } else {\n                                             Some(true)\n@@ -412,7 +408,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                                     ty::AdtKind::Enum => {\n                                         let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if constraint.0.len() > 0 {\n+                                        if !constraint.0.is_empty() {\n                                             unimplemented!()\n                                         } else {\n                                             Some(true)"}, {"sha": "14295810d5526b2cdc63cf5a3c4437fc47a2b200", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n         let uint = |i| apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Uint(i)), empty());\n         let float = |f| apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Float(f)), empty());\n \n-        return match self.kind {\n+        match self.kind {\n             Bool => apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Bool), empty()),\n             Char => apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Char), empty()),\n             Int(ty) => match ty {\n@@ -370,7 +370,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             .intern(interner),\n             Infer(_infer) => unimplemented!(),\n             Error => unimplemented!(),\n-        };\n+        }\n     }\n }\n "}, {"sha": "5dbcc5c9ec8b9dcfb5757304bc2e2a444ca94cc0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -447,7 +447,7 @@ impl Options {\n             None => return Err(3),\n         };\n \n-        match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n+        match matches.opt_str(\"r\").as_deref() {\n             Some(\"rust\") | None => {}\n             Some(s) => {\n                 diag.struct_err(&format!(\"unknown input format: {}\", s)).emit();"}, {"sha": "bf59b3f25734da9b520ebaba1fe2f5ac193d1ed3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> DocContext<'tcx> {\n         );\n \n         MAX_DEF_ID.with(|m| {\n-            m.borrow_mut().entry(def_id.krate.clone()).or_insert(start_def_id);\n+            m.borrow_mut().entry(def_id.krate).or_insert(start_def_id);\n         });\n \n         self.all_fake_def_ids.borrow_mut().insert(def_id);"}, {"sha": "00c9e46570a8ff2086c47d2354e787ab13786359", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -796,7 +796,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n                 let line = line?;\n-                if !line.starts_with(\"\\\"\") {\n+                if !line.starts_with('\"') {\n                     continue;\n                 }\n                 if line.starts_with(&format!(\"\\\"{}\\\"\", krate)) {\n@@ -810,8 +810,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 }\n                 krates.push(\n                     line.split('\"')\n-                        .filter(|s| !s.is_empty())\n-                        .next()\n+                        .find(|s| !s.is_empty())\n                         .map(|s| s.to_owned())\n                         .unwrap_or_else(String::new),\n                 );\n@@ -2281,7 +2280,10 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n             );\n             message.push_str(&format!(\": {}\", html.to_string()));\n         }\n-        stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n+        stability.push(format!(\n+            \"<div class='stab deprecated'><span class='emoji'>\ud83d\udc4e</span> {}</div>\",\n+            message,\n+        ));\n     }\n \n     if let Some(stab) = item.stability.as_ref().filter(|stab| stab.level == stability::Unstable) {"}, {"sha": "a00c9a0bcea65d7118eb1366811f2e558e7a1b67", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -255,8 +255,7 @@ fn run_test(\n \n     let rustc_binary = options\n         .test_builder\n-        .as_ref()\n-        .map(|v| &**v)\n+        .as_deref()\n         .unwrap_or_else(|| rustc_interface::util::rustc_path().expect(\"found rustc\"));\n     let mut compiler = Command::new(&rustc_binary);\n     compiler.arg(\"--crate-type\").arg(\"bin\");"}, {"sha": "7261d631a6f31674626da5f4d795e1c042391fb6", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -10,7 +10,7 @@ Core encoding and decoding interfaces.\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![feature(box_syntax)]\n-#![feature(specialization)]\n+#![feature(specialization)] // FIXME: min_specialization does not work\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]"}, {"sha": "738f07250b5bf65f60d1d2f2b85b8a8f6f11af82", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -1272,7 +1272,7 @@ impl Thread {\n     }\n \n     fn cname(&self) -> Option<&CStr> {\n-        self.inner.name.as_ref().map(|s| &**s)\n+        self.inner.name.as_deref()\n     }\n }\n "}, {"sha": "0cec8050c279d9cc4afb7626e11166a569e94771", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -331,7 +331,7 @@ fn get_format(\n     quiet: bool,\n     allow_unstable: bool,\n ) -> OptPartRes<OutputFormat> {\n-    let format = match matches.opt_str(\"format\").as_ref().map(|s| &**s) {\n+    let format = match matches.opt_str(\"format\").as_deref() {\n         None if quiet => OutputFormat::Terse,\n         Some(\"pretty\") | None => OutputFormat::Pretty,\n         Some(\"terse\") => OutputFormat::Terse,\n@@ -355,7 +355,7 @@ fn get_format(\n }\n \n fn get_color_config(matches: &getopts::Matches) -> OptPartRes<ColorConfig> {\n-    let color = match matches.opt_str(\"color\").as_ref().map(|s| &**s) {\n+    let color = match matches.opt_str(\"color\").as_deref() {\n         Some(\"auto\") | None => ColorConfig::AutoColor,\n         Some(\"always\") => ColorConfig::AlwaysColor,\n         Some(\"never\") => ColorConfig::NeverColor,"}, {"sha": "11caa34d4b11426db2138f1419a05181ecfa6df1", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -10,7 +10,7 @@\n // @matches issue_32374/index.html '//*[@class=\"docblock-short\"]/text()' 'Docs'\n \n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecated since 1.0.0: text'\n+//      '\ud83d\udc4e Deprecated since 1.0.0: text'\n // @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n@@ -20,7 +20,7 @@\n pub struct T;\n \n // @has issue_32374/struct.U.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecated since 1.0.0: deprecated'\n+//      '\ud83d\udc4e Deprecated since 1.0.0: deprecated'\n // @has issue_32374/struct.U.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. (test #32374)'\n // @has issue_32374/struct.U.html '//details' \\"}, {"sha": "ed29443332f62fa6810a3473e472e5c70377fc0a", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -13,7 +13,7 @@ LL |         [1, 2] => true,\n    |         ^^^^^^ expected `2usize`, found `N`\n    |\n    = note: expected array `[u32; 2]`\n-              found array `[u32; _]`\n+              found array `[u32; N]`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bd26c08a8e5da2e627c82e022deb3fe4bb555fd9", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -29,7 +29,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::boxed::Box<[T; _]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n+             <std::boxed::Box<[T; N]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n   --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n@@ -53,7 +53,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::rc::Rc<[T; _]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n+             <std::rc::Rc<[T; N]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n   --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n@@ -77,7 +77,7 @@ LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::sync::Arc<[T; _]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n+             <std::sync::Arc<[T; N]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "76ccc48c32ac1e34d4873509724449559a330eee", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -39,9 +39,9 @@ LL |     for _ in &[0_usize; 33] {\n    |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n    |\n    = help: the following implementations were found:\n-             <&'a [T; _] as std::iter::IntoIterator>\n+             <&'a [T; N] as std::iter::IntoIterator>\n              <&'a [T] as std::iter::IntoIterator>\n-             <&'a mut [T; _] as std::iter::IntoIterator>\n+             <&'a mut [T; N] as std::iter::IntoIterator>\n              <&'a mut [T] as std::iter::IntoIterator>\n    = note: required by `std::iter::IntoIterator::into_iter`\n "}, {"sha": "d48524f66dd994e280582c8d8ddb21dfbb01cf34", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -10,10 +10,10 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/broken-mir-2.rs:7:36\n    |\n LL | struct S<T: Debug, const N: usize>([T; N]);\n-   |                                    ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[T; _]`\n+   |                                    ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[T; N]`\n    |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; _]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; _]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; N]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; N]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "35ecc49cfb3ab39543d0127fb3dcdefef8dcc8a5", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -10,10 +10,10 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/derive-debug-array-wrapper.rs:6:5\n    |\n LL |     a: [u32; N],\n-   |     ^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[u32; _]`\n+   |     ^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[u32; N]`\n    |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; _]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; _]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; N]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; N]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "5d45e302888d424895cb88f12ac906c75de013ea", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         ArrayHolder([0; Self::SIZE])\n    |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n    |\n-   = note: expected array `[u32; _]`\n+   = note: expected array `[u32; X]`\n               found array `[u32; _]`\n \n error: constant expression depends on a generic parameter"}, {"sha": "a97c5750f94c34a2fd8eab648e1386b65e493e05", "filename": "src/test/ui/optimization-fuel-0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-0.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -4,8 +4,7 @@\n \n use std::mem::size_of;\n \n-// (#55495: The --error-format is to sidestep an issue in our test harness)\n-// compile-flags: --error-format human -Z fuel=foo=0\n+// compile-flags: -Z fuel=foo=0\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}, {"sha": "f0e2ebfc37a37d949557d9af08c2b25dc4f42c43", "filename": "src/test/ui/optimization-fuel-0.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-0.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -1 +1,4 @@\n-optimization-fuel-exhausted: Reorder fields of \"S1\"\n+warning: optimization-fuel-exhausted: Reorder fields of \"S1\"\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a09f91c68abe7b6309b6650f52b84bc7fe3d1d53", "filename": "src/test/ui/optimization-fuel-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-1.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -4,8 +4,7 @@\n \n use std::mem::size_of;\n \n-// (#55495: The --error-format is to sidestep an issue in our test harness)\n-// compile-flags: --error-format human -Z fuel=foo=1\n+// compile-flags: -Z fuel=foo=1\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}, {"sha": "53eafb05830cbd0586c2dc8dcf4654941cba7d2e", "filename": "src/test/ui/optimization-fuel-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Foptimization-fuel-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-1.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -1 +1,4 @@\n-optimization-fuel-exhausted: Reorder fields of \"S2\"\n+warning: optimization-fuel-exhausted: Reorder fields of \"S2\"\n+\n+warning: 1 warning emitted\n+"}, {"sha": "319789c4ec28296534a6025cc64d9938f2ada5af", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.rs?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #70813 (this used to trigger a debug assertion)\n+\n+trait Trait {}\n+\n+struct S;\n+\n+impl<'a> Trait for &'a mut S {}\n+\n+fn foo<X>(_: X)\n+where\n+    for<'b> &'b X: Trait,\n+{\n+}\n+\n+fn main() {\n+    let s = S;\n+    foo::<S>(s); //~ ERROR the trait bound `for<'b> &'b S: Trait` is not satisfied\n+}"}, {"sha": "83de3c4cfe0a52db7e16cc3ffac280d14050e07d", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09c817eeb29e764cfc12d0a8d94841e3ffe34023/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=09c817eeb29e764cfc12d0a8d94841e3ffe34023", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'b> &'b S: Trait` is not satisfied\n+  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:5\n+   |\n+LL | fn foo<X>(_: X)\n+   |    --- required by a bound in this\n+LL | where\n+LL |     for<'b> &'b X: Trait,\n+   |                    ----- required by this bound in `foo`\n+...\n+LL |     foo::<S>(s);\n+   |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n+   |\n+   = help: the following implementations were found:\n+             <&'a mut S as Trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}