{"sha": "e01824477751561fa0c1c13db13d0fbda341008e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTgyNDQ3Nzc1MTU2MWZhMGMxYzEzZGIxM2QwZmJkYTM0MTAwOGU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-07T23:30:34Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-08T03:04:38Z"}, "message": "make Option's map and map_default use a lifetime", "tree": {"sha": "883dda4c4ac8c5c4e4a8c48c89cfbf90e5306a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883dda4c4ac8c5c4e4a8c48c89cfbf90e5306a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e01824477751561fa0c1c13db13d0fbda341008e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e01824477751561fa0c1c13db13d0fbda341008e", "html_url": "https://github.com/rust-lang/rust/commit/e01824477751561fa0c1c13db13d0fbda341008e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e01824477751561fa0c1c13db13d0fbda341008e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e0df6563830a930188760bbefdc080d9c0902f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e0df6563830a930188760bbefdc080d9c0902f", "html_url": "https://github.com/rust-lang/rust/commit/f6e0df6563830a930188760bbefdc080d9c0902f"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "cfc2cba922602286d71586a385fee8eb47a1085f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e01824477751561fa0c1c13db13d0fbda341008e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01824477751561fa0c1c13db13d0fbda341008e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e01824477751561fa0c1c13db13d0fbda341008e", "patch": "@@ -102,7 +102,7 @@ pub pure fn get_ref<T>(opt: &r/Option<T>) -> &r/T {\n }\n \n #[inline(always)]\n-pub pure fn map<T, U>(opt: &Option<T>, f: fn(x: &T) -> U) -> Option<U> {\n+pub pure fn map<T, U>(opt: &r/Option<T>, f: fn(x: &r/T) -> U) -> Option<U> {\n     //! Maps a `some` value by reference from one type to another\n \n     match *opt { Some(ref x) => Some(f(x)), None => None }\n@@ -193,8 +193,8 @@ pub pure fn get_or_default<T: Copy>(opt: Option<T>, def: T) -> T {\n }\n \n #[inline(always)]\n-pub pure fn map_default<T, U>(opt: &Option<T>, def: U,\n-                              f: fn(x: &T) -> U) -> U {\n+pub pure fn map_default<T, U>(opt: &r/Option<T>, def: U,\n+                              f: fn(&r/T) -> U) -> U {\n     //! Applies a function to the contained value or returns a default\n \n     match *opt { None => move def, Some(ref t) => f(t) }\n@@ -273,7 +273,7 @@ impl<T> Option<T> {\n \n     /// Maps a `some` value from one type to another by reference\n     #[inline(always)]\n-    pure fn map<U>(&self, f: fn(x: &T) -> U) -> Option<U> { map(self, f) }\n+    pure fn map<U>(&self, f: fn(&self/T) -> U) -> Option<U> { map(self, f) }\n \n     /// As `map`, but consumes the option and gives `f` ownership to avoid\n     /// copying.\n@@ -284,7 +284,7 @@ impl<T> Option<T> {\n \n     /// Applies a function to the contained value or returns a default\n     #[inline(always)]\n-    pure fn map_default<U>(&self, def: U, f: fn(x: &T) -> U) -> U {\n+    pure fn map_default<U>(&self, def: U, f: fn(&self/T) -> U) -> U {\n         map_default(self, move def, f)\n     }\n "}, {"sha": "da83c7b789b02a2a0dabd56811887e85de446639", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e01824477751561fa0c1c13db13d0fbda341008e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01824477751561fa0c1c13db13d0fbda341008e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=e01824477751561fa0c1c13db13d0fbda341008e", "patch": "@@ -556,24 +556,18 @@ impl <K: Ord, V> TreeNode<K, V> {\n \n pure fn each<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n                         f: fn(&(&r/K, &r/V)) -> bool) {\n-    match *node {\n-      Some(ref x) => {\n+    do node.map |x| {\n         each(&x.left, f);\n         if f(&(&x.key, &x.value)) { each(&x.right, f) }\n-      }\n-      None => ()\n-    }\n+    };\n }\n \n pure fn each_reverse<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n                                 f: fn(&(&r/K, &r/V)) -> bool) {\n-    match *node {\n-      Some(ref x) => {\n+    do node.map |x| {\n         each_reverse(&x.right, f);\n         if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n-      }\n-      None => ()\n-    }\n+    };\n }\n \n // Remove left horizontal link by rotating right"}]}