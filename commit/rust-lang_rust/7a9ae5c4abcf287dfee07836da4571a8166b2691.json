{"sha": "7a9ae5c4abcf287dfee07836da4571a8166b2691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOWFlNWM0YWJjZjI4N2RmZWUwNzgzNmRhNDU3MWE4MTY2YjI2OTE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-25T13:00:39Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-25T13:00:39Z"}, "message": "Merge pull request #533 from marcusklaas/double-help\n\nPrint configuration options once in help message", "tree": {"sha": "705d7b223379a7ed11635991c7c0bac1ebf96280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705d7b223379a7ed11635991c7c0bac1ebf96280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9ae5c4abcf287dfee07836da4571a8166b2691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ae5c4abcf287dfee07836da4571a8166b2691", "html_url": "https://github.com/rust-lang/rust/commit/7a9ae5c4abcf287dfee07836da4571a8166b2691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ae5c4abcf287dfee07836da4571a8166b2691/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce2b840cf73253cedf86aaf3b6b7a71e27d6b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce2b840cf73253cedf86aaf3b6b7a71e27d6b79", "html_url": "https://github.com/rust-lang/rust/commit/3ce2b840cf73253cedf86aaf3b6b7a71e27d6b79"}, {"sha": "4fa0b0bc57ff017cc1be62e2f98c8584d6319938", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa0b0bc57ff017cc1be62e2f98c8584d6319938", "html_url": "https://github.com/rust-lang/rust/commit/4fa0b0bc57ff017cc1be62e2f98c8584d6319938"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "517bda69a3afd30ac7238cd8c66e473f5c2d9e32", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 53, "deletions": 40, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7a9ae5c4abcf287dfee07836da4571a8166b2691/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9ae5c4abcf287dfee07836da4571a8166b2691/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=7a9ae5c4abcf287dfee07836da4571a8166b2691", "patch": "@@ -22,27 +22,37 @@ use rustfmt::config::Config;\n \n use std::env;\n use std::fs::{self, File};\n-use std::io::{self, Read};\n+use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n \n use getopts::Options;\n \n-// Try to find a project file in the input file directory and its parents.\n+/// Rustfmt operations.\n+enum Operation {\n+    /// Format a file and its child modules.\n+    Format(PathBuf, WriteMode),\n+    /// Print the help message.\n+    Help,\n+    /// Invalid program input, including reason.\n+    InvalidInput(String),\n+}\n+\n+/// Try to find a project file in the input file directory and its parents.\n fn lookup_project_file(input_file: &Path) -> io::Result<PathBuf> {\n     let mut current = if input_file.is_relative() {\n         try!(env::current_dir()).join(input_file)\n     } else {\n         input_file.to_path_buf()\n     };\n \n-    // TODO: We should canonize path to properly handle its parents,\n+    // FIXME: We should canonize path to properly handle its parents,\n     // but `canonicalize` function is unstable now (recently added API)\n     // current = try!(fs::canonicalize(current));\n \n     loop {\n-        // if the current directory has no parent, we're done searching\n+        // If the current directory has no parent, we're done searching.\n         if !current.pop() {\n-            return Err(io::Error::new(io::ErrorKind::NotFound, \"config not found\"));\n+            return Err(io::Error::new(io::ErrorKind::NotFound, \"Config not found\"));\n         }\n         let config_file = current.join(\"rustfmt.toml\");\n         if fs::metadata(&config_file).is_ok() {\n@@ -51,7 +61,7 @@ fn lookup_project_file(input_file: &Path) -> io::Result<PathBuf> {\n     }\n }\n \n-// Try to find a project file. If it's found, read it.\n+/// Try to find a project file. If it's found, read it.\n fn lookup_and_read_project_file(input_file: &Path) -> io::Result<(PathBuf, String)> {\n     let path = try!(lookup_project_file(input_file));\n     let mut file = try!(File::open(&path));\n@@ -61,30 +71,46 @@ fn lookup_and_read_project_file(input_file: &Path) -> io::Result<(PathBuf, Strin\n }\n \n fn execute() -> i32 {\n-    let (file, write_mode) = match determine_params(std::env::args().skip(1)) {\n-        Some(params) => params,\n-        None => return 1,\n-    };\n+    let mut opts = Options::new();\n+    opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optopt(\"\",\n+                \"write-mode\",\n+                \"mode to write in\",\n+                \"[replace|overwrite|display|diff|coverage]\");\n+\n+    let operation = determine_operation(&opts, env::args().skip(1));\n \n-    let config = match lookup_and_read_project_file(&file) {\n-        Ok((path, toml)) => {\n-            println!(\"Project config file: {}\", path.display());\n-            Config::from_toml(&toml)\n+    match operation {\n+        Operation::InvalidInput(reason) => {\n+            print_usage(&opts, &reason);\n+            1\n         }\n-        Err(_) => Default::default(),\n-    };\n+        Operation::Help => {\n+            print_usage(&opts, \"\");\n+            0\n+        }\n+        Operation::Format(file, write_mode) => {\n+            let config = match lookup_and_read_project_file(&file) {\n+                Ok((path, toml)) => {\n+                    println!(\"Using rustfmt config file: {}\", path.display());\n+                    Config::from_toml(&toml)\n+                }\n+                Err(_) => Default::default(),\n+            };\n \n-    run(&file, write_mode, &config);\n-    0\n+            run(&file, write_mode, &config);\n+            0\n+        }\n+    }\n }\n \n fn main() {\n-    use std::io::Write;\n     let _ = env_logger::init();\n-\n     let exit_code = execute();\n-    // Make sure standard output is flushed before we exit\n+\n+    // Make sure standard output is flushed before we exit.\n     std::io::stdout().flush().unwrap();\n+\n     // Exit with given exit code.\n     //\n     // NOTE: This immediately terminates the process without doing any cleanup,\n@@ -100,44 +126,31 @@ fn print_usage(opts: &Options, reason: &str) {\n     Config::print_docs();\n }\n \n-fn determine_params<I>(args: I) -> Option<(PathBuf, WriteMode)>\n+fn determine_operation<I>(opts: &Options, args: I) -> Operation\n     where I: Iterator<Item = String>\n {\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"show this message\");\n-    opts.optopt(\"\",\n-                \"write-mode\",\n-                \"mode to write in\",\n-                \"[replace|overwrite|display|diff|coverage]\");\n     let matches = match opts.parse(args) {\n         Ok(m) => m,\n-        Err(e) => {\n-            print_usage(&opts, &e.to_string());\n-            return None;\n-        }\n+        Err(e) => return Operation::InvalidInput(e.to_string()),\n     };\n \n     if matches.opt_present(\"h\") {\n-        print_usage(&opts, \"\");\n+        return Operation::Help;\n     }\n \n     let write_mode = match matches.opt_str(\"write-mode\") {\n         Some(mode) => {\n             match mode.parse() {\n                 Ok(mode) => mode,\n-                Err(..) => {\n-                    print_usage(&opts, \"Unrecognized write mode\");\n-                    return None;\n-                }\n+                Err(..) => return Operation::InvalidInput(\"Unrecognized write mode\".into()),\n             }\n         }\n         None => WriteMode::Replace,\n     };\n \n     if matches.free.len() != 1 {\n-        print_usage(&opts, \"Please provide one file to format\");\n-        return None;\n+        return Operation::InvalidInput(\"Please provide one file to format\".into());\n     }\n \n-    Some((PathBuf::from(&matches.free[0]), write_mode))\n+    Operation::Format(PathBuf::from(&matches.free[0]), write_mode)\n }"}, {"sha": "068ba136bb5a2b868399e32c73bfc5843ad0fd59", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a9ae5c4abcf287dfee07836da4571a8166b2691/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9ae5c4abcf287dfee07836da4571a8166b2691/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7a9ae5c4abcf287dfee07836da4571a8166b2691", "patch": "@@ -222,7 +222,7 @@ macro_rules! create_config {\n                 for _ in 0..max {\n                     space_str.push(' ');\n                 }\n-                println!(\"\\nConfiguration Options:\");\n+                println!(\"Configuration Options:\");\n                 $(\n                     let name_raw = stringify!($i);\n                     let mut name_out = String::with_capacity(max);"}]}