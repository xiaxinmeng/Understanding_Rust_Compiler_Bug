{"sha": "44f184acc0008646d046a21cd2578bfed6a79867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjE4NGFjYzAwMDg2NDZkMDQ2YTIxY2QyNTc4YmZlZDZhNzk4Njc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-05T21:04:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-05T21:04:02Z"}, "message": "Rollup merge of #69698 - RalfJung:int_assoc, r=davidtwco\n\nUse associated constants of integer types\n\nTake advantage of https://github.com/rust-lang/rust/pull/68952 in the interpreter and some nearby modules :)", "tree": {"sha": "50e97ba51c522cd1891f587b534a4b37678488e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e97ba51c522cd1891f587b534a4b37678488e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f184acc0008646d046a21cd2578bfed6a79867", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYWlDCRBK7hj4Ov3rIwAAdHIIAJ/nTyhWXYsMYaYzzpk/z7lg\n8IdUgqKuo6ZaNZaLq/mLpcNRI8GdjKnyo2YQbe30TGumyz5MFHcHNDfmQLzU8z5l\n9xSDg0NYS63sVwd3h4oyO1mzBaHQw5OAAn+5amdkPGhck8NmnSoGWVL1GfN/scbN\nBzYREWFCXZbnKtbYedJ5x9Srdb+flAvAdSIGyqXeGge0g6MycRjUQJbuwDnQKMuX\nCuP+IMIEWDtBTSQ1hw/hx3EQHAtpbxBUtvjAiAIV2NM/z79UQIGlUKvbLYZ8CaY+\newgcWHHsD+o8VMo35n1YumEOBhxnKYT4EkZF8iq4F0gkiiysmKruUdF4mq+WboM=\n=tRjx\n-----END PGP SIGNATURE-----\n", "payload": "tree 50e97ba51c522cd1891f587b534a4b37678488e7\nparent e01dc83aa806227538140247ff0f74a2beeea99e\nparent f0c3cf2b1b7bc3f6a81f91d7552f54dab667bc26\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583442242 +0100\ncommitter GitHub <noreply@github.com> 1583442242 +0100\n\nRollup merge of #69698 - RalfJung:int_assoc, r=davidtwco\n\nUse associated constants of integer types\n\nTake advantage of https://github.com/rust-lang/rust/pull/68952 in the interpreter and some nearby modules :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f184acc0008646d046a21cd2578bfed6a79867", "html_url": "https://github.com/rust-lang/rust/commit/44f184acc0008646d046a21cd2578bfed6a79867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f184acc0008646d046a21cd2578bfed6a79867/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01dc83aa806227538140247ff0f74a2beeea99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01dc83aa806227538140247ff0f74a2beeea99e", "html_url": "https://github.com/rust-lang/rust/commit/e01dc83aa806227538140247ff0f74a2beeea99e"}, {"sha": "f0c3cf2b1b7bc3f6a81f91d7552f54dab667bc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c3cf2b1b7bc3f6a81f91d7552f54dab667bc26", "html_url": "https://github.com/rust-lang/rust/commit/f0c3cf2b1b7bc3f6a81f91d7552f54dab667bc26"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "d5cde7034116c2053d41746adee0368a499e9fcb", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -524,7 +524,7 @@ impl DepGraph {\n             edge_list_indices.push((start, end));\n         }\n \n-        debug_assert!(edge_list_data.len() <= ::std::u32::MAX as usize);\n+        debug_assert!(edge_list_data.len() <= u32::MAX as usize);\n         debug_assert_eq!(edge_list_data.len(), total_edge_count);\n \n         SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data }"}, {"sha": "c8d35db0adeb2e11dbdb5d28cfb28b4cb8bb0899", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -818,9 +818,9 @@ impl UndefMask {\n             // First set all bits except the first `bita`,\n             // then unset the last `64 - bitb` bits.\n             let range = if bitb == 0 {\n-                u64::max_value() << bita\n+                u64::MAX << bita\n             } else {\n-                (u64::max_value() << bita) & (u64::max_value() >> (64 - bitb))\n+                (u64::MAX << bita) & (u64::MAX >> (64 - bitb))\n             };\n             if new_state {\n                 self.blocks[blocka] |= range;\n@@ -832,21 +832,21 @@ impl UndefMask {\n         // across block boundaries\n         if new_state {\n             // Set `bita..64` to `1`.\n-            self.blocks[blocka] |= u64::max_value() << bita;\n+            self.blocks[blocka] |= u64::MAX << bita;\n             // Set `0..bitb` to `1`.\n             if bitb != 0 {\n-                self.blocks[blockb] |= u64::max_value() >> (64 - bitb);\n+                self.blocks[blockb] |= u64::MAX >> (64 - bitb);\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {\n-                self.blocks[block] = u64::max_value();\n+                self.blocks[block] = u64::MAX;\n             }\n         } else {\n             // Set `bita..64` to `0`.\n-            self.blocks[blocka] &= !(u64::max_value() << bita);\n+            self.blocks[blocka] &= !(u64::MAX << bita);\n             // Set `0..bitb` to `0`.\n             if bitb != 0 {\n-                self.blocks[blockb] &= !(u64::max_value() >> (64 - bitb));\n+                self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {"}, {"sha": "cc3c50b7899f3646f12dfc893e231aab49fdd03a", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -78,9 +78,9 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     fn overflowing_signed_offset(&self, val: u64, i: i128) -> (u64, bool) {\n         // FIXME: is it possible to over/underflow here?\n         if i < 0 {\n-            // Trickery to ensure that `i64::min_value()` works fine: compute `n = -i`.\n+            // Trickery to ensure that `i64::MIN` works fine: compute `n = -i`.\n             // This formula only works for true negative values; it overflows for zero!\n-            let n = u64::max_value() - (i as u64) + 1;\n+            let n = u64::MAX - (i as u64) + 1;\n             let res = val.overflowing_sub(n);\n             self.truncate_to_ptr(res)\n         } else {"}, {"sha": "7a5a417919d509f9a2def41e762452db1c6f1a8d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -7,7 +7,6 @@ use rustc_span::DUMMY_SP;\n \n use std::cmp;\n use std::fmt;\n-use std::i128;\n use std::iter;\n use std::mem;\n use std::ops::Bound;\n@@ -1001,7 +1000,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n \n-                let (mut min, mut max) = (i128::max_value(), i128::min_value());\n+                let (mut min, mut max) = (i128::MAX, i128::MIN);\n                 let discr_type = def.repr.discr_type();\n                 let bits = Integer::from_attr(self, discr_type).size().bits();\n                 for (i, discr) in def.discriminants(tcx) {\n@@ -1021,7 +1020,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n                 // We might have no inhabited variants, so pretend there's at least one.\n-                if (min, max) == (i128::max_value(), i128::min_value()) {\n+                if (min, max) == (i128::MAX, i128::MIN) {\n                     min = 0;\n                     max = 0;\n                 }"}, {"sha": "4829955cb70c411ff4d3d183e48a2489ab92ec33", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -920,7 +920,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Uint(ui)) => {\n                 let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n-                let max = truncate(u128::max_value(), bit_size);\n+                let max = truncate(u128::MAX, bit_size);\n \n                 let ui_str = ui.name_str();\n                 if data == max {"}, {"sha": "5e36e4df698edf00228b9edef27c67c995ec5b5a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -92,7 +92,7 @@ struct AbsoluteBytePos(u32);\n \n impl AbsoluteBytePos {\n     fn new(pos: usize) -> AbsoluteBytePos {\n-        debug_assert!(pos <= ::std::u32::MAX as usize);\n+        debug_assert!(pos <= u32::MAX as usize);\n         AbsoluteBytePos(pos as u32)\n     }\n "}, {"sha": "62d2b4ae2039768479b2e57ee793002121ecc77a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -50,11 +50,11 @@ fn signed_min(size: Size) -> i128 {\n }\n \n fn signed_max(size: Size) -> i128 {\n-    i128::max_value() >> (128 - size.bits())\n+    i128::MAX >> (128 - size.bits())\n }\n \n fn unsigned_max(size: Size) -> u128 {\n-    u128::max_value() >> (128 - size.bits())\n+    u128::MAX >> (128 - size.bits())\n }\n \n fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {\n@@ -77,7 +77,7 @@ impl<'tcx> Discr<'tcx> {\n             let min = signed_min(size);\n             let max = signed_max(size);\n             let val = sign_extend(self.val, size) as i128;\n-            assert!(n < (i128::max_value() as u128));\n+            assert!(n < (i128::MAX as u128));\n             let n = n as i128;\n             let oflo = val > max - n;\n             let val = if oflo { min + (n - (max - val) - 1) } else { val + n };"}, {"sha": "b4e33b9502e690d1964a7e68cd34e829cdeb68e4", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -16,7 +16,6 @@ use std::borrow::Borrow;\n use std::fmt;\n use std::io;\n use std::path::PathBuf;\n-use std::usize;\n \n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;"}, {"sha": "891afbf437f2be000de5f7d6908a46de93af395f", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -203,7 +203,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if is_add {\n                             // max unsigned\n                             Scalar::from_uint(\n-                                u128::max_value() >> (128 - num_bits),\n+                                u128::MAX >> (128 - num_bits),\n                                 Size::from_bits(num_bits),\n                             )\n                         } else {\n@@ -381,11 +381,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         // Performs an exact division, resulting in undefined behavior where\n-        // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`.\n+        // `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`.\n         // First, check x % y != 0 (or if that computation overflows).\n         let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, a, b)?;\n         if overflow || res.assert_bits(a.layout.size) != 0 {\n-            // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n+            // Then, check if `b` is -1, which is the \"MIN / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n             let b_scalar = b.to_scalar().unwrap();\n             if b_scalar == minus1 {"}, {"sha": "4f99bfe8a852af7ca2806c6853381fd8a609d828", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f184acc0008646d046a21cd2578bfed6a79867/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=44f184acc0008646d046a21cd2578bfed6a79867", "patch": "@@ -463,7 +463,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let (lo, hi) = valid_range.clone().into_inner();\n         // Determine the allowed range\n         // `max_hi` is as big as the size fits\n-        let max_hi = u128::max_value() >> (128 - op.layout.size.bits());\n+        let max_hi = u128::MAX >> (128 - op.layout.size.bits());\n         assert!(hi <= max_hi);\n         // We could also write `(hi + 1) % (max_hi + 1) == lo` but `max_hi + 1` overflows for `u128`\n         if (lo == 0 && hi == max_hi) || (hi + 1 == lo) {"}]}