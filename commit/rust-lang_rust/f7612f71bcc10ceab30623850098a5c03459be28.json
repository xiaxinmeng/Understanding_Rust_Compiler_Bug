{"sha": "f7612f71bcc10ceab30623850098a5c03459be28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NjEyZjcxYmNjMTBjZWFiMzA2MjM4NTAwOThhNWMwMzQ1OWJlMjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-12T12:02:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:33:47Z"}, "message": "more consistent error capitalization", "tree": {"sha": "9039c54353686e3e4f59a199c2193cb7e0f7247f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9039c54353686e3e4f59a199c2193cb7e0f7247f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7612f71bcc10ceab30623850098a5c03459be28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7612f71bcc10ceab30623850098a5c03459be28", "html_url": "https://github.com/rust-lang/rust/commit/f7612f71bcc10ceab30623850098a5c03459be28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7612f71bcc10ceab30623850098a5c03459be28/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "192b535adc32d96795ad4e39cc199ab68a28a60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/192b535adc32d96795ad4e39cc199ab68a28a60b", "html_url": "https://github.com/rust-lang/rust/commit/192b535adc32d96795ad4e39cc199ab68a28a60b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "ab0c70fc86d1a8b21d3bd5724a6486e6779fce72", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7612f71bcc10ceab30623850098a5c03459be28/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7612f71bcc10ceab30623850098a5c03459be28/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=f7612f71bcc10ceab30623850098a5c03459be28", "patch": "@@ -58,10 +58,10 @@ impl CrateRunInfo {\n \n     fn store(&self, filename: &Path) {\n         let file = File::create(filename)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot create `{}`\", filename.display())));\n+            .unwrap_or_else(|_| show_error(format!(\"cannot create `{}`\", filename.display())));\n         let file = BufWriter::new(file);\n         serde_json::ser::to_writer(file, self)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot write to `{}`\", filename.display())));\n+            .unwrap_or_else(|_| show_error(format!(\"cannot write to `{}`\", filename.display())));\n     }\n }\n \n@@ -207,15 +207,15 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n         match buf.trim().to_lowercase().as_ref() {\n             // Proceed.\n             \"\" | \"y\" | \"yes\" => {}\n-            \"n\" | \"no\" => show_error(format!(\"Aborting as per your request\")),\n-            a => show_error(format!(\"I do not understand `{}`\", a)),\n+            \"n\" | \"no\" => show_error(format!(\"aborting as per your request\")),\n+            a => show_error(format!(\"invalid answer `{}`\", a)),\n         };\n     } else {\n         println!(\"Running `{:?}` to {}.\", cmd, text);\n     }\n \n     if cmd.status().expect(&format!(\"failed to execute {:?}\", cmd)).success().not() {\n-        show_error(format!(\"Failed to {}\", text));\n+        show_error(format!(\"failed to {}\", text));\n     }\n }\n \n@@ -238,7 +238,7 @@ fn setup(subcommand: MiriCommand) {\n     if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n         if std::env::var_os(\"XARGO_CHECK\").is_some() {\n             // The user manually gave us a xargo binary; don't do anything automatically.\n-            show_error(format!(\"Your xargo is too old; please upgrade to the latest version\"))\n+            show_error(format!(\"xargo is too old; please upgrade to the latest version\"))\n         }\n         let mut cmd = cargo();\n         cmd.args(&[\"install\", \"xargo\", \"-f\"]);\n@@ -278,7 +278,7 @@ fn setup(subcommand: MiriCommand) {\n         }\n     };\n     if !rust_src.exists() {\n-        show_error(format!(\"Given Rust source directory `{}` does not exist.\", rust_src.display()));\n+        show_error(format!(\"given Rust source directory `{}` does not exist.\", rust_src.display()));\n     }\n \n     // Next, we need our own libstd. Prepare a xargo project for that purpose.\n@@ -352,7 +352,7 @@ path = \"lib.rs\"\n     command.env_remove(\"RUSTFLAGS\");\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n-        show_error(format!(\"Failed to run xargo\"));\n+        show_error(format!(\"failed to run xargo\"));\n     }\n \n     // That should be it! But we need to figure out where xargo built stuff.\n@@ -578,7 +578,7 @@ fn phase_cargo_rustc(args: env::Args) {\n \n         // Use our custom sysroot.\n         let sysroot =\n-            env::var_os(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n+            env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n         cmd.arg(\"--sysroot\");\n         cmd.arg(sysroot);\n     } else {\n@@ -600,20 +600,20 @@ fn phase_cargo_rustc(args: env::Args) {\n     if emit_link_hack {\n         // Some platforms prepend \"lib\", some do not... let's just create both files.\n         let filename = out_filename(\"lib\", \".rlib\");\n-        File::create(filename).expect(\"Failed to create rlib file\");\n+        File::create(filename).expect(\"failed to create rlib file\");\n         let filename = out_filename(\"\", \".rlib\");\n-        File::create(filename).expect(\"Failed to create rlib file\");\n+        File::create(filename).expect(\"failed to create rlib file\");\n     }\n }\n \n fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n     let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n \n     let file = File::open(&binary)\n-        .unwrap_or_else(|_| show_error(format!(\"File {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n+        .unwrap_or_else(|_| show_error(format!(\"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n     let file = BufReader::new(file);\n     let info: CrateRunInfo = serde_json::from_reader(file)\n-        .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n+        .unwrap_or_else(|_| show_error(format!(\"file {:?} contains outdated or invalid JSON; try `cargo clean`\", binary)));\n \n     // Set missing env vars. Looks like `build.rs` vars are still set at run-time, but\n     // `CARGO_BIN_EXE_*` are not. This means we can give the run-time environment precedence,\n@@ -657,7 +657,7 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n     }\n     // Set sysroot.\n     let sysroot =\n-        env::var_os(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n+        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n     cmd.arg(\"--sysroot\");\n     cmd.arg(sysroot);\n     // Respect `MIRIFLAGS`."}]}