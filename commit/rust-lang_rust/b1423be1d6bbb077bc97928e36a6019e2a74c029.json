{"sha": "b1423be1d6bbb077bc97928e36a6019e2a74c029", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDIzYmUxZDZiYmIwNzdiYzk3OTI4ZTM2YTYwMTllMmE3NGMwMjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-04T19:53:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-04T20:00:06Z"}, "message": "Move the ids of pat AST nodes into their struct\n\nJust like it was done with items and exprs. Simplifies some code.", "tree": {"sha": "583e28263b86af2ec9486ccc3f119761aa68e4b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583e28263b86af2ec9486ccc3f119761aa68e4b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1423be1d6bbb077bc97928e36a6019e2a74c029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1423be1d6bbb077bc97928e36a6019e2a74c029", "html_url": "https://github.com/rust-lang/rust/commit/b1423be1d6bbb077bc97928e36a6019e2a74c029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1423be1d6bbb077bc97928e36a6019e2a74c029/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b669430f72200ded251035c3321cfe31e0dd648a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b669430f72200ded251035c3321cfe31e0dd648a", "html_url": "https://github.com/rust-lang/rust/commit/b669430f72200ded251035c3321cfe31e0dd648a"}], "stats": {"total": 147, "additions": 68, "deletions": 79}, "files": [{"sha": "600a76c0738bf37619a36caf50088fcc5a3601c9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -110,13 +110,15 @@ type block = spanned[block_];\n \n type block_ = rec(vec[@stmt] stmts, option::t[@expr] expr, node_id id);\n \n-type pat = spanned[pat_];\n+type pat = rec(node_id id,\n+               pat_ node,\n+               span span);\n \n tag pat_ {\n-    pat_wild(node_id);\n-    pat_bind(ident, node_id);\n-    pat_lit(@lit, node_id);\n-    pat_tag(path, vec[@pat], node_id);\n+    pat_wild;\n+    pat_bind(ident);\n+    pat_lit(@lit);\n+    pat_tag(path, vec[@pat]);\n }\n \n tag mutability { mut; imm; maybe_mut; }"}, {"sha": "0fc884d67c3626404a5c3f34fb24881cdcf20a10", "filename": "src/comp/front/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ffold.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -252,12 +252,12 @@ fn noop_fold_arm(&arm a, ast_fold fld) -> arm {\n \n fn noop_fold_pat(&pat_ p, ast_fold fld) -> pat_ {\n     ret alt (p) {\n-        case (pat_wild(_)) { p }\n-        case (pat_bind(?id, ?d)) { pat_bind(fld.fold_ident(id), d)}\n-        case (pat_lit(_, _)) { p }\n-        case (pat_tag(?pth, ?pats, ?nid)) {\n-            pat_tag(fld.fold_path(pth), map(fld.fold_pat, pats), nid)\n-                }\n+        case (pat_wild) { p }\n+        case (pat_bind(?ident)) { pat_bind(fld.fold_ident(ident))}\n+        case (pat_lit(_)) { p }\n+        case (pat_tag(?pth, ?pats)) {\n+            pat_tag(fld.fold_path(pth), map(fld.fold_pat, pats))\n+        }\n     };\n }\n \n@@ -616,7 +616,7 @@ fn make_fold(&ast_fold_precursor afp) -> ast_fold {\n         ret afp.fold_arm(x, f);\n     }\n     fn f_pat(&ast_fold_precursor afp, ast_fold f, &@pat x) -> @pat {\n-        ret @rec(node=afp.fold_pat(x.node, f), span=x.span);\n+        ret @rec(id=x.id, node=afp.fold_pat(x.node, f), span=x.span);\n     }\n     fn f_decl(&ast_fold_precursor afp, ast_fold f, &@decl x) -> @decl {\n         ret @rec(node=afp.fold_decl(x.node, f), span=x.span);"}, {"sha": "ce68be6b24645f65bf0611dde3cc20dd50945062", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -1396,16 +1396,15 @@ fn parse_pat(&parser p) -> @ast::pat {\n     alt (p.peek()) {\n         case (token::UNDERSCORE) {\n             p.bump();\n-            pat = ast::pat_wild(p.get_id());\n+            pat = ast::pat_wild;\n         }\n         case (token::QUES) {\n             p.bump();\n             alt (p.peek()) {\n                 case (token::IDENT(?id, _)) {\n                     hi = p.get_hi_pos();\n                     p.bump();\n-                    pat =\n-                        ast::pat_bind(p.get_str(id), p.get_id());\n+                    pat = ast::pat_bind(p.get_str(id));\n                 }\n                 case (?tok) {\n                     p.fatal(\"expected identifier after '?' in pattern but \" +\n@@ -1418,7 +1417,7 @@ fn parse_pat(&parser p) -> @ast::pat {\n             if (!is_ident(tok) || is_word(p, \"true\") || is_word(p, \"false\")) {\n                 auto lit = parse_lit(p);\n                 hi = lit.span.hi;\n-                pat = ast::pat_lit(@lit, p.get_id());\n+                pat = ast::pat_lit(@lit);\n             } else {\n                 auto tag_path = parse_path_and_ty_param_substs(p);\n                 hi = tag_path.span.hi;\n@@ -1434,11 +1433,11 @@ fn parse_pat(&parser p) -> @ast::pat {\n                     }\n                     case (_) { args = []; }\n                 }\n-                pat = ast::pat_tag(tag_path, args, p.get_id());\n+                pat = ast::pat_tag(tag_path, args);\n             }\n         }\n     }\n-    ret @spanned(lo, hi, pat);\n+    ret @rec(id=p.get_id(), node=pat, span=rec(lo=lo, hi=hi));\n }\n \n fn parse_local_full(&option::t[@ast::ty] tyopt, &parser p)"}, {"sha": "f911aac6733226430527f6c73ac72fd29e2975bf", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -291,8 +291,8 @@ fn arm_defnums(&ast::arm arm) -> vec[node_id] {\n     auto dnums = [];\n     fn walk_pat(&mutable vec[node_id] found, &@ast::pat p) {\n         alt (p.node) {\n-            case (ast::pat_bind(_, ?id)) { vec::push(found, id); }\n-            case (ast::pat_tag(_, ?children, _)) {\n+            case (ast::pat_bind(_)) { vec::push(found, p.id); }\n+            case (ast::pat_tag(_, ?children)) {\n                 for (@ast::pat child in children) { walk_pat(found, child); }\n             }\n             case (_) { }"}, {"sha": "0fdf92192461d0b08567207947bc75812ce27e13", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -301,14 +301,14 @@ fn resolve_names(&@env e, &@ast::crate c) {\n     }\n     fn walk_pat(&env e, &scopes sc, &@ast::pat pat) {\n         alt (pat.node) {\n-            case (ast::pat_tag(?p, ?children, ?id)) {\n+            case (ast::pat_tag(?p, ?children)) {\n                 auto fnd =\n                     lookup_path_strict(e, sc, p.span, p.node.idents,\n                                        ns_value);\n                 if (option::is_some(fnd)) {\n                     alt (option::get(fnd)) {\n                         case (ast::def_variant(?did, ?vid)) {\n-                            e.def_map.insert(id, option::get(fnd));\n+                            e.def_map.insert(pat.id, option::get(fnd));\n                             for (@ast::pat child in children) {\n                                 walk_pat(e, sc, child);\n                             }\n@@ -694,14 +694,14 @@ fn lookup_in_ty_params(&ident name, &vec[ast::ty_param] ty_params) ->\n \n fn lookup_in_pat(&ident name, &ast::pat pat) -> option::t[def] {\n     alt (pat.node) {\n-        case (ast::pat_bind(?p_name, ?id)) {\n+        case (ast::pat_bind(?p_name)) {\n             if (str::eq(p_name, name)) {\n-                ret some(ast::def_binding(local_def(id)));\n+                ret some(ast::def_binding(local_def(pat.id)));\n             }\n         }\n-        case (ast::pat_wild(_)) { }\n-        case (ast::pat_lit(_, _)) { }\n-        case (ast::pat_tag(_, ?pats, _)) {\n+        case (ast::pat_wild) { }\n+        case (ast::pat_lit(_)) { }\n+        case (ast::pat_tag(_, ?pats)) {\n             for (@ast::pat p in pats) {\n                 auto found = lookup_in_pat(name, *p);\n                 if (!option::is_none(found)) { ret found; }\n@@ -1248,8 +1248,8 @@ fn check_arm(@env e, &ast::arm a, &() x, &vt[()] v) {\n     visit::visit_arm(a, x, v);\n     fn walk_pat(checker ch, &@ast::pat p) {\n         alt (p.node) {\n-            case (ast::pat_bind(?name, _)) { add_name(ch, p.span, name); }\n-            case (ast::pat_tag(_, ?children, _)) {\n+            case (ast::pat_bind(?name)) { add_name(ch, p.span, name); }\n+            case (ast::pat_tag(_, ?children)) {\n                 for (@ast::pat child in children) { walk_pat(ch, child); }\n             }\n             case (_) { }"}, {"sha": "d05f65d5fd7d4082897e3f55e65cf9264da661bb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -4629,19 +4629,19 @@ fn trans_do_while(&@block_ctxt cx, &ast::block body, &@ast::expr cond) ->\n fn trans_pat_match(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n                    &@block_ctxt next_cx) -> result {\n     alt (pat.node) {\n-        case (ast::pat_wild(_)) { ret rslt(cx, llval); }\n-        case (ast::pat_bind(_, _)) { ret rslt(cx, llval); }\n-        case (ast::pat_lit(?lt, ?id)) {\n-            auto lllit = trans_lit(cx.fcx.lcx.ccx, *lt, id);\n-            auto lltype = ty::node_id_to_type(cx.fcx.lcx.ccx.tcx, id);\n+        case (ast::pat_wild) { ret rslt(cx, llval); }\n+        case (ast::pat_bind(_)) { ret rslt(cx, llval); }\n+        case (ast::pat_lit(?lt)) {\n+            auto lllit = trans_lit(cx.fcx.lcx.ccx, *lt, pat.id);\n+            auto lltype = ty::node_id_to_type(cx.fcx.lcx.ccx.tcx, pat.id);\n             auto lleq = trans_compare(cx, ast::eq, lltype, llval, lllit);\n             auto matched_cx = new_sub_block_ctxt(lleq.bcx, \"matched_cx\");\n             lleq.bcx.build.CondBr(lleq.val, matched_cx.llbb, next_cx.llbb);\n             ret rslt(matched_cx, llval);\n         }\n-        case (ast::pat_tag(?ident, ?subpats, ?id)) {\n+        case (ast::pat_tag(?ident, ?subpats)) {\n             auto vdef =\n-                ast::variant_def_ids(cx.fcx.lcx.ccx.tcx.def_map.get(id));\n+                ast::variant_def_ids(cx.fcx.lcx.ccx.tcx.def_map.get(pat.id));\n             auto variants = ty::tag_variants(cx.fcx.lcx.ccx.tcx, vdef._0);\n             auto matched_cx = new_sub_block_ctxt(cx, \"matched_cx\");\n             auto llblobptr = llval;\n@@ -4675,7 +4675,7 @@ fn trans_pat_match(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n                 }\n             }\n             auto ty_params = ty::node_id_to_type_params\n-                (cx.fcx.lcx.ccx.tcx, id);\n+                (cx.fcx.lcx.ccx.tcx, pat.id);\n             if (vec::len(subpats) > 0u) {\n                 auto i = 0;\n                 for (@ast::pat subpat in subpats) {\n@@ -4702,37 +4702,37 @@ fn trans_pat_match(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n fn trans_pat_binding(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n                      bool bind_alias) -> result {\n     alt (pat.node) {\n-        case (ast::pat_wild(_)) { ret rslt(cx, llval); }\n-        case (ast::pat_lit(_, _)) { ret rslt(cx, llval); }\n-        case (ast::pat_bind(?name, ?id)) {\n+        case (ast::pat_wild) { ret rslt(cx, llval); }\n+        case (ast::pat_lit(_)) { ret rslt(cx, llval); }\n+        case (ast::pat_bind(?name)) {\n             if (bind_alias) {\n-                cx.fcx.lllocals.insert(id, llval);\n+                cx.fcx.lllocals.insert(pat.id, llval);\n                 ret rslt(cx, llval);\n             } else {\n-                auto t = node_id_type(cx.fcx.lcx.ccx, id);\n+                auto t = node_id_type(cx.fcx.lcx.ccx, pat.id);\n                 auto rslt = alloc_ty(cx, t);\n                 auto dst = rslt.val;\n                 auto bcx = rslt.bcx;\n                 maybe_name_value(cx.fcx.lcx.ccx, dst, name);\n-                bcx.fcx.lllocals.insert(id, dst);\n+                bcx.fcx.lllocals.insert(pat.id, dst);\n                 bcx.cleanups += [clean(bind drop_slot(_, dst, t))];\n                 ret copy_val(bcx, INIT, dst, llval, t);\n             }\n         }\n-        case (ast::pat_tag(_, ?subpats, ?id)) {\n+        case (ast::pat_tag(_, ?subpats)) {\n             if (vec::len[@ast::pat](subpats) == 0u) { ret rslt(cx, llval); }\n             // Get the appropriate variant for this tag.\n \n             auto vdef =\n-                ast::variant_def_ids(cx.fcx.lcx.ccx.tcx.def_map.get(id));\n+                ast::variant_def_ids(cx.fcx.lcx.ccx.tcx.def_map.get(pat.id));\n             auto llblobptr = llval;\n             if (vec::len(ty::tag_variants(cx.fcx.lcx.ccx.tcx, vdef._0))!=1u) {\n                 auto lltagptr = cx.build.PointerCast\n                     (llval, T_opaque_tag_ptr(cx.fcx.lcx.ccx.tn));\n                 llblobptr = cx.build.GEP(lltagptr, [C_int(0), C_int(1)]);\n             }\n             auto ty_param_substs =\n-                ty::node_id_to_type_params(cx.fcx.lcx.ccx.tcx, id);\n+                ty::node_id_to_type_params(cx.fcx.lcx.ccx.tcx, pat.id);\n             auto this_cx = cx;\n             auto i = 0;\n             for (@ast::pat subpat in subpats) {"}, {"sha": "254fd130681bef9412824ee15c024363d3bac864", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -99,7 +99,6 @@ export mo_val;\n export mo_alias;\n export mt;\n export node_type_table;\n-export pat_node_id;\n export pat_ty;\n export cname;\n export rename;\n@@ -1850,7 +1849,7 @@ fn block_ty(&ctxt cx, &ast::block b) -> t {\n // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n // doesn't provide type parameter substitutions.\n fn pat_ty(&ctxt cx, &@ast::pat pat) -> t {\n-    ret node_id_to_monotype(cx, pat_node_id(pat));\n+    ret node_id_to_monotype(cx, pat.id);\n }\n \n \n@@ -1888,16 +1887,6 @@ fn stmt_node_id(&@ast::stmt s) -> ast::node_id {\n     }\n }\n \n-fn pat_node_id(&@ast::pat p) -> ast::node_id {\n-    alt (p.node) {\n-        case (ast::pat_wild(?id)) { ret id; }\n-        case (ast::pat_bind(_, ?id)) { ret id; }\n-        case (ast::pat_lit(_, ?id)) { ret id; }\n-        case (ast::pat_tag(_, _, ?id)) { ret id; }\n-    }\n-}\n-\n-\n // Expression utilities\n fn field_num(&session::session sess, &span sp, &ast::ident id) -> uint {\n     let uint accum = 0u;"}, {"sha": "785393e13c907ba2347d6b41a257f799e41e980c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -1056,7 +1056,7 @@ mod writeback {\n         resolve_type_vars_for_node(fcx, b.span, b.node.id);\n     }\n     fn visit_pat_pre(@fn_ctxt fcx, &@ast::pat p) {\n-        resolve_type_vars_for_node(fcx, p.span, ty::pat_node_id(p));\n+        resolve_type_vars_for_node(fcx, p.span, p.id);\n     }\n     fn visit_local_pre(@fn_ctxt fcx, &@ast::local l) {\n         auto var_id = lookup_local(fcx, l.span, l.node.id);\n@@ -1196,9 +1196,9 @@ fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n                      hashmap[ast::node_id, ast::ident] local_names,\n                      @mutable int nvi, &@ast::pat p) {\n         alt (p.node) {\n-            case (ast::pat_bind(?ident, ?id)) {\n+            case (ast::pat_bind(?ident)) {\n                 assign(ccx.tcx, vb, locals, local_names, nvi,\n-                       id, ident, none[ty::t]);\n+                       p.id, ident, none[ty::t]);\n             }\n             case (_) {/* no-op */ }\n         }\n@@ -1249,24 +1249,23 @@ fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {\n // their types immediately.\n fn check_pat(&@fn_ctxt fcx, &@ast::pat pat, ty::t expected) {\n     alt (pat.node) {\n-        case (ast::pat_wild(?id)) {\n-            write::ty_only_fixup(fcx, id, expected);\n+        case (ast::pat_wild) {\n+            write::ty_only_fixup(fcx, pat.id, expected);\n         }\n-        case (ast::pat_lit(?lt, ?id)) {\n+        case (ast::pat_lit(?lt)) {\n             auto typ = check_lit(fcx.ccx, lt);\n             typ = demand::simple(fcx, pat.span, expected, typ);\n-            write::ty_only_fixup(fcx, id, typ);\n+            write::ty_only_fixup(fcx, pat.id, typ);\n         }\n-        case (ast::pat_bind(?name, ?id)) {\n-            auto vid = lookup_local(fcx, pat.span, id);\n+        case (ast::pat_bind(?name)) {\n+            auto vid = lookup_local(fcx, pat.span, pat.id);\n             auto typ = ty::mk_var(fcx.ccx.tcx, vid);\n             typ = demand::simple(fcx, pat.span, expected, typ);\n-            write::ty_only_fixup(fcx, id, typ);\n+            write::ty_only_fixup(fcx, pat.id, typ);\n         }\n-        case (ast::pat_tag(?path, ?subpats, ?id)) {\n+        case (ast::pat_tag(?path, ?subpats)) {\n             // Typecheck the path.\n-\n-            auto v_def = lookup_def(fcx, path.span, id);\n+            auto v_def = lookup_def(fcx, path.span, pat.id);\n             auto v_def_ids = ast::variant_def_ids(v_def);\n             auto tag_tpt = ty::lookup_item_type(fcx.ccx.tcx, v_def_ids._0);\n             auto path_tpot = instantiate_path(fcx, path, tag_tpt, pat.span);\n@@ -1341,7 +1340,7 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat, ty::t expected) {\n                                                    \"\"\n                                                } else { \"s\" }));\n             }\n-            write::ty_fixup(fcx, id, path_tpot);\n+            write::ty_fixup(fcx, pat.id, path_tpot);\n         }\n     }\n }"}, {"sha": "c87373c4ff8699ac66690e81a00b5a696d579760", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -190,7 +190,7 @@ fn visit_constr[E](&@constr c, &E e, &vt[E] v) {\n \n fn visit_pat[E](&@pat p, &E e, &vt[E] v) {\n     alt (p.node) {\n-        case (pat_tag(?path, ?children, _)) {\n+        case (pat_tag(?path, ?children)) {\n             for (@ty tp in path.node.types) { vt(v).visit_ty(tp, e, v); }\n             for (@pat child in children) { vt(v).visit_pat(child, e, v); }\n         }"}, {"sha": "598c6d68f787dee544e0ac5812485051f52352b5", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -185,7 +185,7 @@ fn walk_ty(&ast_visitor v, @ast::ty t) {\n fn walk_pat(&ast_visitor v, &@ast::pat p) {\n     v.visit_pat_pre(p);\n     alt (p.node) {\n-        case (ast::pat_tag(?path, ?children, _)) {\n+        case (ast::pat_tag(?path, ?children)) {\n             for (@ast::ty tp in path.node.types) { walk_ty(v, tp); }\n             for (@ast::pat child in children) { walk_pat(v, child); }\n         }"}, {"sha": "04f7522a7d8c8e19163883272b848c3192de8e53", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1423be1d6bbb077bc97928e36a6019e2a74c029/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=b1423be1d6bbb077bc97928e36a6019e2a74c029", "patch": "@@ -1016,10 +1016,10 @@ fn print_path(&ps s, &ast::path path) {\n fn print_pat(&ps s, &@ast::pat pat) {\n     maybe_print_comment(s, pat.span.lo);\n     alt (pat.node) {\n-        case (ast::pat_wild(_)) { word(s.s, \"_\"); }\n-        case (ast::pat_bind(?id, _)) { word(s.s, \"?\" + id); }\n-        case (ast::pat_lit(?lit, _)) { print_literal(s, lit); }\n-        case (ast::pat_tag(?path, ?args, _)) {\n+        case (ast::pat_wild) { word(s.s, \"_\"); }\n+        case (ast::pat_bind(?id)) { word(s.s, \"?\" + id); }\n+        case (ast::pat_lit(?lit)) { print_literal(s, lit); }\n+        case (ast::pat_tag(?path, ?args)) {\n             print_path(s, path);\n             if (vec::len(args) > 0u) {\n                 popen(s);\n@@ -1033,7 +1033,7 @@ fn print_pat(&ps s, &@ast::pat pat) {\n     alt (s.mode) {\n         case (mo_identified) {\n             space(s.s);\n-            synth_comment(s, int::to_str(ty::pat_node_id(pat), 10u));\n+            synth_comment(s, int::to_str(pat.id, 10u));\n         }\n         case (_) {/* no-op */ }\n     }"}]}