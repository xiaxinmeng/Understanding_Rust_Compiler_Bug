{"sha": "e417992674baf9635f816e520ee8c0d11150bfdb", "node_id": "C_kwDOAAsO6NoAKGU0MTc5OTI2NzRiYWY5NjM1ZjgxNmU1MjBlZThjMGQxMTE1MGJmZGI", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-06-30T13:36:05Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-06-30T13:36:05Z"}, "message": "Add static assertions for some unreachble paths", "tree": {"sha": "2e27e8344edd7b460788bc53a268340ad7c5a30f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e27e8344edd7b460788bc53a268340ad7c5a30f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e417992674baf9635f816e520ee8c0d11150bfdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e417992674baf9635f816e520ee8c0d11150bfdb", "html_url": "https://github.com/rust-lang/rust/commit/e417992674baf9635f816e520ee8c0d11150bfdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e417992674baf9635f816e520ee8c0d11150bfdb/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461c0cc07af36fc95bafa6d5a8a9d86735fc64ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/461c0cc07af36fc95bafa6d5a8a9d86735fc64ff", "html_url": "https://github.com/rust-lang/rust/commit/461c0cc07af36fc95bafa6d5a8a9d86735fc64ff"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "f92d79949d61e5a1fa50c430b59ee04b8789bec1", "filename": "crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e417992674baf9635f816e520ee8c0d11150bfdb/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e417992674baf9635f816e520ee8c0d11150bfdb/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=e417992674baf9635f816e520ee8c0d11150bfdb", "patch": "@@ -278,12 +278,12 @@ pub(super) struct Slice {\n \n impl Slice {\n     fn arity(self) -> usize {\n-        unimplemented!()\n+        match self._unimplemented {}\n     }\n \n     /// See `Constructor::is_covered_by`\n     fn is_covered_by(self, _other: Self) -> bool {\n-        unimplemented!() // never called as Slice contains Void\n+        match self._unimplemented {}\n     }\n }\n \n@@ -442,7 +442,7 @@ impl Constructor {\n                 split_range.split(int_ranges.cloned());\n                 split_range.iter().map(IntRange).collect()\n             }\n-            Slice(_) => unimplemented!(),\n+            Slice(slice) => match slice._unimplemented {},\n             // Any other constructor can be used unchanged.\n             _ => smallvec![self.clone()],\n         }\n@@ -465,12 +465,8 @@ impl Constructor {\n             (Variant(self_id), Variant(other_id)) => self_id == other_id,\n \n             (IntRange(self_range), IntRange(other_range)) => self_range.is_covered_by(other_range),\n-            (FloatRange(..), FloatRange(..)) => {\n-                unimplemented!()\n-            }\n-            (Str(..), Str(..)) => {\n-                unimplemented!()\n-            }\n+            (FloatRange(void), FloatRange(..)) => match *void {},\n+            (Str(void), Str(..)) => match *void {},\n             (Slice(self_slice), Slice(other_slice)) => self_slice.is_covered_by(*other_slice),\n \n             // We are trying to inspect an opaque constant. Thus we skip the row.\n@@ -817,9 +813,7 @@ impl<'p> Fields<'p> {\n                     Fields::wildcards_from_tys(cx, once(ty.clone()))\n                 }\n             },\n-            Slice(..) => {\n-                unimplemented!()\n-            }\n+            Slice(slice) => match slice._unimplemented {},\n             Str(..)\n             | FloatRange(..)\n             | IntRange(..)\n@@ -1023,9 +1017,9 @@ impl<'p> DeconstructedPat<'p> {\n                     PatKind::Wild\n                 }\n             },\n-            &Slice(Slice { _unimplemented: _void }) => unimplemented!(),\n-            &Str(_void) => unimplemented!(),\n-            &FloatRange(_void) => unimplemented!(),\n+            &Slice(slice) => match slice._unimplemented {},\n+            &Str(void) => match void {},\n+            &FloatRange(void) => match void {},\n             IntRange(range) => return range.to_pat(cx, self.ty.clone()),\n             Wildcard | NonExhaustive => PatKind::Wild,\n             Missing { .. } => {\n@@ -1074,7 +1068,7 @@ impl<'p> DeconstructedPat<'p> {\n             (Slice(self_slice), Slice(other_slice))\n                 if self_slice.arity() != other_slice.arity() =>\n             {\n-                unimplemented!()\n+                match self_slice._unimplemented {}\n             }\n             _ => self.fields.iter_patterns().collect(),\n         }"}]}