{"sha": "61042e6e4d6680bd7788c37086c56ef2cd764217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMDQyZTZlNGQ2NjgwYmQ3Nzg4YzM3MDg2YzU2ZWYyY2Q3NjQyMTc=", "commit": {"author": {"name": "Stuart Dootson", "email": "stuart.dootson@gmail.com", "date": "2016-08-24T20:32:04Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-08-24T20:32:04Z"}, "message": "Fix issue 1124 - detect start of output rather than start of input file when writing output source file (#1133)\n\n* Change required to prevent a trailing space at the end of a separate module being propagated\r\n\r\n* Detect the start of the output file rather than the start of the input file when deciding whether to output preceding snippets - this stops unnecessary whitespace and blank lines from being inserted when spans and statements are output in an order other than that from the input file.\r\n\r\n* Add code to prevent space from being added with the prefix snippet if a) the snippet is entirely horizontal whitespace, or b) the snippet contains whitespace  followed by a newline. This prevents trailing spaces at the end of a line from being added.\r\n\r\n* Tests for this issue\r\n\r\n* Tidy up `match` statements\r\n\r\n* Add test with blank lines between `use` statements", "tree": {"sha": "0183a61efd41d344bc9edc695d28d3bc80a69364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0183a61efd41d344bc9edc695d28d3bc80a69364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61042e6e4d6680bd7788c37086c56ef2cd764217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61042e6e4d6680bd7788c37086c56ef2cd764217", "html_url": "https://github.com/rust-lang/rust/commit/61042e6e4d6680bd7788c37086c56ef2cd764217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61042e6e4d6680bd7788c37086c56ef2cd764217/comments", "author": {"login": "studoot", "id": 799344, "node_id": "MDQ6VXNlcjc5OTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/799344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/studoot", "html_url": "https://github.com/studoot", "followers_url": "https://api.github.com/users/studoot/followers", "following_url": "https://api.github.com/users/studoot/following{/other_user}", "gists_url": "https://api.github.com/users/studoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/studoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/studoot/subscriptions", "organizations_url": "https://api.github.com/users/studoot/orgs", "repos_url": "https://api.github.com/users/studoot/repos", "events_url": "https://api.github.com/users/studoot/events{/privacy}", "received_events_url": "https://api.github.com/users/studoot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d022f05f340b9aa4956ca315f5e424a6d3ab3248", "url": "https://api.github.com/repos/rust-lang/rust/commits/d022f05f340b9aa4956ca315f5e424a6d3ab3248", "html_url": "https://github.com/rust-lang/rust/commit/d022f05f340b9aa4956ca315f5e424a6d3ab3248"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "bc343307272b24ff86e3f1d75bb3fa0459aacab5", "filename": "src/imports.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -178,19 +178,26 @@ impl<'a> FmtVisitor<'a> {\n         // Order the imports by view-path & other import path properties\n         ordered_use_items.sort_by(|a, b| compare_use_items(a.0, b.0).unwrap());\n         // First, output the span before the first import\n+        let prev_span_str = self.snippet(codemap::mk_sp(self.last_pos, pos_before_first_use_item));\n+        // Look for purely trailing space at the start of the prefix snippet before a linefeed, or\n+        // a prefix that's entirely horizontal whitespace.\n+        let prefix_span_start = match prev_span_str.find('\\n') {\n+            Some(offset) if prev_span_str[..offset].trim().is_empty() => {\n+                self.last_pos + BytePos(offset as u32)\n+            }\n+            None if prev_span_str.trim().is_empty() => pos_before_first_use_item,\n+            _ => self.last_pos,\n+        };\n         // Look for indent (the line part preceding the use is all whitespace) and excise that\n         // from the prefix\n-        let prev_span_str = self.snippet(codemap::mk_sp(self.last_pos, pos_before_first_use_item));\n         let span_end = match prev_span_str.rfind('\\n') {\n-            Some(offset) => {\n-                if prev_span_str[offset..].trim().is_empty() {\n-                    self.last_pos + BytePos(offset as u32)\n-                } else {\n-                    pos_before_first_use_item\n-                }\n+            Some(offset) if prev_span_str[offset..].trim().is_empty() => {\n+                self.last_pos + BytePos(offset as u32)\n             }\n-            None => pos_before_first_use_item,\n+            _ => pos_before_first_use_item,\n         };\n+\n+        self.last_pos = prefix_span_start;\n         self.format_missing(span_end);\n         for ordered in ordered_use_items {\n             // Fake out the formatter by setting `self.last_pos` to the appropriate location before"}, {"sha": "0e7d1402fc55675b9b5ee0e6151994cc61011f90", "filename": "src/missed_spans.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -14,6 +14,10 @@ use syntax::codemap::{self, BytePos, Span, Pos};\n use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n \n impl<'a> FmtVisitor<'a> {\n+    fn output_at_start(&self) -> bool {\n+        self.buffer.len == 0\n+    }\n+\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n@@ -25,7 +29,7 @@ impl<'a> FmtVisitor<'a> {\n         let config = self.config;\n         self.format_missing_inner(end, |this, last_snippet, snippet| {\n             this.buffer.push_str(last_snippet.trim_right());\n-            if last_snippet == snippet {\n+            if last_snippet == snippet && !this.output_at_start() {\n                 // No new lines in the snippet.\n                 this.buffer.push_str(\"\\n\");\n             }\n@@ -41,7 +45,7 @@ impl<'a> FmtVisitor<'a> {\n \n         if start == end {\n             // Do nothing if this is the beginning of the file.\n-            if start != self.codemap.lookup_char_pos(start).file.start_pos {\n+            if !self.output_at_start() {\n                 process_last_snippet(self, \"\", \"\");\n             }\n             return;"}, {"sha": "b89b97487a55583457dc81f6412157567dc08a5c", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -559,7 +559,7 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = filemap.start_pos;\n         self.block_indent = Indent::empty();\n         self.walk_mod_items(m);\n-        self.format_missing(filemap.end_pos);\n+        self.format_missing_with_indent(filemap.end_pos);\n     }\n \n     pub fn get_context(&self) -> RewriteContext {"}, {"sha": "44148a2d3c3ed6bc75e28e1c55eec63f4d720698", "filename": "tests/config/issue-1124.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Fconfig%2Fissue-1124.toml", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Fconfig%2Fissue-1124.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fissue-1124.toml?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -0,0 +1 @@\n+reorder_imports = true"}, {"sha": "0b9d68f49b8576e6213031c07eebca081b098fff", "filename": "tests/source/issue-1124.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Fsource%2Fissue-1124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Fsource%2Fissue-1124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1124.rs?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -0,0 +1,13 @@\n+use d; use c; use b; use a; \n+// The previous line has a space after the `use a;` \n+\n+mod a { use d; use c; use b; use a; }\n+\n+use z;\n+\n+use y;\n+\n+\n+\n+use x;\n+use a;\n\\ No newline at end of file"}, {"sha": "d30f29461d8cb7e38350212a1e975bf75b72bd2c", "filename": "tests/target/issue-1124.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Ftarget%2Fissue-1124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61042e6e4d6680bd7788c37086c56ef2cd764217/tests%2Ftarget%2Fissue-1124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1124.rs?ref=61042e6e4d6680bd7788c37086c56ef2cd764217", "patch": "@@ -0,0 +1,21 @@\n+use a;\n+use b;\n+use c;\n+use d;\n+// The previous line has a space after the `use a;`\n+\n+mod a {\n+    use a;\n+    use b;\n+    use c;\n+    use d;\n+}\n+\n+use a;\n+\n+\n+\n+use x;\n+\n+use y;\n+use z;"}]}