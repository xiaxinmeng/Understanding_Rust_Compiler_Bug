{"sha": "3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWI5ZjBmYWZkMzNhNDI1YTY3YjdlZTQ0ZjMwZjk4ZGRlNjQ2NDI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-03T18:46:22Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-03T18:49:58Z"}, "message": "rename TraitItemKind::Method -> Fn", "tree": {"sha": "fab65152229406bf85b9a8756bfc406edb7df455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab65152229406bf85b9a8756bfc406edb7df455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "html_url": "https://github.com/rust-lang/rust/commit/3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "html_url": "https://github.com/rust-lang/rust/commit/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550"}], "stats": {"total": 137, "additions": 67, "deletions": 70}, "files": [{"sha": "d9ffe4582e7d77e75ebace0a02066e50b0fa4be4", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -60,7 +60,7 @@ impl MaybeFnLike for hir::ImplItem<'_> {\n impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n     }\n@@ -239,7 +239,7 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             Node::TraitItem(ti) => match ti.kind {\n-                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+                hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),"}, {"sha": "9d2cc1877e407c7eac35505491456bcee7568f95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -51,7 +51,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(ref item) => match item.kind {\n-                TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n+                TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n                 _ => None,\n             },\n \n@@ -77,7 +77,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(item) => match &item.kind {\n-                TraitItemKind::Method(sig, _) => Some(sig),\n+                TraitItemKind::Fn(sig, _) => Some(sig),\n                 _ => None,\n             },\n \n@@ -101,7 +101,7 @@ impl<'hir> Entry<'hir> {\n \n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(_, Some(body))\n-                | TraitItemKind::Method(_, TraitMethod::Provided(body)) => Some(body),\n+                | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n                 _ => None,\n             },\n \n@@ -326,7 +326,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(..) => DefKind::AssocConst,\n-                TraitItemKind::Method(..) => DefKind::AssocFn,\n+                TraitItemKind::Fn(..) => DefKind::AssocFn,\n                 TraitItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::ImplItem(item) => match item.kind {\n@@ -473,7 +473,7 @@ impl<'hir> Map<'hir> {\n             | Node::AnonConst(_) => BodyOwnerKind::Const,\n             Node::Ctor(..)\n             | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Method(..), .. })\n+            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n             | Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => BodyOwnerKind::Fn,\n             Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n             Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n@@ -801,7 +801,7 @@ impl<'hir> Map<'hir> {\n                     _ => false,\n                 },\n                 Node::TraitItem(ti) => match ti.kind {\n-                    TraitItemKind::Method(..) => true,\n+                    TraitItemKind::Fn(..) => true,\n                     _ => false,\n                 },\n                 Node::ImplItem(ii) => match ii.kind {\n@@ -1312,7 +1312,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n-                TraitItemKind::Method(..) => \"trait method\",\n+                TraitItemKind::Fn(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n "}, {"sha": "f732f645dc07d410b5ccb09e5608dca5a32477a0", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -767,13 +767,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Required(names)))\n             }\n             AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));"}, {"sha": "5a83c65204cc44c034d07b88ead7972f6f92bf58", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -1863,8 +1863,8 @@ pub enum TraitMethod<'hir> {\n pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty<'hir>, Option<BodyId>),\n-    /// A method with an optional body.\n-    Method(FnSig<'hir>, TraitMethod<'hir>),\n+    /// An associated function with an optional body.\n+    Fn(FnSig<'hir>, TraitMethod<'hir>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds<'hir>, Option<&'hir Ty<'hir>>),\n@@ -2699,7 +2699,7 @@ impl Node<'_> {\n \n     pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n         match self {\n-            Node::TraitItem(TraitItem { kind: TraitItemKind::Method(fn_sig, _), .. })\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n             | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n             Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {"}, {"sha": "e92192c8b1f728269d27dcfc9b30241bc3a5cc3b", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -911,14 +911,14 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Required(param_names)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Required(param_names)) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Provided(body_id)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Provided(body_id)) => {\n             visitor.visit_fn(\n                 FnKind::Method(trait_item.ident, sig, None, &trait_item.attrs),\n                 &sig.decl,"}, {"sha": "7738548dadef2f86c1c2b3da29ce174edbdc11ee", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -886,13 +886,13 @@ impl<'a> State<'a> {\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis);\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None);\n                 self.s.word(\";\");\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.head(\"\");"}, {"sha": "b7bc555d7b410255ea8903fc8702774a3118e0cf", "filename": "src/librustc_hir/target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_hir%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Ftarget.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -105,10 +105,10 @@ impl Target {\n     pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n-            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                 Target::Method(MethodKind::Trait { body: false })\n             }\n-            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                 Target::Method(MethodKind::Trait { body: true })\n             }\n             TraitItemKind::Type(..) => Target::AssocTy,"}, {"sha": "86c3fbcf8c7c17cc568f64f881a5c3b0919e8708", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -328,7 +328,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 }\n             }\n             HirNode::TraitItem(item) => match item.kind {\n-                TraitItemKind::Method(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n+                TraitItemKind::Fn(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n                 TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_IN_TRAIT),\n                 TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),\n             },"}, {"sha": "9185c4670230828fdfc3bfbcfb4c48fdc3063fd8", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -269,7 +269,7 @@ fn item_scope_tag(item: &hir::Item<'_>) -> &'static str {\n \n fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n     match item.kind {\n-        hir::TraitItemKind::Method(..) => \"method body\",\n+        hir::TraitItemKind::Fn(..) => \"method body\",\n         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\",\n     }\n }"}, {"sha": "7346cb0a03393dfd9e04a9ba9e26166adff3f012", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(ref m, ..),\n+                        kind: hir::TraitItemKind::Fn(ref m, ..),\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {"}, {"sha": "eb34a4875961c0bcbd984b6bcef32d0a306ae9fd", "filename": "src/librustc_infer/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 })\n             }\n             hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n             hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "e8575cd2c47e17ca9f67985ed8a99bf44e41bf8c", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             match node {\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 }) if param_ty && self_ty == self.tcx.types.self_param => {\n                     // Restricting `Self` for a single method.\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             })\n             | Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(ref sig, _),\n+                kind: hir::TraitItemKind::Fn(ref sig, _),\n                 ..\n             }) => (\n                 self.tcx.sess.source_map().def_span(span),"}, {"sha": "c8bffc4d445a6d3037a08047277574cb9986c43c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n         let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Fn(..) => \"a trait method\",\n             hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n "}, {"sha": "37fefe680d7d26e58fbb24c09c9a5b1dd7cd2da7", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = item.kind {\n+        if let hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(pnames)) = item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);"}, {"sha": "b89cd0792b893e0264da0b0649098c7bdf45e4ae", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -805,7 +805,7 @@ impl EncodeContext<'tcx> {\n                 )\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(m_sig, m) = &ast_item.kind {\n+                let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)"}, {"sha": "7ebc164e49c562fa874d2a8ede2772d3659369f1", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         }))\n                         | Some(hir::Node::TraitItem(hir::TraitItem {\n                             ident,\n-                            kind: hir::TraitItemKind::Method(sig, _),\n+                            kind: hir::TraitItemKind::Fn(sig, _),\n                             ..\n                         }))\n                         | Some(hir::Node::ImplItem(hir::ImplItem {\n@@ -520,7 +520,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     ident,\n-                    kind: hir::TraitItemKind::Method(sig, _),\n+                    kind: hir::TraitItemKind::Fn(sig, _),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "4cd1efe4ef912236615f5a87fcb214f6aa583526", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -44,7 +44,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         })\n         | Node::TraitItem(hir::TraitItem {\n             kind:\n-                hir::TraitItemKind::Method(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n+                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })"}, {"sha": "4a0ffc23365da9ccabe41dd1759387bf4c3d3a9d", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -391,7 +391,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.kind {\n                         hir::TraitItemKind::Const(_, Some(_))\n-                        | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                        | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                             if has_allow_dead_code_or_lang_attr(\n                                 self.tcx,\n                                 trait_item.hir_id,\n@@ -682,11 +682,11 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                 self.visit_nested_body(body_id)\n             }\n             hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n             | hir::TraitItemKind::Type(..) => {}\n         }\n     }"}, {"sha": "79a9f22603042aa0993faa453e92d37134e6a1a6", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -162,8 +162,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             },\n             Some(Node::TraitItem(trait_method)) => match trait_method.kind {\n                 hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n             Some(Node::ImplItem(impl_item)) => {\n@@ -278,11 +278,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::TraitItem(trait_method) => {\n                 match trait_method.kind {\n                     hir::TraitItemKind::Const(_, None)\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                         // Keep going, nothing to get exported\n                     }\n                     hir::TraitItemKind::Const(_, Some(body_id))\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                         self.visit_nested_body(body_id);\n                     }\n                     hir::TraitItemKind::Type(..) => {}"}, {"sha": "280acfe8c4872b5d78c2afdf07bdb4a971304b4e", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         use self::hir::TraitItemKind::*;\n         self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n-            Method(ref sig, _) => {\n+            Fn(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(trait_item.hir_id)),\n@@ -1816,8 +1816,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 match self.tcx.hir().get(fn_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(..),\n-                        ..\n+                        kind: hir::TraitItemKind::Fn(..), ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n                         kind: hir::ImplItemKind::Method(..), ..\n@@ -2093,9 +2092,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item { kind: hir::ItemKind::Fn(.., body), .. }) => Some(body),\n \n-            Node::TraitItem(&hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, ref m), ..\n-            }) => {\n+            Node::TraitItem(&hir::TraitItem { kind: hir::TraitItemKind::Fn(_, ref m), .. }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) =\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {"}, {"sha": "db392ede432e189714b6685bd56d0880c21c740d", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -185,7 +185,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n \n     let node_kind = match node {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => NodeKind::Fn,\n+            TraitItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         },\n "}, {"sha": "0c8dec8f8d4a9706d3acd98efaa8b4070a510256", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -412,8 +412,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::Mutability => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                    TraitItemKind::Method(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n-                    _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                    TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n+                    _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                 };\n \n                 impl_m_iter\n@@ -440,10 +440,10 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n                     match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                        TraitItemKind::Method(ref trait_m_sig, _) => {\n+                        TraitItemKind::Fn(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n-                        _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                        _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                     };\n \n                 let impl_iter = impl_sig.inputs().iter();\n@@ -708,7 +708,7 @@ fn compare_number_of_method_arguments<'tcx>(\n         let trait_m_hir_id = tcx.hir().as_local_hir_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_hir_id {\n             match tcx.hir().expect_trait_item(trait_id).kind {\n-                TraitItemKind::Method(ref trait_m_sig, _) => {\n+                TraitItemKind::Fn(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 { trait_number_args - 1 } else { 0 };\n                     if let Some(arg) = trait_m_sig.decl.inputs.get(pos) {\n                         Some(if pos == 0 {"}, {"sha": "9e3b4a7be72bbca793eca6cc08bd3c94d6f2f8b2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -930,7 +930,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let ty::AssocKind::Method = item.kind {\n                                 let id = self.tcx.hir().as_local_hir_id(item.def_id);\n                                 if let Some(hir::Node::TraitItem(hir::TraitItem {\n-                                    kind: hir::TraitItemKind::Method(fn_sig, method),\n+                                    kind: hir::TraitItemKind::Fn(fn_sig, method),\n                                     ..\n                                 })) = id.map(|id| self.tcx.hir().get(id))\n                                 {"}, {"sha": "3388a70b4cfd0f58eddb2ac886fd796d1fccb81e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -811,7 +811,7 @@ fn primary_body_of(\n         },\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 Some((body, None, Some(&sig.header), Some(&sig.decl)))\n             }\n             _ => None,\n@@ -1733,7 +1733,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n-                if let hir::TraitItemKind::Method(sig, _) = &item.kind {\n+                if let hir::TraitItemKind::Fn(sig, _) = &item.kind {\n                     let abi = sig.header.abi;\n                     fn_maybe_err(tcx, item.ident.span, abi);\n                 }\n@@ -4769,7 +4769,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             Node::TraitItem(&hir::TraitItem {\n                 ident,\n-                kind: hir::TraitItemKind::Method(ref sig, ..),\n+                kind: hir::TraitItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n@@ -4863,7 +4863,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 }))\n                 | Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Provided(body_id)),\n                     ..\n                 })) => {\n                     let body = hir.body(*body_id);\n@@ -4934,7 +4934,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \")\n                 }\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Required(idents)),\n                     ..\n                 })) => {\n                     sugg_call = idents"}, {"sha": "335b4a285011681922501e2ba4a817085f976080", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -173,7 +173,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n     let method_sig = match trait_item.kind {\n-        hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n+        hir::TraitItemKind::Fn(ref sig, _) => Some(sig),\n         _ => None,\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n@@ -207,7 +207,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         {\n             trait_should_be_self.push(ty.span)\n         }\n-        hir::TraitItemKind::Method(sig, _) => {\n+        hir::TraitItemKind::Fn(sig, _) => {\n             for ty in sig.decl.inputs {\n                 if could_be_self(trait_def_id, ty) {\n                     trait_should_be_self.push(ty.span);"}, {"sha": "d6262b352480d51ceb057c572e673337ec609179", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -715,7 +715,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     tcx.generics_of(def_id);\n \n     match trait_item.kind {\n-        hir::TraitItemKind::Method(..) => {\n+        hir::TraitItemKind::Fn(..) => {\n             tcx.type_of(def_id);\n             tcx.fn_sig(def_id);\n         }\n@@ -1121,7 +1121,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n     match node {\n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(ref sig, _) => {\n+            hir::TraitItemKind::Fn(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n             _ => None,\n@@ -1437,7 +1437,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Fn(sig, TraitMethod::Provided(_)),\n             ident,\n             generics,\n             ..\n@@ -1474,7 +1474,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n+            kind: TraitItemKind::Fn(FnSig { header, decl }, _),\n             ident,\n             generics,\n             .."}, {"sha": "815235adc7175f4ba80024bdb38e39584aeaf4df", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -27,7 +27,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n     match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => {\n+            TraitItemKind::Fn(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }"}, {"sha": "fc3b7201a1e6322e48a562bae5e432f4a27745f7", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.visit_node_helper(trait_item.hir_id);\n         }\n     }"}, {"sha": "412b90a9acffa03fa9deabc781b341522d02ef21", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -54,7 +54,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         },\n \n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(..) => {}\n+            hir::TraitItemKind::Fn(..) => {}\n \n             _ => unsupported(),\n         },"}, {"sha": "f79f8c4bb9510d38926e50b9bdae772d4eb6e797", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.add_inferreds_for_item(trait_item.hir_id);\n         }\n     }"}, {"sha": "569faf73a2114abe795960e30f3e5ad5d8a4d686", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aeb9f0fafd33a425a67b7ee44f30f98dde64642/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "patch": "@@ -1084,10 +1084,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 MethodItem((sig, &self.generics, body, None).clean(cx))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });"}]}