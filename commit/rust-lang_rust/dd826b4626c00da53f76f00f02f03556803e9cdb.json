{"sha": "dd826b4626c00da53f76f00f02f03556803e9cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkODI2YjQ2MjZjMDBkYTUzZjc2ZjAwZjAyZjAzNTU2ODAzZTljZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-09T19:13:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-09T19:13:26Z"}, "message": "Auto merge of #6305 - smoelius:master, r=flip1995\n\nAdd `let_underscore_drop`\n\nThis line generalizes `let_underscore_lock` (#5101) to warn about any initializer expression that implements `Drop`.\n\nSo, for example, the following would generate a warning:\n```rust\nstruct Droppable;\nimpl Drop for Droppable {\n    fn drop(&mut self) {}\n}\nlet _ = Droppable;\n```\n\nI tried to preserve the original `let_underscore_lock` functionality in the sense that the warning generated for\n```rust\nlet _ = mutex.lock();\n```\nshould be unchanged.\n\n*Please keep the line below*\nchangelog: Add lint [`let_underscore_drop`]", "tree": {"sha": "fcaba54948cd5788ba2547c8daf4bde005ee8f05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcaba54948cd5788ba2547c8daf4bde005ee8f05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd826b4626c00da53f76f00f02f03556803e9cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd826b4626c00da53f76f00f02f03556803e9cdb", "html_url": "https://github.com/rust-lang/rust/commit/dd826b4626c00da53f76f00f02f03556803e9cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd826b4626c00da53f76f00f02f03556803e9cdb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d212c382c3d00b8a2bb701313c7bdd605ea7e128", "url": "https://api.github.com/repos/rust-lang/rust/commits/d212c382c3d00b8a2bb701313c7bdd605ea7e128", "html_url": "https://github.com/rust-lang/rust/commit/d212c382c3d00b8a2bb701313c7bdd605ea7e128"}, {"sha": "4852cca61bb989adf77b1d202eae6b40067fa9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4852cca61bb989adf77b1d202eae6b40067fa9ab", "html_url": "https://github.com/rust-lang/rust/commit/4852cca61bb989adf77b1d202eae6b40067fa9ab"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "816d25bcd93eb1fe5628ceeb530ea04248f8d402", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1787,6 +1787,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value"}, {"sha": "6a5a77f8690a9be9b17c526c23e884cd1be6fa77", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n+use crate::utils::{implements_trait, is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -58,7 +58,48 @@ declare_clippy_lint! {\n     \"non-binding let on a synchronization lock\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = <expr>`\n+    /// where expr has a type that implements `Drop`\n+    ///\n+    /// **Why is this bad?** This statement immediately drops the initializer\n+    /// expression instead of extending its lifetime to the end of the scope, which\n+    /// is often not intended. To extend the expression's lifetime to the end of the\n+    /// scope, use an underscore-prefixed name instead (i.e. _var). If you want to\n+    /// explicitly drop the expression, `std::mem::drop` conveys your intention\n+    /// better and is less error-prone.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// struct Droppable;\n+    /// impl Drop for Droppable {\n+    ///     fn drop(&mut self) {}\n+    /// }\n+    /// {\n+    ///     let _ = Droppable;\n+    ///     //               ^ dropped here\n+    ///     /* more code */\n+    /// }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// {\n+    ///     let _droppable = Droppable;\n+    ///     /* more code */\n+    ///     // dropped at end of scope\n+    /// }\n+    /// ```\n+    pub LET_UNDERSCORE_DROP,\n+    pedantic,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_DROP]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::MUTEX_GUARD,\n@@ -84,6 +125,15 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n                 });\n+                let implements_drop = cx.tcx.lang_items().drop_trait().map_or(false, |drop_trait|\n+                    init_ty.walk().any(|inner| match inner.unpack() {\n+                        GenericArgKind::Type(inner_ty) => {\n+                            implements_trait(cx, inner_ty, drop_trait, &[])\n+                        },\n+\n+                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                    })\n+                );\n                 if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n@@ -94,6 +144,16 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n+                } else if implements_drop {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_DROP,\n+                        local.span,\n+                        \"non-binding `let` on a type that implements `Drop`\",\n+                        None,\n+                        \"consider using an underscore-prefixed named \\\n+                            binding or dropping explicitly with `std::mem::drop`\"\n+                    )\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "20b38cbb6d0d550ac9ad68892dcc28eb2dad0c3c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -622,6 +622,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_DROP,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n@@ -1240,6 +1241,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_DROP),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n         LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),"}, {"sha": "4f1b56ed9bee5ca5092ab0639e4a19a5992b6701", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1117,6 +1117,13 @@ vec![\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_drop\",\n+        group: \"pedantic\",\n+        desc: \"non-binding let on a type that implements `Drop`\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_underscore_lock\",\n         group: \"correctness\","}, {"sha": "514502416192640890c0c436981abcdb800f4d5e", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {"}, {"sha": "119226813793c172aba83986b6f15830039a6e5f", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,5 +1,5 @@\n error: called `filter(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:5:21\n+  --> $DIR/filter_methods.rs:6:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n error: called `filter(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:7:21\n+  --> $DIR/filter_methods.rs:8:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^\n@@ -20,7 +20,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:13:21\n+  --> $DIR/filter_methods.rs:14:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^\n@@ -32,7 +32,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:19:21\n+  --> $DIR/filter_methods.rs:20:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^"}, {"sha": "98593edb9c591216f7f5380b99917489811e8fef", "filename": "tests/ui/let_underscore_drop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::let_underscore_drop)]\n+\n+struct Droppable;\n+\n+impl Drop for Droppable {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let unit = ();\n+    let boxed = Box::new(());\n+    let droppable = Droppable;\n+    let optional = Some(Droppable);\n+\n+    let _ = ();\n+    let _ = Box::new(());\n+    let _ = Droppable;\n+    let _ = Some(Droppable);\n+}"}, {"sha": "66069e0c5e13f00a8d524c99351a2f7363da0c89", "filename": "tests/ui/let_underscore_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.stderr?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -0,0 +1,27 @@\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:16:5\n+   |\n+LL |     let _ = Box::new(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:17:5\n+   |\n+LL |     let _ = Droppable;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:18:5\n+   |\n+LL |     let _ = Some(Droppable);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ce92b3c0c30394bbe7a7995bc45a4b25d1481dbe", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]"}, {"sha": "324c776c3c9aa8e1915ec11db0b9ec2333223158", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]"}, {"sha": "d84a5bf8d4de6f3bc3543b4861543e19a92264f9", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,37 +1,37 @@\n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:10:22\n+  --> $DIR/map_clone.rs:11:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: you are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:11:26\n+  --> $DIR/map_clone.rs:12:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:12:23\n+  --> $DIR/map_clone.rs:13:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:14:26\n+  --> $DIR/map_clone.rs:15:26\n    |\n LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&16).copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:15:25\n+  --> $DIR/map_clone.rs:16:25\n    |\n LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&1).copied()`\n \n error: you are needlessly cloning iterator elements\n-  --> $DIR/map_clone.rs:26:29\n+  --> $DIR/map_clone.rs:27:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call"}, {"sha": "a7ab5a12cb7655e0a2ed5e7f81359715122de928", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n "}, {"sha": "e364a05f3760525532babb874cd193d7ced8fef0", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n "}, {"sha": "d4e27f9aa07501638bf529c6886a96d9072e017d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd826b4626c00da53f76f00f02f03556803e9cdb/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=dd826b4626c00da53f76f00f02f03556803e9cdb", "patch": "@@ -1,37 +1,37 @@\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:14:46\n+  --> $DIR/map_flatten.rs:15:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:15:46\n+  --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:16:46\n+  --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:17:46\n+  --> $DIR/map_flatten.rs:18:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:20:46\n+  --> $DIR/map_flatten.rs:21:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:23:39\n+  --> $DIR/map_flatten.rs:24:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`"}]}