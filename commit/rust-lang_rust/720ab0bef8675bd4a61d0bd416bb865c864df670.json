{"sha": "720ab0bef8675bd4a61d0bd416bb865c864df670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMGFiMGJlZjg2NzViZDRhNjFkMGJkNDE2YmI4NjVjODY0ZGY2NzA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-22T17:47:35Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-22T17:47:35Z"}, "message": "Refactor builtin macro", "tree": {"sha": "0adf00317519e6eddc126b6766f85bad897c00ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0adf00317519e6eddc126b6766f85bad897c00ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720ab0bef8675bd4a61d0bd416bb865c864df670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720ab0bef8675bd4a61d0bd416bb865c864df670", "html_url": "https://github.com/rust-lang/rust/commit/720ab0bef8675bd4a61d0bd416bb865c864df670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720ab0bef8675bd4a61d0bd416bb865c864df670/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e78a5f4e7601df09b579fae56a0e31b1bd3604", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e78a5f4e7601df09b579fae56a0e31b1bd3604", "html_url": "https://github.com/rust-lang/rust/commit/f4e78a5f4e7601df09b579fae56a0e31b1bd3604"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "d551f919854bbc886aadfc3f1510160d98c23955", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 124, "deletions": 18, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/720ab0bef8675bd4a61d0bd416bb865c864df670/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720ab0bef8675bd4a61d0bd416bb865c864df670/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=720ab0bef8675bd4a61d0bd416bb865c864df670", "patch": "@@ -16,19 +16,45 @@ pub enum BuiltinExpander {\n     Stringify,\n }\n \n+struct BuiltInMacroInfo {\n+    name: name::Name,\n+    kind: BuiltinExpander,\n+    expand: fn(\n+        db: &dyn AstDatabase,\n+        id: MacroCallId,\n+        _tt: &tt::Subtree,\n+    ) -> Result<tt::Subtree, mbe::ExpandError>,\n+}\n+\n+macro_rules! register_builtin {\n+    ( $(($name:ident, $kind: ident) => $expand:ident),* ) => {\n+        const BUILTIN_MACROS: &[BuiltInMacroInfo] = &[\n+            $(BuiltInMacroInfo { name: name::$name, kind: BuiltinExpander::$kind, expand: $expand }),*\n+        ];\n+    };\n+}\n+\n+register_builtin! {\n+    (COLUMN_MACRO, Column) => column_expand,\n+    (FILE_MACRO, File) => file_expand,\n+    (LINE_MACRO, Line) => line_expand,\n+    (STRINGIFY_MACRO, Stringify) => stringify_expand\n+}\n+\n impl BuiltinExpander {\n     pub fn expand(\n         &self,\n         db: &dyn AstDatabase,\n         id: MacroCallId,\n         tt: &tt::Subtree,\n     ) -> Result<tt::Subtree, mbe::ExpandError> {\n-        match self {\n-            BuiltinExpander::Column => column_expand(db, id, tt),\n-            BuiltinExpander::File => file_expand(db, id, tt),\n-            BuiltinExpander::Line => line_expand(db, id, tt),\n-            BuiltinExpander::Stringify => stringify_expand(db, id, tt),\n-        }\n+        let expander = BUILTIN_MACROS\n+            .iter()\n+            .find(|it| *self == it.kind)\n+            .map(|it| it.expand)\n+            .ok_or_else(|| mbe::ExpandError::ConversionError)?;\n+\n+        expander(db, id, tt)\n     }\n }\n \n@@ -37,18 +63,9 @@ pub fn find_builtin_macro(\n     krate: CrateId,\n     ast_id: AstId<ast::MacroCall>,\n ) -> Option<MacroDefId> {\n-    // FIXME: Better registering method\n-    if ident == &name::COLUMN_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Column) })\n-    } else if ident == &name::FILE_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::File) })\n-    } else if ident == &name::LINE_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Line) })\n-    } else if ident == &name::STRINGIFY_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Stringify) })\n-    } else {\n-        None\n-    }\n+    let kind = BUILTIN_MACROS.iter().find(|it| *ident == it.name).map(|it| it.kind)?;\n+\n+    Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(kind) })\n }\n \n fn to_line_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize {\n@@ -171,3 +188,92 @@ fn file_expand(\n \n     Ok(expanded)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::{test_db::TestDB, MacroCallLoc};\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n+\n+    fn expand_builtin_macro(s: &str, expander: BuiltinExpander) -> String {\n+        let (db, file_id) = TestDB::with_single_file(&s);\n+        let parsed = db.parse(file_id);\n+        let macro_calls: Vec<_> =\n+            parsed.syntax_node().descendants().filter_map(|it| ast::MacroCall::cast(it)).collect();\n+\n+        let ast_id_map = db.ast_id_map(file_id.into());\n+\n+        // the first one should be a macro_rules\n+        let def = MacroDefId {\n+            krate: CrateId(0),\n+            ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0])),\n+            kind: MacroDefKind::BuiltIn(expander),\n+        };\n+\n+        let loc = MacroCallLoc {\n+            def,\n+            ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[1])),\n+        };\n+\n+        let id = db.intern_macro(loc);\n+        let parsed = db.parse_or_expand(id.as_file(MacroFileKind::Expr)).unwrap();\n+\n+        parsed.text().to_string()\n+    }\n+\n+    #[test]\n+    fn test_column_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! column {() => {}}\n+        column!()\n+\"#,\n+            BuiltinExpander::Column,\n+        );\n+\n+        assert_eq!(expanded, \"9\");\n+    }\n+\n+    #[test]\n+    fn test_line_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! line {() => {}}\n+        line!()\n+\"#,\n+            BuiltinExpander::Line,\n+        );\n+\n+        assert_eq!(expanded, \"4\");\n+    }\n+\n+    #[test]\n+    fn test_stringify_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! stringify {() => {}}\n+        stringify!(a b c)\n+\"#,\n+            BuiltinExpander::Stringify,\n+        );\n+\n+        assert_eq!(expanded, \"\\\"a b c\\\"\");\n+    }\n+\n+    #[test]\n+    fn test_file_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! file {() => {}}\n+        file!()\n+\"#,\n+            BuiltinExpander::File,\n+        );\n+\n+        assert_eq!(expanded, \"\\\"\\\"\");\n+    }\n+}"}]}