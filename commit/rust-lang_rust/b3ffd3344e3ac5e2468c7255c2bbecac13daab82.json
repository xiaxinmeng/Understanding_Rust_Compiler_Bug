{"sha": "b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZmZkMzM0NGUzYWM1ZTI0NjhjNzI1NWMyYmJlY2FjMTNkYWFiODI=", "commit": {"author": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2018-08-23T22:22:53Z"}, "committer": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2018-09-20T04:57:05Z"}, "message": "define copy_within on slices\n\nThis is a safe wrapper around ptr::copy, for regions within a single\nslice. Previously, safe in-place copying was only available as a side\neffect of Vec::drain.", "tree": {"sha": "505ea34e24c9657055bce47c950ea7f05c5ac85a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/505ea34e24c9657055bce47c950ea7f05c5ac85a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "html_url": "https://github.com/rust-lang/rust/commit/b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ffd3344e3ac5e2468c7255c2bbecac13daab82/comments", "author": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d33aedaa928cc92d58c0bfe7ff433714ff52976", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d33aedaa928cc92d58c0bfe7ff433714ff52976", "html_url": "https://github.com/rust-lang/rust/commit/1d33aedaa928cc92d58c0bfe7ff433714ff52976"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "e4ac79a26d860957b48c83aac379bfc0dbbd6723", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b3ffd3344e3ac5e2468c7255c2bbecac13daab82/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ffd3344e3ac5e2468c7255c2bbecac13daab82/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "patch": "@@ -1618,6 +1618,63 @@ impl<T> [T] {\n         }\n     }\n \n+    /// Copies elements from one part of the slice to another part of itself,\n+    /// using a memmove.\n+    ///\n+    /// `src` is the range within `self` to copy from. `dest` is the starting\n+    /// index of the range within `self` to copy to, which will have the same\n+    /// length as `src`. The two ranges may overlap. The ends of the two ranges\n+    /// must be less than or equal to `self.len()`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if either range exceeds the end of the slice,\n+    /// or if the end of `src` is before the start.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Copying four bytes within a slice:\n+    ///\n+    /// ```\n+    /// # #![feature(copy_within)]\n+    /// let mut bytes = *b\"Hello, World!\";\n+    ///\n+    /// bytes.copy_within(1..5, 8);\n+    ///\n+    /// assert_eq!(&bytes, b\"Hello, Wello!\");\n+    /// ```\n+    #[unstable(feature = \"copy_within\", issue = \"54236\")]\n+    pub fn copy_within<R: ops::RangeBounds<usize>>(&mut self, src: R, dest: usize)\n+    where\n+        T: Copy,\n+    {\n+        let src_start = match src.start_bound() {\n+            ops::Bound::Included(&n) => n,\n+            ops::Bound::Excluded(&n) => n\n+                .checked_add(1)\n+                .unwrap_or_else(|| slice_index_overflow_fail()),\n+            ops::Bound::Unbounded => 0,\n+        };\n+        let src_end = match src.end_bound() {\n+            ops::Bound::Included(&n) => n\n+                .checked_add(1)\n+                .unwrap_or_else(|| slice_index_overflow_fail()),\n+            ops::Bound::Excluded(&n) => n,\n+            ops::Bound::Unbounded => self.len(),\n+        };\n+        assert!(src_start <= src_end, \"src end is before src start\");\n+        assert!(src_end <= self.len(), \"src is out of bounds\");\n+        let count = src_end - src_start;\n+        assert!(dest <= self.len() - count, \"dest is out of bounds\");\n+        unsafe {\n+            ptr::copy(\n+                self.get_unchecked(src_start),\n+                self.get_unchecked_mut(dest),\n+                count,\n+            );\n+        }\n+    }\n+\n     /// Swaps all elements in `self` with those in `other`.\n     ///\n     /// The length of `other` must be the same as `self`."}]}