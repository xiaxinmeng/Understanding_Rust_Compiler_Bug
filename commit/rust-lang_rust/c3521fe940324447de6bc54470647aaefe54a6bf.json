{"sha": "c3521fe940324447de6bc54470647aaefe54a6bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTIxZmU5NDAzMjQ0NDdkZTZiYzU0NDcwNjQ3YWFlZmU1NGE2YmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-03T18:41:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-29T17:19:58Z"}, "message": "Custom lifetime error for `impl` item doesn't conform to `trait`", "tree": {"sha": "f84ace1b10ce088683e8a3a0ff28e0e7a761f7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f84ace1b10ce088683e8a3a0ff28e0e7a761f7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3521fe940324447de6bc54470647aaefe54a6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3521fe940324447de6bc54470647aaefe54a6bf", "html_url": "https://github.com/rust-lang/rust/commit/c3521fe940324447de6bc54470647aaefe54a6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3521fe940324447de6bc54470647aaefe54a6bf/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3d28a49209a21628fda0245b631e5fc3465be1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d28a49209a21628fda0245b631e5fc3465be1a", "html_url": "https://github.com/rust-lang/rust/commit/d3d28a49209a21628fda0245b631e5fc3465be1a"}], "stats": {"total": 141, "additions": 93, "deletions": 48}, "files": [{"sha": "cd003aa8dab708cc570b9e6800de28146af9f3f4", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -12,6 +12,7 @@ mod named_anon_conflict;\n mod placeholder_error;\n mod outlives_closure;\n mod static_impl_trait;\n+mod trait_impl_difference;\n mod util;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n@@ -73,6 +74,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_outlives_closure())\n             .or_else(|| self.try_report_static_impl_trait())\n+            .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n     pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {"}, {"sha": "bd5be89358939d59d6d895f7eb110f10dc827fb2", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -0,0 +1,53 @@\n+//! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n+\n+use crate::infer::{ValuePairs, Subtype};\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::util::common::ErrorReported;\n+\n+impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n+    /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n+    pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorReported> {\n+        if let Some(ref error) = self.error {\n+            if let RegionResolutionError::SubSupConflict(\n+                _,\n+                var_origin,\n+                sub_origin,\n+                _sub,\n+                sup_origin,\n+                _sup,\n+            ) = error.clone() {\n+                match (&sup_origin, &sub_origin) {\n+                    (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) => {\n+                        if let (\n+                            ValuePairs::Types(sub_expected_found),\n+                            ValuePairs::Types(sup_expected_found),\n+                        ) = (&sub_trace.values, &sup_trace.values) {\n+                            if sup_expected_found == sub_expected_found {\n+                                let sp = var_origin.span();\n+                                let mut err = self.tcx().sess.struct_span_err(\n+                                    sp,\n+                                    \"`impl` item doesn't match `trait` item\"\n+                                );\n+                                err.note(&format!(\n+                                    \"expected: {:?}\\n   found: {:?}\",\n+                                    sub_expected_found.expected,\n+                                    sub_expected_found.found,\n+                                ));\n+                                err.span_label(sp, &format!(\n+                                    \"found {:?}\",\n+                                    sub_expected_found.found,\n+                                ));\n+                                // FIXME: recover the `FnPtr`'s `HirId`/`Node` to point to it.\n+                                err.emit();\n+                                return Some(ErrorReported);\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None\n+    }\n+}"}, {"sha": "3c44af7188f81b2dd26af9f09c2fcde68ea6e6e1", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -9,6 +9,6 @@ impl Deref for Struct {\n         unimplemented!();\n     }\n }\n-//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter\n+//~^^^^ ERROR `impl` item doesn't match `trait` item\n \n fn main() {}"}, {"sha": "d3228951b25969a8edc1edade2161af2f87836fd", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -1,20 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n+error: `impl` item doesn't match `trait` item\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n-  --> $DIR/mismatched_trait_impl-2.rs:8:5\n-   |\n-LL | /     fn deref(&self) -> &dyn Trait {\n-LL | |         unimplemented!();\n-LL | |     }\n-   | |_____^\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&Struct) -> &(dyn Trait + 'static)\n-              found fn(&Struct) -> &dyn Trait\n+   = note: expected: fn(&Struct) -> &(dyn Trait + 'static)\n+              found: fn(&Struct) -> &dyn Trait\n \n error: aborting due to previous error\n "}, {"sha": "a9b80a7c46fdc7dff95b8d4f6500ac6dbba214ce", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -6,7 +6,7 @@ trait Get {\n }\n \n impl Get for i32 {\n-    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR `impl` item doesn't match `trait`\n         x //~ ERROR lifetime mismatch\n     }\n }"}, {"sha": "ae65125a3dfd83ab87dda474fb3dab235a2fb358", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -1,24 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error: `impl` item doesn't match `trait` item\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 9:5...\n-  --> $DIR/mismatched_trait_impl.rs:9:5\n-   |\n-LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-LL | |         x\n-LL | |     }\n-   | |_____^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the method body at 9:32...\n-  --> $DIR/mismatched_trait_impl.rs:9:32\n-   |\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |                                ^^\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&i32, &'a u32, &u32) -> &'a u32\n-              found fn(&i32, &u32, &u32) -> &u32\n+   = note: expected: fn(&i32, &'a u32, &u32) -> &'a u32\n+              found: fn(&i32, &u32, &u32) -> &u32\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9"}, {"sha": "cd285e70bc8f3ad72afd60366b0b9209d3e24347", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -0,0 +1,12 @@\n+trait Foo {\n+    fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n+}\n+\n+impl Foo for () {\n+    fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+    //~^ ERROR `impl` item doesn't match `trait` item\n+        if x > y { x } else { y }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "099e5e97e17e0f68a86993cfc247a1f0df2b72ea", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -0,0 +1,11 @@\n+error: `impl` item doesn't match `trait` item\n+  --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n+   |\n+LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n+   |\n+   = note: expected: fn(&i32, &'a i32) -> &'a i32\n+              found: fn(&i32, &i32) -> &i32\n+\n+error: aborting due to previous error\n+"}, {"sha": "39b959a2206c3756f205bcd0552b04050e886675", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -52,6 +52,6 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR `impl` item doesn't match `trait` item\n \n pub fn main() { }"}, {"sha": "7aa766dc50341c1e13142d8865334bcd4cdb3aba", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3521fe940324447de6bc54470647aaefe54a6bf/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=c3521fe940324447de6bc54470647aaefe54a6bf", "patch": "@@ -89,25 +89,14 @@ note: Use same sequence of generic type and region parameters that is on the str\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n+error: `impl` item doesn't match `trait` item\n   --> $DIR/reject-specialized-drops-8142.rs:54:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 17:10...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:10\n-   |\n-LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 17:15...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:15\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found W<'_, '_>\n    |\n-LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   |               ^^^\n-   = note: ...so that the types are compatible:\n-           expected W<'l1, 'l2>\n-              found W<'_, '_>\n+   = note: expected: W<'l1, 'l2>\n+              found: W<'_, '_>\n \n error: aborting due to 8 previous errors\n "}]}