{"sha": "7a8415894febab8eb0e796b26a87458aa9b54345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODQxNTg5NGZlYmFiOGViMGU3OTZiMjZhODc0NThhYTliNTQzNDU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-05T16:52:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-07T09:15:45Z"}, "message": "Fix/improve some error codes long explanation", "tree": {"sha": "08f37a154b3a92888eaac912511043a9a13bfbcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f37a154b3a92888eaac912511043a9a13bfbcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8415894febab8eb0e796b26a87458aa9b54345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8415894febab8eb0e796b26a87458aa9b54345", "html_url": "https://github.com/rust-lang/rust/commit/7a8415894febab8eb0e796b26a87458aa9b54345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8415894febab8eb0e796b26a87458aa9b54345/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a624c2039305db18db899eaa5883e86a0e0eb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a624c2039305db18db899eaa5883e86a0e0eb9a", "html_url": "https://github.com/rust-lang/rust/commit/2a624c2039305db18db899eaa5883e86a0e0eb9a"}], "stats": {"total": 102, "additions": 66, "deletions": 36}, "files": [{"sha": "b6b3514ff4c9d9e0bef73c5969d42dd15e8b69a9", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -466,7 +466,6 @@ fn main() {\n ```\n \"##,\n \n-\n E0139: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n \n@@ -1521,7 +1520,9 @@ where\n \"##,\n \n E0496: r##\"\n-A lifetime name is shadowing another lifetime name. Erroneous code example:\n+A lifetime name is shadowing another lifetime name.\n+\n+Erroneous code example:\n \n ```compile_fail,E0496\n struct Foo<'a> {\n@@ -1553,8 +1554,11 @@ fn main() {\n \"##,\n \n E0497: r##\"\n-A stability attribute was used outside of the standard library. Erroneous code\n-example:\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+A stability attribute was used outside of the standard library.\n+\n+Erroneous code example:\n \n ```compile_fail\n #[stable] // error: stability attributes may not be used outside of the\n@@ -2063,7 +2067,7 @@ rejected in your own crates.\n //  E0272, // on_unimplemented #0\n //  E0273, // on_unimplemented #1\n //  E0274, // on_unimplemented #2\n-    E0278, // requirement is not satisfied\n+//  E0278, // requirement is not satisfied\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n //  E0285, // overflow evaluation builtin bounds\n@@ -2106,10 +2110,10 @@ rejected in your own crates.\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n     E0697, // closures cannot be static\n-    E0707, // multiple elided lifetimes used in arguments of `async fn`\n+//  E0707, // multiple elided lifetimes used in arguments of `async fn`\n     E0708, // `async` non-`move` closures with parameters are not currently\n            // supported\n-    E0709, // multiple different lifetimes used in arguments of `async fn`\n+//  E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes\n //  E0702, // replaced with a generic attribute input check"}, {"sha": "2edc8fadf45684dae76eb1bce80429c4b97e548a", "filename": "src/librustc_lint/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_lint%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_lint%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -1,4 +1,4 @@\n syntax::register_diagnostics! {\n ;\n-    E0721, // `await` keyword\n+//  E0721, // `await` keyword\n }"}, {"sha": "77853ff1fe80aa2681de8a1df8056101400e1f20", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -953,7 +953,7 @@ https://doc.rust-lang.org/std/cell/\n \"##,\n \n E0388: r##\"\n-E0388 was removed and is no longer issued.\n+#### Note: this error code is no longer emitted by the compiler.\n \"##,\n \n E0389: r##\""}, {"sha": "0a21f56287da7cb1fc04804d335e1ced43e6bbde", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -1,12 +1,15 @@\n syntax::register_diagnostics! {\n-/*\n E0014: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Constants can only be initialized by a constant value or, in a future\n version of Rust, a call to a const function. This error indicates the use\n of a path (like a::b, or x) denoting something other than one of these\n-allowed items. Erroneous code xample:\n+allowed items.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```\n const FOO: i32 = { let x = 0; x }; // 'x' isn't a constant nor a function!\n ```\n \n@@ -18,10 +21,10 @@ const FOO: i32 = { const X : i32 = 0; X };\n const FOO2: i32 = { 0 }; // but brackets are useless here\n ```\n \"##,\n-*/\n \n E0130: r##\"\n You declared a pattern as an argument in a foreign function declaration.\n+\n Erroneous code example:\n \n ```compile_fail\n@@ -57,6 +60,20 @@ extern {\n E0136: r##\"\n A binary can only have one entry point, and by default that entry point is the\n function `main()`. If there are multiple such functions, please rename one.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0136\n+fn main() {\n+    // ...\n+}\n+\n+// ...\n+\n+fn main() { // error!\n+    // ...\n+}\n+```\n \"##,\n \n E0137: r##\""}, {"sha": "03afb547d3a226a54faa166b91bf8673bb20b2ad", "filename": "src/librustc_privacy/error_codes.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_privacy%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_privacy%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -1,8 +1,9 @@\n syntax::register_diagnostics! {\n \n E0445: r##\"\n-A private trait was used on a public type parameter bound. Erroneous code\n-examples:\n+A private trait was used on a public type parameter bound.\n+\n+Erroneous code examples:\n \n ```compile_fail,E0445\n #![deny(private_in_public)]\n@@ -32,7 +33,9 @@ pub fn foo<T: Foo> (t: T) {} // ok!\n \"##,\n \n E0446: r##\"\n-A private type was used in a public type signature. Erroneous code example:\n+A private type was used in a public type signature.\n+\n+Erroneous code example:\n \n ```compile_fail,E0446\n #![deny(private_in_public)]\n@@ -65,7 +68,9 @@ mod Foo {\n E0447: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n \n-The `pub` keyword was used inside a function. Erroneous code example:\n+The `pub` keyword was used inside a function.\n+\n+Erroneous code example:\n \n ```\n fn foo() {\n@@ -79,7 +84,11 @@ is invalid.\n \"##,\n \n E0448: r##\"\n-The `pub` keyword was used inside a public enum. Erroneous code example:\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+The `pub` keyword was used inside a public enum.\n+\n+Erroneous code example:\n \n ```compile_fail\n pub enum Foo {\n@@ -106,7 +115,9 @@ pub enum Foo {\n \"##,\n \n E0451: r##\"\n-A struct constructor with private fields was invoked. Erroneous code example:\n+A struct constructor with private fields was invoked.\n+\n+Erroneous code example:\n \n ```compile_fail,E0451\n mod Bar {"}, {"sha": "8bd899ae4d5cef0ca85b69bb8b40e8e690a47028", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8415894febab8eb0e796b26a87458aa9b54345/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=7a8415894febab8eb0e796b26a87458aa9b54345", "patch": "@@ -1873,13 +1873,14 @@ This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n \n-/*\n E0205: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An attempt to implement the `Copy` trait for an enum failed because one of the\n variants does not implement `Copy`. To fix this, you must implement `Copy` for\n the mentioned variant. Note that this may not be possible, as in the example of\n \n-```compile_fail,E0205\n+```compile_fail,E0204\n enum Foo {\n     Bar(Vec<u32>),\n     Baz,\n@@ -1892,7 +1893,7 @@ This fails because `Vec<T>` does not implement `Copy` for any `T`.\n \n Here's another example that will fail:\n \n-```compile_fail,E0205\n+```compile_fail,E0204\n #[derive(Copy)]\n enum Foo<'a> {\n     Bar(&'a mut bool),\n@@ -1903,7 +1904,6 @@ enum Foo<'a> {\n This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n-*/\n \n E0206: r##\"\n You can only implement `Copy` for a struct or enum. Both of the following\n@@ -2126,8 +2126,9 @@ For information on the design of the orphan rules, see [RFC 1023].\n [RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n \"##,\n \n-/*\n E0211: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n You used a function or type which doesn't fit the requirements for where it was\n used. Erroneous code examples:\n \n@@ -2174,7 +2175,7 @@ extern \"rust-intrinsic\" {\n }\n ```\n \n-The second case example is a bit particular : the main function must always\n+The second case example is a bit particular: the main function must always\n have this definition:\n \n ```compile_fail\n@@ -2206,7 +2207,6 @@ impl Foo {\n }\n ```\n \"##,\n-     */\n \n E0220: r##\"\n You used an associated type which isn't defined in the trait.\n@@ -2727,14 +2727,9 @@ impl<T, U> CoerceUnsized<MyType<U>> for MyType<T>\n [`CoerceUnsized`]: https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html\n \"##,\n \n-/*\n-// Associated consts can now be accessed through generic type parameters, and\n-// this error is no longer emitted.\n-//\n-// FIXME: consider whether to leave it in the error index, or remove it entirely\n-//        as associated consts is not stabilized yet.\n-\n E0329: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An attempt was made to access an associated constant through either a generic\n type parameter or `Self`. This is not supported yet. An example causing this\n error is shown below:\n@@ -2765,12 +2760,15 @@ trait Foo {\n \n struct MyStruct;\n \n+impl Foo for MyStruct {\n+    const BAR: f64 = 0f64;\n+}\n+\n fn get_bar_good() -> f64 {\n     <MyStruct as Foo>::BAR\n }\n ```\n \"##,\n-*/\n \n E0366: r##\"\n An attempt was made to implement `Drop` on a concrete specialization of a\n@@ -4973,7 +4971,7 @@ and the pin is required to keep it in the same place in memory.\n            // between structures with the same definition\n //  E0558, // replaced with a generic attribute input check\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n-    E0564, // only named lifetimes are allowed in `impl Trait`,\n+//  E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0587, // type has conflicting packed and align representation hints\n     E0588, // packed type cannot transitively contain a `[repr(align)]` type\n@@ -4986,7 +4984,7 @@ and the pin is required to keep it in the same place in memory.\n     E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind\n-    E0645, // trait aliases not finished\n+//  E0645, // trait aliases not finished\n     E0719, // duplicate values for associated type binding\n     E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions"}]}