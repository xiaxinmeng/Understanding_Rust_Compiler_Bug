{"sha": "1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTA2OGEwMWJjYjJmM2Q3OGE2M2FjNTA5NjJmMmUwMTUwZTMzMjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:43:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:43:02Z"}, "message": "typeck/expr.rs: move check_expr_struct here.", "tree": {"sha": "b71ab5c5ca4bb66a673dcfa946095487763915c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71ab5c5ca4bb66a673dcfa946095487763915c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "html_url": "https://github.com/rust-lang/rust/commit/1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa068a01bcb2f3d78a63ac50962f2e0150e3327/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb934880f0155096a6bce813ae6e6afd9fd110b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb934880f0155096a6bce813ae6e6afd9fd110b9", "html_url": "https://github.com/rust-lang/rust/commit/bb934880f0155096a6bce813ae6e6afd9fd110b9"}], "stats": {"total": 121, "additions": 61, "deletions": 60}, "files": [{"sha": "1856598281b86b00da42d507070d09e963e138fa", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1aa068a01bcb2f3d78a63ac50962f2e0150e3327/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa068a01bcb2f3d78a63ac50962f2e0150e3327/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "patch": "@@ -16,6 +16,7 @@ use crate::util::common::ErrorReported;\n \n use errors::Applicability;\n use syntax::ast;\n+use syntax::ptr::P;\n use syntax::symbol::sym;\n use rustc::hir;\n use rustc::hir::{ExprKind, QPath};\n@@ -844,4 +845,64 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tuple\n         }\n     }\n+\n+    fn check_expr_struct(\n+        &self,\n+        expr: &hir::Expr,\n+        expected: Expectation<'tcx>,\n+        qpath: &QPath,\n+        fields: &'tcx [hir::Field],\n+        base_expr: &'tcx Option<P<hir::Expr>>,\n+    ) -> Ty<'tcx> {\n+        // Find the relevant variant\n+        let (variant, adt_ty) =\n+            if let Some(variant_ty) = self.check_struct_path(qpath, expr.hir_id) {\n+                variant_ty\n+            } else {\n+                self.check_struct_fields_on_error(fields, base_expr);\n+                return self.tcx.types.err;\n+            };\n+\n+        let path_span = match *qpath {\n+            QPath::Resolved(_, ref path) => path.span,\n+            QPath::TypeRelative(ref qself, _) => qself.span\n+        };\n+\n+        // Prohibit struct expressions when non-exhaustive flag is set.\n+        let adt = adt_ty.ty_adt_def().expect(\"`check_struct_path` returned non-ADT type\");\n+        if !adt.did.is_local() && variant.is_field_list_non_exhaustive() {\n+            span_err!(self.tcx.sess, expr.span, E0639,\n+                      \"cannot create non-exhaustive {} using struct expression\",\n+                      adt.variant_descr());\n+        }\n+\n+        let error_happened = self.check_expr_struct_fields(adt_ty, expected, expr.hir_id, path_span,\n+                                                           variant, fields, base_expr.is_none());\n+        if let &Some(ref base_expr) = base_expr {\n+            // If check_expr_struct_fields hit an error, do not attempt to populate\n+            // the fields with the base_expr. This could cause us to hit errors later\n+            // when certain fields are assumed to exist that in fact do not.\n+            if !error_happened {\n+                self.check_expr_has_type_or_error(base_expr, adt_ty);\n+                match adt_ty.sty {\n+                    ty::Adt(adt, substs) if adt.is_struct() => {\n+                        let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n+                            self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n+                        }).collect();\n+\n+                        self.tables\n+                            .borrow_mut()\n+                            .fru_field_types_mut()\n+                            .insert(expr.hir_id, fru_field_types);\n+                    }\n+                    _ => {\n+                        span_err!(self.tcx.sess, base_expr.span, E0436,\n+                                  \"functional record update syntax requires a struct\");\n+                    }\n+                }\n+            }\n+        }\n+        self.require_type_is_sized(adt_ty, expr.span, traits::StructInitializerSized);\n+        adt_ty\n+    }\n }"}, {"sha": "96654400eea2394285cd7734699904745b02c6a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1aa068a01bcb2f3d78a63ac50962f2e0150e3327/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa068a01bcb2f3d78a63ac50962f2e0150e3327/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1aa068a01bcb2f3d78a63ac50962f2e0150e3327", "patch": "@@ -3864,66 +3864,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_struct(\n-        &self,\n-        expr: &hir::Expr,\n-        expected: Expectation<'tcx>,\n-        qpath: &QPath,\n-        fields: &'tcx [hir::Field],\n-        base_expr: &'tcx Option<P<hir::Expr>>,\n-    ) -> Ty<'tcx> {\n-        // Find the relevant variant\n-        let (variant, adt_ty) =\n-            if let Some(variant_ty) = self.check_struct_path(qpath, expr.hir_id) {\n-                variant_ty\n-            } else {\n-                self.check_struct_fields_on_error(fields, base_expr);\n-                return self.tcx.types.err;\n-            };\n-\n-        let path_span = match *qpath {\n-            QPath::Resolved(_, ref path) => path.span,\n-            QPath::TypeRelative(ref qself, _) => qself.span\n-        };\n-\n-        // Prohibit struct expressions when non-exhaustive flag is set.\n-        let adt = adt_ty.ty_adt_def().expect(\"`check_struct_path` returned non-ADT type\");\n-        if !adt.did.is_local() && variant.is_field_list_non_exhaustive() {\n-            span_err!(self.tcx.sess, expr.span, E0639,\n-                      \"cannot create non-exhaustive {} using struct expression\",\n-                      adt.variant_descr());\n-        }\n-\n-        let error_happened = self.check_expr_struct_fields(adt_ty, expected, expr.hir_id, path_span,\n-                                                           variant, fields, base_expr.is_none());\n-        if let &Some(ref base_expr) = base_expr {\n-            // If check_expr_struct_fields hit an error, do not attempt to populate\n-            // the fields with the base_expr. This could cause us to hit errors later\n-            // when certain fields are assumed to exist that in fact do not.\n-            if !error_happened {\n-                self.check_expr_has_type_or_error(base_expr, adt_ty);\n-                match adt_ty.sty {\n-                    ty::Adt(adt, substs) if adt.is_struct() => {\n-                        let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n-                            self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n-                        }).collect();\n-\n-                        self.tables\n-                            .borrow_mut()\n-                            .fru_field_types_mut()\n-                            .insert(expr.hir_id, fru_field_types);\n-                    }\n-                    _ => {\n-                        span_err!(self.tcx.sess, base_expr.span, E0436,\n-                                  \"functional record update syntax requires a struct\");\n-                    }\n-                }\n-            }\n-        }\n-        self.require_type_is_sized(adt_ty, expr.span, traits::StructInitializerSized);\n-        adt_ty\n-    }\n-\n     /// Invariant:\n     /// If an expression has any sub-expressions that result in a type error,\n     /// inspecting that expression's type with `ty.references_error()` will return"}]}