{"sha": "f534d9f8c4bc7aceb80dd06803d709b830a68b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzRkOWY4YzRiYzdhY2ViODBkZDA2ODAzZDcwOWI4MzBhNjhiMjE=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-09-27T13:19:52Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Stop invalidating predecessors cache when accessing unique basic block, invalidate cache when accessing unique terminator", "tree": {"sha": "44d1d1c0665be27ea6557a33a4669dfd510892c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d1d1c0665be27ea6557a33a4669dfd510892c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f534d9f8c4bc7aceb80dd06803d709b830a68b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f534d9f8c4bc7aceb80dd06803d709b830a68b21", "html_url": "https://github.com/rust-lang/rust/commit/f534d9f8c4bc7aceb80dd06803d709b830a68b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f534d9f8c4bc7aceb80dd06803d709b830a68b21/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce29f43f52af910783b20174522e2e5a2177b2fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce29f43f52af910783b20174522e2e5a2177b2fc", "html_url": "https://github.com/rust-lang/rust/commit/ce29f43f52af910783b20174522e2e5a2177b2fc"}], "stats": {"total": 185, "additions": 112, "deletions": 73}, "files": [{"sha": "0d07caa6cda342c6dfa10e1bcb6483e597176be7", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -203,17 +203,38 @@ impl<'tcx> Body<'tcx> {\n \n     #[inline]\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n-        self.predecessors_cache = None;\n-//        self.cache.invalidate();\n         &mut self.basic_blocks\n     }\n \n+    pub fn basic_block_terminator_opt_mut(&mut self, bb: BasicBlock) -> &mut Option<Terminator<'tcx>> {\n+        self.predecessors_cache = None;\n+        &mut self.basic_blocks[bb].terminator\n+    }\n+\n+    pub fn basic_block_terminator_mut(&mut self, bb: BasicBlock) -> &mut Terminator<'tcx> {\n+        self.predecessors_cache = None;\n+/*\n+        let data = &mut self.basic_blocks[bb];\n+        if let Some(cache) = self.predecessors_cache.as_mut() {\n+            for successor in data.terminator().successors() {\n+                let successor_vec = &mut cache[*successor];\n+                for i in (0..successor_vec.len()).rev() {\n+                    if successor_vec[i] == bb {\n+                        successor_vec.swap_remove(i);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+*/\n+\n+        self.basic_blocks[bb].terminator_mut()\n+    }\n+\n     #[inline]\n     pub fn basic_blocks_and_local_decls_mut(\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n-        self.predecessors_cache = None;\n-//        self.cache.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n@@ -1358,6 +1379,10 @@ impl<'tcx> BasicBlockData<'tcx> {\n         BasicBlockData { statements: vec![], terminator, is_cleanup: false }\n     }\n \n+    pub fn terminator_opt(&self) -> &Option<Terminator<'tcx>> {\n+        &self.terminator\n+    }\n+\n     /// Accessor for terminator.\n     ///\n     /// Terminator may not be None after construction of the basic block is complete. This accessor\n@@ -1366,10 +1391,17 @@ impl<'tcx> BasicBlockData<'tcx> {\n         self.terminator.as_ref().expect(\"invalid terminator state\")\n     }\n \n-    pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {\n+    // This cannot be public since changing the terminator will break the predecessors cache in Body\n+    // To do so outside of this module, use Body::basic_block_terminator_mut(BasicBlock)\n+    fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {\n         self.terminator.as_mut().expect(\"invalid terminator state\")\n     }\n \n+    // This can be public since changing the kind will not break the predecessors cache in Body\n+    pub fn terminator_kind_mut(&mut self) -> &mut TerminatorKind<'tcx> {\n+        &mut self.terminator_mut().kind\n+    }\n+\n     pub fn retain_statements<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&mut Statement<'_>) -> bool,"}, {"sha": "917f1fae52ab69c6a55042479dbd50c396111778", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n             let data = &self.body[idx];\n \n-            if let Some(ref term) = data.terminator {\n+            if let Some(ref term) = data.terminator_opt() {\n                 self.worklist.extend(term.successors());\n             }\n \n@@ -117,7 +117,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n \n         let data = &po.body[root];\n \n-        if let Some(ref term) = data.terminator {\n+        if let Some(ref term) = data.terminator_opt() {\n             po.visited.insert(root);\n             po.visit_stack.push((root, term.successors()));\n             po.traverse_successor();\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n             };\n \n             if self.visited.insert(bb) {\n-                if let Some(term) = &self.body[bb].terminator {\n+                if let Some(term) = &self.body[bb].terminator_opt() {\n                     self.visit_stack.push((bb, term.successors()));\n                 }\n             }"}, {"sha": "fe146528dae8b94fbd0d0283d5deb2dd50416b55", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -793,6 +793,7 @@ macro_rules! make_mir_visitor {\n             fn visit_location(&mut self, body: & $($mutability)? Body<'tcx>, location: Location) {\n                 let basic_block = & $($mutability)? body[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n+                    // TODO(nashenas88) how to ensure we clear the cache only in the mutable case...\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n                         self.visit_terminator(terminator, location)\n                     }"}, {"sha": "66ebe4095dcfd3d843883effb30e7dc3e6b44bcd", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -265,7 +265,7 @@ fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n         let funclet;\n         let ret_llbb;\n-        match mir[bb].terminator.as_ref().map(|t| &t.kind) {\n+        match mir[bb].terminator_opt().as_ref().map(|t| &t.kind) {\n             // This is a basic block that we're aborting the program for,\n             // notably in an `extern` function. These basic blocks are inserted\n             // so that we assert that `extern` functions do indeed not panic,"}, {"sha": "140ee2583fa9bcad564f32cd1bd49e5b55577829", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -497,7 +497,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ..\n                         },\n                         ..\n-                    }) = bbd.terminator {\n+                    }) = bbd.terminator_opt() {\n                         if let Some(source)\n                             = BorrowedContentSource::from_call(func.ty(self.body, tcx), tcx)\n                         {"}, {"sha": "734135c324a41f8deadcd4af784124c051e4b4f7", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> CFG<'tcx> {\n                      source_info: SourceInfo,\n                      kind: TerminatorKind<'tcx>) {\n         debug!(\"terminating block {:?} <- {:?}\", block, kind);\n-        debug_assert!(self.block_data(block).terminator.is_none(),\n+        debug_assert!(self.block_data(block).terminator_opt().is_none(),\n                       \"terminate: block {:?}={:?} already has a terminator set\",\n                       block,\n                       self.block_data(block));"}, {"sha": "1e4b94632fac367db46292b27800d0e9c8283e66", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -731,7 +731,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn finish(self) -> Body<'tcx> {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n-            if block.terminator.is_none() {\n+            if block.terminator_opt().is_none() {\n                 span_bug!(self.fn_span, \"no terminator on block {:?}\", index);\n             }\n         }"}, {"sha": "f2c0b7149614c7015df993a80f8ab0a18d3571f8", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -98,7 +98,7 @@ fn precompute_borrows_out_of_scope<'tcx>(\n             // Add successor BBs to the work list, if necessary.\n             let bb_data = &body[bb];\n             assert!(hi == bb_data.statements.len());\n-            for &succ_bb in bb_data.terminator.as_ref().unwrap().successors() {\n+            for &succ_bb in bb_data.terminator().successors() {\n                 visited.entry(succ_bb)\n                     .and_modify(|lo| {\n                         // `succ_bb` has been seen before. If it wasn't"}, {"sha": "70c1d12062997d4ee8d29fab0a11b23926ead4f0", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -79,7 +79,7 @@ fn check_fn_for_unconditional_recursion(\n \n         let block = &basic_blocks[bb];\n \n-        if let Some(ref terminator) = block.terminator {\n+        if let Some(ref terminator) = block.terminator_opt() {\n             match terminator.kind {\n                 TerminatorKind::Call { ref func, .. } => {\n                     let func_ty = func.ty(body, tcx);"}, {"sha": "46e6df82318079a658719491aee82904a1c3d0c4", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -46,8 +46,9 @@ impl AddCallGuards {\n \n         let cur_len = body.basic_blocks().len();\n \n-        for block in body.basic_blocks_mut() {\n-            match block.terminator {\n+        for bb in body.basic_blocks().indices() {\n+            let is_cleanup = body.basic_blocks()[bb].is_cleanup;\n+            match body.basic_block_terminator_opt_mut(bb) {\n                 Some(Terminator {\n                     kind: TerminatorKind::Call {\n                         destination: Some((_, ref mut destination)),\n@@ -60,9 +61,9 @@ impl AddCallGuards {\n                     // It's a critical edge, break it\n                     let call_guard = BasicBlockData {\n                         statements: vec![],\n-                        is_cleanup: block.is_cleanup,\n+                        is_cleanup: is_cleanup,\n                         terminator: Some(Terminator {\n-                            source_info,\n+                            source_info: *source_info,\n                             kind: TerminatorKind::Goto { target: *destination }\n                         })\n                     };"}, {"sha": "4c090d1b065152ec5d0967b21759adec4a70b1de", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -368,7 +368,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                 VariantIdx::new(RETURNED) // state for returned\n             };\n             data.statements.push(self.set_discr(state, source_info));\n-            data.terminator.as_mut().unwrap().kind = TerminatorKind::Return;\n+            *data.terminator_kind_mut() = TerminatorKind::Return;\n         }\n \n         self.super_basic_block_data(block, data);\n@@ -852,10 +852,10 @@ fn insert_switch<'tcx>(\n         is_cleanup: false,\n     });\n \n-    let blocks = body.basic_blocks_mut().iter_mut();\n-\n-    for target in blocks.flat_map(|b| b.terminator_mut().successors_mut()) {\n-        *target = BasicBlock::new(target.index() + 1);\n+    for bb in body.basic_blocks_mut().indices() {\n+        for target in body.basic_block_terminator_mut(bb).successors_mut() {\n+            *target = BasicBlock::new(target.index() + 1);\n+        }\n     }\n }\n \n@@ -941,7 +941,7 @@ fn create_generator_drop_shim<'tcx>(\n     insert_switch(&mut body, cases, &transform, TerminatorKind::Return);\n \n     for block in body.basic_blocks_mut() {\n-        let kind = &mut block.terminator_mut().kind;\n+        let kind = block.terminator_kind_mut();\n         if let TerminatorKind::GeneratorDrop = *kind {\n             *kind = TerminatorKind::Return;\n         }"}, {"sha": "0ae07f081ae33d87037e67220ff284a0072c1add", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -379,7 +379,7 @@ impl Inliner<'tcx> {\n                    callsite: CallSite<'tcx>,\n                    caller_body: &mut Body<'tcx>,\n                    mut callee_body: Body<'tcx>) -> bool {\n-        let terminator = caller_body[callsite.bb].terminator.take().unwrap();\n+        let terminator = caller_body.basic_block_terminator_opt_mut(callsite.bb).take().unwrap();\n         match terminator.kind {\n             // FIXME: Handle inlining of diverging calls\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n@@ -496,12 +496,12 @@ impl Inliner<'tcx> {\n                     kind: TerminatorKind::Goto { target: BasicBlock::new(bb_len) }\n                 };\n \n-                caller_body[callsite.bb].terminator = Some(terminator);\n+                *caller_body.basic_block_terminator_opt_mut(callsite.bb) = Some(terminator);\n \n                 true\n             }\n             kind => {\n-                caller_body[callsite.bb].terminator = Some(Terminator {\n+                *caller_body.basic_block_terminator_opt_mut(callsite.bb) = Some(Terminator {\n                     source_info: terminator.source_info,\n                     kind,\n                 });"}, {"sha": "a569dc652283ae685eb38e7196bf305705aa0da3", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -866,7 +866,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let terminator = if self.keep_original {\n                 self.source[loc.block].terminator().clone()\n             } else {\n-                let terminator = self.source[loc.block].terminator_mut();\n+                let terminator = self.source.basic_block_terminator_mut(loc.block);\n                 let target = match terminator.kind {\n                     TerminatorKind::Call { destination: Some((_, target)), .. } => target,\n                     ref kind => {\n@@ -891,7 +891,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     let last = self.promoted.basic_blocks().last().unwrap();\n                     let new_target = self.new_block();\n \n-                    *self.promoted[last].terminator_mut() = Terminator {\n+                    *self.promoted.basic_block_terminator_mut(last) = Terminator {\n                         kind: TerminatorKind::Call {\n                             func,\n                             args,\n@@ -976,11 +976,12 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     }\n                 },\n                 Candidate::Argument { bb, index } => {\n-                    let terminator = blocks[bb].terminator_mut();\n-                    match terminator.kind {\n+                    let data = &mut blocks[bb];\n+                    let terminator_span = data.terminator().source_info.span;\n+                    match data.terminator_kind_mut() {\n                         TerminatorKind::Call { ref mut args, .. } => {\n                             let ty = args[index].ty(local_decls, self.tcx);\n-                            let span = terminator.source_info.span;\n+                            let span = terminator_span;\n                             let operand = Operand::Copy(promoted_place(ty, span));\n                             mem::replace(&mut args[index], operand)\n                         }\n@@ -1103,8 +1104,8 @@ pub fn promote_candidates<'tcx>(\n \n     // Eliminate assignments to, and drops of promoted temps.\n     let promoted = |index: Local| temps[index] == TempState::PromotedOut;\n-    for block in body.basic_blocks_mut() {\n-        block.statements.retain(|statement| {\n+    for bb in body.basic_blocks().indices() {\n+        body.basic_blocks_mut()[bb].statements.retain(|statement| {\n             match &statement.kind {\n                 StatementKind::Assign(box(place, _)) => {\n                     if let Some(index) = place.as_local() {\n@@ -1120,7 +1121,7 @@ pub fn promote_candidates<'tcx>(\n                 _ => true\n             }\n         });\n-        let terminator = block.terminator_mut();\n+        let terminator = body.basic_block_terminator_mut(bb);\n         match &terminator.kind {\n             TerminatorKind::Drop { location: place, target, .. } => {\n                 if let Some(index) = place.as_local() {"}, {"sha": "9e0f80dcf9ae493786a4a1fd0fd2e0397c07afab", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -103,15 +103,15 @@ impl RemoveNoopLandingPads {\n         let postorder: Vec<_> = traversal::postorder(body).map(|(bb, _)| bb).collect();\n         for bb in postorder {\n             debug!(\"  processing {:?}\", bb);\n-            for target in body[bb].terminator_mut().successors_mut() {\n+            for target in body.basic_block_terminator_mut(bb).successors_mut() {\n                 if *target != resume_block && nop_landing_pads.contains(*target) {\n                     debug!(\"    folding noop jump to {:?} to resume block\", target);\n                     *target = resume_block;\n                     jumps_folded += 1;\n                 }\n             }\n \n-            match body[bb].terminator_mut().unwind_mut() {\n+            match body.basic_block_terminator_mut(bb).unwind_mut() {\n                 Some(unwind) => {\n                     if *unwind == Some(resume_block) {\n                         debug!(\"    removing noop landing pad\");"}, {"sha": "5f5014d6d4690d9d8beede4b7f168145c95104d4", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n }\n \n pub struct CfgSimplifier<'a, 'tcx> {\n-    basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+    body: &'a mut Body<'tcx>,\n     pred_count: IndexVec<BasicBlock, u32>\n }\n \n@@ -76,21 +76,23 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         pred_count[START_BLOCK] = 1;\n \n         for (_, data) in traversal::preorder(body) {\n-            if let Some(ref term) = data.terminator {\n+            if let Some(ref term) = data.terminator_opt() {\n                 for &tgt in term.successors() {\n                     pred_count[tgt] += 1;\n                 }\n             }\n         }\n \n-        let basic_blocks = body.basic_blocks_mut();\n-\n         CfgSimplifier {\n-            basic_blocks,\n+            body,\n             pred_count,\n         }\n     }\n \n+    fn basic_blocks(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n+        self.body.basic_blocks_mut()\n+    }\n+\n     pub fn simplify(mut self) {\n         self.strip_nops();\n \n@@ -101,14 +103,14 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n             self.collapse_goto_chain(&mut start, &mut changed);\n \n-            for bb in self.basic_blocks.indices() {\n+            for bb in self.body.basic_blocks().indices() {\n                 if self.pred_count[bb] == 0 {\n                     continue\n                 }\n \n                 debug!(\"simplifying {:?}\", bb);\n \n-                let mut terminator = self.basic_blocks[bb].terminator.take()\n+                let mut terminator = self.body.basic_block_terminator_opt_mut(bb).take()\n                     .expect(\"invalid terminator state\");\n \n                 for successor in terminator.successors_mut() {\n@@ -123,9 +125,8 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n                     inner_changed |= self.merge_successor(&mut new_stmts, &mut terminator);\n                     changed |= inner_changed;\n                 }\n-\n-                self.basic_blocks[bb].statements.extend(new_stmts);\n-                self.basic_blocks[bb].terminator = Some(terminator);\n+                self.basic_blocks()[bb].statements.extend(new_stmts);\n+                *self.body.basic_block_terminator_opt_mut(bb) = Some(terminator);\n \n                 changed |= inner_changed;\n             }\n@@ -135,17 +136,17 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n         if start != START_BLOCK {\n             debug_assert!(self.pred_count[START_BLOCK] == 0);\n-            self.basic_blocks.swap(START_BLOCK, start);\n+            self.basic_blocks().swap(START_BLOCK, start);\n             self.pred_count.swap(START_BLOCK, start);\n \n             // pred_count == 1 if the start block has no predecessor _blocks_.\n             if self.pred_count[START_BLOCK] > 1 {\n-                for (bb, data) in self.basic_blocks.iter_enumerated_mut() {\n+                for bb in self.basic_blocks().indices() {\n                     if self.pred_count[bb] == 0 {\n                         continue;\n                     }\n \n-                    for target in data.terminator_mut().successors_mut() {\n+                    for target in self.body.basic_block_terminator_mut(bb).successors_mut() {\n                         if *target == start {\n                             *target = START_BLOCK;\n                         }\n@@ -157,7 +158,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n     // Collapse a goto chain starting from `start`\n     fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {\n-        let mut terminator = match self.basic_blocks[*start] {\n+        let mut terminator = match self.basic_blocks()[*start] {\n             BasicBlockData {\n                 ref statements,\n                 terminator: ref mut terminator @ Some(Terminator {\n@@ -176,7 +177,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n             }\n             _ => unreachable!()\n         };\n-        self.basic_blocks[*start].terminator = terminator;\n+        self.basic_blocks()[*start].terminator = terminator;\n \n         debug!(\"collapsing goto chain from {:?} to {:?}\", *start, target);\n \n@@ -208,15 +209,15 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         };\n \n         debug!(\"merging block {:?} into {:?}\", target, terminator);\n-        *terminator = match self.basic_blocks[target].terminator.take() {\n+        *terminator = match self.body.basic_block_terminator_opt_mut(target).take() {\n             Some(terminator) => terminator,\n             None => {\n                 // unreachable loop - this should not be possible, as we\n                 // don't strand blocks, but handle it correctly.\n                 return false\n             }\n         };\n-        new_stmts.extend(self.basic_blocks[target].statements.drain(..));\n+        new_stmts.extend(self.basic_blocks()[target].statements.drain(..));\n         self.pred_count[target] = 0;\n \n         true\n@@ -249,7 +250,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n \n     fn strip_nops(&mut self) {\n-        for blk in self.basic_blocks.iter_mut() {\n+        for blk in self.basic_blocks().iter_mut() {\n             blk.statements.retain(|stmt| if let StatementKind::Nop = stmt.kind {\n                 false\n             } else {\n@@ -265,24 +266,27 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n         seen.insert(bb.index());\n     }\n \n-    let basic_blocks = body.basic_blocks_mut();\n-\n-    let num_blocks = basic_blocks.len();\n-    let mut replacements : Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();\n-    let mut used_blocks = 0;\n-    for alive_index in seen.iter() {\n-        replacements[alive_index] = BasicBlock::new(used_blocks);\n-        if alive_index != used_blocks {\n-            // Swap the next alive block data with the current available slot. Since alive_index is\n-            // non-decreasing this is a valid operation.\n-            basic_blocks.raw.swap(alive_index, used_blocks);\n+    let mut replacements: Vec<BasicBlock>;\n+    {\n+        let basic_blocks = body.basic_blocks_mut();\n+\n+        let num_blocks = basic_blocks.len();\n+        replacements = (0..num_blocks).map(BasicBlock::new).collect();\n+        let mut used_blocks = 0;\n+        for alive_index in seen.iter() {\n+            replacements[alive_index] = BasicBlock::new(used_blocks);\n+            if alive_index != used_blocks {\n+                // Swap the next alive block data with the current available slot. Since alive_index is\n+                // non-decreasing this is a valid operation.\n+                basic_blocks.raw.swap(alive_index, used_blocks);\n+            }\n+            used_blocks += 1;\n         }\n-        used_blocks += 1;\n+        basic_blocks.raw.truncate(used_blocks);\n     }\n-    basic_blocks.raw.truncate(used_blocks);\n \n-    for block in basic_blocks {\n-        for target in block.terminator_mut().successors_mut() {\n+    for bb in body.basic_blocks().indices() {\n+        for target in body.basic_block_terminator_mut(bb).successors_mut() {\n             *target = replacements[target.index()];\n         }\n     }"}, {"sha": "1e45ad5d428cf2ebf6cd92f39ab4ef7d93b552b4", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -21,8 +21,8 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n-        for block in body.basic_blocks_mut() {\n-            let terminator = block.terminator_mut();\n+        for bb in body.basic_blocks().indices() {\n+            let terminator = body.basic_block_terminator_mut(bb);\n             terminator.kind = match terminator.kind {\n                 TerminatorKind::SwitchInt {\n                     discr: Operand::Constant(ref c), switch_ty, ref values, ref targets, .."}, {"sha": "554ae2d3c6b685ad7c5c66412769b927d6193e26", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d9f8c4bc7aceb80dd06803d709b830a68b21/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=f534d9f8c4bc7aceb80dd06803d709b830a68b21", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> MirPatch<'tcx> {\n         for (src, patch) in self.patch_map.into_iter_enumerated() {\n             if let Some(patch) = patch {\n                 debug!(\"MirPatch: patching block {:?}\", src);\n-                body[src].terminator_mut().kind = patch;\n+                body.basic_block_terminator_mut(src).kind = patch;\n             }\n         }\n "}]}