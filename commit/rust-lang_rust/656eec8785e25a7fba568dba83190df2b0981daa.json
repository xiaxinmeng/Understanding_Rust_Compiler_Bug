{"sha": "656eec8785e25a7fba568dba83190df2b0981daa", "node_id": "C_kwDOAAsO6NoAKDY1NmVlYzg3ODVlMjVhN2ZiYTU2OGRiYTgzMTkwZGYyYjA5ODFkYWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T04:16:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T04:16:03Z"}, "message": "Auto merge of #97391 - Urgau:cfg_accessible, r=petrochenkov\n\nHandle more cases in cfg_accessible\n\nThis PR tries to handle more cases in the cfg_accessible implementation by only emitting a \"not sure\" error only if we have partially resolved a path.\n\nThis PR also adds many tests for the \"not sure\" cases and for private items.\n\nr? `@petrochenkov`", "tree": {"sha": "8d66b368d4c247998bbe98c9dcb2887d331efb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d66b368d4c247998bbe98c9dcb2887d331efb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656eec8785e25a7fba568dba83190df2b0981daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656eec8785e25a7fba568dba83190df2b0981daa", "html_url": "https://github.com/rust-lang/rust/commit/656eec8785e25a7fba568dba83190df2b0981daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656eec8785e25a7fba568dba83190df2b0981daa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dadfc06fe628d7a381a52b07714a7a849a6223d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dadfc06fe628d7a381a52b07714a7a849a6223d", "html_url": "https://github.com/rust-lang/rust/commit/6dadfc06fe628d7a381a52b07714a7a849a6223d"}, {"sha": "b76d1125d4f1596e4c4481064fa6342990f1a985", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76d1125d4f1596e4c4481064fa6342990f1a985", "html_url": "https://github.com/rust-lang/rust/commit/b76d1125d4f1596e4c4481064fa6342990f1a985"}], "stats": {"total": 494, "additions": 445, "deletions": 49}, "files": [{"sha": "2e2d3674560e8d380063b5d17acb8290ec53f9ba", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -443,11 +443,22 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 PathResult::NonModule(partial_res) if partial_res.unresolved_segments() == 0 => {\n                     return Ok(true);\n                 }\n+                PathResult::NonModule(..) |\n+                // HACK(Urgau): This shouldn't be necessary\n+                PathResult::Failed { is_error_from_last_segment: false, .. } => {\n+                    self.session\n+                        .struct_span_err(span, \"not sure whether the path is accessible or not\")\n+                        .note(\"the type may have associated items, but we are currently not checking them\")\n+                        .emit();\n+\n+                    // If we get a partially resolved NonModule in one namespace, we should get the\n+                    // same result in any other namespaces, so we can return early.\n+                    return Ok(false);\n+                }\n                 PathResult::Indeterminate => indeterminate = true,\n-                // FIXME: `resolve_path` is not ready to report partially resolved paths\n-                // correctly, so we just report an error if the path was reported as unresolved.\n-                // This needs to be fixed for `cfg_accessible` to be useful.\n-                PathResult::NonModule(..) | PathResult::Failed { .. } => {}\n+                // We can only be sure that a path doesn't exist after having tested all the\n+                // posibilities, only at that time we can return false.\n+                PathResult::Failed { .. } => {}\n                 PathResult::Module(_) => panic!(\"unexpected path resolution\"),\n             }\n         }\n@@ -456,10 +467,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             return Err(Indeterminate);\n         }\n \n-        self.session\n-            .struct_span_err(span, \"not sure whether the path is accessible or not\")\n-            .span_note(span, \"`cfg_accessible` is not fully implemented\")\n-            .emit();\n         Ok(false)\n     }\n "}, {"sha": "ae18bc55c4f2d0f91a096f6b59563d75080fbd67", "filename": "src/test/ui/conditional-compilation/cfg_accessible-bugs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.rs?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,18 @@\n+// This test is a collection of test that should pass.\n+//\n+// check-fail\n+\n+#![feature(cfg_accessible)]\n+#![feature(trait_alias)]\n+\n+trait TraitAlias = std::fmt::Debug + Send;\n+\n+// FIXME: Currently shows \"cannot determine\" but should be `false`\n+#[cfg_accessible(unresolved)] //~ ERROR cannot determine\n+const C: bool = true;\n+\n+// FIXME: Currently shows \"not sure\" but should be `false`\n+#[cfg_accessible(TraitAlias::unresolved)] //~ ERROR not sure whether the path is accessible or not\n+const D: bool = true;\n+\n+fn main() {}"}, {"sha": "81f02387835d6b47b5d5e3125def4d0c8f8a5d00", "filename": "src/test/ui/conditional-compilation/cfg_accessible-bugs.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-bugs.stderr?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,16 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-bugs.rs:15:18\n+   |\n+LL | #[cfg_accessible(TraitAlias::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: cannot determine whether the path is accessible or not\n+  --> $DIR/cfg_accessible-bugs.rs:11:1\n+   |\n+LL | #[cfg_accessible(unresolved)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7d5dd58902753253e77be28eb77d399aa7168b58", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.edition2015.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,122 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:14:18\n+   |\n+LL | #[cfg_accessible(Struct::existing)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:16:18\n+   |\n+LL | #[cfg_accessible(Struct::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:25:18\n+   |\n+LL | #[cfg_accessible(Union::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:27:18\n+   |\n+LL | #[cfg_accessible(Union::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:36:18\n+   |\n+LL | #[cfg_accessible(Enum::Existing::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:38:18\n+   |\n+LL | #[cfg_accessible(Enum::Existing::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:40:18\n+   |\n+LL | #[cfg_accessible(Enum::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:50:18\n+   |\n+LL | #[cfg_accessible(Trait::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:52:18\n+   |\n+LL | #[cfg_accessible(Trait::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:59:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:61:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:70:18\n+   |\n+LL | #[cfg_accessible(ForeignType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:79:18\n+   |\n+LL | #[cfg_accessible(AssocType::AssocType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:84:18\n+   |\n+LL | #[cfg_accessible(u8::unresolved)]\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:86:18\n+   |\n+LL | #[cfg_accessible(u8::is_ascii)]\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "7d5dd58902753253e77be28eb77d399aa7168b58", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.edition2021.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,122 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:14:18\n+   |\n+LL | #[cfg_accessible(Struct::existing)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:16:18\n+   |\n+LL | #[cfg_accessible(Struct::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:25:18\n+   |\n+LL | #[cfg_accessible(Union::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:27:18\n+   |\n+LL | #[cfg_accessible(Union::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:36:18\n+   |\n+LL | #[cfg_accessible(Enum::Existing::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:38:18\n+   |\n+LL | #[cfg_accessible(Enum::Existing::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:40:18\n+   |\n+LL | #[cfg_accessible(Enum::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:50:18\n+   |\n+LL | #[cfg_accessible(Trait::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:52:18\n+   |\n+LL | #[cfg_accessible(Trait::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:59:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:61:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:70:18\n+   |\n+LL | #[cfg_accessible(ForeignType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:79:18\n+   |\n+LL | #[cfg_accessible(AssocType::AssocType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:84:18\n+   |\n+LL | #[cfg_accessible(u8::unresolved)]\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:86:18\n+   |\n+LL | #[cfg_accessible(u8::is_ascii)]\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "d68acd2451fba05bf88b2ff480371af504a196e7", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,89 @@\n+// revisions: edition2015 edition2021\n+// [edition2015]compile-flags: --edition=2015\n+// [edition2021]compile-flags: --edition=2021\n+\n+#![feature(extern_types)]\n+#![feature(cfg_accessible)]\n+\n+// Struct::unresolved - error\n+\n+struct Struct {\n+    existing: u8,\n+}\n+\n+#[cfg_accessible(Struct::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Struct::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// Union::unresolved - error\n+\n+struct Union {\n+    existing: u8,\n+}\n+\n+#[cfg_accessible(Union::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Union::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// Enum::unresolved - error\n+\n+enum Enum {\n+    Existing { existing: u8 },\n+}\n+\n+#[cfg_accessible(Enum::Existing::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Enum::Existing::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+#[cfg_accessible(Enum::unresolved)] //~ ERROR not sure\n+const C: bool = true;\n+\n+// Trait::unresolved - false or error, depending on edition (error if you can write Trait::foo\n+// instead of <dyn Trait>::foo for methods like impl dyn Trait { fn foo() {} })\n+\n+trait Trait {}\n+impl dyn Trait { fn existing() {} }\n+\n+// FIXME: Should be a error for edition > 2015\n+#[cfg_accessible(Trait::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Trait::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// TypeAlias::unresolved - error\n+\n+type TypeAlias = Struct;\n+\n+#[cfg_accessible(TypeAlias::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(TypeAlias::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// ForeignType::unresolved - error\n+\n+extern {\n+    type ForeignType;\n+}\n+\n+#[cfg_accessible(ForeignType::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+\n+// AssocType::unresolved - error\n+\n+trait AssocType {\n+    type AssocType;\n+}\n+\n+#[cfg_accessible(AssocType::AssocType::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+\n+// PrimitiveType::unresolved - error\n+\n+#[cfg_accessible(u8::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(u8::is_ascii)] //~ ERROR not sure\n+const B: bool = true;\n+\n+fn main() {}"}, {"sha": "5b095675c79864b5081b6029ac539bc8ccaeae66", "filename": "src/test/ui/conditional-compilation/cfg_accessible-private.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-private.rs?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(cfg_accessible)]\n+\n+mod private {\n+    struct Struct;\n+    enum Enum{}\n+    union Union{_a:u8}\n+}\n+\n+#[cfg_accessible(private::Struct)]\n+const A: bool = true;\n+\n+#[cfg_accessible(private::Enum)]\n+const A: bool = true;\n+\n+#[cfg_accessible(private::Union)]\n+const A: bool = true;\n+\n+const A: bool = false; // Will conflict if any of those is accessible\n+fn main() {}"}, {"sha": "df380d0d16f14ea3418bc664b96b26d384ddc667", "filename": "src/test/ui/conditional-compilation/cfg_accessible.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -5,20 +5,35 @@ mod m {\n     struct ExistingPrivate;\n }\n \n+trait Trait {\n+    type Assoc;\n+}\n+\n+enum Enum {\n+    Existing,\n+}\n+\n+#[cfg_accessible(Enum)]\n+struct ExistingResolved;\n+\n+#[cfg_accessible(Enum::Existing)]\n+struct ExistingResolvedVariant;\n+\n #[cfg_accessible(m::ExistingPublic)]\n struct ExistingPublic;\n \n-// FIXME: Not implemented yet.\n-#[cfg_accessible(m::ExistingPrivate)] //~ ERROR not sure whether the path is accessible or not\n+#[cfg_accessible(m::ExistingPrivate)]\n struct ExistingPrivate;\n \n-// FIXME: Not implemented yet.\n-#[cfg_accessible(m::NonExistent)] //~ ERROR not sure whether the path is accessible or not\n-struct ExistingPrivate;\n+#[cfg_accessible(m::NonExistent)]\n+struct NonExistingPrivate;\n \n #[cfg_accessible(n::AccessibleExpanded)] // OK, `cfg_accessible` can wait and retry.\n struct AccessibleExpanded;\n \n+#[cfg_accessible(Trait::Assoc)]\n+struct AccessibleTraitAssoc;\n+\n macro_rules! generate_accessible_expanded {\n     () => {\n         mod n {\n@@ -29,15 +44,12 @@ macro_rules! generate_accessible_expanded {\n \n generate_accessible_expanded!();\n \n-struct S {\n-    field: u8,\n-}\n-\n-// FIXME: Not implemented yet.\n-#[cfg_accessible(S::field)] //~ ERROR not sure whether the path is accessible or not\n-struct Field;\n-\n fn main() {\n     ExistingPublic;\n     AccessibleExpanded;\n+    AccessibleTraitAssoc;\n+\n+    ExistingPrivate; //~ ERROR cannot find\n+    NonExistingPrivate; //~ ERROR cannot find\n+    NonExistingTraitAlias; //~ ERROR cannot find\n }"}, {"sha": "e3731a1ad7128e9db68641811942c925ddb67e7d", "filename": "src/test/ui/conditional-compilation/cfg_accessible.stderr", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/656eec8785e25a7fba568dba83190df2b0981daa/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr?ref=656eec8785e25a7fba568dba83190df2b0981daa", "patch": "@@ -1,38 +1,27 @@\n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:12:18\n+error[E0425]: cannot find value `ExistingPrivate` in this scope\n+  --> $DIR/cfg_accessible.rs:52:5\n    |\n-LL | #[cfg_accessible(m::ExistingPrivate)]\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL |     ExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^ not found in this scope\n    |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:12:18\n+note: unit struct `m::ExistingPrivate` exists but is inaccessible\n+  --> $DIR/cfg_accessible.rs:5:5\n    |\n-LL | #[cfg_accessible(m::ExistingPrivate)]\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL |     struct ExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ not accessible\n \n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:16:18\n+error[E0425]: cannot find value `NonExistingPrivate` in this scope\n+  --> $DIR/cfg_accessible.rs:53:5\n    |\n-LL | #[cfg_accessible(m::NonExistent)]\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:16:18\n-   |\n-LL | #[cfg_accessible(m::NonExistent)]\n-   |                  ^^^^^^^^^^^^^^\n+LL |     NonExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n \n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:37:18\n-   |\n-LL | #[cfg_accessible(S::field)]\n-   |                  ^^^^^^^^\n-   |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:37:18\n+error[E0425]: cannot find value `NonExistingTraitAlias` in this scope\n+  --> $DIR/cfg_accessible.rs:54:5\n    |\n-LL | #[cfg_accessible(S::field)]\n-   |                  ^^^^^^^^\n+LL |     NonExistingTraitAlias;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}]}