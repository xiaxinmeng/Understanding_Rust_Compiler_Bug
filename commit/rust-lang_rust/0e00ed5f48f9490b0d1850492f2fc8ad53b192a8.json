{"sha": "0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "node_id": "C_kwDOAAsO6NoAKDBlMDBlZDVmNDhmOTQ5MGIwZDE4NTA0OTJmMmZjOGFkNTNiMTkyYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-09T16:45:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-09T16:45:39Z"}, "message": "Rollup merge of #96854 - jackh726:subst-cleanup, r=compiler-errors\n\nSome subst cleanup\n\nTwo separate things here. Both changes are useful for some refactoring I'm doing to add an \"EarlyBinder\" newtype. (Part of chalkification).\n\n1) Remove `subst_spanned` and just use `subst`. It wasn't used much anyways. In practice, I think we can probably get most of the info just from the actual error message. If not, outputting logs should do the trick. (The specific line probably wouldn't help much anyways).\n\n2) Call `.subst()` before `replace_bound_vars_with_fresh_vars` and `erase_late_bound_regions` in three places that do the opposite. I think there might have been some time in the past that the order here matter for something, but this shouldn't be the case anymore. Conceptually, it makes more sense to the of the *early bound* vars on `fn`s as \"outside\" the late bound vars.", "tree": {"sha": "e4e56878db171adb84d9729a12667f45221c55ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e56878db171adb84d9729a12667f45221c55ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJieUUzCRBK7hj4Ov3rIwAAVhsIAKAQyYQuJgPeUFO5P7a7C5Et\nCa5YuEGROJDIE8mXuHyHpMNmDSPdg0SEEnsLiqnc2M15PZ2xtQ5Wep0QZzTE8vJV\nptSWBApw9vb8ib1u6hZjWiiw7+RdmUYwoco04bM5SwdQdyrbZxgzYmaPHu/0PRsx\najbEfpH6A89Vj2/ih8iy5Uc/QqEsRcouhnTaWSFbWPBOcPlUIy/hly3gft2eDOKV\nT4m6CUi/srQi1S/1kdcRreVrE4kh+yITCpvFOT6KFwNBWzD6N1YHOk+Kzx7jmb/o\n3ggVckcO86tgIVkL8NUn20UACW9whjRo93OCSZ9njEGYgZt49WAhhaQXNaMjYow=\n=8Bgr\n-----END PGP SIGNATURE-----\n", "payload": "tree e4e56878db171adb84d9729a12667f45221c55ed\nparent 84a8f8dedf0b16561c1f0992f8d251185c4409f9\nparent 657499df644c15546c3c9fd0635d4886d47e6cdf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652114739 +0200\ncommitter GitHub <noreply@github.com> 1652114739 +0200\n\nRollup merge of #96854 - jackh726:subst-cleanup, r=compiler-errors\n\nSome subst cleanup\n\nTwo separate things here. Both changes are useful for some refactoring I'm doing to add an \"EarlyBinder\" newtype. (Part of chalkification).\n\n1) Remove `subst_spanned` and just use `subst`. It wasn't used much anyways. In practice, I think we can probably get most of the info just from the actual error message. If not, outputting logs should do the trick. (The specific line probably wouldn't help much anyways).\n\n2) Call `.subst()` before `replace_bound_vars_with_fresh_vars` and `erase_late_bound_regions` in three places that do the opposite. I think there might have been some time in the past that the order here matter for something, but this shouldn't be the case anymore. Conceptually, it makes more sense to the of the *early bound* vars on `fn`s as \"outside\" the late bound vars.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "html_url": "https://github.com/rust-lang/rust/commit/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a8f8dedf0b16561c1f0992f8d251185c4409f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a8f8dedf0b16561c1f0992f8d251185c4409f9", "html_url": "https://github.com/rust-lang/rust/commit/84a8f8dedf0b16561c1f0992f8d251185c4409f9"}, {"sha": "657499df644c15546c3c9fd0635d4886d47e6cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/657499df644c15546c3c9fd0635d4886d47e6cdf", "html_url": "https://github.com/rust-lang/rust/commit/657499df644c15546c3c9fd0635d4886d47e6cdf"}], "stats": {"total": 99, "additions": 26, "deletions": 73}, "files": [{"sha": "5b1fb70872988c0787dc2bfe4d49ab0167c65969", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n use smallvec::SmallVec;\n \n use core::intrinsics;\n@@ -498,34 +498,14 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Public trait `Subst`\n-//\n-// Just call `foo.subst(tcx, substs)` to perform a substitution across\n-// `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when\n-// there is more information available (for better errors).\n-\n+// Just call `foo.subst(tcx, substs)` to perform a substitution across `foo`.\n pub trait Subst<'tcx>: Sized {\n-    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self {\n-        self.subst_spanned(tcx, substs, None)\n-    }\n-\n-    fn subst_spanned(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        substs: &[GenericArg<'tcx>],\n-        span: Option<Span>,\n-    ) -> Self;\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self;\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {\n-    fn subst_spanned(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        substs: &[GenericArg<'tcx>],\n-        span: Option<Span>,\n-    ) -> T {\n-        let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> T {\n+        let mut folder = SubstFolder { tcx, substs, binders_passed: 0 };\n         self.fold_with(&mut folder)\n     }\n }\n@@ -537,9 +517,6 @@ struct SubstFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     substs: &'a [GenericArg<'tcx>],\n \n-    /// The location for which the substitution is performed, if available.\n-    span: Option<Span>,\n-\n     /// Number of region binders we have passed through while doing the substitution\n     binders_passed: u32,\n }\n@@ -571,13 +548,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 match rk {\n                     Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),\n                     _ => {\n-                        let span = self.span.unwrap_or(DUMMY_SP);\n                         let msg = format!(\n                             \"Region parameter out of range \\\n                              when substituting in region {} (index={})\",\n                             data.name, data.index\n                         );\n-                        span_bug!(span, \"{}\", msg);\n+                        span_bug!(DUMMY_SP, \"{}\", msg);\n                     }\n                 }\n             }\n@@ -617,9 +593,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         let ty = match opt_ty {\n             Some(GenericArgKind::Type(ty)) => ty,\n             Some(kind) => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting, substs={:?}\",\n                     p,\n@@ -630,9 +605,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 );\n             }\n             None => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"type parameter `{:?}` ({:?}/{}) out of range \\\n                      when substituting, substs={:?}\",\n                     p,\n@@ -652,9 +626,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         let ct = match opt_ct {\n             Some(GenericArgKind::Const(ct)) => ct,\n             Some(kind) => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"expected const for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting substs={:?}\",\n                     p,\n@@ -665,9 +638,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 );\n             }\n             None => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"const parameter `{:?}` ({:?}/{}) out of range \\\n                      when substituting substs={:?}\",\n                     p,"}, {"sha": "3c1676b1aac67909f1c0c043abcd229ca4e34f83", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -523,11 +523,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 self.astconv\n                                     .normalize_ty(\n                                         self.span,\n-                                        tcx.at(self.span).type_of(param.def_id).subst_spanned(\n-                                            tcx,\n-                                            substs,\n-                                            Some(self.span),\n-                                        ),\n+                                        tcx.at(self.span).type_of(param.def_id).subst(tcx, substs),\n                                     )\n                                     .into()\n                             }\n@@ -547,9 +543,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id)\n-                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "d824c1d7cf252a6b2da48ff43a9165876817b89d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -1403,10 +1403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // is missing.\n                             let default = tcx.type_of(param.def_id);\n                             self.fcx\n-                                .normalize_ty(\n-                                    self.span,\n-                                    default.subst_spanned(tcx, substs.unwrap(), Some(self.span)),\n-                                )\n+                                .normalize_ty(self.span, default.subst(tcx, substs.unwrap()))\n                                 .into()\n                         } else {\n                             // If no type arguments were provided, we have to infer them.\n@@ -1418,9 +1415,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id)\n-                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "1b619776b857c3f4e0208d776d322c0d7d02b8b4", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -462,19 +462,13 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         let sig = self.tcx.fn_sig(def_id);\n \n-        // Instantiate late-bound regions and substitute the trait\n-        // parameters into the method type to get the actual method type.\n-        //\n-        // N.B., instantiate late-bound regions first so that\n-        // `instantiate_type_scheme` can normalize associated types that\n-        // may reference those regions.\n-        let method_sig = self.replace_bound_vars_with_fresh_vars(sig);\n-        debug!(\"late-bound lifetimes from method instantiated, method_sig={:?}\", method_sig);\n+        let sig = sig.subst(self.tcx, all_substs);\n+        debug!(\"type scheme substituted, sig={:?}\", sig);\n \n-        let method_sig = method_sig.subst(self.tcx, all_substs);\n-        debug!(\"type scheme substituted, method_sig={:?}\", method_sig);\n+        let sig = self.replace_bound_vars_with_fresh_vars(sig);\n+        debug!(\"late-bound lifetimes from method instantiated, sig={:?}\", sig);\n \n-        (method_sig, method_predicates)\n+        (sig, method_predicates)\n     }\n \n     fn add_obligations("}, {"sha": "1dd5e45fdc174026066730f9671bb4246dc4f00a", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -461,8 +461,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n         let fn_sig = tcx.fn_sig(def_id);\n-        let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig).0;\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n+        let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig).0;\n \n         let InferOk { value, obligations: o } = if is_op {\n             self.normalize_op_associated_types_in_as_infer_ok(span, fn_sig, opt_input_expr)"}, {"sha": "c28ab9fa1ee40cfae6c0292a68fcf5661dd67bd2", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e00ed5f48f9490b0d1850492f2fc8ad53b192a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=0e00ed5f48f9490b0d1850492f2fc8ad53b192a8", "patch": "@@ -1784,12 +1784,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let generics = self.tcx.generics_of(method);\n         assert_eq!(substs.len(), generics.parent_count as usize);\n \n-        // Erase any late-bound regions from the method and substitute\n-        // in the values from the substitution.\n-        let xform_fn_sig = self.erase_late_bound_regions(fn_sig);\n-\n-        if generics.params.is_empty() {\n-            xform_fn_sig.subst(self.tcx, substs)\n+        let xform_fn_sig = if generics.params.is_empty() {\n+            fn_sig.subst(self.tcx, substs)\n         } else {\n             let substs = InternalSubsts::for_item(self.tcx, method, |param, _| {\n                 let i = param.index as usize;\n@@ -1807,8 +1803,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     }\n                 }\n             });\n-            xform_fn_sig.subst(self.tcx, substs)\n-        }\n+            fn_sig.subst(self.tcx, substs)\n+        };\n+\n+        self.erase_late_bound_regions(xform_fn_sig)\n     }\n \n     /// Gets the type of an impl and generate substitutions with placeholders."}]}