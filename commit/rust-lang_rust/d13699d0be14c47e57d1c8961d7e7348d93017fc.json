{"sha": "d13699d0be14c47e57d1c8961d7e7348d93017fc", "node_id": "C_kwDOAAsO6NoAKGQxMzY5OWQwYmUxNGM0N2U1N2QxYzg5NjFkN2U3MzQ4ZDkzMDE3ZmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T17:04:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-22T13:14:33Z"}, "message": "update and extend some comments, and cfg-out some unused code", "tree": {"sha": "d16ff68b29791243c5f2e76d6f6524335d35640e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16ff68b29791243c5f2e76d6f6524335d35640e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13699d0be14c47e57d1c8961d7e7348d93017fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13699d0be14c47e57d1c8961d7e7348d93017fc", "html_url": "https://github.com/rust-lang/rust/commit/d13699d0be14c47e57d1c8961d7e7348d93017fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13699d0be14c47e57d1c8961d7e7348d93017fc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138375a74c6ae9124e24744913e5211204c0e3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/138375a74c6ae9124e24744913e5211204c0e3df", "html_url": "https://github.com/rust-lang/rust/commit/138375a74c6ae9124e24744913e5211204c0e3df"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "032bf604d73889de6aac6fa8418f63c37fb40c2d", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=d13699d0be14c47e57d1c8961d7e7348d93017fc", "patch": "@@ -69,8 +69,10 @@ use crate::sys_common::mutex::StaticMutex;\n /// ```ignore (cannot-doctest-private-modules)\n /// use tls::os::{StaticKey, INIT};\n ///\n+/// // Use a regular global static to store the key.\n /// static KEY: StaticKey = INIT;\n ///\n+/// // The state provided via `get` and `set` is thread-local.\n /// unsafe {\n ///     assert!(KEY.get().is_null());\n ///     KEY.set(1 as *mut u8);"}, {"sha": "8aedfc4a6b81973108578cee9a54da9f9a8fe889", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=d13699d0be14c47e57d1c8961d7e7348d93017fc", "patch": "@@ -1036,6 +1036,7 @@ pub mod fast {\n }\n \n #[doc(hidden)]\n+#[cfg(not(target_thread_local))]\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n@@ -1044,6 +1045,8 @@ pub mod os {\n     use crate::ptr;\n     use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n \n+    /// Use a regular global static to store this key; the state provided will then be\n+    /// thread-local.\n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off.\n         os: OsStaticKey,"}, {"sha": "a17185b6f707545551578758fc1216ca5f5be016", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13699d0be14c47e57d1c8961d7e7348d93017fc/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=d13699d0be14c47e57d1c8961d7e7348d93017fc", "patch": "@@ -192,14 +192,12 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-// The types used by the thread_local! macro to access TLS keys. Note that there\n-// are two types, the \"OS\" type and the \"fast\" type. The OS thread local key\n-// type is accessed via platform-specific API calls and is slow, while the fast\n+// Select the type used by the thread_local! macro to access TLS keys. There\n+// are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n+// type is accessed via platform-specific API calls and is slow, while the \"fast\"\n // key type is accessed via code generated via LLVM, where TLS keys are set up\n-// by the elf linker. Note that the OS TLS type is always available: on macOS\n-// the standard library is compiled with support for older platform versions\n-// where fast TLS was not available; end-user code is compiled with fast TLS\n-// where available, but both are needed.\n+// by the elf linker. \"static\" is for single-threaded platforms where a global\n+// static is sufficient.\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(target_thread_local)]\n@@ -210,13 +208,15 @@ pub use self::local::fast::Key as __FastLocalKeyInner;\n #[cfg(target_thread_local)]\n #[cfg(test)] // when building for tests, use real std's key\n pub use realstd::thread::__FastLocalKeyInner;\n+\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(target_thread_local)]\n #[cfg(test)]\n pub use self::local::fast::Key as __FastLocalKeyInnerUnused; // we import this anyway to silence 'unused' warnings\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[doc(hidden)]\n+#[cfg(not(target_thread_local))]\n pub use self::local::os::Key as __OsLocalKeyInner;\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]"}]}