{"sha": "b961a03060aaac336269eb1703391a32f4de9dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjFhMDMwNjBhYWFjMzM2MjY5ZWIxNzAzMzkxYTMyZjRkZTlkZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-29T13:03:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-29T13:03:25Z"}, "message": "transmute: improve Vec example", "tree": {"sha": "263e18a258af7c552a980ecb13c61543f1c5e78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263e18a258af7c552a980ecb13c61543f1c5e78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b961a03060aaac336269eb1703391a32f4de9dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b961a03060aaac336269eb1703391a32f4de9dfd", "html_url": "https://github.com/rust-lang/rust/commit/b961a03060aaac336269eb1703391a32f4de9dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b961a03060aaac336269eb1703391a32f4de9dfd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4", "html_url": "https://github.com/rust-lang/rust/commit/04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "7f4d52a87b09e847a3c9439bed3f6c60d69c1869", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b961a03060aaac336269eb1703391a32f4de9dfd/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b961a03060aaac336269eb1703391a32f4de9dfd/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b961a03060aaac336269eb1703391a32f4de9dfd", "patch": "@@ -881,7 +881,8 @@ extern \"rust-intrinsic\" {\n     /// // clone the vector as we will reuse them later\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // Using transmute: this is Undefined Behavior, and a bad idea.\n+    /// // Using transmute: this relies on the unspecified data layout of `Vec`, which is a\n+    /// // bad idea and could cause Undefined Behavior\n     /// // However, it is no-copy.\n     /// let v_transmuted = unsafe {\n     ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n@@ -897,13 +898,14 @@ extern \"rust-intrinsic\" {\n     ///\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // The no-copy, unsafe way, still using transmute, but not UB.\n-    /// // This is equivalent to the original, but safer, and reuses the\n-    /// // same `Vec` internals. Therefore, the new inner type must have the\n-    /// // exact same size, and the same alignment, as the old type.\n+    /// // The no-copy, unsafe way, still using transmute, but not relying on the data layout.\n+    /// // Like the first approach, this reuses the `Vec` internals.\n+    /// // Therefore, the new inner type must have the\n+    /// // exact same size, *and the same alignment*, as the old type.\n     /// // The same caveats exist for this method as transmute, for\n     /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon pages linked above.\n+    /// // (`Option<&i32>`), so read the nomicon pages linked above and also\n+    /// // consult the [`from_raw_parts`] documentation.\n     /// let v_from_raw = unsafe {\n     // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped.\n@@ -914,6 +916,8 @@ extern \"rust-intrinsic\" {\n     /// };\n     /// ```\n     ///\n+    /// [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts\n+    ///\n     /// Implementing `split_at_mut`:\n     ///\n     /// ```"}]}