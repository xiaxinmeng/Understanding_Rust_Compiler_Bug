{"sha": "015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNTUyN2IwY2VlMGJjNWNmYWFjOGRkNjEwMDM1YTBjMWIyZjhlYTY=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-07T00:58:15Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-16T02:00:58Z"}, "message": "Moved arc to libstd and added an arc that allows shared mutable state through mutual exclusion.", "tree": {"sha": "932df0f1c4db1709b69594861bdbb0bb5140e18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932df0f1c4db1709b69594861bdbb0bb5140e18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "html_url": "https://github.com/rust-lang/rust/commit/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e394ebda37bf6bbe4c516e2b9381aac8bd964dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e394ebda37bf6bbe4c516e2b9381aac8bd964dcc", "html_url": "https://github.com/rust-lang/rust/commit/e394ebda37bf6bbe4c516e2b9381aac8bd964dcc"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "312606be906a06a85a36e463c7baaedcf60b4921", "filename": "src/libcore/arc.rs", "status": "renamed", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -2,9 +2,12 @@\n share immutable data between tasks.\"]\n \n import comm::{port, chan, methods};\n+import sys::methods;\n \n export arc, get, clone, shared_arc, get_arc;\n \n+export exclusive, methods;\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n     #[rust_stack]\n@@ -16,12 +19,12 @@ native mod rustrt {\n         -> libc::intptr_t;\n }\n \n-type arc_data<T: const> = {\n+type arc_data<T> = {\n     mut count: libc::intptr_t,\n     data: T\n };\n \n-resource arc_destruct<T: const>(data: *libc::c_void) {\n+resource arc_destruct<T>(data: *libc::c_void) {\n     unsafe {\n         let data: ~arc_data<T> = unsafe::reinterpret_cast(data);\n         let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n@@ -71,6 +74,43 @@ fn clone<T: const>(rc: &arc<T>) -> arc<T> {\n     arc_destruct(**rc)\n }\n \n+// An arc over mutable data that is protected by a lock.\n+type ex_data<T> = {lock: sys::lock_and_signal, data: T};\n+type exclusive<T> = arc_destruct<ex_data<T>>;\n+\n+fn exclusive<T>(-data: T) -> exclusive<T> {\n+    let data = ~{mut count: 1, data: {lock: sys::create_lock(),\n+                                      data: data}};\n+    unsafe {\n+        let ptr = unsafe::reinterpret_cast(data);\n+        unsafe::forget(data);\n+        arc_destruct(ptr)\n+    }\n+}\n+\n+impl methods<T> for exclusive<T> {\n+    fn clone() -> exclusive<T> {\n+        unsafe {\n+            // this makes me nervous...\n+            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n+            rustrt::rust_atomic_increment(&mut ptr.count);\n+            unsafe::forget(ptr);\n+        }\n+        arc_destruct(*self)\n+    }\n+\n+    fn with<U>(f: fn(sys::condition, x: &T) -> U) -> U {\n+        unsafe {\n+            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n+            let rec: &ex_data<T> = &(*ptr).data;\n+            unsafe::forget(ptr);\n+            rec.lock.lock_cond() {|c|\n+                f(c, &rec.data)\n+            }\n+        }\n+    }\n+}\n+\n // Convenience code for sharing arcs between tasks\n \n type get_chan<T: const send> = chan<chan<arc<T>>>;\n@@ -115,6 +155,7 @@ fn get_arc<T: send const>(c: get_chan<T>) -> arc::arc<T> {\n #[cfg(test)]\n mod tests {\n     import comm::*;\n+    import future::future;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -160,4 +201,31 @@ mod tests {\n \n         assert p.recv() == ();\n     }\n+\n+    #[test]\n+    fn exclusive_arc() {\n+        let mut futures = [];\n+\n+        let num_tasks = 10u;\n+        let count = 1000u;\n+\n+        let total = exclusive(~mut 0u);\n+\n+        for uint::range(0u, num_tasks) {|_i|\n+            let total = total.clone();\n+            futures += [future::spawn({||\n+                for uint::range(0u, count) {|_i|\n+                    total.with {|_cond, count|\n+                        **count += 1u;\n+                    }\n+                }\n+            })];\n+        };\n+\n+        for futures.each {|f| f.get() };\n+\n+        total.with {|_cond, total|\n+            assert **total == num_tasks * count\n+        };\n+    }\n }", "previous_filename": "src/libstd/arc.rs"}, {"sha": "913832a7f07afd9f8a4e1cb8863ba3a86907e06f", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -39,7 +39,7 @@ export float, f32, f64;\n export box, char, str, ptr, vec, bool;\n export either, option, result, iter;\n export libc, os, io, run, rand, sys, unsafe, logging;\n-export comm, task, future;\n+export arc, comm, task, future;\n export extfmt;\n export tuple;\n export to_str;\n@@ -175,6 +175,7 @@ mod dvec_iter {\n }\n \n // Concurrency\n+mod arc;\n mod comm;\n mod task;\n mod future;"}, {"sha": "af93009874f07d385a167bce353755e4586f6223", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -7,7 +7,7 @@ export min_align_of;\n export pref_align_of;\n export refcount;\n export log_str;\n-export lock_and_signal, condition, methods;\n+export create_lock, lock_and_signal, condition, methods;\n \n enum type_desc = {\n     first_param: **libc::c_int,\n@@ -126,8 +126,6 @@ impl methods for condition {\n \n #[cfg(test)]\n mod tests {\n-    use std;\n-    import std::arc;\n \n     #[test]\n     fn size_of_basic() {"}, {"sha": "2effb04cd3f7703ec3a0eebd57f02f6f1353154f", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -19,7 +19,7 @@ export net, net_tcp;\n export uv, uv_ll, uv_iotask, uv_global_loop;\n export c_vec, util, timer;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n-export rope, arena, arc, par;\n+export rope, arena, par;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;\n export cmp;\n@@ -69,7 +69,6 @@ mod term;\n mod time;\n mod prettyprint;\n mod arena;\n-mod arc;\n mod par;\n mod cmp;\n "}, {"sha": "e51cb6c98b23f3c3cac023898c27c6e4d7cb1093", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -10,7 +10,6 @@ import std::map;\n import std::map::hashmap;\n import std::deque;\n import std::deque::t;\n-import std::arc;\n import std::par;\n import io::writer_util;\n import comm::*;"}, {"sha": "6c8c80dab0a2d7f868eb4737fdd9970f544544f7", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: copying a noncopyable value\n \n-use std;\n-import std::arc;\n import comm::*;\n \n fn main() {"}, {"sha": "fa88111d27445b51b6094bf50d17124f97e58023", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -1,5 +1,3 @@\n-use std;\n-import std::arc;\n import comm::*;\n \n fn main() {"}, {"sha": "5101de2c46caca7584be739eb92994f42c0ce0f5", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=015527b0cee0bc5cfaac8dd610035a0c1b2f8ea6", "patch": "@@ -1,8 +1,5 @@\n // error-pattern:explicit failure\n \n-use std;\n-import std::arc;\n-\n enum e<T: const> { e(arc::arc<T>) }\n \n fn foo() -> e<int> {fail;}"}]}