{"sha": "bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOWEwYjI5NzQzMTg4ODk5ZWVmNGRkN2RmYjUyNDhkMThlMzJlM2I=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-12-03T00:20:17Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-12T01:23:24Z"}, "message": "Switch to std::error::Error for errors (#3948)", "tree": {"sha": "4fc4a62e8dd2409f760c11a7d2beddf7e4506667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc4a62e8dd2409f760c11a7d2beddf7e4506667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "html_url": "https://github.com/rust-lang/rust/commit/bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28fd5f91c296ea5004c65b02047656a3ad876c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28fd5f91c296ea5004c65b02047656a3ad876c3", "html_url": "https://github.com/rust-lang/rust/commit/b28fd5f91c296ea5004c65b02047656a3ad876c3"}], "stats": {"total": 163, "additions": 93, "deletions": 70}, "files": [{"sha": "1636734872b37ebaef3388339eab31f484c10dce", "filename": "Cargo.lock", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -29,6 +29,11 @@ dependencies = [\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"anyhow\"\n+version = \"1.0.25\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arrayref\"\n version = \"0.3.5\"\n@@ -1044,13 +1049,13 @@ name = \"rustfmt-nightly\"\n version = \"1.4.17\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1072,6 +1077,7 @@ dependencies = [\n  \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"structopt 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thiserror 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1262,6 +1268,24 @@ dependencies = [\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"thiserror\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thiserror-impl 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thiserror-impl\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -1385,6 +1409,7 @@ dependencies = [\n \"checksum annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7021ce4924a3f25f802b2cccd1af585e39ea1a363a1aa2e72afe54b67a3a7a7\"\n \"checksum annotate-snippets 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d78ea013094e5ea606b1c05fe35f1dd7ea1eb1ea259908d040b25bd5ec677ee5\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum anyhow 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9267dff192e68f3399525901e709a48c1d3982c9c072fa32f2127a0cb0babf14\"\n \"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n \"checksum arrayvec 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n@@ -1516,6 +1541,8 @@ dependencies = [\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n+\"checksum thiserror 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cc6b305ec0e323c7b6cfff6098a22516e0063d0bb7c3d88660a890217dca099a\"\n+\"checksum thiserror-impl 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45ba8d810d9c48fc456b7ad54574e8bfb7c7918a57ad7a6e6a0985d7959e8597\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n \"checksum toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7aabe75941d914b72bf3e5d3932ed92ce0664d49d8432305a8b547c37227724\""}, {"sha": "995e3adcb359b9d6af7399f9fb9342be9824db25", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -47,7 +47,6 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.8\"\n-failure = \"0.1.3\"\n bytecount = \"0.6\"\n unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n@@ -57,6 +56,8 @@ annotate-snippets = { version = \"0.6\", features = [\"ansi_term\"] }\n structopt = \"0.3\"\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n lazy_static = \"1.0.0\"\n+anyhow = \"1.0\"\n+thiserror = \"1.0\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "4a62766a85d289ba1e2f2a2af34a07660f8c16cd", "filename": "src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -1,6 +1,7 @@\n+use anyhow::{format_err, Result};\n use env_logger;\n-use failure::{err_msg, format_err, Error as FailureError, Fail};\n use io::Error as IoError;\n+use thiserror::Error;\n \n use rustfmt_nightly as rustfmt;\n \n@@ -59,27 +60,27 @@ enum Operation {\n }\n \n /// Rustfmt operations errors.\n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n pub enum OperationError {\n     /// An unknown help topic was requested.\n-    #[fail(display = \"Unknown help topic: `{}`.\", _0)]\n+    #[error(\"Unknown help topic: `{0}`.\")]\n     UnknownHelpTopic(String),\n     /// An unknown print-config option was requested.\n-    #[fail(display = \"Unknown print-config option: `{}`.\", _0)]\n+    #[error(\"Unknown print-config option: `{0}`.\")]\n     UnknownPrintConfigTopic(String),\n     /// Attempt to generate a minimal config from standard input.\n-    #[fail(display = \"The `--print-config=minimal` option doesn't work with standard input.\")]\n+    #[error(\"The `--print-config=minimal` option doesn't work with standard input.\")]\n     MinimalPathWithStdin,\n     /// An io error during reading or writing.\n-    #[fail(display = \"io error: {}\", _0)]\n+    #[error(\"io error: {0}\")]\n     IoError(IoError),\n     /// Attempt to use --check with stdin, which isn't currently\n     /// supported.\n-    #[fail(display = \"The `--check` option is not supported with standard input.\")]\n+    #[error(\"The `--check` option is not supported with standard input.\")]\n     CheckWithStdin,\n     /// Attempt to use --emit=json with stdin, which isn't currently\n     /// supported.\n-    #[fail(display = \"Using `--emit` other than stdout is not supported with standard input.\")]\n+    #[error(\"Using `--emit` other than stdout is not supported with standard input.\")]\n     EmitWithStdin,\n }\n \n@@ -192,7 +193,7 @@ fn is_nightly() -> bool {\n }\n \n // Returned i32 is an exit code\n-fn execute(opts: &Options) -> Result<i32, FailureError> {\n+fn execute(opts: &Options) -> Result<i32> {\n     let matches = opts.parse(env::args().skip(1))?;\n     let options = GetOptsOptions::from_matches(&matches)?;\n \n@@ -214,7 +215,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n             Ok(0)\n         }\n         Operation::ConfigOutputDefault { path } => {\n-            let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n+            let toml = Config::default().all_options().to_toml()?;\n             if let Some(path) = path {\n                 let mut file = File::create(path)?;\n                 file.write_all(toml.as_bytes())?;\n@@ -233,7 +234,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n             let file = file.canonicalize().unwrap_or(file);\n \n             let (config, _) = load_config(Some(file.parent().unwrap()), Some(options.clone()))?;\n-            let toml = config.all_options().to_toml().map_err(err_msg)?;\n+            let toml = config.all_options().to_toml()?;\n             io::stdout().write_all(toml.as_bytes())?;\n \n             Ok(0)\n@@ -246,7 +247,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n     }\n }\n \n-fn format_string(input: String, options: GetOptsOptions) -> Result<i32, FailureError> {\n+fn format_string(input: String, options: GetOptsOptions) -> Result<i32> {\n     // try to read config from local directory\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n@@ -287,7 +288,7 @@ fn format(\n     files: Vec<PathBuf>,\n     minimal_config_path: Option<String>,\n     options: &GetOptsOptions,\n-) -> Result<i32, FailureError> {\n+) -> Result<i32> {\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(options.clone()))?;\n \n@@ -335,7 +336,7 @@ fn format(\n     // that were used during formatting as TOML.\n     if let Some(path) = minimal_config_path {\n         let mut file = File::create(path)?;\n-        let toml = session.config.used_options().to_toml().map_err(err_msg)?;\n+        let toml = session.config.used_options().to_toml()?;\n         file.write_all(toml.as_bytes())?;\n     }\n \n@@ -514,7 +515,7 @@ struct GetOptsOptions {\n }\n \n impl GetOptsOptions {\n-    pub fn from_matches(matches: &Matches) -> Result<GetOptsOptions, FailureError> {\n+    pub fn from_matches(matches: &Matches) -> Result<GetOptsOptions> {\n         let mut options = GetOptsOptions::default();\n         options.verbose = matches.opt_present(\"verbose\");\n         options.quiet = matches.opt_present(\"quiet\");\n@@ -535,7 +536,7 @@ impl GetOptsOptions {\n                     options.error_on_unformatted = Some(true);\n                 }\n                 if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                    options.file_lines = file_lines.parse().map_err(err_msg)?;\n+                    options.file_lines = file_lines.parse()?;\n                 }\n             } else {\n                 let mut unstable_options = vec![];\n@@ -684,15 +685,15 @@ impl CliOptions for GetOptsOptions {\n     }\n }\n \n-fn edition_from_edition_str(edition_str: &str) -> Result<Edition, FailureError> {\n+fn edition_from_edition_str(edition_str: &str) -> Result<Edition> {\n     match edition_str {\n         \"2015\" => Ok(Edition::Edition2015),\n         \"2018\" => Ok(Edition::Edition2018),\n         _ => Err(format_err!(\"Invalid value for `--edition`\")),\n     }\n }\n \n-fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, FailureError> {\n+fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode> {\n     match emit_str {\n         \"files\" => Ok(EmitMode::Files),\n         \"stdout\" => Ok(EmitMode::Stdout),"}, {"sha": "18ae2fd2c47753d409ce161a0d3695a8ae505ced", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -9,6 +9,7 @@ use std::{cmp, fmt, iter, str};\n use rustc_span::{self, SourceFile};\n use serde::{ser, Deserialize, Deserializer, Serialize, Serializer};\n use serde_json as json;\n+use thiserror::Error;\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n@@ -287,12 +288,20 @@ fn canonicalize_path_string(file: &FileName) -> Option<FileName> {\n     }\n }\n \n+#[derive(Error, Debug)]\n+pub enum FileLinesError {\n+    #[error(\"{0}\")]\n+    Json(json::Error),\n+    #[error(\"Can't canonicalize {0}\")]\n+    CannotCanonicalize(FileName),\n+}\n+\n // This impl is needed for `Config::override_value` to work for use in tests.\n impl str::FromStr for FileLines {\n-    type Err = String;\n+    type Err = FileLinesError;\n \n-    fn from_str(s: &str) -> Result<FileLines, String> {\n-        let v: Vec<JsonSpan> = json::from_str(s).map_err(|e| e.to_string())?;\n+    fn from_str(s: &str) -> Result<FileLines, Self::Err> {\n+        let v: Vec<JsonSpan> = json::from_str(s).map_err(FileLinesError::Json)?;\n         let mut m = HashMap::new();\n         for js in v {\n             let (s, r) = JsonSpan::into_tuple(js)?;\n@@ -310,10 +319,10 @@ pub struct JsonSpan {\n }\n \n impl JsonSpan {\n-    fn into_tuple(self) -> Result<(FileName, Range), String> {\n+    fn into_tuple(self) -> Result<(FileName, Range), FileLinesError> {\n         let (lo, hi) = self.range;\n         let canonical = canonicalize_path_string(&self.file)\n-            .ok_or_else(|| format!(\"Can't canonicalize {}\", &self.file))?;\n+            .ok_or_else(|| FileLinesError::CannotCanonicalize(self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "cf00eed05654386324ffc73f23edeab5ad31c709", "filename": "src/config/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -6,6 +6,7 @@ use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n use regex::Regex;\n+use thiserror::Error;\n \n use crate::config::config_type::ConfigType;\n #[allow(unreachable_pub)]\n@@ -157,16 +158,20 @@ create_config! {\n          files that would be formated when used with `--check` mode. \";\n }\n \n+#[derive(Error, Debug)]\n+#[error(\"Could not output config: {0}\")]\n+pub struct ToTomlError(toml::ser::Error);\n+\n impl PartialConfig {\n-    pub fn to_toml(&self) -> Result<String, String> {\n+    pub fn to_toml(&self) -> Result<String, ToTomlError> {\n         // Non-user-facing options can't be specified in TOML\n         let mut cloned = self.clone();\n         cloned.file_lines = None;\n         cloned.verbose = None;\n         cloned.width_heuristics = None;\n         cloned.print_misformatted_file_names = None;\n \n-        ::toml::to_string(&cloned).map_err(|e| format!(\"Could not output config: {}\", e))\n+        ::toml::to_string(&cloned).map_err(ToTomlError)\n     }\n }\n "}, {"sha": "a73d2da4d03c5488935b973e47873a592e505cfe", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -6,12 +6,11 @@\n \n use env_logger;\n #[macro_use]\n-extern crate failure;\n-#[macro_use]\n extern crate log;\n use regex;\n use serde::{Deserialize, Serialize};\n use serde_json as json;\n+use thiserror::Error;\n \n use std::collections::HashSet;\n use std::io::{self, BufRead};\n@@ -27,32 +26,14 @@ use structopt::StructOpt;\n /// We only want to format rust files by default.\n const DEFAULT_PATTERN: &str = r\".*\\.rs\";\n \n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n enum FormatDiffError {\n-    #[fail(display = \"{}\", _0)]\n-    IncorrectOptions(#[cause] getopts::Fail),\n-    #[fail(display = \"{}\", _0)]\n-    IncorrectFilter(#[cause] regex::Error),\n-    #[fail(display = \"{}\", _0)]\n-    IoError(#[cause] io::Error),\n-}\n-\n-impl From<getopts::Fail> for FormatDiffError {\n-    fn from(fail: getopts::Fail) -> Self {\n-        FormatDiffError::IncorrectOptions(fail)\n-    }\n-}\n-\n-impl From<regex::Error> for FormatDiffError {\n-    fn from(err: regex::Error) -> Self {\n-        FormatDiffError::IncorrectFilter(err)\n-    }\n-}\n-\n-impl From<io::Error> for FormatDiffError {\n-    fn from(fail: io::Error) -> Self {\n-        FormatDiffError::IoError(fail)\n-    }\n+    #[error(\"{0}\")]\n+    IncorrectOptions(#[from] getopts::Fail),\n+    #[error(\"{0}\")]\n+    IncorrectFilter(#[from] regex::Error),\n+    #[error(\"{0}\")]\n+    IoError(#[from] io::Error),\n }\n \n #[derive(StructOpt, Debug)]"}, {"sha": "5693ee8595844a27afcf3f8d9f1abcb1909c3560", "filename": "src/lib.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a0b29743188899eef4dd7dfb5248d18e32e3b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "patch": "@@ -17,10 +17,10 @@ use std::panic;\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-use failure::Fail;\n use ignore;\n use rustc_ast::ast;\n use rustc_span::symbol;\n+use thiserror::Error;\n \n use crate::comment::LineClasses;\n use crate::emitter::Emitter;\n@@ -84,45 +84,44 @@ pub(crate) mod visitor;\n \n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n pub enum ErrorKind {\n     /// Line has exceeded character limit (found, maximum).\n-    #[fail(\n-        display = \"line formatted, but exceeded maximum width \\\n-                   (maximum: {} (see `max_width` option), found: {})\",\n-        _1, _0\n+    #[error(\n+        \"line formatted, but exceeded maximum width \\\n+         (maximum: {1} (see `max_width` option), found: {0})\"\n     )]\n     LineOverflow(usize, usize),\n     /// Line ends in whitespace.\n-    #[fail(display = \"left behind trailing whitespace\")]\n+    #[error(\"left behind trailing whitespace\")]\n     TrailingWhitespace,\n     /// TODO or FIXME item without an issue number.\n-    #[fail(display = \"found {}\", _0)]\n+    #[error(\"found {0}\")]\n     BadIssue(Issue),\n     /// License check has failed.\n-    #[fail(display = \"license check failed\")]\n+    #[error(\"license check failed\")]\n     LicenseCheck,\n     /// Used deprecated skip attribute.\n-    #[fail(display = \"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n+    #[error(\"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n     DeprecatedAttr,\n     /// Used a rustfmt:: attribute other than skip or skip::macros.\n-    #[fail(display = \"invalid attribute\")]\n+    #[error(\"invalid attribute\")]\n     BadAttr,\n     /// An io error during reading or writing.\n-    #[fail(display = \"io error: {}\", _0)]\n+    #[error(\"io error: {0}\")]\n     IoError(io::Error),\n     /// Parse error occurred when parsing the input.\n-    #[fail(display = \"parse error\")]\n+    #[error(\"parse error\")]\n     ParseError,\n     /// The user mandated a version and the current version of Rustfmt does not\n     /// satisfy that requirement.\n-    #[fail(display = \"version mismatch\")]\n+    #[error(\"version mismatch\")]\n     VersionMismatch,\n     /// If we had formatted the given node, then we would have lost a comment.\n-    #[fail(display = \"not formatted because a comment would be lost\")]\n+    #[error(\"not formatted because a comment would be lost\")]\n     LostComment,\n     /// Invalid glob pattern in `ignore` configuration option.\n-    #[fail(display = \"Invalid glob pattern found in ignore list: {}\", _0)]\n+    #[error(\"Invalid glob pattern found in ignore list: {0}\")]\n     InvalidGlobPattern(ignore::Error),\n }\n "}]}