{"sha": "6da8827482418b6ee89eaf3c66b8693c4cc649e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTg4Mjc0ODI0MThiNmVlODllYWYzYzY2Yjg2OTNjNGNjNjQ5ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T03:11:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T03:11:42Z"}, "message": "auto merge of #21330 : JeffBelgum/rust/collections-reform-issue-19986-add-append-and-split-off, r=Gankro\n\nPlease review carefully. Contains unsafe and is my first commit to Rust.\r\n\r\nUses ptr::copy_nonoverlapping_memory. Attempts to handle zero-size types correctly.", "tree": {"sha": "06b43695e7a1956985291cdee554320a61ced252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b43695e7a1956985291cdee554320a61ced252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da8827482418b6ee89eaf3c66b8693c4cc649e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da8827482418b6ee89eaf3c66b8693c4cc649e8", "html_url": "https://github.com/rust-lang/rust/commit/6da8827482418b6ee89eaf3c66b8693c4cc649e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da8827482418b6ee89eaf3c66b8693c4cc649e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f10dba2975b51c2d2c92157018db3ac13d4d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f10dba2975b51c2d2c92157018db3ac13d4d4a", "html_url": "https://github.com/rust-lang/rust/commit/f4f10dba2975b51c2d2c92157018db3ac13d4d4a"}, {"sha": "08e712ebe9e778bb82acd0089f3ac865946ed547", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e712ebe9e778bb82acd0089f3ac865946ed547", "html_url": "https://github.com/rust-lang/rust/commit/08e712ebe9e778bb82acd0089f3ac865946ed547"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "f5d7a34536ad40d22ab521dbd9574a7a94b1e0df", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6da8827482418b6ee89eaf3c66b8693c4cc649e8/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da8827482418b6ee89eaf3c66b8693c4cc649e8/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6da8827482418b6ee89eaf3c66b8693c4cc649e8", "patch": "@@ -681,6 +681,43 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Moves all the elements of `other` into `Self`, leaving `other` empty.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the number of elements in the vector overflows a `uint`.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let mut vec = vec![1, 2, 3];\n+    /// let mut vec2 = vec![4, 5, 6];\n+    /// vec.append(&mut vec2);\n+    /// assert_eq!(vec, vec![1, 2, 3, 4, 5, 6]);\n+    /// assert_eq!(vec2, vec![]);\n+    /// ```\n+    #[inline]\n+    #[unstable = \"new API, waiting for dust to settle\"]\n+    pub fn append(&mut self, other: &mut Self) {\n+        if mem::size_of::<T>() == 0 {\n+            // zero-size types consume no memory, so we can't rely on the\n+            // address space running out\n+            self.len = self.len.checked_add(other.len()).expect(\"length overflow\");\n+            unsafe { other.set_len(0) }\n+            return;\n+        }\n+        self.reserve(other.len());\n+        let len = self.len();\n+        unsafe {\n+            ptr::copy_nonoverlapping_memory(\n+                self.get_unchecked_mut(len),\n+                other.as_ptr(),\n+                other.len());\n+        }\n+\n+        self.len += other.len();\n+        unsafe { other.set_len(0); }\n+    }\n+\n     /// Creates a draining iterator that clears the `Vec` and iterates over\n     /// the removed items from start to end.\n     ///\n@@ -2298,6 +2335,15 @@ mod tests {\n         assert_eq!(ys.as_slice(), [1u, 2, 3]);\n     }\n \n+    #[test]\n+    fn test_append() {\n+        let mut vec = vec![1, 2, 3];\n+        let mut vec2 = vec![4, 5, 6];\n+        vec.append(&mut vec2);\n+        assert_eq!(vec, vec![1, 2, 3, 4, 5, 6]);\n+        assert_eq!(vec2, vec![]);\n+    }\n+\n     #[bench]\n     fn bench_new(b: &mut Bencher) {\n         b.iter(|| {"}]}