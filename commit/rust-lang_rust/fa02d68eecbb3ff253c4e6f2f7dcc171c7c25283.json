{"sha": "fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDJkNjhlZWNiYjNmZjI1M2M0ZTZmMmY3ZGNjMTcxYzdjMjUyODM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T15:45:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T22:10:08Z"}, "message": "universal_regions: rustfmt", "tree": {"sha": "f0eacd5caab919aef3d000e1e74dd5ea156130b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0eacd5caab919aef3d000e1e74dd5ea156130b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283", "html_url": "https://github.com/rust-lang/rust/commit/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3ce9ca68a0e44caf2d46ba4025ba3c696849b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3ce9ca68a0e44caf2d46ba4025ba3c696849b4", "html_url": "https://github.com/rust-lang/rust/commit/8b3ce9ca68a0e44caf2d46ba4025ba3c696849b4"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "acd740e5412594842fae0208eae674043e4c351c", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=fa02d68eecbb3ff253c4e6f2f7dcc171c7c25283", "patch": "@@ -22,15 +22,15 @@\n //! The code in this file doesn't *do anything* with those results; it\n //! just returns them for other code to use.\n \n-use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n-use rustc::infer::region_constraints::GenericKind;\n+use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::infer::outlives::bounds::{self, OutlivesBound};\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n-use rustc::ty::{self, RegionVid, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n+use rustc::infer::region_constraints::GenericKind;\n+use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n@@ -493,18 +493,15 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n \n         debug!(\n             \"build: global regions = {}..{}\",\n-            FIRST_GLOBAL_INDEX,\n-            first_extern_index\n+            FIRST_GLOBAL_INDEX, first_extern_index\n         );\n         debug!(\n             \"build: extern regions = {}..{}\",\n-            first_extern_index,\n-            first_local_index\n+            first_extern_index, first_local_index\n         );\n         debug!(\n             \"build: local regions  = {}..{}\",\n-            first_local_index,\n-            num_universals\n+            first_local_index, num_universals\n         );\n \n         let yield_ty = match defining_ty {\n@@ -548,7 +545,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 let defining_ty = self.infcx\n                     .replace_free_regions_with_nll_infer_vars(FR, &defining_ty);\n \n-                match defining_ty.sty  {\n+                match defining_ty.sty {\n                     ty::TyClosure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n                     ty::TyGenerator(def_id, substs, movability) => {\n                         DefiningTy::Generator(def_id, substs, movability)\n@@ -587,8 +584,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n         let identity_substs = Substs::identity_for_item(gcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, ClosureSubsts { ref substs }) |\n-            DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n+            DefiningTy::Closure(_, ClosureSubsts { ref substs })\n+            | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n@@ -726,8 +723,7 @@ impl UniversalRegionRelations {\n     fn relate_universal_regions(&mut self, fr_a: RegionVid, fr_b: RegionVid) {\n         debug!(\n             \"relate_universal_regions: fr_a={:?} outlives fr_b={:?}\",\n-            fr_a,\n-            fr_b\n+            fr_a, fr_b\n         );\n         self.outlives.add(fr_a, fr_b);\n         self.inverse_outlives.add(fr_b, fr_a);\n@@ -780,8 +776,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\n             \"replace_bound_regions_with_nll_infer_vars(value={:?}, all_outlive_scope={:?})\",\n-            value,\n-            all_outlive_scope,\n+            value, all_outlive_scope,\n         );\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n@@ -790,7 +785,10 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n             }));\n             let region_vid = self.next_nll_region_var(origin);\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n-            debug!(\"liberated_region={:?} => {:?}\", liberated_region, region_vid);\n+            debug!(\n+                \"liberated_region={:?} => {:?}\",\n+                liberated_region, region_vid\n+            );\n             region_vid\n         });\n         value\n@@ -803,9 +801,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     /// in later and instantiate the late-bound regions, and then we\n     /// insert the `ReFree` version of those into the map as\n     /// well. These are used for error reporting.\n-    fn insert_late_bound_region(&mut self, r: ty::Region<'tcx>,\n-                                vid: ty::RegionVid)\n-    {\n+    fn insert_late_bound_region(&mut self, r: ty::Region<'tcx>, vid: ty::RegionVid) {\n         self.indices.insert(r, vid);\n     }\n \n@@ -821,9 +817,9 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n         if let ty::ReVar(..) = r {\n             r.to_region_vid()\n         } else {\n-            *self.indices.get(&r).unwrap_or_else(|| {\n-                bug!(\"cannot convert `{:?}` to a region vid\", r)\n-            })\n+            *self.indices\n+                .get(&r)\n+                .unwrap_or_else(|| bug!(\"cannot convert `{:?}` to a region vid\", r))\n         }\n     }\n "}]}