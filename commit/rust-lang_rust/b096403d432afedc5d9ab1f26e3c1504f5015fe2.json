{"sha": "b096403d432afedc5d9ab1f26e3c1504f5015fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOTY0MDNkNDMyYWZlZGM1ZDlhYjFmMjZlM2MxNTA0ZjUwMTVmZTI=", "commit": {"author": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-13T01:19:32Z"}, "committer": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-15T04:02:26Z"}, "message": "Ignore PhantomData when checking CoerceUnsized implementations", "tree": {"sha": "72ec03e6360fea3e048ee99a127078e5f3f7c765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ec03e6360fea3e048ee99a127078e5f3f7c765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b096403d432afedc5d9ab1f26e3c1504f5015fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b096403d432afedc5d9ab1f26e3c1504f5015fe2", "html_url": "https://github.com/rust-lang/rust/commit/b096403d432afedc5d9ab1f26e3c1504f5015fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b096403d432afedc5d9ab1f26e3c1504f5015fe2/comments", "author": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c96168821d70992157f55ee9f06190bf299ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c96168821d70992157f55ee9f06190bf299ba4", "html_url": "https://github.com/rust-lang/rust/commit/b1c96168821d70992157f55ee9f06190bf299ba4"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "0227122b569d6f10bb150547191f191092a3faa8", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=b096403d432afedc5d9ab1f26e3c1504f5015fe2", "patch": "@@ -899,6 +899,14 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_phantom_data(&self) -> bool {\n+        if let TyStruct(def, _) = self.sty {\n+            def.is_phantom_data()\n+        } else {\n+            false\n+        }\n+    }\n+\n     pub fn is_bool(&self) -> bool { self.sty == TyBool }\n \n     pub fn is_param(&self, space: subst::ParamSpace, index: u32) -> bool {"}, {"sha": "ea2b5c1f290cc6786caf51482a9fceb6040702ec", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b096403d432afedc5d9ab1f26e3c1504f5015fe2", "patch": "@@ -533,7 +533,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                               Rvalue::new(ByRef)));\n                 } else {\n                     // Otherwise, simply copy the data from the source.\n-                    assert_eq!(src_ty, target_ty);\n+                    assert!(src_ty.is_phantom_data() || src_ty == target_ty);\n                     memcpy_ty(bcx, ll_target, ll_source, src_ty);\n                 }\n             }"}, {"sha": "d5164af56b3574f50963a9a1554c97ba02cb6ed2", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b096403d432afedc5d9ab1f26e3c1504f5015fe2", "patch": "@@ -480,9 +480,16 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                     let fields = &def_a.struct_variant().fields;\n                     let diff_fields = fields.iter().enumerate().filter_map(|(i, f)| {\n                         let (a, b) = (f.ty(tcx, substs_a), f.ty(tcx, substs_b));\n-                        if infcx.sub_types(false, origin, b, a).is_ok() {\n+\n+                        if f.unsubst_ty().is_phantom_data() {\n+                            // Ignore PhantomData fields\n+                            None\n+                        } else if infcx.sub_types(false, origin, b, a).is_ok() {\n+                            // Ignore fields that aren't significantly changed\n                             None\n                         } else {\n+                            // Collect up all fields that were significantly changed\n+                            // i.e. those that contain T in coerce_unsized T -> U\n                             Some((i, a, b))\n                         }\n                     }).collect::<Vec<_>>();"}, {"sha": "3b8fac832a464de29b4e4befe79e4520362109f9", "filename": "src/test/compile-fail/issue-26905.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs?ref=b096403d432afedc5d9ab1f26e3c1504f5015fe2", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize, coerce_unsized)]\n+\n+// Verfies that non-PhantomData ZSTs still cause coercions to fail.\n+// They might have additional semantics that we don't want to bulldoze.\n+\n+use std::marker::{Unsize, PhantomData};\n+use std::ops::CoerceUnsized;\n+\n+struct NotPhantomData<T: ?Sized>(PhantomData<T>);\n+\n+struct MyRc<T: ?Sized> {\n+    _ptr: *const T,\n+    _boo: NotPhantomData<T>,\n+}\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<MyRc<U>> for MyRc<T>{ } //~ERROR\n+\n+fn main() {\n+    let data = [1, 2, 3];\n+    let iter = data.iter();\n+    let x = MyRc { _ptr: &iter, _boo: NotPhantomData(PhantomData) };\n+    let _y: MyRc<Iterator<Item=&u32>> = x;\n+}\n+"}, {"sha": "0ad193bb28c993affff0fca9c7ced820ed34c104", "filename": "src/test/run-pass/issue-26905.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Ftest%2Frun-pass%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b096403d432afedc5d9ab1f26e3c1504f5015fe2/src%2Ftest%2Frun-pass%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26905.rs?ref=b096403d432afedc5d9ab1f26e3c1504f5015fe2", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize, coerce_unsized)]\n+\n+// Verfies that PhantomData is ignored for DST coercions\n+\n+use std::marker::{Unsize, PhantomData};\n+use std::ops::CoerceUnsized;\n+\n+struct MyRc<T: ?Sized> {\n+    _ptr: *const T,\n+    _boo: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<MyRc<U>> for MyRc<T>{ }\n+\n+fn main() {\n+    let data = [1, 2, 3];\n+    let iter = data.iter();\n+    let x = MyRc { _ptr: &iter, _boo: PhantomData };\n+    let _y: MyRc<Iterator<Item=&u32>> = x;\n+}\n+"}]}