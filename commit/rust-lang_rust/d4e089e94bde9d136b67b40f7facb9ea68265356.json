{"sha": "d4e089e94bde9d136b67b40f7facb9ea68265356", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTA4OWU5NGJkZTlkMTM2YjY3YjQwZjdmYWNiOWVhNjgyNjUzNTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T01:03:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "rustc: Add diagnostic::handler iface and default impl\n\nThis is for moving error handling logic out of the session", "tree": {"sha": "f504aa27c77c97af3aadb94a8e77068acca94438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f504aa27c77c97af3aadb94a8e77068acca94438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e089e94bde9d136b67b40f7facb9ea68265356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e089e94bde9d136b67b40f7facb9ea68265356", "html_url": "https://github.com/rust-lang/rust/commit/d4e089e94bde9d136b67b40f7facb9ea68265356", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e089e94bde9d136b67b40f7facb9ea68265356/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "889f6317bee10e990f43e889fd5b6cf3e4e7ed8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/889f6317bee10e990f43e889fd5b6cf3e4e7ed8e", "html_url": "https://github.com/rust-lang/rust/commit/889f6317bee10e990f43e889fd5b6cf3e4e7ed8e"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "28818c38fa0f06979d773cb03f1d3cd2af0ca9fd", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d4e089e94bde9d136b67b40f7facb9ea68265356/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e089e94bde9d136b67b40f7facb9ea68265356/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=d4e089e94bde9d136b67b40f7facb9ea68265356", "patch": "@@ -4,6 +4,83 @@ import syntax::codemap;\n import codemap::span;\n \n export emit_warning, emit_error, emit_note;\n+export handler, codemap_handler;\n+\n+iface handler {\n+    fn span_fatal(sp: span, msg: str) -> !;\n+    fn fatal(msg: str) -> !;\n+    fn span_err(sp: span, msg: str);\n+    fn err(msg: str);\n+    fn has_errors() -> bool;\n+    fn abort_if_errors();\n+    fn span_warn(sp: span, msg: str);\n+    fn warn(msg: str);\n+    fn span_note(sp: span, msg: str);\n+    fn note(msg: str);\n+    fn span_bug(sp: span, msg: str) -> !;\n+    fn bug(msg: str) -> !;\n+    fn span_unimpl(sp: span, msg: str) -> !;\n+    fn unimpl(msg: str) -> !;\n+}\n+\n+type codemap_t = @{\n+    cm: codemap::codemap,\n+    mutable err_count: uint\n+};\n+\n+impl codemap_handler of handler for codemap_t {\n+    fn span_fatal(sp: span, msg: str) -> ! {\n+        emit_error(some((self.cm, sp)), msg);\n+        fail;\n+    }\n+    fn fatal(msg: str) -> ! {\n+        emit_error(none, msg);\n+        fail;\n+    }\n+    fn span_err(sp: span, msg: str) {\n+        emit_error(some((self.cm, sp)), msg);\n+        self.err_count += 1u;\n+    }\n+    fn err(msg: str) {\n+        emit_error(none, msg);\n+        self.err_count += 1u;\n+    }\n+    fn has_errors() -> bool { self.err_count > 0u }\n+    fn abort_if_errors() {\n+        if self.err_count > 0u {\n+            self.fatal(\"aborting due to previous errors\");\n+        }\n+    }\n+    fn span_warn(sp: span, msg: str) {\n+        emit_warning(some((self.cm, sp)), msg);\n+    }\n+    fn warn(msg: str) {\n+        emit_warning(none, msg);\n+    }\n+    fn span_note(sp: span, msg: str) {\n+        emit_note(some((self.cm, sp)), msg);\n+    }\n+    fn note(msg: str) {\n+        emit_note(none, msg);\n+    }\n+    fn span_bug(sp: span, msg: str) -> ! {\n+        self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);\n+    }\n+    fn bug(msg: str) -> ! {\n+        self.fatal(#fmt[\"internal compiler error %s\", msg]);\n+    }\n+    fn span_unimpl(sp: span, msg: str) -> ! {\n+        self.span_bug(sp, \"unimplemented \" + msg);\n+    }\n+    fn unimpl(msg: str) -> ! { self.bug(\"unimplemented \" + msg); }\n+}\n+\n+fn mk_codemap_handler(cm: codemap::codemap) -> handler {\n+    @{\n+        cm: cm,\n+        mutable err_count: 0u,\n+    } as handler\n+}\n \n tag diagnostictype {\n     warning;"}]}