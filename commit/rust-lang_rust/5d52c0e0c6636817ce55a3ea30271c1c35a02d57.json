{"sha": "5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTJjMGUwYzY2MzY4MTdjZTU1YTNlYTMwMjcxYzFjMzVhMDJkNTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-20T13:27:17Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T06:44:35Z"}, "message": "Remove unused Option from NllTypeRelatingDelegate", "tree": {"sha": "ad4b05d1e2b85f6eff65ee668d4619e7c64bf592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4b05d1e2b85f6eff65ee668d4619e7c64bf592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "html_url": "https://github.com/rust-lang/rust/commit/5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d52c0e0c6636817ce55a3ea30271c1c35a02d57/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85109e257ac97a0904106cafaf6e014c1d812326", "url": "https://api.github.com/repos/rust-lang/rust/commits/85109e257ac97a0904106cafaf6e014c1d812326", "html_url": "https://github.com/rust-lang/rust/commit/85109e257ac97a0904106cafaf6e014c1d812326"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "bd5508a9daeebf0d65199c2e15106c4478073043", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d52c0e0c6636817ce55a3ea30271c1c35a02d57/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d52c0e0c6636817ce55a3ea30271c1c35a02d57/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "patch": "@@ -1161,7 +1161,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             b,\n             locations,\n             category,\n-            Some(self.borrowck_context),\n+            self.borrowck_context,\n         )\n     }\n "}, {"sha": "6e07a90f04badf7c61c7ddbcbf4986e5306d0592", "filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5d52c0e0c6636817ce55a3ea30271c1c35a02d57/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d52c0e0c6636817ce55a3ea30271c1c35a02d57/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=5d52c0e0c6636817ce55a3ea30271c1c35a02d57", "patch": "@@ -24,7 +24,7 @@ pub(super) fn relate_types<'tcx>(\n     b: Ty<'tcx>,\n     locations: Locations,\n     category: ConstraintCategory,\n-    borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n+    borrowck_context: &mut BorrowCheckContext<'_, 'tcx>,\n ) -> Fallible<()> {\n     debug!(\"relate_types(a={:?}, v={:?}, b={:?}, locations={:?})\", a, v, b, locations);\n     TypeRelating::new(\n@@ -38,7 +38,7 @@ pub(super) fn relate_types<'tcx>(\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n-    borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n+    borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n \n     param_env: ty::ParamEnv<'tcx>,\n \n@@ -52,7 +52,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         infcx: &'me InferCtxt<'me, 'tcx>,\n-        borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n+        borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n@@ -71,20 +71,12 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     }\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n-        if self.borrowck_context.is_some() {\n-            let origin = NllRegionVariableOrigin::Existential { from_forall };\n-            self.infcx.next_nll_region_var(origin)\n-        } else {\n-            self.infcx.tcx.lifetimes.re_erased\n-        }\n+        let origin = NllRegionVariableOrigin::Existential { from_forall };\n+        self.infcx.next_nll_region_var(origin)\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        if let Some(borrowck_context) = &mut self.borrowck_context {\n-            borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n-        } else {\n-            self.infcx.tcx.lifetimes.re_erased\n-        }\n+        self.borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n@@ -100,17 +92,15 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         sub: ty::Region<'tcx>,\n         info: ty::VarianceDiagInfo<'tcx>,\n     ) {\n-        if let Some(borrowck_context) = &mut self.borrowck_context {\n-            let sub = borrowck_context.universal_regions.to_region_vid(sub);\n-            let sup = borrowck_context.universal_regions.to_region_vid(sup);\n-            borrowck_context.constraints.outlives_constraints.push(OutlivesConstraint {\n-                sup,\n-                sub,\n-                locations: self.locations,\n-                category: self.category,\n-                variance_info: info,\n-            });\n-        }\n+        let sub = self.borrowck_context.universal_regions.to_region_vid(sub);\n+        let sup = self.borrowck_context.universal_regions.to_region_vid(sup);\n+        self.borrowck_context.constraints.outlives_constraints.push(OutlivesConstraint {\n+            sup,\n+            sub,\n+            locations: self.locations,\n+            category: self.category,\n+            variance_info: info,\n+        });\n     }\n \n     // We don't have to worry about the equality of consts during borrow checking"}]}