{"sha": "91def936bc0ecabd574eb312e376afa801f12dca", "node_id": "C_kwDOAAsO6NoAKDkxZGVmOTM2YmMwZWNhYmQ1NzRlYjMxMmUzNzZhZmE4MDFmMTJkY2E", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-20T15:37:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-20T15:37:41Z"}, "message": "Replace Vec with Box in Path.generic_args field", "tree": {"sha": "62f2c391d78c87aa19f98d00baff033272149959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f2c391d78c87aa19f98d00baff033272149959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91def936bc0ecabd574eb312e376afa801f12dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91def936bc0ecabd574eb312e376afa801f12dca", "html_url": "https://github.com/rust-lang/rust/commit/91def936bc0ecabd574eb312e376afa801f12dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91def936bc0ecabd574eb312e376afa801f12dca/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceaec9d8666614f6e84506b84f4b740538cb6d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaec9d8666614f6e84506b84f4b740538cb6d50", "html_url": "https://github.com/rust-lang/rust/commit/ceaec9d8666614f6e84506b84f4b740538cb6d50"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "6534f970ee6b860f245fa89f6073f921ab07adf4", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=91def936bc0ecabd574eb312e376afa801f12dca", "patch": "@@ -40,7 +40,7 @@ pub type LabelId = Idx<Label>;\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Literal {\n-    String(String),\n+    String(Box<str>),\n     ByteString(Box<[u8]>),\n     Char(char),\n     Bool(bool),"}, {"sha": "5bb8afa5cc9963a1a85e6256e9ed9de426b6b776", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=91def936bc0ecabd574eb312e376afa801f12dca", "patch": "@@ -22,7 +22,7 @@ pub struct ModPath {\n     segments: Vec<Name>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum PathKind {\n     Plain,\n     /// `self::` is `Super(0)`\n@@ -119,7 +119,7 @@ pub struct Path {\n     type_anchor: Option<Interned<TypeRef>>,\n     mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n-    generic_args: Vec<Option<Interned<GenericArgs>>>,\n+    generic_args: Box<[Option<Interned<GenericArgs>>]>,\n }\n \n /// Generic arguments to a path segment (e.g. the `i32` in `Option<i32>`). This\n@@ -171,9 +171,9 @@ impl Path {\n     /// Converts a known mod path to `Path`.\n     pub fn from_known_path(\n         path: ModPath,\n-        generic_args: Vec<Option<Interned<GenericArgs>>>,\n+        generic_args: impl Into<Box<[Option<Interned<GenericArgs>>]>>,\n     ) -> Path {\n-        Path { type_anchor: None, mod_path: Interned::new(path), generic_args }\n+        Path { type_anchor: None, mod_path: Interned::new(path), generic_args: generic_args.into() }\n     }\n \n     pub fn kind(&self) -> &PathKind {\n@@ -187,7 +187,7 @@ impl Path {\n     pub fn segments(&self) -> PathSegments<'_> {\n         PathSegments {\n             segments: self.mod_path.segments.as_slice(),\n-            generic_args: self.generic_args.as_slice(),\n+            generic_args: &self.generic_args,\n         }\n     }\n \n@@ -205,14 +205,14 @@ impl Path {\n                 self.mod_path.kind.clone(),\n                 self.mod_path.segments[..self.mod_path.segments.len() - 1].iter().cloned(),\n             )),\n-            generic_args: self.generic_args[..self.generic_args.len() - 1].to_vec(),\n+            generic_args: self.generic_args[..self.generic_args.len() - 1].to_vec().into(),\n         };\n         Some(res)\n     }\n \n     pub fn is_self_type(&self) -> bool {\n         self.type_anchor.is_none()\n-            && self.generic_args == [None]\n+            && *self.generic_args == [None]\n             && self.mod_path.as_ident() == Some(&name!(Self))\n     }\n }\n@@ -286,7 +286,7 @@ impl From<Name> for Path {\n         Path {\n             type_anchor: None,\n             mod_path: Interned::new(ModPath::from_segments(PathKind::Plain, iter::once(name))),\n-            generic_args: vec![None],\n+            generic_args: Box::new([None]),\n         }\n     }\n }"}, {"sha": "c84cd50ce6e6c0424ec1a02f28a1574cdb9d370d", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91def936bc0ecabd574eb312e376afa801f12dca/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=91def936bc0ecabd574eb312e376afa801f12dca", "patch": "@@ -70,18 +70,13 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                     }\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                     Some(trait_ref) => {\n-                        let path = Path::from_src(trait_ref.path()?, ctx)?;\n-                        let mod_path = (*path.mod_path).clone();\n-                        let num_segments = path.mod_path.segments.len();\n+                        let Path { mod_path, generic_args: path_generic_args, .. } =\n+                            Path::from_src(trait_ref.path()?, ctx)?;\n+                        let num_segments = mod_path.segments.len();\n                         kind = mod_path.kind;\n \n-                        let mut prefix_segments = mod_path.segments;\n-                        prefix_segments.reverse();\n-                        segments.extend(prefix_segments);\n-\n-                        let mut prefix_args = path.generic_args;\n-                        prefix_args.reverse();\n-                        generic_args.extend(prefix_args);\n+                        segments.extend(mod_path.segments.iter().cloned().rev());\n+                        generic_args.extend(path_generic_args.iter().cloned().rev());\n \n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n                         let last_segment =\n@@ -139,7 +134,7 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n     }\n \n     let mod_path = Interned::new(ModPath::from_segments(kind, segments));\n-    return Some(Path { type_anchor, mod_path, generic_args });\n+    return Some(Path { type_anchor, mod_path, generic_args: generic_args.into() });\n \n     fn qualifier(path: &ast::Path) -> Option<ast::Path> {\n         if let Some(q) = path.qualifier() {"}]}