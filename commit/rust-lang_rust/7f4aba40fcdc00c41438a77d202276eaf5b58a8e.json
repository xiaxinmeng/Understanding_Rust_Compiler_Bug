{"sha": "7f4aba40fcdc00c41438a77d202276eaf5b58a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNGFiYTQwZmNkYzAwYzQxNDM4YTc3ZDIwMjI3NmVhZjViNThhOGU=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-08-22T09:47:36Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-08-22T10:02:02Z"}, "message": "Apply clippy::needless_return suggestions", "tree": {"sha": "fe6a1bcd2700a3c3ea6788043fb53c2e559a13b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe6a1bcd2700a3c3ea6788043fb53c2e559a13b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f4aba40fcdc00c41438a77d202276eaf5b58a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4aba40fcdc00c41438a77d202276eaf5b58a8e", "html_url": "https://github.com/rust-lang/rust/commit/7f4aba40fcdc00c41438a77d202276eaf5b58a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f4aba40fcdc00c41438a77d202276eaf5b58a8e/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ad3f9fc4b293fd5ada4b975910be26105e5847", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ad3f9fc4b293fd5ada4b975910be26105e5847", "html_url": "https://github.com/rust-lang/rust/commit/b7ad3f9fc4b293fd5ada4b975910be26105e5847"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f50781890ab225eabc5ea646bbc68e440792fb64", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f4aba40fcdc00c41438a77d202276eaf5b58a8e/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4aba40fcdc00c41438a77d202276eaf5b58a8e/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=7f4aba40fcdc00c41438a77d202276eaf5b58a8e", "patch": "@@ -1309,7 +1309,7 @@ impl<I> DoubleEndedIterator for Peekable<I> where I: DoubleEndedIterator {\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n         match self.peeked.take() {\n-            Some(None) => return Try::from_ok(init),\n+            Some(None) => Try::from_ok(init),\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n@@ -1326,7 +1326,7 @@ impl<I> DoubleEndedIterator for Peekable<I> where I: DoubleEndedIterator {\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         match self.peeked {\n-            Some(None) => return init,\n+            Some(None) => init,\n             Some(Some(v)) => {\n                 let acc = self.iter.rfold(init, &mut fold);\n                 fold(acc, v)"}]}