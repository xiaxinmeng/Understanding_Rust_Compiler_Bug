{"sha": "b688b694d083b94ed19c8c93fb321a52ca98d4d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODhiNjk0ZDA4M2I5NGVkMTljOGM5M2ZiMzIxYTUyY2E5OGQ0ZDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-17T23:28:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T23:28:09Z"}, "message": "Rollup merge of #83080 - tmiasko:inline-coverage, r=wesleywiser\n\nMake source-based code coverage compatible with MIR inlining\n\nWhen codegenning code coverage use the instance that coverage data was\noriginally generated for, to ensure basic level of compatibility with\nMIR inlining.\n\nFixes #83061", "tree": {"sha": "31a424bf99052b882239dda2f1cb496aa68ea0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a424bf99052b882239dda2f1cb496aa68ea0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b688b694d083b94ed19c8c93fb321a52ca98d4d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUpCJCRBK7hj4Ov3rIwAAdHIIAJmJzZCw8qwNQvaxA1OymSPR\nP2rwXQJ62X1RYY8Pwm3evNgFpHNW8XZDWCn8Kk+paDuwAOa/8unwsAJKDvJLs29s\n9dyNCzjB9d/a/ZJU65CqKOhax6ttIC9XoBuOVNk6Z3AIOfAT6DOfiAoG/lTskGcM\n63g3wORT9mNrKltD/UZvNROiXlbg87EoDAbub82MpufdJosdaROdnmqwnu3Vnp7f\nk9XdkQhtEQJQXKXN7WEZRv8j7gN672kbmi6dgBdhgpfvqBqqID39krn7aPKRnD30\nfnUQYqbFq7FHZ3yksPtFKTPGdccRbgTHVUJUxYdjBmFQS+xa6VdI9uAmQdELscI=\n=rxku\n-----END PGP SIGNATURE-----\n", "payload": "tree 31a424bf99052b882239dda2f1cb496aa68ea0d5\nparent c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b\nparent 0d84e0b68c78006c4aa6f5ec021d92277be7d3cc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616023689 +0100\ncommitter GitHub <noreply@github.com> 1616023689 +0100\n\nRollup merge of #83080 - tmiasko:inline-coverage, r=wesleywiser\n\nMake source-based code coverage compatible with MIR inlining\n\nWhen codegenning code coverage use the instance that coverage data was\noriginally generated for, to ensure basic level of compatibility with\nMIR inlining.\n\nFixes #83061\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b688b694d083b94ed19c8c93fb321a52ca98d4d9", "html_url": "https://github.com/rust-lang/rust/commit/b688b694d083b94ed19c8c93fb321a52ca98d4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b688b694d083b94ed19c8c93fb321a52ca98d4d9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b", "html_url": "https://github.com/rust-lang/rust/commit/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b"}, {"sha": "0d84e0b68c78006c4aa6f5ec021d92277be7d3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d84e0b68c78006c4aa6f5ec021d92277be7d3cc", "html_url": "https://github.com/rust-lang/rust/commit/0d84e0b68c78006c4aa6f5ec021d92277be7d3cc"}], "stats": {"total": 1188, "additions": 1100, "deletions": 88}, "files": [{"sha": "352638aa88ee8a4f4772354bbbb722b9fff1080f", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -254,7 +254,7 @@ fn save_function_record(\n ///\n /// 1. The file name of an \"Unreachable\" function must match the file name of the existing\n ///    codegenned (covered) function to which the unreachable code regions will be added.\n-/// 2. The function to which the unreachable code regions will be added must not be a genaric\n+/// 2. The function to which the unreachable code regions will be added must not be a generic\n ///    function (must not have type parameters) because the coverage tools will get confused\n ///    if the codegenned function has more than one instantiation and additional `CodeRegion`s\n ///    attached to only one of those instantiations.\n@@ -284,7 +284,7 @@ fn add_unreachable_coverage<'tcx>(\n     let all_def_ids: DefIdSet =\n         tcx.mir_keys(LOCAL_CRATE).iter().map(|local_def_id| local_def_id.to_def_id()).collect();\n \n-    let (codegenned_def_ids, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let codegenned_def_ids = tcx.codegened_and_inlined_items(LOCAL_CRATE);\n \n     let mut unreachable_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {"}, {"sha": "af6482fdbc24fb00a0e7b7361600691b4b3a72ef", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::coverage::{\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::TyCtxt;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct Expression {\n     lhs: ExpressionOperandId,\n     op: Op,\n@@ -64,7 +64,9 @@ impl<'tcx> FunctionCoverage<'tcx> {\n \n     /// Adds a code region to be counted by an injected counter intrinsic.\n     pub fn add_counter(&mut self, id: CounterValueReference, region: CodeRegion) {\n-        self.counters[id].replace(region).expect_none(\"add_counter called with duplicate `id`\");\n+        if let Some(previous_region) = self.counters[id].replace(region.clone()) {\n+            assert_eq!(previous_region, region, \"add_counter: code region for id changed\");\n+        }\n     }\n \n     /// Both counters and \"counter expressions\" (or simply, \"expressions\") can be operands in other\n@@ -94,9 +96,18 @@ impl<'tcx> FunctionCoverage<'tcx> {\n             expression_id, lhs, op, rhs, region\n         );\n         let expression_index = self.expression_index(u32::from(expression_id));\n-        self.expressions[expression_index]\n-            .replace(Expression { lhs, op, rhs, region })\n-            .expect_none(\"add_counter_expression called with duplicate `id_descending_from_max`\");\n+        if let Some(previous_expression) = self.expressions[expression_index].replace(Expression {\n+            lhs,\n+            op,\n+            rhs,\n+            region: region.clone(),\n+        }) {\n+            assert_eq!(\n+                previous_expression,\n+                Expression { lhs, op, rhs, region },\n+                \"add_counter_expression: expression for id changed\"\n+            );\n+        }\n     }\n \n     /// Add a region that will be marked as \"unreachable\", with a constant \"zero counter\"."}, {"sha": "5ab1baafb57de3b587be796d19ea9c4959ee875f", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -2,27 +2,38 @@ use crate::traits::*;\n \n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::Coverage;\n+use rustc_middle::mir::SourceScope;\n \n use super::FunctionCx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn codegen_coverage(&self, bx: &mut Bx, coverage: Coverage) {\n+    pub fn codegen_coverage(&self, bx: &mut Bx, coverage: Coverage, scope: SourceScope) {\n+        // Determine the instance that coverage data was originally generated for.\n+        let scope_data = &self.mir.source_scopes[scope];\n+        let instance = if let Some((inlined_instance, _)) = scope_data.inlined {\n+            self.monomorphize(inlined_instance)\n+        } else if let Some(inlined_scope) = scope_data.inlined_parent_scope {\n+            self.monomorphize(self.mir.source_scopes[inlined_scope].inlined.unwrap().0)\n+        } else {\n+            self.instance\n+        };\n+\n         let Coverage { kind, code_region } = coverage;\n         match kind {\n             CoverageKind::Counter { function_source_hash, id } => {\n-                if bx.set_function_source_hash(self.instance, function_source_hash) {\n+                if bx.set_function_source_hash(instance, function_source_hash) {\n                     // If `set_function_source_hash()` returned true, the coverage map is enabled,\n                     // so continue adding the counter.\n                     if let Some(code_region) = code_region {\n                         // Note: Some counters do not have code regions, but may still be referenced\n                         // from expressions. In that case, don't add the counter to the coverage map,\n                         // but do inject the counter intrinsic.\n-                        bx.add_coverage_counter(self.instance, id, code_region);\n+                        bx.add_coverage_counter(instance, id, code_region);\n                     }\n \n-                    let coverageinfo = bx.tcx().coverageinfo(self.instance.def_id());\n+                    let coverageinfo = bx.tcx().coverageinfo(instance.def_id());\n \n-                    let fn_name = bx.create_pgo_func_name_var(self.instance);\n+                    let fn_name = bx.create_pgo_func_name_var(instance);\n                     let hash = bx.const_u64(function_source_hash);\n                     let num_counters = bx.const_u32(coverageinfo.num_counters);\n                     let index = bx.const_u32(u32::from(id));\n@@ -34,11 +45,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             CoverageKind::Expression { id, lhs, op, rhs } => {\n-                bx.add_coverage_counter_expression(self.instance, id, lhs, op, rhs, code_region);\n+                bx.add_coverage_counter_expression(instance, id, lhs, op, rhs, code_region);\n             }\n             CoverageKind::Unreachable => {\n                 bx.add_coverage_unreachable(\n-                    self.instance,\n+                    instance,\n                     code_region.expect(\"unreachable regions always have code regions\"),\n                 );\n             }"}, {"sha": "fe7f6288adb273913a8545f0ee4160d54395a244", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx\n             }\n             mir::StatementKind::Coverage(box ref coverage) => {\n-                self.codegen_coverage(&mut bx, coverage.clone());\n+                self.codegen_coverage(&mut bx, coverage.clone(), statement.source_info.scope);\n                 bx\n             }\n             mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {"}, {"sha": "ae367db019b59e9aefdeb3d03efbd06375d5c28f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -1407,6 +1407,14 @@ rustc_queries! {\n     query is_codegened_item(def_id: DefId) -> bool {\n         desc { |tcx| \"determining whether `{}` needs codegen\", tcx.def_path_str(def_id) }\n     }\n+\n+    /// All items participating in code generation together with items inlined into them.\n+    query codegened_and_inlined_items(_: CrateNum)\n+        -> &'tcx DefIdSet {\n+        eval_always\n+       desc { \"codegened_and_inlined_items\" }\n+    }\n+\n     query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n         desc { \"codegen_unit\" }\n     }"}, {"sha": "dc2379fd92b834cba2dc31d3919230fbbede99f1", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -424,8 +424,33 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n+fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx DefIdSet {\n+    let (items, cgus) = tcx.collect_and_partition_mono_items(cnum);\n+    let mut visited = DefIdSet::default();\n+    let mut result = items.clone();\n+\n+    for cgu in cgus {\n+        for (item, _) in cgu.items() {\n+            if let MonoItem::Fn(ref instance) = item {\n+                let did = instance.def_id();\n+                if !visited.insert(did) {\n+                    continue;\n+                }\n+                for scope in &tcx.instance_mir(instance.def).source_scopes {\n+                    if let Some((ref inlined, _)) = scope.inlined {\n+                        result.insert(inlined.def_id());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    tcx.arena.alloc(result)\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     providers.collect_and_partition_mono_items = collect_and_partition_mono_items;\n+    providers.codegened_and_inlined_items = codegened_and_inlined_items;\n \n     providers.is_codegened_item = |tcx, def_id| {\n         let (all_mono_items, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);"}, {"sha": "de8447f1974e7f038f09a56f6e7382541dc23862", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -1,8 +1,7 @@\n use super::*;\n \n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{self, Coverage, CoverageInfo, Location};\n+use rustc_middle::mir::{self, Body, Coverage, CoverageInfo};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n@@ -85,10 +84,21 @@ impl CoverageVisitor {\n             }\n         }\n     }\n-}\n \n-impl Visitor<'_> for CoverageVisitor {\n-    fn visit_coverage(&mut self, coverage: &Coverage, _location: Location) {\n+    fn visit_body(&mut self, body: &Body<'_>) {\n+        for bb_data in body.basic_blocks().iter() {\n+            for statement in bb_data.statements.iter() {\n+                if let StatementKind::Coverage(box ref coverage) = statement.kind {\n+                    if is_inlined(body, statement) {\n+                        continue;\n+                    }\n+                    self.visit_coverage(coverage);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_coverage(&mut self, coverage: &Coverage) {\n         if self.add_missing_operands {\n             match coverage.kind {\n                 CoverageKind::Expression { lhs, rhs, .. } => {\n@@ -129,10 +139,14 @@ fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo\n }\n \n fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n-    for bb_data in mir_body(tcx, def_id).basic_blocks().iter() {\n+    let body = mir_body(tcx, def_id);\n+    for bb_data in body.basic_blocks().iter() {\n         for statement in bb_data.statements.iter() {\n             if let StatementKind::Coverage(box ref coverage) = statement.kind {\n                 if let Some(code_region) = coverage.code_region.as_ref() {\n+                    if is_inlined(body, statement) {\n+                        continue;\n+                    }\n                     return Some(code_region.file_name);\n                 }\n             }\n@@ -151,17 +165,26 @@ fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n }\n \n fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n-    mir_body(tcx, def_id)\n-        .basic_blocks()\n+    let body = mir_body(tcx, def_id);\n+    body.basic_blocks()\n         .iter()\n         .map(|data| {\n             data.statements.iter().filter_map(|statement| match statement.kind {\n                 StatementKind::Coverage(box ref coverage) => {\n-                    coverage.code_region.as_ref() // may be None\n+                    if is_inlined(body, statement) {\n+                        None\n+                    } else {\n+                        coverage.code_region.as_ref() // may be None\n+                    }\n                 }\n                 _ => None,\n             })\n         })\n         .flatten()\n         .collect()\n }\n+\n+fn is_inlined(body: &Body<'_>, statement: &Statement<'_>) -> bool {\n+    let scope_data = &body.source_scopes[statement.source_info.scope];\n+    scope_data.inlined.is_some() || scope_data.inlined_parent_scope.is_some()\n+}"}, {"sha": "12fdbd6582e287e62de6f426b850cda61b1bb89e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -39,15 +39,6 @@ struct CallSite<'tcx> {\n \n /// Returns true if MIR inlining is enabled in the current compilation session.\n crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n-    if tcx.sess.opts.debugging_opts.instrument_coverage {\n-        // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n-        // counters can be invalidated, such as by merging coverage counter statements from\n-        // a pre-inlined function into a different function. This kind of change is invalid,\n-        // so inlining must be skipped. Note: This check is performed here so inlining can\n-        // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n-        return false;\n-    }\n-\n     if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n         return enabled;\n     }"}, {"sha": "75078a12311630b4c8fde27b58752b5f3a6cc6a3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -1937,25 +1937,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n             Some(SymbolManglingVersion::V0) => {}\n         }\n-\n-        if let Some(mir_opt_level) = debugging_opts.mir_opt_level {\n-            if mir_opt_level > 1 {\n-                // Functions inlined during MIR transform can, at best, make it impossible to\n-                // effectively cover inlined functions, and, at worst, break coverage map generation\n-                // during LLVM codegen. For example, function counter IDs are only unique within a\n-                // function. Inlining after these counters are injected can produce duplicate counters,\n-                // resulting in an invalid coverage map (and ICE); so this option combination is not\n-                // allowed.\n-                early_warn(\n-                    error_format,\n-                    &format!(\n-                        \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n-                    is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\",\n-                        mir_opt_level,\n-                    ),\n-                );\n-            }\n-        }\n     }\n \n     if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {"}, {"sha": "af75ec5e24d13ad07235ffc59ee031e2c5377b56", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -82,13 +82,13 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n \t\t\t--crate-type rlib -Zinstrument-coverage\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n@@ -107,7 +107,7 @@ endif\n \t# Run it through rustdoc as well to cover doctests\n \tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n "}, {"sha": "3f9403e6f70b8166709ab3361669ebda2206316f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -1,6 +1,6 @@\n     1|       |#![allow(unused_assignments, dead_code)]\n     2|       |\n-    3|       |// require-rust-edition-2018\n+    3|       |// compile-flags: --edition=2018\n     4|       |\n     5|      1|async fn c(x: u8) -> u8 {\n     6|      1|    if x == 8 {"}, {"sha": "6148d89ed75e1d119a783b275decc47806ed1f75", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.inline.txt", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,53 @@\n+    1|       |// compile-flags: -Zinline-mir\n+    2|       |\n+    3|       |use std::fmt::Display;\n+    4|       |\n+    5|      1|fn main() {\n+    6|      1|    permutations(&['a', 'b', 'c']);\n+    7|      1|}\n+    8|       |\n+    9|       |#[inline(always)]\n+   10|      1|fn permutations<T: Copy + Display>(xs: &[T]) {\n+   11|      1|    let mut ys = xs.to_owned();\n+   12|      1|    permutate(&mut ys, 0);\n+   13|      1|}\n+   14|       |\n+   15|     16|fn permutate<T: Copy + Display>(xs: &mut [T], k: usize) {\n+   16|     16|    let n = length(xs);\n+   17|     16|    if k == n {\n+   18|      6|        display(xs);\n+   19|     10|    } else if k < n {\n+   20|     15|        for i in k..n {\n+                               ^10\n+   21|     15|            swap(xs, i, k);\n+   22|     15|            permutate(xs, k + 1);\n+   23|     15|            swap(xs, i, k);\n+   24|     15|        }\n+   25|      0|    } else {\n+   26|      0|        error();\n+   27|      0|    }\n+   28|     16|}\n+   29|       |\n+   30|     16|fn length<T>(xs: &[T]) -> usize {\n+   31|     16|    xs.len()\n+   32|     16|}\n+   33|       |\n+   34|       |#[inline]\n+   35|     30|fn swap<T: Copy>(xs: &mut [T], i: usize, j: usize) {\n+   36|     30|    let t = xs[i];\n+   37|     30|    xs[i] = xs[j];\n+   38|     30|    xs[j] = t;\n+   39|     30|}\n+   40|       |\n+   41|      6|fn display<T: Display>(xs: &[T]) {\n+   42|     18|    for x in xs {\n+   43|     18|        print!(\"{}\", x);\n+   44|     18|    }\n+   45|      6|    println!();\n+   46|      6|}\n+   47|       |\n+   48|       |#[inline(always)]\n+   49|       |fn error() {\n+   50|       |    panic!(\"error\");\n+   51|       |}\n+"}, {"sha": "bc2f673349a678569ca0d7cea802c13edbfa2550", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "b0bfa7074db940c1f078a944dc06ce9b1ae2d6dc", "filename": "src/test/run-make-fulldeps/coverage-spanview/Makefile", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -38,9 +38,7 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && \\\n-\t\t\t\techo \"--edition=2018\" \\\n-\t\t\t) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n \t\t\t--crate-type rlib \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n \t\t\t-Zinstrument-coverage \\\n@@ -70,9 +68,7 @@ endif\n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && \\\n-\t\t\t\techo \"--edition=2018\" \\\n-\t\t\t) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n \t\t\t-Zinstrument-coverage \\"}, {"sha": "6287516636ea92c35ead06b96f74e68316195e3a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.display.-------.InstrumentCoverage.0.html", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,161 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.display.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.display - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 40\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1\u298a</span>fn display&lt;T: Display&gt;(xs: &amp;[T]) <span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:9-42:10: @8[1]: _13 = ((_9 as Some).0: &amp;T)\n+42:9-42:10: @8[3]: _14 = _13\n+42:9-42:10: @8[4]: _7 = move _14\n+42:9-42:10: @8[5]: _8 = const ()\n+42:9-42:10: @8[13]: FakeRead(ForLet, _16)\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>x<span class=\"annotation\">\u2989@6,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>xs {</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\">        print!(\"{}\", x);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\">    }<span class=\"annotation\">\u2989@6,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:5-45:16: @5[13]: _46 = const display::&lt;T&gt;::promoted[1]\n+45:5-45:16: @5[14]: _38 = &amp;(*_46)\n+45:5-45:16: @5[15]: _37 = &amp;(*_38)\n+45:5-45:16: @5[16]: _36 = move _37 as &amp;[&amp;str] (Pointer(Unsize))\n+45:5-45:16: @5[22]: _44 = ()\n+45:5-45:16: @5[23]: FakeRead(ForMatchedPlace, _44)\n+45:5-45:16: @5[24]: _45 = const display::&lt;T&gt;::promoted[0]\n+45:5-45:16: @5[25]: _42 = &amp;(*_45)\n+45:5-45:16: @5[26]: _41 = &amp;(*_42)\n+45:5-45:16: @5[27]: _40 = move _41 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+45:5-45:16: @5.Call: _35 = std::fmt::Arguments::new_v1(move _36, move _40) -&gt; [return: bb12, unwind: bb14]\n+45:5-45:16: @12.Call: _34 = std::io::_print(move _35) -&gt; [return: bb13, unwind: bb14]\n+46:2-46:2: @13.Return: return\"><span class=\"annotation\">@5,12,13\u298a</span>println!();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"45:5-45:16: @5[13]: _46 = const display::&lt;T&gt;::promoted[1]\n+45:5-45:16: @5[14]: _38 = &amp;(*_46)\n+45:5-45:16: @5[15]: _37 = &amp;(*_38)\n+45:5-45:16: @5[16]: _36 = move _37 as &amp;[&amp;str] (Pointer(Unsize))\n+45:5-45:16: @5[22]: _44 = ()\n+45:5-45:16: @5[23]: FakeRead(ForMatchedPlace, _44)\n+45:5-45:16: @5[24]: _45 = const display::&lt;T&gt;::promoted[0]\n+45:5-45:16: @5[25]: _42 = &amp;(*_45)\n+45:5-45:16: @5[26]: _41 = &amp;(*_42)\n+45:5-45:16: @5[27]: _40 = move _41 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+45:5-45:16: @5.Call: _35 = std::fmt::Arguments::new_v1(move _36, move _40) -&gt; [return: bb12, unwind: bb14]\n+45:5-45:16: @12.Call: _34 = std::io::_print(move _35) -&gt; [return: bb13, unwind: bb14]\n+46:2-46:2: @13.Return: return\">}<span class=\"annotation\">\u2989@5,12,13</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "bbf19c3e446f9896f191eab7de19ffc610799fc3", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.error.-------.InstrumentCoverage.0.html", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,79 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.error.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.error - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 48\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\"><span class=\"annotation\">@0,1\u298a</span>fn error() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\">    panic!(\"error\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "8e8efb6d9f6b1a21fc1a6e6481def8ae4f9273dd", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.length.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.length.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.length - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 29\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>fn length&lt;T&gt;(xs: &amp;[T]) -&gt; usize {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\">    xs.len()</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4ec2e9beede309c19f08d52f2c6274a9399365ff", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,94 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\">    permutations(&amp;['a', 'b', 'c']);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "fd72973ccd076f4e821da4a0f162e8c8ca668bea", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutate.-------.InstrumentCoverage.0.html", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,183 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutate.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.permutate - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 14\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\"><span class=\"annotation\">@0,1\u298a</span>fn permutate&lt;T: Copy + Display&gt;(xs: &amp;mut [T], k: usize) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\">    let n = length(xs);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\">    if k == n<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\"><span class=\"annotation\">@2,4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\">        display(xs);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\">    }<span class=\"annotation\">\u2989@2,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:15-19:16: @3[2]: _11 = _2\n+19:19-19:20: @3[4]: _12 = _3\n+19:15-19:20: @3[5]: _10 = Lt(move _11, move _12)\"><span class=\"annotation\">@3\u298a</span>k &lt; n<span class=\"annotation\">\u2989@3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @14[1]: _25 = ((_21 as Some).0: usize)\n+20:13-20:14: @14[3]: _26 = _25\n+20:13-20:14: @14[4]: _19 = move _26\n+20:13-20:14: @14[5]: _20 = const ()\n+20:13-20:14: @14[13]: FakeRead(ForLet, _28)\"><span class=\"annotation\">@12,14,15,16,17,18\u298a</span>i<span class=\"annotation\">\u2989@12,14,15,16,17,18</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:18-20:19: @5[3]: _15 = _2\n+20:21-20:22: @5[5]: _16 = _3\"><span class=\"annotation\">@5,7\u298a</span>k..n<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\"><span class=\"annotation\">@12,14,15,16,17,18\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            swap(xs, i, k);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            permutate(xs, k + 1);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            swap(xs, i, k);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">        }<span class=\"annotation\">\u2989@12,14,15,16,17,18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\"><span class=\"annotation\">@6,19\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\">        error();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@6,19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @21.Return: return\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4bfd22f3cd9031171fcfb65c02ffd08134074700", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutations.-------.InstrumentCoverage.0.html", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,113 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutations.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.permutations - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 9\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>fn permutations&lt;T: Copy + Display&gt;(xs: &amp;[T]) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">    let mut ys = xs.to_owned();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">    permutate(&amp;mut ys, 0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4c3f63093d30e5e2aa381b9f1c186f2fce61a85a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.swap.-------.InstrumentCoverage.0.html", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,173 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.swap.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.swap - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 34\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>fn swap&lt;T: Copy&gt;(xs: &amp;mut [T], i: usize, j: usize) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    let t = xs[i];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    xs[i] = xs[j];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    xs[j] = t;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "d5ec32deac1252ff08f5d67fa699fdec759940ef", "filename": "src/test/run-make-fulldeps/coverage/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_assignments, dead_code)]\n \n-// require-rust-edition-2018\n+// compile-flags: --edition=2018\n \n async fn c(x: u8) -> u8 {\n     if x == 8 {"}, {"sha": "9cfab9ddbadf2e70cf4ef7f695bbe17186c6f9ed", "filename": "src/test/run-make-fulldeps/coverage/inline.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b688b694d083b94ed19c8c93fb321a52ca98d4d9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs?ref=b688b694d083b94ed19c8c93fb321a52ca98d4d9", "patch": "@@ -0,0 +1,51 @@\n+// compile-flags: -Zinline-mir\n+\n+use std::fmt::Display;\n+\n+fn main() {\n+    permutations(&['a', 'b', 'c']);\n+}\n+\n+#[inline(always)]\n+fn permutations<T: Copy + Display>(xs: &[T]) {\n+    let mut ys = xs.to_owned();\n+    permutate(&mut ys, 0);\n+}\n+\n+fn permutate<T: Copy + Display>(xs: &mut [T], k: usize) {\n+    let n = length(xs);\n+    if k == n {\n+        display(xs);\n+    } else if k < n {\n+        for i in k..n {\n+            swap(xs, i, k);\n+            permutate(xs, k + 1);\n+            swap(xs, i, k);\n+        }\n+    } else {\n+        error();\n+    }\n+}\n+\n+fn length<T>(xs: &[T]) -> usize {\n+    xs.len()\n+}\n+\n+#[inline]\n+fn swap<T: Copy>(xs: &mut [T], i: usize, j: usize) {\n+    let t = xs[i];\n+    xs[i] = xs[j];\n+    xs[j] = t;\n+}\n+\n+fn display<T: Display>(xs: &[T]) {\n+    for x in xs {\n+        print!(\"{}\", x);\n+    }\n+    println!();\n+}\n+\n+#[inline(always)]\n+fn error() {\n+    panic!(\"error\");\n+}"}, {"sha": "8ed7f25d2bbdbd79dbe9a8cee50b24f8ab3e2649", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs?ref=c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b", "patch": "@@ -1,21 +0,0 @@\n-// Ensures -Zmir-opt-level=3 (specifically, inlining) is not allowed with -Zinstrument-coverage.\n-// Regression test for issue #80060.\n-//\n-// needs-profiler-support\n-// build-pass\n-// compile-flags: -Zmir-opt-level=3 -Zinstrument-coverage\n-#[inline(never)]\n-fn foo() {}\n-\n-pub fn baz() {\n-    bar();\n-}\n-\n-#[inline(always)]\n-fn bar() {\n-    foo();\n-}\n-\n-fn main() {\n-    bar();\n-}"}, {"sha": "d482afc395d19623582b3ceabf07d5c5a19e2d2f", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr?ref=c99200fa5370d1eecb16e29bd9e1ee9e1d844e8b", "patch": "@@ -1,2 +0,0 @@\n-warning: `-Z mir-opt-level=3` (or any level > 1) enables function inlining, which is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\n-"}]}