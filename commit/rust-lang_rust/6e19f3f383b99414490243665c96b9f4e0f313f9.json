{"sha": "6e19f3f383b99414490243665c96b9f4e0f313f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMTlmM2YzODNiOTk0MTQ0OTAyNDM2NjVjOTZiOWY0ZTBmMzEzZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-06T17:03:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-06T17:03:11Z"}, "message": "Auto merge of #64230 - Centril:rollup-vxyczjq, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #63565 (Rust 2018: NLL migrate mode => hard error)\n - #63969 (Add missing examples for Option type)\n - #64067 (Remove no-prefer-dynamic from valgrind tests)\n - #64166 (Better way of conditioning the sanitizer builds)\n - #64189 (annotate-snippet emitter: Deal with multispans from macros, too)\n - #64202 (Fixed grammar/style in some error messages)\n - #64206 (annotate-snippet emitter: Update an issue number)\n - #64208 (it's more pythonic to use 'is not None' in python files)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7bf4730a52fc24c4b8327c6ece22ad0bbb2b6fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bf4730a52fc24c4b8327c6ece22ad0bbb2b6fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e19f3f383b99414490243665c96b9f4e0f313f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e19f3f383b99414490243665c96b9f4e0f313f9", "html_url": "https://github.com/rust-lang/rust/commit/6e19f3f383b99414490243665c96b9f4e0f313f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e19f3f383b99414490243665c96b9f4e0f313f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "html_url": "https://github.com/rust-lang/rust/commit/4894123d21ed4b153a2e5c32c0870cb2d97f9b46"}, {"sha": "ee54499be420943c9c15ff2f7be6d6f738fd65f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee54499be420943c9c15ff2f7be6d6f738fd65f3", "html_url": "https://github.com/rust-lang/rust/commit/ee54499be420943c9c15ff2f7be6d6f738fd65f3"}], "stats": {"total": 1119, "additions": 581, "deletions": 538}, "files": [{"sha": "179cd488be732ffcd5609e88680f7110c735d1df", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -668,7 +668,7 @@ def check_submodule(self, module, slow_submodules):\n     def update_submodule(self, module, checked_out, recorded_submodules):\n         module_path = os.path.join(self.rust_root, module)\n \n-        if checked_out != None:\n+        if checked_out is not None:\n             default_encoding = sys.getdefaultencoding()\n             checked_out = checked_out.communicate()[0].decode(default_encoding).strip()\n             if recorded_submodules[module] == checked_out:"}, {"sha": "9a964457ef285b630ad8bcf31fa5dc9c6b32388b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -212,6 +212,7 @@ pub fn std_cargo(builder: &Builder<'_>,\n                 emscripten: false,\n             });\n             cargo.env(\"LLVM_CONFIG\", llvm_config);\n+            cargo.env(\"RUSTC_BUILD_SANITIZERS\", \"1\");\n         }\n \n         cargo.arg(\"--features\").arg(features)"}, {"sha": "79bd04b724390dd297b859fe367b8f5b93838e13", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1110,6 +1110,18 @@ impl<T: Deref> Option<T> {\n     /// to the original one, additionally coercing the contents via [`Deref`].\n     ///\n     /// [`Deref`]: ../../std/ops/trait.Deref.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inner_deref)]\n+    ///\n+    /// let x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref(), Some(\"hey\"));\n+    ///\n+    /// let x: Option<String> = None;\n+    /// assert_eq!(x.as_deref(), None);\n+    /// ```\n     pub fn as_deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n@@ -1121,6 +1133,18 @@ impl<T: DerefMut> Option<T> {\n     ///\n     /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n     /// the inner type's `Deref::Target` type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inner_deref)]\n+    ///\n+    /// let mut x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref_mut().map(|x| {\n+    ///     x.make_ascii_uppercase();\n+    ///     x\n+    /// }), Some(\"HEY\".to_owned().as_mut_str()));\n+    /// ```\n     pub fn as_deref_mut(&mut self) -> Option<&mut T::Target> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n@@ -1199,6 +1223,13 @@ impl<T: Clone> Clone for Option<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n     /// Returns [`None`][Option::None].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let opt: Option<u32> = Option::default();\n+    /// assert!(opt.is_none());\n+    /// ```\n     #[inline]\n     fn default() -> Option<T> { None }\n }"}, {"sha": "4e8b4ecad0200c9a7afcf2dadbacbc57286f5b40", "filename": "src/libcore/unicode/printable.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibcore%2Funicode%2Fprintable.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibcore%2Funicode%2Fprintable.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.py?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -60,7 +60,7 @@ def get_codepoints(f):\n         yield Codepoint(codepoint, class_)\n         prev_codepoint = codepoint\n \n-    if class_first != None:\n+    if class_first is not None:\n         raise ValueError(\"Missing Last after First\")\n \n     for c in range(prev_codepoint + 1, NUM_CODEPOINTS):"}, {"sha": "589a021241d948d3debe07e76ad29d2d0a023e86", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -430,13 +430,13 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n         match self {\n             PointerOutOfBounds { ptr, msg, allocation_size } => {\n                 write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n-                          but is outside bounds of allocation {} which has size {}\",\n+                           but is outside bounds of allocation {} which has size {}\",\n                     msg, ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n             },\n             ValidationFailure(ref err) => {\n                 write!(f, \"type validation failed: {}\", err)\n             }\n-            NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n+            NoMirFor(ref func) => write!(f, \"no MIR for `{}`\", func),\n             FunctionAbiMismatch(caller_abi, callee_abi) =>\n                 write!(f, \"tried to call a function with ABI {:?} using caller ABI {:?}\",\n                     callee_abi, caller_abi),\n@@ -451,9 +451,9 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n             FunctionArgCountMismatch =>\n                 write!(f, \"tried to call a function with incorrect number of arguments\"),\n             ReallocatedWrongMemoryKind(ref old, ref new) =>\n-                write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n+                write!(f, \"tried to reallocate memory from `{}` to `{}`\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n-                write!(f, \"tried to deallocate {} memory but gave {} as the kind\", old, new),\n+                write!(f, \"tried to deallocate `{}` memory but gave `{}` as the kind\", old, new),\n             InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             AlignmentCheckFailed { required, has } =>\n@@ -462,7 +462,7 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n             TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n             PathNotFound(ref path) =>\n-                write!(f, \"Cannot find path {:?}\", path),\n+                write!(f, \"cannot find path {:?}\", path),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n@@ -525,7 +525,7 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n             InvalidBoolOp(_) =>\n                 write!(f, \"invalid boolean operation\"),\n             UnterminatedCString(_) =>\n-                write!(f, \"attempted to get length of a null terminated string, but no null \\\n+                write!(f, \"attempted to get length of a null-terminated string, but no null \\\n                     found before end of allocation\"),\n             ReadUndefBytes(_) =>\n                 write!(f, \"attempted to read undefined bytes\"),"}, {"sha": "296c6ad19c1cf9e4e2fa947cb5c98c326335715e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1998,7 +1998,7 @@ pub fn parse_error_format(\n             Some(arg) => early_error(\n                 ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n                 &format!(\n-                    \"argument for --error-format must be `human`, `json` or \\\n+                    \"argument for `--error-format` must be `human`, `json` or \\\n                      `short` (instead was `{}`)\",\n                     arg\n                 ),\n@@ -2037,7 +2037,7 @@ pub fn build_session_options_and_crate_config(\n             early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n-                    \"argument for --edition must be one of: \\\n+                    \"argument for `--edition` must be one of: \\\n                      {}. (instead was `{}`)\",\n                     EDITION_NAME_LIST,\n                     arg\n@@ -2051,7 +2051,7 @@ pub fn build_session_options_and_crate_config(\n         early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n-                    \"Edition {} is unstable and only \\\n+                    \"edition {} is unstable and only \\\n                      available for nightly builds of rustc.\",\n                     edition,\n                 )\n@@ -2075,14 +2075,14 @@ pub fn build_session_options_and_crate_config(\n         if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n             early_error(\n                 ErrorOutputType::Json { pretty: false, json_rendered },\n-                \"--error-format=pretty-json is unstable\",\n+                \"`--error-format=pretty-json` is unstable\",\n             );\n         }\n         if let ErrorOutputType::HumanReadable(HumanReadableErrorType::AnnotateSnippet(_)) =\n             error_format {\n             early_error(\n                 ErrorOutputType::Json { pretty: false, json_rendered },\n-                \"--error-format=human-annotate-rs is unstable\",\n+                \"`--error-format=human-annotate-rs` is unstable\",\n             );\n         }\n     }\n@@ -2132,8 +2132,8 @@ pub fn build_session_options_and_crate_config(\n                         early_warn(\n                             error_format,\n                             &format!(\n-                                \"--emit={} with -o incompatible with \\\n-                                 -C codegen-units=N for N > 1\",\n+                                \"`--emit={}` with `-o` incompatible with \\\n+                                 `-C codegen-units=N` for N > 1\",\n                                 ot\n                             ),\n                         );\n@@ -2153,21 +2153,21 @@ pub fn build_session_options_and_crate_config(\n     if debugging_opts.threads == Some(0) {\n         early_error(\n             error_format,\n-            \"Value for threads must be a positive nonzero integer\",\n+            \"value for threads must be a positive non-zero integer\",\n         );\n     }\n \n     if debugging_opts.threads.unwrap_or(1) > 1 && debugging_opts.fuel.is_some() {\n         early_error(\n             error_format,\n-            \"Optimization fuel is incompatible with multiple threads\",\n+            \"optimization fuel is incompatible with multiple threads\",\n         );\n     }\n \n     if codegen_units == Some(0) {\n         early_error(\n             error_format,\n-            \"Value for codegen units must be a positive nonzero integer\",\n+            \"value for codegen units must be a positive non-zero integer\",\n         );\n     }\n "}, {"sha": "c759981b8e8c9de8ee4a209434e9190eb0e64185", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -368,7 +368,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     match self.layout_of(param_env.and(ty)) {\n                         Ok(layout) => &layout.abi,\n                         Err(err) => bug!(\n-                            \"Error: {}\\n while computing layout for type {:?}\", err, ty\n+                            \"error: {}\\n while computing layout for type {:?}\", err, ty\n                         )\n                     }\n                 };\n@@ -384,7 +384,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         self.sess.delay_span_bug(\n                             self.def_span(method.def_id),\n                             &format!(\n-                                \"Receiver when Self = () should have a Scalar ABI, found {:?}\",\n+                                \"receiver when `Self = ()` should have a Scalar ABI; found {:?}\",\n                                 abi\n                             ),\n                         );\n@@ -406,7 +406,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         self.sess.delay_span_bug(\n                             self.def_span(method.def_id),\n                             &format!(\n-                                \"Receiver when Self = {} should have a ScalarPair ABI, found {:?}\",\n+                                \"receiver when `Self = {}` should have a ScalarPair ABI; \\\n+                                 found {:?}\",\n                                 trait_object_ty, abi\n                             ),\n                         );"}, {"sha": "cc856ba68fbb7f1e86053adc8f8818f6e8237ef7", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,9 @@ use build_helper::sanitizer_lib_boilerplate;\n use cmake::Config;\n \n fn main() {\n+    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n+        return;\n+    }\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n         build_helper::restore_library_path();\n "}, {"sha": "39b906141f74c2bc5ba633a3003b0ab7f4f735be", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -30,10 +30,14 @@ pub struct AnnotateSnippetEmitterWriter {\n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n-        let children = db.children.clone();\n-        let (primary_span, suggestions) = self.primary_span_formatted(&db);\n+        let mut children = db.children.clone();\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n-        // FIXME(#59346): Add `fix_multispans_in_std_macros` function from emitter.rs\n+        self.fix_multispans_in_std_macros(&self.source_map,\n+                                          &mut primary_span,\n+                                          &mut children,\n+                                          &db.level,\n+                                          db.handler.flags.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    db.message(),\n@@ -105,7 +109,7 @@ impl<'a>  DiagnosticConverter<'a> {\n         annotated_files: Vec<FileWithAnnotatedLines>,\n         primary_lo: Loc\n     ) -> Vec<Slice> {\n-        // FIXME(#59346): Provide a test case where `annotated_files` is > 1\n+        // FIXME(#64205): Provide a test case where `annotated_files` is > 1\n         annotated_files.iter().flat_map(|annotated_file| {\n             annotated_file.lines.iter().map(|line| {\n                 let line_source = Self::source_string(annotated_file.file.clone(), &line);"}, {"sha": "0ce69eecc6b1ead2068c18a7c9e6805a45282649", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 129, "deletions": 122, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -247,14 +247,142 @@ pub trait Emitter {\n             (primary_span, &db.suggestions)\n         }\n     }\n+\n+    // This does a small \"fix\" for multispans by looking to see if it can find any that\n+    // point directly at <*macros>. Since these are often difficult to read, this\n+    // will change the span to point at the use site.\n+    fn fix_multispans_in_std_macros(&self,\n+                                    source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                    span: &mut MultiSpan,\n+                                    children: &mut Vec<SubDiagnostic>,\n+                                    level: &Level,\n+                                    backtrace: bool) {\n+        let mut spans_updated = self.fix_multispan_in_std_macros(source_map, span, backtrace);\n+        for child in children.iter_mut() {\n+            spans_updated |= self.fix_multispan_in_std_macros(\n+                                 source_map,\n+                                 &mut child.span,\n+                                 backtrace\n+                             );\n+        }\n+        let msg = if level == &Error {\n+            \"this error originates in a macro outside of the current crate \\\n+             (in Nightly builds, run with -Z external-macro-backtrace \\\n+              for more info)\".to_string()\n+        } else {\n+            \"this warning originates in a macro outside of the current crate \\\n+             (in Nightly builds, run with -Z external-macro-backtrace \\\n+              for more info)\".to_string()\n+        };\n+\n+        if spans_updated {\n+            children.push(SubDiagnostic {\n+                level: Level::Note,\n+                message: vec![\n+                    (msg,\n+                     Style::NoStyle),\n+                ],\n+                span: MultiSpan::new(),\n+                render_span: None,\n+            });\n+        }\n+    }\n+\n+    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n+    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n+    // <*macros> to their corresponding use site.\n+    fn fix_multispan_in_std_macros(&self,\n+                                   source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                   span: &mut MultiSpan,\n+                                   always_backtrace: bool) -> bool {\n+        let mut spans_updated = false;\n+\n+        if let Some(ref sm) = source_map {\n+            let mut before_after: Vec<(Span, Span)> = vec![];\n+            let mut new_labels: Vec<(Span, String)> = vec![];\n+\n+            // First, find all the spans in <*macros> and point instead at their use site\n+            for sp in span.primary_spans() {\n+                if sp.is_dummy() {\n+                    continue;\n+                }\n+                let call_sp = sm.call_span_if_macro(*sp);\n+                if call_sp != *sp && !always_backtrace {\n+                    before_after.push((*sp, call_sp));\n+                }\n+                let backtrace_len = sp.macro_backtrace().len();\n+                for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n+                    // Only show macro locations that are local\n+                    // and display them like a span_note\n+                    if trace.def_site_span.is_dummy() {\n+                        continue;\n+                    }\n+                    if always_backtrace {\n+                        new_labels.push((trace.def_site_span,\n+                                            format!(\"in this expansion of `{}`{}\",\n+                                                    trace.macro_decl_name,\n+                                                    if backtrace_len > 2 {\n+                                                        // if backtrace_len == 1 it'll be pointed\n+                                                        // at by \"in this macro invocation\"\n+                                                        format!(\" (#{})\", i + 1)\n+                                                    } else {\n+                                                        String::new()\n+                                                    })));\n+                    }\n+                    // Check to make sure we're not in any <*macros>\n+                    if !sm.span_to_filename(trace.def_site_span).is_macros() &&\n+                        !trace.macro_decl_name.starts_with(\"desugaring of \") &&\n+                        !trace.macro_decl_name.starts_with(\"#[\") ||\n+                        always_backtrace {\n+                        new_labels.push((trace.call_site,\n+                                            format!(\"in this macro invocation{}\",\n+                                                    if backtrace_len > 2 && always_backtrace {\n+                                                        // only specify order when the macro\n+                                                        // backtrace is multiple levels deep\n+                                                        format!(\" (#{})\", i + 1)\n+                                                    } else {\n+                                                        String::new()\n+                                                    })));\n+                        if !always_backtrace {\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+            for (label_span, label_text) in new_labels {\n+                span.push_span_label(label_span, label_text);\n+            }\n+            for sp_label in span.span_labels() {\n+                if sp_label.span.is_dummy() {\n+                    continue;\n+                }\n+                if sm.span_to_filename(sp_label.span.clone()).is_macros() &&\n+                    !always_backtrace\n+                {\n+                    let v = sp_label.span.macro_backtrace();\n+                    if let Some(use_site) = v.last() {\n+                        before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n+                    }\n+                }\n+            }\n+            // After we have them, make sure we replace these 'bad' def sites with their use sites\n+            for (before, after) in before_after {\n+                span.replace(before, after);\n+                spans_updated = true;\n+            }\n+        }\n+\n+        spans_updated\n+    }\n }\n \n impl Emitter for EmitterWriter {\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n-        self.fix_multispans_in_std_macros(&mut primary_span,\n+        self.fix_multispans_in_std_macros(&self.sm,\n+                                          &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n                                           db.handler.flags.external_macro_backtrace);\n@@ -919,127 +1047,6 @@ impl EmitterWriter {\n         max\n     }\n \n-    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n-    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n-    // <*macros> to their corresponding use site.\n-    fn fix_multispan_in_std_macros(&mut self,\n-                                   span: &mut MultiSpan,\n-                                   always_backtrace: bool) -> bool {\n-        let mut spans_updated = false;\n-\n-        if let Some(ref sm) = self.sm {\n-            let mut before_after: Vec<(Span, Span)> = vec![];\n-            let mut new_labels: Vec<(Span, String)> = vec![];\n-\n-            // First, find all the spans in <*macros> and point instead at their use site\n-            for sp in span.primary_spans() {\n-                if sp.is_dummy() {\n-                    continue;\n-                }\n-                let call_sp = sm.call_span_if_macro(*sp);\n-                if call_sp != *sp && !always_backtrace {\n-                    before_after.push((*sp, call_sp));\n-                }\n-                let backtrace_len = sp.macro_backtrace().len();\n-                for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n-                    // Only show macro locations that are local\n-                    // and display them like a span_note\n-                    if trace.def_site_span.is_dummy() {\n-                        continue;\n-                    }\n-                    if always_backtrace {\n-                        new_labels.push((trace.def_site_span,\n-                                            format!(\"in this expansion of `{}`{}\",\n-                                                    trace.macro_decl_name,\n-                                                    if backtrace_len > 2 {\n-                                                        // if backtrace_len == 1 it'll be pointed\n-                                                        // at by \"in this macro invocation\"\n-                                                        format!(\" (#{})\", i + 1)\n-                                                    } else {\n-                                                        String::new()\n-                                                    })));\n-                    }\n-                    // Check to make sure we're not in any <*macros>\n-                    if !sm.span_to_filename(trace.def_site_span).is_macros() &&\n-                        !trace.macro_decl_name.starts_with(\"desugaring of \") &&\n-                        !trace.macro_decl_name.starts_with(\"#[\") ||\n-                        always_backtrace {\n-                        new_labels.push((trace.call_site,\n-                                            format!(\"in this macro invocation{}\",\n-                                                    if backtrace_len > 2 && always_backtrace {\n-                                                        // only specify order when the macro\n-                                                        // backtrace is multiple levels deep\n-                                                        format!(\" (#{})\", i + 1)\n-                                                    } else {\n-                                                        String::new()\n-                                                    })));\n-                        if !always_backtrace {\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-            for (label_span, label_text) in new_labels {\n-                span.push_span_label(label_span, label_text);\n-            }\n-            for sp_label in span.span_labels() {\n-                if sp_label.span.is_dummy() {\n-                    continue;\n-                }\n-                if sm.span_to_filename(sp_label.span.clone()).is_macros() &&\n-                    !always_backtrace\n-                {\n-                    let v = sp_label.span.macro_backtrace();\n-                    if let Some(use_site) = v.last() {\n-                        before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n-                    }\n-                }\n-            }\n-            // After we have them, make sure we replace these 'bad' def sites with their use sites\n-            for (before, after) in before_after {\n-                span.replace(before, after);\n-                spans_updated = true;\n-            }\n-        }\n-\n-        spans_updated\n-    }\n-\n-    // This does a small \"fix\" for multispans by looking to see if it can find any that\n-    // point directly at <*macros>. Since these are often difficult to read, this\n-    // will change the span to point at the use site.\n-    fn fix_multispans_in_std_macros(&mut self,\n-                                    span: &mut MultiSpan,\n-                                    children: &mut Vec<SubDiagnostic>,\n-                                    level: &Level,\n-                                    backtrace: bool) {\n-        let mut spans_updated = self.fix_multispan_in_std_macros(span, backtrace);\n-        for child in children.iter_mut() {\n-            spans_updated |= self.fix_multispan_in_std_macros(&mut child.span, backtrace);\n-        }\n-        let msg = if level == &Error {\n-            \"this error originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\".to_string()\n-        } else {\n-            \"this warning originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\".to_string()\n-        };\n-\n-        if spans_updated {\n-            children.push(SubDiagnostic {\n-                level: Level::Note,\n-                message: vec![\n-                    (msg,\n-                     Style::NoStyle),\n-                ],\n-                span: MultiSpan::new(),\n-                render_span: None,\n-            });\n-        }\n-    }\n-\n     /// Adds a left margin to every line but the first, given a padding length and the label being\n     /// displayed, keeping the provided highlighting.\n     fn msg_to_buffer(&self,"}, {"sha": "d5f3e37dea51cc42e6f0cc4cf7512ee01821a449", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,9 @@ use build_helper::sanitizer_lib_boilerplate;\n use cmake::Config;\n \n fn main() {\n+    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n+        return;\n+    }\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n         build_helper::restore_library_path();\n "}, {"sha": "bfc7050ebf71cbf15d5b5d8991a80020a6edc7d0", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -98,7 +98,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &self.describe_place_with_options(moved_place, IncludingDowncast(true))\n                     .unwrap_or_else(|| \"_\".to_owned()),\n             );\n-            err.span_label(span, format!(\"use of possibly uninitialized {}\", item_msg));\n+            err.span_label(span, format!(\"use of possibly-uninitialized {}\", item_msg));\n \n             use_spans.var_span_label(\n                 &mut err,"}, {"sha": "9ad7cbc478bb0644f61d0b76b22eb0e3b05d7abf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -164,8 +164,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n         };\n \n     let mdpe = MoveDataParamEnv {\n-        move_data: move_data,\n-        param_env: param_env,\n+        move_data,\n+        param_env,\n     };\n \n     let dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n@@ -259,7 +259,10 @@ fn do_mir_borrowck<'a, 'tcx>(\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n-        disable_error_downgrading: false,\n+        // Only downgrade errors on Rust 2015 and refuse to do so on Rust 2018.\n+        // FIXME(Centril): In Rust 1.40.0, refuse doing so on 2015 as well and\n+        // proceed to throwing out the migration infrastructure.\n+        disable_error_downgrading: body.span.rust_2018(),\n         nonlexical_regioncx: regioncx,\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),"}, {"sha": "db679024dc5a292f4d3a475d3218e3165599d4e2", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -533,8 +533,8 @@ pub fn error_to_const_error<'mir, 'tcx>(\n \n pub fn note_on_undefined_behavior_error() -> &'static str {\n     \"The rules on what exactly is undefined behavior aren't clear, \\\n-    so this check might be overzealous. Please open an issue on the rust compiler \\\n-    repository if you believe it should not be considered undefined behavior\"\n+     so this check might be overzealous. Please open an issue on the rustc \\\n+     repository if you believe it should not be considered undefined behavior.\"\n }\n \n fn validate_and_turn_into_const<'tcx>("}, {"sha": "22432db8190204cdf01844b729d370c3730cc71d", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -748,7 +748,7 @@ It is not allowed to use or capture an uninitialized variable. For example:\n ```compile_fail,E0381\n fn main() {\n     let x: i32;\n-    let y = x; // error, use of possibly uninitialized variable\n+    let y = x; // error, use of possibly-uninitialized variable\n }\n ```\n "}, {"sha": "cf9ef55c17b3464422f7c83988e278605361178c", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -50,7 +50,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n             self,\n             span,\n             E0381,\n-            \"{} of possibly uninitialized variable: `{}`\",\n+            \"{} of possibly-uninitialized variable: `{}`\",\n             verb,\n             desc,\n         )"}, {"sha": "de1676f489a467c087b86da26b93ff51a7adcd0f", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,9 @@ use build_helper::sanitizer_lib_boilerplate;\n use cmake::Config;\n \n fn main() {\n+    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n+        return;\n+    }\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n         build_helper::restore_library_path();\n "}, {"sha": "6df9691257455af13856c02d7103e9991ffc380d", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,9 @@ use build_helper::sanitizer_lib_boilerplate;\n use cmake::Config;\n \n fn main() {\n+    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n+        return;\n+    }\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n         build_helper::restore_library_path();\n "}, {"sha": "59b936a7eb40497880462ce73127a4563770e2a9", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -982,7 +982,7 @@ impl<'a> Parser<'a> {\n                 }\n                 if self.is_do_catch_block() {\n                     let mut db = self.fatal(\"found removed `do catch` syntax\");\n-                    db.help(\"Following RFC #2388, the new non-placeholder syntax is `try`\");\n+                    db.help(\"following RFC #2388, the new non-placeholder syntax is `try`\");\n                     return Err(db);\n                 }\n                 if self.is_try_block() {"}, {"sha": "748c1a168b0b211a22a6133a58229fee08921801", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -469,7 +469,7 @@ impl<'a> Parser<'a> {\n         self.diagnostic().struct_span_warn(self.token.span, {\n             &format!(\"expected `;`, found {}\", self.this_token_descr())\n         }).note({\n-            \"This was erroneously allowed and will become a hard error in a future release\"\n+            \"this was erroneously allowed and will become a hard error in a future release\"\n         }).emit();\n     }\n }"}, {"sha": "93c47d32f92a12e5b44c20d10c8b1595a53ea729", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n #![allow(dead_code)]\n \n // check dtor calling order when casting enums."}, {"sha": "fb2b4d476355e1dbe7ca21bee6ce5c471a26cb03", "filename": "src/test/run-pass-valgrind/cleanup-auto-borrow-obj.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n // This would previously leak the Box<Trait> because we wouldn't\n // schedule cleanups when auto borrowing trait objects.\n // This program should be valgrind clean."}, {"sha": "cf8f81cf5aa7cffbacb9a5a32938ee3cc6f97f3a", "filename": "src/test/run-pass-valgrind/cleanup-stdin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n fn main() {\n     let _ = std::io::stdin();\n     let _ = std::io::stdout();"}, {"sha": "8531b8d832604379bd44ecbe5bed87ee0eda7d85", "filename": "src/test/run-pass-valgrind/down-with-thread-dtors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,4 +1,3 @@\n-// no-prefer-dynamic\n // ignore-emscripten\n \n thread_local!(static FOO: Foo = Foo);"}, {"sha": "5b8433f614567b174e7790454f024f70291acea7", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n static mut DROP_RAN: bool = false;\n \n struct Foo;"}, {"sha": "991fe00950bba873593c10832201d10a8a95cccd", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n static mut DROP_RAN: isize = 0;\n \n struct Foo;"}, {"sha": "f0c2dda5ab05b97f89b4591aa73040ca80fd49c7", "filename": "src/test/run-pass-valgrind/dst-dtor-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n #![feature(unsized_tuple_coercion)]\n \n static mut DROP_RAN: bool = false;"}, {"sha": "ad6d46f7c088658b11009df7569e4c58e50cd267", "filename": "src/test/run-pass-valgrind/dst-dtor-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,3 @@\n-// no-prefer-dynamic\n-\n #![feature(unsized_tuple_coercion)]\n \n static mut DROP_RAN: isize = 0;"}, {"sha": "a68c6f3355644695b4e03afdac489a6cacdf4cf6", "filename": "src/test/run-pass-valgrind/exit-flushes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,4 +1,3 @@\n-// no-prefer-dynamic\n // ignore-cloudabi\n // ignore-emscripten\n // ignore-sgx no processes"}, {"sha": "ea1403645a515976d75b2a1eaf0aac79e1abb2d7", "filename": "src/test/run-pass-valgrind/osx-frameworks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,4 +1,3 @@\n-// no-prefer-dynamic\n // pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]"}, {"sha": "78458ff60d4aa41fd759819009c9d930b8677ce7", "filename": "src/test/ui/asm/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n     let x: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-        //~^ ERROR use of possibly uninitialized variable: `x`\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n     }\n     foo(x);\n }"}, {"sha": "71aeda2ad4d2e8e4808d56864a26c9557c806d40", "filename": "src/test/ui/asm/asm-out-read-uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/asm-out-read-uninit.rs:22:43\n    |\n LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                           ^ use of possibly uninitialized `x`\n+   |                                           ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "6a34209d55289b09e9d02a99e622dea7f6bffcba", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -8,7 +8,7 @@ async fn no_non_guaranteed_initialization(x: usize) -> usize {\n         y = echo(10).await;\n     }\n     y\n-    //~^ use of possibly uninitialized variable: `y`\n+    //~^ use of possibly-uninitialized variable: `y`\n }\n \n async fn echo(x: usize) -> usize { x + 1 }"}, {"sha": "b9aa9924bb81551e8510ab898a7470e2415753e0", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `y`\n+error[E0381]: use of possibly-uninitialized variable: `y`\n   --> $DIR/no-non-guaranteed-initialization.rs:10:5\n    |\n LL |     y\n-   |     ^ use of possibly uninitialized `y`\n+   |     ^ use of possibly-uninitialized `y`\n \n error: aborting due to previous error\n "}, {"sha": "8a98a4b0f6bb41cdfd6ad3f17b5fc272b346971d", "filename": "src/test/ui/async-await/partial-initialization-across-await.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -11,7 +11,7 @@ async fn noop() {}\n async fn test_tuple() {\n     let mut t: (i32, i32);\n     t.0 = 42;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     noop().await;\n     t.1 = 88;\n     let _ = t;\n@@ -20,7 +20,7 @@ async fn test_tuple() {\n async fn test_tuple_struct() {\n     let mut t: T;\n     t.0 = 42;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     noop().await;\n     t.1 = 88;\n     let _ = t;\n@@ -29,7 +29,7 @@ async fn test_tuple_struct() {\n async fn test_struct() {\n     let mut t: S;\n     t.x = 42;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     noop().await;\n     t.y = 88;\n     let _ = t;"}, {"sha": "9a510c22c4b1e77e143c24308811dc6b74aff790", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,20 +1,20 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n LL |     t.0 = 42;\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-await.rs:22:5\n    |\n LL |     t.0 = 42;\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-await.rs:31:5\n    |\n LL |     t.x = 42;\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "40f1aae092dc6bd237569ec658fe50072a7ee698", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/assign_mutable_fields.rs:9:5\n    |\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/assign_mutable_fields.rs:17:5\n    |\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f11d44e2217ba9642c1e35daf12bf2edaf4bedd2", "filename": "src/test/ui/borrowck/borrowck-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: isize;\n \n     println!(\"{}\", false && { i = 5; true });\n-    println!(\"{}\", i); //~ ERROR borrow of possibly uninitialized variable: `i`\n+    println!(\"{}\", i); //~ ERROR borrow of possibly-uninitialized variable: `i`\n }"}, {"sha": "c7e357d4604f71a61139add1a416b3c8dae93dc2", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `i`\n+error[E0381]: borrow of possibly-uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n LL |     println!(\"{}\", i);\n-   |                    ^ use of possibly uninitialized `i`\n+   |                    ^ use of possibly-uninitialized `i`\n \n error: aborting due to previous error\n "}, {"sha": "c1b0f39f9366c53c05264733e6f41f34719f7acf", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -57,7 +57,7 @@ mod test_cases {\n     fn indirect_is_not_init() {\n         let x: i32;\n         unsafe {\n-            asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly uninitialized variable\n+            asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n         }\n     }\n "}, {"sha": "f85b5983accedaebbb5c72bbb374fde3982829fc", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -46,11 +46,11 @@ LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-asm.rs:60:32\n    |\n LL |             asm!(\"nop\" : \"=*r\"(x));\n-   |                                ^ use of possibly uninitialized `x`\n+   |                                ^ use of possibly-uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-asm.rs:68:31"}, {"sha": "1e7306acaee98c744e42d2eac0d56eb073cd25b3", "filename": "src/test/ui/borrowck/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,7 +1,7 @@\n fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n     let x: isize;\n-    force(|| {  //~ ERROR borrow of possibly uninitialized variable: `x`\n+    force(|| {  //~ ERROR borrow of possibly-uninitialized variable: `x`\n         println!(\"{}\", x);\n     });\n }"}, {"sha": "578f89df46ce173ca0a4293bf1abed1d3f21fba9", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n LL |     force(|| {\n-   |           ^^ use of possibly uninitialized `x`\n+   |           ^^ use of possibly-uninitialized `x`\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure\n "}, {"sha": "126d991a51c6e6963e61d9fce3f5a2cefb592f02", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n \n     return 17;\n }"}, {"sha": "bc9b25c0221fcc59dad651a328f2ebe5575956dc", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n+   |                    ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "8ccb21ae8eebfb18716846741e8135dadbf3c735", "filename": "src/test/ui/borrowck/borrowck-break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n \n     return 17;\n }"}, {"sha": "766d5cfd6348cd60dc373367100434e827d81ee7", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n+   |                    ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "ab607c2acbd4b15b595bd222f9db68edf6439cda", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -78,20 +78,20 @@ fn fu_move_after_fu_move() {\n \n fn copy_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    x.a = 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n     drop(x.a);\n }\n \n fn borrow_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    x.a = 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n     let p = &x.a;\n     drop(*p);\n }\n \n fn move_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.b = box 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    x.b = box 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n     drop(x.b);\n }\n "}, {"sha": "158b2e42f2ddfcecc0161d553f7f11651023ded0", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -108,23 +108,23 @@ LL |     let _z = A { a: 4, .. x };\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-field-sensitivity.rs:81:5\n    |\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-field-sensitivity.rs:87:5\n    |\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-field-sensitivity.rs:94:5\n    |\n LL |     x.b = box 1;\n-   |     ^^^ use of possibly uninitialized `x`\n+   |     ^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "f59bcad6f61d76f0f927115c29cce52a9967e6e5", "filename": "src/test/ui/borrowck/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -2,5 +2,5 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize; if 1 > 2 { x = 10; }\n-    foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n }"}, {"sha": "3e9d3d4f6d513bc91a4e240893ac69a71837ee59", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n LL |     foo(x);\n-   |         ^ use of possibly uninitialized `x`\n+   |         ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "c13318b16c2fa1f2f4c26ca1f1fae3c197aa4786", "filename": "src/test/ui/borrowck/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     } else {\n         x = 10;\n     }\n-    foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n }"}, {"sha": "53b8a6bba2c76263981a39260034ac7a68325dde", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n LL |     foo(x);\n-   |         ^ use of possibly uninitialized `x`\n+   |         ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "9905e420f948d307d71627c1ca514dbf6f7297f2", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let j = || -> isize {\n         let i: isize;\n-        i //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly-uninitialized variable: `i`\n     };\n     j();\n }"}, {"sha": "2d1d9bc8fa41d2734c83de893cd8b17064d64ff1", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `i`\n+error[E0381]: use of possibly-uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-called-fn-expr.rs:4:9\n    |\n LL |         i\n-   |         ^ use of possibly uninitialized `i`\n+   |         ^ use of possibly-uninitialized `i`\n \n error: aborting due to previous error\n "}, {"sha": "7dd3396c8c2cb4580a05a7a068939744cf7bfd82", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let f  = || -> isize {\n         let i: isize;\n-        i //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly-uninitialized variable: `i`\n     };\n     println!(\"{}\", f());\n }"}, {"sha": "fd8b90eda603299f6e3b307ccc2d733c532f7d94", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `i`\n+error[E0381]: use of possibly-uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-fn-expr.rs:4:9\n    |\n LL |         i\n-   |         ^ use of possibly uninitialized `i`\n+   |         ^ use of possibly-uninitialized `i`\n \n error: aborting due to previous error\n "}, {"sha": "d7ec2ed75c85c5dae6724523e1d7d78a23208f26", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -7,6 +7,6 @@ struct Point {\n fn main() {\n     let mut origin: Point;\n     origin = Point { x: 10, ..origin };\n-    //~^ ERROR use of possibly uninitialized variable: `origin` [E0381]\n+    //~^ ERROR use of possibly-uninitialized variable: `origin` [E0381]\n     origin.clone();\n }"}, {"sha": "a4c042d1c125f24b068847c130a0b196221d4601", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `origin`\n+error[E0381]: use of possibly-uninitialized variable: `origin`\n   --> $DIR/borrowck-init-in-fru.rs:9:5\n    |\n LL |     origin = Point { x: 10, ..origin };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `origin.y`\n \n error: aborting due to previous error\n "}, {"sha": "784eb8cf85b8a01c68639663d466508ab5e9a21e", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n+    v += 1; //~ ERROR use of possibly-uninitialized variable: `v`\n     v.clone();\n }\n "}, {"sha": "6c88778ae0e5a288a0e4567e21fdc0a856dbee0e", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `v`\n+error[E0381]: use of possibly-uninitialized variable: `v`\n   --> $DIR/borrowck-init-op-equal.rs:3:5\n    |\n LL |     v += 1;\n-   |     ^^^^^^ use of possibly uninitialized `v`\n+   |     ^^^^^^ use of possibly-uninitialized `v`\n \n error: aborting due to previous error\n "}, {"sha": "d9d20a2a9c14879b454c70b452cfb014fb129a6f", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let mut v: isize;\n-    v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n+    v = v + 1; //~ ERROR use of possibly-uninitialized variable: `v`\n     v.clone();\n }\n "}, {"sha": "fe09c8581df0e41c888ac2188cd0c1bb7b9d1d83", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `v`\n+error[E0381]: use of possibly-uninitialized variable: `v`\n   --> $DIR/borrowck-init-plus-equal.rs:3:9\n    |\n LL |     v = v + 1;\n-   |         ^ use of possibly uninitialized `v`\n+   |         ^ use of possibly-uninitialized `v`\n \n error: aborting due to previous error\n "}, {"sha": "58f2cadcc6573ae896085feefe21b2f6119075d2", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,15 +1,14 @@\n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:28:21\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here\n LL |     let p: &'a u8 = &*block.current;\n    |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-LL |     // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n+...\n LL |     drop(x);\n    |          - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "98fd5682277b34a98566a264bd5dc7f73aeea6f0", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,8 @@\n //\n // Therefore, for backwards-compatiblity, under borrowck=migrate the\n // NLL checks will be emitted as *warnings*.\n+//\n+// In Rust 2018, no errors will be downgraded to warnings.\n \n // NLL mode makes this compile-fail; we cannot currently encode a\n // test that is run-pass or compile-fail based on compare-mode. So\n@@ -16,7 +18,6 @@\n //[zflag]compile-flags: -Z borrowck=migrate\n //[edition]edition:2018\n //[zflag] run-pass\n-//[edition] run-pass\n \n pub struct Block<'a> {\n     current: &'a u8,\n@@ -26,6 +27,7 @@ pub struct Block<'a> {\n fn bump<'a>(mut block: &mut Block<'a>) {\n     let x = &mut block;\n     let p: &'a u8 = &*block.current;\n+    //[edition]~^ ERROR cannot borrow `*block.current` as immutable\n     // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n     drop(x);\n     drop(p);"}, {"sha": "ace336a3bf32ad6b789f5f3e2d538dd3d1743527", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,11 +1,11 @@\n warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:28:21\n+  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here\n LL |     let p: &'a u8 = &*block.current;\n    |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-LL |     // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n+...\n LL |     drop(x);\n    |          - mutable borrow later used here\n    |"}, {"sha": "81b0b80bf11b5da368505ae5ee9d407c2bd4395c", "filename": "src/test/ui/borrowck/borrowck-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: isize;\n \n     println!(\"{}\", false || { i = 5; true });\n-    println!(\"{}\", i); //~ ERROR borrow of possibly uninitialized variable: `i`\n+    println!(\"{}\", i); //~ ERROR borrow of possibly-uninitialized variable: `i`\n }"}, {"sha": "3fe8d9eededc5373b3d5c2868803333d846456f8", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `i`\n+error[E0381]: borrow of possibly-uninitialized variable: `i`\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n LL |     println!(\"{}\", i);\n-   |                    ^ use of possibly uninitialized `i`\n+   |                    ^ use of possibly-uninitialized `i`\n \n error: aborting due to previous error\n "}, {"sha": "5e5a8cdf4232bcbbc7352655f517ff5d0ac194c5", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -15,7 +15,7 @@ impl Drop for Test2 {\n fn stuff() {\n     let mut x : (Test2, Test2);\n     (x.0).0 = Some(Test);\n-    //~^ ERROR assign of possibly uninitialized variable: `x.0`\n+    //~^ ERROR assign of possibly-uninitialized variable: `x.0`\n }\n \n fn main() {"}, {"sha": "218c4f2de5bc7c6a9ebc8e22ce88b1f810f7cc00", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: assign of possibly uninitialized variable: `x.0`\n+error[E0381]: assign of possibly-uninitialized variable: `x.0`\n   --> $DIR/borrowck-partial-reinit-4.rs:17:5\n    |\n LL |     (x.0).0 = Some(Test);\n-   |     ^^^^^^^ use of possibly uninitialized `x.0`\n+   |     ^^^^^^^ use of possibly-uninitialized `x.0`\n \n error: aborting due to previous error\n "}, {"sha": "8c623356f6c6b2aba47ed2e6dbc96648fe153161", "filename": "src/test/ui/borrowck/borrowck-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,6 +1,6 @@\n fn f() -> isize {\n     let x: isize;\n-    return x; //~ ERROR use of possibly uninitialized variable: `x`\n+    return x; //~ ERROR use of possibly-uninitialized variable: `x`\n }\n \n fn main() { f(); }"}, {"sha": "bc74e8e343848f8dd52cf3c7f4f2f14feb9c5a39", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-return.rs:3:12\n    |\n LL |     return x;\n-   |            ^ use of possibly uninitialized `x`\n+   |            ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "8e4932142f0dbfc69733039a3d3591346b7abded", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-storage-dead.rs:16:17\n    |\n LL |         let _ = x + 1;\n-   |                 ^ use of possibly uninitialized `x`\n+   |                 ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "e9a389657c8fd589b9e36f9a582317fafb93208a", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let bar;\n     fn baz(_x: isize) { }\n-    baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n+    baz(bar); //~ ERROR use of possibly-uninitialized variable: `bar`\n }"}, {"sha": "f7f069b81be022720d0f0c8c4ef9d40d6b4211f8", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `bar`\n+error[E0381]: use of possibly-uninitialized variable: `bar`\n   --> $DIR/borrowck-uninit-after-item.rs:4:9\n    |\n LL |     baz(bar);\n-   |         ^^^ use of possibly uninitialized `bar`\n+   |         ^^^ use of possibly-uninitialized `bar`\n \n error: aborting due to previous error\n "}, {"sha": "9f35a4a8d83bd82e3d52c41088e6c13c8e7074bb", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `a`\n+error[E0381]: use of possibly-uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-field-access.rs:21:13\n    |\n LL |     let _ = a.x + 1;\n-   |             ^^^ use of possibly uninitialized `a.x`\n+   |             ^^^ use of possibly-uninitialized `a.x`\n \n error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:25:13"}, {"sha": "20350d61d5bb61776b56397f0b8ffbeaaca4f496", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -3,32 +3,32 @@\n \n pub fn main() {\n     let x: isize;\n-    x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x += 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x -= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x *= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x /= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x %= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x ^= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x &= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+    x |= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+    x <<= 1;    //~ ERROR use of possibly-uninitialized variable: `x`\n \n     let x: isize;\n-    x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+    x >>= 1;    //~ ERROR use of possibly-uninitialized variable: `x`\n }"}, {"sha": "f2036df3ce92a5a8a56b7a99948d107a97944443", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,62 +1,62 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:6:5\n    |\n LL |     x += 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n    |\n LL |     x -= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n    |\n LL |     x *= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n    |\n LL |     x /= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n    |\n LL |     x %= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n    |\n LL |     x ^= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n    |\n LL |     x &= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n    |\n LL |     x |= 1;\n-   |     ^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n    |\n LL |     x <<= 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n    |\n LL |     x >>= 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "0ccea49f329bb1030f8202a3d5c19b1077d509bc", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -15,19 +15,19 @@ fn main() {\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;            //~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+    a.x = 0;            //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n     let _b = &a.x;\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;          //~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+    a.x = &&0;          //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n     let _b = &**a.x;\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;            //~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+    a.x = 0;            //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n     let _b = &a.y;\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;          //~ assign to part of possibly uninitialized variable: `a` [E0381]\n+    a.x = &&0;          //~ assign to part of possibly-uninitialized variable: `a` [E0381]\n     let _b = &**a.y;\n }"}, {"sha": "d99a50df75b8cf66625383b0851d5d8ac264f91e", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,44 +1,44 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:8:14\n    |\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly uninitialized `**x`\n+   |              ^^^^ use of possibly-uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly uninitialized `**x`\n+   |              ^^^^ use of possibly-uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:14:14\n    |\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly uninitialized `**x`\n+   |              ^^^^ use of possibly-uninitialized `**x`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `a`\n+error[E0381]: assign to part of possibly-uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:18:5\n    |\n LL |     a.x = 0;\n-   |     ^^^^^^^ use of possibly uninitialized `a`\n+   |     ^^^^^^^ use of possibly-uninitialized `a`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `a`\n+error[E0381]: assign to part of possibly-uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:22:5\n    |\n LL |     a.x = &&0;\n-   |     ^^^^^^^^^ use of possibly uninitialized `a`\n+   |     ^^^^^^^^^ use of possibly-uninitialized `a`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `a`\n+error[E0381]: assign to part of possibly-uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:27:5\n    |\n LL |     a.x = 0;\n-   |     ^^^^^^^ use of possibly uninitialized `a`\n+   |     ^^^^^^^ use of possibly-uninitialized `a`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `a`\n+error[E0381]: assign to part of possibly-uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-ref-chain.rs:31:5\n    |\n LL |     a.x = &&0;\n-   |     ^^^^^^^^^ use of possibly uninitialized `a`\n+   |     ^^^^^^^^^ use of possibly-uninitialized `a`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "017b955a39535f289b112acad8416af6da502355", "filename": "src/test/ui/borrowck/borrowck-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -2,5 +2,5 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize;\n-    foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n }"}, {"sha": "effc209e81659169224090527179ca7340e80e27", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-uninit.rs:5:9\n    |\n LL |     foo(x);\n-   |         ^ use of possibly uninitialized `x`\n+   |         ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "3cc71e7cece0e6964fd56b2fe3ad9f9f713fe3bc", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     unsafe {\n         let mut s: S;\n         let mut u: U;\n-        s.a = 0; //~ ERROR assign to part of possibly uninitialized variable: `s`\n-        u.a = 0; //~ ERROR assign to part of possibly uninitialized variable: `u`\n+        s.a = 0; //~ ERROR assign to part of possibly-uninitialized variable: `s`\n+        u.a = 0; //~ ERROR assign to part of possibly-uninitialized variable: `u`\n         let sa = s.a;\n         let ua = u.a;\n     }"}, {"sha": "bd9ec5e579ca92ccc9ff87417f79563abebabccc", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `s`\n+error[E0381]: assign to part of possibly-uninitialized variable: `s`\n   --> $DIR/borrowck-union-uninitialized.rs:13:9\n    |\n LL |         s.a = 0;\n-   |         ^^^^^^^ use of possibly uninitialized `s`\n+   |         ^^^^^^^ use of possibly-uninitialized `s`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `u`\n+error[E0381]: assign to part of possibly-uninitialized variable: `u`\n   --> $DIR/borrowck-union-uninitialized.rs:14:9\n    |\n LL |         u.a = 0;\n-   |         ^^^^^^^ use of possibly uninitialized `u`\n+   |         ^^^^^^^ use of possibly-uninitialized `u`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d1b396aba8257f246497becd0632935cdcf2aba6", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: use of possibly uninitialized variable: `w`\n+error[E0381]: use of possibly-uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:3:5\n    |\n LL |     w[5] = 0;\n-   |     ^^^^ use of possibly uninitialized `*w`\n+   |     ^^^^ use of possibly-uninitialized `*w`\n \n-error[E0381]: use of possibly uninitialized variable: `w`\n+error[E0381]: use of possibly-uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n LL |     w[5] = 0;\n-   |     ^^^^ use of possibly uninitialized `*w`\n+   |     ^^^^ use of possibly-uninitialized `*w`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca5227c98c862b45a5f58ad899c7dc53be8afad8", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n LL |     let y = x as *const dyn Foo;\n-   |             ^ use of possibly uninitialized `*x`\n+   |             ^ use of possibly-uninitialized `*x`\n \n error: aborting due to previous error\n "}, {"sha": "24897a0f2dc9c895f761a670085117026c38fc94", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:7:13\n    |\n LL |     let y = x as *const i32;\n-   |             ^ use of possibly uninitialized `*x`\n+   |             ^ use of possibly-uninitialized `*x`\n \n error: aborting due to previous error\n "}, {"sha": "48e422147022171e5203ccb950b8a071750a8dff", "filename": "src/test/ui/borrowck/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    println!(\"{}\", v); //~ ERROR borrow of possibly uninitialized variable: `v`\n+    println!(\"{}\", v); //~ ERROR borrow of possibly-uninitialized variable: `v`\n }\n \n fn main() {"}, {"sha": "3eaaf8d7df08d30acab3a83f31bf59cf60612efd", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `v`\n+error[E0381]: borrow of possibly-uninitialized variable: `v`\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n LL |     println!(\"{}\", v);\n-   |                    ^ use of possibly uninitialized `v`\n+   |                    ^ use of possibly-uninitialized `v`\n \n error: aborting due to previous error\n "}, {"sha": "b3ec20711c12b32ad05433b0dc8ce99e7fcf18c7", "filename": "src/test/ui/borrowck/borrowck-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: bool;\n-    while x { } //~ ERROR use of possibly uninitialized variable: `x`\n+    while x { } //~ ERROR use of possibly-uninitialized variable: `x`\n }"}, {"sha": "92937a9c5730e6f1c8afe18bf50272486d3b313e", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-while-cond.rs:3:11\n    |\n LL |     while x { }\n-   |           ^ use of possibly uninitialized `x`\n+   |           ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "6b3220c7d8591970e90a89cc7b211a1fe5bb7dc9", "filename": "src/test/ui/borrowck/borrowck-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,7 +1,7 @@\n fn f() -> isize {\n     let mut x: isize;\n     while 1 == 1 { x = 10; }\n-    return x; //~ ERROR use of possibly uninitialized variable: `x`\n+    return x; //~ ERROR use of possibly-uninitialized variable: `x`\n }\n \n fn main() { f(); }"}, {"sha": "a1f8f64725dcdfcc06fcb5ebfde19c9dbdc6908d", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/borrowck-while.rs:4:12\n    |\n LL |     return x;\n-   |            ^ use of possibly uninitialized `x`\n+   |            ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "7043cb3a164e78b012a6adc668aa188f9aded18d", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,19 +4,19 @@\n fn main() {\n     let mut t: (u64, u64);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     t.1 = 1;\n \n     let mut t: (u64, u64);\n     t.1 = 1;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     t.0 = 1;\n \n     let mut t: (u64, u64);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n \n     let mut t: (u64,);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n }"}, {"sha": "8d5b39341c109dfaa329419775d04585e010db49", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,26 +1,26 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/disallow-possibly-uninitialized.rs:6:5\n    |\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/disallow-possibly-uninitialized.rs:11:5\n    |\n LL |     t.1 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/disallow-possibly-uninitialized.rs:16:5\n    |\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/disallow-possibly-uninitialized.rs:20:5\n    |\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^ use of possibly-uninitialized `t`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f031a144443b3e1d1d4ecade06cce7fb7c286cd4", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-marks-mut-as-used.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -10,23 +10,23 @@ fn main() {\n     {\n         let mut t: Tuple;\n         t.0 = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n         t.1 = 2;\n         println!(\"{:?} {:?}\", t.0, t.1);\n     }\n \n     {\n         let mut u: Tpair;\n         u.0 = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `u` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `u` [E0381]\n         u.1 = 2;\n         println!(\"{:?} {:?}\", u.0, u.1);\n     }\n \n     {\n         let mut v: Spair;\n         v.x = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `v` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `v` [E0381]\n         v.y = 2;\n         println!(\"{:?} {:?}\", v.x, v.y);\n     }"}, {"sha": "22c6c3964edc1087dc55632dde661d71dd6bd05c", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-marks-mut-as-used.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,20 +1,20 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:12:9\n    |\n LL |         t.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `t`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `u`\n+error[E0381]: assign to part of possibly-uninitialized variable: `u`\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:20:9\n    |\n LL |         u.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `u`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `u`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `v`\n+error[E0381]: assign to part of possibly-uninitialized variable: `v`\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:28:9\n    |\n LL |         v.x = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `v`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `v`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "660d9e85ef54eb4ff7f51164370c7776f8c95ea6", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-never-init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -10,23 +10,23 @@ fn main() {\n     {\n         let t: Tuple;\n         t.0 = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n         t.1 = 2;\n         println!(\"{:?} {:?}\", t.0, t.1);\n     }\n \n     {\n         let u: Tpair;\n         u.0 = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `u` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `u` [E0381]\n         u.1 = 2;\n         println!(\"{:?} {:?}\", u.0, u.1);\n     }\n \n     {\n         let v: Spair;\n         v.x = S(1);\n-        //~^ ERROR assign to part of possibly uninitialized variable: `v` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `v` [E0381]\n         v.y = 2;\n         println!(\"{:?} {:?}\", v.x, v.y);\n     }"}, {"sha": "5f9c978c342f64231f85df79f73e180a2a0b8501", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-never-init.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,20 +1,20 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:12:9\n    |\n LL |         t.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `t`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `u`\n+error[E0381]: assign to part of possibly-uninitialized variable: `u`\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:20:9\n    |\n LL |         u.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `u`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `u`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `v`\n+error[E0381]: assign to part of possibly-uninitialized variable: `v`\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:28:9\n    |\n LL |         v.x = S(1);\n-   |         ^^^^^^^^^^ use of possibly uninitialized `v`\n+   |         ^^^^^^^^^^ use of possibly-uninitialized `v`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f8efa8c891eb3609e1339893ec2c7e1a9961256d", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let e: i32;\n     match e {\n-        //~^ ERROR use of possibly uninitialized variable\n+        //~^ ERROR use of possibly-uninitialized variable\n         ref u if true => {}\n         ref v if true => {\n             let tx = 0;"}, {"sha": "0eca447b5515994634735e8fb292ed60876d4ff3", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `e`\n+error[E0381]: use of possibly-uninitialized variable: `e`\n   --> $DIR/issue-62107-match-arm-scopes.rs:3:11\n    |\n LL |     match e {\n-   |           ^ use of possibly uninitialized `e`\n+   |           ^ use of possibly-uninitialized `e`\n \n error: aborting due to previous error\n "}, {"sha": "f09db378a75b4a671364e922a1a45fe601ba54a4", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:7:5\n    |\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:15:5\n    |\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f346708eb6108ed95a198bf29fc0492620c41c4", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:12:5\n    |\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5"}, {"sha": "14f0fee84c9aa88a5d84d36571394e3bce0f6d57", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -7,11 +7,11 @@ LL |     x = (22, 44);\n LL |     x.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n+error[E0381]: assign to part of possibly-uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5\n    |\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly-uninitialized `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3fcea7d171349d6ac6171faf3611bed0fa7eb4c6", "filename": "src/test/ui/borrowck/two-phase-across-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,4 +1,4 @@\n-// Test that a borrow which starts as a 2-phase borrow and gets\n+// Test that a borrow which starts as a two-phase borrow and gets\n // carried around a loop winds up conflicting with itself.\n \n struct Foo { x: String }"}, {"sha": "081b09e33006fdd753aeb0545edaff8d24525c76", "filename": "src/test/ui/consts/const-err4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     Boo = [unsafe { Foo { b: () }.a }; 4][3],\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "e0df787f80a4415c076ec0cbbc7a881314e1e934", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:28:43\n@@ -38,15 +38,15 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:40:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:43:43\n@@ -78,15 +78,15 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:55:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:58:45\n@@ -102,7 +102,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:64:47\n@@ -150,7 +150,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:82:43\n@@ -190,7 +190,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:97:43\n@@ -214,7 +214,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:106:43"}, {"sha": "28e0922ecafa6856800494bb7f4ef18187e441f5", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -7,7 +7,7 @@ LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n    | |___^ type validation failed: encountered 5 at .1.<deref>, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "b72a5b80afa8d08b9e2279e518022b588e90ec95", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14"}, {"sha": "47f89fccf7a817d5ddec729338607f46d33e1aec", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "8ebc9dbec8ab2d1f9c5e6c05ca68fbf8d8ca4147", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,71 +4,71 @@ error[E0080]: it is undefined behavior to use this value\n LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { in2: 1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 1, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { TransmuteEnum { in1: &1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:29:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { TransmuteEnum { in1: &1 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 0\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:48:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:50:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:52:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 2\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:56:1\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { TransmuteEnum2 { in3: () }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:71:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .<downcast-variant(Some)>.0.1, but expected something less or equal to 1114111\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 9 previous errors\n "}, {"sha": "80d80a986751e948983c7a61e56eb74b19a600a9", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n   --> $DIR/ub-nonnull.rs:18:29\n@@ -30,39 +30,39 @@ error[E0080]: it is undefined behavior to use this value\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:24:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:32:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { Transmute { uninit: () }.out };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:40:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:46:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 7 previous errors\n "}, {"sha": "01bde413c0d9cc18188833da85b51213084f6342", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,39 +4,39 @@ error[E0080]: it is undefined behavior to use this value\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned reference (required 2 byte alignment but found 1)\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:11:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:17:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:20:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:23:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (created from integer)\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3877f3cab6d44b2f38a43a0014b8791a970a0577", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,23 +4,23 @@ error[E0080]: it is undefined behavior to use this value\n LL | const BAD_BAD_BAD: Bar = unsafe { (TransmuteUnion::<(), Bar> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { (TransmuteUnion::<(), [Bar; 1]> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea6ab3ae5b5baf5d9a3c9ddcffaa0de581d26a77", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -8,7 +8,7 @@ LL | |     move || { let _ = bad_ref; let _ = another_var; }\n LL | | };\n    | |__^ type validation failed: encountered 0 at .<deref>.<dyn-downcast>.<closure-var(bad_ref)>, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "9134ef5a31ad964b1d22a083130d96d715d6befa", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,143 +4,143 @@ error[E0080]: it is undefined behavior to use this value\n LL | const STR_TOO_LONG: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:93:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:97:1\n    |\n LL | const STR_NO_UTF8: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:100:1\n    |\n LL | const MYSTR_NO_UTF8: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:107:1\n    |\n LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe { SliceTransmute { addr: 42 }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:110:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:117:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:126:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:133:1\n    |\n LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe { SliceTransmute { addr: 42 }.raw_slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:138:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:141:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:144:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:148:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:152:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 0 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:154:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.raw_rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 18 previous errors\n "}, {"sha": "9193bd9dea189efdfe76a9404678936f921b0630", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "476f3651740ab7041722ad63a20d69a73186875e", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:16:1\n@@ -15,7 +15,7 @@ LL | |     b: unsafe { UNION.field3 },\n LL | | };\n    | |__^ type validation failed: encountered uninitialized bytes at .b, but expected initialized plain (non-pointer) bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:26:1\n@@ -29,7 +29,7 @@ LL | |     a: 42,\n LL | | };\n    | |__^ type validation failed: encountered undefined bytes at .b[1]\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fa67bc0d8e7b55ddc9f97941268d27f331be41c0", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something less or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "d48d5945e7da94a87e47ad8137648ba63c479a93", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -2,6 +2,6 @@ fn main() {}\n \n const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n     a + b //~ ERROR can only call other `const fn` within a `const fn`\n-    //~^ ERROR use of possibly uninitialized variable: `a`\n-    //~| ERROR use of possibly uninitialized variable: `b`\n+    //~^ ERROR use of possibly-uninitialized variable: `a`\n+    //~| ERROR use of possibly-uninitialized variable: `b`\n }"}, {"sha": "31a3098a26376bff25d9d8b24a7753d251b0f2ab", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -13,17 +13,17 @@ LL |     a + b\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0381]: use of possibly uninitialized variable: `a`\n+error[E0381]: use of possibly-uninitialized variable: `a`\n   --> $DIR/const_let_refutable.rs:4:5\n    |\n LL |     a + b\n-   |     ^ use of possibly uninitialized `a`\n+   |     ^ use of possibly-uninitialized `a`\n \n-error[E0381]: use of possibly uninitialized variable: `b`\n+error[E0381]: use of possibly-uninitialized variable: `b`\n   --> $DIR/const_let_refutable.rs:4:9\n    |\n LL |     a + b\n-   |         ^ use of possibly uninitialized `b`\n+   |         ^ use of possibly-uninitialized `b`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "26b7a24ebfa6f53d364f26d6ae067d41f4bd48f2", "filename": "src/test/ui/consts/std/alloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const LAYOUT_INVALID: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0 at .align_, but expected something greater or equal to 1\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "c4c7a33718279074f2a73f59e72772d900e4d1bc", "filename": "src/test/ui/consts/validate_never_arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error[E0080]: it is undefined behavior to use this value\n LL | const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: aborting due to previous error\n "}, {"sha": "f0ecea42f39c8d388dd8c21b9f061314c87c6228", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -10,7 +10,7 @@ fn transmute<T, U>(t: T) -> U {\n     let Helper::U(u) = Helper::T(t, []);\n     //~^ ERROR refutable pattern in local binding: `T(_, _)` not covered\n     u\n-    //~^ ERROR use of possibly uninitialized variable: `u`\n+    //~^ ERROR use of possibly-uninitialized variable: `u`\n }\n \n fn main() {"}, {"sha": "a7f7cfa289e00bc368231ab37a1427bb93fcea9e", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -11,11 +11,11 @@ LL | | }\n LL |       let Helper::U(u) = Helper::T(t, []);\n    |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n \n-error[E0381]: use of possibly uninitialized variable: `u`\n+error[E0381]: use of possibly-uninitialized variable: `u`\n   --> $DIR/empty-never-array.rs:12:5\n    |\n LL |     u\n-   |     ^ use of possibly uninitialized `u`\n+   |     ^ use of possibly-uninitialized `u`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b757214203512c5f8cc1193b77d771cbf33c943", "filename": "src/test/ui/generator/partial-initialization-across-yield.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -10,7 +10,7 @@ fn test_tuple() {\n     let _ = || {\n         let mut t: (i32, i32);\n         t.0 = 42;\n-        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n         yield;\n         t.1 = 88;\n         let _ = t;\n@@ -21,7 +21,7 @@ fn test_tuple_struct() {\n     let _ = || {\n         let mut t: T;\n         t.0 = 42;\n-        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n         yield;\n         t.1 = 88;\n         let _ = t;\n@@ -32,7 +32,7 @@ fn test_struct() {\n     let _ = || {\n         let mut t: S;\n         t.x = 42;\n-        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n         yield;\n         t.y = 88;\n         let _ = t;"}, {"sha": "66b86488eaec766eb1e3b70b1c7ee4b079153e44", "filename": "src/test/ui/generator/partial-initialization-across-yield.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,20 +1,20 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-yield.rs:12:9\n    |\n LL |         t.0 = 42;\n-   |         ^^^^^^^^ use of possibly uninitialized `t`\n+   |         ^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-yield.rs:23:9\n    |\n LL |         t.0 = 42;\n-   |         ^^^^^^^^ use of possibly uninitialized `t`\n+   |         ^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/partial-initialization-across-yield.rs:34:9\n    |\n LL |         t.x = 42;\n-   |         ^^^^^^^^ use of possibly uninitialized `t`\n+   |         ^^^^^^^^ use of possibly-uninitialized `t`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4c8e1b41beefc2f2fc9465108b968af5074d0530", "filename": "src/test/ui/issues/issue-15381.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n         //~^ ERROR refutable pattern in `for` loop binding: `&[]` not covered\n         println!(\"y={}\", y);\n-        //~^ ERROR borrow of possibly uninitialized variable: `y`\n+        //~^ ERROR borrow of possibly-uninitialized variable: `y`\n     }\n }"}, {"sha": "e8106059052daa81ccce1de1a5967f5d8f464842", "filename": "src/test/ui/issues/issue-15381.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,11 +4,11 @@ error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n    |         ^^^^^^^^ pattern `&[]` not covered\n \n-error[E0381]: borrow of possibly uninitialized variable: `y`\n+error[E0381]: borrow of possibly-uninitialized variable: `y`\n   --> $DIR/issue-15381.rs:6:26\n    |\n LL |         println!(\"y={}\", y);\n-   |                          ^ use of possibly uninitialized `y`\n+   |                          ^ use of possibly-uninitialized `y`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6809ee4143b0dd1465b75b1a210f56106edb309", "filename": "src/test/ui/issues/issue-24267-flow-exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -9,11 +9,11 @@ pub fn main() {\n pub fn foo1() {\n     let x: i32;\n     loop { x = break; }\n-    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n }\n \n pub fn foo2() {\n     let x: i32;\n     for _ in 0..10 { x = continue; }\n-    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n }"}, {"sha": "4eb41ca24ddfe1e72b21ae9dd2b08365fc393fe7", "filename": "src/test/ui/issues/issue-24267-flow-exit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/issue-24267-flow-exit.rs:12:20\n    |\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n+   |                    ^ use of possibly-uninitialized `x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n    |\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n+   |                    ^ use of possibly-uninitialized `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b242ec4296d664c68f312d07f1051ccfccce1bab", "filename": "src/test/ui/loops/loop-proper-liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -6,7 +6,7 @@ fn test1() {\n     'a: loop {\n         x = loop { break 'a };\n     }\n-    println!(\"{:?}\", x); //~ ERROR borrow of possibly uninitialized variable\n+    println!(\"{:?}\", x); //~ ERROR borrow of possibly-uninitialized variable\n }\n \n // test2 and test3 should not fail."}, {"sha": "d55f9ff31e3ee7a43c343ab0da0a0ff49690ba64", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n   --> $DIR/loop-proper-liveness.rs:9:22\n    |\n LL |     println!(\"{:?}\", x);\n-   |                      ^ use of possibly uninitialized `x`\n+   |                      ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "b4001aba2882c0f26595c97f19be2abc0c7eb270", "filename": "src/test/ui/missing/missing-semicolon-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -7,7 +7,7 @@ LL |         $( let x = $e1 )*;\n LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n-   = note: This was erroneously allowed and will become a hard error in a future release\n+   = note: this was erroneously allowed and will become a hard error in a future release\n \n warning: expected `;`, found `println`\n   --> $DIR/missing-semicolon-warning.rs:7:12\n@@ -18,5 +18,5 @@ LL |         $( println!(\"{}\", $e2) )*;\n LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n-   = note: This was erroneously allowed and will become a hard error in a future release\n+   = note: this was erroneously allowed and will become a hard error in a future release\n "}, {"sha": "2d0ff58526393ac9d0c4935f1a159d237fde28a2", "filename": "src/test/ui/moves/move-into-dead-array-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -11,5 +11,5 @@ fn main() {\n \n fn foo(i: usize) {\n     let mut a: [D; 4];\n-    a[i] = d();        //~ ERROR use of possibly uninitialized variable: `a`\n+    a[i] = d();        //~ ERROR use of possibly-uninitialized variable: `a`\n }"}, {"sha": "5f20ccfeddf48f4fa059126d452395cd19d4d136", "filename": "src/test/ui/moves/move-into-dead-array-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `a`\n+error[E0381]: use of possibly-uninitialized variable: `a`\n   --> $DIR/move-into-dead-array-1.rs:14:5\n    |\n LL |     a[i] = d();\n-   |     ^^^^ use of possibly uninitialized `a`\n+   |     ^^^^ use of possibly-uninitialized `a`\n \n error: aborting due to previous error\n "}, {"sha": "1983e13db0afd1ae360e2f68f6125aed6a8cf91f", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -26,13 +26,13 @@ impl Drop for D {\n fn cannot_partially_init_adt_with_drop() {\n     let d: D;\n     d.x = 10;\n-    //~^ ERROR assign of possibly uninitialized variable: `d` [E0381]\n+    //~^ ERROR assign of possibly-uninitialized variable: `d` [E0381]\n }\n \n fn cannot_partially_init_mutable_adt_with_drop() {\n     let mut d: D;\n     d.x = 10;\n-    //~^ ERROR assign of possibly uninitialized variable: `d` [E0381]\n+    //~^ ERROR assign of possibly-uninitialized variable: `d` [E0381]\n }\n \n fn cannot_partially_reinit_adt_with_drop() {\n@@ -45,13 +45,13 @@ fn cannot_partially_reinit_adt_with_drop() {\n fn cannot_partially_init_inner_adt_via_outer_with_drop() {\n     let d: D;\n     d.s.y = 20;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `d` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `d` [E0381]\n }\n \n fn cannot_partially_init_inner_adt_via_mutable_outer_with_drop() {\n     let mut d: D;\n     d.s.y = 20;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `d` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `d` [E0381]\n }\n \n fn cannot_partially_reinit_inner_adt_via_outer_with_drop() {"}, {"sha": "1b66e034d37859a216c124dc5b80678a11c47746", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: assign of possibly uninitialized variable: `d`\n+error[E0381]: assign of possibly-uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:28:5\n    |\n LL |     d.x = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `d`\n+   |     ^^^^^^^^ use of possibly-uninitialized `d`\n \n-error[E0381]: assign of possibly uninitialized variable: `d`\n+error[E0381]: assign of possibly-uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:34:5\n    |\n LL |     d.x = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `d`\n+   |     ^^^^^^^^ use of possibly-uninitialized `d`\n \n error[E0382]: assign of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:41:5\n@@ -20,17 +20,17 @@ LL |     drop(d);\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n-error[E0381]: assign to part of possibly uninitialized variable: `d`\n+error[E0381]: assign to part of possibly-uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:47:5\n    |\n LL |     d.s.y = 20;\n-   |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n+   |     ^^^^^^^^^^ use of possibly-uninitialized `d.s`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `d`\n+error[E0381]: assign to part of possibly-uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:53:5\n    |\n LL |     d.s.y = 20;\n-   |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n+   |     ^^^^^^^^^^ use of possibly-uninitialized `d.s`\n \n error[E0382]: assign to part of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:60:5"}, {"sha": "7da47c85f545056fec42bc018f48e379c5aa264c", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -97,14 +97,14 @@ macro_rules! use_part {\n fn test_0000_local_fully_init_and_use_struct() {\n     let s: S<B>;\n     s.x = 10; s.y = Box::new(20);\n-    //~^ ERROR assign to part of possibly uninitialized variable: `s` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n     use_fully!(struct s);\n }\n \n fn test_0001_local_fully_init_and_use_tuple() {\n     let t: T;\n     t.0 = 10; t.1 = Box::new(20);\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     use_fully!(tuple t);\n }\n \n@@ -125,14 +125,14 @@ fn test_0011_local_fully_reinit_and_use_tuple() {\n fn test_0100_local_partial_init_and_use_struct() {\n     let s: S<B>;\n     s.x = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `s` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n     use_part!(struct s);\n }\n \n fn test_0101_local_partial_init_and_use_tuple() {\n     let t: T;\n     t.0 = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     use_part!(tuple t);\n }\n \n@@ -153,14 +153,14 @@ fn test_0111_local_partial_reinit_and_use_tuple() {\n fn test_0200_local_void_init_and_use_struct() {\n     let s: S<Void>;\n     s.x = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `s` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n     use_part!(struct s);\n }\n \n fn test_0201_local_void_init_and_use_tuple() {\n     let t: Tvoid;\n     t.0 = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n     use_part!(tuple t);\n }\n \n@@ -176,14 +176,14 @@ fn test_0201_local_void_init_and_use_tuple() {\n fn test_1000_field_fully_init_and_use_struct() {\n     let q: Q<S<B>>;\n     q.r.f.x = 10; q.r.f.y = Box::new(20);\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_fully!(struct q.r.f);\n }\n \n fn test_1001_field_fully_init_and_use_tuple() {\n     let q: Q<T>;\n     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_fully!(tuple q.r.f);\n }\n \n@@ -204,14 +204,14 @@ fn test_1011_field_fully_reinit_and_use_tuple() {\n fn test_1100_field_partial_init_and_use_struct() {\n     let q: Q<S<B>>;\n     q.r.f.x = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_part!(struct q.r.f);\n }\n \n fn test_1101_field_partial_init_and_use_tuple() {\n     let q: Q<T>;\n     q.r.f.0 = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_part!(tuple q.r.f);\n }\n \n@@ -232,14 +232,14 @@ fn test_1111_field_partial_reinit_and_use_tuple() {\n fn test_1200_field_void_init_and_use_struct() {\n     let mut q: Q<S<Void>>;\n     q.r.f.x = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_part!(struct q.r.f);\n }\n \n fn test_1201_field_void_init_and_use_tuple() {\n     let mut q: Q<Tvoid>;\n     q.r.f.0 = 10;\n-    //~^ ERROR assign to part of possibly uninitialized variable: `q` [E0381]\n+    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n     use_part!(tuple q.r.f);\n }\n "}, {"sha": "32147898320c0c32b909290346a955f6d6f61ff7", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,14 +1,14 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `s`\n+error[E0381]: assign to part of possibly-uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:99:5\n    |\n LL |     s.x = 10; s.y = Box::new(20);\n-   |     ^^^^^^^^ use of possibly uninitialized `s`\n+   |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:106:5\n    |\n LL |     t.0 = 10; t.1 = Box::new(20);\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:113:5\n@@ -30,17 +30,17 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: assign to part of possibly uninitialized variable: `s`\n+error[E0381]: assign to part of possibly-uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:127:5\n    |\n LL |     s.x = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `s`\n+   |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:134:5\n    |\n LL |     t.0 = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:141:5\n@@ -62,29 +62,29 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: assign to part of possibly uninitialized variable: `s`\n+error[E0381]: assign to part of possibly-uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n    |\n LL |     s.x = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `s`\n+   |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `t`\n+error[E0381]: assign to part of possibly-uninitialized variable: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:162:5\n    |\n LL |     t.0 = 10;\n-   |     ^^^^^^^^ use of possibly uninitialized `t`\n+   |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:178:5\n    |\n LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:185:5\n    |\n LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n   --> $DIR/issue-21232-partial-init-and-use.rs:192:5\n@@ -106,17 +106,17 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:206:5\n    |\n LL |     q.r.f.x = 10;\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:213:5\n    |\n LL |     q.r.f.0 = 10;\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n   --> $DIR/issue-21232-partial-init-and-use.rs:220:5\n@@ -138,17 +138,17 @@ LL |     q.r.f.0 = 10;\n    |\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:234:5\n    |\n LL |     q.r.f.x = 10;\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n-error[E0381]: assign to part of possibly uninitialized variable: `q`\n+error[E0381]: assign to part of possibly-uninitialized variable: `q`\n   --> $DIR/issue-21232-partial-init-and-use.rs:241:5\n    |\n LL |     q.r.f.0 = 10;\n-   |     ^^^^^^^^^^^^ use of possibly uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:259:13"}, {"sha": "5fc9966cdf80727c7f0e0d8d612133b8794e8107", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -20,7 +20,7 @@ fn guard_may_be_skipped(y: i32) {\n     match y {\n         _ if { x = 2; true } => 1,\n         _ if {\n-            x; //~ ERROR use of possibly uninitialized variable: `x`\n+            x; //~ ERROR use of possibly-uninitialized variable: `x`\n             false\n         } => 2,\n         _ => 3,"}, {"sha": "3d9037bbe7bf809f389fdc527974864c214ab167", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/match-cfg-fake-edges.rs:23:13\n    |\n LL |             x;\n-   |             ^ use of possibly uninitialized `x`\n+   |             ^ use of possibly-uninitialized `x`\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/match-cfg-fake-edges.rs:37:13"}, {"sha": "284a910a01b8a5b8c6206b9f52d5dd3f7d6ab232", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -34,11 +34,11 @@ LL |         true => (),\n LL |     x;\n    |     - borrow later used here\n \n-error[E0381]: use of possibly uninitialized variable: `n`\n+error[E0381]: use of possibly-uninitialized variable: `n`\n   --> $DIR/match-on-borrowed.rs:92:11\n    |\n LL |     match n {}\n-   |           ^ use of possibly uninitialized `n`\n+   |           ^ use of possibly-uninitialized `n`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d805ab75882dd7fda66a35a87d6f23d42d985302", "filename": "src/test/ui/parser/do-catch-suggests-try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let _: Option<()> = do catch {};\n     //~^ ERROR found removed `do catch` syntax\n-    //~^^ HELP Following RFC #2388, the new non-placeholder syntax is `try`\n+    //~^^ HELP following RFC #2388, the new non-placeholder syntax is `try`\n }"}, {"sha": "e151d4cf8a6aa0999c7b883a952101f9cdc1a2bc", "filename": "src/test/ui/parser/do-catch-suggests-try.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,7 +4,7 @@ error: found removed `do catch` syntax\n LL |     let _: Option<()> = do catch {};\n    |                         ^^\n    |\n-   = help: Following RFC #2388, the new non-placeholder syntax is `try`\n+   = help: following RFC #2388, the new non-placeholder syntax is `try`\n \n error: aborting due to previous error\n "}, {"sha": "f6b317886bfadc32827e00d6bac1aede97766379", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -6,7 +6,7 @@ fn foo(res: Result<u32, &R>) -> u32 {\n     let Ok(x) = res;\n     //~^ ERROR refutable pattern\n     x\n-    //~^ ERROR use of possibly uninitialized variable: `x`\n+    //~^ ERROR use of possibly-uninitialized variable: `x`\n }\n \n fn main() {"}, {"sha": "b9385952fafa36a942d2b13e3b83f1b71228cfa9", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -4,11 +4,11 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n    |\n LL |     x\n-   |     ^ use of possibly uninitialized `x`\n+   |     ^ use of possibly-uninitialized `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ef10b47fd1305343e32ba8100bb4bbf09f0eb81d", "filename": "src/test/ui/try-block/try-block-opt-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -12,5 +12,5 @@ pub fn main() {\n         Ok::<(), ()>(())?;\n         use_val(cfg_res);\n     };\n-    assert_eq!(cfg_res, 5); //~ ERROR borrow of possibly uninitialized variable: `cfg_res`\n+    assert_eq!(cfg_res, 5); //~ ERROR borrow of possibly-uninitialized variable: `cfg_res`\n }"}, {"sha": "308906477d914a8715d6972753bd7bd5c71b64ae", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e19f3f383b99414490243665c96b9f4e0f313f9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=6e19f3f383b99414490243665c96b9f4e0f313f9", "patch": "@@ -1,8 +1,8 @@\n-error[E0381]: borrow of possibly uninitialized variable: `cfg_res`\n+error[E0381]: borrow of possibly-uninitialized variable: `cfg_res`\n   --> $DIR/try-block-opt-init.rs:15:5\n    |\n LL |     assert_eq!(cfg_res, 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `cfg_res`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `cfg_res`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}