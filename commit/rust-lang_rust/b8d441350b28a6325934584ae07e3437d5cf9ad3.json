{"sha": "b8d441350b28a6325934584ae07e3437d5cf9ad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDQ0MTM1MGIyOGE2MzI1OTM0NTg0YWUwN2UzNDM3ZDVjZjlhZDM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-01T09:04:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-01T12:43:55Z"}, "message": "async-llvm(28): Make some error messages more informative.", "tree": {"sha": "c68d8044d7cd08d102be6ab33b73ca3e018aa67b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68d8044d7cd08d102be6ab33b73ca3e018aa67b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d441350b28a6325934584ae07e3437d5cf9ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d441350b28a6325934584ae07e3437d5cf9ad3", "html_url": "https://github.com/rust-lang/rust/commit/b8d441350b28a6325934584ae07e3437d5cf9ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d441350b28a6325934584ae07e3437d5cf9ad3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e043e9e965392b9c018c328ec580e7bd78af24", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e043e9e965392b9c018c328ec580e7bd78af24", "html_url": "https://github.com/rust-lang/rust/commit/b1e043e9e965392b9c018c328ec580e7bd78af24"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "0d5fe6c0ae95fa3dffc45dc711098e4e490c6be7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8d441350b28a6325934584ae07e3437d5cf9ad3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d441350b28a6325934584ae07e3437d5cf9ad3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b8d441350b28a6325934584ae07e3437d5cf9ad3", "patch": "@@ -1323,13 +1323,16 @@ fn start_executing_work(sess: &Session,\n                 if main_thread_worker_state == MainThreadWorkerState::Idle {\n                     if !queue_full_enough(work_items.len(), running, max_workers) {\n                         // The queue is not full enough, translate more items:\n-                        trans_worker_send.send(Message::TranslateItem).unwrap();\n+                        if let Err(_) = trans_worker_send.send(Message::TranslateItem) {\n+                            panic!(\"Could not send Message::TranslateItem to main thread\")\n+                        }\n                         main_thread_worker_state = MainThreadWorkerState::Translating;\n                     } else {\n                         // The queue is full enough to not let the worker\n                         // threads starve. Use the implicit Token to do some\n                         // LLVM work too.\n-                        let (item, _) = work_items.pop().unwrap();\n+                        let (item, _) = work_items.pop()\n+                            .expect(\"queue empty - queue_full_enough() broken?\");\n                         let cgcx = CodegenContext {\n                             worker: get_worker_id(&mut free_worker_ids),\n                             .. cgcx.clone()\n@@ -1406,7 +1409,7 @@ fn start_executing_work(sess: &Session,\n                             let msg = &format!(\"failed to acquire jobserver token: {}\", e);\n                             shared_emitter.fatal(msg);\n                             // Exit the coordinator thread\n-                            panic!()\n+                            panic!(\"{}\", msg)\n                         }\n                     }\n                 }\n@@ -1475,7 +1478,7 @@ fn start_executing_work(sess: &Session,\n                 Message::Done { result: Err(()), worker_id: _ } => {\n                     shared_emitter.fatal(\"aborting due to worker thread panic\");\n                     // Exit the coordinator thread\n-                    panic!()\n+                    panic!(\"aborting due to worker thread panic\")\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1493,9 +1496,12 @@ fn start_executing_work(sess: &Session,\n                                     total_llvm_time);\n         }\n \n+        let compiled_metadata_module = compiled_metadata_module\n+            .expect(\"Metadata module not compiled?\");\n+\n         CompiledModules {\n             modules: compiled_modules,\n-            metadata_module: compiled_metadata_module.unwrap(),\n+            metadata_module: compiled_metadata_module,\n             allocator_module: compiled_allocator_module,\n         }\n     });\n@@ -1506,6 +1512,7 @@ fn start_executing_work(sess: &Session,\n                          workers_running: usize,\n                          max_workers: usize) -> bool {\n         // Tune me, plz.\n+        items_in_queue > 0 &&\n         items_in_queue >= max_workers.saturating_sub(workers_running / 2)\n     }\n \n@@ -1805,7 +1812,12 @@ pub struct OngoingCrateTranslation {\n impl OngoingCrateTranslation {\n     pub fn join(self, sess: &Session) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n-        let compiled_modules = self.future.join().unwrap();\n+        let compiled_modules = match self.future.join() {\n+            Ok(compiled_modules) => compiled_modules,\n+            Err(_) => {\n+                sess.fatal(\"Error during translation/LLVM phase.\");\n+            }\n+        };\n \n         sess.abort_if_errors();\n "}]}