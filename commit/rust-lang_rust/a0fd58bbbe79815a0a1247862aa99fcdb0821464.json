{"sha": "a0fd58bbbe79815a0a1247862aa99fcdb0821464", "node_id": "C_kwDOAAsO6NoAKGEwZmQ1OGJiYmU3OTgxNWEwYTEyNDc4NjJhYTk5ZmNkYjA4MjE0NjQ", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-07-17T06:41:17Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-07-17T06:43:08Z"}, "message": "Check for local IDs belong to same definition", "tree": {"sha": "0902bee1d777672a1f22a6fae509101f005059ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0902bee1d777672a1f22a6fae509101f005059ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0fd58bbbe79815a0a1247862aa99fcdb0821464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fd58bbbe79815a0a1247862aa99fcdb0821464", "html_url": "https://github.com/rust-lang/rust/commit/a0fd58bbbe79815a0a1247862aa99fcdb0821464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0fd58bbbe79815a0a1247862aa99fcdb0821464/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "766c5f08610376ab2dda19175bee07238d43bef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/766c5f08610376ab2dda19175bee07238d43bef3", "html_url": "https://github.com/rust-lang/rust/commit/766c5f08610376ab2dda19175bee07238d43bef3"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "c5304c18218bf1ee1b2510deedaf4ff313e6c57f", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=a0fd58bbbe79815a0a1247862aa99fcdb0821464", "patch": "@@ -1161,8 +1161,9 @@ pub(crate) fn generic_predicates_for_param_query(\n                             return false;\n                         }\n                     }\n-                    WherePredicateTypeTarget::TypeOrConstParam(local_id) => {\n-                        if *local_id != param_id.local_id {\n+                    &WherePredicateTypeTarget::TypeOrConstParam(local_id) => {\n+                        let target_id = TypeOrConstParamId { parent: def, local_id };\n+                        if target_id != param_id {\n                             return false;\n                         }\n                     }"}, {"sha": "aa8b420e98099ee12c61a84d0e26b50c0189f953", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=a0fd58bbbe79815a0a1247862aa99fcdb0821464", "patch": "@@ -466,6 +466,23 @@ fn test<T: Iterable>() {\n     );\n }\n \n+#[test]\n+fn associated_type_shorthand_from_self_issue_12484() {\n+    check_types(\n+        r#\"\n+trait Bar {\n+    type A;\n+}\n+trait Foo {\n+    type A;\n+    fn test(a: Self::A, _: impl Bar) {\n+        a;\n+      //^ Foo::A<Self>\n+    }\n+}\"#,\n+    );\n+}\n+\n #[test]\n fn infer_associated_type_bound() {\n     check_types("}, {"sha": "727ec6e60853bbd1b14c9700f82bf5f56a402390", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fd58bbbe79815a0a1247862aa99fcdb0821464/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=a0fd58bbbe79815a0a1247862aa99fcdb0821464", "patch": "@@ -918,4 +918,26 @@ fn main() {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn issue_12484() {\n+        check(\n+            r#\"\n+//- minicore: sized\n+trait SizeUser {\n+    type Size;\n+}\n+trait Closure: SizeUser {}\n+trait Encrypt: SizeUser {\n+    fn encrypt(self, _: impl Closure<Size = Self::Size>);\n+}\n+fn test(thing: impl Encrypt) {\n+    thing.$0;\n+}\n+        \"#,\n+            expect![[r#\"\n+                me encrypt(\u2026) (as Encrypt) fn(self, impl Closure<Size = <Self as SizeUser>::Size>)\n+            \"#]],\n+        )\n+    }\n }"}]}