{"sha": "4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYWFmN2UzMzU5ZmE3OGJhZDJlOGM1NDAxMWU5NGNlOGFjMDc4YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T14:04:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T14:04:26Z"}, "message": "Auto merge of #51122 - oli-obk:clippy, r=Mark-Simulacrum\n\nDid you mean to block nightlies on clippy?\n\nDiscussion: https://gitter.im/rust-lang/WG-clippy?at=5b073b6597a0361fb760cdc2\n\nr? @alexcrichton\n\ndid I forget anything?\n\ncc @nrc @Manishearth", "tree": {"sha": "a9405933ca5d945f280bb96262965c0d113c9604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9405933ca5d945f280bb96262965c0d113c9604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "html_url": "https://github.com/rust-lang/rust/commit/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75e78256f07aadd120fb867880c0c7913748cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75e78256f07aadd120fb867880c0c7913748cbe", "html_url": "https://github.com/rust-lang/rust/commit/e75e78256f07aadd120fb867880c0c7913748cbe"}, {"sha": "78adefd15dd45bc1466424c5d2a3231471559324", "url": "https://api.github.com/repos/rust-lang/rust/commits/78adefd15dd45bc1466424c5d2a3231471559324", "html_url": "https://github.com/rust-lang/rust/commit/78adefd15dd45bc1466424c5d2a3231471559324"}], "stats": {"total": 172, "additions": 165, "deletions": 7}, "files": [{"sha": "7b5b86d39fc525059127f56938116b5c98711622", "filename": "src/Cargo.lock", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -307,20 +307,23 @@ dependencies = [\n \n [[package]]\n name = \"clippy\"\n-version = \"0.0.202\"\n+version = \"0.0.211\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n- \"clippy_lints 0.0.202\",\n+ \"clippy_lints 0.0.211\",\n  \"compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -329,7 +332,8 @@ version = \"0.2.0\"\n \n [[package]]\n name = \"clippy_lints\"\n-version = \"0.0.202\"\n+version = \"0.0.205\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -349,8 +353,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy_lints\"\n-version = \"0.0.205\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+version = \"0.0.211\"\n dependencies = [\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "a94792a2f9f59f942e780dd50e6e3823320c5457", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -815,6 +815,7 @@ def bootstrap(help_triggered):\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n     env[\"BUILD_DIR\"] = build.build_dir\n+    env[\"RUSTC_BOOTSTRAP\"] = '1'\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "19a2c94dca7a2a40db9a9afe2a44089aa78349b9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -41,6 +41,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.cargo_package_vers())\n     } else if component == \"rls\" {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n+    } else if component == \"clippy\" {\n+        format!(\"{}-{}\", component, builder.clippy_package_vers())\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n@@ -1183,6 +1185,82 @@ impl Step for Rls {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Clippy {\n+    pub stage: u32,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Clippy {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"clippy\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Clippy {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let stage = self.stage;\n+        let target = self.target;\n+        assert!(builder.config.extended);\n+\n+        builder.info(&format!(\"Dist clippy stage{} ({})\", stage, target));\n+        let src = builder.src.join(\"src/tools/clippy\");\n+        let release_num = builder.release_num(\"clippy\");\n+        let name = pkgname(builder, \"clippy\");\n+        let version = builder.clippy_info.version(builder, &release_num);\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"clippy-image\");\n+        drop(fs::remove_dir_all(&image));\n+        t!(fs::create_dir_all(&image));\n+\n+        // Prepare the image directory\n+        // We expect clippy to build, because we've exited this step above if tool\n+        // state for clippy isn't testing.\n+        let clippy = builder.ensure(tool::Clippy {\n+            compiler: builder.compiler(stage, builder.config.build),\n+            target, extra_features: Vec::new()\n+        }).or_else(|| { println!(\"Unable to build clippy, skipping dist\"); None })?;\n+\n+        builder.install(&clippy, &image.join(\"bin\"), 0o755);\n+        let doc = image.join(\"share/doc/clippy\");\n+        builder.install(&src.join(\"README.md\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE\"), &doc, 0o644);\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"clippy-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        t!(fs::create_dir_all(&overlay));\n+        builder.install(&src.join(\"README.md\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE\"), &doc, 0o644);\n+        builder.create(&overlay.join(\"version\"), &version);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=clippy-ready-to-serve.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(\"--non-installed-overlay\").arg(&overlay)\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+           .arg(\"--component-name=clippy-preview\");\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+    }\n+}\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustfmt {\n@@ -1304,6 +1382,7 @@ impl Step for Extended {\n         let rustfmt_installer = builder.ensure(Rustfmt { stage, target });\n         let rls_installer = builder.ensure(Rls { stage, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n+        let clippy_installer = builder.ensure(Clippy { stage, target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis {\n             compiler: builder.compiler(stage, self.host),\n@@ -1340,6 +1419,7 @@ impl Step for Extended {\n         tarballs.push(rustc_installer);\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n+        tarballs.extend(clippy_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer.clone());\n         tarballs.push(analysis_installer);\n@@ -1409,6 +1489,9 @@ impl Step for Extended {\n             if rls_installer.is_none() {\n                 contents = filter(&contents, \"rls\");\n             }\n+            if clippy_installer.is_none() {\n+                contents = filter(&contents, \"clippy\");\n+            }\n             if rustfmt_installer.is_none() {\n                 contents = filter(&contents, \"rustfmt\");\n             }\n@@ -1446,6 +1529,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n+            if clippy_installer.is_some() {\n+                prepare(\"clippy\");\n+            }\n \n             // create an 'uninstall' package\n             builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n@@ -1474,6 +1560,8 @@ impl Step for Extended {\n                     format!(\"{}-{}\", name, target)\n                 } else if name == \"rls\" {\n                     \"rls-preview\".to_string()\n+                } else if name == \"clippy\" {\n+                    \"clippy-preview\".to_string()\n                 } else {\n                     name.to_string()\n                 };\n@@ -1490,6 +1578,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n+            if clippy_installer.is_some() {\n+                prepare(\"clippy\");\n+            }\n             if target.contains(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n             }\n@@ -1570,6 +1661,18 @@ impl Step for Extended {\n                                 .arg(\"-out\").arg(exe.join(\"RlsGroup.wxs\"))\n                                 .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n             }\n+            if clippy_installer.is_some() {\n+                builder.run(Command::new(&heat)\n+                                .current_dir(&exe)\n+                                .arg(\"dir\")\n+                                .arg(\"clippy\")\n+                                .args(&heat_flags)\n+                                .arg(\"-cg\").arg(\"ClippyGroup\")\n+                                .arg(\"-dr\").arg(\"Clippy\")\n+                                .arg(\"-var\").arg(\"var.ClippyDir\")\n+                                .arg(\"-out\").arg(exe.join(\"ClippyGroup.wxs\"))\n+                                .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n+            }\n             builder.run(Command::new(&heat)\n                             .current_dir(&exe)\n                             .arg(\"dir\")\n@@ -1612,6 +1715,9 @@ impl Step for Extended {\n                 if rls_installer.is_some() {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n+                if clippy_installer.is_some() {\n+                    cmd.arg(\"-dClippyDir=clippy\");\n+                }\n                 if target.contains(\"windows-gnu\") {\n                     cmd.arg(\"-dGccDir=rust-mingw\");\n                 }\n@@ -1627,6 +1733,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n+            if clippy_installer.is_some() {\n+                candle(\"ClippyGroup.wxs\".as_ref());\n+            }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n \n             if target.contains(\"windows-gnu\") {\n@@ -1656,6 +1765,9 @@ impl Step for Extended {\n             if rls_installer.is_some() {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n+            if clippy_installer.is_some() {\n+                cmd.arg(\"ClippyGroup.wixobj\");\n+            }\n \n             if target.contains(\"windows-gnu\") {\n                 cmd.arg(\"GccGroup.wixobj\");\n@@ -1741,6 +1853,7 @@ impl Step for HashSign {\n         cmd.arg(builder.rust_package_vers());\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n+        cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n         cmd.arg(builder.llvm_tools_package_vers());\n         cmd.arg(addr);"}, {"sha": "97fd6f77646637a68c1b9fed02d8181b1d96bc56", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -39,6 +39,9 @@ pub fn install_cargo(builder: &Builder, stage: u32, host: Interned<String>) {\n pub fn install_rls(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"rls\", \"rls\", stage, Some(host));\n }\n+pub fn install_clippy(builder: &Builder, stage: u32, host: Interned<String>) {\n+    install_sh(builder, \"clippy\", \"clippy\", stage, Some(host));\n+}\n \n pub fn install_rustfmt(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"rustfmt\", \"rustfmt\", stage, Some(host));\n@@ -216,6 +219,14 @@ install!((self, builder, _config),\n             builder.info(&format!(\"skipping Install RLS stage{} ({})\", self.stage, self.target));\n         }\n     };\n+    Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n+        if builder.ensure(dist::Clippy { stage: self.stage, target: self.target }).is_some() ||\n+            Self::should_install(builder) {\n+            install_clippy(builder, self.stage, self.target);\n+        } else {\n+            builder.info(&format!(\"skipping Install clippy stage{} ({})\", self.stage, self.target));\n+        }\n+    };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n             Self::should_install(builder) {"}, {"sha": "414f17dfad40059db52db5e79f5b95c3172a9764", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -248,6 +248,7 @@ pub struct Build {\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n+    clippy_info: channel::GitInfo,\n     rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n@@ -363,6 +364,7 @@ impl Build {\n         let rust_info = channel::GitInfo::new(&config, &src);\n         let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n+        let clippy_info = channel::GitInfo::new(&config, &src.join(\"src/tools/clippy\"));\n         let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n \n         let mut build = Build {\n@@ -384,6 +386,7 @@ impl Build {\n             rust_info,\n             cargo_info,\n             rls_info,\n+            clippy_info,\n             rustfmt_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n@@ -968,6 +971,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"rls\"))\n     }\n \n+    /// Returns the value of `package_vers` above for clippy\n+    fn clippy_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"clippy\"))\n+    }\n+\n     /// Returns the value of `package_vers` above for rustfmt\n     fn rustfmt_package_vers(&self) -> String {\n         self.package_vers(&self.release_num(\"rustfmt\"))"}, {"sha": "23b3f5a0826ecab3837d33527d637d2c8cbd3f47", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -118,7 +118,7 @@ impl Step for ToolBuild {\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n-            if tool != \"rls\" && tool != \"cargo\" {\n+            if tool != \"rls\" && tool != \"cargo\" && tool != \"clippy-driver\" {\n                 return\n             }\n             let (id, features, filenames) = match msg {"}, {"sha": "4a1ba1736c2ed16ee99917d74e607758bb3f4bde", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaf7e3359fa78bad2e8c54011e94ce8ac078c6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -183,6 +183,7 @@ struct Builder {\n     rust_release: String,\n     cargo_release: String,\n     rls_release: String,\n+    clippy_release: String,\n     rustfmt_release: String,\n     llvm_tools_release: String,\n \n@@ -196,12 +197,14 @@ struct Builder {\n     rust_version: Option<String>,\n     cargo_version: Option<String>,\n     rls_version: Option<String>,\n+    clippy_version: Option<String>,\n     rustfmt_version: Option<String>,\n     llvm_tools_version: Option<String>,\n \n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n+    clippy_git_commit_hash: Option<String>,\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n }\n@@ -214,6 +217,7 @@ fn main() {\n     let rust_release = args.next().unwrap();\n     let cargo_release = args.next().unwrap();\n     let rls_release = args.next().unwrap();\n+    let clippy_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n     let llvm_tools_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n@@ -224,6 +228,7 @@ fn main() {\n         rust_release,\n         cargo_release,\n         rls_release,\n+        clippy_release,\n         rustfmt_release,\n         llvm_tools_release,\n \n@@ -237,12 +242,14 @@ fn main() {\n         rust_version: None,\n         cargo_version: None,\n         rls_version: None,\n+        clippy_version: None,\n         rustfmt_version: None,\n         llvm_tools_version: None,\n \n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n+        clippy_git_commit_hash: None,\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n     }.build();\n@@ -259,6 +266,7 @@ impl Builder {\n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.clippy_git_commit_hash = self.git_commit_hash(\"clippy\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_git_commit_hash = self.git_commit_hash(\"llvm-tools\",\n                                                                \"x86_64-unknown-linux-gnu\");\n@@ -296,10 +304,12 @@ impl Builder {\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n+        self.package(\"clippy-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rustfmt-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n         self.package(\"llvm-tools-preview\", &mut manifest.pkg, TARGETS);\n \n+        let clippy_present = manifest.pkg.contains_key(\"clippy-preview\");\n         let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n         let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n         let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools-preview\");\n@@ -345,6 +355,12 @@ impl Builder {\n                 });\n             }\n \n+            if clippy_present {\n+                extensions.push(Component {\n+                    pkg: \"clippy-preview\".to_string(),\n+                    target: host.to_string(),\n+                });\n+            }\n             if rls_present {\n                 extensions.push(Component {\n                     pkg: \"rls-preview\".to_string(),\n@@ -470,6 +486,8 @@ impl Builder {\n             format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n+        } else if component == \"clippy\" || component == \"clippy-preview\" {\n+            format!(\"clippy-{}-{}.tar.gz\", self.clippy_release, target)\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target)\n         } else if component == \"llvm_tools\" {\n@@ -484,6 +502,8 @@ impl Builder {\n             &self.cargo_version\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             &self.rls_version\n+        } else if component == \"clippy\" || component == \"clippy-preview\" {\n+            &self.clippy_version\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_version\n         } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n@@ -498,6 +518,8 @@ impl Builder {\n             &self.cargo_git_commit_hash\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             &self.rls_git_commit_hash\n+        } else if component == \"clippy\" || component == \"clippy-preview\" {\n+            &self.clippy_git_commit_hash\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_git_commit_hash\n         } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {"}, {"sha": "41972f89dcb99819191ffbf2381430e63e9d916d", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=4faaf7e3359fa78bad2e8c54011e94ce8ac078c6", "patch": "@@ -1 +1 @@\n-Subproject commit ebe0b0eed596243a2839867363cb31d93f0b9754\n+Subproject commit 41972f89dcb99819191ffbf2381430e63e9d916d"}]}