{"sha": "0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzQwNWUzNTIxZDg0Y2ZhZWY3ZDk0ZjFhZTQwYzZjMTY3OTZjOGI=", "commit": {"author": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-09-18T11:06:53Z"}, "committer": {"name": "khyperia", "email": "github@khyperia.com", "date": "2020-09-18T11:11:59Z"}, "message": "Remove DeclareMethods", "tree": {"sha": "4e0d5091a86c6debd8513a2a1ab9dd8e69f0daca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0d5091a86c6debd8513a2a1ab9dd8e69f0daca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "html_url": "https://github.com/rust-lang/rust/commit/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/comments", "author": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khyperia", "id": 953151, "node_id": "MDQ6VXNlcjk1MzE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/953151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khyperia", "html_url": "https://github.com/khyperia", "followers_url": "https://api.github.com/users/khyperia/followers", "following_url": "https://api.github.com/users/khyperia/following{/other_user}", "gists_url": "https://api.github.com/users/khyperia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khyperia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khyperia/subscriptions", "organizations_url": "https://api.github.com/users/khyperia/orgs", "repos_url": "https://api.github.com/users/khyperia/repos", "events_url": "https://api.github.com/users/khyperia/events{/privacy}", "received_events_url": "https://api.github.com/users/khyperia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0925fba747b4cf910592540aa1f817778dc315c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0925fba747b4cf910592540aa1f817778dc315c", "html_url": "https://github.com/rust-lang/rust/commit/a0925fba747b4cf910592540aa1f817778dc315c"}], "stats": {"total": 128, "additions": 62, "deletions": 66}, "files": [{"sha": "1696f35563d91a21448426ad6389b18481426db2", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -433,6 +433,17 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::LLVMSetSection(g, section.as_ptr());\n         }\n     }\n+\n+    fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n+        if self.get_declared_value(\"main\").is_none() {\n+            Some(self.declare_cfn(\"main\", fn_type))\n+        } else {\n+            // If the symbol already exists, it is an error: for example, the user wrote\n+            // #[no_mangle] extern \"C\" fn main(..) {..}\n+            // instead of #[start]\n+            None\n+        }\n+    }\n }\n \n impl CodegenCx<'b, 'tcx> {"}, {"sha": "a3d6882940a09b6e7f33822d32fe57e82bd180f3", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -51,42 +51,69 @@ fn declare_raw_fn(\n     llfn\n }\n \n-impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n-    fn declare_global(&self, name: &str, ty: &'ll Type) -> &'ll Value {\n+impl CodegenCx<'ll, 'tcx> {\n+    /// Declare a global value.\n+    ///\n+    /// If there\u2019s a value with the same name already declared, the function will\n+    /// return its Value instead.\n+    pub fn declare_global(&self, name: &str, ty: &'ll Type) -> &'ll Value {\n         debug!(\"declare_global(name={:?})\", name);\n         unsafe { llvm::LLVMRustGetOrInsertGlobal(self.llmod, name.as_ptr().cast(), name.len(), ty) }\n     }\n \n-    fn declare_cfn(&self, name: &str, fn_type: &'ll Type) -> &'ll Value {\n+    /// Declare a C ABI function.\n+    ///\n+    /// Only use this for foreign function ABIs and glue. For Rust functions use\n+    /// `declare_fn` instead.\n+    ///\n+    /// If there\u2019s a value with the same name already declared, the function will\n+    /// update the declaration and return existing Value instead.\n+    pub fn declare_cfn(&self, name: &str, fn_type: &'ll Type) -> &'ll Value {\n         declare_raw_fn(self, name, llvm::CCallConv, fn_type)\n     }\n \n-    fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> &'ll Value {\n+    /// Declare a Rust function.\n+    ///\n+    /// If there\u2019s a value with the same name already declared, the function will\n+    /// update the declaration and return existing Value instead.\n+    pub fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> &'ll Value {\n         debug!(\"declare_rust_fn(name={:?}, fn_abi={:?})\", name, fn_abi);\n \n         let llfn = declare_raw_fn(self, name, fn_abi.llvm_cconv(), fn_abi.llvm_type(self));\n         fn_abi.apply_attrs_llfn(self, llfn);\n         llfn\n     }\n \n-    fn define_global(&self, name: &str, ty: &'ll Type) -> Option<&'ll Value> {\n+    /// Declare a global with an intention to define it.\n+    ///\n+    /// Use this function when you intend to define a global. This function will\n+    /// return `None` if the name already has a definition associated with it. In that\n+    /// case an error should be reported to the user, because it usually happens due\n+    /// to user\u2019s fault (e.g., misuse of `#[no_mangle]` or `#[export_name]` attributes).\n+    pub fn define_global(&self, name: &str, ty: &'ll Type) -> Option<&'ll Value> {\n         if self.get_defined_value(name).is_some() {\n             None\n         } else {\n             Some(self.declare_global(name, ty))\n         }\n     }\n \n-    fn define_private_global(&self, ty: &'ll Type) -> &'ll Value {\n+    /// Declare a private global\n+    ///\n+    /// Use this function when you intend to define a global without a name.\n+    pub fn define_private_global(&self, ty: &'ll Type) -> &'ll Value {\n         unsafe { llvm::LLVMRustInsertPrivateGlobal(self.llmod, ty) }\n     }\n \n-    fn get_declared_value(&self, name: &str) -> Option<&'ll Value> {\n+    /// Gets declared value by name.\n+    pub fn get_declared_value(&self, name: &str) -> Option<&'ll Value> {\n         debug!(\"get_declared_value(name={:?})\", name);\n         unsafe { llvm::LLVMRustGetNamedValue(self.llmod, name.as_ptr().cast(), name.len()) }\n     }\n \n-    fn get_defined_value(&self, name: &str) -> Option<&'ll Value> {\n+    /// Gets defined or externally defined (AvailableExternally linkage) value by\n+    /// name.\n+    pub fn get_defined_value(&self, name: &str) -> Option<&'ll Value> {\n         self.get_declared_value(name).and_then(|val| {\n             let declaration = unsafe { llvm::LLVMIsDeclaration(val) != 0 };\n             if !declaration { Some(val) } else { None }"}, {"sha": "d82fc2c9f63d9a1746727b578909776c29d94915", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -407,16 +407,18 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         // listing.\n         let main_ret_ty = cx.tcx().erase_regions(&main_ret_ty.no_bound_vars().unwrap());\n \n-        if cx.get_declared_value(\"main\").is_some() {\n-            // FIXME: We should be smart and show a better diagnostic here.\n-            cx.sess()\n-                .struct_span_err(sp, \"entry symbol `main` declared multiple times\")\n-                .help(\"did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\")\n-                .emit();\n-            cx.sess().abort_if_errors();\n-            bug!();\n-        }\n-        let llfn = cx.declare_cfn(\"main\", llfty);\n+        let llfn = match cx.declare_c_main(llfty) {\n+            Some(llfn) => llfn,\n+            None => {\n+                // FIXME: We should be smart and show a better diagnostic here.\n+                cx.sess()\n+                    .struct_span_err(sp, \"entry symbol `main` declared multiple times\")\n+                    .help(\"did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\")\n+                    .emit();\n+                cx.sess().abort_if_errors();\n+                bug!();\n+            }\n+        };\n \n         // `main` should respect same config for frame pointer elimination as rest of code\n         cx.set_frame_pointer_elimination(llfn);"}, {"sha": "655afcd17f0da75784e4bd5b85851e1b538182d9", "filename": "compiler/rustc_codegen_ssa/src/traits/declare.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdeclare.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -1,51 +1,7 @@\n use super::BackendTypes;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::{Instance, Ty};\n-use rustc_target::abi::call::FnAbi;\n-\n-pub trait DeclareMethods<'tcx>: BackendTypes {\n-    /// Declare a global value.\n-    ///\n-    /// If there\u2019s a value with the same name already declared, the function will\n-    /// return its Value instead.\n-    fn declare_global(&self, name: &str, ty: Self::Type) -> Self::Value;\n-\n-    /// Declare a C ABI function.\n-    ///\n-    /// Only use this for foreign function ABIs and glue. For Rust functions use\n-    /// `declare_fn` instead.\n-    ///\n-    /// If there\u2019s a value with the same name already declared, the function will\n-    /// update the declaration and return existing Value instead.\n-    fn declare_cfn(&self, name: &str, fn_type: Self::Type) -> Self::Function;\n-\n-    /// Declare a Rust function.\n-    ///\n-    /// If there\u2019s a value with the same name already declared, the function will\n-    /// update the declaration and return existing Value instead.\n-    fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> Self::Function;\n-\n-    /// Declare a global with an intention to define it.\n-    ///\n-    /// Use this function when you intend to define a global. This function will\n-    /// return `None` if the name already has a definition associated with it. In that\n-    /// case an error should be reported to the user, because it usually happens due\n-    /// to user\u2019s fault (e.g., misuse of `#[no_mangle]` or `#[export_name]` attributes).\n-    fn define_global(&self, name: &str, ty: Self::Type) -> Option<Self::Value>;\n-\n-    /// Declare a private global\n-    ///\n-    /// Use this function when you intend to define a global without a name.\n-    fn define_private_global(&self, ty: Self::Type) -> Self::Value;\n-\n-    /// Gets declared value by name.\n-    fn get_declared_value(&self, name: &str) -> Option<Self::Value>;\n-\n-    /// Gets defined or externally defined (AvailableExternally linkage) value by\n-    /// name.\n-    fn get_defined_value(&self, name: &str) -> Option<Self::Value>;\n-}\n+use rustc_middle::ty::Instance;\n \n pub trait PreDefineMethods<'tcx>: BackendTypes {\n     fn predefine_static("}, {"sha": "6fff64bfcb6c5a4bdce2848d784b39e81ce866fb", "filename": "compiler/rustc_codegen_ssa/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -19,4 +19,6 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn set_frame_pointer_elimination(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);\n     fn create_used_variable(&self);\n+    /// Declares the extern \"C\" main function for the entry point. Returns None if the symbol already exists.\n+    fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function>;\n }"}, {"sha": "698ef6083e674ba201b92f3079fe62cbf795e7aa", "filename": "compiler/rustc_codegen_ssa/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc405e3521d84cfaef7d94f1ae40c6c16796c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs?ref=0bc405e3521d84cfaef7d94f1ae40c6c16796c8b", "patch": "@@ -35,7 +35,7 @@ pub use self::builder::{BuilderMethods, OverflowOp};\n pub use self::consts::ConstMethods;\n pub use self::coverageinfo::{CoverageInfoBuilderMethods, CoverageInfoMethods};\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};\n-pub use self::declare::{DeclareMethods, PreDefineMethods};\n+pub use self::declare::PreDefineMethods;\n pub use self::intrinsic::IntrinsicCallMethods;\n pub use self::misc::MiscMethods;\n pub use self::statics::{StaticBuilderMethods, StaticMethods};\n@@ -60,7 +60,6 @@ pub trait CodegenMethods<'tcx>:\n     + StaticMethods\n     + CoverageInfoMethods\n     + DebugInfoMethods<'tcx>\n-    + DeclareMethods<'tcx>\n     + AsmMethods\n     + PreDefineMethods<'tcx>\n     + HasParamEnv<'tcx>\n@@ -77,7 +76,6 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + StaticMethods\n         + CoverageInfoMethods\n         + DebugInfoMethods<'tcx>\n-        + DeclareMethods<'tcx>\n         + AsmMethods\n         + PreDefineMethods<'tcx>\n         + HasParamEnv<'tcx>"}]}