{"sha": "7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNmJmYzUzYzg1ZDNlYjk0NzBmZDMwNjIxYTFiNTRhNjFiYmJkYjY=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-02-08T15:41:37Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-02-08T15:41:37Z"}, "message": "Extract block to insert an intrinsic into its own function", "tree": {"sha": "1b9f5de7751c43982a6e9f3f2f3229fb1f814ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9f5de7751c43982a6e9f3f2f3229fb1f814ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "html_url": "https://github.com/rust-lang/rust/commit/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1731801163df1d3a8d4ddfa68adac2ec833ef7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1731801163df1d3a8d4ddfa68adac2ec833ef7f", "html_url": "https://github.com/rust-lang/rust/commit/d1731801163df1d3a8d4ddfa68adac2ec833ef7f"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "03de20861a9e5f28aa64113e3d94e9ada01ff175", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "patch": "@@ -465,33 +465,38 @@ impl CodegenCx<'b, 'tcx> {\n         self.declare_intrinsic(key).unwrap_or_else(|| bug!(\"unknown intrinsic '{}'\", key))\n     }\n \n+    fn insert_intrinsic(\n+        &self, name: &'static str, args: Option<&[&'b llvm::Type]>, ret: &'b llvm::Type\n+    ) -> &'b llvm::Value {\n+        let fn_ty = if let Some(args) = args {\n+            self.type_func(args, ret)\n+        } else {\n+            self.type_variadic_func(&[], ret)\n+        };\n+        let f = self.declare_cfn(name, fn_ty);\n+        llvm::SetUnnamedAddr(f, false);\n+        self.intrinsics.borrow_mut().insert(name, f.clone());\n+        f\n+    }\n+\n     fn declare_intrinsic(\n         &self,\n         key: &str\n     ) -> Option<&'b Value> {\n         macro_rules! ifn {\n             ($name:expr, fn() -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_func(&[], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, Some(&[]), $ret));\n                 }\n             );\n             ($name:expr, fn(...) -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_variadic_func(&[], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, None, $ret));\n                 }\n             );\n             ($name:expr, fn($($arg:expr),*) -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_func(&[$($arg),*], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, Some(&[$($arg),*]), $ret));\n                 }\n             );\n         }"}]}