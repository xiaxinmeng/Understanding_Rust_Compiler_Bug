{"sha": "d9a02b0fb728ac994883845b1c53630c2dec4657", "node_id": "C_kwDOAAsO6NoAKGQ5YTAyYjBmYjcyOGFjOTk0ODgzODQ1YjFjNTM2MzBjMmRlYzQ2NTc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T10:36:18Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:31:34Z"}, "message": "Split out the actual predicate solving code into a separate function", "tree": {"sha": "d3e081d35aa51848c53b9463b7555b5575204e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3e081d35aa51848c53b9463b7555b5575204e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a02b0fb728ac994883845b1c53630c2dec4657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a02b0fb728ac994883845b1c53630c2dec4657", "html_url": "https://github.com/rust-lang/rust/commit/d9a02b0fb728ac994883845b1c53630c2dec4657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a02b0fb728ac994883845b1c53630c2dec4657/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ff6a95b559e0c293f4c118145964332994dcc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ff6a95b559e0c293f4c118145964332994dcc0", "html_url": "https://github.com/rust-lang/rust/commit/48ff6a95b559e0c293f4c118145964332994dcc0"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "4da19bb4a6a8c73941b1bb6a00c27b9b4e7d04a3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9a02b0fb728ac994883845b1c53630c2dec4657/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a02b0fb728ac994883845b1c53630c2dec4657/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=d9a02b0fb728ac994883845b1c53630c2dec4657", "patch": "@@ -136,7 +136,6 @@ pub fn predicates_for_generics<'tcx>(\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n-#[instrument(level = \"debug\", skip(infcx, param_env, span), ret)]\n pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -146,31 +145,40 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n ) -> bool {\n     let trait_ref =\n         ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n+    pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const(), span)\n+}\n+\n+#[instrument(level = \"debug\", skip(infcx, param_env, span, pred), ret)]\n+fn pred_known_to_hold_modulo_regions<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    pred: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + TypeVisitable<'tcx>,\n+    span: Span,\n+) -> bool {\n+    let has_non_region_infer = pred.has_non_region_infer();\n     let obligation = Obligation {\n         param_env,\n+        // We can use a dummy node-id here because we won't pay any mind\n+        // to region obligations that arise (there shouldn't really be any\n+        // anyhow).\n         cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),\n         recursion_depth: 0,\n-        predicate: trait_ref.without_const().to_predicate(infcx.tcx),\n+        predicate: pred.to_predicate(infcx.tcx),\n     };\n \n     let result = infcx.predicate_must_hold_modulo_regions(&obligation);\n     debug!(?result);\n \n-    if result && ty.has_non_region_infer() {\n+    if result && has_non_region_infer {\n         // Because of inference \"guessing\", selection can sometimes claim\n         // to succeed while the success requires a guess. To ensure\n         // this function's result remains infallible, we must confirm\n         // that guess. While imperfect, I believe this is sound.\n \n-        // We can use a dummy node-id here because we won't pay any mind\n-        // to region obligations that arise (there shouldn't really be any\n-        // anyhow).\n-        let cause = ObligationCause::misc(span, hir::CRATE_HIR_ID);\n-\n         // The handling of regions in this area of the code is terrible,\n         // see issue #29149. We should be able to improve on this with\n         // NLL.\n-        let errors = fully_solve_bound(infcx, cause, param_env, ty, def_id);\n+        let errors = fully_solve_obligation(infcx, obligation);\n \n         // Note: we only assume something is `Copy` if we can\n         // *definitively* show that it implements `Copy`. Otherwise,"}]}