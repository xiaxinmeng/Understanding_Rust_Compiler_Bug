{"sha": "b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZWM0ZDExODM1ZDE2MTY3ZWU0OGJiNmUzY2Y3ZTgzNDdmMzY3ZTE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-25T18:23:09Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-25T18:23:09Z"}, "message": "Address reviews", "tree": {"sha": "2471f95bc4933c58ab650086939a498bf926bf87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2471f95bc4933c58ab650086939a498bf926bf87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "html_url": "https://github.com/rust-lang/rust/commit/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0030a777f286bbbd938b9cc4f0b559843fffd37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0030a777f286bbbd938b9cc4f0b559843fffd37a", "html_url": "https://github.com/rust-lang/rust/commit/0030a777f286bbbd938b9cc4f0b559843fffd37a"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "2e339b1eb885de3d0e4134cf7773f6b95abe2922", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "patch": "@@ -400,7 +400,7 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n     }\n \n     // If the first pattern is an or-pattern, expand this pattern. Otherwise, return `None`.\n-    fn expand_or_pat(&self) -> Option<Vec<PatStack<'p, 'tcx>>> {\n+    fn expand_or_pat(&self) -> Option<Vec<Self>> {\n         if self.is_empty() {\n             None\n         } else if let PatKind::Or { pats } = &*self.head().kind {\n@@ -1838,7 +1838,7 @@ fn pat_constructor<'tcx>(\n                 if slice.is_some() { VarLen(prefix, suffix) } else { FixedLen(prefix + suffix) };\n             Some(Slice(Slice { array_len, kind }))\n         }\n-        PatKind::Or { .. } => bug!(), // Should have been expanded earlier on.\n+        PatKind::Or { .. } => bug!(\"Or-pattern hould have been expanded earlier on.\"),\n     }\n }\n \n@@ -2444,7 +2444,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             _ => span_bug!(pat.span, \"unexpected ctor {:?} for slice pat\", constructor),\n         },\n \n-        PatKind::Or { .. } => bug!(), // Should have been expanded earlier on.\n+        PatKind::Or { .. } => bug!(\"Or-pattern hould have been expanded earlier on.\"),\n     };\n     debug!(\"specialize({:#?}, {:#?}) = {:#?}\", pat, ctor_wild_subpatterns, result);\n "}, {"sha": "ba8427045e3192d012559daa5232559df53f3f0a", "filename": "src/test/compile-fail/or-patterns.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1/src%2Ftest%2Fcompile-fail%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ec4d11835d16167ee48bb6e3cf7e8347f367e1/src%2Ftest%2Fcompile-fail%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patterns.rs?ref=b5ec4d11835d16167ee48bb6e3cf7e8347f367e1", "patch": "@@ -1,6 +1,7 @@\n // should-ice\n-#![allow(incomplete_features)]\n #![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n #![deny(unreachable_patterns)]\n \n // The ice will get removed once or-patterns are correctly implemented\n@@ -53,4 +54,8 @@ fn main() {\n         ((1..=4,),) => {}, //~ ERROR unreachable pattern\n         ((_,),) => {},\n     }\n+    match (&[0u8][..],) {\n+        ([] | [0 | 1..=255] | [_, ..],) => {},\n+        (_,) => {}, //~ ERROR unreachable pattern\n+    }\n }"}]}