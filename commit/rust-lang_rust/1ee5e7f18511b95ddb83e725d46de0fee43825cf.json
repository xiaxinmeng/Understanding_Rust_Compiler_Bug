{"sha": "1ee5e7f18511b95ddb83e725d46de0fee43825cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTVlN2YxODUxMWI5NWRkYjgzZTcyNWQ0NmRlMGZlZTQzODI1Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T03:17:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T03:17:13Z"}, "message": "auto merge of #13820 : klutzy/rust/urandom, r=alexcrichton\n\nThis patch adds document which explains when to use `OSRng` in\r\ncryptographic context, and explains why we use `/dev/urandom` instead\r\nof `/dev/random`.", "tree": {"sha": "eef1a05f82da4bc5dee374af11653000613e14d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef1a05f82da4bc5dee374af11653000613e14d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee5e7f18511b95ddb83e725d46de0fee43825cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee5e7f18511b95ddb83e725d46de0fee43825cf", "html_url": "https://github.com/rust-lang/rust/commit/1ee5e7f18511b95ddb83e725d46de0fee43825cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee5e7f18511b95ddb83e725d46de0fee43825cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d63228ea38b1eb5f497b6397b06808b87e4083", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d63228ea38b1eb5f497b6397b06808b87e4083", "html_url": "https://github.com/rust-lang/rust/commit/07d63228ea38b1eb5f497b6397b06808b87e4083"}, {"sha": "c92f51974b3f2ef99d3388d7a4d44fbb81433626", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92f51974b3f2ef99d3388d7a4d44fbb81433626", "html_url": "https://github.com/rust-lang/rust/commit/c92f51974b3f2ef99d3388d7a4d44fbb81433626"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "9d274975cb03ffb0d8592ced31dd3183877c7548", "filename": "src/librand/lib.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5e7f18511b95ddb83e725d46de0fee43825cf/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5e7f18511b95ddb83e725d46de0fee43825cf/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=1ee5e7f18511b95ddb83e725d46de0fee43825cf", "patch": "@@ -30,20 +30,27 @@ after generating 32 KiB of random data.\n \n # Cryptographic security\n \n-An application that requires random numbers for cryptographic purposes\n-should prefer `OSRng`, which reads randomness from one of the source\n-that the operating system provides (e.g. `/dev/urandom` on\n-Unixes). The other random number generators provided by this module\n-are either known to be insecure (`XorShiftRng`), or are not verified\n-to be secure (`IsaacRng`, `Isaac64Rng` and `StdRng`).\n-\n-*Note*: on Linux, `/dev/random` is more secure than `/dev/urandom`,\n-but it is a blocking RNG, and will wait until it has determined that\n-it has collected enough entropy to fulfill a request for random\n-data. It can be used with the `Rng` trait provided by this module by\n-opening the file and passing it to `reader::ReaderRng`. Since it\n-blocks, `/dev/random` should only be used to retrieve small amounts of\n-randomness.\n+An application that requires an entropy source for cryptographic purposes\n+must use `OSRng`, which reads randomness from the source that the operating\n+system provides (e.g. `/dev/urandom` on Unixes or `CryptGenRandom()` on Windows).\n+The other random number generators provided by this module are not suitable\n+for such purposes.\n+\n+*Note*: many Unix systems provide `/dev/random` as well as `/dev/urandom`.\n+This module uses `/dev/urandom` for the following reasons:\n+\n+-   On Linux, `/dev/random` may block if entropy pool is empty; `/dev/urandom` will not block.\n+    This does not mean that `/dev/random` provides better output than\n+    `/dev/urandom`; the kernel internally runs a cryptographically secure pseudorandom\n+    number generator (CSPRNG) based on entropy pool for random number generation,\n+    so the \"quality\" of `/dev/random` is not better than `/dev/urandom` in most cases.\n+    However, this means that `/dev/urandom` can yield somewhat predictable randomness\n+    if the entropy pool is very small, such as immediately after first booting.\n+    If an application likely to be run soon after first booting, or on a system with very\n+    few entropy sources, one should consider using `/dev/random` via `ReaderRng`.\n+-   On some systems (e.g. FreeBSD, OpenBSD and Mac OS X) there is no difference\n+    between the two sources. (Also note that, on some systems e.g. FreeBSD, both `/dev/random`\n+    and `/dev/urandom` may block once if the CSPRNG has not seeded yet.)\n \n # Examples\n "}, {"sha": "0e1d01a45c986132fbcd340da8616c7ab8a5320e", "filename": "src/librand/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee5e7f18511b95ddb83e725d46de0fee43825cf/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee5e7f18511b95ddb83e725d46de0fee43825cf/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=1ee5e7f18511b95ddb83e725d46de0fee43825cf", "patch": "@@ -109,6 +109,7 @@ mod imp {\n                                      CRYPT_VERIFYCONTEXT | CRYPT_SILENT)\n             };\n \n+            // FIXME #13259:\n             // It turns out that if we can't acquire a context with the\n             // NTE_BAD_SIGNATURE error code, the documentation states:\n             //"}]}