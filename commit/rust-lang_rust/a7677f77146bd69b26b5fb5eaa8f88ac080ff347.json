{"sha": "a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Njc3Zjc3MTQ2YmQ2OWIyNmI1ZmI1ZWFhOGY4OGFjMDgwZmYzNDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-20T09:25:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-20T10:09:49Z"}, "message": "reference NonNull::dangling", "tree": {"sha": "1d78c92aa3ca18da943dfc060082572c2099c341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d78c92aa3ca18da943dfc060082572c2099c341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "html_url": "https://github.com/rust-lang/rust/commit/a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7677f77146bd69b26b5fb5eaa8f88ac080ff347/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f572a9810e2c54b7067641583a5527acff6cae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f572a9810e2c54b7067641583a5527acff6cae5", "html_url": "https://github.com/rust-lang/rust/commit/0f572a9810e2c54b7067641583a5527acff6cae5"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "9676572e45d3af5977624ee36fdb08d24c8a55be", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7677f77146bd69b26b5fb5eaa8f88ac080ff347/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7677f77146bd69b26b5fb5eaa8f88ac080ff347/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "patch": "@@ -62,10 +62,12 @@\n //! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n //! [`Global`] allocator with [`Layout::for_value(&*value)`].\n //!\n-//! For zero-sized values, the `Box` pointer still has to be [valid] for reads and writes and\n-//! sufficiently aligned. In particular, casting any aligned non-zero integer literal to a raw\n-//! pointer produces a valid pointer, but a pointer pointing into previously allocated memory that\n-//! since got freed is not valid.\n+//! For zero-sized values, the `Box` pointer still has to be [valid] for reads\n+//! and writes and sufficiently aligned. In particular, casting any aligned\n+//! non-zero integer literal to a raw pointer produces a valid pointer, but a\n+//! pointer pointing into previously allocated memory that since got freed is\n+//! not valid. The recommended way to build a Box to a ZST if `Box::new` cannot\n+//! be used is to use [`ptr::NonNull::dangling`].\n //!\n //! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented\n //! as a single pointer and is also ABI-compatible with C pointers"}, {"sha": "6544dd4fd7a5eb1fd5c4c17f1bf44bb4c2158c24", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7677f77146bd69b26b5fb5eaa8f88ac080ff347/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7677f77146bd69b26b5fb5eaa8f88ac080ff347/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a7677f77146bd69b26b5fb5eaa8f88ac080ff347", "patch": "@@ -20,11 +20,12 @@\n //!   be *dereferenceable*: the memory range of the given size starting at the pointer must all be\n //!   within the bounds of a single allocated object. Note that in Rust,\n //!   every (stack-allocated) variable is considered a separate allocated object.\n-//! * Even for operations of [size zero][zst], the pointer must not be \"dangling\" in the sense of\n-//!   pointing to deallocated memory. However, casting any non-zero integer literal to a pointer is\n-//!   valid for zero-sized accesses. This corresponds to writing your own allocator; allocating\n-//!   zero-sized objects is not very hard. In contrast, when you use the standard allocator, after\n-//!   memory got deallocated, even zero-sized accesses to that memory are invalid.\n+//! * Even for operations of [size zero][zst], the pointer must not be pointing to deallocated\n+//!   memory, i.e., deallocation makes pointers invalid even for zero-sized operations. However,\n+//!   casting any non-zero integer *literal* to a pointer is valid for zero-sized accesses, even if\n+//!   some memory happens to exist at that address and gets deallocated. This corresponds to writing\n+//!   your own allocator: allocating zero-sized objects is not very hard. The canonical way to\n+//!   obtain a pointer that is valid for zero-sized accesses is [`NonNull::dangling`].\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different"}]}