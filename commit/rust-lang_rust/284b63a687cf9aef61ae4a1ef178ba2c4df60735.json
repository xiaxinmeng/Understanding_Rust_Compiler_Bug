{"sha": "284b63a687cf9aef61ae4a1ef178ba2c4df60735", "node_id": "C_kwDOAAsO6NoAKDI4NGI2M2E2ODdjZjlhZWY2MWFlNGExZWYxNzhiYTJjNGRmNjA3MzU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-01T15:31:11Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-12-06T18:33:02Z"}, "message": "Rename remove_blocks to peel_blocks", "tree": {"sha": "1c60dfe2e88dcde2b9a9bb638574fb67519c698a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c60dfe2e88dcde2b9a9bb638574fb67519c698a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284b63a687cf9aef61ae4a1ef178ba2c4df60735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284b63a687cf9aef61ae4a1ef178ba2c4df60735", "html_url": "https://github.com/rust-lang/rust/commit/284b63a687cf9aef61ae4a1ef178ba2c4df60735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284b63a687cf9aef61ae4a1ef178ba2c4df60735/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0852705eb74ab5b840715d47226c707808735c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0852705eb74ab5b840715d47226c707808735c", "html_url": "https://github.com/rust-lang/rust/commit/9e0852705eb74ab5b840715d47226c707808735c"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "657c1f88c7db5055bd8714fe0329d9a9a9bde694", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::match_type;\n use clippy_utils::visitors::is_local_used;\n-use clippy_utils::{path_to_local_id, paths, peel_ref_operators, remove_blocks, strip_pat_refs};\n+use clippy_utils::{path_to_local_id, paths, peel_blocks, peel_ref_operators, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PatKind};\n@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n                        cx.typeck_results().expr_ty(filter_recv).peel_refs(),\n                        &paths::SLICE_ITER);\n             let operand_is_arg = |expr| {\n-                let expr = peel_ref_operators(cx, remove_blocks(expr));\n+                let expr = peel_ref_operators(cx, peel_blocks(expr));\n                 path_to_local_id(expr, arg_id)\n             };\n             let needle = if operand_is_arg(l) {"}, {"sha": "eccb18982f30da8a74e4f8a8626a94ef7c5e3189", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{is_automatically_derived, is_default_equivalent, remove_blocks};\n+use clippy_utils::{is_automatically_derived, is_default_equivalent, peel_blocks};\n use rustc_hir::{\n     def::{DefKind, Res},\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n@@ -95,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                         }\n                     }\n                 }\n-                let should_emit = match remove_blocks(func_expr).kind {\n+                let should_emit = match peel_blocks(func_expr).kind {\n                     ExprKind::Tup(fields) => fields.iter().all(|e| is_default_equivalent(cx, e)),\n                     ExprKind::Call(callee, args)\n                         if is_path_self(callee) => args.iter().all(|e| is_default_equivalent(cx, e)),"}, {"sha": "174c7da28d3ec1f246deac0c3dd52274aed9e1f9", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,8 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_trait_method;\n-use clippy_utils::remove_blocks;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n+use clippy_utils::{is_trait_method, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -60,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n             then {\n                 let closure_body = cx.tcx.hir().body(body_id);\n-                let closure_expr = remove_blocks(&closure_body.value);\n+                let closure_expr = peel_blocks(&closure_body.value);\n                 match closure_body.params[0].pat.kind {\n                     hir::PatKind::Ref(inner, hir::Mutability::Not) => if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated, .., name, None"}, {"sha": "385232f4d7138c1ce68bbfb895024fa0cbcf37d0", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -9,7 +9,7 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, pe\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{\n     get_parent_expr, is_expn_of, is_lang_ctor, is_lint_allowed, is_refutable, is_unit_expr, is_wild, meets_msrv, msrvs,\n-    path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks,\n+    path_to_local, path_to_local_id, peel_blocks, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns,\n     strip_pat_refs,\n };\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n@@ -659,7 +659,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                 QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n             if args.len() == 1;\n             if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n-            let body = remove_blocks(arms[0].body);\n+            let body = peel_blocks(arms[0].body);\n             if path_to_local_id(body, arg);\n \n             then {\n@@ -724,7 +724,7 @@ fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n             return;\n         }\n         let els = arms[1].body;\n-        let els = if is_unit_expr(remove_blocks(els)) {\n+        let els = if is_unit_expr(peel_blocks(els)) {\n             None\n         } else if let ExprKind::Block(Block { stmts, expr: block_expr, .. }, _) = els.kind {\n             if stmts.len() == 1 && block_expr.is_none() || stmts.is_empty() && block_expr.is_some() {\n@@ -1482,7 +1482,7 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n \n     let matched_vars = ex.span;\n     let bind_names = arms[0].pat.span;\n-    let match_body = remove_blocks(arms[0].body);\n+    let match_body = peel_blocks(arms[0].body);\n     let mut snippet_body = if match_body.span.from_expansion() {\n         Sugg::hir_with_macro_callsite(cx, match_body, \"..\").to_string()\n     } else {\n@@ -1679,7 +1679,7 @@ fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<BindingAnnotat\n         if is_lang_ctor(cx, qpath, OptionSome);\n         if let PatKind::Binding(rb, .., ident, _) = first_pat.kind;\n         if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n-        if let ExprKind::Call(e, args) = remove_blocks(arm.body).kind;\n+        if let ExprKind::Call(e, args) = peel_blocks(arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n         if is_lang_ctor(cx, some_path, OptionSome) && args.len() == 1;\n         if let ExprKind::Path(QPath::Resolved(_, path2)) = args[0].kind;"}, {"sha": "150bafc0f5db228f216127d3382c0be03e8ec353", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,7 +1,7 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n-use clippy_utils::{remove_blocks, visitors::find_all_ret_expressions};\n+use clippy_utils::{peel_blocks, visitors::find_all_ret_expressions};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -152,7 +152,7 @@ pub(crate) trait BindInsteadOfMap {\n         match arg.kind {\n             hir::ExprKind::Closure(_, _, body_id, closure_args_span, _) => {\n                 let closure_body = cx.tcx.hir().body(body_id);\n-                let closure_expr = remove_blocks(&closure_body.value);\n+                let closure_expr = peel_blocks(&closure_body.value);\n \n                 if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, closure_args_span) {\n                     true"}, {"sha": "6d8733c08b43012b5870de5e382410baa783cbfb", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_trait_method, path_to_local_id, remove_blocks, SpanlessEq};\n+use clippy_utils::{is_trait_method, path_to_local_id, peel_blocks, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -25,7 +25,7 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         },\n         hir::ExprKind::Closure(_, _, c, _, _) => {\n             let body = cx.tcx.hir().body(*c);\n-            let closure_expr = remove_blocks(&body.value);\n+            let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n                 hir::ExprKind::MethodCall(hir::PathSegment { ident, .. }, _, args, _) => {"}, {"sha": "fa74a8f3dc363b8a7df525d59c5df03650153f4f", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, remove_blocks};\n+use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -53,7 +53,7 @@ pub(super) fn check<'tcx>(\n             }),\n         hir::ExprKind::Closure(_, _, body_id, _, _) => {\n             let closure_body = cx.tcx.hir().body(body_id);\n-            let closure_expr = remove_blocks(&closure_body.value);\n+            let closure_expr = peel_blocks(&closure_body.value);\n \n             match &closure_expr.kind {\n                 hir::ExprKind::MethodCall(_, _, args, _) => {"}, {"sha": "47a811996085e59d95fa98475a33a0a367a9f1d8", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{is_trait_method, path_to_local_id, remove_blocks, strip_pat_refs};\n+use clippy_utils::{is_trait_method, path_to_local_id, peel_blocks, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n@@ -31,7 +31,7 @@ pub(super) fn check(\n             // Extract the body of the closure passed to fold\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = acc.kind;\n             let closure_body = cx.tcx.hir().body(body_id);\n-            let closure_expr = remove_blocks(&closure_body.value);\n+            let closure_expr = peel_blocks(&closure_body.value);\n \n             // Check if the closure body is of the form `acc <op> some_expr(x)`\n             if let hir::ExprKind::Binary(ref bin_op, left_expr, right_expr) = closure_expr.kind;"}, {"sha": "2991c5880d5403e58297823e1c0594880759231a", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b63a687cf9aef61ae4a1ef178ba2c4df60735/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=284b63a687cf9aef61ae4a1ef178ba2c4df60735", "patch": "@@ -1224,6 +1224,25 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n     }\n }\n \n+/// Removes blocks around an expression, only if the block contains just one expression\n+/// and no statements.\n+///\n+/// Examples:\n+///  * `{}`       -> `{}`\n+///  * `{ x }`    -> `x`\n+///  * `{{ x }}`  -> `x`\n+///  * `{ x; }`   -> `{ x; }`\n+///  * `{ x; y }` -> `{ x; y }`\n+pub fn peel_blocks<'tcx>(mut expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n+    while let ExprKind::Block(block, ..) = expr.kind {\n+        match (block.stmts.is_empty(), block.expr.as_ref()) {\n+            (true, Some(e)) => expr = e,\n+            _ => break,\n+        }\n+    }\n+    expr\n+}\n+\n /// Checks if the given expression is the else clause of either an `if` or `if let` expression.\n pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n     let mut iter = tcx.hir().parent_iter(expr.hir_id);\n@@ -1405,20 +1424,6 @@ pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n     has_attr(attrs, sym::automatically_derived)\n }\n \n-/// Remove blocks around an expression.\n-///\n-/// Ie. `x`, `{ x }` and `{{{{ x }}}}` all give `x`. `{ x; y }` and `{}` return\n-/// themselves.\n-pub fn remove_blocks<'tcx>(mut expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n-    while let ExprKind::Block(block, ..) = expr.kind {\n-        match (block.stmts.is_empty(), block.expr.as_ref()) {\n-            (true, Some(e)) => expr = e,\n-            _ => break,\n-        }\n-    }\n-    expr\n-}\n-\n pub fn is_self(slf: &Param<'_>) -> bool {\n     if let PatKind::Binding(.., name, _) = slf.pat.kind {\n         name.name == kw::SelfLower"}]}