{"sha": "e097fca4df2ff70e0213d747a408d109db16c5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOTdmY2E0ZGYyZmY3MGUwMjEzZDc0N2E0MDhkMTA5ZGIxNmM1ZDI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-12-18T16:59:43Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-12-18T16:59:43Z"}, "message": "Update iterator_step_by_zero\n\nMove `iterator_step_by_zero` into `methods` since it applies to all\niterators and not just ranges. Simplify the code while doing so.", "tree": {"sha": "eb83c0eb013149226fde9b155053d51f77ce9583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb83c0eb013149226fde9b155053d51f77ce9583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e097fca4df2ff70e0213d747a408d109db16c5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e097fca4df2ff70e0213d747a408d109db16c5d2", "html_url": "https://github.com/rust-lang/rust/commit/e097fca4df2ff70e0213d747a408d109db16c5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e097fca4df2ff70e0213d747a408d109db16c5d2/comments", "author": null, "committer": null, "parents": [{"sha": "c62396dbf442839fc725d353ef85306da1667caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62396dbf442839fc725d353ef85306da1667caf", "html_url": "https://github.com/rust-lang/rust/commit/c62396dbf442839fc725d353ef85306da1667caf"}], "stats": {"total": 223, "additions": 119, "deletions": 104}, "files": [{"sha": "7fb499ebf855b5d25b2959d586a445262f85701d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -606,6 +606,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n         &methods::INTO_ITER_ON_REF,\n+        &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NTH,\n         &methods::ITER_SKIP_NEXT,\n@@ -699,7 +700,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &ptr::PTR_ARG,\n         &ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         &question_mark::QUESTION_MARK,\n-        &ranges::ITERATOR_STEP_BY_ZERO,\n         &ranges::RANGE_MINUS_ONE,\n         &ranges::RANGE_PLUS_ONE,\n         &ranges::RANGE_ZIP_WITH_LEN,\n@@ -1179,6 +1179,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n+        LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n@@ -1244,7 +1245,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&ptr::PTR_ARG),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&question_mark::QUESTION_MARK),\n-        LintId::of(&ranges::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n@@ -1521,6 +1521,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n+        LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&methods::ZST_OFFSET),\n@@ -1533,7 +1534,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&ptr::MUT_FROM_REF),\n-        LintId::of(&ranges::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),"}, {"sha": "8e94cc0f00211b7f220e39877d6ef122e536aa86", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -737,6 +737,26 @@ declare_clippy_lint! {\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n+    /// which never terminates.\n+    ///\n+    /// **Why is this bad?** This very much looks like an oversight, since with\n+    /// `loop { .. }` there is an obvious better way to endlessly loop.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// for x in (5..5).step_by(0) {\n+    ///     ..\n+    /// }\n+    /// ```\n+    pub ITERATOR_STEP_BY_ZERO,\n+    correctness,\n+    \"using `Iterator::step_by(0)`, which produces an infinite iterator\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `.iter().nth()` (and the related\n     /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n@@ -1115,6 +1135,7 @@ declare_lint_pass!(Methods => [\n     FLAT_MAP_IDENTITY,\n     FIND_MAP,\n     MAP_FLATTEN,\n+    ITERATOR_STEP_BY_ZERO,\n     ITER_NTH,\n     ITER_SKIP_NEXT,\n     GET_UNWRAP,\n@@ -1173,6 +1194,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             },\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, arg_lists[1], false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, arg_lists[1], true),\n+            [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr),\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n@@ -1950,6 +1972,20 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     }\n }\n \n+fn lint_step_by<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, args: &'tcx [hir::Expr]) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        use crate::consts::{constant, Constant};\n+        if let Some((Constant::Int(0), _)) = constant(cx, cx.tables, &args[1]) {\n+            span_lint(\n+                cx,\n+                ITERATOR_STEP_BY_ZERO,\n+                expr.span,\n+                \"Iterator::step_by(0) will panic at runtime\",\n+            );\n+        }\n+    }\n+}\n+\n fn lint_iter_nth<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_args: &'tcx [hir::Expr], is_mut: bool) {\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {"}, {"sha": "6a16adf71dc173fd1a72a6d5e8e8cc7c03d61a95", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -8,28 +8,8 @@ use syntax::ast::RangeLimits;\n use syntax::source_map::Spanned;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n-use crate::utils::{is_integer_const, paths, snippet, snippet_opt, span_lint, span_lint_and_then};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n-    /// which never terminates.\n-    ///\n-    /// **Why is this bad?** This very much looks like an oversight, since with\n-    /// `loop { .. }` there is an obvious better way to endlessly loop.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// for x in (5..5).step_by(0) {\n-    ///     ..\n-    /// }\n-    /// ```\n-    pub ITERATOR_STEP_BY_ZERO,\n-    correctness,\n-    \"using `Iterator::step_by(0)`, which produces an infinite iterator\"\n-}\n+use crate::utils::{higher, SpanlessEq};\n+use crate::utils::{is_integer_const, snippet, snippet_opt, span_lint, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for zipping a collection with the range of\n@@ -102,7 +82,6 @@ declare_clippy_lint! {\n }\n \n declare_lint_pass!(Ranges => [\n-    ITERATOR_STEP_BY_ZERO,\n     RANGE_ZIP_WITH_LEN,\n     RANGE_PLUS_ONE,\n     RANGE_MINUS_ONE\n@@ -112,19 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind {\n             let name = path.ident.as_str();\n-\n-            // Range with step_by(0).\n-            if name == \"step_by\" && args.len() == 2 && has_step_by(cx, &args[0]) {\n-                use crate::consts::{constant, Constant};\n-                if let Some((Constant::Int(0), _)) = constant(cx, cx.tables, &args[1]) {\n-                    span_lint(\n-                        cx,\n-                        ITERATOR_STEP_BY_ZERO,\n-                        expr.span,\n-                        \"Iterator::step_by(0) will panic at runtime\",\n-                    );\n-                }\n-            } else if name == \"zip\" && args.len() == 2 {\n+            if name == \"zip\" && args.len() == 2 {\n                 let iter = &args[0].kind;\n                 let zip_arg = &args[1];\n                 if_chain! {\n@@ -232,14 +199,6 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n     }\n }\n \n-fn has_step_by(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    // No need for `walk_ptrs_ty` here because `step_by` moves `self`, so it\n-    // can't be called on a borrowed range.\n-    let ty = cx.tables.expr_ty_adjusted(expr);\n-\n-    get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n-}\n-\n fn y_plus_one<'t>(cx: &LateContext<'_, '_>, expr: &'t Expr) -> Option<&'t Expr> {\n     match expr.kind {\n         ExprKind::Binary("}, {"sha": "13d1cfd428185b83479abd7b939b55e5137f357d", "filename": "tests/ui/iterator_step_by_zero.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Fiterator_step_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Fiterator_step_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterator_step_by_zero.rs?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -0,0 +1,28 @@\n+#[warn(clippy::iterator_step_by_zero)]\n+fn main() {\n+    let _ = vec![\"A\", \"B\", \"B\"].iter().step_by(0);\n+    let _ = \"XXX\".chars().step_by(0);\n+    let _ = (0..1).step_by(0);\n+\n+    // No error, not an iterator.\n+    let y = NotIterator;\n+    y.step_by(0);\n+\n+    // No warning for non-zero step\n+    let _ = (0..1).step_by(1);\n+\n+    let _ = (1..).step_by(0);\n+    let _ = (1..=2).step_by(0);\n+\n+    let x = 0..1;\n+    let _ = x.step_by(0);\n+\n+    // check const eval\n+    let v1 = vec![1, 2, 3];\n+    let _ = v1.iter().step_by(2 / 3);\n+}\n+\n+struct NotIterator;\n+impl NotIterator {\n+    fn step_by(&self, _: u32) {}\n+}"}, {"sha": "c2c6803b3e6e7cf0f768bfd263f51a9794ce431d", "filename": "tests/ui/iterator_step_by_zero.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Fiterator_step_by_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Fiterator_step_by_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterator_step_by_zero.stderr?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -0,0 +1,46 @@\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:3:13\n+   |\n+LL |     let _ = vec![\"A\", \"B\", \"B\"].iter().step_by(0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iterator-step-by-zero` implied by `-D warnings`\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:4:13\n+   |\n+LL |     let _ = \"XXX\".chars().step_by(0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:5:13\n+   |\n+LL |     let _ = (0..1).step_by(0);\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:14:13\n+   |\n+LL |     let _ = (1..).step_by(0);\n+   |             ^^^^^^^^^^^^^^^^\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:15:13\n+   |\n+LL |     let _ = (1..=2).step_by(0);\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:18:13\n+   |\n+LL |     let _ = x.step_by(0);\n+   |             ^^^^^^^^^^^^\n+\n+error: Iterator::step_by(0) will panic at runtime\n+  --> $DIR/iterator_step_by_zero.rs:22:13\n+   |\n+LL |     let _ = v1.iter().step_by(2 / 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "628282509c1a51c22dc13735b1bb5adb523627ed", "filename": "tests/ui/range.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -1,31 +1,9 @@\n-struct NotARange;\n-impl NotARange {\n-    fn step_by(&self, _: u32) {}\n-}\n-\n-#[warn(clippy::iterator_step_by_zero, clippy::range_zip_with_len)]\n+#[warn(clippy::range_zip_with_len)]\n fn main() {\n-    let _ = (0..1).step_by(0);\n-    // No warning for non-zero step\n-    let _ = (0..1).step_by(1);\n-\n-    let _ = (1..).step_by(0);\n-    let _ = (1..=2).step_by(0);\n-\n-    let x = 0..1;\n-    let _ = x.step_by(0);\n-\n-    // No error, not a range.\n-    let y = NotARange;\n-    y.step_by(0);\n-\n     let v1 = vec![1, 2, 3];\n     let v2 = vec![4, 5];\n     let _x = v1.iter().zip(0..v1.len());\n     let _y = v1.iter().zip(0..v2.len()); // No error\n-\n-    // check const eval\n-    let _ = v1.iter().step_by(2 / 3);\n }\n \n #[allow(unused)]"}, {"sha": "c8d4e557d87fad016d56bd408466060e72f90706", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e097fca4df2ff70e0213d747a408d109db16c5d2/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=e097fca4df2ff70e0213d747a408d109db16c5d2", "patch": "@@ -1,42 +1,10 @@\n-error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:8:13\n-   |\n-LL |     let _ = (0..1).step_by(0);\n-   |             ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iterator-step-by-zero` implied by `-D warnings`\n-\n-error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:12:13\n-   |\n-LL |     let _ = (1..).step_by(0);\n-   |             ^^^^^^^^^^^^^^^^\n-\n-error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:13:13\n-   |\n-LL |     let _ = (1..=2).step_by(0);\n-   |             ^^^^^^^^^^^^^^^^^^\n-\n-error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:16:13\n-   |\n-LL |     let _ = x.step_by(0);\n-   |             ^^^^^^^^^^^^\n-\n error: It is more idiomatic to use v1.iter().enumerate()\n-  --> $DIR/range.rs:24:14\n+  --> $DIR/range.rs:5:14\n    |\n LL |     let _x = v1.iter().zip(0..v1.len());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::range-zip-with-len` implied by `-D warnings`\n \n-error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:28:13\n-   |\n-LL |     let _ = v1.iter().step_by(2 / 3);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n "}]}