{"sha": "5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTNjOGQ2Y2E3YWVhYWIyN2NmY2M4NWU0MmZjN2I2ZjlhMzdiZDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-24T03:25:42Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-29T05:23:36Z"}, "message": "debuginfo: extract gdb.rs", "tree": {"sha": "cb089f71d2713de0fc49f012e9e18b873fbbe814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb089f71d2713de0fc49f012e9e18b873fbbe814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "html_url": "https://github.com/rust-lang/rust/commit/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5993ae86b85173d18fbc0cd620f61c011a8a7b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/5993ae86b85173d18fbc0cd620f61c011a8a7b03", "html_url": "https://github.com/rust-lang/rust/commit/5993ae86b85173d18fbc0cd620f61c011a8a7b03"}], "stats": {"total": 181, "additions": 101, "deletions": 80}, "files": [{"sha": "4879975dde695c265bd7505b3e1127a0bccebf5c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "patch": "@@ -2182,7 +2182,7 @@ pub fn create_entry_wrapper(ccx: &CrateContext,\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n-            debuginfo::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n+            debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n \n             let (start_fn, args) = if use_start_lang_item {\n                 let start_def_id = match ccx.tcx().lang_items.require(StartFnLangItem) {"}, {"sha": "952ae335203bfa6cd150db16a463ef2ed0f5bef8", "filename": "src/librustc_trans/trans/debuginfo/gdb.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs?ref=5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://!rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://!www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://!opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// .debug_gdb_scripts binary section\n+\n+use llvm;\n+use llvm::ValueRef;\n+\n+use trans::common::{C_bytes, CrateContext};\n+use trans::declare;\n+use trans::type_::Type;\n+use middle::ty::ClosureTyper;\n+use session::config::NoDebugInfo;\n+\n+use std::ffi::CString;\n+use std::ptr;\n+use syntax::attr;\n+\n+\n+/// Inserts a side-effect free instruction sequence that makes sure that the\n+/// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n+pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) {\n+    if needs_gdb_debug_scripts_section(ccx) {\n+        let empty = CString::new(\"\").unwrap();\n+        let gdb_debug_scripts_section_global =\n+            get_or_insert_gdb_debug_scripts_section_global(ccx);\n+        unsafe {\n+            let volative_load_instruction =\n+                llvm::LLVMBuildLoad(ccx.raw_builder(),\n+                                    gdb_debug_scripts_section_global,\n+                                    empty.as_ptr());\n+            llvm::LLVMSetVolatile(volative_load_instruction, llvm::True);\n+        }\n+    }\n+}\n+\n+/// Allocates the global variable responsible for the .debug_gdb_scripts binary\n+/// section.\n+pub fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)\n+                                                  -> llvm::ValueRef {\n+    let section_var_name = \"__rustc_debug_gdb_scripts_section__\";\n+\n+    let section_var = unsafe {\n+        llvm::LLVMGetNamedGlobal(ccx.llmod(),\n+                                 section_var_name.as_ptr() as *const _)\n+    };\n+\n+    if section_var == ptr::null_mut() {\n+        let section_name = b\".debug_gdb_scripts\\0\";\n+        let section_contents = b\"\\x01gdb_load_rust_pretty_printers.py\\0\";\n+\n+        unsafe {\n+            let llvm_type = Type::array(&Type::i8(ccx),\n+                                        section_contents.len() as u64);\n+\n+            let section_var = declare::define_global(ccx, section_var_name,\n+                                                     llvm_type).unwrap_or_else(||{\n+                ccx.sess().bug(&format!(\"symbol `{}` is already defined\", section_var_name))\n+            });\n+            llvm::LLVMSetSection(section_var, section_name.as_ptr() as *const _);\n+            llvm::LLVMSetInitializer(section_var, C_bytes(ccx, section_contents));\n+            llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n+            llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n+            llvm::SetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n+            // This should make sure that the whole section is not larger than\n+            // the string it contains. Otherwise we get a warning from GDB.\n+            llvm::LLVMSetAlignment(section_var, 1);\n+            section_var\n+        }\n+    } else {\n+        section_var\n+    }\n+}\n+\n+pub fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool {\n+    let omit_gdb_pretty_printer_section =\n+        attr::contains_name(&ccx.tcx()\n+                                .map\n+                                .krate()\n+                                .attrs,\n+                            \"omit_gdb_pretty_printer_section\");\n+\n+    !omit_gdb_pretty_printer_section &&\n+    !ccx.sess().target.target.options.is_like_osx &&\n+    !ccx.sess().target.target.options.is_like_windows &&\n+    ccx.sess().opts.debuginfo != NoDebugInfo\n+}"}, {"sha": "e3b7ffb3f397a91752dfd1272ebf06bf819e7d1a", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 79, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=5753c8d6ca7aeaab27cfcc85e42fc7b6f9a37bd8", "patch": "@@ -11,6 +11,8 @@\n // See doc.rs for documentation.\n mod doc;\n \n+pub mod gdb;\n+\n use self::VariableAccess::*;\n use self::VariableKind::*;\n use self::MemberOffset::*;\n@@ -25,9 +27,8 @@ use llvm::debuginfo::*;\n use metadata::csearch;\n use middle::subst::{self, Substs};\n use trans::{self, adt, machine, type_of};\n-use trans::common::{self, NodeIdAndSpan, CrateContext, FunctionContext, Block, C_bytes,\n+use trans::common::{self, NodeIdAndSpan, CrateContext, FunctionContext, Block,\n                     NormalizingClosureTyper};\n-use trans::declare;\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n use trans::monomorphize;\n use trans::type_::Type;\n@@ -46,7 +47,7 @@ use std::ptr;\n use std::rc::{Rc, Weak};\n use syntax::util::interner::Interner;\n use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap, ast_util, ast_map, attr};\n+use syntax::{ast, codemap, ast_util, ast_map};\n use syntax::parse::token::{self, special_idents};\n \n const DW_LANG_RUST: c_uint = 0x9000;\n@@ -552,12 +553,12 @@ pub fn finalize(cx: &CrateContext) {\n     debug!(\"finalize\");\n     let _ = compile_unit_metadata(cx);\n \n-    if needs_gdb_debug_scripts_section(cx) {\n+    if gdb::needs_gdb_debug_scripts_section(cx) {\n         // Add a .debug_gdb_scripts section to this compile-unit. This will\n         // cause GDB to try and load the gdb_load_rust_pretty_printers.py file,\n         // which activates the Rust pretty printers for binary this section is\n         // contained in.\n-        get_or_insert_gdb_debug_scripts_section_global(cx);\n+        gdb::get_or_insert_gdb_debug_scripts_section_global(cx);\n     }\n \n     unsafe {\n@@ -3866,77 +3867,3 @@ fn namespace_for_item(cx: &CrateContext, def_id: ast::DefId) -> Rc<NamespaceTree\n         }\n     })\n }\n-\n-\n-//=-----------------------------------------------------------------------------\n-// .debug_gdb_scripts binary section\n-//=-----------------------------------------------------------------------------\n-\n-/// Inserts a side-effect free instruction sequence that makes sure that the\n-/// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n-pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) {\n-    if needs_gdb_debug_scripts_section(ccx) {\n-        let empty = CString::new(\"\").unwrap();\n-        let gdb_debug_scripts_section_global =\n-            get_or_insert_gdb_debug_scripts_section_global(ccx);\n-        unsafe {\n-            let volative_load_instruction =\n-                llvm::LLVMBuildLoad(ccx.raw_builder(),\n-                                    gdb_debug_scripts_section_global,\n-                                    empty.as_ptr());\n-            llvm::LLVMSetVolatile(volative_load_instruction, llvm::True);\n-        }\n-    }\n-}\n-\n-/// Allocates the global variable responsible for the .debug_gdb_scripts binary\n-/// section.\n-fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)\n-                                                  -> llvm::ValueRef {\n-    let section_var_name = \"__rustc_debug_gdb_scripts_section__\";\n-\n-    let section_var = unsafe {\n-        llvm::LLVMGetNamedGlobal(ccx.llmod(),\n-                                 section_var_name.as_ptr() as *const _)\n-    };\n-\n-    if section_var == ptr::null_mut() {\n-        let section_name = b\".debug_gdb_scripts\\0\";\n-        let section_contents = b\"\\x01gdb_load_rust_pretty_printers.py\\0\";\n-\n-        unsafe {\n-            let llvm_type = Type::array(&Type::i8(ccx),\n-                                        section_contents.len() as u64);\n-\n-            let section_var = declare::define_global(ccx, section_var_name,\n-                                                     llvm_type).unwrap_or_else(||{\n-                ccx.sess().bug(&format!(\"symbol `{}` is already defined\", section_var_name))\n-            });\n-            llvm::LLVMSetSection(section_var, section_name.as_ptr() as *const _);\n-            llvm::LLVMSetInitializer(section_var, C_bytes(ccx, section_contents));\n-            llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n-            llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n-            llvm::SetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n-            // This should make sure that the whole section is not larger than\n-            // the string it contains. Otherwise we get a warning from GDB.\n-            llvm::LLVMSetAlignment(section_var, 1);\n-            section_var\n-        }\n-    } else {\n-        section_var\n-    }\n-}\n-\n-fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool {\n-    let omit_gdb_pretty_printer_section =\n-        attr::contains_name(&ccx.tcx()\n-                                .map\n-                                .krate()\n-                                .attrs,\n-                            \"omit_gdb_pretty_printer_section\");\n-\n-    !omit_gdb_pretty_printer_section &&\n-    !ccx.sess().target.target.options.is_like_osx &&\n-    !ccx.sess().target.target.options.is_like_windows &&\n-    ccx.sess().opts.debuginfo != NoDebugInfo\n-}"}]}