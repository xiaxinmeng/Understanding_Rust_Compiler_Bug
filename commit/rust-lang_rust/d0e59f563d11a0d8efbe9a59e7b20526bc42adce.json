{"sha": "d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZTU5ZjU2M2QxMWEwZDhlZmJlOWE1OWU3YjIwNTI2YmM0MmFkY2U=", "commit": {"author": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2018-09-19T16:03:16Z"}, "committer": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2018-09-20T06:35:32Z"}, "message": "add tests for copy_within", "tree": {"sha": "b0cdaa3c96299ef071c7baf2a3ff51a49a3a340e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0cdaa3c96299ef071c7baf2a3ff51a49a3a340e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "html_url": "https://github.com/rust-lang/rust/commit/d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e59f563d11a0d8efbe9a59e7b20526bc42adce/comments", "author": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ffd3344e3ac5e2468c7255c2bbecac13daab82", "html_url": "https://github.com/rust-lang/rust/commit/b3ffd3344e3ac5e2468c7255c2bbecac13daab82"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "8fc32f40b9920275a3f364edd5b0e44d556fe257", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e59f563d11a0d8efbe9a59e7b20526bc42adce/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e59f563d11a0d8efbe9a59e7b20526bc42adce/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "patch": "@@ -39,6 +39,7 @@\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(option_replace)]\n+#![feature(copy_within)]\n \n extern crate core;\n extern crate test;"}, {"sha": "d46a35ab82cfcae93dbaed7f6f3ceba5853adba7", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d0e59f563d11a0d8efbe9a59e7b20526bc42adce/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e59f563d11a0d8efbe9a59e7b20526bc42adce/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "patch": "@@ -1000,3 +1000,49 @@ fn test_align_to_empty_mid() {\n         assert_eq!(mid.as_ptr() as usize % mem::align_of::<Chunk>(), 0);\n     }\n }\n+\n+#[test]\n+fn test_copy_within() {\n+    // Start to end, with a RangeTo.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(..3, 10);\n+    assert_eq!(&bytes, b\"Hello, WorHel\");\n+\n+    // End to start, with a RangeFrom.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(10.., 0);\n+    assert_eq!(&bytes, b\"ld!lo, World!\");\n+\n+    // Overlapping, with a RangeInclusive.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(0..=11, 1);\n+    assert_eq!(&bytes, b\"HHello, World\");\n+\n+    // Whole slice, with a RangeFull.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(.., 0);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n+}\n+\n+#[test]\n+#[should_panic(expected = \"src is out of bounds\")]\n+fn test_copy_within_panics_src_too_long() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // The length is only 13, so 14 is out of bounds.\n+    bytes.copy_within(10..14, 0);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"dest is out of bounds\")]\n+fn test_copy_within_panics_dest_too_long() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n+    bytes.copy_within(0..4, 10);\n+}\n+#[test]\n+#[should_panic(expected = \"src end is before src start\")]\n+fn test_copy_within_panics_src_inverted() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // 2 is greater than 1, so this range is invalid.\n+    bytes.copy_within(2..1, 0);\n+}"}]}