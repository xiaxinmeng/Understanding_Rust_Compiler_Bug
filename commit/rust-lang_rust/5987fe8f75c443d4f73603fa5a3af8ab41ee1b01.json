{"sha": "5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ODdmZThmNzVjNDQzZDRmNzM2MDNmYTVhM2FmOGFiNDFlZTFiMDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-26T21:57:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-14T11:57:14Z"}, "message": "Remove most of `Hash` impls from AST and HIR structures", "tree": {"sha": "c22459a556bfe3f4cccbf417bd5c062c2ce1833c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22459a556bfe3f4cccbf417bd5c062c2ce1833c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "html_url": "https://github.com/rust-lang/rust/commit/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1a30c92b50c5965ed26449758fca81bee15747", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1a30c92b50c5965ed26449758fca81bee15747", "html_url": "https://github.com/rust-lang/rust/commit/4d1a30c92b50c5965ed26449758fca81bee15747"}], "stats": {"total": 418, "additions": 208, "deletions": 210}, "files": [{"sha": "09fc824750d72538d6705497692a026e84431ab4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 86, "deletions": 85, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -172,7 +172,7 @@ pub const DUMMY_HIR_ID: HirId = HirId {\n \n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId(!0);\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Label {\n     pub ident: Ident,\n }\n@@ -183,7 +183,7 @@ impl fmt::Debug for Label {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n@@ -312,7 +312,7 @@ impl Lifetime {\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Path {\n     pub span: Span,\n     /// The definition that the path resolved to.\n@@ -341,7 +341,7 @@ impl fmt::Display for Path {\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n@@ -396,7 +396,7 @@ impl PathSegment {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Ty),\n@@ -411,7 +411,7 @@ impl GenericArg {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GenericArgs {\n     /// The generic arguments for this path segment.\n     pub args: HirVec<GenericArg>,\n@@ -467,7 +467,7 @@ pub enum TraitBoundModifier {\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericBound {\n     Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime),\n@@ -484,7 +484,7 @@ impl GenericBound {\n \n pub type GenericBounds = HirVec<GenericBound>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n@@ -499,7 +499,7 @@ pub enum GenericParamKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GenericParam {\n     pub id: NodeId,\n     pub name: ParamName,\n@@ -518,7 +518,7 @@ pub struct GenericParamCount {\n \n /// Represents lifetimes and type parameters attached to a declaration\n /// of a function, enum, trait, etc.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Generics {\n     pub params: HirVec<GenericParam>,\n     pub where_clause: WhereClause,\n@@ -574,7 +574,7 @@ pub enum SyntheticTyParamKind {\n }\n \n /// A `where` clause in a definition\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: HirVec<WherePredicate>,\n@@ -593,7 +593,7 @@ impl WhereClause {\n }\n \n /// A single predicate in a `where` clause\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum WherePredicate {\n     /// A type binding, eg `for<'c> Foo: Send+Clone+'c`\n     BoundPredicate(WhereBoundPredicate),\n@@ -614,7 +614,7 @@ impl WherePredicate {\n }\n \n /// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     /// Any generics from a `for` binding\n@@ -626,15 +626,15 @@ pub struct WhereBoundPredicate {\n }\n \n /// A lifetime predicate, e.g. `'a: 'b+'c`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: GenericBounds,\n }\n \n /// An equality predicate (unsupported), e.g. `T=int`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n     pub span: Span,\n@@ -748,7 +748,7 @@ impl Crate {\n /// A macro definition, in this crate or imported from another.\n ///\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MacroDef {\n     pub name: Name,\n     pub vis: Visibility,\n@@ -759,7 +759,7 @@ pub struct MacroDef {\n     pub legacy: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Block {\n     /// Statements in a block\n     pub stmts: HirVec<Stmt>,\n@@ -782,7 +782,7 @@ pub struct Block {\n     pub recovered: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Pat {\n     pub id: NodeId,\n     pub hir_id: HirId,\n@@ -844,7 +844,7 @@ impl Pat {\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n /// are treated the same as` x: x, y: ref y, z: ref mut z`,\n /// except is_shorthand is true\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FieldPat {\n     pub id: NodeId,\n     /// The identifier for the field\n@@ -857,7 +857,7 @@ pub struct FieldPat {\n /// Explicit binding annotations given in the HIR for a binding. Note\n /// that this is not the final binding *mode* that we infer after type\n /// inference.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BindingAnnotation {\n   /// No binding annotation given: this means that the final binding mode\n   /// will depend on whether we have skipped through a `&` reference\n@@ -878,13 +878,13 @@ pub enum BindingAnnotation {\n   RefMut,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum RangeEnd {\n     Included,\n     Excluded,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n     Wild,\n@@ -940,7 +940,7 @@ impl Mutability {\n     }\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BinOp_ {\n     /// The `+` operator (addition)\n     BiAdd,\n@@ -1069,7 +1069,7 @@ impl Into<ast::BinOpKind> for BinOp_ {\n \n pub type BinOp = Spanned<BinOp_>;\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnOp {\n     /// The `*` operator for dereferencing\n     UnDeref,\n@@ -1111,7 +1111,7 @@ impl fmt::Debug for Stmt_ {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum Stmt_ {\n     /// Could be an item or a local (let) binding:\n     StmtDecl(P<Decl>, NodeId),\n@@ -1142,7 +1142,7 @@ impl Stmt_ {\n }\n \n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Local {\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n@@ -1157,7 +1157,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Decl_ {\n     /// A local (let) binding:\n     DeclLocal(P<Local>),\n@@ -1182,15 +1182,15 @@ impl Decl_ {\n }\n \n /// represents one arm of a 'match'\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Arm {\n     pub attrs: HirVec<Attribute>,\n     pub pats: HirVec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Field {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1199,15 +1199,15 @@ pub struct Field {\n     pub is_shorthand: bool,\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n     PushUnsafeBlock(UnsafeSource),\n     PopUnsafeBlock(UnsafeSource),\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n@@ -1239,7 +1239,7 @@ pub struct BodyId {\n ///\n /// All bodies have an **owner**, which can be accessed via the HIR\n /// map using `body_owner_def_id()`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Body {\n     pub arguments: HirVec<Arg>,\n     pub value: Expr,\n@@ -1271,15 +1271,15 @@ pub enum BodyOwnerKind {\n /// These are usually found nested inside types (e.g. array lengths)\n /// or expressions (e.g. repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct AnonConst {\n     pub id: NodeId,\n     pub hir_id: HirId,\n     pub body: BodyId,\n }\n \n /// An expression\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Expr {\n     pub id: NodeId,\n     pub span: Span,\n@@ -1330,7 +1330,7 @@ impl fmt::Debug for Expr {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Expr_ {\n     /// A `box x` expression.\n     ExprBox(P<Expr>),\n@@ -1432,7 +1432,7 @@ pub enum Expr_ {\n }\n \n /// Optionally `Self`-qualified value/type path or associated extension.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum QPath {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`\n     /// type, if the path points to an associated item in a trait.\n@@ -1452,7 +1452,7 @@ pub enum QPath {\n }\n \n /// Hints at the original code for a let statement\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum LocalSource {\n     /// A `match _ { .. }`\n     Normal,\n@@ -1479,7 +1479,7 @@ pub enum MatchSource {\n }\n \n /// The loop type that yielded an ExprLoop\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum LoopSource {\n     /// A `loop { .. }` loop\n     Loop,\n@@ -1489,7 +1489,7 @@ pub enum LoopSource {\n     ForLoop,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum LoopIdError {\n     OutsideLoopScope,\n     UnlabeledCfInWhileCondition,\n@@ -1507,6 +1507,7 @@ impl fmt::Display for LoopIdError {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct Destination {\n     // This is `Some(_)` iff there is an explicit user-specified `label\n     pub label: Option<Label>,\n@@ -1522,22 +1523,22 @@ pub enum GeneratorMovability {\n     Movable,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MutTy {\n     pub ty: P<Ty>,\n     pub mutbl: Mutability,\n }\n \n /// Represents a method's signature in a trait declaration or implementation.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MethodSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n@@ -1546,7 +1547,7 @@ pub struct MethodSig {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the node-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItemId {\n     pub node_id: NodeId,\n }\n@@ -1555,7 +1556,7 @@ pub struct TraitItemId {\n /// possibly including a default implementation. A trait item is\n /// either required (meaning it doesn't have an implementation, just a\n /// signature) or provided (meaning it has a default implementation).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItem {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1567,7 +1568,7 @@ pub struct TraitItem {\n }\n \n /// A trait method's body (or just argument names).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitMethod {\n     /// No default body in the trait, just a signature.\n     Required(HirVec<Ident>),\n@@ -1577,7 +1578,7 @@ pub enum TraitMethod {\n }\n \n /// Represents a trait method or associated constant or type\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     /// An associated constant with an optional value (otherwise `impl`s\n     /// must contain a value)\n@@ -1592,13 +1593,13 @@ pub enum TraitItemKind {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the node-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItemId {\n     pub node_id: NodeId,\n }\n \n /// Represents anything within an `impl` block\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItem {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1612,7 +1613,7 @@ pub struct ImplItem {\n }\n \n /// Represents different contents within `impl`s\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind {\n     /// An associated constant of the given type, set to the constant result\n     /// of the expression\n@@ -1624,7 +1625,7 @@ pub enum ImplItemKind {\n }\n \n // Bind a type to an associated type: `A=Foo`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1633,7 +1634,7 @@ pub struct TypeBinding {\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n@@ -1659,7 +1660,7 @@ pub enum PrimTy {\n     TyChar,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n@@ -1668,14 +1669,14 @@ pub struct BareFnTy {\n     pub arg_names: HirVec<Ident>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ExistTy {\n     pub generics: Generics,\n     pub bounds: GenericBounds,\n     pub impl_trait_fn: Option<DefId>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n     /// A variable length slice (`[T]`)\n@@ -1709,14 +1710,14 @@ pub enum Ty_ {\n     TyErr,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct InlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct InlineAsm {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n@@ -1730,15 +1731,15 @@ pub struct InlineAsm {\n }\n \n /// represents an argument in a function header\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Arg {\n     pub pat: P<Pat>,\n     pub id: NodeId,\n     pub hir_id: HirId,\n }\n \n /// Represents the header (not the body) of a function declaration\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnDecl {\n     pub inputs: HirVec<Ty>,\n     pub output: FunctionRetTy,\n@@ -1749,13 +1750,13 @@ pub struct FnDecl {\n }\n \n /// Is the trait definition an auto trait?\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAuto {\n     Yes,\n     No\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAsync {\n     Async,\n     NotAsync,\n@@ -1767,13 +1768,13 @@ pub enum Unsafety {\n     Normal,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum Constness {\n     Const,\n     NotConst,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum Defaultness {\n     Default { has_value: bool },\n     Final,\n@@ -1809,7 +1810,7 @@ impl fmt::Display for Unsafety {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -1827,7 +1828,7 @@ impl fmt::Debug for ImplPolarity {\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum FunctionRetTy {\n     /// Return type is not specified.\n     ///\n@@ -1848,7 +1849,7 @@ impl FunctionRetTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1857,24 +1858,24 @@ pub struct Mod {\n     pub item_ids: HirVec<ItemId>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n     pub abi: Abi,\n     pub items: HirVec<ForeignItem>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n     pub ctxt: SyntaxContext,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct EnumDef {\n     pub variants: HirVec<Variant>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Variant_ {\n     pub name: Name,\n     pub attrs: HirVec<Attribute>,\n@@ -1885,7 +1886,7 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum UseKind {\n     /// One import, e.g. `use foo::bar` or `use foo::bar as baz`.\n     /// Also produced for each element of a list `use`, e.g.\n@@ -1907,13 +1908,13 @@ pub enum UseKind {\n /// that the ref_id is for. Note that ref_id's value is not the NodeId of the\n /// trait being referred to but just a unique NodeId that serves as a key\n /// within the DefMap.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n     pub bound_generic_params: HirVec<GenericParam>,\n@@ -1926,7 +1927,7 @@ pub struct PolyTraitRef {\n \n pub type Visibility = Spanned<VisibilityKind>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n     Crate(CrateSugar),\n@@ -1952,7 +1953,7 @@ impl VisibilityKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct StructField {\n     pub span: Span,\n     pub ident: Ident,\n@@ -1981,7 +1982,7 @@ impl StructField {\n /// used for `Struct`-structs (but still presents). Structures don't have an analogue of \"Id of\n /// the variant itself\" from enum variants.\n /// Id of the whole struct lives in `Item`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantData {\n     Struct(HirVec<StructField>, NodeId),\n     Tuple(HirVec<StructField>, NodeId),\n@@ -2026,15 +2027,15 @@ impl VariantData {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the node-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ItemId {\n     pub id: NodeId,\n }\n \n /// An item\n ///\n /// The name might be a dummy name in case of anonymous items\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n     pub name: Name,\n     pub id: NodeId,\n@@ -2045,15 +2046,15 @@ pub struct Item {\n     pub span: Span,\n }\n \n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub constness: Constness,\n     pub asyncness: IsAsync,\n     pub abi: Abi,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Item_ {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n@@ -2155,7 +2156,7 @@ impl Item_ {\n /// type or method, and whether it is public). This allows other\n /// passes to find the impl they want without loading the id (which\n /// means fewer edges in the incremental compilation graph).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItemRef {\n     pub id: TraitItemId,\n     pub ident: Ident,\n@@ -2170,7 +2171,7 @@ pub struct TraitItemRef {\n /// type or method, and whether it is public). This allows other\n /// passes to find the impl they want without loading the id (which\n /// means fewer edges in the incremental compilation graph).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItemRef {\n     pub id: ImplItemId,\n     pub ident: Ident,\n@@ -2180,14 +2181,14 @@ pub struct ImplItemRef {\n     pub defaultness: Defaultness,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum AssociatedItemKind {\n     Const,\n     Method { has_self: bool },\n     Type,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignItem {\n     pub name: Name,\n     pub attrs: HirVec<Attribute>,\n@@ -2198,7 +2199,7 @@ pub struct ForeignItem {\n }\n \n /// An item within an `extern` block\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ForeignItem_ {\n     /// A foreign function\n     ForeignItemFn(P<FnDecl>, HirVec<Ident>, Generics),\n@@ -2260,7 +2261,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.describe_def = map::describe_def;\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct CodegenFnAttrs {\n     pub flags: CodegenFnAttrFlags,\n     pub inline: InlineAttr,"}, {"sha": "12c8d07eb00f0cdbe59688fa4ce384fa402c3b97", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -125,7 +125,7 @@ pub enum NativeLibraryKind {\n     NativeUnknown,\n }\n \n-#[derive(Clone, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,\n     pub name: Symbol,"}, {"sha": "de9c8370cdba6d69d4d62ce9c875fa707f44004e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -49,6 +49,7 @@ use rustc::lint as lint;\n \n use std::collections::hash_map::Entry;\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n use std::default::Default;\n use std::{mem, slice, vec};\n use std::iter::{FromIterator, once};\n@@ -754,7 +755,7 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct Attributes {\n     pub doc_strings: Vec<DocFragment>,\n     pub other_attrs: Vec<ast::Attribute>,\n@@ -980,12 +981,24 @@ impl PartialEq for Attributes {\n         self.cfg == rhs.cfg &&\n         self.span == rhs.span &&\n         self.links == rhs.links &&\n-        self.other_attrs.id == rhs.other_attrs.id\n+        self.other_attrs.iter().map(|attr| attr.id).eq(rhs.other_attrs.iter().map(|attr| attr.id))\n     }\n }\n \n impl Eq for Attributes {}\n \n+impl Hash for Attributes {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.doc_strings.hash(hasher);\n+        self.cfg.hash(hasher);\n+        self.span.hash(hasher);\n+        self.links.hash(hasher);\n+        for attr in &self.other_attrs {\n+            attr.id.hash(hasher);\n+        }\n+    }\n+}\n+\n impl AttributesExt for Attributes {\n     fn lists<'a>(&'a self, name: &'a str) -> ListAttributesIter<'a> {\n         self.other_attrs.lists(name)"}, {"sha": "a7ce4404fb864d6501cf5bae753cf1b6dcc1e5f9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 99, "deletions": 99, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -34,7 +34,7 @@ use std::u32;\n \n pub use rustc_target::abi::FloatTy;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Label {\n     pub ident: Ident,\n }\n@@ -45,7 +45,7 @@ impl fmt::Debug for Label {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -63,7 +63,7 @@ impl fmt::Debug for Lifetime {\n /// along with a bunch of supporting information.\n ///\n /// E.g. `std::cmp::PartialEq`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Path {\n     pub span: Span,\n     /// The segments in the path: the things separated by `::`.\n@@ -115,7 +115,7 @@ impl Path {\n /// A segment of a path: an identifier, an optional lifetime, and a set of types.\n ///\n /// E.g. `std`, `String` or `Box<T>`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n@@ -141,7 +141,7 @@ impl PathSegment {\n /// Arguments of a path segment.\n ///\n /// E.g. `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericArgs {\n     /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n     AngleBracketed(AngleBracketedArgs),\n@@ -158,14 +158,14 @@ impl GenericArgs {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n \n /// A path like `Foo<'a, T>`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Default)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct AngleBracketedArgs {\n     /// Overall span\n     pub span: Span,\n@@ -190,7 +190,7 @@ impl Into<Option<P<GenericArgs>>> for ParenthesisedArgs {\n }\n \n /// A path like `Foo(A,B) -> C`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ParenthesisedArgs {\n     /// Overall span\n     pub span: Span,\n@@ -270,7 +270,7 @@ pub const DUMMY_NODE_ID: NodeId = NodeId(!0);\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n@@ -280,7 +280,7 @@ pub enum TraitBoundModifier {\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericBound {\n     Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime)\n@@ -297,7 +297,7 @@ impl GenericBound {\n \n pub type GenericBounds = Vec<GenericBound>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, e.g. `'a: 'b+'c+'d`.\n     Lifetime,\n@@ -306,7 +306,7 @@ pub enum GenericParamKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GenericParam {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -318,7 +318,7 @@ pub struct GenericParam {\n \n /// Represents lifetime, type and const parameters attached to a declaration of\n /// a function, enum, trait, etc.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Generics {\n     pub params: Vec<GenericParam>,\n     pub where_clause: WhereClause,\n@@ -341,15 +341,15 @@ impl Default for Generics {\n }\n \n /// A `where` clause in a definition\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n     pub span: Span,\n }\n \n /// A single predicate in a `where` clause\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum WherePredicate {\n     /// A type binding, e.g. `for<'c> Foo: Send+Clone+'c`\n     BoundPredicate(WhereBoundPredicate),\n@@ -372,7 +372,7 @@ impl WherePredicate {\n /// A type bound.\n ///\n /// E.g. `for<'c> Foo: Send+Clone+'c`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     /// Any generics from a `for` binding\n@@ -386,7 +386,7 @@ pub struct WhereBoundPredicate {\n /// A lifetime predicate.\n ///\n /// E.g. `'a: 'b+'c`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n@@ -396,7 +396,7 @@ pub struct WhereRegionPredicate {\n /// An equality predicate (unsupported).\n ///\n /// E.g. `T=int`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n     pub span: Span,\n@@ -408,7 +408,7 @@ pub struct WhereEqPredicate {\n /// used to drive conditional compilation\n pub type CrateConfig = HashSet<(Name, Option<Symbol>)>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,\n     pub attrs: Vec<Attribute>,\n@@ -421,7 +421,7 @@ pub type NestedMetaItem = Spanned<NestedMetaItemKind>;\n /// Possible values inside of compile-time attribute lists.\n ///\n /// E.g. the '..' in `#[name(..)]`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum NestedMetaItemKind {\n     /// A full MetaItem, for recursive meta items.\n     MetaItem(MetaItem),\n@@ -434,7 +434,7 @@ pub enum NestedMetaItemKind {\n /// A spanned compile-time attribute item.\n ///\n /// E.g. `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = \"foo\"]`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MetaItem {\n     pub ident: Path,\n     pub node: MetaItemKind,\n@@ -444,7 +444,7 @@ pub struct MetaItem {\n /// A compile-time attribute item.\n ///\n /// E.g. `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum MetaItemKind {\n     /// Word meta item.\n     ///\n@@ -463,7 +463,7 @@ pub enum MetaItemKind {\n /// A Block (`{ .. }`).\n ///\n /// E.g. `{ .. }` as in `fn foo() { .. }`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Block {\n     /// Statements in a block\n     pub stmts: Vec<Stmt>,\n@@ -474,7 +474,7 @@ pub struct Block {\n     pub recovered: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Pat {\n     pub id: NodeId,\n     pub node: PatKind,\n@@ -552,7 +552,7 @@ impl Pat {\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n /// are treated the same as` x: x, y: ref y, z: ref mut z`,\n /// except is_shorthand is true\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FieldPat {\n     /// The identifier for the field\n     pub ident: Ident,\n@@ -562,25 +562,25 @@ pub struct FieldPat {\n     pub attrs: ThinVec<Attribute>,\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BindingMode {\n     ByRef(Mutability),\n     ByValue(Mutability),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum RangeEnd {\n     Included(RangeSyntax),\n     Excluded,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum RangeSyntax {\n     DotDotDot,\n     DotDotEq,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n     Wild,\n@@ -627,13 +627,13 @@ pub enum PatKind {\n     Mac(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BinOpKind {\n     /// The `+` operator (addition)\n     Add,\n@@ -730,7 +730,7 @@ impl BinOpKind {\n \n pub type BinOp = Spanned<BinOpKind>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnOp {\n     /// The `*` operator for dereferencing\n     Deref,\n@@ -759,7 +759,7 @@ impl UnOp {\n }\n \n /// A statement\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stmt {\n     pub id: NodeId,\n     pub node: StmtKind,\n@@ -800,7 +800,7 @@ impl fmt::Debug for Stmt {\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum StmtKind {\n     /// A local (let) binding.\n     Local(P<Local>),\n@@ -816,7 +816,7 @@ pub enum StmtKind {\n     Mac(P<(Mac, MacStmtStyle, ThinVec<Attribute>)>),\n }\n \n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n     /// `foo!(...);`, `foo![...];`\n@@ -830,7 +830,7 @@ pub enum MacStmtStyle {\n }\n \n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Local {\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n@@ -851,15 +851,15 @@ pub struct Local {\n ///     _ => { println!(\"no match!\") },\n /// }\n /// ```\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Field {\n     pub ident: Ident,\n     pub expr: P<Expr>,\n@@ -870,13 +870,13 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     Default,\n     Unsafe(UnsafeSource),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n@@ -887,15 +887,15 @@ pub enum UnsafeSource {\n /// These are usually found nested inside types (e.g. array lengths)\n /// or expressions (e.g. repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct AnonConst {\n     pub id: NodeId,\n     pub value: P<Expr>,\n }\n \n \n /// An expression\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash,)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Expr {\n     pub id: NodeId,\n     pub node: ExprKind,\n@@ -1018,15 +1018,15 @@ impl fmt::Debug for Expr {\n }\n \n /// Limit types of a range (inclusive or exclusive)\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum RangeLimits {\n     /// Inclusive at the beginning, exclusive at the end\n     HalfOpen,\n     /// Inclusive at the beginning and end\n     Closed,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ExprKind {\n     /// A `box x` expression.\n     Box(P<Expr>),\n@@ -1183,7 +1183,7 @@ pub enum ExprKind {\n ///  ^~~~~    ^\n ///  ty       position = 0\n /// ```\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct QSelf {\n     pub ty: P<Ty>,\n \n@@ -1195,14 +1195,14 @@ pub struct QSelf {\n }\n \n /// A capture clause\n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum CaptureBy {\n     Value,\n     Ref,\n }\n \n /// The movability of a generator / closure literal\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum Movability {\n     Static,\n     Movable,\n@@ -1216,14 +1216,14 @@ pub type Mac = Spanned<Mac_>;\n ///\n /// NB: the additional ident for a macro_rules-style macro is actually\n /// stored in the enclosing item. Oog.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mac_ {\n     pub path: Path,\n     pub delim: MacDelimiter,\n     pub tts: ThinTokenStream,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub enum MacDelimiter {\n     Parenthesis,\n     Bracket,\n@@ -1236,7 +1236,7 @@ impl Mac_ {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MacroDef {\n     pub tokens: ThinTokenStream,\n     pub legacy: bool,\n@@ -1248,7 +1248,7 @@ impl MacroDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`\n     Cooked,\n@@ -1261,7 +1261,7 @@ pub enum StrStyle {\n /// A literal\n pub type Lit = Spanned<LitKind>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum LitIntType {\n     Signed(IntTy),\n     Unsigned(UintTy),\n@@ -1271,7 +1271,7 @@ pub enum LitIntType {\n /// Literal kind.\n ///\n /// E.g. `\"foo\"`, `42`, `12.34` or `bool`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`)\n     Str(Symbol, StrStyle),\n@@ -1337,15 +1337,15 @@ impl LitKind {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MutTy {\n     pub ty: P<Ty>,\n     pub mutbl: Mutability,\n }\n \n /// Represents a method's signature in a trait declaration,\n /// or in an implementation.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MethodSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n@@ -1355,7 +1355,7 @@ pub struct MethodSig {\n /// possibly including a default implementation. A trait item is\n /// either required (meaning it doesn't have an implementation, just a\n /// signature) or provided (meaning it has a default implementation).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItem {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1367,15 +1367,15 @@ pub struct TraitItem {\n     pub tokens: Option<TokenStream>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n     Method(MethodSig, Option<P<Block>>),\n     Type(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItem {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1389,15 +1389,15 @@ pub struct ImplItem {\n     pub tokens: Option<TokenStream>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n     Method(MethodSig, P<Block>),\n     Type(P<Ty>),\n     Macro(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1450,7 +1450,7 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -1501,15 +1501,15 @@ impl fmt::Display for UintTy {\n }\n \n // Bind a type to an associated type: `A=Foo`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub ty: P<Ty>,\n     pub span: Span,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: TyKind,\n@@ -1522,7 +1522,7 @@ impl fmt::Debug for Ty {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n@@ -1531,7 +1531,7 @@ pub struct BareFnTy {\n }\n \n /// The different kinds of types recognized by the compiler\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TyKind {\n     /// A variable-length slice (`[T]`)\n     Slice(P<Ty>),\n@@ -1587,7 +1587,7 @@ impl TyKind {\n }\n \n /// Syntax used to declare a trait object.\n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitObjectSyntax {\n     Dyn,\n     None,\n@@ -1596,7 +1596,7 @@ pub enum TraitObjectSyntax {\n /// Inline assembly dialect.\n ///\n /// E.g. `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum AsmDialect {\n     Att,\n     Intel,\n@@ -1605,7 +1605,7 @@ pub enum AsmDialect {\n /// Inline assembly.\n ///\n /// E.g. `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct InlineAsmOutput {\n     pub constraint: Symbol,\n     pub expr: P<Expr>,\n@@ -1616,7 +1616,7 @@ pub struct InlineAsmOutput {\n /// Inline assembly.\n ///\n /// E.g. `asm!(\"NOP\");`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct InlineAsm {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n@@ -1632,7 +1632,7 @@ pub struct InlineAsm {\n /// An argument in a function header.\n ///\n /// E.g. `bar: usize` as in `fn foo(bar: usize)`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n@@ -1642,7 +1642,7 @@ pub struct Arg {\n /// Alternative representation for `Arg`s describing `self` parameter of methods.\n ///\n /// E.g. `&mut self` as in `fn foo(&mut self)`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum SelfKind {\n     /// `self`, `mut self`\n     Value(Mutability),\n@@ -1710,7 +1710,7 @@ impl Arg {\n /// Header (not the body) of a function declaration.\n ///\n /// E.g. `fn foo(bar: baz)`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n     pub output: FunctionRetTy,\n@@ -1727,19 +1727,19 @@ impl FnDecl {\n }\n \n /// Is the trait definition an auto trait?\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAuto {\n     Yes,\n     No\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAsync {\n     Async {\n         closure_id: NodeId,\n@@ -1765,13 +1765,13 @@ impl IsAsync {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum Constness {\n     Const,\n     NotConst,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum Defaultness {\n     Default,\n     Final,\n@@ -1786,7 +1786,7 @@ impl fmt::Display for Unsafety {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -1804,7 +1804,7 @@ impl fmt::Debug for ImplPolarity {\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum FunctionRetTy {\n     /// Return type is not specified.\n     ///\n@@ -1828,7 +1828,7 @@ impl FunctionRetTy {\n /// Module declaration.\n ///\n /// E.g. `mod foo;` or `mod foo { .. }`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1840,7 +1840,7 @@ pub struct Mod {\n /// Foreign module declaration.\n ///\n /// E.g. `extern { .. }` or `extern C { .. }`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n     pub abi: Abi,\n     pub items: Vec<ForeignItem>,\n@@ -1849,18 +1849,18 @@ pub struct ForeignMod {\n /// Global inline assembly\n ///\n /// aka module-level assembly or file-scoped assembly\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n     pub ctxt: SyntaxContext,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<Variant>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Variant_ {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1872,7 +1872,7 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n /// Part of `use` item to the right of its prefix.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum UseTreeKind {\n     /// `use prefix` or `use prefix as rename`\n     ///\n@@ -1887,7 +1887,7 @@ pub enum UseTreeKind {\n \n /// A tree of paths sharing common prefixes.\n /// Used in `use` items both at top-level and inside of braces in import groups.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct UseTree {\n     pub prefix: Path,\n     pub kind: UseTreeKind,\n@@ -1908,7 +1908,7 @@ impl UseTree {\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum AttrStyle {\n     Outer,\n     Inner,\n@@ -1919,7 +1919,7 @@ pub struct AttrId(pub usize);\n \n /// Meta-data associated with an item\n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Attribute {\n     pub id: AttrId,\n     pub style: AttrStyle,\n@@ -1935,13 +1935,13 @@ pub struct Attribute {\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemKind::Impl, the impl_id is redundant (it could be the\n /// same as the impl's node id).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n     pub bound_generic_params: Vec<GenericParam>,\n@@ -1962,7 +1962,7 @@ impl PolyTraitRef {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum CrateSugar {\n     /// Source is `pub(crate)`\n     PubCrate,\n@@ -1973,7 +1973,7 @@ pub enum CrateSugar {\n \n pub type Visibility = Spanned<VisibilityKind>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n     Crate(CrateSugar),\n@@ -1990,7 +1990,7 @@ impl VisibilityKind {\n /// Field of a struct.\n ///\n /// E.g. `bar: usize` as in `struct Foo { bar: usize }`\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct StructField {\n     pub span: Span,\n     pub ident: Option<Ident>,\n@@ -2011,7 +2011,7 @@ pub struct StructField {\n /// used for `Struct`-structs (but still presents). Structures don't have an analogue of \"Id of\n /// the variant itself\" from enum variants.\n /// Id of the whole struct lives in `Item`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantData {\n     /// Struct variant.\n     ///\n@@ -2053,7 +2053,7 @@ impl VariantData {\n /// An item\n ///\n /// The name might be a dummy name in case of anonymous items\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -2076,7 +2076,7 @@ pub struct Item {\n ///\n /// All the information between the visibility & the name of the function is\n /// included in this struct (e.g. `async unsafe fn` or `const extern \"C\" fn`)\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub asyncness: IsAsync,\n@@ -2095,7 +2095,7 @@ impl Default for FnHeader {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n@@ -2194,7 +2194,7 @@ impl ItemKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -2205,7 +2205,7 @@ pub struct ForeignItem {\n }\n \n /// An item within an `extern` block\n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ForeignItemKind {\n     /// A foreign function\n     Fn(P<FnDecl>, Generics),"}, {"sha": "d21ffabb62e3b44c922bc16891b357d8f4c4a4b1", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::sync::Lrc;\n \n /// Contains the sub-token-trees of a \"delimited\" token tree, such as the contents of `(`. Note\n /// that the delimiter itself might be `NoDelim`.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Delimited {\n     pub delim: token::DelimToken,\n     pub tts: Vec<TokenTree>,\n@@ -60,7 +60,7 @@ impl Delimited {\n     }\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub struct SequenceRepetition {\n     /// The sequence of token trees\n     pub tts: Vec<TokenTree>,\n@@ -85,7 +85,7 @@ pub enum KleeneOp {\n \n /// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`\n /// are \"first-class\" token trees. Useful for parsing macros.\n-#[derive(Debug, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Debug, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum TokenTree {\n     Token(Span, token::Token),\n     Delimited(Span, Lrc<Delimited>),"}, {"sha": "aef3beeccdf9c38a0b170a24deb08c6f7c0a9f9c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -139,7 +139,7 @@ fn ident_can_begin_type(ident: ast::Ident, is_raw: bool) -> bool {\n     ].contains(&ident.name)\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Token {\n     /* Expression-operator symbols. */\n     Eq,\n@@ -638,7 +638,7 @@ impl Token {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n     NtItem(P<ast::Item>),"}, {"sha": "048a041f698974428ea21c017d85343375a7604f", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987fe8f75c443d4f73603fa5a3af8ab41ee1b01/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=5987fe8f75c443d4f73603fa5a3af8ab41ee1b01", "patch": "@@ -33,10 +33,9 @@ use util::RcSlice;\n \n use std::borrow::Cow;\n use std::{fmt, iter, mem};\n-use std::hash::{self, Hash};\n \n /// A delimited sequence of token trees\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Delimited {\n     /// The type of delimiter\n     pub delim: token::DelimToken,\n@@ -93,7 +92,7 @@ impl Delimited {\n ///\n /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n-#[derive(Debug, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Debug, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum TokenTree {\n     /// A single token\n     Token(Span, token::Token),\n@@ -605,14 +604,6 @@ impl Decodable for TokenStream {\n     }\n }\n \n-impl Hash for TokenStream {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        for tree in self.trees() {\n-            tree.hash(state);\n-        }\n-    }\n-}\n-\n impl Encodable for ThinTokenStream {\n     fn encode<E: Encoder>(&self, encoder: &mut E) -> Result<(), E::Error> {\n         TokenStream::from(self.clone()).encode(encoder)\n@@ -625,13 +616,6 @@ impl Decodable for ThinTokenStream {\n     }\n }\n \n-impl Hash for ThinTokenStream {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        TokenStream::from(self.clone()).hash(state);\n-    }\n-}\n-\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}