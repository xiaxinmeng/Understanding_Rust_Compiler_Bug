{"sha": "1f0b3d2247ce6ff381f572450dbe733291ffe01a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGIzZDIyNDdjZTZmZjM4MWY1NzI0NTBkYmU3MzMyOTFmZmUwMWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-18T20:04:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-19T15:10:59Z"}, "message": "treat fn*() as fn&()\n\nThis is not my ideal way of going about things.  I'd prefer not\nto have expressions typed as fn*(), for example, but I couldn't\nget that to work together with inferring the modes of arguments\nand other corner cases.", "tree": {"sha": "81684fe3aedb300ae6b4db297a06e6cfb9555176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81684fe3aedb300ae6b4db297a06e6cfb9555176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0b3d2247ce6ff381f572450dbe733291ffe01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0b3d2247ce6ff381f572450dbe733291ffe01a", "html_url": "https://github.com/rust-lang/rust/commit/1f0b3d2247ce6ff381f572450dbe733291ffe01a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0b3d2247ce6ff381f572450dbe733291ffe01a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54cc1cad4b913fd0a96091674175227ce9f021a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54cc1cad4b913fd0a96091674175227ce9f021a", "html_url": "https://github.com/rust-lang/rust/commit/d54cc1cad4b913fd0a96091674175227ce9f021a"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "bb3de341df1ed95401774a440031a1415fb35cbe", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=1f0b3d2247ce6ff381f572450dbe733291ffe01a", "patch": "@@ -432,7 +432,8 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       ty::ty_fn({proto: ast::proto_uniq, _}) {\n         s += [shape_uniq_fn];\n       }\n-      ty::ty_fn({proto: ast::proto_block, _}) {\n+      ty::ty_fn({proto: ast::proto_block, _}) |\n+      ty::ty_fn({proto: ast::proto_any, _}) {\n         s += [shape_stack_fn];\n       }\n       ty::ty_fn({proto: ast::proto_bare, _}) {"}, {"sha": "4915a975322f15719a8e89422c637a299a3a00a6", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=1f0b3d2247ce6ff381f572450dbe733291ffe01a", "patch": "@@ -528,8 +528,7 @@ fn trans_expr_fn(bcx: @block_ctxt,\n     };\n \n     let closure = alt proto {\n-      ast::proto_any { fail \"proto_any cannot appear in an expr\"; }\n-      ast::proto_block { trans_closure_env(ty::ck_block) }\n+      ast::proto_any | ast::proto_block { trans_closure_env(ty::ck_block) }\n       ast::proto_box { trans_closure_env(ty::ck_box) }\n       ast::proto_uniq { trans_closure_env(ty::ck_uniq) }\n       ast::proto_bare {"}, {"sha": "ee947772ab251336a7fb6d88bb879ce86e5f8958", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=1f0b3d2247ce6ff381f572450dbe733291ffe01a", "patch": "@@ -146,8 +146,8 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n                  \"assert\", \"claim\", \"native\", \"fn\", \"pure\",\n-                 \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n-                 \"log\", \"copy\", \"sendfn\", \"impl\", \"iface\", \"enum\"] {\n+                 \"unsafe\", \"import\", \"export\", \"let\", \"const\",\n+                 \"log\", \"copy\", \"impl\", \"iface\", \"enum\"] {\n         words.insert(word, ());\n     }\n     words\n@@ -493,9 +493,6 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n           _ { /* fallthrough */ }\n         }\n         t = parse_ty_fn(proto, p);\n-    } else if eat_word(p, \"block\") {\n-        //p.warn(\"block is deprecated, use fn& or fn\");\n-        t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"native\") {\n         expect_word(p, \"fn\");\n         t = parse_ty_fn(ast::proto_bare, p);\n@@ -802,9 +799,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n           _ { /* fallthrough */ }\n         }\n         ret pexpr(parse_fn_expr(p, proto));\n-    } else if eat_word(p, \"block\") {\n-        p.warn(\"block is deprecated, use fn& or fn\");\n-        ret pexpr(parse_fn_expr(p, ast::proto_block));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));\n     } else if eat_word(p, \"unsafe\") {"}, {"sha": "3612875f2d3f767aed9b03744cab797732b82082", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0b3d2247ce6ff381f572450dbe733291ffe01a/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=1f0b3d2247ce6ff381f572450dbe733291ffe01a", "patch": "@@ -0,0 +1,8 @@\n+fn call_any(f: fn*() -> uint) -> uint {\n+    ret f();\n+}\n+\n+fn main() {\n+    let x_r = call_any {|| 22u };\n+    assert x_r == 22u;\n+}"}]}