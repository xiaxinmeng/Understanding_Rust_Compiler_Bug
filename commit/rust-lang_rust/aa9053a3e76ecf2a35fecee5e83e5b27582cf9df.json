{"sha": "aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOTA1M2EzZTc2ZWNmMmEzNWZlY2VlNWU4M2U1YjI3NTgyY2Y5ZGY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T11:14:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T11:14:24Z"}, "message": "Rollup merge of #71475 - RalfJung:miri-frame-loc, r=ecstatic-morse\n\nMiri Frame: use mir::Location to represent position in function\n\nI only recently learned that `Location` exists, and it seems to perfectly fit what Miri needs to represent which statement we are currently executing. :)\n\nr? @ecstatic-morse", "tree": {"sha": "edbde61a61dc672d4430725bf6521992ef3eeef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edbde61a61dc672d4430725bf6521992ef3eeef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeosoQCRBK7hj4Ov3rIwAAdHIIACWHGtcDs5bAxO/Xm47iku0H\n9/1+9DCVWXKzD1D9koztXpsUO5O9XtTFXtkg38Tu2QwrjfdSsEZpGeq+Tx4RDYth\nMk3RAVaHmFnKJLOpdLdMoX8WKa5Jjjj3C6BllC5T4bL+BSnYyp7ezGy4tTfdHtCq\n7jUvpqwgXzWQDwLg3fgeXcR7yTfxd4zxgFU1m/lBD3AujXay7kksSjpeHiyAH6AY\ntSznb/dZ9Nw2UaggOPToEn3eAPn0FQGYz9Tvgl0tpR84sfRIuL//TZr1Ri6ALvyp\n6aHIJrxcj9R7D7B6uJljE2NuxhuViqhfXJ2T+CdvpjHkk/6VA1Ym72Lv1fDseqM=\n=EhIC\n-----END PGP SIGNATURE-----\n", "payload": "tree edbde61a61dc672d4430725bf6521992ef3eeef7\nparent 715948eb51920d5e4a791e4757652daf9fa925ed\nparent 90f11310224e9e2d5a27e3e4b8c5b1aaa1c0b980\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587726864 +0200\ncommitter GitHub <noreply@github.com> 1587726864 +0200\n\nRollup merge of #71475 - RalfJung:miri-frame-loc, r=ecstatic-morse\n\nMiri Frame: use mir::Location to represent position in function\n\nI only recently learned that `Location` exists, and it seems to perfectly fit what Miri needs to represent which statement we are currently executing. :)\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "html_url": "https://github.com/rust-lang/rust/commit/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715948eb51920d5e4a791e4757652daf9fa925ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/715948eb51920d5e4a791e4757652daf9fa925ed", "html_url": "https://github.com/rust-lang/rust/commit/715948eb51920d5e4a791e4757652daf9fa925ed"}, {"sha": "90f11310224e9e2d5a27e3e4b8c5b1aaa1c0b980", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f11310224e9e2d5a27e3e4b8c5b1aaa1c0b980", "html_url": "https://github.com/rust-lang/rust/commit/90f11310224e9e2d5a27e3e4b8c5b1aaa1c0b980"}], "stats": {"total": 70, "additions": 29, "deletions": 41}, "files": [{"sha": "45abde434772834a99d7b58c256d4a97cee22ce0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "patch": "@@ -81,14 +81,9 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n     ////////////////////////////////////////////////////////////////////////////////\n-    /// The block that is currently executed (or will be executed after the above call stacks\n-    /// return).\n     /// If this is `None`, we are unwinding and this function doesn't need any clean-up.\n     /// Just continue the same as with `Resume`.\n-    pub block: Option<mir::BasicBlock>,\n-\n-    /// The index of the currently evaluated statement.\n-    pub stmt: usize,\n+    pub loc: Option<mir::Location>,\n }\n \n #[derive(Clone, Eq, PartialEq, Debug, HashStable)] // Miri debug-prints these\n@@ -168,8 +163,7 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n             return_to_block: self.return_to_block,\n             return_place: self.return_place,\n             locals: self.locals,\n-            block: self.block,\n-            stmt: self.stmt,\n+            loc: self.loc,\n             extra,\n         }\n     }\n@@ -178,10 +172,10 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<mir::SourceInfo> {\n-        self.block.map(|block| {\n-            let block = &self.body.basic_blocks()[block];\n-            if self.stmt < block.statements.len() {\n-                block.statements[self.stmt].source_info\n+        self.loc.map(|loc| {\n+            let block = &self.body.basic_blocks()[loc.block];\n+            if loc.statement_index < block.statements.len() {\n+                block.statements[loc.statement_index].source_info\n             } else {\n                 block.terminator().source_info\n             }\n@@ -615,14 +609,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,\n-            block: Some(mir::START_BLOCK),\n+            loc: Some(mir::Location::START),\n             return_to_block,\n             return_place,\n             // empty local array, we fill it in below, after we are inside the stack frame and\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n             instance,\n-            stmt: 0,\n             extra: (),\n         };\n         let frame = M::init_frame_extra(self, pre_frame)?;\n@@ -666,9 +659,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Jump to the given block.\n     #[inline]\n     pub fn go_to_block(&mut self, target: mir::BasicBlock) {\n-        let frame = self.frame_mut();\n-        frame.block = Some(target);\n-        frame.stmt = 0;\n+        self.frame_mut().loc = Some(mir::Location { block: target, statement_index: 0 });\n     }\n \n     /// *Return* to the given `target` basic block.\n@@ -690,9 +681,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// If `target` is `None`, that indicates the function does not need cleanup during\n     /// unwinding, and we will just keep propagating that upwards.\n     pub fn unwind_to_block(&mut self, target: Option<mir::BasicBlock>) {\n-        let frame = self.frame_mut();\n-        frame.block = target;\n-        frame.stmt = 0;\n+        self.frame_mut().loc = target.map(|block| mir::Location { block, statement_index: 0 });\n     }\n \n     /// Pops the current frame from the stack, deallocating the\n@@ -719,9 +708,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Sanity check `unwinding`.\n         assert_eq!(\n             unwinding,\n-            match self.frame().block {\n+            match self.frame().loc {\n                 None => true,\n-                Some(block) => self.body().basic_blocks()[block].is_cleanup,\n+                Some(loc) => self.body().basic_blocks()[loc.block].is_cleanup,\n             }\n         );\n \n@@ -973,13 +962,14 @@ where\n     Tag: HashStable<StableHashingContext<'ctx>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'ctx>, hasher: &mut StableHasher) {\n-        self.body.hash_stable(hcx, hasher);\n-        self.instance.hash_stable(hcx, hasher);\n-        self.return_to_block.hash_stable(hcx, hasher);\n-        self.return_place.as_ref().map(|r| &**r).hash_stable(hcx, hasher);\n-        self.locals.hash_stable(hcx, hasher);\n-        self.block.hash_stable(hcx, hasher);\n-        self.stmt.hash_stable(hcx, hasher);\n-        self.extra.hash_stable(hcx, hasher);\n+        // Exhaustive match on fields to make sure we forget no field.\n+        let Frame { body, instance, return_to_block, return_place, locals, loc, extra } = self;\n+        body.hash_stable(hcx, hasher);\n+        instance.hash_stable(hcx, hasher);\n+        return_to_block.hash_stable(hcx, hasher);\n+        return_place.as_ref().map(|r| &**r).hash_stable(hcx, hasher);\n+        locals.hash_stable(hcx, hasher);\n+        loc.hash_stable(hcx, hasher);\n+        extra.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "bb4c0156c88cf8d3e4308a66487a94c90fc03ead", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "patch": "@@ -46,8 +46,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(false);\n         }\n \n-        let block = match self.frame().block {\n-            Some(block) => block,\n+        let loc = match self.frame().loc {\n+            Some(loc) => loc,\n             None => {\n                 // We are unwinding and this fn has no cleanup code.\n                 // Just go on unwinding.\n@@ -56,13 +56,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 return Ok(true);\n             }\n         };\n-        let stmt_id = self.frame().stmt;\n-        let body = self.body();\n-        let basic_block = &body.basic_blocks()[block];\n+        let basic_block = &self.body().basic_blocks()[loc.block];\n \n         let old_frames = self.frame_idx();\n \n-        if let Some(stmt) = basic_block.statements.get(stmt_id) {\n+        if let Some(stmt) = basic_block.statements.get(loc.statement_index) {\n             assert_eq!(old_frames, self.frame_idx());\n             self.statement(stmt)?;\n             return Ok(true);\n@@ -126,7 +124,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             LlvmInlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n-        self.stack_mut()[frame_idx].stmt += 1;\n+        self.stack_mut()[frame_idx].loc.as_mut().unwrap().statement_index += 1;\n         Ok(())\n     }\n \n@@ -279,8 +277,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         self.eval_terminator(terminator)?;\n         if !self.stack().is_empty() {\n-            if let Some(block) = self.frame().block {\n-                info!(\"// executing {:?}\", block);\n+            if let Some(loc) = self.frame().loc {\n+                info!(\"// executing {:?}\", loc.block);\n             }\n         }\n         Ok(())"}, {"sha": "9f9ec0f6a7834794fcc599226e052606216c63f5", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "patch": "@@ -52,7 +52,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Call { ref func, ref args, destination, ref cleanup, .. } => {\n                 let old_stack = self.frame_idx();\n-                let old_bb = self.frame().block;\n+                let old_loc = self.frame().loc;\n                 let func = self.eval_operand(func, None)?;\n                 let (fn_val, abi) = match func.layout.ty.kind {\n                     ty::FnPtr(sig) => {\n@@ -79,7 +79,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;\n                 // Sanity-check that `eval_fn_call` either pushed a new frame or\n                 // did a jump to another block.\n-                if self.frame_idx() == old_stack && self.frame().block == old_bb {\n+                if self.frame_idx() == old_stack && self.frame().loc == old_loc {\n                     span_bug!(terminator.source_info.span, \"evaluating this call made no progress\");\n                 }\n             }"}]}