{"sha": "f639085a420084f44ce83f9a1d9c5e271017131f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzkwODVhNDIwMDg0ZjQ0Y2U4M2Y5YTFkOWM1ZTI3MTAxNzEzMWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-26T00:10:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-26T00:10:08Z"}, "message": "Tidy fuzzer a bit.", "tree": {"sha": "f3dc274faae7e2fffd9536a4b3de9873ebbc9106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3dc274faae7e2fffd9536a4b3de9873ebbc9106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f639085a420084f44ce83f9a1d9c5e271017131f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f639085a420084f44ce83f9a1d9c5e271017131f", "html_url": "https://github.com/rust-lang/rust/commit/f639085a420084f44ce83f9a1d9c5e271017131f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f639085a420084f44ce83f9a1d9c5e271017131f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1243ce271e0e2340a3cdebae7a70d3b61e86bc23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1243ce271e0e2340a3cdebae7a70d3b61e86bc23", "html_url": "https://github.com/rust-lang/rust/commit/1243ce271e0e2340a3cdebae7a70d3b61e86bc23"}], "stats": {"total": 111, "additions": 77, "deletions": 34}, "files": [{"sha": "addc546bb4e2e9ec2bc798b2be5298301aeeae2f", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 77, "deletions": 34, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f639085a420084f44ce83f9a1d9c5e271017131f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f639085a420084f44ce83f9a1d9c5e271017131f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=f639085a420084f44ce83f9a1d9c5e271017131f", "patch": "@@ -148,7 +148,11 @@ iter under(uint n) -> uint { let uint i = 0u; while (i < n) { put i; i += 1u; }\n \n fn devnull() -> ioivec::writer { std::ioivec::string_writer().get_writer() }\n \n-fn as_str(fn (ioivec::writer) f) -> str { auto w = std::ioivec::string_writer(); f(w.get_writer()); w.get_str() }\n+fn as_str(fn (ioivec::writer) f) -> str {\n+    auto w = std::ioivec::string_writer();\n+    f(w.get_writer());\n+    ret w.get_str();\n+}\n \n /*\n fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n@@ -167,32 +171,73 @@ fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n }\n */\n \n-fn check_roundtrip(@ast::crate cr1, &codemap::codemap cm1, &str filename, &str str1) {\n-    auto str2 = as_str(bind pprust::print_crate(cm1, cr1, filename,\n-                                                ioivec::string_reader(str1), _,\n-                                                pprust::no_ann()));\n-    if (true\n-      && !contains(str2, \"][]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str2, \"][mutable]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str2, \"][mutable ]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str2, \"self\") // crazy rules enforced by parser rather than typechecker?\n-      && !contains(str2, \"spawn\") // more precedence issues\n-      && !contains(str2, \"bind\") // more precedence issues?\n-       ) {\n-        auto cm2 = codemap::new_codemap();\n-        auto cr2 = parser::parse_crate_from_source_str(filename, str2, ~[], cm2);\n-        // should compare crates at this point, but it's easier to compare strings\n-        auto str3 = as_str(bind pprust::print_crate(cm2, cr2, filename, ioivec::string_reader(str2),\n-                                                    _, pprust::no_ann()));\n-        if (!str::is_ascii(str3)) {\n-          log_err \"Non-ASCII in \" + filename; // why does non-ASCII work correctly with \"rustc --pretty normal\" but not here???\n-        } else if (str2 != str3) {\n-            write_file(\"round-trip-a.rs\", str2);\n-            write_file(\"round-trip-b.rs\", str3);\n-            std::run::run_program(\"kdiff3\", [\"round-trip-a.rs\", \"round-trip-b.rs\"]);\n-            fail \"Mismatch\";\n+fn parse_and_print(&str code) -> str {\n+    auto filename = \"\";\n+    auto codemap = codemap::new_codemap();\n+    auto crate = parser::parse_crate_from_source_str(filename, code, ~[], codemap);\n+    ret as_str(bind pprust::print_crate(codemap, crate, filename,\n+                                        ioivec::string_reader(code),\n+                                        _, pprust::no_ann()));\n+}\n+\n+fn content_is_confusing(&str code) -> bool {\n+    auto confusing_patterns = [\n+        \"#macro\",      // https://github.com/graydon/rust/issues/671\n+        \"][]\",         // https://github.com/graydon/rust/issues/669\n+        \"][mutable]\",  // https://github.com/graydon/rust/issues/669\n+        \"][mutable ]\", // https://github.com/graydon/rust/issues/669\n+        \"self\",        // crazy rules enforced by parser rather than typechecker?\n+        \"spawn\",       // more precedence issues\n+        \"bind\"         // more precedence issues?\n+    ];\n+\n+    for (str p in confusing_patterns) {\n+        if contains(code, p) {\n+            ret true;\n+        }\n+    }\n+    ret false;\n+}\n+\n+fn file_is_confusing(&str filename) -> bool {\n+    auto confusing_files = [\n+\n+        \"block-expr-precedence.rs\",  // https://github.com/graydon/rust/issues/674\n+\n+        \"syntax-extension-fmt.rs\"    // an issue where -2147483648 gains an\n+                                     // extra negative sign each time through,\n+                                     // which i can't reproduce using \"rustc\n+                                     // --pretty normal\"???\n+    ];\n+\n+    for (str f in confusing_files) {\n+        if contains(filename, f) {\n+            ret true;\n         }\n-   }\n+    }\n+\n+    ret false;\n+}\n+\n+fn check_roundtrip_convergence(&str code) {\n+\n+    auto i = 0;\n+    auto new = code;\n+    auto old = code;\n+\n+    while (i < 10) {\n+        old = new;\n+        new = parse_and_print(old);\n+        i += 1;\n+        log_err #fmt(\"cycle %d\", i);\n+    }\n+\n+    if old != new {\n+        write_file(\"round-trip-a.rs\", old);\n+        write_file(\"round-trip-b.rs\", new);\n+        std::run::run_program(\"kdiff3\", [\"round-trip-a.rs\", \"round-trip-b.rs\"]);\n+        fail \"Mismatch\";\n+    }\n }\n \n fn main(vec[str] args) {\n@@ -207,15 +252,13 @@ fn main(vec[str] args) {\n \n     for (str file in files) {\n         log_err \"=== \" + file + \" ===\";\n-        auto cm1 = codemap::new_codemap();\n-        auto str1 = read_whole_file(file);\n-        auto cr1 = parser::parse_crate_from_source_str(file, str1, ~[], cm1);\n-        if (!contains(str1, \"#macro\") // https://github.com/graydon/rust/issues/671\n-         && !str::ends_with(file, \"block-expr-precedence.rs\") // https://github.com/graydon/rust/issues/674\n-         && !str::ends_with(file, \"syntax-extension-fmt.rs\") // an issue where -2147483648 gains an extra negative sign each time through, which i can't reproduce using \"rustc --pretty normal\"???\n-) {\n-            check_roundtrip(cr1, cm1, file, str1);\n+        if ! file_is_confusing(file) {\n+            auto s = read_whole_file(file);\n+            if ! content_is_confusing(s) {\n+                check_roundtrip_convergence(s);\n+            }\n         }\n+\n         //pprust::print_crate(cm, crate, file, devnull(), pprust::no_ann());\n         // Currently hits https://github.com/graydon/rust/issues/675\n         //pp_variants(*crate, cm, file);"}]}