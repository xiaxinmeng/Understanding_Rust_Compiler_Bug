{"sha": "f4c28f85210d3357c061f88dd3e10825f5289414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YzI4Zjg1MjEwZDMzNTdjMDYxZjg4ZGQzZTEwODI1ZjUyODk0MTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-06T19:09:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-06T19:09:24Z"}, "message": "Merge pull request #310 from Manishearth/len_zero\n\nfix false positive len_zero in is_empty()", "tree": {"sha": "cebed1afb0793494d7abf5dc0cdc0af9809dda56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cebed1afb0793494d7abf5dc0cdc0af9809dda56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c28f85210d3357c061f88dd3e10825f5289414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c28f85210d3357c061f88dd3e10825f5289414", "html_url": "https://github.com/rust-lang/rust/commit/f4c28f85210d3357c061f88dd3e10825f5289414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c28f85210d3357c061f88dd3e10825f5289414/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1569fd8c55a4b67021caa89474caf6cb02112d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1569fd8c55a4b67021caa89474caf6cb02112d02", "html_url": "https://github.com/rust-lang/rust/commit/1569fd8c55a4b67021caa89474caf6cb02112d02"}, {"sha": "468b410d04a486bf9208be5136feee93d3818c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/468b410d04a486bf9208be5136feee93d3818c21", "html_url": "https://github.com/rust-lang/rust/commit/468b410d04a486bf9208be5136feee93d3818c21"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "45b9c844af342b4b2cd7eb8cb9c060a9da074923", "filename": "src/len_zero.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=f4c28f85210d3357c061f88dd3e10825f5289414", "patch": "@@ -5,7 +5,7 @@ use syntax::codemap::{Span, Spanned};\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n \n-use utils::{span_lint, walk_ptrs_ty, snippet};\n+use utils::{get_item_name, snippet, span_lint, walk_ptrs_ty};\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` \\\n@@ -33,14 +33,14 @@ impl LintPass for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n-        if let &ExprBinary(Spanned{node: cmp, ..}, ref left, ref right) =\n-            &expr.node {\n-                match cmp {\n-                    BiEq => check_cmp(cx, expr.span, left, right, \"\"),\n-                    BiGt | BiNe => check_cmp(cx, expr.span, left, right, \"!\"),\n-                    _ => ()\n-                }\n+        if let ExprBinary(Spanned{node: cmp, ..}, ref left, ref right) =\n+                expr.node {\n+            match cmp {\n+                BiEq => check_cmp(cx, expr.span, left, right, \"\"),\n+                BiGt | BiNe => check_cmp(cx, expr.span, left, right, \"!\"),\n+                _ => ()\n             }\n+        }\n     }\n }\n \n@@ -89,7 +89,11 @@ fn is_self_sig(sig: &MethodSig) -> bool {\n         false } else { sig.decl.inputs.len() == 1 }\n }\n \n-fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, op: &str) {\n+fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, op: &str) {    \n+    // check if we are in an is_empty() method \n+    if let Some(name) = get_item_name(cx, left) {\n+        if name == \"is_empty\" { return; }\n+    }\n     match (&left.node, &right.node) {\n         (&ExprLit(ref lit), &ExprMethodCall(ref method, _, ref args)) =>\n             check_len_zero(cx, span, method, args, lit, op),"}, {"sha": "8891b000b59237e4a23bbec4bf89e502562a1f10", "filename": "src/misc.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=f4c28f85210d3357c061f88dd3e10825f5289414", "patch": "@@ -5,10 +5,9 @@ use reexport::*;\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned};\n use rustc_front::visit::FnKind;\n-use rustc::front::map::Node::*;\n use rustc::middle::ty;\n \n-use utils::{match_path, snippet, span_lint, walk_ptrs_ty};\n+use utils::{get_item_name, match_path, snippet, span_lint, walk_ptrs_ty};\n use consts::constant;\n \n declare_lint!(pub TOPLEVEL_REF_ARG, Warn,\n@@ -93,19 +92,12 @@ impl LintPass for FloatCmp {\n                         false, |c| c.0.as_float().map_or(false, |f| f == 0.0)) {\n                     return;\n                 }\n-                let parent_id = cx.tcx.map.get_parent(expr.id);\n-                match cx.tcx.map.find(parent_id) {\n-                    Some(NodeItem(&Item{ ref ident, .. })) |\n-                    Some(NodeTraitItem(&TraitItem{ id: _, ref ident, .. })) |\n-                    Some(NodeImplItem(&ImplItem{ id: _, ref ident, .. })) => {\n-                        let name = ident.name.as_str();\n-                        if &*name == \"eq\" || &*name == \"ne\" ||\n-                                name.starts_with(\"eq_\") ||\n-                                name.ends_with(\"_eq\") {\n-                            return;\n-                        }\n-                    },\n-                    _ => (),\n+                if let Some(name) = get_item_name(cx, expr) {\n+                    if name == \"eq\" || name == \"ne\" ||\n+                            name.as_str().starts_with(\"eq_\") ||\n+                            name.as_str().ends_with(\"_eq\") {\n+                        return;\n+                    }\n                 }\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n                     \"{}-comparison of f32 or f64 detected. Consider changing this to \\"}, {"sha": "d6e529048c9b62a717ff7099fea8dade1e7c1276", "filename": "src/utils.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c28f85210d3357c061f88dd3e10825f5289414/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f4c28f85210d3357c061f88dd3e10825f5289414", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use reexport::*;\n use syntax::codemap::{ExpnInfo, Span, ExpnFormat};\n-use rustc::front::map::Node::NodeExpr;\n+use rustc::front::map::Node::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty;\n use std::borrow::Cow;\n@@ -100,6 +100,19 @@ pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n         |(a, b)| &a.identifier.name == b)\n }\n \n+/// get the name of the item the expression is in, if available\n+pub fn get_item_name(cx: &Context, expr: &Expr) -> Option<Name> {\n+    let parent_id = cx.tcx.map.get_parent(expr.id);\n+    match cx.tcx.map.find(parent_id) {\n+        Some(NodeItem(&Item{ ref ident, .. })) |\n+        Some(NodeTraitItem(&TraitItem{ id: _, ref ident, .. })) |\n+        Some(NodeImplItem(&ImplItem{ id: _, ref ident, .. })) => {\n+            Some(ident.name)\n+        },\n+        _ => None,\n+    }\n+}\n+\n /// convert a span to a code snippet if available, otherwise use default, e.g.\n /// `snippet(cx, expr.span, \"..\")`\n pub fn snippet<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a, str> {"}]}