{"sha": "54c999893396434725c284fdcfeeb4d47340d53f", "node_id": "C_kwDOAAsO6NoAKDU0Yzk5OTg5MzM5NjQzNDcyNWMyODRmZGNmZWViNGQ0NzM0MGQ1M2Y", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T20:52:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T20:52:57Z"}, "message": "Merge #11232\n\n11232: Filter out macro calls by file id in when building DynMap r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "77a7d2ae56d840c8d4eadb4a0f4bc24285363aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a7d2ae56d840c8d4eadb4a0f4bc24285363aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c999893396434725c284fdcfeeb4d47340d53f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2KgpCRBK7hj4Ov3rIwAAlicIADpR50MEYbZatYnamHtDWs5G\n2lu2y63nZptn1URs2xdytQsrfdXpuFFHmRClfohTicxXRg7IXB4DclLplmZ2RjMG\n53KXqD9Ndda0xdGRYM9670sRA5hKfvj5aJNOUNfm3ZZpIBKgtWJzJxsAaU07WTzG\nawttzsgdtIegm5vRmRfderSDV1DRBj6TEqwmRac+yk+vRtf6buRag6lTvjDNX/03\nFoNYk+x+fpX/ajpJ5wwik20IPf7iuA95xZtUcpdZbgRJnml8pTpgeaCewT1TNLat\nt0Bh9zPrLNhtXFM6Jf8rECRbyCcXzcPnDe3pwerP6NDiJ+PDayW3EYyQpg2T92E=\n=7vjH\n-----END PGP SIGNATURE-----\n", "payload": "tree 77a7d2ae56d840c8d4eadb4a0f4bc24285363aca\nparent 41a0e95d6125c7d15aad4daa48123afd5d410af7\nparent 6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641588777 +0000\ncommitter GitHub <noreply@github.com> 1641588777 +0000\n\nMerge #11232\n\n11232: Filter out macro calls by file id in when building DynMap r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c999893396434725c284fdcfeeb4d47340d53f", "html_url": "https://github.com/rust-lang/rust/commit/54c999893396434725c284fdcfeeb4d47340d53f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c999893396434725c284fdcfeeb4d47340d53f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a0e95d6125c7d15aad4daa48123afd5d410af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a0e95d6125c7d15aad4daa48123afd5d410af7", "html_url": "https://github.com/rust-lang/rust/commit/41a0e95d6125c7d15aad4daa48123afd5d410af7"}, {"sha": "6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b", "html_url": "https://github.com/rust-lang/rust/commit/6cf0cadfaad0eb1dfdaebb4d3676438fbb644c1b"}], "stats": {"total": 95, "additions": 45, "deletions": 50}, "files": [{"sha": "1ef41d90b5122990ac605975a7d486adc4763744", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/54c999893396434725c284fdcfeeb4d47340d53f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c999893396434725c284fdcfeeb4d47340d53f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=54c999893396434725c284fdcfeeb4d47340d53f", "patch": "@@ -31,30 +31,8 @@ impl ChildBySource for TraitId {\n     fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let data = db.trait_data(*self);\n         // FIXME attribute macros\n-        for (_name, item) in data.items.iter() {\n-            match *item {\n-                AssocItemId::FunctionId(func) => {\n-                    let loc = func.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::FUNCTION].insert(src, func)\n-                    }\n-                }\n-                AssocItemId::ConstId(konst) => {\n-                    let loc = konst.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::CONST].insert(src, konst)\n-                    }\n-                }\n-                AssocItemId::TypeAliasId(ty) => {\n-                    let loc = ty.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::TYPE_ALIAS].insert(src, ty)\n-                    }\n-                }\n-            }\n+        for &(_, item) in data.items.iter() {\n+            child_by_source_assoc_items(db, res, file_id, item);\n         }\n     }\n }\n@@ -64,28 +42,37 @@ impl ChildBySource for ImplId {\n         let data = db.impl_data(*self);\n         // FIXME attribute macros\n         for &item in data.items.iter() {\n-            match item {\n-                AssocItemId::FunctionId(func) => {\n-                    let loc = func.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::FUNCTION].insert(src, func)\n-                    }\n-                }\n-                AssocItemId::ConstId(konst) => {\n-                    let loc = konst.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::CONST].insert(src, konst)\n-                    }\n-                }\n-                AssocItemId::TypeAliasId(ty) => {\n-                    let loc = ty.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        res[keys::TYPE_ALIAS].insert(src, ty)\n-                    }\n-                }\n+            child_by_source_assoc_items(db, res, file_id, item);\n+        }\n+    }\n+}\n+\n+fn child_by_source_assoc_items(\n+    db: &dyn DefDatabase,\n+    res: &mut DynMap,\n+    file_id: HirFileId,\n+    item: AssocItemId,\n+) {\n+    match item {\n+        AssocItemId::FunctionId(func) => {\n+            let loc = func.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::FUNCTION].insert(src, func)\n+            }\n+        }\n+        AssocItemId::ConstId(konst) => {\n+            let loc = konst.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::CONST].insert(src, konst)\n+            }\n+        }\n+        AssocItemId::TypeAliasId(ty) => {\n+            let loc = ty.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::TYPE_ALIAS].insert(src, ty)\n             }\n         }\n     }\n@@ -114,15 +101,23 @@ impl ChildBySource for ItemScope {\n             }\n         });\n         self.unnamed_consts().for_each(|konst| {\n-            let src = konst.lookup(db).source(db);\n-            res[keys::CONST].insert(src, konst);\n+            let loc = konst.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                let src = loc.source(db);\n+                res[keys::CONST].insert(src, konst);\n+            }\n         });\n         self.impls().for_each(|imp| add_impl(db, file_id, res, imp));\n         self.attr_macro_invocs().for_each(|(ast_id, call_id)| {\n-            let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-            res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n+            if ast_id.file_id == file_id {\n+                let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n+                res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n+            }\n         });\n         self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n+            if ast_id.file_id != file_id {\n+                return;\n+            }\n             let adt = ast_id.to_node(db.upcast());\n             for (attr_id, calls) in calls {\n                 if let Some(Either::Right(attr)) ="}]}