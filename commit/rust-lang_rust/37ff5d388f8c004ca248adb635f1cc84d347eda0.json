{"sha": "37ff5d388f8c004ca248adb635f1cc84d347eda0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmY1ZDM4OGY4YzAwNGNhMjQ4YWRiNjM1ZjFjYzg0ZDM0N2VkYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-22T08:22:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-22T08:22:17Z"}, "message": "Auto merge of #59445 - alexreg:ban-multi-trait-objects-via-aliases, r=oli-obk\n\nBan multi-trait objects via trait aliases\n\nObviously, multi-trait objects are not normally supported, so they should not be supported via trait aliases.\n\nThis has been factored out from the previous PR https://github.com/rust-lang/rust/pull/55994 (see point 1).\n\nr? @Centril\n\nCC @nikomatsakis\n\n------------------\n\n### RELNOTES:\n\nWe now allow `dyn Send + fmt::Debug` with equivalent semantics to `dyn fmt::Debug + Send`.\nThat is, the order of the mentioned traits does not matter wrt. principal/not-principal traits.\nThis is a small change that might deserve a mention in the blog post because it is a language change but most likely not.\n\nSee https://github.com/rust-lang/rust/blob/ce2ee305f9165c037ecddddb5792588a15ff6c37/src/test/ui/traits/wf-trait-object-reverse-order.rs.\n\n// @Centril", "tree": {"sha": "460137db1b121095313303ae6c78f2698bd15159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460137db1b121095313303ae6c78f2698bd15159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0", "html_url": "https://github.com/rust-lang/rust/commit/37ff5d388f8c004ca248adb635f1cc84d347eda0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc822c261f5c94a41eb725755fdda7ca6efbda2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc822c261f5c94a41eb725755fdda7ca6efbda2", "html_url": "https://github.com/rust-lang/rust/commit/1cc822c261f5c94a41eb725755fdda7ca6efbda2"}, {"sha": "ce2ee305f9165c037ecddddb5792588a15ff6c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2ee305f9165c037ecddddb5792588a15ff6c37", "html_url": "https://github.com/rust-lang/rust/commit/ce2ee305f9165c037ecddddb5792588a15ff6c37"}], "stats": {"total": 2326, "additions": 2032, "deletions": 294}, "files": [{"sha": "8768f1ff081c1f1fadfc7a291867dfd06db8bee4", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -123,12 +123,12 @@ pub use core::slice::{RChunks, RChunksMut, RChunksExact, RChunksExactMut};\n ////////////////////////////////////////////////////////////////////////////////\n \n // HACK(japaric) needed for the implementation of `vec!` macro during testing\n-// NB see the hack module in this file for more details\n+// N.B., see the `hack` module in this file for more details.\n #[cfg(test)]\n pub use hack::into_vec;\n \n // HACK(japaric) needed for the implementation of `Vec::clone` during testing\n-// NB see the hack module in this file for more details\n+// N.B., see the `hack` module in this file for more details.\n #[cfg(test)]\n pub use hack::to_vec;\n \n@@ -376,7 +376,7 @@ impl<T> [T] {\n     pub fn to_vec(&self) -> Vec<T>\n         where T: Clone\n     {\n-        // NB see hack module in this file\n+        // N.B., see the `hack` module in this file for more details.\n         hack::to_vec(self)\n     }\n \n@@ -397,7 +397,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn into_vec(self: Box<Self>) -> Vec<T> {\n-        // NB see hack module in this file\n+        // N.B., see the `hack` module in this file for more details.\n         hack::into_vec(self)\n     }\n "}, {"sha": "23f4d20857135f62036a61d111b126d239ccedc6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -957,7 +957,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Returns the name associated with the given NodeId's AST.\n+    /// Returns the name associated with the given `NodeId`'s AST.\n     pub fn name(&self, id: NodeId) -> Name {\n         let hir_id = self.node_to_hir_id(id);\n         self.name_by_hir_id(hir_id)"}, {"sha": "d2b926d188697170c6be70a5426050ac17c990d0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -2143,11 +2143,11 @@ pub enum UseKind {\n     ListStem,\n }\n \n-/// TraitRef's appear in impls.\n+/// References to traits in impls.\n ///\n-/// resolve maps each TraitRef's ref_id to its defining trait; that's all\n-/// that the ref_id is for. Note that ref_id's value is not the NodeId of the\n-/// trait being referred to but just a unique NodeId that serves as a key\n+/// `resolve` maps each `TraitRef`'s `ref_id` to its defining trait; that's all\n+/// that the `ref_id` is for. Note that `ref_id`'s value is not the `NodeId` of the\n+/// trait being referred to but just a unique `NodeId` that serves as a key\n /// within the resolution map.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct TraitRef {"}, {"sha": "8825c94cdb81cb27c3abaef0002ffb80caaccc1c", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -168,7 +168,7 @@ rustc_queries! {\n         query predicates_defined_on(_: DefId)\n             -> Lrc<ty::GenericPredicates<'tcx>> {}\n \n-        /// Returns the predicates written explicit by the user.\n+        /// Returns the predicates written explicitly by the user.\n         query explicit_predicates_of(_: DefId)\n             -> Lrc<ty::GenericPredicates<'tcx>> {}\n \n@@ -216,17 +216,17 @@ rustc_queries! {\n             _: DefId\n         ) -> Result<DtorckConstraint<'tcx>, NoSolution> {}\n \n-        /// True if this is a const fn, use the `is_const_fn` to know whether your crate actually\n-        /// sees it as const fn (e.g., the const-fn-ness might be unstable and you might not have\n-        /// the feature gate active)\n+        /// Returns `true` if this is a const fn, use the `is_const_fn` to know whether your crate\n+        /// actually sees it as const fn (e.g., the const-fn-ness might be unstable and you might\n+        /// not have the feature gate active).\n         ///\n         /// **Do not call this function manually.** It is only meant to cache the base data for the\n         /// `is_const_fn` function.\n         query is_const_fn_raw(key: DefId) -> bool {\n             desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        /// Returns true if calls to the function may be promoted\n+        /// Returns `true` if calls to the function may be promoted.\n         ///\n         /// This is either because the function is e.g., a tuple-struct or tuple-variant\n         /// constructor, or because it has the `#[rustc_promotable]` attribute. The attribute should\n@@ -237,36 +237,34 @@ rustc_queries! {\n \n         query const_fn_is_allowed_fn_ptr(_: DefId) -> bool {}\n \n-        /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n+        /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(_: DefId) -> bool {}\n \n         /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n         query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n \n-        /// Get a map with the variance of every item; use `item_variance`\n-        /// instead.\n+        /// Gets a map with the variance of every item; use `item_variance` instead.\n         query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap<'tcx>> {\n             desc { \"computing the variances for items in this crate\" }\n         }\n \n-        /// Maps from def-id of a type or region parameter to its\n-        /// (inferred) variance.\n+        /// Maps from the `DefId` of a type or region parameter to its (inferred) variance.\n         query variances_of(_: DefId) -> &'tcx [ty::Variance] {}\n     }\n \n     TypeChecking {\n-        /// Maps from def-id of a type to its (inferred) outlives.\n+        /// Maps from thee `DefId` of a type to its (inferred) outlives.\n         query inferred_outlives_crate(_: CrateNum)\n             -> Lrc<ty::CratePredicatesMap<'tcx>> {\n             desc { \"computing the inferred outlives predicates for items in this crate\" }\n         }\n     }\n \n     Other {\n-        /// Maps from an impl/trait def-id to a list of the def-ids of its items\n+        /// Maps from an impl/trait `DefId to a list of the `DefId`s of its items.\n         query associated_item_def_ids(_: DefId) -> Lrc<Vec<DefId>> {}\n \n-        /// Maps from a trait item to the trait item \"descriptor\"\n+        /// Maps from a trait item to the trait item \"descriptor\".\n         query associated_item(_: DefId) -> ty::AssociatedItem {}\n \n         query impl_trait_ref(_: DefId) -> Option<ty::TraitRef<'tcx>> {}\n@@ -276,7 +274,7 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        /// Maps a DefId of a type to a list of its inherent impls.\n+        /// Maps a `DefId` of a type to a list of its inherent impls.\n         /// Contains implementations of methods that are inherent to a type.\n         /// Methods in these implementations don't need to be exported.\n         query inherent_impls(_: DefId) -> Lrc<Vec<DefId>> {\n@@ -300,7 +298,7 @@ rustc_queries! {\n             desc { |tcx| \"linting {}\", key.describe_as_module(tcx) }\n         }\n \n-        /// Checks the attributes in the module\n+        /// Checks the attributes in the module.\n         query check_mod_attrs(key: DefId) -> () {\n             desc { |tcx| \"checking attributes in {}\", key.describe_as_module(tcx) }\n         }\n@@ -309,7 +307,7 @@ rustc_queries! {\n             desc { |tcx| \"checking for unstable API usage in {}\", key.describe_as_module(tcx) }\n         }\n \n-        /// Checks the loops in the module\n+        /// Checks the loops in the module.\n         query check_mod_loops(key: DefId) -> () {\n             desc { |tcx| \"checking loops in {}\", key.describe_as_module(tcx) }\n         }\n@@ -338,7 +336,7 @@ rustc_queries! {\n             desc { |tcx| \"collecting item types in {}\", key.describe_as_module(tcx) }\n         }\n \n-        /// Caches CoerceUnsized kinds for impls on custom types.\n+        /// Caches `CoerceUnsized` kinds for impls on custom types.\n         query coerce_unsized_info(_: DefId)\n             -> ty::adjustment::CoerceUnsizedInfo {}\n     }\n@@ -375,7 +373,7 @@ rustc_queries! {\n     BorrowChecking {\n         query borrowck(_: DefId) -> Lrc<BorrowCheckResult> {}\n \n-        /// Borrow checks the function body. If this is a closure, returns\n+        /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n         query mir_borrowck(_: DefId) -> mir::BorrowCheckResult<'tcx> {}\n     }\n@@ -401,11 +399,11 @@ rustc_queries! {\n     }\n \n     Other {\n-        /// Evaluate a constant without running sanity checks\n+        /// Evaluates a constant without running sanity checks.\n         ///\n         /// **Do not use this** outside const eval. Const eval uses this to break query cycles\n         /// during validation. Please add a comment to every use site explaining why using\n-        /// `const_eval` isn't sufficient\n+        /// `const_eval` isn't sufficient.\n         query const_eval_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalRawResult<'tcx> {\n             no_force\n@@ -660,12 +658,12 @@ rustc_queries! {\n     }\n \n     Linking {\n-        // The DefIds of all non-generic functions and statics in the given crate\n+        // The `DefId`s of all non-generic functions and statics in the given crate\n         // that can be reached from outside the crate.\n         //\n         // We expect this items to be available for being linked to.\n         //\n-        // This query can also be called for LOCAL_CRATE. In this case it will\n+        // This query can also be called for `LOCAL_CRATE`. In this case it will\n         // compute which items will be reachable to other crates, taking into account\n         // the kind of crate that is currently compiled. Crates with only a\n         // C interface have fewer reachable things."}, {"sha": "a4b9ed0a206b91a74f3c0e9ca21eca8d548a4459", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -60,8 +60,10 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n-pub use self::util::{supertraits, supertrait_def_ids, transitive_bounds,\n-                     Supertraits, SupertraitDefIds};\n+pub use self::util::{\n+    supertraits, supertrait_def_ids, transitive_bounds, Supertraits, SupertraitDefIds,\n+};\n+pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n \n pub use self::chalk_fulfill::{\n     CanonicalGoal as ChalkCanonicalGoal,\n@@ -1043,7 +1045,7 @@ fn vtable_methods<'a, 'tcx>(\n     )\n }\n \n-impl<'tcx,O> Obligation<'tcx,O> {\n+impl<'tcx, O> Obligation<'tcx, O> {\n     pub fn new(cause: ObligationCause<'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n                predicate: O)"}, {"sha": "ec5e127a5ec4b0b4e326a628ef970cea839d2e7b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1772,7 +1772,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             bounds\n         );\n \n-        let matching_bound = util::elaborate_predicates(self.tcx(), bounds.predicates)\n+        let elaborated_predicates = util::elaborate_predicates(self.tcx(), bounds.predicates);\n+        let matching_bound = elaborated_predicates\n             .filter_to_traits()\n             .find(|bound| {\n                 self.infcx.probe(|_| {"}, {"sha": "5ba23a9c45a4f3bf90bb80fd033c94aefbd9e120", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 223, "deletions": 85, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,3 +1,7 @@\n+use errors::DiagnosticBuilder;\n+use smallvec::SmallVec;\n+use syntax_pos::Span;\n+\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::traits::specialize::specialization_graph::NodeItem;\n@@ -41,15 +45,14 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     }\n }\n \n-\n-struct PredicateSet<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+struct PredicateSet<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     set: FxHashSet<ty::Predicate<'tcx>>,\n }\n \n impl<'a, 'gcx, 'tcx> PredicateSet<'a, 'gcx, 'tcx> {\n-    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> PredicateSet<'a, 'gcx, 'tcx> {\n-        PredicateSet { tcx: tcx, set: Default::default() }\n+    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+        Self { tcx: tcx, set: Default::default() }\n     }\n \n     fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {\n@@ -67,18 +70,25 @@ impl<'a, 'gcx, 'tcx> PredicateSet<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl<'a, 'gcx, 'tcx, T: AsRef<ty::Predicate<'tcx>>> Extend<T> for PredicateSet<'a, 'gcx, 'tcx> {\n+    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n+        for pred in iter {\n+            self.insert(pred.as_ref());\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // `Elaboration` iterator\n ///////////////////////////////////////////////////////////////////////////\n \n /// \"Elaboration\" is the process of identifying all the predicates that\n /// are implied by a source predicate. Currently this basically means\n-/// walking the \"supertraits\" and other similar assumptions. For\n-/// example, if we know that `T : Ord`, the elaborator would deduce\n-/// that `T : PartialOrd` holds as well. Similarly, if we have `trait\n-/// Foo : 'static`, and we know that `T : Foo`, then we know that `T :\n-/// 'static`.\n-pub struct Elaborator<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+/// walking the \"supertraits\" and other similar assumptions. For example,\n+/// if we know that `T: Ord`, the elaborator would deduce that `T: PartialOrd`\n+/// holds as well. Similarly, if we have `trait Foo: 'static`, and we know that\n+/// `T: Foo`, then we know that `T: 'static`.\n+pub struct Elaborator<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     stack: Vec<ty::Predicate<'tcx>>,\n     visited: PredicateSet<'a, 'gcx, 'tcx>,\n }\n@@ -96,8 +106,7 @@ pub fn elaborate_trait_refs<'cx, 'gcx, 'tcx>(\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n     -> Elaborator<'cx, 'gcx, 'tcx>\n {\n-    let predicates = trait_refs.map(|trait_ref| trait_ref.to_predicate())\n-                               .collect();\n+    let predicates = trait_refs.map(|trait_ref| trait_ref.to_predicate()).collect();\n     elaborate_predicates(tcx, predicates)\n }\n \n@@ -108,36 +117,33 @@ pub fn elaborate_predicates<'cx, 'gcx, 'tcx>(\n {\n     let mut visited = PredicateSet::new(tcx);\n     predicates.retain(|pred| visited.insert(pred));\n-    Elaborator { stack: predicates, visited: visited }\n+    Elaborator { stack: predicates, visited }\n }\n \n impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n     pub fn filter_to_traits(self) -> FilterToTraits<Self> {\n         FilterToTraits::new(self)\n     }\n \n-    fn push(&mut self, predicate: &ty::Predicate<'tcx>) {\n+    fn elaborate(&mut self, predicate: &ty::Predicate<'tcx>) {\n         let tcx = self.visited.tcx;\n         match *predicate {\n             ty::Predicate::Trait(ref data) => {\n-                // Predicates declared on the trait.\n+                // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let mut predicates: Vec<_> =\n-                    predicates.predicates\n-                              .iter()\n-                              .map(|(p, _)| p.subst_supertrait(tcx, &data.to_poly_trait_ref()))\n-                              .collect();\n-\n+                let predicates = predicates.predicates\n+                    .iter()\n+                    .map(|(pred, _)| pred.subst_supertrait(tcx, &data.to_poly_trait_ref()));\n                 debug!(\"super_predicates: data={:?} predicates={:?}\",\n-                       data, predicates);\n+                       data, predicates.clone());\n \n-                // Only keep those bounds that we haven't already\n-                // seen.  This is necessary to prevent infinite\n-                // recursion in some cases.  One common case is when\n-                // people define `trait Sized: Sized { }` rather than `trait\n-                // Sized { }`.\n-                predicates.retain(|r| self.visited.insert(r));\n+                // Only keep those bounds that we haven't already seen.\n+                // This is necessary to prevent infinite recursion in some\n+                // cases. One common case is when people define\n+                // `trait Sized: Sized { }` rather than `trait Sized { }`.\n+                let visited = &mut self.visited;\n+                let predicates = predicates.filter(|pred| visited.insert(pred));\n \n                 self.stack.extend(predicates);\n             }\n@@ -150,8 +156,8 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 // predicates.\n             }\n             ty::Predicate::Subtype(..) => {\n-                // Currently, we do not \"elaborate\" predicates like `X\n-                // <: Y`, though conceivably we might.\n+                // Currently, we do not \"elaborate\" predicates like `X <: Y`,\n+                // though conceivably we might.\n             }\n             ty::Predicate::Projection(..) => {\n                 // Nothing to elaborate in a projection predicate.\n@@ -163,11 +169,9 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 // Currently, we do not elaborate const-evaluatable\n                 // predicates.\n             }\n-\n             ty::Predicate::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`.\n             }\n-\n             ty::Predicate::TypeOutlives(ref data) => {\n                 // We know that `T: 'a` for some type `T`. We can\n                 // often elaborate this. For example, if we know that\n@@ -194,34 +198,35 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 tcx.push_outlives_components(ty_max, &mut components);\n                 self.stack.extend(\n                     components\n-                       .into_iter()\n-                       .filter_map(|component| match component {\n-                           Component::Region(r) => if r.is_late_bound() {\n-                               None\n-                           } else {\n-                               Some(ty::Predicate::RegionOutlives(\n-                                   ty::Binder::dummy(ty::OutlivesPredicate(r, r_min))))\n-                           },\n-\n-                           Component::Param(p) => {\n-                               let ty = tcx.mk_ty_param(p.index, p.name);\n-                               Some(ty::Predicate::TypeOutlives(\n-                                   ty::Binder::dummy(ty::OutlivesPredicate(ty, r_min))))\n-                           },\n-\n-                           Component::UnresolvedInferenceVariable(_) => {\n-                               None\n-                           },\n-\n-                           Component::Projection(_) |\n-                           Component::EscapingProjection(_) => {\n-                               // We can probably do more here. This\n-                               // corresponds to a case like `<T as\n-                               // Foo<'a>>::U: 'b`.\n-                               None\n-                           },\n-                       })\n-                       .filter(|p| visited.insert(p)));\n+                        .into_iter()\n+                        .filter_map(|component| match component {\n+                            Component::Region(r) => if r.is_late_bound() {\n+                                None\n+                            } else {\n+                                Some(ty::Predicate::RegionOutlives(\n+                                    ty::Binder::dummy(ty::OutlivesPredicate(r, r_min))))\n+                            }\n+\n+                            Component::Param(p) => {\n+                                let ty = tcx.mk_ty_param(p.index, p.name);\n+                                Some(ty::Predicate::TypeOutlives(\n+                                    ty::Binder::dummy(ty::OutlivesPredicate(ty, r_min))))\n+                            }\n+\n+                            Component::UnresolvedInferenceVariable(_) => {\n+                                None\n+                            }\n+\n+                            Component::Projection(_) |\n+                            Component::EscapingProjection(_) => {\n+                                // We can probably do more here. This\n+                                // corresponds to a case like `<T as\n+                                // Foo<'a>>::U: 'b`.\n+                                None\n+                            }\n+                        })\n+                        .filter(|p| visited.insert(p))\n+                );\n             }\n         }\n     }\n@@ -236,15 +241,12 @@ impl<'cx, 'gcx, 'tcx> Iterator for Elaborator<'cx, 'gcx, 'tcx> {\n \n     fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n         // Extract next item from top-most stack frame, if any.\n-        let next_predicate = match self.stack.pop() {\n-            Some(predicate) => predicate,\n-            None => {\n-                // No more stack frames. Done.\n-                return None;\n-            }\n-        };\n-        self.push(&next_predicate);\n-        return Some(next_predicate);\n+        if let Some(pred) = self.stack.pop() {\n+            self.elaborate(&pred);\n+            Some(pred)\n+        } else {\n+            None\n+        }\n     }\n }\n \n@@ -256,20 +258,161 @@ pub type Supertraits<'cx, 'gcx, 'tcx> = FilterToTraits<Elaborator<'cx, 'gcx, 'tc\n \n pub fn supertraits<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n                                     trait_ref: ty::PolyTraitRef<'tcx>)\n-                                    -> Supertraits<'cx, 'gcx, 'tcx>\n-{\n+                                    -> Supertraits<'cx, 'gcx, 'tcx> {\n     elaborate_trait_ref(tcx, trait_ref).filter_to_traits()\n }\n \n pub fn transitive_bounds<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n                                           bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n-                                          -> Supertraits<'cx, 'gcx, 'tcx>\n-{\n+                                          -> Supertraits<'cx, 'gcx, 'tcx> {\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// Iterator over def-ids of supertraits\n+// `TraitAliasExpander` iterator\n+///////////////////////////////////////////////////////////////////////////\n+\n+/// \"Trait alias expansion\" is the process of expanding a sequence of trait\n+/// references into another sequence by transitively following all trait\n+/// aliases. e.g. If you have bounds like `Foo + Send`, a trait alias\n+/// `trait Foo = Bar + Sync;`, and another trait alias\n+/// `trait Bar = Read + Write`, then the bounds would expand to\n+/// `Read + Write + Sync + Send`.\n+/// Expansion is done via a DFS (depth-first search), and the `visited` field\n+/// is used to avoid cycles.\n+pub struct TraitAliasExpander<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    stack: Vec<TraitAliasExpansionInfo<'tcx>>,\n+}\n+\n+/// Stores information about the expansion of a trait via a path of zero or more trait aliases.\n+#[derive(Debug, Clone)]\n+pub struct TraitAliasExpansionInfo<'tcx> {\n+    pub path: SmallVec<[(ty::PolyTraitRef<'tcx>, Span); 4]>,\n+}\n+\n+impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n+    fn new(trait_ref: ty::PolyTraitRef<'tcx>, span: Span) -> Self {\n+        Self {\n+            path: smallvec![(trait_ref, span)]\n+        }\n+    }\n+\n+    /// Adds diagnostic labels to `diag` for the expansion path of a trait through all intermediate\n+    /// trait aliases.\n+    pub fn label_with_exp_info(&self,\n+        diag: &mut DiagnosticBuilder<'_>,\n+        top_label: &str,\n+        use_desc: &str\n+    ) {\n+        diag.span_label(self.top().1, top_label);\n+        if self.path.len() > 1 {\n+            for (_, sp) in self.path.iter().rev().skip(1).take(self.path.len() - 2) {\n+                diag.span_label(*sp, format!(\"referenced here ({})\", use_desc));\n+            }\n+        }\n+        diag.span_label(self.bottom().1,\n+            format!(\"trait alias used in trait object type ({})\", use_desc));\n+    }\n+\n+    pub fn trait_ref(&self) -> &ty::PolyTraitRef<'tcx> {\n+        &self.top().0\n+    }\n+\n+    pub fn top(&self) -> &(ty::PolyTraitRef<'tcx>, Span) {\n+        self.path.last().unwrap()\n+    }\n+\n+    pub fn bottom(&self) -> &(ty::PolyTraitRef<'tcx>, Span) {\n+        self.path.first().unwrap()\n+    }\n+\n+    fn clone_and_push(&self, trait_ref: ty::PolyTraitRef<'tcx>, span: Span) -> Self {\n+        let mut path = self.path.clone();\n+        path.push((trait_ref, span));\n+\n+        Self {\n+            path\n+        }\n+    }\n+}\n+\n+pub fn expand_trait_aliases<'cx, 'gcx, 'tcx>(\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    trait_refs: impl IntoIterator<Item = (ty::PolyTraitRef<'tcx>, Span)>\n+) -> TraitAliasExpander<'cx, 'gcx, 'tcx> {\n+    let items: Vec<_> = trait_refs\n+        .into_iter()\n+        .map(|(trait_ref, span)| TraitAliasExpansionInfo::new(trait_ref, span))\n+        .collect();\n+    TraitAliasExpander { tcx, stack: items }\n+}\n+\n+impl<'cx, 'gcx, 'tcx> TraitAliasExpander<'cx, 'gcx, 'tcx> {\n+    /// If `item` is a trait alias and its predicate has not yet been visited, then expands `item`\n+    /// to the definition, pushes the resulting expansion onto `self.stack`, and returns `false`.\n+    /// Otherwise, immediately returns `true` if `item` is a regular trait, or `false` if it is a\n+    /// trait alias.\n+    /// The return value indicates whether `item` should be yielded to the user.\n+    fn expand(&mut self, item: &TraitAliasExpansionInfo<'tcx>) -> bool {\n+        let tcx = self.tcx;\n+        let trait_ref = item.trait_ref();\n+        let pred = trait_ref.to_predicate();\n+\n+        debug!(\"expand_trait_aliases: trait_ref={:?}\", trait_ref);\n+\n+        // Don't recurse if this bound is not a trait alias.\n+        let is_alias = tcx.is_trait_alias(trait_ref.def_id());\n+        if !is_alias {\n+            return true;\n+        }\n+\n+        // Don't recurse if this trait alias is already on the stack for the DFS search.\n+        let anon_pred = anonymize_predicate(tcx, &pred);\n+        if item.path.iter().rev().skip(1)\n+                .any(|(tr, _)| anonymize_predicate(tcx, &tr.to_predicate()) == anon_pred) {\n+            return false;\n+        }\n+\n+        // Get components of trait alias.\n+        let predicates = tcx.super_predicates_of(trait_ref.def_id());\n+\n+        let items = predicates.predicates\n+            .iter()\n+            .rev()\n+            .filter_map(|(pred, span)| {\n+                pred.subst_supertrait(tcx, &trait_ref)\n+                    .to_opt_poly_trait_ref()\n+                    .map(|trait_ref| item.clone_and_push(trait_ref, *span))\n+            });\n+        debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n+\n+        self.stack.extend(items);\n+\n+        false\n+    }\n+}\n+\n+impl<'cx, 'gcx, 'tcx> Iterator for TraitAliasExpander<'cx, 'gcx, 'tcx> {\n+    type Item = TraitAliasExpansionInfo<'tcx>;\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.stack.len(), None)\n+    }\n+\n+    fn next(&mut self) -> Option<TraitAliasExpansionInfo<'tcx>> {\n+        while let Some(item) = self.stack.pop() {\n+            if self.expand(&item) {\n+                return Some(item);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+// Iterator over def-IDs of supertraits\n+///////////////////////////////////////////////////////////////////////////\n \n pub struct SupertraitDefIds<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n@@ -298,8 +441,8 @@ impl<'cx, 'gcx, 'tcx> Iterator for SupertraitDefIds<'cx, 'gcx, 'tcx> {\n         self.stack.extend(\n             predicates.predicates\n                       .iter()\n-                      .filter_map(|(p, _)| p.to_opt_poly_trait_ref())\n-                      .map(|t| t.def_id())\n+                      .filter_map(|(pred, _)| pred.to_opt_poly_trait_ref())\n+                      .map(|trait_ref| trait_ref.def_id())\n                       .filter(|&super_def_id| visited.insert(super_def_id)));\n         Some(def_id)\n     }\n@@ -325,17 +468,12 @@ impl<'tcx, I: Iterator<Item = ty::Predicate<'tcx>>> Iterator for FilterToTraits<\n     type Item = ty::PolyTraitRef<'tcx>;\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n-        loop {\n-            match self.base_iterator.next() {\n-                None => {\n-                    return None;\n-                }\n-                Some(ty::Predicate::Trait(data)) => {\n-                    return Some(data.to_poly_trait_ref());\n-                }\n-                Some(_) => {}\n+        while let Some(pred) = self.base_iterator.next() {\n+            if let ty::Predicate::Trait(data) = pred {\n+                return Some(data.to_poly_trait_ref());\n             }\n         }\n+        None\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "4d242265e618fbebd0a2c1d3c127fcdbaf8a3f54", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1075,25 +1075,25 @@ impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Predicate<'tcx> {\n-    /// Corresponds to `where Foo: Bar<A,B,C>`. `Foo` here would be\n+    /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n     /// would be the type parameters.\n     Trait(PolyTraitPredicate<'tcx>),\n \n-    /// where `'a: 'b`\n+    /// `where 'a: 'b`\n     RegionOutlives(PolyRegionOutlivesPredicate<'tcx>),\n \n-    /// where `T: 'a`\n+    /// `where T: 'a`\n     TypeOutlives(PolyTypeOutlivesPredicate<'tcx>),\n \n-    /// where `<T as TraitRef>::Name == X`, approximately.\n+    /// `where <T as TraitRef>::Name == X`, approximately.\n     /// See the `ProjectionPredicate` struct for details.\n     Projection(PolyProjectionPredicate<'tcx>),\n \n     /// no syntax: `T` well-formed\n     WellFormed(Ty<'tcx>),\n \n-    /// trait must be object-safe\n+    /// Trait must be object-safe.\n     ObjectSafe(DefId),\n \n     /// No direct syntax. May be thought of as `where T: FnFoo<...>`\n@@ -1234,7 +1234,7 @@ impl<'tcx> TraitPredicate<'tcx> {\n         self.trait_ref.def_id\n     }\n \n-    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {\n+    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {\n         self.trait_ref.input_types()\n     }\n \n@@ -2400,7 +2400,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     pub fn discriminants(\n         &'a self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    ) -> impl Iterator<Item=(VariantIdx, Discr<'tcx>)> + Captures<'gcx> + 'a {\n+    ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'gcx> + 'a {\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut prev_discr = None::<Discr<'tcx>>;"}, {"sha": "be52b7e6451982d21aeb0df0ab282b7e2dff5ecf", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -100,8 +100,7 @@ pub use self::on_disk_cache::OnDiskCache;\n \n rustc_query_append! { [define_queries!][ <'tcx>\n     Other {\n-        /// Run analysis passes on the crate\n+        /// Runs analysis passes on the crate.\n         [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n-\n     },\n ]}"}, {"sha": "32d182edfdcdebbc231b0fbea5b131d141e1af1d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1502,7 +1502,6 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-\n     /// Adds a suggestion when a closure is invoked twice with a moved variable or when a closure\n     /// is moved after being invoked.\n     ///"}, {"sha": "1fdfcc84926f659f4ed1cd76702b51594a4f456f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1177,13 +1177,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 );\n             }\n             ast::ImplItemKind::Type(ref ty) => {\n-                // FIXME uses of the assoc type should ideally point to this\n+                // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n                 self.visit_ty(ty)\n             }\n             ast::ImplItemKind::Existential(ref bounds) => {\n-                // FIXME uses of the assoc type should ideally point to this\n+                // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n                 for bound in bounds.iter() {\n@@ -1216,7 +1216,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let hir_id = self.tcx.hir().node_to_hir_id(id);\n         let access = access_from!(self.save_ctxt, root_item, hir_id);\n \n-        // The parent def id of a given use tree is always the enclosing item.\n+        // The parent `DefId` of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n             .and_then(|id| self.save_ctxt.tcx.parent(id))\n             .map(id_from_def_id);"}, {"sha": "4110a55840196e950e694b40e9f07b2bba74231b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 102, "deletions": 109, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -648,14 +648,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                             // careful!\n                             if default_needs_object_self(param) {\n                                 struct_span_err!(tcx.sess, span, E0393,\n-                                                    \"the type parameter `{}` must be explicitly \\\n-                                                     specified\",\n-                                                    param.name)\n-                                    .span_label(span,\n-                                                format!(\"missing reference to `{}`\", param.name))\n-                                    .note(&format!(\"because of the default `Self` reference, \\\n-                                                    type parameters must be specified on object \\\n-                                                    types\"))\n+                                    \"the type parameter `{}` must be explicitly specified\",\n+                                    param.name\n+                                )\n+                                    .span_label(span, format!(\n+                                        \"missing reference to `{}`\", param.name))\n+                                    .note(&format!(\n+                                        \"because of the default `Self` reference, type parameters \\\n+                                         must be specified on object types\"))\n                                     .emit();\n                                 tcx.types.err.into()\n                             } else {\n@@ -702,7 +702,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n-    /// bound to a valid trait type. Returns the def_id for the defining trait.\n+    /// bound to a valid trait type. Returns the `DefId` of the defining trait.\n     /// The type _cannot_ be a type other than a trait type.\n     ///\n     /// If the `projections` argument is `None`, then assoc type bindings like `Foo<T = X>`\n@@ -973,60 +973,81 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     {\n         let tcx = self.tcx();\n \n-        if trait_bounds.is_empty() {\n-            span_err!(tcx.sess, span, E0224,\n-                      \"at least one non-builtin trait is required for an object type\");\n-            return tcx.types.err;\n-        }\n-\n         let mut projection_bounds = Vec::new();\n+        let mut potential_assoc_types = Vec::new();\n         let dummy_self = self.tcx().types.trait_object_dummy_self;\n-        let (principal, potential_assoc_types) = self.instantiate_poly_trait_ref(\n-            &trait_bounds[0],\n-            dummy_self,\n-            &mut projection_bounds,\n-        );\n-        debug!(\"principal: {:?}\", principal);\n-\n-        for trait_bound in trait_bounds[1..].iter() {\n-            // sanity check for non-principal trait bounds\n-            self.instantiate_poly_trait_ref(trait_bound,\n-                                            dummy_self,\n-                                            &mut vec![]);\n+        // FIXME: we want to avoid collecting into a `Vec` here, but simply cloning the iterator is\n+        // not straightforward due to the borrow checker.\n+        let bound_trait_refs: Vec<_> = trait_bounds\n+            .iter()\n+            .rev()\n+            .map(|trait_bound| {\n+                let (trait_ref, cur_potential_assoc_types) = self.instantiate_poly_trait_ref(\n+                    trait_bound,\n+                    dummy_self,\n+                    &mut projection_bounds\n+                );\n+                potential_assoc_types.extend(cur_potential_assoc_types.into_iter().flatten());\n+                (trait_ref, trait_bound.span)\n+            })\n+            .collect();\n+\n+        // Expand trait aliases recursively and check that only one regular (non-auto) trait\n+        // is used and no 'maybe' bounds are used.\n+        let expanded_traits = traits::expand_trait_aliases(tcx, bound_trait_refs.iter().cloned());\n+        let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n+            expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n+        if regular_traits.len() > 1 {\n+            let first_trait = &regular_traits[0];\n+            let additional_trait = &regular_traits[1];\n+            let mut err = struct_span_err!(tcx.sess, additional_trait.bottom().1, E0225,\n+                \"only auto traits can be used as additional traits in a trait object\"\n+            );\n+            additional_trait.label_with_exp_info(&mut err,\n+                \"additional non-auto trait\", \"additional use\");\n+            first_trait.label_with_exp_info(&mut err,\n+                \"first non-auto trait\", \"first use\");\n+            err.emit();\n         }\n \n-        let (mut auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n-\n-        if !trait_bounds.is_empty() {\n-            let b = &trait_bounds[0];\n-            let span = b.trait_ref.path.span;\n-            struct_span_err!(self.tcx().sess, span, E0225,\n-                \"only auto traits can be used as additional traits in a trait object\")\n-                .span_label(span, \"non-auto additional trait\")\n-                .emit();\n+        if regular_traits.is_empty() && auto_traits.is_empty() {\n+            span_err!(tcx.sess, span, E0224,\n+                \"at least one non-builtin trait is required for an object type\");\n+            return tcx.types.err;\n         }\n \n         // Check that there are no gross object safety violations;\n         // most importantly, that the supertraits don't contain `Self`,\n         // to avoid ICEs.\n-        let object_safety_violations =\n-            tcx.global_tcx().astconv_object_safety_violations(principal.def_id());\n-        if !object_safety_violations.is_empty() {\n-            tcx.report_object_safety_error(span, principal.def_id(), object_safety_violations)\n-                .map(|mut err| err.emit());\n-            return tcx.types.err;\n+        for item in &regular_traits {\n+            let object_safety_violations =\n+                tcx.global_tcx().astconv_object_safety_violations(item.trait_ref().def_id());\n+            if !object_safety_violations.is_empty() {\n+                tcx.report_object_safety_error(\n+                    span,\n+                    item.trait_ref().def_id(),\n+                    object_safety_violations\n+                )\n+                    .map(|mut err| err.emit());\n+                return tcx.types.err;\n+            }\n         }\n \n         // Use a `BTreeSet` to keep output in a more consistent order.\n         let mut associated_types = BTreeSet::default();\n \n-        for tr in traits::elaborate_trait_ref(tcx, principal) {\n-            debug!(\"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\", tr);\n-            match tr {\n+        let regular_traits_refs = bound_trait_refs\n+            .into_iter()\n+            .filter(|(trait_ref, _)| !tcx.trait_is_auto(trait_ref.def_id()))\n+            .map(|(trait_ref, _)| trait_ref);\n+        for trait_ref in traits::elaborate_trait_refs(tcx, regular_traits_refs) {\n+            debug!(\"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\", trait_ref);\n+            match trait_ref {\n                 ty::Predicate::Trait(pred) => {\n-                    associated_types.extend(tcx.associated_items(pred.def_id())\n-                                    .filter(|item| item.kind == ty::AssociatedKind::Type)\n-                                    .map(|item| item.def_id));\n+                    associated_types\n+                        .extend(tcx.associated_items(pred.def_id())\n+                        .filter(|item| item.kind == ty::AssociatedKind::Type)\n+                        .map(|item| item.def_id));\n                 }\n                 ty::Predicate::Projection(pred) => {\n                     // A `Self` within the original bound will be substituted with a\n@@ -1035,7 +1056,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                         pred.skip_binder().ty.walk().any(|t| t == dummy_self);\n \n                     // If the projection output contains `Self`, force the user to\n-                    // elaborate it explicitly to avoid a bunch of complexity.\n+                    // elaborate it explicitly to avoid a lot of complexity.\n                     //\n                     // The \"classicaly useful\" case is the following:\n                     // ```\n@@ -1044,14 +1065,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     //     }\n                     // ```\n                     //\n-                    // Here, the user could theoretically write `dyn MyTrait<Output=X>`,\n+                    // Here, the user could theoretically write `dyn MyTrait<Output = X>`,\n                     // but actually supporting that would \"expand\" to an infinitely-long type\n-                    // `fix $ \u03c4 \u2192 dyn MyTrait<MyOutput=X, Output=<\u03c4 as MyTrait>::MyOutput`.\n+                    // `fix $ \u03c4 \u2192 dyn MyTrait<MyOutput = X, Output = <\u03c4 as MyTrait>::MyOutput`.\n                     //\n-                    // Instead, we force the user to write `dyn MyTrait<MyOutput=X, Output=X>`,\n+                    // Instead, we force the user to write `dyn MyTrait<MyOutput = X, Output = X>`,\n                     // which is uglier but works. See the discussion in #56288 for alternatives.\n                     if !references_self {\n-                        // Include projections defined on supertraits,\n+                        // Include projections defined on supertraits.\n                         projection_bounds.push((pred, DUMMY_SP))\n                     }\n                 }\n@@ -1081,20 +1102,18 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 if associated_types.len() == 1 { \"\" } else { \"s\" },\n                 names,\n             );\n-            let mut suggest = false;\n-            let mut potential_assoc_types_spans = vec![];\n-            if let Some(potential_assoc_types) = potential_assoc_types {\n+            let (suggest, potential_assoc_types_spans) =\n                 if potential_assoc_types.len() == associated_types.len() {\n-                    // Only suggest when the amount of missing associated types is equals to the\n+                    // Only suggest when the amount of missing associated types equals the number of\n                     // extra type arguments present, as that gives us a relatively high confidence\n                     // that the user forgot to give the associtated type's name. The canonical\n                     // example would be trying to use `Iterator<isize>` instead of\n-                    // `Iterator<Item=isize>`.\n-                    suggest = true;\n-                    potential_assoc_types_spans = potential_assoc_types;\n-                }\n-            }\n-            let mut suggestions = vec![];\n+                    // `Iterator<Item = isize>`.\n+                    (true, potential_assoc_types)\n+                } else {\n+                    (false, Vec::new())\n+                };\n+            let mut suggestions = Vec::new();\n             for (i, item_def_id) in associated_types.iter().enumerate() {\n                 let assoc_item = tcx.associated_item(*item_def_id);\n                 err.span_label(\n@@ -1130,9 +1149,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             err.emit();\n         }\n \n+        // De-duplicate auto traits so that, e.g., `dyn Trait + Send + Send` is the same as\n+        // `dyn Trait + Send`.\n+        auto_traits.sort_by_key(|i| i.trait_ref().def_id());\n+        auto_traits.dedup_by_key(|i| i.trait_ref().def_id());\n+        debug!(\"regular_traits: {:?}\", regular_traits);\n+        debug!(\"auto_traits: {:?}\", auto_traits);\n+\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n-        let existential_principal = principal.map_bound(|trait_ref| {\n-            self.trait_ref_to_existential(trait_ref)\n+        let existential_trait_refs = regular_traits.iter().map(|i| {\n+            i.trait_ref().map_bound(|trait_ref| self.trait_ref_to_existential(trait_ref))\n         });\n         let existential_projections = projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n@@ -1145,19 +1171,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             })\n         });\n \n-        // Dedup auto traits so that `dyn Trait + Send + Send` is the same as `dyn Trait + Send`.\n-        auto_traits.sort();\n-        auto_traits.dedup();\n-\n-        // Calling `skip_binder` is okay, because the predicates are re-bound.\n-        let principal = if tcx.trait_is_auto(existential_principal.def_id()) {\n-            ty::ExistentialPredicate::AutoTrait(existential_principal.def_id())\n-        } else {\n-            ty::ExistentialPredicate::Trait(*existential_principal.skip_binder())\n-        };\n+        // Calling `skip_binder` is okay because the predicates are re-bound.\n+        let regular_trait_predicates = existential_trait_refs.map(\n+            |trait_ref| ty::ExistentialPredicate::Trait(*trait_ref.skip_binder()));\n+        let auto_trait_predicates = auto_traits.into_iter().map(\n+            |trait_ref| ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()));\n         let mut v =\n-            iter::once(principal)\n-            .chain(auto_traits.into_iter().map(ty::ExistentialPredicate::AutoTrait))\n+            regular_trait_predicates\n+            .chain(auto_trait_predicates)\n             .chain(existential_projections\n                 .map(|x| ty::ExistentialPredicate::Projection(*x.skip_binder())))\n             .collect::<SmallVec<[_; 8]>>();\n@@ -1175,14 +1196,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else {\n                     self.re_infer(span, None).unwrap_or_else(|| {\n                         span_err!(tcx.sess, span, E0228,\n-                                  \"the lifetime bound for this object type cannot be deduced \\\n-                                   from context; please supply an explicit bound\");\n+                            \"the lifetime bound for this object type cannot be deduced \\\n+                             from context; please supply an explicit bound\");\n                         tcx.lifetimes.re_static\n                     })\n                 }\n             })\n         };\n-\n         debug!(\"region_bound: {:?}\", region_bound);\n \n         let ty = tcx.mk_dynamic(existential_predicates, region_bound);\n@@ -1220,7 +1240,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n-    // given by `assoc_name`. `ty_param_def_id` is the `DefId` for the type parameter\n+    // given by `assoc_name`. `ty_param_def_id` is the `DefId` of the type parameter\n     // This function will fail if there are no suitable bounds or there is\n     // any ambiguity.\n     fn find_bound_for_assoc_item(&self,\n@@ -2097,33 +2117,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n }\n \n-/// Divides a list of general trait bounds into two groups: auto traits (e.g., Sync and Send) and\n-/// the remaining general trait bounds.\n-fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                         trait_bounds: &'b [hir::PolyTraitRef])\n-    -> (Vec<DefId>, Vec<&'b hir::PolyTraitRef>)\n-{\n-    let (auto_traits, trait_bounds): (Vec<_>, _) = trait_bounds.iter().partition(|bound| {\n-        // Checks whether `trait_did` is an auto trait and adds it to `auto_traits` if so.\n-        match bound.trait_ref.path.res {\n-            Res::Def(DefKind::Trait, trait_did) if tcx.trait_is_auto(trait_did) => {\n-                true\n-            }\n-            _ => false\n-        }\n-    });\n-\n-    let auto_traits = auto_traits.into_iter().map(|tr| {\n-        if let Res::Def(DefKind::Trait, trait_did) = tr.trait_ref.path.res {\n-            trait_did\n-        } else {\n-            unreachable!()\n-        }\n-    }).collect::<Vec<_>>();\n-\n-    (auto_traits, trait_bounds)\n-}\n-\n // A helper struct for conveniently grouping a set of bounds which we pass to\n // and return from functions in multiple places.\n #[derive(PartialEq, Eq, Clone, Debug)]\n@@ -2138,7 +2131,7 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n     pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, param_ty: Ty<'tcx>)\n                       -> Vec<(ty::Predicate<'tcx>, Span)>\n     {\n-        // If it could be sized, and is, add the sized predicate.\n+        // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             tcx.lang_items().sized_trait().map(|sized| {\n                 let trait_ref = ty::TraitRef {"}, {"sha": "590ae9d46e8db42385f9e5856624d96fd69297fc", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -758,7 +758,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_inherent_candidates_from_param(&mut self, param_ty: ty::ParamTy) {\n-        // FIXME -- Do we want to commit to this behavior for param bounds?\n+        // FIXME: do we want to commit to this behavior for param bounds?\n \n         let bounds = self.param_env\n             .caller_bounds"}, {"sha": "7e7a8d59266737920c986d7ac5eddeca96d95ad5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1019,7 +1019,7 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n         .iter()\n         .map(|(p, _)| *p)\n         .collect();\n-    // Check elaborated bounds\n+    // Check elaborated bounds.\n     let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n \n     for pred in implied_obligations {"}, {"sha": "7adf86a99bd438765fbbeb46aa455668071cac8e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -684,9 +684,9 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n     tcx.alloc_adt_def(def_id, kind, variants, repr)\n }\n \n-/// Ensures that the super-predicates of the trait with `DefId`\n-/// trait_def_id are converted and stored. This also ensures that\n-/// the transitive super-predicates are converted;\n+/// Ensures that the super-predicates of the trait with a `DefId`\n+/// of `trait_def_id` are converted and stored. This also ensures that\n+/// the transitive super-predicates are converted.\n fn super_predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_def_id: DefId,\n@@ -707,15 +707,15 @@ fn super_predicates_of<'a, 'tcx>(\n \n     let icx = ItemCtxt::new(tcx, trait_def_id);\n \n-    // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo : Bar + Zed`.\n+    // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n     let self_param_ty = tcx.mk_self_type();\n     let superbounds1 = compute_bounds(&icx, self_param_ty, bounds, SizedByDefault::No, item.span);\n \n     let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n-    // Convert any explicit superbounds in the where clause,\n-    // e.g., `trait Foo where Self : Bar`.\n-    // In the case of trait aliases, however, we include all bounds in the where clause,\n+    // Convert any explicit superbounds in the where-clause,\n+    // e.g., `trait Foo where Self: Bar`.\n+    // In the case of trait aliases, however, we include all bounds in the where-clause,\n     // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n     // as one of its \"superpredicates\".\n     let is_trait_alias = tcx.is_trait_alias(trait_def_id);"}, {"sha": "da45bc1d9f5c5cfa87a506c864a92cde2b0598b0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -2129,10 +2129,10 @@ pub struct TraitRef {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PolyTraitRef {\n-    /// The `'a` in `<'a> Foo<&'a T>`\n+    /// The `'a` in `<'a> Foo<&'a T>`.\n     pub bound_generic_params: Vec<GenericParam>,\n \n-    /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`\n+    /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.\n     pub trait_ref: TraitRef,\n \n     pub span: Span,"}, {"sha": "85724cb7c6e851d1a20f8b441f9ba7ebe81c1fa5", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -6,7 +6,7 @@ LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n    |\n    = note: expected type `u32`\n               found type `i32`\n-   = note: required for the cast to the object type `dyn I32Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "6307af5d725d139c0270ec9232ef643566b94a87", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -2,7 +2,12 @@ error[E0225]: only auto traits can be used as additional traits in a trait objec\n   --> $DIR/bad-sized.rs:4:24\n    |\n LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                        ^^^^^ non-auto additional trait\n+   |                -----   ^^^^^\n+   |                |       |\n+   |                |       additional non-auto trait\n+   |                |       trait alias used in trait object type (additional use)\n+   |                first non-auto trait\n+   |                trait alias used in trait object type (first use)\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:12"}, {"sha": "b50f68e64516f9ee6a9f19e25cef36537dc61a6b", "filename": "src/test/ui/error-codes/E0225.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,4 +1,10 @@\n+#![feature(trait_alias)]\n+\n+trait Foo = std::io::Read + std::io::Write;\n+\n fn main() {\n-    let _: Box<std::io::Read + std::io::Write>;\n+    let _: Box<dyn std::io::Read + std::io::Write>;\n+    //~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+    let _: Box<dyn Foo>;\n     //~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n }"}, {"sha": "c7a66c327f1c177807e0322f8c372c5f080187a1", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,9 +1,28 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/E0225.rs:2:32\n+  --> $DIR/E0225.rs:6:36\n    |\n-LL |     let _: Box<std::io::Read + std::io::Write>;\n-   |                                ^^^^^^^^^^^^^^ non-auto additional trait\n+LL |     let _: Box<dyn std::io::Read + std::io::Write>;\n+   |                    -------------   ^^^^^^^^^^^^^^\n+   |                    |               |\n+   |                    |               additional non-auto trait\n+   |                    |               trait alias used in trait object type (additional use)\n+   |                    first non-auto trait\n+   |                    trait alias used in trait object type (first use)\n \n-error: aborting due to previous error\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/E0225.rs:8:20\n+   |\n+LL | trait Foo = std::io::Read + std::io::Write;\n+   |             -------------   -------------- additional non-auto trait\n+   |             |\n+   |             first non-auto trait\n+...\n+LL |     let _: Box<dyn Foo>;\n+   |                    ^^^\n+   |                    |\n+   |                    trait alias used in trait object type (additional use)\n+   |                    trait alias used in trait object type (first use)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0225`."}, {"sha": "322136d35cad156b37ed86fbd5b1040676dc8da9", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,34 +1,48 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:3:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n-LL | type Test = Add +\n+LL |             Sub;\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:6:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n-LL |             Sub;\n+LL | type Test = Add +\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/issue-22560.rs:6:13\n    |\n+LL | type Test = Add +\n+   |             ---\n+   |             |\n+   |             first non-auto trait\n+   |             trait alias used in trait object type (first use)\n+...\n LL |             Sub;\n-   |             ^^^ non-auto additional trait\n+   |             ^^^\n+   |             |\n+   |             additional non-auto trait\n+   |             trait alias used in trait object type (additional use)\n \n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n+error[E0191]: the value of the associated types `Output` (from the trait `std::ops::Add`), `Output` (from the trait `std::ops::Sub`) must be specified\n   --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = Add +\n    |  _____________^\n+   | |_____________|\n+   | |\n LL | |\n LL | |\n LL | |             Sub;\n-   | |_______________^ associated type `Output` must be specified\n+   | |               ^\n+   | |_______________|\n+   | |_______________associated type `Output` must be specified\n+   |                 associated type `Output` must be specified\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cde4123dc3f40a462cd3b5b35d751803e99313cc", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -2,7 +2,12 @@ error[E0225]: only auto traits can be used as additional traits in a trait objec\n   --> $DIR/issue-32963.rs:8:25\n    |\n LL |     size_of_copy::<Misc+Copy>();\n-   |                         ^^^^ non-auto additional trait\n+   |                    ---- ^^^^\n+   |                    |    |\n+   |                    |    additional non-auto trait\n+   |                    |    trait alias used in trait object type (additional use)\n+   |                    first non-auto trait\n+   |                    trait alias used in trait object type (first use)\n \n error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5"}, {"sha": "02ed45c656f1c533ccf9faa8ee738906e62b5678", "filename": "src/test/ui/maybe-bounds.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,6 +1,9 @@\n-trait Tr: ?Sized {} //~ ERROR `?Trait` is not permitted in supertraits\n+trait Tr: ?Sized {}\n+//~^ ERROR `?Trait` is not permitted in supertraits\n \n-type A1 = Tr + (?Sized); //~ ERROR `?Trait` is not permitted in trait object types\n-type A2 = for<'a> Tr + (?Sized); //~ ERROR `?Trait` is not permitted in trait object types\n+type A1 = dyn Tr + (?Sized);\n+//~^ ERROR `?Trait` is not permitted in trait object types\n+type A2 = dyn for<'a> Tr + (?Sized);\n+//~^ ERROR `?Trait` is not permitted in trait object types\n \n fn main() {}"}, {"sha": "1d823b6acb2839b22d182ded2fef2dde28b15de8", "filename": "src/test/ui/maybe-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -7,16 +7,16 @@ LL | trait Tr: ?Sized {}\n    = note: traits are `?Sized` by default\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:3:16\n+  --> $DIR/maybe-bounds.rs:4:20\n    |\n-LL | type A1 = Tr + (?Sized);\n-   |                ^^^^^^^^\n+LL | type A1 = dyn Tr + (?Sized);\n+   |                    ^^^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:4:24\n+  --> $DIR/maybe-bounds.rs:6:28\n    |\n-LL | type A2 = for<'a> Tr + (?Sized);\n-   |                        ^^^^^^^^\n+LL | type A2 = dyn for<'a> Tr + (?Sized);\n+   |                            ^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9ac10cd13279b3152748fb6fb135f6104c17402d", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-    //~^ ERROR `?Trait` is not permitted in trait object types\n-    //~| ERROR use of undeclared lifetime name `'a`\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+    //~| ERROR `?Trait` is not permitted in trait object types\n }"}, {"sha": "379637401179b100c6d26947b0fab085b864932c", "filename": "src/test/ui/traits/trait-alias-object.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822c261f5c94a41eb725755fdda7ca6efbda2/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822c261f5c94a41eb725755fdda7ca6efbda2/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs?ref=1cc822c261f5c94a41eb725755fdda7ca6efbda2", "patch": "@@ -1,9 +0,0 @@\n-#![feature(trait_alias)]\n-\n-trait EqAlias = Eq;\n-trait IteratorAlias = Iterator;\n-\n-fn main() {\n-    let _: &dyn EqAlias = &123; //~ ERROR `EqAlias` cannot be made into an object\n-    let _: &dyn IteratorAlias = &vec![123].into_iter(); //~ ERROR must be specified\n-}"}, {"sha": "9e56b87e088133d6e632ec47f25b066698297922", "filename": "src/test/ui/traits/trait-alias/auxiliary/trait_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/auxiliary/trait_alias.rs"}, {"sha": "428ce5102bad89415067d057c1a4da107e5b1c91", "filename": "src/test/ui/traits/trait-alias/trait-alias-bounds.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n use std::marker::PhantomData;", "previous_filename": "src/test/run-pass/traits/trait-alias-bounds.rs"}, {"sha": "259fc4fa5d1ce9ef2ce92eeb1df727027bd290dd", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-cross-crate.rs"}, {"sha": "972d213ac8f8f30a79de429403850aa998dfbeb9", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-cross-crate.stderr"}, {"sha": "6e35793a0669a9f593bfb8ceabc2e16b9f373e97", "filename": "src/test/ui/traits/trait-alias/trait-alias-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-impl.rs"}, {"sha": "301db4fb71c65b88572a249ee3b5fc20bc824ad0", "filename": "src/test/ui/traits/trait-alias/trait-alias-impl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-impl.stderr"}, {"sha": "3dfcf03ce79da7193881532f9e7df8e48ce96e71", "filename": "src/test/ui/traits/trait-alias/trait-alias-maybe-bound.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,29 @@\n+// compile-pass\n+\n+// Test that `dyn ... + ?Sized + ...` resulting from the expansion of trait aliases is okay.\n+\n+#![feature(trait_alias)]\n+\n+trait Foo {}\n+\n+trait S = ?Sized;\n+\n+// Nest a couple of levels deep:\n+trait _0 = S;\n+trait _1 = _0;\n+\n+// Straight list expansion:\n+type _T0 = dyn _1 + Foo;\n+\n+// In second position:\n+type _T1 = dyn Foo + _1;\n+\n+// ... and with an auto trait:\n+type _T2 = dyn Foo + Send + _1;\n+\n+// Twice:\n+trait _2 = _1 + _1;\n+\n+type _T3 = dyn _2 + Foo;\n+\n+fn main() {}"}, {"sha": "afd8400e2305016693015d94d26a3390fe0dfa57", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,126 @@\n+// The purpose of this test is to demonstrate that duplicating object safe traits\n+// that are not auto traits is rejected with trait aliases even though one could\n+// reasonably accept this.\n+\n+#![feature(trait_alias)]\n+\n+use std::marker::Unpin;\n+\n+// Some arbitrary object-safe trait:\n+trait Obj {}\n+\n+// Nest a few levels deep:\n+trait _0 = Obj;\n+trait _1 = _0;\n+\n+type _T00 = dyn _0 + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T01 = dyn _1 + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T02 = dyn _1 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T03 = dyn Obj + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T04 = dyn _1 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more and in weird ways:\n+\n+trait _2 = _0 + _1;\n+trait _3 = Obj;\n+trait _4 = _3;\n+\n+type _T10 = dyn _2 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T11 = dyn _3 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T12 = dyn Obj + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T13 = dyn _2 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T14 = dyn _1 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T15 = dyn _3 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T16 = dyn _1 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T17 = dyn _4 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Include auto traits:\n+\n+trait _5 = Obj + Send;\n+\n+type _T20 = dyn _5 + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T21 = dyn Obj + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T22 = dyn _5 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T23 = dyn _5 + Send + Sync + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Also nest:\n+\n+trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+\n+type _T30 = dyn _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T31 = dyn _6 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T32 = dyn Send + _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more:\n+\n+trait _7 = _5 + Sync;\n+trait _8 = Unpin + _7;\n+\n+type _T40 = dyn _8 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T41 = dyn Obj + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T42 = dyn _8 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T43 = dyn _4 + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T44 = dyn _4 + Send + Sync + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Take higher ranked types into account.\n+\n+// Note that `'a` and `'b` are intentionally different to make sure we consider\n+// them semantically the same.\n+trait ObjL<'l> {}\n+trait _9 = for<'a> ObjL<'a>;\n+trait _10 = for<'b> ObjL<'b>;\n+type _T50 = _9 + _10;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+trait ObjT<T> {}\n+trait _11 = ObjT<for<'a> fn(&'a u8)>;\n+trait _12 = ObjT<for<'b> fn(&'b u8)>;\n+type _T60 = _11 + _12;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "eb667c9522ce118a824d35fc4b05f9d1076341f0", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.stderr", "status": "added", "additions": 458, "deletions": 0, "changes": 458, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,458 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:16:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | type _T00 = dyn _0 + _0;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:19:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T01 = dyn _1 + _0;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:22:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+...\n+LL | type _T02 = dyn _1 + _1;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:25:23\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T03 = dyn Obj + _1;\n+   |                 ---   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:28:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T04 = dyn _1 + Obj;\n+   |                 --   ^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:37:17\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _2 = _0 + _1;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T10 = dyn _2 + _3;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:40:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _2 = _0 + _1;\n+   |            -- referenced here (additional use)\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T11 = dyn _3 + _2;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:43:23\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _2 = _0 + _1;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T12 = dyn Obj + _2;\n+   |                 ---   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:46:17\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _2 = _0 + _1;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T13 = dyn _2 + Obj;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:49:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | type _T14 = dyn _1 + _3;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:52:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T15 = dyn _3 + _1;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:55:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T16 = dyn _1 + _4;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:58:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T17 = dyn _4 + _1;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:65:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | \n+LL | type _T20 = dyn _5 + _5;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:68:23\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | type _T21 = dyn Obj + _5;\n+   |                 ---   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:71:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T22 = dyn _5 + Obj;\n+   |                 --   ^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:74:36\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T23 = dyn _5 + Send + Sync + Obj;\n+   |                 --                 ^^^\n+   |                 |                  |\n+   |                 |                  additional non-auto trait\n+   |                 |                  trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:81:17\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+LL | \n+LL | type _T30 = dyn _6;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:84:17\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T31 = dyn _6 + Send;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:87:24\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T32 = dyn Send + _6;\n+   |                        ^^\n+   |                        |\n+   |                        trait alias used in trait object type (additional use)\n+   |                        trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:95:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here (first use)\n+LL | \n+LL | type _T40 = dyn _8 + Obj;\n+   |                 --   ^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:98:23\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here (additional use)\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here (additional use)\n+...\n+LL | type _T41 = dyn Obj + _8;\n+   |                 ---   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:101:22\n+   |\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here (first use)\n+...\n+LL | type _T42 = dyn _8 + _4;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:104:22\n+   |\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here (additional use)\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here (additional use)\n+...\n+LL | type _T43 = dyn _4 + _8;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:107:36\n+   |\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here (additional use)\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here (additional use)\n+...\n+LL | type _T44 = dyn _4 + Send + Sync + _8;\n+   |                 --                 ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:117:18\n+   |\n+LL | trait _9 = for<'a> ObjL<'a>;\n+   |            ---------------- first non-auto trait\n+LL | trait _10 = for<'b> ObjL<'b>;\n+   |             ---------------- additional non-auto trait\n+LL | type _T50 = _9 + _10;\n+   |             --   ^^^ trait alias used in trait object type (additional use)\n+   |             |\n+   |             trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:123:19\n+   |\n+LL | trait _11 = ObjT<for<'a> fn(&'a u8)>;\n+   |             ------------------------ first non-auto trait\n+LL | trait _12 = ObjT<for<'b> fn(&'b u8)>;\n+   |             ------------------------ additional non-auto trait\n+LL | type _T60 = _11 + _12;\n+   |             ---   ^^^ trait alias used in trait object type (additional use)\n+   |             |\n+   |             trait alias used in trait object type (first use)\n+\n+error: aborting due to 27 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "4dad8c0f87349346da21abf49acd5e489031e52c", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,121 @@\n+// The purpose of this test is to demonstrate that trait alias expansion\n+// preserves the rule that `dyn Trait` may only reference one non-auto trait.\n+\n+#![feature(trait_alias)]\n+\n+use std::marker::Unpin;\n+\n+// Some arbitrary object-safe traits:\n+trait ObjA {}\n+trait ObjB {}\n+\n+// Nest a few levels deep:\n+trait _0 = ObjA;\n+trait _1 = _0;\n+\n+type _T00 = dyn _0 + ObjB;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T01 = dyn ObjB + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T02 = dyn ObjB + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T03 = dyn _1 + ObjB;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more and in weird ways:\n+\n+trait _2 = ObjB;\n+trait _3 = _2;\n+trait _4 = _3;\n+\n+type _T10 = dyn _2 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T11 = dyn _3 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T12 = dyn _2 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T13 = dyn _4 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Include auto traits:\n+\n+trait _5 = Sync + ObjB + Send;\n+\n+type _T20 = dyn _5 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T21 = dyn _1 + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T22 = dyn _5 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T23 = dyn ObjA + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T24 = dyn Send + _5 + _1 + Sync;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T25 = dyn _1 + Sync + _5 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T26 = dyn Sync + Send + _5 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T27 = dyn Send + Sync + ObjA + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Also nest:\n+\n+trait _6 = _1 + _5;\n+trait _7 = _6;\n+trait _8 = _7;\n+\n+type _T30 = dyn _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T31 = dyn _6 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T32 = dyn Send + _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T33 = dyn _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T34 = dyn _8 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T35 = dyn Send + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more:\n+\n+trait _9 = _5 + Sync;\n+trait _10 = Unpin + _9;\n+\n+type _T40 = dyn _10 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T41 = dyn ObjA + _10;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T42 = dyn _10 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T43 = dyn Send + _10 + Sync + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T44 = dyn ObjA + _10 + Send + Sync;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T45 = dyn Sync + Send + _10 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "15685a228833d69184a4e27e11748e519f244765", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.stderr", "status": "added", "additions": 513, "deletions": 0, "changes": 513, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,513 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:16:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | type _T00 = dyn _0 + ObjB;\n+   |                 --   ^^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:19:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+...\n+LL | type _T01 = dyn ObjB + _0;\n+   |                 ----   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:22:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T02 = dyn ObjB + _1;\n+   |                 ----   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:25:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T03 = dyn _1 + ObjB;\n+   |                 --   ^^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:34:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T10 = dyn _2 + _3;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:37:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T11 = dyn _3 + _2;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:40:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here (additional use)\n+LL | trait _4 = _3;\n+   |            -- referenced here (additional use)\n+...\n+LL | type _T12 = dyn _2 + _4;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:43:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here (first use)\n+LL | trait _4 = _3;\n+   |            -- referenced here (first use)\n+...\n+LL | type _T13 = dyn _4 + _2;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:50:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+LL | \n+LL | type _T20 = dyn _5 + _1;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:53:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T21 = dyn _1 + _5;\n+   |                 --   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:56:22\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T22 = dyn _5 + ObjA;\n+   |                 --   ^^^^\n+   |                 |    |\n+   |                 |    additional non-auto trait\n+   |                 |    trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:59:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T23 = dyn ObjA + _5;\n+   |                 ----   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:62:29\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T24 = dyn Send + _5 + _1 + Sync;\n+   |                        --   ^^ trait alias used in trait object type (additional use)\n+   |                        |\n+   |                        trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:65:29\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T25 = dyn _1 + Sync + _5 + Send;\n+   |                 --          ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:68:36\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T26 = dyn Sync + Send + _5 + ObjA;\n+   |                               --   ^^^^\n+   |                               |    |\n+   |                               |    additional non-auto trait\n+   |                               |    trait alias used in trait object type (additional use)\n+   |                               trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:71:38\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T27 = dyn Send + Sync + ObjA + _5;\n+   |                               ----   ^^ trait alias used in trait object type (additional use)\n+   |                               |\n+   |                               first non-auto trait\n+   |                               trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:80:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T30 = dyn _6;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:83:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T31 = dyn _6 + Send;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:86:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+...\n+LL | type _T32 = dyn Send + _6;\n+   |                        ^^\n+   |                        |\n+   |                        trait alias used in trait object type (additional use)\n+   |                        trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:89:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+LL | trait _7 = _6;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+LL | trait _8 = _7;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+...\n+LL | type _T33 = dyn _8;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:92:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+LL | trait _7 = _6;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+LL | trait _8 = _7;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+...\n+LL | type _T34 = dyn _8 + Send;\n+   |                 ^^\n+   |                 |\n+   |                 trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:95:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (first use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |            --   -- referenced here (additional use)\n+   |            |\n+   |            referenced here (first use)\n+LL | trait _7 = _6;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+LL | trait _8 = _7;\n+   |            --\n+   |            |\n+   |            referenced here (additional use)\n+   |            referenced here (first use)\n+...\n+LL | type _T35 = dyn Send + _8;\n+   |                        ^^\n+   |                        |\n+   |                        trait alias used in trait object type (additional use)\n+   |                        trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:103:23\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (first use)\n+LL | \n+LL | type _T40 = dyn _10 + ObjA;\n+   |                 ---   ^^^^\n+   |                 |     |\n+   |                 |     additional non-auto trait\n+   |                 |     trait alias used in trait object type (additional use)\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:106:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (additional use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (additional use)\n+...\n+LL | type _T41 = dyn ObjA + _10;\n+   |                 ----   ^^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:109:23\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (first use)\n+...\n+LL | type _T42 = dyn _10 + _1;\n+   |                 ---   ^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:112:37\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (first use)\n+...\n+LL | type _T43 = dyn Send + _10 + Sync + ObjA;\n+   |                        ---          ^^^^\n+   |                        |            |\n+   |                        |            additional non-auto trait\n+   |                        |            trait alias used in trait object type (additional use)\n+   |                        trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:115:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (additional use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (additional use)\n+...\n+LL | type _T44 = dyn ObjA + _10 + Send + Sync;\n+   |                 ----   ^^^ trait alias used in trait object type (additional use)\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:118:37\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here (additional use)\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here (first use)\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here (first use)\n+...\n+LL | type _T45 = dyn Sync + Send + _10 + _1;\n+   |                               ---   ^^ trait alias used in trait object type (additional use)\n+   |                               |\n+   |                               trait alias used in trait object type (first use)\n+\n+error: aborting due to 28 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "d62fd7e59c9204b6c89f8f643d283ff665d8d1b0", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,11 @@\n+#![feature(trait_alias)]\n+\n+trait EqAlias = Eq;\n+trait IteratorAlias = Iterator;\n+\n+fn main() {\n+    let _: &dyn EqAlias = &123;\n+    //~^ ERROR the trait `std::cmp::Eq` cannot be made into an object [E0038]\n+    let _: &dyn IteratorAlias = &vec![123].into_iter();\n+    //~^ ERROR must be specified\n+}"}, {"sha": "9a9b91770308516c902d4b38165d095e4b3fd492", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,13 +1,13 @@\n-error[E0038]: the trait `EqAlias` cannot be made into an object\n-  --> $DIR/trait-alias-object.rs:7:13\n+error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n+  --> $DIR/trait-alias-object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n-   |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n+   |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-object.rs:8:13\n+  --> $DIR/trait-alias-object-fail.rs:9:13\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |             ^^^^^^^^^^^^^^^^^ associated type `Item` must be specified", "previous_filename": "src/test/ui/traits/trait-alias-object.stderr"}, {"sha": "fb26b7e2df7cba801409e348b3cd4c80466c2459", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-wf.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,85 @@\n+// run-pass\n+\n+// This test checks that trait objects involving trait aliases are well-formed.\n+\n+#![feature(trait_alias)]\n+\n+trait Obj {}\n+\n+trait _0 = Send + Sync;\n+\n+// Just auto traits:\n+\n+trait _1 = _0 + Send + Sync;\n+\n+use std::marker::Unpin;\n+\n+fn _f0() {\n+    let _: Box<dyn _0>;\n+    let _: Box<dyn _1>;\n+    let _: Box<dyn Unpin + _1 + Send + Sync>;\n+}\n+\n+// Include object safe traits:\n+\n+fn _f1() {\n+    let _: Box<dyn Obj + _0>;\n+    let _: Box<dyn Obj + _1>;\n+    let _: Box<dyn Obj + _1 + _0>;\n+}\n+\n+// And when the object safe trait is in a trait alias:\n+\n+trait _2 = Obj;\n+\n+fn _f2() {\n+    let _: Box<dyn _2 + _0>;\n+    let _: Box<dyn _2 + _1>;\n+    let _: Box<dyn _2 + _1 + _0>;\n+}\n+\n+// And it should also work when that trait is has auto traits to the right of it.\n+\n+trait _3 = Obj + Unpin;\n+\n+fn _f3() {\n+    let _: Box<dyn _3 + _0>;\n+    let _: Box<dyn _3 + _1>;\n+    let _: Box<dyn _3 + _1 + _0>;\n+}\n+\n+// Nest the trait deeply:\n+\n+trait _4 = _3;\n+trait _5 = _4 + Sync + _0 + Send;\n+trait _6 = _5 + Send + _1 + Sync;\n+\n+fn _f4() {\n+    let _: Box<dyn _6 + _0>;\n+    let _: Box<dyn _6 + _1>;\n+    let _: Box<dyn _6 + _1 + _0>;\n+}\n+\n+// Just nest the trait alone:\n+\n+trait _7 = _2;\n+trait _8 = _7;\n+trait _9 = _8;\n+\n+fn _f5() {\n+    let _: Box<dyn _9>;\n+}\n+\n+// First bound is auto trait:\n+\n+trait _10 = Send + Obj;\n+trait _11 = Obj + Send;\n+trait _12 = Sync + _11;\n+trait _13 = Send + _12;\n+\n+fn f6() {\n+    let _: Box<dyn _10>;\n+    let _: Box<dyn _13>;\n+}\n+\n+fn main() {}"}, {"sha": "12177cd827fdfd2aa5ccfeeebbcb2b1b7aa07748", "filename": "src/test/ui/traits/trait-alias/trait-alias-object.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n trait Foo = PartialEq<i32> + Send;", "previous_filename": "src/test/run-pass/traits/trait-alias-object.rs"}, {"sha": "d6c611d2a4d91e035be3dbedea7ec18ae57650ca", "filename": "src/test/ui/traits/trait-alias/trait-alias-only-maybe-bound.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,22 @@\n+// Test that `dyn ?Sized` (i.e., a trait object with only a maybe buond) is not allowed, when just\n+// `?Sized` results from trait alias expansion.\n+\n+#![feature(trait_alias)]\n+\n+trait S = ?Sized;\n+\n+// Nest a couple of levels deep:\n+trait _0 = S;\n+trait _1 = _0;\n+\n+// Straight list expansion:\n+type _T0 = dyn _1;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+\n+// Twice:\n+trait _2 = _1 + _1;\n+\n+type _T1 = dyn _2;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+\n+fn main() {}"}, {"sha": "d4f77200fd5a03fbe87c3d0f18f716087c682e1f", "filename": "src/test/ui/traits/trait-alias/trait-alias-only-maybe-bound.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,14 @@\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/trait-alias-only-maybe-bound.rs:13:12\n+   |\n+LL | type _T0 = dyn _1;\n+   |            ^^^^^^\n+\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/trait-alias-only-maybe-bound.rs:19:12\n+   |\n+LL | type _T1 = dyn _2;\n+   |            ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5948d45b6987fcd778123f9e06a1f74e77d6b7c0", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-syntax.rs"}, {"sha": "f456a2d778c259cbeaccc8c8546a7f66478f43ef", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,11 +1,11 @@\n error: trait aliases cannot be `auto`\n-  --> $DIR/trait-alias-syntax.rs:4:19\n+  --> $DIR/trait-alias-syntax-fail.rs:4:19\n    |\n LL | auto trait A = Foo;\n    |                   ^ trait aliases cannot be `auto`\n \n error: trait aliases cannot be `unsafe`\n-  --> $DIR/trait-alias-syntax.rs:5:21\n+  --> $DIR/trait-alias-syntax-fail.rs:5:21\n    |\n LL | unsafe trait B = Foo;\n    |                     ^ trait aliases cannot be `unsafe`", "previous_filename": "src/test/ui/traits/trait-alias-syntax.stderr"}, {"sha": "17557a51aa7234aeca9340e25ed845993207c15e", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n trait SimpleAlias = Default;", "previous_filename": "src/test/run-pass/traits/trait-alias-syntax.rs"}, {"sha": "d10e2abb0e1a39b40a6d3364572c7221a84ea5db", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-wf.rs"}, {"sha": "ee2dd5b24afed9eabda43c1d668110690b7389ac", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/traits/trait-alias-wf.stderr"}, {"sha": "d8168f2990c4675b68cb6af0716eee43e0b4355c", "filename": "src/test/ui/traits/trait-alias/trait-alias.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n #![feature(trait_alias)]\n \n pub trait Foo {}", "previous_filename": "src/test/ui/run-pass/traits/trait-alias.rs"}, {"sha": "f0c2c1082b09f8b3952175cb4bb2239a9b0184d7", "filename": "src/test/ui/traits/traits-static-outlives-a-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "previous_filename": "src/test/ui/run-pass/traits/traits-static-outlives-a-where-clause.rs"}, {"sha": "f24c1301c53abe6a5ca388b19d14104d5c9c5c5d", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,20 @@\n+// compile-fail\n+\n+// Test that `dyn ... + ?Sized + ...` is okay (though `?Sized` has no effect in trait objects).\n+\n+trait Foo {}\n+\n+type _0 = dyn ?Sized + Foo;\n+//~^ ERROR `?Trait` is not permitted in trait object types\n+\n+type _1 = dyn Foo + ?Sized;\n+//~^ ERROR `?Trait` is not permitted in trait object types\n+\n+type _2 = dyn Foo + ?Sized + ?Sized;\n+//~^ ERROR `?Trait` is not permitted in trait object types\n+//~| ERROR `?Trait` is not permitted in trait object types\n+\n+type _3 = dyn ?Sized + Foo;\n+//~^ ERROR `?Trait` is not permitted in trait object types\n+\n+fn main() {}"}, {"sha": "11187342d59f294367ee251e15199b75be9c252e", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,32 @@\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-maybe-bound.rs:7:15\n+   |\n+LL | type _0 = dyn ?Sized + Foo;\n+   |               ^^^^^^\n+\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-maybe-bound.rs:10:21\n+   |\n+LL | type _1 = dyn Foo + ?Sized;\n+   |                     ^^^^^^\n+\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-maybe-bound.rs:13:21\n+   |\n+LL | type _2 = dyn Foo + ?Sized + ?Sized;\n+   |                     ^^^^^^\n+\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-maybe-bound.rs:13:30\n+   |\n+LL | type _2 = dyn Foo + ?Sized + ?Sized;\n+   |                              ^^^^^^\n+\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-maybe-bound.rs:17:15\n+   |\n+LL | type _3 = dyn ?Sized + Foo;\n+   |               ^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "678ede58296a49c28bd8b753be0a4dfb0da917dc", "filename": "src/test/ui/traits/wf-trait-object-no-duplicates.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,33 @@\n+// The purpose of this test is to demonstrate that duplicating object safe traits\n+// that are not auto-traits is rejected even though one could reasonably accept this.\n+\n+// Some arbitrary object-safe trait:\n+trait Obj {}\n+\n+// Demonstrate that recursive expansion of trait aliases doesn't affect stable behavior:\n+type _0 = dyn Obj + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Some variations:\n+\n+type _1 = dyn Send + Obj + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _2 = dyn Obj + Send + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _3 = dyn Obj + Send + Send; // But it is OK to duplicate auto traits.\n+\n+// Take higher ranked types into account.\n+\n+// Note that `'a` and `'b` are intentionally different to make sure we consider\n+// them semantically the same.\n+trait ObjL<'l> {}\n+type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+trait ObjT<T> {}\n+type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "269d92fe43db80aff783a3bcdfc476efc389233f", "filename": "src/test/ui/traits/wf-trait-object-no-duplicates.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,58 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:8:21\n+   |\n+LL | type _0 = dyn Obj + Obj;\n+   |               ---   ^^^\n+   |               |     |\n+   |               |     additional non-auto trait\n+   |               |     trait alias used in trait object type (additional use)\n+   |               first non-auto trait\n+   |               trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:13:28\n+   |\n+LL | type _1 = dyn Send + Obj + Obj;\n+   |                      ---   ^^^\n+   |                      |     |\n+   |                      |     additional non-auto trait\n+   |                      |     trait alias used in trait object type (additional use)\n+   |                      first non-auto trait\n+   |                      trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:16:28\n+   |\n+LL | type _2 = dyn Obj + Send + Obj;\n+   |               ---          ^^^\n+   |               |            |\n+   |               |            additional non-auto trait\n+   |               |            trait alias used in trait object type (additional use)\n+   |               first non-auto trait\n+   |               trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:26:34\n+   |\n+LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n+   |               ----------------   ^^^^^^^^^^^^^^^^\n+   |               |                  |\n+   |               |                  additional non-auto trait\n+   |               |                  trait alias used in trait object type (additional use)\n+   |               first non-auto trait\n+   |               trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:30:42\n+   |\n+LL | type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n+   |               ------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |                          |\n+   |               |                          additional non-auto trait\n+   |               |                          trait alias used in trait object type (additional use)\n+   |               first non-auto trait\n+   |               trait alias used in trait object type (first use)\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "1b83d2487f4c6f8e4fc445677d889c9f3f59dcdb", "filename": "src/test/ui/traits/wf-trait-object-only-maybe-bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,7 @@\n+// Test that `dyn ?Sized` (i.e., a trait object with only a maybe buond) is not allowed.\n+\n+type _0 = dyn ?Sized;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+//~| ERROR ?Trait` is not permitted in trait object types\n+\n+fn main() {}"}, {"sha": "0cfb389fd899ebe1c90d0cd8af04be5399a7133f", "filename": "src/test/ui/traits/wf-trait-object-only-maybe-bound.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,14 @@\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/wf-trait-object-only-maybe-bound.rs:3:15\n+   |\n+LL | type _0 = dyn ?Sized;\n+   |               ^^^^^^\n+\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/wf-trait-object-only-maybe-bound.rs:3:11\n+   |\n+LL | type _0 = dyn ?Sized;\n+   |           ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4f676cbe33846adadd2933241347bdbacacaf612", "filename": "src/test/ui/traits/wf-trait-object-reverse-order.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff5d388f8c004ca248adb635f1cc84d347eda0/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs?ref=37ff5d388f8c004ca248adb635f1cc84d347eda0", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+// Ensure that `dyn $($AutoTrait)+ ObjSafe` is well-formed.\n+\n+use std::marker::Unpin;\n+\n+// Some arbitrary object-safe trait:\n+trait Obj {}\n+\n+type _0 = dyn Unpin;\n+type _1 = dyn Send + Obj;\n+type _2 = dyn Send + Unpin + Obj;\n+type _3 = dyn Send + Unpin + Sync + Obj;\n+\n+fn main() {}"}]}