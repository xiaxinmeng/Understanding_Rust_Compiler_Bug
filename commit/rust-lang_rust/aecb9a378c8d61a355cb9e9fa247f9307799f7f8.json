{"sha": "aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "node_id": "C_kwDOAAsO6NoAKGFlY2I5YTM3OGM4ZDYxYTM1NWNiOWU5ZmEyNDdmOTMwNzc5OWY3Zjg", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T02:07:16Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T02:07:16Z"}, "message": "traverse even more...", "tree": {"sha": "b35b1fcf0daa12b87d560db1e38b2bc6af51116e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35b1fcf0daa12b87d560db1e38b2bc6af51116e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "html_url": "https://github.com/rust-lang/rust/commit/aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aecb9a378c8d61a355cb9e9fa247f9307799f7f8/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9387e2d91941a62d008a67de5b8d47cba6ba3b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/9387e2d91941a62d008a67de5b8d47cba6ba3b85", "html_url": "https://github.com/rust-lang/rust/commit/9387e2d91941a62d008a67de5b8d47cba6ba3b85"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "ae494c86e429c695c0996d7e8fd7995469c3b6bf", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aecb9a378c8d61a355cb9e9fa247f9307799f7f8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecb9a378c8d61a355cb9e9fa247f9307799f7f8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "patch": "@@ -44,9 +44,9 @@ use hir_def::{\n     nameres,\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n-    AssocItemId, AttrDefId, ConstId, ConstParamId, EnumId, FunctionId, GenericDefId, HasModule,\n-    ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, UnionId,\n+    AttrDefId, ConstId, ConstParamId, EnumId, FunctionId, GenericDefId, HasModule, ImplId,\n+    LifetimeParamId, LocalEnumVariantId, LocalFieldId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind, MacroDefId, MacroDefKind};\n use hir_ty::{\n@@ -115,6 +115,7 @@ pub use {\n         visibility::Visibility,\n         AdtId,\n         AssocContainerId,\n+        AssocItemId,\n         AssocItemLoc,\n         DefWithBodyId,\n         ItemLoc,"}, {"sha": "01318b103e8ce0f7015a07f8e2858260cfe405e7", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/aecb9a378c8d61a355cb9e9fa247f9307799f7f8/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecb9a378c8d61a355cb9e9fa247f9307799f7f8/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=aecb9a378c8d61a355cb9e9fa247f9307799f7f8", "patch": "@@ -34,8 +34,9 @@ use base_db::{\n };\n use fst::{self, Streamer};\n use hir::{\n-    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, DefWithBodyId, HirFileId,\n-    InFile, ItemLoc, ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId, Semantics,\n+    db::DefDatabase, AdtId, AssocContainerId, AssocItemId, AssocItemLoc, DefHasSource,\n+    DefWithBodyId, HirFileId, InFile, ItemLoc, ItemScope, ItemTreeNode, Lookup, ModuleData,\n+    ModuleDefId, ModuleId, Semantics,\n };\n use rayon::prelude::*;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -209,21 +210,18 @@ pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<Fil\n         .par_iter()\n         .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n         .collect();\n+\n+    for i in &buf {\n+        dbg!(&i.symbols);\n+    }\n+\n     let buf = buf.iter().map(|it| &**it).collect::<Vec<_>>();\n     query.search(&buf)\n }\n \n fn module_ids_for_crate(db: &RootDatabase, krate: CrateId) -> Vec<ModuleId> {\n     let def_map = db.crate_def_map(krate);\n-    let mut module_ids = Vec::new();\n-    let mut modules = vec![def_map.root()];\n-    while let Some(module) = modules.pop() {\n-        let data = &def_map[module];\n-        module_ids.push(def_map.module_id(module));\n-        modules.extend(data.children.values());\n-    }\n-\n-    module_ids\n+    def_map.modules().map(|(id, _)| def_map.module_id(id)).collect()\n }\n \n pub fn index_resolve(db: &RootDatabase, name: &str) -> Vec<FileSymbol> {\n@@ -547,7 +545,9 @@ fn collect_symbols_from_item_scope(\n          symbols: &mut Vec<FileSymbol>,\n          bodies_to_traverse: &mut Vec<(Option<SmolStr>, DefWithBodyId)>,\n          container_name: &Option<SmolStr>| {\n-            let symbols_iter = scope\n+            let mut trait_ids = Vec::new();\n+\n+            let scope_declaration_symbols = scope\n                 .declarations()\n                 .filter_map(|module_def_id| match module_def_id {\n                     ModuleDefId::ModuleId(module_id) => decl_module(db, module_id),\n@@ -584,7 +584,10 @@ fn collect_symbols_from_item_scope(\n                         ));\n                         symbol\n                     }\n-                    ModuleDefId::TraitId(trait_id) => decl(db, trait_id, FileSymbolKind::Trait),\n+                    ModuleDefId::TraitId(trait_id) => {\n+                        trait_ids.push(trait_id);\n+                        decl(db, trait_id, FileSymbolKind::Trait)\n+                    }\n                     ModuleDefId::TypeAliasId(alias_id) => {\n                         decl_assoc(db, alias_id, FileSymbolKind::TypeAlias)\n                     }\n@@ -601,7 +604,47 @@ fn collect_symbols_from_item_scope(\n                     s\n                 });\n \n-            symbols.extend(symbols_iter);\n+            symbols.extend(scope_declaration_symbols);\n+\n+            // todo: we need to merge in container name to these too.\n+            // also clean this up generally tooooo.\n+            let scope_impl_symbols = scope\n+                .impls()\n+                .map(|impl_id| db.impl_data(impl_id))\n+                .flat_map(|d| d.items.clone()) // xx: clean up this clone??\n+                .filter_map(|assoc_item_id| match assoc_item_id {\n+                    AssocItemId::FunctionId(function_id) => {\n+                        decl_assoc(db, function_id, FileSymbolKind::Function)\n+                    }\n+                    AssocItemId::ConstId(const_id) => {\n+                        decl_assoc(db, const_id, FileSymbolKind::Const)\n+                    }\n+                    AssocItemId::TypeAliasId(type_alias_id) => {\n+                        decl_assoc(db, type_alias_id, FileSymbolKind::TypeAlias)\n+                    }\n+                });\n+\n+            symbols.extend(scope_impl_symbols);\n+\n+            // todo: we need to merge in container name to these too.\n+            // also clean this up generally tooooo.\n+            let scope_trait_symbols = trait_ids\n+                .into_iter()\n+                .map(|trait_id| db.trait_data(trait_id))\n+                .flat_map(|d| d.items.clone())\n+                .filter_map(|(_, assoc_item_id)| match assoc_item_id {\n+                    AssocItemId::FunctionId(function_id) => {\n+                        decl_assoc(db, function_id, FileSymbolKind::Function)\n+                    }\n+                    AssocItemId::ConstId(const_id) => {\n+                        decl_assoc(db, const_id, FileSymbolKind::Const)\n+                    }\n+                    AssocItemId::TypeAliasId(type_alias_id) => {\n+                        decl_assoc(db, type_alias_id, FileSymbolKind::TypeAlias)\n+                    }\n+                });\n+\n+            symbols.extend(scope_trait_symbols);\n \n             for const_id in scope.unnamed_consts() {\n                 // since unnamed consts don't really have a name, we'll inherit parent scope's symbol name."}]}