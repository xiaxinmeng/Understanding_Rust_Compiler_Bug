{"sha": "0407c642f528d2b3618ef1c671f3b988d51c858a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDdjNjQyZjUyOGQyYjM2MThlZjFjNjcxZjNiOTg4ZDUxYzg1OGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:28Z"}, "message": "Rollup merge of #59297 - euclio:field-method-suggestions, r=estebank\n\nconvert field/method confusion help to suggestions", "tree": {"sha": "1f77e420fe367891a0b360eb3b5ac60aecd4fdad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f77e420fe367891a0b360eb3b5ac60aecd4fdad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0407c642f528d2b3618ef1c671f3b988d51c858a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSoBCRBK7hj4Ov3rIwAAdHIIAGZIPZlTvV4rxYrkkwGje4IE\nD9HwjwDwi6ZKJrfdKtN1YfW/DCf87Hg0iyuxOHy3OUsX/NjlfLK1+AjAse/3iWxG\nSa1xI6uORkAZ/ZEtbcndNIulvfU7WeYKrzSz124nbnLN6WxrWaW3bEiWL17J+rfI\nzwyeTAPLWrOGK7TklaW01dCINMGRng+cy24hA3UndOpKxnKdi/xFazWBfB62Yn6Y\n6JauMMV8C3znXCMeIr07aUAUnU4N7tT/BZ4i5MfoXsS0XofLvcPhirUVz5s0oQmB\nvAnlTMuTkOiJ13u++mgoHQrXv9O3cnbzp+eRM5bBBu7l6z01b6FaPIAKedsUxrM=\n=frBB\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f77e420fe367891a0b360eb3b5ac60aecd4fdad\nparent d2a958f4227460aa0d6b42c2b3a24ad01ed3d388\nparent a291d4e94cbcd9082f942147cde92b8ae5a39cdc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279488 +0100\ncommitter GitHub <noreply@github.com> 1553279488 +0100\n\nRollup merge of #59297 - euclio:field-method-suggestions, r=estebank\n\nconvert field/method confusion help to suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0407c642f528d2b3618ef1c671f3b988d51c858a", "html_url": "https://github.com/rust-lang/rust/commit/0407c642f528d2b3618ef1c671f3b988d51c858a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0407c642f528d2b3618ef1c671f3b988d51c858a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388", "html_url": "https://github.com/rust-lang/rust/commit/d2a958f4227460aa0d6b42c2b3a24ad01ed3d388"}, {"sha": "a291d4e94cbcd9082f942147cde92b8ae5a39cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a291d4e94cbcd9082f942147cde92b8ae5a39cdc", "html_url": "https://github.com/rust-lang/rust/commit/a291d4e94cbcd9082f942147cde92b8ae5a39cdc"}], "stats": {"total": 151, "additions": 98, "deletions": 53}, "files": [{"sha": "f933e61b8c63e2a6ed335a215f2110e012350fe7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 50, "deletions": 33, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0407c642f528d2b3618ef1c671f3b988d51c858a", "patch": "@@ -332,44 +332,61 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // If the method name is the name of a field with a function or closure type,\n                 // give a helping note that it has to be called as `(x.f)(...)`.\n                 if let SelfSource::MethodCall(expr) = source {\n-                    for (ty, _) in self.autoderef(span, rcvr_ty) {\n-                        if let ty::Adt(def, substs) = ty.sty {\n-                            if !def.is_enum() {\n+                    let field_receiver = self\n+                        .autoderef(span, rcvr_ty)\n+                        .find_map(|(ty, _)| match ty.sty {\n+                            ty::Adt(def, substs) if !def.is_enum() => {\n                                 let variant = &def.non_enum_variant();\n-                                if let Some(index) = self.tcx.find_field_index(item_name, variant) {\n+                                self.tcx.find_field_index(item_name, variant).map(|index| {\n                                     let field = &variant.fields[index];\n-                                    let snippet = tcx.sess.source_map().span_to_snippet(expr.span);\n-                                    let expr_string = match snippet {\n-                                        Ok(expr_string) => expr_string,\n-                                        _ => \"s\".into(), // Default to a generic placeholder for the\n-                                                         // expression when we can't generate a\n-                                                         // string snippet.\n-                                    };\n-\n                                     let field_ty = field.ty(tcx, substs);\n-                                    let scope = self.tcx.hir().get_module_parent_by_hir_id(\n-                                        self.body_id);\n-                                    if field.vis.is_accessible_from(scope, self.tcx) {\n-                                        if self.is_fn_ty(&field_ty, span) {\n-                                            err.help(&format!(\"use `({0}.{1})(...)` if you \\\n-                                                               meant to call the function \\\n-                                                               stored in the `{1}` field\",\n-                                                              expr_string,\n-                                                              item_name));\n-                                        } else {\n-                                            err.help(&format!(\"did you mean to write `{0}.{1}` \\\n-                                                               instead of `{0}.{1}(...)`?\",\n-                                                              expr_string,\n-                                                              item_name));\n-                                        }\n-                                        err.span_label(span, \"field, not a method\");\n-                                    } else {\n-                                        err.span_label(span, \"private field, not a method\");\n-                                    }\n-                                    break;\n-                                }\n+                                    (field, field_ty)\n+                                })\n+                            }\n+                            _ => None,\n+                        });\n+\n+                    if let Some((field, field_ty)) = field_receiver {\n+                        let scope = self.tcx.hir().get_module_parent_by_hir_id(self.body_id);\n+                        let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n+\n+                        if is_accessible {\n+                            if self.is_fn_ty(&field_ty, span) {\n+                                let expr_span = expr.span.to(item_name.span);\n+                                err.multipart_suggestion(\n+                                    &format!(\n+                                        \"to call the function stored in `{}`, \\\n+                                         surround the field access with parentheses\",\n+                                        item_name,\n+                                    ),\n+                                    vec![\n+                                        (expr_span.shrink_to_lo(), '('.to_string()),\n+                                        (expr_span.shrink_to_hi(), ')'.to_string()),\n+                                    ],\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                let call_expr = self.tcx.hir().expect_expr_by_hir_id(\n+                                    self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                                );\n+\n+                                let span = call_expr.span.trim_start(item_name.span).unwrap();\n+\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"remove the arguments\",\n+                                    String::new(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             }\n                         }\n+\n+                        let field_kind = if is_accessible {\n+                            \"field\"\n+                        } else {\n+                            \"private field\"\n+                        };\n+                        err.span_label(item_name.span, format!(\"{}, not a method\", field_kind));\n                     }\n                 } else {\n                     err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));"}, {"sha": "03f9d990dbb23878063d8e5cc461e7effab465bf", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=0407c642f528d2b3618ef1c671f3b988d51c858a", "patch": "@@ -6,8 +6,10 @@ LL | struct Obj<F> where F: FnMut() -> u32 {\n ...\n LL |     o.closure();\n    |       ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o.closure)();\n+   |     ^         ^\n \n error: aborting due to previous error\n "}, {"sha": "2107318d87b5bda7ccd86f59976f26d1ab55c27c", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=0407c642f528d2b3618ef1c671f3b988d51c858a", "patch": "@@ -6,8 +6,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_closure.closure();\n    |               ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o_closure.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o_closure.closure)();\n+   |     ^                 ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n   --> $DIR/issue-2392.rs:42:15\n@@ -16,9 +18,9 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n ...\n LL |     o_closure.not_closure();\n-   |               ^^^^^^^^^^^ field, not a method\n-   |\n-   = help: did you mean to write `o_closure.not_closure` instead of `o_closure.not_closure(...)`?\n+   |               ^^^^^^^^^^^-- help: remove the arguments\n+   |               |\n+   |               field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:46:12\n@@ -28,8 +30,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_func.closure();\n    |            ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o_func.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o_func.closure)();\n+   |     ^              ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:49:14\n@@ -39,8 +43,10 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_fn.boxed_closure();\n    |              ^^^^^^^^^^^^^ field, not a method\n+help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n-   = help: use `(boxed_fn.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n+LL |     (boxed_fn.boxed_closure)();\n+   |     ^                      ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:52:19\n@@ -50,8 +56,10 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_closure.boxed_closure();\n    |                   ^^^^^^^^^^^^^ field, not a method\n+help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n-   = help: use `(boxed_closure.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n+LL |     (boxed_closure.boxed_closure)();\n+   |     ^                           ^\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:57:12\n@@ -61,8 +69,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     w.wrap.closure();\n    |            ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(w.wrap.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (w.wrap.closure)();\n+   |     ^              ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:59:12\n@@ -71,9 +81,9 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n ...\n LL |     w.wrap.not_closure();\n-   |            ^^^^^^^^^^^ field, not a method\n-   |\n-   = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n+   |            ^^^^^^^^^^^-- help: remove the arguments\n+   |            |\n+   |            field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output = u32> + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:62:24\n@@ -83,8 +93,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     check_expression().closure();\n    |                        ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(check_expression().closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (check_expression().closure)();\n+   |     ^                          ^\n \n error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:68:31\n@@ -94,8 +106,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f1(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f1`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f1)(...)` if you meant to call the function stored in the `f1` field\n+LL |             ((*self.container).f1)(1);\n+   |             ^                    ^\n \n error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:69:31\n@@ -105,8 +119,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f2(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f2`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f2)(...)` if you meant to call the function stored in the `f2` field\n+LL |             ((*self.container).f2)(1);\n+   |             ^                    ^\n \n error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:70:31\n@@ -116,8 +132,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f3(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f3`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f3)(...)` if you meant to call the function stored in the `f3` field\n+LL |             ((*self.container).f3)(1);\n+   |             ^                    ^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "fbabb3a88cc6cd01245bc970993cb52e26d5e75e", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=0407c642f528d2b3618ef1c671f3b988d51c858a", "patch": "@@ -6,8 +6,10 @@ LL | struct Example {\n ...\n LL |     demo.example(1);\n    |          ^^^^^^^ field, not a method\n+help: to call the function stored in `example`, surround the field access with parentheses\n    |\n-   = help: use `(demo.example)(...)` if you meant to call the function stored in the `example` field\n+LL |     (demo.example)(1);\n+   |     ^            ^\n \n error: aborting due to previous error\n "}, {"sha": "60f1a932f4442db73a10a8b32954158981c25b6d", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0407c642f528d2b3618ef1c671f3b988d51c858a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=0407c642f528d2b3618ef1c671f3b988d51c858a", "patch": "@@ -3,24 +3,30 @@ error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue\n    |\n LL |     p.closure();\n    |       ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (p.closure)();\n+   |     ^         ^\n \n error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n LL |     q.fn_ptr();\n    |       ^^^^^^ field, not a method\n+help: to call the function stored in `fn_ptr`, surround the field access with parentheses\n    |\n-   = help: use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n+LL |     (q.fn_ptr)();\n+   |     ^        ^\n \n error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scope\n   --> $DIR/issue-33784.rs:32:7\n    |\n LL |     s.c_fn_ptr();\n    |       ^^^^^^^^ field, not a method\n+help: to call the function stored in `c_fn_ptr`, surround the field access with parentheses\n    |\n-   = help: use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr` field\n+LL |     (s.c_fn_ptr)();\n+   |     ^          ^\n \n error: aborting due to 3 previous errors\n "}]}