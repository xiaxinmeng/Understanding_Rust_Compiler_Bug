{"sha": "6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDJiZDJjOTY2ZDU3YmRiOGZiYmE3ZjQzZGE5ZGRkMDA0ZDg3ZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T08:39:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T08:39:51Z"}, "message": "reduce code duplication", "tree": {"sha": "683be88ba9b42bffd83a3a323caca27cd874ac89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/683be88ba9b42bffd83a3a323caca27cd874ac89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "html_url": "https://github.com/rust-lang/rust/commit/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "html_url": "https://github.com/rust-lang/rust/commit/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "68eca0ce87e0afbf8edbbddd6c8890e99e6b6b20", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "patch": "@@ -126,26 +126,15 @@ fn where_predicate(p: &mut Parser) {\n                 p.error(\"expected colon\");\n             }\n         }\n-        // test where_pred_for\n-        // fn test<F>()\n-        // where\n-        //    for<'a> F: Fn(&'a str)\n-        // { }\n-        FOR_KW => {\n-            p.bump();\n-            if p.at(L_ANGLE) {\n-                type_param_list(p);\n-                types::path_type(p);\n-                if p.at(COLON) {\n-                    bounds(p);\n-                } else {\n-                    p.error(\"expected colon\");\n-                }\n-            } else {\n-                p.error(\"expected `<`\");\n-            }\n-        }\n         _ => {\n+            // test where_pred_for\n+            // fn test<F>()\n+            // where\n+            //    for<'a> F: Fn(&'a str)\n+            // { }\n+            if p.at(FOR_KW) {\n+                types::for_binder(p);\n+            }\n             types::path_type(p);\n             if p.at(COLON) {\n                 bounds(p);"}, {"sha": "ed2718e7391ce792f1473d63f610c06ddc1cf5ca", "filename": "crates/ra_syntax/src/grammar/types.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6502bd2c966d57bdb8fbba7f43da9ddd004d87d3/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs?ref=6502bd2c966d57bdb8fbba7f43da9ddd004d87d3", "patch": "@@ -188,13 +188,22 @@ fn fn_pointer_type(p: &mut Parser) {\n     m.complete(p, FN_POINTER_TYPE);\n }\n \n+pub(super) fn for_binder(p: &mut Parser) {\n+    assert!(p.at(FOR_KW));\n+    p.bump();\n+    if p.at(L_ANGLE) {\n+        type_params::opt_type_param_list(p);\n+    } else {\n+        p.error(\"expected `<`\");\n+    }\n+}\n+\n // test for_type\n // type A = for<'a> fn() -> ();\n pub(super) fn for_type(p: &mut Parser) {\n     assert!(p.at(FOR_KW));\n     let m = p.start();\n-    p.bump();\n-    type_params::opt_type_param_list(p);\n+    for_binder(p);\n     match p.current() {\n         FN_KW | UNSAFE_KW | EXTERN_KW => fn_pointer_type(p),\n         _ if paths::is_path_start(p) => path_type_(p, false),"}]}