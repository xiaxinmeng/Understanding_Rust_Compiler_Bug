{"sha": "7eb9337dace88c5ded431aa7507f06d50619131b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjkzMzdkYWNlODhjNWRlZDQzMWFhNzUwN2YwNmQ1MDYxOTEzMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-28T08:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-28T08:57:57Z"}, "message": "auto merge of #17527 : sfackler/rust/cfg-syntax, r=alexcrichton\n\nWe'll need a snapshot before we can convert the codebase over and turn on the deprecation warnings.\r\n\r\ncc #17490\r\n\r\nThis is sitting on top of #17506", "tree": {"sha": "dd89288a1765ab3d4431a850d4e788f1acd6d31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd89288a1765ab3d4431a850d4e788f1acd6d31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb9337dace88c5ded431aa7507f06d50619131b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb9337dace88c5ded431aa7507f06d50619131b", "html_url": "https://github.com/rust-lang/rust/commit/7eb9337dace88c5ded431aa7507f06d50619131b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb9337dace88c5ded431aa7507f06d50619131b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e079ed76c86d4886312f510cc6ecef465a59024f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e079ed76c86d4886312f510cc6ecef465a59024f", "html_url": "https://github.com/rust-lang/rust/commit/e079ed76c86d4886312f510cc6ecef465a59024f"}, {"sha": "9519abecfb727d71bd8209ffd94816b2cb87180f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9519abecfb727d71bd8209ffd94816b2cb87180f", "html_url": "https://github.com/rust-lang/rust/commit/9519abecfb727d71bd8209ffd94816b2cb87180f"}], "stats": {"total": 168, "additions": 102, "deletions": 66}, "files": [{"sha": "80e507b7a791a5c1b77769ceff602592c3c32d7a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -226,7 +226,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // baz! should not use this definition unless foo is enabled.\n \n     krate = time(time_passes, \"configuration 1\", krate, |krate|\n-                 syntax::config::strip_unconfigured_items(krate));\n+                 syntax::config::strip_unconfigured_items(sess.diagnostic(), krate));\n \n     let mut addl_plugins = Some(addl_plugins);\n     let Plugins { macros, registrars }\n@@ -307,7 +307,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     // strip again, in case expansion added anything with a #[cfg].\n     krate = time(time_passes, \"configuration 2\", krate, |krate|\n-                 syntax::config::strip_unconfigured_items(krate));\n+                 syntax::config::strip_unconfigured_items(sess.diagnostic(), krate));\n \n     krate = time(time_passes, \"maybe building test harness\", krate, |krate|\n                  syntax::test::modify_for_testing(&sess.parse_sess,"}, {"sha": "efc75de7142b86965f17fdf462fba0c6715bdbae", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -307,6 +307,32 @@ pub fn requests_inline(attrs: &[Attribute]) -> bool {\n     }\n }\n \n+/// Tests if a cfg-pattern matches the cfg set\n+pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::MetaItem) -> bool {\n+    match cfg.node {\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"any\" =>\n+            mis.iter().any(|mi| cfg_matches(diagnostic, cfgs, &**mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"all\" =>\n+            mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n+            // NOTE: turn on after snapshot\n+            /*\n+            if mis.len() != 1 {\n+                diagnostic.span_warn(cfg.span, \"the use of multiple cfgs in the same `not` \\\n+                                                statement is deprecated. Change `not(a, b)` to \\\n+                                                `not(all(a, b))`.\");\n+            }\n+            */\n+            !mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi))\n+        }\n+        ast::MetaList(ref pred, _) => {\n+            diagnostic.span_err(cfg.span, format!(\"invalid predicate `{}`\", pred).as_slice());\n+            false\n+        },\n+        ast::MetaWord(_) | ast::MetaNameValue(..) => contains(cfgs, cfg),\n+    }\n+}\n+\n /// Tests if any `cfg(...)` meta items in `metas` match `cfg`. e.g.\n ///\n /// test_cfg(`[foo=\"a\", bar]`, `[cfg(foo), cfg(bar)]`) == true"}, {"sha": "5b17f6f004a081ffcb64b8b1bd935ebe6eb9f2bf", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attr::AttrMetaMethods;\n+use diagnostic::SpanHandler;\n use fold::Folder;\n use {ast, fold, attr};\n use codemap::Spanned;\n@@ -21,9 +23,9 @@ struct Context<'a> {\n \n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n-pub fn strip_unconfigured_items(krate: ast::Crate) -> ast::Crate {\n+pub fn strip_unconfigured_items(diagnostic: &SpanHandler, krate: ast::Crate) -> ast::Crate {\n     let config = krate.config.clone();\n-    strip_items(krate, |attrs| in_cfg(config.as_slice(), attrs))\n+    strip_items(krate, |attrs| in_cfg(diagnostic, config.as_slice(), attrs))\n }\n \n impl<'a> fold::Folder for Context<'a> {\n@@ -249,7 +251,34 @@ fn impl_item_in_cfg(cx: &mut Context, impl_item: &ast::ImplItem) -> bool {\n \n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n-fn in_cfg(cfg: &[P<ast::MetaItem>], attrs: &[ast::Attribute]) -> bool {\n-    attr::test_cfg(cfg, attrs.iter())\n+fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attribute]) -> bool {\n+    let mut in_cfg = false;\n+    let mut seen_cfg = false;\n+    for attr in attrs.iter() {\n+        let mis = match attr.node.value.node {\n+            ast::MetaList(_, ref mis) if attr.check_name(\"cfg\") => mis,\n+            _ => continue\n+        };\n+\n+        // NOTE: turn on after snapshot\n+        /*\n+        if mis.len() != 1 {\n+            diagnostic.span_warn(attr.span, \"The use of multiple cfgs in the top level of \\\n+                                             `#[cfg(..)]` is deprecated. Change `#[cfg(a, b)]` to \\\n+                                             `#[cfg(all(a, b))]`.\");\n+        }\n+\n+        if seen_cfg {\n+            diagnostic.span_warn(attr.span, \"The semantics of multiple `#[cfg(..)]` attributes on \\\n+                                             same item are changing from the union of the cfgs to \\\n+                                             the intersection of the cfgs. Change `#[cfg(a)] \\\n+                                             #[cfg(b)]` to `#[cfg(any(a, b))]`.\");\n+        }\n+        */\n+\n+        seen_cfg = true;\n+        in_cfg |= mis.iter().all(|mi| attr::cfg_matches(diagnostic, cfg, &**mi));\n+    }\n+    in_cfg | !seen_cfg\n }\n "}, {"sha": "342e7e6d52e847e18083f151f90fe8a15b3ccbaf", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -22,7 +22,6 @@ use ext::build::AstBuilder;\n use attr;\n use attr::*;\n use parse::attr::ParserAttr;\n-use parse::token::InternedString;\n use parse::token;\n \n \n@@ -39,11 +38,17 @@ pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n         p.expect(&token::COMMA);\n     }\n \n-    // test_cfg searches for meta items looking like `cfg(foo, ...)`\n-    let in_cfg = Some(cx.meta_list(sp, InternedString::new(\"cfg\"), cfgs));\n+    // NOTE: turn on after snapshot\n+    /*\n+    if cfgs.len() != 1 {\n+        cx.span_warn(sp, \"The use of multiple cfgs at the top level of `cfg!` \\\n+                          is deprecated. Change `cfg!(a, b)` to \\\n+                          `cfg!(all(a, b))`.\");\n+    }\n+    */\n+\n+    let matches_cfg = cfgs.iter().all(|cfg| attr::cfg_matches(&cx.parse_sess.span_diagnostic,\n+                                                              cx.cfg.as_slice(), &**cfg));\n \n-    let matches_cfg = attr::test_cfg(cx.cfg().as_slice(),\n-                                     in_cfg.iter());\n-    let e = cx.expr_bool(sp, matches_cfg);\n-    MacExpr::new(e)\n+    MacExpr::new(cx.expr_bool(sp, matches_cfg))\n }"}, {"sha": "a85f12edb228648c672be37ff972662a45d890b9", "filename": "src/libsyntax/ext/cfg_attr.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg_attr.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -25,33 +25,10 @@ pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: &ast::MetaItem, it: P<ast::Item>)\n     };\n \n     let mut out = (*it).clone();\n-    if cfg_matches(cx, &**cfg) {\n+    if attr::cfg_matches(&cx.parse_sess.span_diagnostic, cx.cfg.as_slice(), &**cfg) {\n         out.attrs.push(cx.attribute(attr.span, attr.clone()));\n     }\n \n     P(out)\n }\n \n-fn cfg_matches(cx: &mut ExtCtxt, cfg: &ast::MetaItem) -> bool {\n-    match cfg.node {\n-        ast::MetaList(ref pred, ref mis) if pred.get() == \"any\" =>\n-            mis.iter().any(|mi| cfg_matches(cx, &**mi)),\n-        ast::MetaList(ref pred, ref mis) if pred.get() == \"all\" =>\n-            mis.iter().all(|mi| cfg_matches(cx, &**mi)),\n-        ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n-            if mis.len() != 1 {\n-                cx.span_err(cfg.span, format!(\"expected 1 value, got {}\",\n-                                              mis.len()).as_slice());\n-                return false;\n-            }\n-            !cfg_matches(cx, &*mis[0])\n-        }\n-        ast::MetaList(ref pred, _) => {\n-            cx.span_err(cfg.span,\n-                        format!(\"invalid predicate `{}`\", pred).as_slice());\n-            false\n-        },\n-        ast::MetaWord(_) | ast::MetaNameValue(..) =>\n-            attr::contains(cx.cfg.as_slice(), cfg),\n-    }\n-}"}, {"sha": "d2216d95867beaf28844d6a1097ac31878cf18f8", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -12,10 +12,9 @@\n \n fn foo(x: int) { println!(\"{}\", x); }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n-#[cfg(target_arch = \"arm\")]\n-\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\",\n+          target_arch = \"arm\"))]\n pub fn main() {\n     let x: int;\n     let y: int;\n@@ -27,5 +26,5 @@ pub fn main() {\n     foo(y);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"), not(target_arch = \"arm\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n pub fn main() {}"}, {"sha": "8006789d440c3437a2435ecc7ac6748753cf0799", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -14,8 +14,8 @@\n \n #![allow(dead_code)]\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\"))]\n pub fn main() {\n     // assignment not dead\n     let mut x: int = 0;"}, {"sha": "a35f72ab4dc7b83e29e6e063931ae269bc1bba47", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -12,9 +12,9 @@\n \n fn foo(x: int) { println!(\"{}\", x); }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\",\n+          target_arch = \"arm\"))]\n pub fn main() {\n     let x: int;\n     x = 1; //~ NOTE prior assignment occurs here\n@@ -25,5 +25,5 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"), not(target_arch = \"arm\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n pub fn main() {}"}, {"sha": "76d4c516c4e826d4647774a50ea1994f2fa0be00", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -12,9 +12,9 @@\n \n fn foo(x: int) { println!(\"{}\", x); }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\",\n+          target_arch = \"arm\"))]\n pub fn main() {\n     let x: int;\n     unsafe {\n@@ -23,5 +23,5 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"), not(target_arch = \"arm\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n pub fn main() {}"}, {"sha": "aa83a89fec0a983aa46f654252b25c8095a8ec85", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -12,9 +12,9 @@\n \n fn foo(x: int) { println!(\"{}\", x); }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\",\n+          target_arch = \"arm\"))]\n pub fn main() {\n     let x: int;\n     unsafe {\n@@ -23,5 +23,5 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"), not(target_arch = \"arm\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n pub fn main() {}"}, {"sha": "8be1c35ae5ccad824d88205037cec345e50e84b2", "filename": "src/test/compile-fail/test-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: --cfg foo\n \n-#[cfg(foo, bar)] // foo AND bar\n+#[cfg(all(foo, bar))] // foo AND bar\n fn foo() {}\n \n fn main() {"}, {"sha": "965b1760f1ff16f7c4b1cd21464d14419b7a04db", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(asm)]\n \n-#[cfg = r#\"just parse this\"#]\n+#[cfg(foo = r#\"just parse this\"#)]\n extern crate r##\"blah\"## as blah;\n \n fn main() { unsafe { asm!(r###\"blah\"###); } }"}, {"sha": "ab6468b2a857f6931085c173523d700522de86d0", "filename": "src/test/run-pass/syntax-extension-cfg.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb9337dace88c5ded431aa7507f06d50619131b/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs?ref=7eb9337dace88c5ded431aa7507f06d50619131b", "patch": "@@ -8,27 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --cfg foo --cfg bar(baz) --cfg qux=\"foo\"\n+// compile-flags: --cfg foo --cfg qux=\"foo\"\n \n pub fn main() {\n     // check\n     if ! cfg!(foo) { fail!() }\n     if   cfg!(not(foo)) { fail!() }\n \n-    if ! cfg!(bar(baz)) { fail!() }\n-    if   cfg!(not(bar(baz))) { fail!() }\n-\n     if ! cfg!(qux=\"foo\") { fail!() }\n     if   cfg!(not(qux=\"foo\")) { fail!() }\n \n-    if ! cfg!(foo, bar(baz), qux=\"foo\") { fail!() }\n-    if   cfg!(not(foo, bar(baz), qux=\"foo\")) { fail!() }\n+    if ! cfg!(foo, qux=\"foo\") { fail!() }\n+    if   cfg!(not(foo, qux=\"foo\")) { fail!() }\n+    if   cfg!(all(not(foo, qux=\"foo\"))) { fail!() }\n \n     if cfg!(not_a_cfg) { fail!() }\n-    if cfg!(not_a_cfg, foo, bar(baz), qux=\"foo\") { fail!() }\n+    if cfg!(not_a_cfg, foo, qux=\"foo\") { fail!() }\n+    if cfg!(all(not_a_cfg, foo, qux=\"foo\")) { fail!() }\n+    if ! cfg!(any(not_a_cfg, foo)) { fail!() }\n \n     if ! cfg!(not(not_a_cfg)) { fail!() }\n-    if ! cfg!(not(not_a_cfg), foo, bar(baz), qux=\"foo\") { fail!() }\n+    if ! cfg!(not(not_a_cfg), foo, qux=\"foo\") { fail!() }\n \n     if cfg!(trailing_comma, ) { fail!() }\n }"}]}