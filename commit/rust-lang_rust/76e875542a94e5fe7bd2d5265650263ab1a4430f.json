{"sha": "76e875542a94e5fe7bd2d5265650263ab1a4430f", "node_id": "C_kwDOAAsO6NoAKDc2ZTg3NTU0MmE5NGU1ZmU3YmQyZDUyNjU2NTAyNjNhYjFhNDQzMGY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T09:51:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T09:54:10Z"}, "message": "fix: remove semicolon diagnostics only highlights the semi", "tree": {"sha": "9a057138b67c0188e799e5fa6e6e840d53e81cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a057138b67c0188e799e5fa6e6e840d53e81cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e875542a94e5fe7bd2d5265650263ab1a4430f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e875542a94e5fe7bd2d5265650263ab1a4430f", "html_url": "https://github.com/rust-lang/rust/commit/76e875542a94e5fe7bd2d5265650263ab1a4430f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e875542a94e5fe7bd2d5265650263ab1a4430f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c758d0cb86122ecc926f2cb89cff72fbc71749", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c758d0cb86122ecc926f2cb89cff72fbc71749", "html_url": "https://github.com/rust-lang/rust/commit/59c758d0cb86122ecc926f2cb89cff72fbc71749"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "141fbc42fa56b5a78cf069dfbb2b86816287f37d", "filename": "crates/ide_diagnostics/src/handlers/remove_this_semicolon.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/76e875542a94e5fe7bd2d5265650263ab1a4430f/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e875542a94e5fe7bd2d5265650263ab1a4430f/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs?ref=76e875542a94e5fe7bd2d5265650263ab1a4430f", "patch": "@@ -1,6 +1,8 @@\n-use hir::db::AstDatabase;\n-use ide_db::source_change::SourceChange;\n-use syntax::{ast, AstNode};\n+use ide_db::{\n+    base_db::{FileLoader, FileRange},\n+    source_change::SourceChange,\n+};\n+use syntax::{TextRange, TextSize};\n use text_edit::TextEdit;\n \n use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n@@ -15,29 +17,42 @@ pub(crate) fn remove_this_semicolon(\n     Diagnostic::new(\n         \"remove-this-semicolon\",\n         \"remove this semicolon\",\n-        ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range,\n+        semicolon_range(ctx, d).unwrap_or_else(|it| it).range,\n     )\n     .with_fixes(fixes(ctx, d))\n }\n \n+fn semicolon_range(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::RemoveThisSemicolon,\n+) -> Result<FileRange, FileRange> {\n+    let expr_range = ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into()));\n+    let file_text = ctx.sema.db.file_text(expr_range.file_id);\n+    let range_end: usize = expr_range.range.end().into();\n+    // FIXME: This doesn't handle whitespace and comments, but handling those in\n+    // the presence of macros might prove tricky...\n+    if file_text[range_end..].starts_with(';') {\n+        Ok(FileRange {\n+            file_id: expr_range.file_id,\n+            range: TextRange::at(expr_range.range.end(), TextSize::of(';')),\n+        })\n+    } else {\n+        Err(expr_range)\n+    }\n+}\n+\n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::RemoveThisSemicolon) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-\n-    let semicolon = d\n-        .expr\n-        .value\n-        .to_node(&root)\n-        .syntax()\n-        .parent()\n-        .and_then(ast::ExprStmt::cast)\n-        .and_then(|expr| expr.semicolon_token())?\n-        .text_range();\n-\n-    let edit = TextEdit::delete(semicolon);\n-    let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n-\n-    Some(vec![fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon)])\n+    let semicolon_range = semicolon_range(ctx, d).ok()?;\n+\n+    let edit = TextEdit::delete(semicolon_range.range);\n+    let source_change = SourceChange::from_text_edit(semicolon_range.file_id, edit);\n+\n+    Some(vec![fix(\n+        \"remove_semicolon\",\n+        \"Remove this semicolon\",\n+        source_change,\n+        semicolon_range.range,\n+    )])\n }\n \n #[cfg(test)]\n@@ -49,7 +64,7 @@ mod tests {\n         check_diagnostics(\n             r#\"\n fn test() -> i32 { 123; }\n-                 //^^^ \ud83d\udca1 error: remove this semicolon\n+                    //^ \ud83d\udca1 error: remove this semicolon\n \"#,\n         );\n     }"}]}