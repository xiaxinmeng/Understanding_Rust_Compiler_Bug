{"sha": "a21f61685d4aa2bd93152eaf53c469b29a3a9bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMWY2MTY4NWQ0YWEyYmQ5MzE1MmVhZjUzYzQ2OWIyOWEzYTliZWU=", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-04-13T19:49:37Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-04-28T19:27:08Z"}, "message": "fmt: reduce the stack space required by float formatting\n\nFor the two major entry points for float formatting, we split the exact\ncase and the shortest cases into separate functions.  We mark the\nseparate functions as #[inline(never) so the exact cases won't bloat\nstack space in their callers unnecessarily.  The shortest cases are\nmarked so for similar reasons.\n\nFixes #41234.", "tree": {"sha": "26bf478f97f97695b7400a817c59790296d4c028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bf478f97f97695b7400a817c59790296d4c028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21f61685d4aa2bd93152eaf53c469b29a3a9bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21f61685d4aa2bd93152eaf53c469b29a3a9bee", "html_url": "https://github.com/rust-lang/rust/commit/a21f61685d4aa2bd93152eaf53c469b29a3a9bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21f61685d4aa2bd93152eaf53c469b29a3a9bee/comments", "author": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0078520e80579307124aca567a70e195637682", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0078520e80579307124aca567a70e195637682", "html_url": "https://github.com/rust-lang/rust/commit/5a0078520e80579307124aca567a70e195637682"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "60c291ef845d085dd304a8160f0dd075a3814bd6", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 66, "deletions": 16, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a21f61685d4aa2bd93152eaf53c469b29a3a9bee/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21f61685d4aa2bd93152eaf53c469b29a3a9bee/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=a21f61685d4aa2bd93152eaf53c469b29a3a9bee", "patch": "@@ -11,6 +11,35 @@\n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n use num::flt2dec;\n \n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                    sign: flt2dec::Sign, precision: usize) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    let mut buf = [0; 1024]; // enough for f32 and f64\n+    let mut parts = [flt2dec::Part::Zero(0); 16];\n+    let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n+                                                *num, sign, precision,\n+                                                false, &mut buf, &mut parts);\n+    fmt.pad_formatted_parts(&formatted)\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n+                                       num: &T, sign: flt2dec::Sign) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    let mut buf = [0; flt2dec::MAX_SIG_DIGITS]; // enough for f32 and f64\n+    let mut parts = [flt2dec::Part::Zero(0); 16];\n+    let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n+                                             *num, sign, 0, false, &mut buf, &mut parts);\n+    fmt.pad_formatted_parts(&formatted)\n+}\n+\n // Common code of floating point Debug and Display.\n fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n     where T: flt2dec::DecodableFloat\n@@ -23,15 +52,41 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n         (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n     };\n \n+    if let Some(precision) = fmt.precision {\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n+    } else {\n+        float_to_decimal_common_shortest(fmt, num, sign)\n+    }\n+}\n+\n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                        sign: flt2dec::Sign, precision: usize,\n+                                        upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n     let mut buf = [0; 1024]; // enough for f32 and f64\n     let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                    precision, false, &mut buf, &mut parts)\n-    } else {\n-        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                 0, false, &mut buf, &mut parts)\n-    };\n+    let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n+                                              *num, sign, precision,\n+                                              upper, &mut buf, &mut parts);\n+    fmt.pad_formatted_parts(&formatted)\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+                                           num: &T, sign: flt2dec::Sign,\n+                                           upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    let mut buf = [0; flt2dec::MAX_SIG_DIGITS]; // enough for f32 and f64\n+    let mut parts = [flt2dec::Part::Zero(0); 16];\n+    let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num,\n+                                                 sign, (0, 0), upper, &mut buf, &mut parts);\n     fmt.pad_formatted_parts(&formatted)\n }\n \n@@ -45,17 +100,12 @@ fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) ->\n         true  => flt2dec::Sign::MinusPlus,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n+    if let Some(precision) = fmt.precision {\n         // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n-        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                  precision + 1, upper, &mut buf, &mut parts)\n+        float_to_exponential_common_exact(fmt, num, sign, precision + 1, upper)\n     } else {\n-        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                     (0, 0), upper, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_exponential_common_shortest(fmt, num, sign, upper)\n+    }\n }\n \n macro_rules! floating {"}]}