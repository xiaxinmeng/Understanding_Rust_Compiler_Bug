{"sha": "d3928b183db1023c023f8afb4f5dfbee34994051", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTI4YjE4M2RiMTAyM2MwMjNmOGFmYjRmNWRmYmVlMzQ5OTQwNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-09T01:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-09T01:08:52Z"}, "message": "Auto merge of #87465 - audunhalland:refactor_typeck_primary_body_of, r=eddyb\n\nSimplify typeck/primary_body_of, fix comment to match return signature\n\nHi, new contributor here! I'm carefully reading through the various modules just to learn. I noticed this function, `primary_body_of`, which has gone through a couple of refactors over time, adding new `Option`s to its returned tuple. Observations:\n\n1. the `fn`'s documentation was not all up to date with the the current return signature.\n2. `FnHeader` and `FnDecl` are always both `Some` or `None`. So I figured it might just return a reference to the full `hir::FnSig`, for simplicity and more precise typing. It's a pure refactor.\n\nI'm learning better by working with code than just reading it, so here goes! If you want to avoid pure refactor PRs that don't really fix anything, I can revert the code change to only update the comment instead.", "tree": {"sha": "7263a1ee859e0e265680158e9e35a8b733b04ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7263a1ee859e0e265680158e9e35a8b733b04ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3928b183db1023c023f8afb4f5dfbee34994051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3928b183db1023c023f8afb4f5dfbee34994051", "html_url": "https://github.com/rust-lang/rust/commit/d3928b183db1023c023f8afb4f5dfbee34994051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3928b183db1023c023f8afb4f5dfbee34994051/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a11c63f85c2b1796852f317358188f9cde236e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a11c63f85c2b1796852f317358188f9cde236e", "html_url": "https://github.com/rust-lang/rust/commit/74a11c63f85c2b1796852f317358188f9cde236e"}, {"sha": "855fa13463eea85cf91b37726c5d2e4351a6da6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/855fa13463eea85cf91b37726c5d2e4351a6da6f", "html_url": "https://github.com/rust-lang/rust/commit/855fa13463eea85cf91b37726c5d2e4351a6da6f"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "92c162c4861b13e5f344c31f720a1f7d9c538fc9", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3928b183db1023c023f8afb4f5dfbee34994051/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3928b183db1023c023f8afb4f5dfbee34994051/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=d3928b183db1023c023f8afb4f5dfbee34994051", "patch": "@@ -257,9 +257,7 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n }\n \n /// If this `DefId` is a \"primary tables entry\", returns\n-/// `Some((body_id, header, decl))` with information about\n-/// its body-id, fn-header and fn-decl (if any). Otherwise,\n-/// returns `None`.\n+/// `Some((body_id, body_ty, fn_sig))`. Otherwise, returns `None`.\n ///\n /// If this function returns `Some`, then `typeck_results(def_id)` will\n /// succeed; if it returns `None`, then `typeck_results(def_id)` may or\n@@ -269,32 +267,28 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::Ty<'_>>, Option<&hir::FnHeader>, Option<&hir::FnDecl<'_>>)> {\n+) -> Option<(hir::BodyId, Option<&hir::Ty<'_>>, Option<&hir::FnSig<'_>>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Const(ref ty, body) | hir::ItemKind::Static(ref ty, _, body) => {\n-                Some((body, Some(ty), None, None))\n-            }\n-            hir::ItemKind::Fn(ref sig, .., body) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n+                Some((body, Some(ty), None))\n             }\n+            hir::ItemKind::Fn(ref sig, .., body) => Some((body, None, Some(&sig))),\n             _ => None,\n         },\n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n+            hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None)),\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n+                Some((body, None, Some(&sig)))\n             }\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::Const(ref ty, body) => Some((body, Some(ty), None, None)),\n-            hir::ImplItemKind::Fn(ref sig, body) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n-            }\n+            hir::ImplItemKind::Const(ref ty, body) => Some((body, Some(ty), None)),\n+            hir::ImplItemKind::Fn(ref sig, body) => Some((body, None, Some(&sig))),\n             _ => None,\n         },\n-        Node::AnonConst(constant) => Some((constant.body, None, None, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None)),\n         _ => None,\n     }\n }\n@@ -362,14 +356,14 @@ fn typeck_with_fallback<'tcx>(\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, body_ty, fn_header, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n+    let (body_id, body_ty, fn_sig) = primary_body_of(tcx, id).unwrap_or_else(|| {\n         span_bug!(span, \"can't type-check body of {:?}\", def_id);\n     });\n     let body = tcx.hir().body(body_id);\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n+        let fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(\n@@ -513,7 +507,7 @@ fn typeck_with_fallback<'tcx>(\n \n         fcx.select_all_obligations_or_error();\n \n-        if fn_decl.is_some() {\n+        if fn_sig.is_some() {\n             fcx.regionck_fn(id, body);\n         } else {\n             fcx.regionck_expr(body);"}]}