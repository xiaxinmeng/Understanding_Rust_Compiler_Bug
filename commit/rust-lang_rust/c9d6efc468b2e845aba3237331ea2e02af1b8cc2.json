{"sha": "c9d6efc468b2e845aba3237331ea2e02af1b8cc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDZlZmM0NjhiMmU4NDVhYmEzMjM3MzMxZWEyZTAyYWYxYjhjYzI=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-03T19:33:50Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-03T19:33:50Z"}, "message": "Add expander unit tests", "tree": {"sha": "05b44e6d8d46ef3fb913415d5282b5e9af95e48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b44e6d8d46ef3fb913415d5282b5e9af95e48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d6efc468b2e845aba3237331ea2e02af1b8cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d6efc468b2e845aba3237331ea2e02af1b8cc2", "html_url": "https://github.com/rust-lang/rust/commit/c9d6efc468b2e845aba3237331ea2e02af1b8cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d6efc468b2e845aba3237331ea2e02af1b8cc2/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d149bb885bc82c56947f23a597d5d2e08f589655", "url": "https://api.github.com/repos/rust-lang/rust/commits/d149bb885bc82c56947f23a597d5d2e08f589655", "html_url": "https://github.com/rust-lang/rust/commit/d149bb885bc82c56947f23a597d5d2e08f589655"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "2dd97b66583d13db451c6e4fe3afe69eeb832b21", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c9d6efc468b2e845aba3237331ea2e02af1b8cc2/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d6efc468b2e845aba3237331ea2e02af1b8cc2/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=c9d6efc468b2e845aba3237331ea2e02af1b8cc2", "patch": "@@ -85,20 +85,20 @@ impl Bindings {\n         let mut b = self\n             .inner\n             .get(name)\n-            .ok_or(ExpandError::BindingError(format!(\"could not find binding {}\", name)))?;\n+            .ok_or(ExpandError::BindingError(format!(\"could not find binding `{}`\", name)))?;\n         for &idx in nesting.iter() {\n             b = match b {\n                 Binding::Simple(_) => break,\n                 Binding::Nested(bs) => bs.get(idx).ok_or(ExpandError::BindingError(format!(\n-                    \"could not find nested binding {}\",\n+                    \"could not find nested binding `{}`\",\n                     name\n                 )))?,\n             };\n         }\n         match b {\n             Binding::Simple(it) => Ok(it),\n             Binding::Nested(_) => Err(ExpandError::BindingError(format!(\n-                \"expected simple binding, found nested binding {}\",\n+                \"expected simple binding, found nested binding `{}`\",\n                 name\n             ))),\n         }\n@@ -113,7 +113,7 @@ impl Bindings {\n                 Some(Binding::Nested(it)) => it.push(value),\n                 _ => {\n                     return Err(ExpandError::BindingError(format!(\n-                        \"nested binding for {} not found\",\n+                        \"could not find binding `{}`\",\n                         key\n                     )));\n                 }\n@@ -216,3 +216,68 @@ fn expand_tt(\n     };\n     Ok(res)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_syntax::{ast, AstNode};\n+\n+    use super::*;\n+    use crate::ast_to_token_tree;\n+\n+    #[test]\n+    fn test_expand_rule() {\n+        assert_err(\n+            \"($i:ident) => ($j)\",\n+            \"foo!{a}\",\n+            ExpandError::BindingError(String::from(\"could not find binding `j`\")),\n+        );\n+\n+        assert_err(\n+            \"($($i:ident);*) => ($i)\",\n+            \"foo!{a}\",\n+            ExpandError::BindingError(String::from(\n+                \"expected simple binding, found nested binding `i`\",\n+            )),\n+        );\n+\n+        assert_err(\"($i) => ($i)\", \"foo!{a}\", ExpandError::UnexpectedToken);\n+        assert_err(\"($i:) => ($i)\", \"foo!{a}\", ExpandError::UnexpectedToken);\n+    }\n+\n+    fn assert_err(macro_body: &str, invocation: &str, err: ExpandError) {\n+        assert_eq!(expand_first(&create_rules(&format_macro(macro_body)), invocation), Err(err));\n+    }\n+\n+    fn format_macro(macro_body: &str) -> String {\n+        format!(\n+            \"\n+        macro_rules! foo {{\n+            {}\n+        }}\n+\",\n+            macro_body\n+        )\n+    }\n+\n+    fn create_rules(macro_definition: &str) -> crate::MacroRules {\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition =\n+            source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        crate::MacroRules::parse(&definition_tt).unwrap()\n+    }\n+\n+    fn expand_first(\n+        rules: &crate::MacroRules,\n+        invocation: &str,\n+    ) -> Result<tt::Subtree, ExpandError> {\n+        let source_file = ast::SourceFile::parse(invocation);\n+        let macro_invocation =\n+            source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+\n+        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+\n+        expand_rule(&rules.rules[0], &invocation_tt)\n+    }\n+}"}]}