{"sha": "3507b2b26b65127f8bee922d5a97dcce9415381a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDdiMmIyNmI2NTEyN2Y4YmVlOTIyZDVhOTdkY2NlOTQxNTM4MWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-18T11:58:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-19T11:40:45Z"}, "message": "Add missing code examples", "tree": {"sha": "52faa17fbada3cdcaeddda697993647beacc112b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52faa17fbada3cdcaeddda697993647beacc112b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3507b2b26b65127f8bee922d5a97dcce9415381a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3507b2b26b65127f8bee922d5a97dcce9415381a", "html_url": "https://github.com/rust-lang/rust/commit/3507b2b26b65127f8bee922d5a97dcce9415381a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3507b2b26b65127f8bee922d5a97dcce9415381a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d7514545cbe83e771a400d04049b96dfb210cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7514545cbe83e771a400d04049b96dfb210cd", "html_url": "https://github.com/rust-lang/rust/commit/f6d7514545cbe83e771a400d04049b96dfb210cd"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "a406bff92c2a4335d827953367a15786c2d4de95", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 241, "deletions": 1, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/3507b2b26b65127f8bee922d5a97dcce9415381a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3507b2b26b65127f8bee922d5a97dcce9415381a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=3507b2b26b65127f8bee922d5a97dcce9415381a", "patch": "@@ -24,9 +24,25 @@ pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains\n     /// the raw information returned by the OS.\n     ///\n-    /// The contents of the returned `stat` are **not** consistent across\n+    /// The contents of the returned [`stat`] are **not** consistent across\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n+    ///\n+    /// [`stat`]: ../../../../std/os/linux/raw/struct.stat.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let stat = meta.as_raw_stat();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     #[rustc_deprecated(since = \"1.8.0\",\n                        reason = \"deprecated in favor of the accessor \\\n@@ -35,54 +51,278 @@ pub trait MetadataExt {\n     fn as_raw_stat(&self) -> &raw::stat;\n \n     /// Returns the device ID on which this file resides.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_dev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_dev(&self) -> u64;\n     /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ino());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ino(&self) -> u64;\n     /// Returns the file type and mode.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mode());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mode(&self) -> u32;\n     /// Returns the number of hard links to file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_nlink());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_nlink(&self) -> u64;\n     /// Returns the user ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_uid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_uid(&self) -> u32;\n     /// Returns the group ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_gid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_gid(&self) -> u32;\n     /// Returns the device ID that this file represents. Only relevant for special file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_rdev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_rdev(&self) -> u64;\n     /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n     ///\n     /// The size of a symbolic link is the length of the pathname it contains,\n     /// without a terminating null byte.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_size());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n     /// Returns the last access time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n     /// Returns the last modification time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n     /// Returns the last status change time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime_nsec(&self) -> i64;\n     /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blksize());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blksize(&self) -> u64;\n     /// Returns the number of blocks allocated to the file, 512-byte units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::prelude::*;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blocks());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blocks(&self) -> u64;\n }"}]}