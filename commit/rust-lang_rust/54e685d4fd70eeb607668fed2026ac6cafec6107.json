{"sha": "54e685d4fd70eeb607668fed2026ac6cafec6107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZTY4NWQ0ZmQ3MGVlYjYwNzY2OGZlZDIwMjZhYzZjYWZlYzYxMDc=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-01T22:18:10Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-03T07:11:11Z"}, "message": "option: mutate() and mutate_default() should return bool\n\nFixes #8047.", "tree": {"sha": "7b3ec24758491399314eb2d1afbbe764d5299fbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3ec24758491399314eb2d1afbbe764d5299fbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54e685d4fd70eeb607668fed2026ac6cafec6107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54e685d4fd70eeb607668fed2026ac6cafec6107", "html_url": "https://github.com/rust-lang/rust/commit/54e685d4fd70eeb607668fed2026ac6cafec6107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54e685d4fd70eeb607668fed2026ac6cafec6107/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9c392389de3de5a65e825413ab9503549db56a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9c392389de3de5a65e825413ab9503549db56a", "html_url": "https://github.com/rust-lang/rust/commit/1f9c392389de3de5a65e825413ab9503549db56a"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "9922106a66380a0003d62a0dd720b9244006529e", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54e685d4fd70eeb607668fed2026ac6cafec6107/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e685d4fd70eeb607668fed2026ac6cafec6107/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=54e685d4fd70eeb607668fed2026ac6cafec6107", "patch": "@@ -1159,7 +1159,7 @@ fn store_non_ref_bindings(bcx: @mut Block,\n                     add_clean_temp_mem(bcx, lldest, binding_info.ty);\n                     temp_cleanups.push(lldest);\n                     temp_cleanups\n-                }\n+                };\n             }\n             TrByRef => {}\n         }"}, {"sha": "547c453b02d1a143f5697cc84ecb189a601ac9c6", "filename": "src/libstd/option.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/54e685d4fd70eeb607668fed2026ac6cafec6107/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e685d4fd70eeb607668fed2026ac6cafec6107/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=54e685d4fd70eeb607668fed2026ac6cafec6107", "patch": "@@ -235,19 +235,24 @@ impl<T> Option<T> {\n         self.take().map_consume_default(def, blk)\n     }\n \n-    /// Apply a function to the contained value or do nothing\n-    pub fn mutate(&mut self, f: &fn(T) -> T) {\n+    /// Apply a function to the contained value or do nothing.\n+    /// Returns true if the contained value was mutated.\n+    pub fn mutate(&mut self, f: &fn(T) -> T) -> bool {\n         if self.is_some() {\n             *self = Some(f(self.take_unwrap()));\n-        }\n+            true\n+        } else { false }\n     }\n \n-    /// Apply a function to the contained value or set it to a default\n-    pub fn mutate_default(&mut self, def: T, f: &fn(T) -> T) {\n+    /// Apply a function to the contained value or set it to a default.\n+    /// Returns true if the contained value was mutated, or false if set to the default.\n+    pub fn mutate_default(&mut self, def: T, f: &fn(T) -> T) -> bool {\n         if self.is_some() {\n             *self = Some(f(self.take_unwrap()));\n+            true\n         } else {\n             *self = Some(def);\n+            false\n         }\n     }\n \n@@ -575,4 +580,18 @@ mod tests {\n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert!(it.next().is_none());\n     }\n+\n+    #[test]\n+    fn test_mutate() {\n+        let mut x = Some(3i);\n+        assert!(x.mutate(|i| i+1));\n+        assert_eq!(x, Some(4i));\n+        assert!(x.mutate_default(0, |i| i+1));\n+        assert_eq!(x, Some(5i));\n+        x = None;\n+        assert!(!x.mutate(|i| i+1));\n+        assert_eq!(x, None);\n+        assert!(!x.mutate_default(0i, |i| i+1));\n+        assert_eq!(x, Some(0i));\n+    }\n }"}]}