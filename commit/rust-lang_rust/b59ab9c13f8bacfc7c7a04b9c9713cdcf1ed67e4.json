{"sha": "b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OWFiOWMxM2Y4YmFjZmM3YzdhMDRiOWM5NzEzY2RjZjFlZDY3ZTQ=", "commit": {"author": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-29T08:36:50Z"}, "committer": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-29T08:36:50Z"}, "message": "Merge pull request #214 from crumblingstatue/clean_exit\n\nOnly exit after running all destructors and flushing stdout", "tree": {"sha": "1b668a94c14b32a0d4047df0cf056dfee8b7418f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b668a94c14b32a0d4047df0cf056dfee8b7418f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "html_url": "https://github.com/rust-lang/rust/commit/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6001b72b12bb4e6846ef68701635f0beb16cacd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6001b72b12bb4e6846ef68701635f0beb16cacd", "html_url": "https://github.com/rust-lang/rust/commit/c6001b72b12bb4e6846ef68701635f0beb16cacd"}, {"sha": "1f974fca014b0538422dfe42fd97723d832384aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f974fca014b0538422dfe42fd97723d832384aa", "html_url": "https://github.com/rust-lang/rust/commit/1f974fca014b0538422dfe42fd97723d832384aa"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "2dc0168aa7f4a5005b3e74fb1daf9b8af423b01f", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "patch": "@@ -10,7 +10,6 @@\n #![feature(path_ext)]\n #![feature(rustc_private)]\n #![cfg(not(test))]\n-#![feature(result_expect)]\n \n #[macro_use]\n extern crate log;\n@@ -52,8 +51,11 @@ fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n     Ok((path, toml))\n }\n \n-fn main() {\n-    let (args, write_mode) = determine_params(std::env::args());\n+fn execute() -> i32 {\n+    let (args, write_mode) = match determine_params(std::env::args()) {\n+        Some(params) => params,\n+        None => return 1,\n+    };\n \n     let config = match lookup_and_read_project_file() {\n         Ok((path, toml)) => {\n@@ -64,43 +66,63 @@ fn main() {\n     };\n \n     run(args, write_mode, Box::new(config));\n-    std::process::exit(0);\n+    0\n }\n \n-fn usage<S: Into<String>>(reason: S) {\n-    print!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[true/false]] <file_name>\", reason.into());\n-    std::process::exit(1);\n+fn main() {\n+    use std::io::Write;\n+    let exit_code = execute();\n+    // Make sure standard output is flushed before we exit\n+    std::io::stdout().flush().unwrap();\n+    // Exit with given exit code.\n+    //\n+    // NOTE: This immediately terminates the process without doing any cleanup,\n+    // so make sure to finish all necessary cleanup before this is called.\n+    std::process::exit(exit_code);\n }\n \n-fn determine_params<I>(args: I) -> (Vec<String>, WriteMode)\n+fn print_usage<S: Into<String>>(reason: S) {\n+    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[true/false]] <file_name>\", reason.into());\n+}\n+\n+fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n     where I: Iterator<Item = String>\n {\n     let arg_prefix = \"-\";\n     let write_mode_prefix = \"--write-mode=\";\n     let help_mode = \"-h\";\n     let long_help_mode = \"--help\";\n     let mut write_mode = WriteMode::Replace;\n+    let mut rustc_args = Vec::new();\n \n     // The NewFile option currently isn't supported because it requires another\n     // parameter, but it can be added later.\n-    let args:Vec<String> = args.filter(|arg| {\n+    for arg in args {\n         if arg.starts_with(write_mode_prefix) {\n-            write_mode = FromStr::from_str(&arg[write_mode_prefix.len()..]).expect(\"Unrecognized write mode\");\n-            false\n+            match FromStr::from_str(&arg[write_mode_prefix.len()..]) {\n+                Ok(mode) => write_mode = mode,\n+                Err(_) => {\n+                    print_usage(\"Unrecognized write mode\");\n+                    return None;\n+                }\n+            }\n         } else if arg.starts_with(help_mode) || arg.starts_with(long_help_mode) {\n-            usage(\"\");\n-            false\n+            print_usage(\"\");\n+            return None;\n         } else if arg.starts_with(arg_prefix) {\n-            usage(\"Invalid argument\");\n-            false\n+            print_usage(\"Invalid argument\");\n+            return None;\n         } else {\n-            true\n+            // Pass everything else to rustc\n+            rustc_args.push(arg);\n         }\n-    }).collect();\n-    if args.len() < 2 {\n-        usage(\"Please provide a file to be formatted\");\n+    }\n+\n+    if rustc_args.len() < 2 {\n+        print_usage(\"Please provide a file to be formatted\");\n+        return None;\n     }\n \n \n-    (args, write_mode)\n+    Some((rustc_args, write_mode))\n }"}]}