{"sha": "412e0404c05f19cd1fb0a8426361abfe2a0455ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMmUwNDA0YzA1ZjE5Y2QxZmIwYTg0MjYzNjFhYmZlMmEwNDU1Y2U=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-05-19T19:23:32Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-05-19T19:27:51Z"}, "message": "deal with `const_evaluatable_checked` in `ConstEquate`", "tree": {"sha": "347933727759b65bcd9a4cdb8548823d254b1354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347933727759b65bcd9a4cdb8548823d254b1354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412e0404c05f19cd1fb0a8426361abfe2a0455ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412e0404c05f19cd1fb0a8426361abfe2a0455ce", "html_url": "https://github.com/rust-lang/rust/commit/412e0404c05f19cd1fb0a8426361abfe2a0455ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412e0404c05f19cd1fb0a8426361abfe2a0455ce/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1773f14a24c49356b384e45ebb45643bc9bef2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1773f14a24c49356b384e45ebb45643bc9bef2c4", "html_url": "https://github.com/rust-lang/rust/commit/1773f14a24c49356b384e45ebb45643bc9bef2c4"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "120680092baaa46f612403e394275976e535dceb", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::ErrorReported;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::error::ExpectedFound;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n@@ -591,7 +591,16 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                             )\n                         }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n-                            ProcessResult::Unchanged\n+                            if c1.has_infer_types_or_consts() || c2.has_infer_types_or_consts() {\n+                                ProcessResult::Unchanged\n+                            } else {\n+                                // Two different constants using generic parameters ~> error.\n+                                let expected_found = ExpectedFound::new(true, c1, c2);\n+                                ProcessResult::Error(FulfillmentErrorCode::CodeConstEquateError(\n+                                    expected_found,\n+                                    TypeError::ConstMismatch(expected_found),\n+                                ))\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "0cad3ddbf7d5476f48b1d37111d42fcc24c910f6", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -557,6 +557,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n+                    if self.tcx().features().const_evaluatable_checked {\n+                        // FIXME: we probably should only try to unify abstract constants\n+                        // if the constants depend on generic parameters.\n+                        //\n+                        // Let's just see where this breaks :shrug:\n+                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                            (c1.val, c2.val)\n+                        {\n+                            if self\n+                                .tcx()\n+                                .try_unify_abstract_consts(((a.def, a.substs), (b.def, b.substs)))\n+                            {\n+                                return Ok(EvaluatedToOk);\n+                            }\n+                        }\n+                    }\n+\n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n                         if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             self.infcx\n@@ -591,7 +608,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             )\n                         }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n-                            Ok(EvaluatedToAmbig)\n+                            if c1.has_infer_types_or_consts() || c2.has_infer_types_or_consts() {\n+                                Ok(EvaluatedToAmbig)\n+                            } else {\n+                                // Two different constants using generic parameters ~> error.\n+                                Ok(EvaluatedToErr)\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "26c4295cd9b183aef134684e062a94e0b5874ac1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -9,6 +9,7 @@ struct Foo<T>(PhantomData<T>);\n fn test<T>() -> [u8; size_of::<T>()] {\n     [0; size_of::<Foo<T>>()]\n     //~^ ERROR unconstrained generic constant\n+    //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "2aeb9b961ffde2717ea55e673b0b5ce0013baeff", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -1,3 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different-fn.rs:10:5\n+   |\n+LL |     [0; size_of::<Foo<T>>()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `size_of::<T>()`, found `size_of::<Foo<T>>()`\n+   |\n+   = note: expected type `size_of::<T>()`\n+              found type `size_of::<Foo<T>>()`\n+\n error: unconstrained generic constant\n   --> $DIR/different-fn.rs:10:9\n    |\n@@ -6,5 +15,6 @@ LL |     [0; size_of::<Foo<T>>()]\n    |\n    = help: try adding a `where` bound using this expression: `where [(); size_of::<Foo<T>>()]:`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0f36ce383a84c43fa5a0f98b34997756b2782672", "filename": "src/test/ui/const-generics/const_evaluatable_checked/evaluated-to-ambig.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fevaluated-to-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fevaluated-to-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fevaluated-to-ambig.rs?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+// We previously always returned ambiguity when equating generic consts, even if they\n+// only contain generic parameters. This is incorrect as trying to unify `N > 1` with `M > 1`\n+// should fail.\n+#![allow(incomplete_features)]\n+#![feature(const_generics, const_evaluatable_checked)]\n+\n+enum Assert<const COND: bool> {}\n+trait IsTrue {}\n+impl IsTrue for Assert<true> {}\n+\n+struct Foo<const N: usize, const M: usize>;\n+trait Bar<const N: usize, const M: usize> {}\n+impl<const N: usize, const M: usize> Bar<N, M> for Foo<N, M>\n+where\n+    Assert<{ N > 1 }>: IsTrue,\n+    Assert<{ M > 1 }>: IsTrue,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "efbcdc3d2b78391cb270c58e072d397df4295b4d", "filename": "src/test/ui/const-generics/issues/issue-62504.full.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -1,3 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-62504.rs:18:21\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n+   |\n+   = note: expected type `X`\n+              found type `Self::SIZE`\n+\n error: constant expression depends on a generic parameter\n   --> $DIR/issue-62504.rs:18:25\n    |\n@@ -6,5 +15,6 @@ LL |         ArrayHolder([0; Self::SIZE])\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1b70cd1c37669eecdf88145c301653c9551273be", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412e0404c05f19cd1fb0a8426361abfe2a0455ce/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=412e0404c05f19cd1fb0a8426361abfe2a0455ce", "patch": "@@ -17,7 +17,7 @@ impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n         //~^ ERROR constant expression depends on a generic parameter\n-        //[min]~| ERROR mismatched types\n+        //~| ERROR mismatched types\n     }\n }\n "}]}