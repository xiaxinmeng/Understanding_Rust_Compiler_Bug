{"sha": "230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDIzNGYzYThlYjM4ZGNmYTI2ZDA4NmM5YzZlNjFiZTQ4ZjQ2YWM=", "commit": {"author": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-07T14:43:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:19Z"}, "message": "Add information in case of markdown block code test failure", "tree": {"sha": "174e8a2e7eb4b7aaa26ab53ee4b0d7c6746f236d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174e8a2e7eb4b7aaa26ab53ee4b0d7c6746f236d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "html_url": "https://github.com/rust-lang/rust/commit/230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230234f3a8eb38dcfa26d086c9c6e61be48f46ac/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "html_url": "https://github.com/rust-lang/rust/commit/57ecd7aa4bc8dfd07fb0888479b25e53daf46140"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "3df476907d953cbe849648a993f52b0b288f132d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/230234f3a8eb38dcfa26d086c9c6e61be48f46ac/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230234f3a8eb38dcfa26d086c9c6e61be48f46ac/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "patch": "@@ -448,7 +448,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n-                           block_info.compile_fail, block_info.error_codes);\n+                           block_info.compile_fail, block_info.error_codes,\n+                           block_info.original);\n         }\n     }\n \n@@ -488,6 +489,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n \n #[derive(Eq, PartialEq, Clone, Debug)]\n struct LangString {\n+    original: String,\n     should_panic: bool,\n     no_run: bool,\n     ignore: bool,\n@@ -500,6 +502,7 @@ struct LangString {\n impl LangString {\n     fn all_false() -> LangString {\n         LangString {\n+            original: String::new(),\n             should_panic: false,\n             no_run: false,\n             ignore: false,\n@@ -521,6 +524,7 @@ impl LangString {\n             allow_error_code_check = true;\n         }\n \n+        data.original = string.to_owned();\n         let tokens = string.split(|c: char|\n             !(c == '_' || c == '-' || c.is_alphanumeric())\n         );\n@@ -647,6 +651,7 @@ mod tests {\n                 test_harness: test_harness,\n                 compile_fail: compile_fail,\n                 error_codes: error_codes,\n+                original: s.to_owned(),\n             })\n         }\n "}, {"sha": "00327007dd00d94a40731e271416e98134cfe1ed", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/230234f3a8eb38dcfa26d086c9c6e61be48f46ac/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230234f3a8eb38dcfa26d086c9c6e61be48f46ac/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "patch": "@@ -161,13 +161,15 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            externs: Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-           maybe_sysroot: Option<PathBuf>) {\n+           maybe_sysroot: Option<PathBuf>,\n+           original: &str) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), as_test_harness, opts);\n+    let new_test = maketest(test, Some(cratename), as_test_harness, opts);\n+    let test = format!(\"```{}\\n{}\\n```\\n\", original, test);\n     let input = config::Input::Str {\n         name: driver::anon_src(),\n-        input: test.to_owned(),\n+        input: new_test.to_owned(),\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n@@ -249,20 +251,22 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                     if count > 0 && !compile_fail {\n                         sess.fatal(\"aborting due to previous error(s)\")\n                     } else if count == 0 && compile_fail {\n-                        panic!(\"test compiled while it wasn't supposed to\")\n+                        panic!(\"test compiled while it wasn't supposed to:\\n\\n{}\\n\", test)\n                     }\n                     if count > 0 && error_codes.len() > 0 {\n                         let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n                         error_codes.retain(|err| !out.contains(err));\n                     }\n                 }\n-                Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),\n+                Ok(()) if compile_fail => {\n+                    panic!(\"test compiled while it wasn't supposed to:\\n\\n{}\\n\", test)\n+                }\n                 _ => {}\n             }\n         }\n         Err(_) => {\n             if !compile_fail {\n-                panic!(\"couldn't compile the test\");\n+                panic!(\"couldn't compile the test:\\n\\n{}\\n\", test);\n             }\n             if error_codes.len() > 0 {\n                 let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n@@ -272,7 +276,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n \n     if error_codes.len() > 0 {\n-        panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n+        panic!(\"Some expected error codes were not found: {:?}\\n\\n{}\\n\", error_codes, test);\n     }\n \n     if no_run { return }\n@@ -294,17 +298,18 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     cmd.env(var, &newpath);\n \n     match cmd.output() {\n-        Err(e) => panic!(\"couldn't run the test: {}{}\", e,\n+        Err(e) => panic!(\"couldn't run the test: {}{}\\n\\n{}\\n\", e,\n                         if e.kind() == io::ErrorKind::PermissionDenied {\n                             \" - maybe your tempdir is mounted with noexec?\"\n-                        } else { \"\" }),\n+                        } else { \"\" }, test),\n         Ok(out) => {\n             if should_panic && out.status.success() {\n-                panic!(\"test executable succeeded when it should have failed\");\n+                panic!(\"test executable succeeded when it should have failed\\n\\n{}\\n\", test);\n             } else if !should_panic && !out.status.success() {\n-                panic!(\"test executable failed:\\n{}\\n{}\",\n+                panic!(\"test executable failed:\\n{}\\n{}\\n\\n{}\\n\",\n                        str::from_utf8(&out.stdout).unwrap_or(\"\"),\n-                       str::from_utf8(&out.stderr).unwrap_or(\"\"));\n+                       str::from_utf8(&out.stderr).unwrap_or(\"\"),\n+                       test);\n             }\n         }\n     }\n@@ -406,7 +411,8 @@ impl Collector {\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n-                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>) {\n+                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n+                    original: String) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -446,7 +452,8 @@ impl Collector {\n                                 compile_fail,\n                                 error_codes,\n                                 &opts,\n-                                maybe_sysroot)\n+                                maybe_sysroot,\n+                                &original)\n                     })\n                 } {\n                     Ok(()) => (),"}]}