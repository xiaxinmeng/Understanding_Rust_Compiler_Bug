{"sha": "1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTFmNjBlZTJmYWQxZGI2ZWQwNjE1YmFlOGVkOTljZTA4YjBmZGQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-17T13:32:27Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-17T13:32:27Z"}, "message": "Change unreachable patterns ICEs to warnings\n\nAllow code with unreachable `?` and `for` patterns to compile.\nAdd some tests.", "tree": {"sha": "fbdc6696124690c881c1833edbe8d816cd6e1d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbdc6696124690c881c1833edbe8d816cd6e1d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "html_url": "https://github.com/rust-lang/rust/commit/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31dee37a15961f51e25dfea66b1364e051be1a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/31dee37a15961f51e25dfea66b1364e051be1a65", "html_url": "https://github.com/rust-lang/rust/commit/31dee37a15961f51e25dfea66b1364e051be1a65"}], "stats": {"total": 145, "additions": 125, "deletions": 20}, "files": [{"sha": "698db3f7169aa3dab111e5598d30fd8bc1966c61", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "patch": "@@ -51,6 +51,7 @@ use util::nodemap::{NodeMap, FxHashMap};\n use std::collections::BTreeMap;\n use std::iter;\n \n+use syntax::attr;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ptr::P;\n@@ -1814,7 +1815,8 @@ impl<'a> LoweringContext<'a> {\n                     let match_expr = P(self.expr_match(e.span,\n                                                        into_iter_expr,\n                                                        hir_vec![iter_arm],\n-                                                       hir::MatchSource::ForLoopDesugar));\n+                                                       hir::MatchSource::ForLoopDesugar,\n+                                                       ThinVec::new()));\n \n                     // `{ let _result = ...; _result }`\n                     // underscore prevents an unused_variables lint if the head diverges\n@@ -1833,8 +1835,12 @@ impl<'a> LoweringContext<'a> {\n                 ExprKind::Try(ref sub_expr) => {\n                     // to:\n                     //\n+                    // #[allow(unreachable_patterns)]\n                     // match Carrier::translate(<expr>) {\n-                    //     Ok(val) => val,\n+                    //     Ok(val) => {\n+                    //         #[allow(unreachable_code)]\n+                    //         val\n+                    //     }\n                     //     Err(err) => return Carrier::from_error(From::from(err))\n                     // }\n                     let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n@@ -1849,14 +1855,31 @@ impl<'a> LoweringContext<'a> {\n                         P(self.expr_call(e.span, path, hir_vec![sub_expr]))\n                     };\n \n-                    // Ok(val) => val\n+                    // Ok(val) => { #[allow(unreachable_code)] val }\n                     let ok_arm = {\n                         let val_ident = self.str_to_ident(\"val\");\n                         let val_pat = self.pat_ident(e.span, val_ident);\n-                        let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n+                        // #[allow(unreachable_code)]\n+                        let val_attr = {\n+                            // allow(unreachable_code)\n+                            let allow = {\n+                                let allow_ident = self.str_to_ident(\"allow\");\n+                                let uc_ident = self.str_to_ident(\"unreachable_code\");\n+                                let uc_meta_item = attr::mk_spanned_word_item(e.span, uc_ident);\n+                                let uc_nested_meta_item = NestedMetaItemKind::MetaItem(uc_meta_item);\n+                                let uc_spanned = respan(e.span, uc_nested_meta_item);\n+                                attr::mk_spanned_list_item(e.span, allow_ident, vec![uc_spanned])\n+                            };\n+                            attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n+                        };\n+                        let attrs = From::from(vec![val_attr]);\n+                        let val_expr = P(self.expr_ident_with_attrs(e.span, val_ident, val_pat.id, attrs));\n+                        let val_block = P(self.block_expr(val_expr));\n+                        let ok_expr = P(self.expr_block(val_block, ThinVec::new()));\n+\n                         let ok_pat = self.pat_ok(e.span, val_pat);\n \n-                        self.arm(hir_vec![ok_pat], val_expr)\n+                        self.arm(hir_vec![ok_pat], ok_expr)\n                     };\n \n                     // Err(err) => return Carrier::from_error(From::from(err))\n@@ -1885,8 +1908,23 @@ impl<'a> LoweringContext<'a> {\n                         self.arm(hir_vec![err_pat], ret_expr)\n                     };\n \n+                    // #[allow(unreachable_patterns)]\n+                    let match_attr = {\n+                        // allow(unreachable_patterns)\n+                        let allow = {\n+                            let allow_ident = self.str_to_ident(\"allow\");\n+                            let up_ident = self.str_to_ident(\"unreachable_patterns\");\n+                            let up_meta_item = attr::mk_spanned_word_item(e.span, up_ident);\n+                            let up_nested_meta_item = NestedMetaItemKind::MetaItem(up_meta_item);\n+                            let up_spanned = respan(e.span, up_nested_meta_item);\n+                            attr::mk_spanned_list_item(e.span, allow_ident, vec![up_spanned])\n+                        };\n+                        attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n+                    };\n+\n+                    let attrs = From::from(vec![match_attr]);\n                     return self.expr_match(e.span, discr, hir_vec![err_arm, ok_arm],\n-                                           hir::MatchSource::TryDesugar);\n+                                           hir::MatchSource::TryDesugar, attrs);\n                 }\n \n                 ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n@@ -2031,6 +2069,13 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr_ident(&mut self, span: Span, id: Name, binding: NodeId) -> hir::Expr {\n+        self.expr_ident_with_attrs(span, id, binding, ThinVec::new())\n+    }\n+\n+    fn expr_ident_with_attrs(&mut self, span: Span,\n+                                        id: Name,\n+                                        binding: NodeId,\n+                                        attrs: ThinVec<Attribute>) -> hir::Expr {\n         let def = {\n             let defs = self.resolver.definitions();\n             Def::Local(defs.local_def_id(binding))\n@@ -2042,7 +2087,7 @@ impl<'a> LoweringContext<'a> {\n             segments: hir_vec![hir::PathSegment::from_name(id)],\n         })));\n \n-        self.expr(span, expr_path, ThinVec::new())\n+        self.expr(span, expr_path, attrs)\n     }\n \n     fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {\n@@ -2062,9 +2107,10 @@ impl<'a> LoweringContext<'a> {\n                   span: Span,\n                   arg: P<hir::Expr>,\n                   arms: hir::HirVec<hir::Arm>,\n-                  source: hir::MatchSource)\n+                  source: hir::MatchSource,\n+                  attrs: ThinVec<Attribute>)\n                   -> hir::Expr {\n-        self.expr(span, hir::ExprMatch(arg, arms, source), ThinVec::new())\n+        self.expr(span, hir::ExprMatch(arg, arms, source), attrs)\n     }\n \n     fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr {"}, {"sha": "5046920f5e3c34e18cf25fe53e649cdcae31ed7a", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "patch": "@@ -308,14 +308,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 .emit();\n                         },\n \n-                        hir::MatchSource::ForLoopDesugar => {\n-                            // this is a bug, because on `match iter.next()` we cover\n-                            // `Some(<head>)` and `None`. It's impossible to have an unreachable\n-                            // pattern\n-                            // (see libsyntax/ext/expand.rs for the full expansion of a for loop)\n-                            span_bug!(pat.span, \"unreachable for-loop pattern\")\n-                        },\n-\n+                        hir::MatchSource::ForLoopDesugar |\n                         hir::MatchSource::Normal => {\n                             let mut diagnostic = Diagnostic::new(Level::Warning,\n                                                                  \"unreachable pattern\");\n@@ -329,9 +322,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                                             hir_pat.id, diagnostic);\n                         },\n \n-                        hir::MatchSource::TryDesugar => {\n-                            span_bug!(pat.span, \"unreachable try pattern\")\n-                        },\n+                        hir::MatchSource::TryDesugar => {}\n                     }\n                 }\n                 Useful => (),"}, {"sha": "f8d6c3de2ab03824668244a8d5ae5ed8e0bcf3c4", "filename": "src/test/compile-fail/recursive-types-are-not-uninhabited.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs?ref=1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//#![feature(never_type)]\n+\n+struct R<'a> {\n+    r: &'a R<'a>,\n+}\n+\n+fn foo(res: Result<u32, &R>) -> u32 {\n+    let Ok(x) = res;\n+    //~^ ERROR refutable pattern\n+    x\n+}\n+\n+fn main() {\n+    foo(Ok(23));\n+}\n+"}, {"sha": "6147692658f945f5d8b10013a566dbe396f04f1e", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![deny(unreachable_patterns)]\n+\n+fn main() {\n+    let x: &[!] = &[];\n+\n+    for _ in x {}\n+    //~^ ERROR unreachable pattern\n+}\n+"}, {"sha": "f58d5c8de0dcc223e6f104e008a81fd0dc09645f", "filename": "src/test/run-pass/unreachable-try-pattern.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Frun-pass%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd/src%2Ftest%2Frun-pass%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-try-pattern.rs?ref=1c51f60ee2fad1db6ed0615bae8ed99ce08b0fdd", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![deny(unreachable_code)]\n+#![deny(unreachable_patterns)]\n+\n+fn bar(x: Result<!, i32>) -> Result<u32, i32> {\n+    x?\n+}\n+\n+fn main() {\n+    let _ = bar(Err(123));\n+}\n+"}]}