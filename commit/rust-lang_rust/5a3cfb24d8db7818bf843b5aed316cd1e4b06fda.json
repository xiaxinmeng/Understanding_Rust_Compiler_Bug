{"sha": "5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "node_id": "C_kwDOAAsO6NoAKDVhM2NmYjI0ZDhkYjc4MThiZjg0M2I1YWVkMzE2Y2QxZTRiMDZmZGE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T18:37:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T18:37:01Z"}, "message": "Merge codegen of several simd intrinsics\n\nThis reduces code duplication", "tree": {"sha": "1bbf2204b17ffaa5041cea77820e0328d03145ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bbf2204b17ffaa5041cea77820e0328d03145ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "html_url": "https://github.com/rust-lang/rust/commit/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d699d37b0d8a9b67c6c02234383c3302517d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d699d37b0d8a9b67c6c02234383c3302517d59", "html_url": "https://github.com/rust-lang/rust/commit/c1d699d37b0d8a9b67c6c02234383c3302517d59"}], "stats": {"total": 57, "additions": 16, "deletions": 41}, "files": [{"sha": "b4aa5c48ccb0a0efc9064e425c4dd19ebd850643", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 16, "deletions": 41, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "patch": "@@ -280,7 +280,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n-        simd_add | simd_sub | simd_mul | simd_div, (c x, c y) {\n+        simd_add | simd_sub | simd_mul | simd_div | simd_rem\n+        | simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -295,57 +296,31 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n                 (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n                 (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n+                (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n \n                 (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n                 (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n                 (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n                 (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n+                (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n \n                 (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n                 (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n                 (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n                 (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n+                (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n+                    \"fmodf\",\n+                    vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                    vec![AbiParam::new(types::F32)],\n+                    &[x_lane, y_lane],\n+                )[0],\n+                (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n+                    \"fmod\",\n+                    vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                    vec![AbiParam::new(types::F64)],\n+                    &[x_lane, y_lane],\n+                )[0],\n \n-                _ => unreachable!(),\n-            });\n-        };\n-        simd_rem, (c x, c y) {\n-            if !x.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n-                return;\n-            }\n-\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n-                match lane_ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().srem(x_lane, y_lane),\n-                    ty::Float(FloatTy::F32) => fx.lib_call(\n-                        \"fmodf\",\n-                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n-                        vec![AbiParam::new(types::F32)],\n-                        &[x_lane, y_lane],\n-                    )[0],\n-                    ty::Float(FloatTy::F64) => fx.lib_call(\n-                        \"fmod\",\n-                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n-                        vec![AbiParam::new(types::F64)],\n-                        &[x_lane, y_lane],\n-                    )[0],\n-                    _ => unreachable!(\"{:?}\", lane_ty),\n-                }\n-            });\n-        };\n-        simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n-            if !x.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n-                return;\n-            }\n-\n-            // FIXME use vector instructions when possible\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| match (\n-                lane_ty.kind(),\n-                intrinsic,\n-            ) {\n                 (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n                 (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n                 (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),"}]}