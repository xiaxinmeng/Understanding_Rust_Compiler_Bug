{"sha": "1f71a0f48d18d80ff3be6970d582c5a67f976329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzFhMGY0OGQxOGQ4MGZmM2JlNjk3MGQ1ODJjNWE2N2Y5NzYzMjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T13:55:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T13:55:23Z"}, "message": "Clean up some FIXMEs related to impls", "tree": {"sha": "0abde983cf60988c8309b1562a293920b6aadb17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0abde983cf60988c8309b1562a293920b6aadb17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f71a0f48d18d80ff3be6970d582c5a67f976329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f71a0f48d18d80ff3be6970d582c5a67f976329", "html_url": "https://github.com/rust-lang/rust/commit/1f71a0f48d18d80ff3be6970d582c5a67f976329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f71a0f48d18d80ff3be6970d582c5a67f976329/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a20dda7eacf84faa64be0031c67e2169928962f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a20dda7eacf84faa64be0031c67e2169928962f", "html_url": "https://github.com/rust-lang/rust/commit/3a20dda7eacf84faa64be0031c67e2169928962f"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "6baef415ccd3085c7a34452dbd77fec9541db9c9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f71a0f48d18d80ff3be6970d582c5a67f976329/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f71a0f48d18d80ff3be6970d582c5a67f976329/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1f71a0f48d18d80ff3be6970d582c5a67f976329", "patch": "@@ -5354,7 +5354,7 @@ fn collect_item(ccx: @crate_ctxt, abi: @mutable option::t<ast::native_abi>,\n         register_fn(ccx, i.span, new_pt, \"obj_ctor\", tps, ctor_id);\n       }\n       ast::item_impl(tps, _, _, methods) {\n-        let name = ccx.names.next(i.ident);\n+        let name = i.ident + int::str(i.id);\n         for m in methods {\n             register_fn(ccx, i.span, pt + [name, m.ident],\n                         \"impl_method\", tps + m.tps, m.id);\n@@ -5418,9 +5418,7 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n       ast::item_impl(tps, some(@{node: ast::ty_path(_, id), _}), _, ms) {\n         let i_did = ast_util::def_id_of_def(ccx.tcx.def_map.get(id));\n         let ty = ty::lookup_item_type(ccx.tcx, i_did).ty;\n-        // FIXME[impl] use the same name as used in collect_items, for\n-        // slightly more consistent symbol names?\n-        let new_pt = pt + [ccx.names.next(it.ident)];\n+        let new_pt = pt + [it.ident + int::str(it.id), \"wrap\"];\n         let extra_tps = vec::map(tps, {|p| param_bounds(ccx, p)});\n         let tbl = C_struct(vec::map(*ty::iface_methods(ccx.tcx, i_did), {|im|\n             alt vec::find(ms, {|m| m.ident == im.ident}) {"}, {"sha": "d426aa290e08519c083bc34555f627e556ed0b29", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f71a0f48d18d80ff3be6970d582c5a67f976329/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f71a0f48d18d80ff3be6970d582c5a67f976329/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1f71a0f48d18d80ff3be6970d582c5a67f976329", "patch": "@@ -2920,8 +2920,6 @@ mod dict {\n                             bind_params(fcx, self_ty, n_tps)\n                         } else { {vars: [], ty: self_ty} };\n                         let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n-                        // FIXME[impl] don't do this in fcx (or make\n-                        // unify transactional by scrubbing bindings on fail)\n                         alt unify::unify(fcx, ty, self_ty) {\n                           ures_ok(_) {\n                             if option::is_some(found) {"}]}