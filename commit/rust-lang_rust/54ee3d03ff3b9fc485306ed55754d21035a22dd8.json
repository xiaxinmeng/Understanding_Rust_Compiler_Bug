{"sha": "54ee3d03ff3b9fc485306ed55754d21035a22dd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWUzZDAzZmYzYjlmYzQ4NTMwNmVkNTU3NTRkMjEwMzVhMjJkZDg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-13T01:29:15Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:06:17Z"}, "message": "Port check_match from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "ccb35fada1396305f2df8f58432d2b48f0cd123a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb35fada1396305f2df8f58432d2b48f0cd123a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ee3d03ff3b9fc485306ed55754d21035a22dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ee3d03ff3b9fc485306ed55754d21035a22dd8", "html_url": "https://github.com/rust-lang/rust/commit/54ee3d03ff3b9fc485306ed55754d21035a22dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ee3d03ff3b9fc485306ed55754d21035a22dd8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356341192fdf8234b6a6ff8c3385ba227928ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/356341192fdf8234b6a6ff8c3385ba227928ae9a", "html_url": "https://github.com/rust-lang/rust/commit/356341192fdf8234b6a6ff8c3385ba227928ae9a"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "f3d7565da26263f0806abb2d5b9e997e29e7fd79", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/54ee3d03ff3b9fc485306ed55754d21035a22dd8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ee3d03ff3b9fc485306ed55754d21035a22dd8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=54ee3d03ff3b9fc485306ed55754d21035a22dd8", "patch": "@@ -25,35 +25,50 @@ use extra::sort;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};\n use syntax::codemap::{span, dummy_sp, spanned};\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::{Visitor,fn_kind};\n \n pub struct MatchCheckCtxt {\n     tcx: ty::ctxt,\n     method_map: method_map,\n     moves_map: moves::MovesMap\n }\n \n+struct CheckMatchVisitor {\n+    cx: @MatchCheckCtxt\n+}\n+\n+impl Visitor<()> for CheckMatchVisitor {\n+    fn visit_expr(&mut self, ex:@expr, e:()) {\n+        check_expr(self, self.cx, ex, e);\n+    }\n+    fn visit_local(&mut self, l:@Local, e:()) {\n+        check_local(self, self.cx, l, e);\n+    }\n+    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block, s:span, n:NodeId, e:()) {\n+        check_fn(self, self.cx, fk, fd, b, s, n, e);\n+    }\n+}\n+\n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: method_map,\n                    moves_map: moves::MovesMap,\n                    crate: &Crate) {\n     let cx = @MatchCheckCtxt {tcx: tcx,\n                               method_map: method_map,\n                               moves_map: moves_map};\n-    oldvisit::visit_crate(crate, ((), oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: |a,b| check_expr(cx, a, b),\n-        visit_local: |a,b| check_local(cx, a, b),\n-        visit_fn: |kind, decl, body, sp, id, (e, v)|\n-            check_fn(cx, kind, decl, body, sp, id, (e, v)),\n-        .. *oldvisit::default_visitor::<()>()\n-    })));\n+    let mut v = CheckMatchVisitor { cx: cx };\n+\n+    visit::walk_crate(&mut v, crate, ());\n+\n     tcx.sess.abort_if_errors();\n }\n \n-pub fn check_expr(cx: @MatchCheckCtxt,\n+pub fn check_expr(v: &mut CheckMatchVisitor,\n+                  cx: @MatchCheckCtxt,\n                   ex: @expr,\n-                  (s, v): ((), oldvisit::vt<()>)) {\n-    oldvisit::visit_expr(ex, (s, v));\n+                  s: ()) {\n+    visit::walk_expr(v, ex, s);\n     match ex.node {\n       expr_match(scrut, ref arms) => {\n         // First, check legality of move bindings.\n@@ -787,10 +802,11 @@ pub fn default(cx: &MatchCheckCtxt, r: &[@pat]) -> Option<~[@pat]> {\n     else { None }\n }\n \n-pub fn check_local(cx: &MatchCheckCtxt,\n+pub fn check_local(v: &mut CheckMatchVisitor,\n+                   cx: &MatchCheckCtxt,\n                    loc: @Local,\n-                   (s, v): ((), oldvisit::vt<()>)) {\n-    oldvisit::visit_local(loc, (s, v));\n+                   s: ()) {\n+    visit::walk_local(v, loc, s);\n     if is_refutable(cx, loc.pat) {\n         cx.tcx.sess.span_err(loc.pat.span,\n                              \"refutable pattern in local binding\");\n@@ -800,15 +816,15 @@ pub fn check_local(cx: &MatchCheckCtxt,\n     check_legality_of_move_bindings(cx, false, [ loc.pat ]);\n }\n \n-pub fn check_fn(cx: &MatchCheckCtxt,\n-                kind: &oldvisit::fn_kind,\n+pub fn check_fn(v: &mut CheckMatchVisitor,\n+                cx: &MatchCheckCtxt,\n+                kind: &visit::fn_kind,\n                 decl: &fn_decl,\n                 body: &Block,\n                 sp: span,\n                 id: NodeId,\n-                (s, v): ((),\n-                         oldvisit::vt<()>)) {\n-    oldvisit::visit_fn(kind, decl, body, sp, id, (s, v));\n+                s: ()) {\n+    visit::walk_fn(v, kind, decl, body, sp, id, s);\n     for input in decl.inputs.iter() {\n         if is_refutable(cx, input.pat) {\n             cx.tcx.sess.span_err(input.pat.span,"}]}