{"sha": "f41aa161c223b6490486d81339f4da91e80b8c0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MWFhMTYxYzIyM2I2NDkwNDg2ZDgxMzM5ZjRkYTkxZTgwYjhjMGE=", "commit": {"author": {"name": "Arlo Siemsen", "email": "arsiem@microsoft.com", "date": "2020-04-12T03:21:51Z"}, "committer": {"name": "Arlo Siemsen", "email": "arsiem@microsoft.com", "date": "2020-04-12T06:26:46Z"}, "message": "Normalize source when loading external foreign source into SourceMap\n\nThe compiler normalizes source when reading files initially (removes BOMs, etc), but not when loading external sources.\n\nFixes #70874 by normalizing when loading external sources too. Adds a test to verify normalization.", "tree": {"sha": "c98df2b4476faacacb03a89e220b3ffb48aa2d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98df2b4476faacacb03a89e220b3ffb48aa2d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41aa161c223b6490486d81339f4da91e80b8c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41aa161c223b6490486d81339f4da91e80b8c0a", "html_url": "https://github.com/rust-lang/rust/commit/f41aa161c223b6490486d81339f4da91e80b8c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41aa161c223b6490486d81339f4da91e80b8c0a/comments", "author": {"login": "arlosi", "id": 704597, "node_id": "MDQ6VXNlcjcwNDU5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/704597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arlosi", "html_url": "https://github.com/arlosi", "followers_url": "https://api.github.com/users/arlosi/followers", "following_url": "https://api.github.com/users/arlosi/following{/other_user}", "gists_url": "https://api.github.com/users/arlosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/arlosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arlosi/subscriptions", "organizations_url": "https://api.github.com/users/arlosi/orgs", "repos_url": "https://api.github.com/users/arlosi/repos", "events_url": "https://api.github.com/users/arlosi/events{/privacy}", "received_events_url": "https://api.github.com/users/arlosi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arlosi", "id": 704597, "node_id": "MDQ6VXNlcjcwNDU5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/704597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arlosi", "html_url": "https://github.com/arlosi", "followers_url": "https://api.github.com/users/arlosi/followers", "following_url": "https://api.github.com/users/arlosi/following{/other_user}", "gists_url": "https://api.github.com/users/arlosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/arlosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arlosi/subscriptions", "organizations_url": "https://api.github.com/users/arlosi/orgs", "repos_url": "https://api.github.com/users/arlosi/repos", "events_url": "https://api.github.com/users/arlosi/events{/privacy}", "received_events_url": "https://api.github.com/users/arlosi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abbd8878d3b67238f3611b0587c704ba94f39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abbd8878d3b67238f3611b0587c704ba94f39c", "html_url": "https://github.com/rust-lang/rust/commit/42abbd8878d3b67238f3611b0587c704ba94f39c"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "85a870ae34c11b0bbd97a5fdb96b3c1a3ba63a39", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f41aa161c223b6490486d81339f4da91e80b8c0a/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41aa161c223b6490486d81339f4da91e80b8c0a/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=f41aa161c223b6490486d81339f4da91e80b8c0a", "patch": "@@ -1192,8 +1192,10 @@ impl SourceFile {\n                 kind: src_kind @ ExternalSourceKind::AbsentOk, ..\n             } = &mut *external_src\n             {\n-                if let Some(src) = src {\n+                if let Some(mut src) = src {\n+                    // The src_hash needs to be computed on the pre-normalized src.\n                     if self.src_hash.matches(&src) {\n+                        normalize_src(&mut src, BytePos::from_usize(0));\n                         *src_kind = ExternalSourceKind::Present(Lrc::new(src));\n                         return true;\n                     }"}, {"sha": "b8459eee4ecf0e6a84ba86cd6e0ff48b32a5c114", "filename": "src/librustc_span/source_map/tests.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f41aa161c223b6490486d81339f4da91e80b8c0a/src%2Flibrustc_span%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41aa161c223b6490486d81339f4da91e80b8c0a/src%2Flibrustc_span%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map%2Ftests.rs?ref=f41aa161c223b6490486d81339f4da91e80b8c0a", "patch": "@@ -168,6 +168,62 @@ fn span_merging_fail() {\n     assert!(sm.merge_spans(span1, span2).is_none());\n }\n \n+/// Tests loading an external source file that requires normalization.\n+#[test]\n+fn t10() {\n+    let sm = SourceMap::new(FilePathMapping::empty());\n+    let unnormalized = \"first line.\\r\\nsecond line\";\n+    let normalized = \"first line.\\nsecond line\";\n+\n+    let src_file = sm.new_source_file(PathBuf::from(\"blork.rs\").into(), unnormalized.to_string());\n+\n+    assert_eq!(src_file.src.as_ref().unwrap().as_ref(), normalized);\n+    assert!(\n+        src_file.src_hash.matches(unnormalized),\n+        \"src_hash should use the source before normalization\"\n+    );\n+\n+    let SourceFile {\n+        name,\n+        name_was_remapped,\n+        src_hash,\n+        start_pos,\n+        end_pos,\n+        lines,\n+        multibyte_chars,\n+        non_narrow_chars,\n+        normalized_pos,\n+        name_hash,\n+        ..\n+    } = (*src_file).clone();\n+\n+    let imported_src_file = sm.new_imported_source_file(\n+        name,\n+        name_was_remapped,\n+        src_hash,\n+        name_hash,\n+        (end_pos - start_pos).to_usize(),\n+        CrateNum::new(0),\n+        lines,\n+        multibyte_chars,\n+        non_narrow_chars,\n+        normalized_pos,\n+        start_pos,\n+        end_pos,\n+    );\n+\n+    assert!(\n+        imported_src_file.external_src.borrow().get_source().is_none(),\n+        \"imported source file should not have source yet\"\n+    );\n+    imported_src_file.add_external_src(|| Some(unnormalized.to_string()));\n+    assert_eq!(\n+        imported_src_file.external_src.borrow().get_source().unwrap().as_ref(),\n+        normalized,\n+        \"imported source file should be normalized\"\n+    );\n+}\n+\n /// Returns the span corresponding to the `n`th occurrence of `substring` in `source_text`.\n trait SourceMapExtension {\n     fn span_substr("}]}