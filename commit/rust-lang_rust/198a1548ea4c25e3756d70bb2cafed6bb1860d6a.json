{"sha": "198a1548ea4c25e3756d70bb2cafed6bb1860d6a", "node_id": "C_kwDOAAsO6NoAKDE5OGExNTQ4ZWE0YzI1ZTM3NTZkNzBiYjJjYWZlZDZiYjE4NjBkNmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-09T16:26:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-09T16:26:26Z"}, "message": "Rollup merge of #95369 - jyn514:test-rustdoc, r=Mark-Simulacrum\n\nFix `x test src/librustdoc` with `download-rustc` enabled\n\nThe problem was two-fold:\n- Bootstrap was hard-coding that unit tests should always run with stage1, not stage2, and\n- It hard-coded the sysroot layout in stage1, which puts libLLVM.so in `lib/rustlib/` instead of just `lib/`.\n\nThis also takes the liberty of fixing `test src/librustdoc --no-doc`, which has been broken since it was first added. It would be nice at some point to unify this logic with other tests; I opened a Zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Inconsistency.20in.20.60x.20test.60\n\nFixes https://github.com/rust-lang/rust/issues/91071.", "tree": {"sha": "c5c209f17952529e68d5d94eb2be7fdd95b332f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5c209f17952529e68d5d94eb2be7fdd95b332f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198a1548ea4c25e3756d70bb2cafed6bb1860d6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUbOyCRBK7hj4Ov3rIwAAALgIAHEsr6Vnd0hqJnJ4n9WFXNF/\ngjSdyZ0Y9tLTRmuxFMj2VRuZ5DuGj2NuvFt8s4wFzLXyFeQ3cJMvu4EWRcyv8P59\nne07PzN0ZIsmQ6BOB7XWeeqI/oP5un5WNKUdSk+7BkUJ+fqa13PJe8zyZxx43oPW\nszpbOyzULkx0wCz1tSR/8mfgblyb94LJSiQY+SWpFB4MPnwZFCk5JIh/SaP4p+vo\naEoPzdqyMoP35KjgC0MqtKhlyfqchpDVLdrakYCPytyZ6V5PGi2BvGJs8N1v81Mb\nI/42Wpg7zUAgigYgtTdQKFcfYj7HWCPCBIvgM1sgfZnILx/4EbUy1R2brTS8NI8=\n=7WVp\n-----END PGP SIGNATURE-----\n", "payload": "tree c5c209f17952529e68d5d94eb2be7fdd95b332f8\nparent e4b4bf1535ab3539c4573c8d960214c6e49eb138\nparent 26cc0be248b2f013f96bf47ccc24f99e4424c991\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649521586 +0200\ncommitter GitHub <noreply@github.com> 1649521586 +0200\n\nRollup merge of #95369 - jyn514:test-rustdoc, r=Mark-Simulacrum\n\nFix `x test src/librustdoc` with `download-rustc` enabled\n\nThe problem was two-fold:\n- Bootstrap was hard-coding that unit tests should always run with stage1, not stage2, and\n- It hard-coded the sysroot layout in stage1, which puts libLLVM.so in `lib/rustlib/` instead of just `lib/`.\n\nThis also takes the liberty of fixing `test src/librustdoc --no-doc`, which has been broken since it was first added. It would be nice at some point to unify this logic with other tests; I opened a Zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Inconsistency.20in.20.60x.20test.60\n\nFixes https://github.com/rust-lang/rust/issues/91071.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198a1548ea4c25e3756d70bb2cafed6bb1860d6a", "html_url": "https://github.com/rust-lang/rust/commit/198a1548ea4c25e3756d70bb2cafed6bb1860d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198a1548ea4c25e3756d70bb2cafed6bb1860d6a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b4bf1535ab3539c4573c8d960214c6e49eb138", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b4bf1535ab3539c4573c8d960214c6e49eb138", "html_url": "https://github.com/rust-lang/rust/commit/e4b4bf1535ab3539c4573c8d960214c6e49eb138"}, {"sha": "26cc0be248b2f013f96bf47ccc24f99e4424c991", "url": "https://api.github.com/repos/rust-lang/rust/commits/26cc0be248b2f013f96bf47ccc24f99e4424c991", "html_url": "https://github.com/rust-lang/rust/commit/26cc0be248b2f013f96bf47ccc24f99e4424c991"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "81200ba60b026ceb3e94536f1451b436e4628d77", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/198a1548ea4c25e3756d70bb2cafed6bb1860d6a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198a1548ea4c25e3756d70bb2cafed6bb1860d6a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=198a1548ea4c25e3756d70bb2cafed6bb1860d6a", "patch": "@@ -2065,6 +2065,7 @@ impl Step for Crate {\n     }\n }\n \n+/// Rustdoc is special in various ways, which is why this step is different from `Crate`.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdoc {\n     host: TargetSelection,\n@@ -2092,11 +2093,15 @@ impl Step for CrateRustdoc {\n         let test_kind = self.test_kind;\n         let target = self.host;\n \n-        // Use the previous stage compiler to reuse the artifacts that are\n-        // created when running compiletest for src/test/rustdoc. If this used\n-        // `compiler`, then it would cause rustdoc to be built *again*, which\n-        // isn't really necessary.\n-        let compiler = builder.compiler_for(builder.top_stage, target, target);\n+        let compiler = if builder.config.download_rustc {\n+            builder.compiler(builder.top_stage, target)\n+        } else {\n+            // Use the previous stage compiler to reuse the artifacts that are\n+            // created when running compiletest for src/test/rustdoc. If this used\n+            // `compiler`, then it would cause rustdoc to be built *again*, which\n+            // isn't really necessary.\n+            builder.compiler_for(builder.top_stage, target, target)\n+        };\n         builder.ensure(compile::Rustc { compiler, target });\n \n         let mut cargo = tool::prepare_tool_cargo(\n@@ -2112,6 +2117,15 @@ impl Step for CrateRustdoc {\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n+        match builder.doc_tests {\n+            DocTests::Only => {\n+                cargo.arg(\"--doc\");\n+            }\n+            DocTests::No => {\n+                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n+            }\n+            DocTests::Yes => {}\n+        }\n \n         cargo.arg(\"-p\").arg(\"rustdoc:0.0.0\");\n \n@@ -2136,6 +2150,8 @@ impl Step for CrateRustdoc {\n         // sets up the dylib path for the *host* (stage1/lib), which is the\n         // wrong directory.\n         //\n+        // Recall that we special-cased `compiler_for(top_stage)` above, so we always use stage1.\n+        //\n         // It should be considered to just stop running doctests on\n         // librustdoc. There is only one test, and it doesn't look too\n         // important. There might be other ways to avoid this, but it seems\n@@ -2144,8 +2160,15 @@ impl Step for CrateRustdoc {\n         // See also https://github.com/rust-lang/rust/issues/13983 where the\n         // host vs target dylibs for rustdoc are consistently tricky to deal\n         // with.\n+        //\n+        // Note that this set the host libdir for `download_rustc`, which uses a normal rust distribution.\n+        let libdir = if builder.config.download_rustc {\n+            builder.rustc_libdir(compiler)\n+        } else {\n+            builder.sysroot_libdir(compiler, target).to_path_buf()\n+        };\n         let mut dylib_path = dylib_path();\n-        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+        dylib_path.insert(0, PathBuf::from(&*libdir));\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n         if !builder.config.verbose_tests {"}]}