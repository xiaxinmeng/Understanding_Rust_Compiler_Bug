{"sha": "c1b850d3041e5c36dc133c22b59319b179f5ddc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjg1MGQzMDQxZTVjMzZkYzEzM2MyMmI1OTMxOWIxNzlmNWRkYzY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-07T04:12:20Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-13T04:49:32Z"}, "message": "cleanup: Refactor parser method `finish_parsing_statement` -> `parse_full_stmt`.", "tree": {"sha": "3eb6a09311e4fb8580b8d2bbad7627f19872debf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb6a09311e4fb8580b8d2bbad7627f19872debf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b850d3041e5c36dc133c22b59319b179f5ddc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b850d3041e5c36dc133c22b59319b179f5ddc6", "html_url": "https://github.com/rust-lang/rust/commit/c1b850d3041e5c36dc133c22b59319b179f5ddc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b850d3041e5c36dc133c22b59319b179f5ddc6/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759b8a8e7dbe4e9ada9f33847ab8d698ee020165", "url": "https://api.github.com/repos/rust-lang/rust/commits/759b8a8e7dbe4e9ada9f33847ab8d698ee020165", "html_url": "https://github.com/rust-lang/rust/commit/759b8a8e7dbe4e9ada9f33847ab8d698ee020165"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "50ac99efc0089dfee88191ef6612448a30bdacca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b850d3041e5c36dc133c22b59319b179f5ddc6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b850d3041e5c36dc133c22b59319b179f5ddc6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c1b850d3041e5c36dc133c22b59319b179f5ddc6", "patch": "@@ -118,18 +118,12 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n \n     fn make_stmts(self: Box<ParserAnyMacro<'a>>)\n                  -> Option<SmallVector<ast::Stmt>> {\n-        let parse_stmt = |parser: &mut Parser<'a>| -> ::parse::PResult<'a, _> {\n-            Ok(match parser.parse_stmt()? {\n-                Some(stmt) => Some(parser.finish_parsing_statement(stmt)?),\n-                None => None,\n-            })\n-        };\n         let mut ret = SmallVector::zero();\n         loop {\n             let mut parser = self.parser.borrow_mut();\n             match parser.token {\n                 token::Eof => break,\n-                _ => match parse_stmt(&mut parser) {\n+                _ => match parser.parse_full_stmt() {\n                     Ok(maybe_stmt) => match maybe_stmt {\n                         Some(stmt) => ret.push(stmt),\n                         None => (),"}, {"sha": "5617d223e8c461aa950bd8cc209bc87b72cc944a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1b850d3041e5c36dc133c22b59319b179f5ddc6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b850d3041e5c36dc133c22b59319b179f5ddc6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c1b850d3041e5c36dc133c22b59319b179f5ddc6", "patch": "@@ -4044,8 +4044,8 @@ impl<'a> Parser<'a> {\n         let mut stmts = vec![];\n \n         while !self.eat(&token::CloseDelim(token::Brace)) {\n-            if let Some(stmt) = self.parse_stmt_() {\n-                stmts.push(self.finish_parsing_statement(stmt)?);\n+            if let Some(stmt) = self.parse_full_stmt()? {\n+                stmts.push(stmt);\n             } else if self.token == token::Eof {\n                 break;\n             } else {\n@@ -4062,9 +4062,14 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n-    /// Finish parsing expressions that start with macros and handle trailing semicolons\n-    /// (or the lack thereof) -- c.f. `parse_stmt`.\n-    pub fn finish_parsing_statement(&mut self, mut stmt: Stmt) -> PResult<'a, Stmt> {\n+    /// Parse a statement, including the trailing semicolon.\n+    /// This parses expression statements that begin with macros correctly (c.f. `parse_stmt`).\n+    pub fn parse_full_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n+        let mut stmt = match self.parse_stmt_() {\n+            Some(stmt) => stmt,\n+            None => return Ok(None),\n+        };\n+\n         if let StmtKind::Mac(mac) = stmt.node {\n             if mac.1 != MacStmtStyle::NoBraces ||\n                self.token == token::Semi || self.token == token::Eof {\n@@ -4078,7 +4083,8 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        self.handle_trailing_semicolon(stmt)\n+        stmt = self.handle_trailing_semicolon(stmt)?;\n+        Ok(Some(stmt))\n     }\n \n     fn handle_trailing_semicolon(&mut self, mut stmt: Stmt) -> PResult<'a, Stmt> {"}]}