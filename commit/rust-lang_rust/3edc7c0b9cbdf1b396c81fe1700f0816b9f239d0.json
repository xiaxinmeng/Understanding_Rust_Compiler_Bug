{"sha": "3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZGM3YzBiOWNiZGYxYjM5NmM4MWZlMTcwMGYwODE2YjlmMjM5ZDA=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T04:46:07Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T04:46:07Z"}, "message": "Removed generic infinity, NaN and negative zero functions\nRemoved Round impl for integers", "tree": {"sha": "d8180ad50ae9bd3a4bd260614b155bc68c0b8042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8180ad50ae9bd3a4bd260614b155bc68c0b8042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "html_url": "https://github.com/rust-lang/rust/commit/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df36a8dfc98af7e78b416ca1faab3c214be29fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/df36a8dfc98af7e78b416ca1faab3c214be29fab", "html_url": "https://github.com/rust-lang/rust/commit/df36a8dfc98af7e78b416ca1faab3c214be29fab"}], "stats": {"total": 94, "additions": 7, "deletions": 87}, "files": [{"sha": "8d72878ef6acbb047ea7e999e0cea32ce7671b4a", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "patch": "@@ -177,18 +177,6 @@ impl num::One for T {\n     static pure fn one() -> T { 1 }\n }\n \n-impl num::Round for T {\n-    #[inline(always)]\n-    pure fn round(&self, _: num::RoundMode) -> T { *self }\n-\n-    #[inline(always)]\n-    pure fn floor(&self) -> T { *self }\n-    #[inline(always)]\n-    pure fn ceil(&self) -> T { *self }\n-    #[inline(always)]\n-    pure fn fract(&self) -> T { 0 }\n-}\n-\n #[cfg(notest)]\n impl ops::Add<T,T> for T {\n     pure fn add(&self, other: &T) -> T { *self + *other }"}, {"sha": "e720c2fa108aee553d3c9aee985fedfca82f780b", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 7, "deletions": 63, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "patch": "@@ -44,6 +44,13 @@ pub trait Round {\n     pure fn fract(&self) -> Self;\n }\n \n+pub enum RoundMode {\n+    RoundDown,\n+    RoundUp,\n+    RoundToZero,\n+    RoundFromZero\n+}\n+\n /**\n  * Cast a number the the enclosing type\n  *\n@@ -82,13 +89,6 @@ pub trait NumCast {\n     pure fn to_float(&self) -> float;\n }\n \n-pub enum RoundMode {\n-    RoundDown,\n-    RoundUp,\n-    RoundToZero,\n-    RoundFromZero\n-}\n-\n pub trait ToStrRadix {\n     pub pure fn to_str_radix(&self, radix: uint) -> ~str;\n }\n@@ -99,62 +99,6 @@ pub trait FromStrRadix {\n \n // Generic math functions:\n \n-/// Dynamically calculates the value `inf` (`1/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn infinity<T:One+Zero+Div<T,T>>() -> T {\n-    let _0: T = Zero::zero();\n-    let _1: T = One::one();\n-    _1 / _0\n-}\n-\n-/// Dynamically calculates the value `-inf` (`-1/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn neg_infinity<T:One+Zero+Div<T,T>+Neg<T>>() -> T {\n-    let _0: T = Zero::zero();\n-    let _1: T = One::one();\n-    - _1 / _0\n-}\n-\n-/// Dynamically calculates the value `NaN` (`0/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn NaN<T:Zero+Div<T,T>>() -> T {\n-    let _0: T = Zero::zero();\n-    _0 / _0\n-}\n-\n-/// Returns `true` if `num` has the value `inf` (`1/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn is_infinity<T:One+Zero+Eq+Div<T,T>>(num: &T) -> bool {\n-    (*num) == (infinity::<T>())\n-}\n-\n-/// Returns `true` if `num` has the value `-inf` (`-1/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn is_neg_infinity<T:One+Zero+Eq+Div<T,T>+Neg<T>>(num: &T)\n-                                                            -> bool {\n-    (*num) == (neg_infinity::<T>())\n-}\n-\n-/// Returns `true` if `num` has the value `NaN` (is not equal to itself).\n-#[inline(always)]\n-pub pure fn is_NaN<T:Eq>(num: &T) -> bool {\n-    (*num) != (*num)\n-}\n-\n-/// Returns `true` if `num` has the value `-0` (`1/num == -1/0`).\n-/// Can fail on integer types.\n-#[inline(always)]\n-pub pure fn is_neg_zero<T:One+Zero+Eq+Div<T,T>+Neg<T>>(num: &T) -> bool {\n-    let _1: T = One::one();\n-    let _0: T = Zero::zero();\n-    *num == _0 && is_neg_infinity(&(_1 / *num))\n-}\n-\n /**\n  * Calculates a power to a given radix, optimized for uint `pow` and `radix`.\n  *"}, {"sha": "005f0f2b5a4dfb9b7c5b2205f2bea59115a0bfca", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=3edc7c0b9cbdf1b396c81fe1700f0816b9f239d0", "patch": "@@ -141,18 +141,6 @@ impl num::One for T {\n     static pure fn one() -> T { 1 }\n }\n \n-impl num::Round for T {\n-    #[inline(always)]\n-    pure fn round(&self, _: num::RoundMode) -> T { *self }\n-\n-    #[inline(always)]\n-    pure fn floor(&self) -> T { *self }\n-    #[inline(always)]\n-    pure fn ceil(&self) -> T { *self }\n-    #[inline(always)]\n-    pure fn fract(&self) -> T { 0 }\n-}\n-\n #[cfg(notest)]\n impl ops::Add<T,T> for T {\n     pure fn add(&self, other: &T) -> T { *self + *other }"}]}