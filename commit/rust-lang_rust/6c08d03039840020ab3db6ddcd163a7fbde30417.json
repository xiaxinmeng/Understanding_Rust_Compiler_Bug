{"sha": "6c08d03039840020ab3db6ddcd163a7fbde30417", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDhkMDMwMzk4NDAwMjBhYjNkYjZkZGNkMTYzYTdmYmRlMzA0MTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-22T07:05:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-23T04:26:59Z"}, "message": "Parse paths in item, trait item, and impl item macro invocations.", "tree": {"sha": "a444b423682f1fe6b1484c640932e400c3600aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a444b423682f1fe6b1484c640932e400c3600aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c08d03039840020ab3db6ddcd163a7fbde30417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c08d03039840020ab3db6ddcd163a7fbde30417", "html_url": "https://github.com/rust-lang/rust/commit/6c08d03039840020ab3db6ddcd163a7fbde30417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c08d03039840020ab3db6ddcd163a7fbde30417/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e178db793d8d363d80430ab6e716600c4adcf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e178db793d8d363d80430ab6e716600c4adcf7", "html_url": "https://github.com/rust-lang/rust/commit/a0e178db793d8d363d80430ab6e716600c4adcf7"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "6fbc33d909f2b830d0fec1eed1365771fd7242c2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6c08d03039840020ab3db6ddcd163a7fbde30417/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c08d03039840020ab3db6ddcd163a7fbde30417/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6c08d03039840020ab3db6ddcd163a7fbde30417", "patch": "@@ -542,11 +542,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_ident_into_path(&mut self) -> PResult<'a, ast::Path> {\n-        let ident = self.parse_ident()?;\n-        Ok(ast::Path::from_ident(self.last_span, ident))\n-    }\n-\n     /// Check if the next token is `tok`, and return `true` if so.\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not\n@@ -1202,14 +1197,11 @@ impl<'a> Parser<'a> {\n                 None\n             };\n             (ident, TraitItemKind::Const(ty, default))\n-        } else if !self.token.is_any_keyword()\n-            && self.look_ahead(1, |t| *t == token::Not)\n-            && (self.look_ahead(2, |t| *t == token::OpenDelim(token::Paren))\n-                || self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))) {\n+        } else if self.token.is_path_start() {\n                 // trait item macro.\n                 // code copied from parse_macro_use_or_failure... abstraction!\n                 let lo = self.span.lo;\n-                let pth = self.parse_ident_into_path()?;\n+                let pth = self.parse_path(PathStyle::Mod)?;\n                 self.expect(&token::Not)?;\n \n                 // eat a matched-delimiter token tree:\n@@ -4873,17 +4865,14 @@ impl<'a> Parser<'a> {\n     fn parse_impl_method(&mut self, vis: &Visibility)\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n-        if !self.token.is_any_keyword()\n-            && self.look_ahead(1, |t| *t == token::Not)\n-            && (self.look_ahead(2, |t| *t == token::OpenDelim(token::Paren))\n-                || self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))) {\n+        if self.token.is_path_start() {\n             // method macro.\n \n             let last_span = self.last_span;\n             self.complain_if_pub_macro(&vis, last_span);\n \n             let lo = self.span.lo;\n-            let pth = self.parse_ident_into_path()?;\n+            let pth = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::Not)?;\n \n             // eat a matched-delimiter token tree:\n@@ -5995,11 +5984,7 @@ impl<'a> Parser<'a> {\n         lo: BytePos,\n         visibility: Visibility\n     ) -> PResult<'a, Option<P<Item>>> {\n-        if macros_allowed && !self.token.is_any_keyword()\n-                && self.look_ahead(1, |t| *t == token::Not)\n-                && (self.look_ahead(2, |t| t.is_ident())\n-                    || self.look_ahead(2, |t| *t == token::OpenDelim(token::Paren))\n-                    || self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))) {\n+        if macros_allowed && self.token.is_path_start() {\n             // MACRO INVOCATION ITEM\n \n             let last_span = self.last_span;\n@@ -6008,7 +5993,7 @@ impl<'a> Parser<'a> {\n             let mac_lo = self.span.lo;\n \n             // item macro.\n-            let pth = self.parse_ident_into_path()?;\n+            let pth = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::Not)?;\n \n             // a 'special' identifier (like what `macro_rules!` uses)"}]}