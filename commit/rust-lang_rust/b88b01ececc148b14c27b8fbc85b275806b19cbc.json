{"sha": "b88b01ececc148b14c27b8fbc85b275806b19cbc", "node_id": "C_kwDOAAsO6NoAKGI4OGIwMWVjZWNjMTQ4YjE0YzI3YjhmYmM4NWIyNzU4MDZiMTljYmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-16T18:52:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T18:52:26Z"}, "message": "Merge #10775\n\n10775: minor: Simplify r=lnicola a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a7abb9cae75584fc51f0ffc6d40f99028ad62531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7abb9cae75584fc51f0ffc6d40f99028ad62531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88b01ececc148b14c27b8fbc85b275806b19cbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhk/3qCRBK7hj4Ov3rIwAAUOkIAIuISy2XHqZDy9O5EpRTBCtP\nCTkRXqXmQhajF4b/avLGppnSNJc85hINQe7KnQhfQXQUWA3QjcJlDgLc9tpDEa+z\nPpQJwJNQVx8qGe8QEiWROnBesrPv6puWukfbo5J/gy7/Xj1EnFohamINhk6PISFZ\nVv16AXwqq2U8J9OKObFU8YNdv7E6fu3KzronsBCOXcuDiWXcZ8Sa1I/jwDLHv1au\nHSbCu3YhJ1J0xRZJK2KoxzI3xpIZpz3g4/dToQMKtcw8v9x7z9LFbHzIUqmwnyM7\nYvnp2d8jfGCbWxP+DZ98JI1CA2lQf0CBGcV+N/MQ0fK7LU0H0wq/91r8eqkjfUs=\n=Wg2a\n-----END PGP SIGNATURE-----\n", "payload": "tree a7abb9cae75584fc51f0ffc6d40f99028ad62531\nparent bf408ef5fdc5f95464eca620f170462b2e831a87\nparent f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637088746 +0000\ncommitter GitHub <noreply@github.com> 1637088746 +0000\n\nMerge #10775\n\n10775: minor: Simplify r=lnicola a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88b01ececc148b14c27b8fbc85b275806b19cbc", "html_url": "https://github.com/rust-lang/rust/commit/b88b01ececc148b14c27b8fbc85b275806b19cbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88b01ececc148b14c27b8fbc85b275806b19cbc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf408ef5fdc5f95464eca620f170462b2e831a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf408ef5fdc5f95464eca620f170462b2e831a87", "html_url": "https://github.com/rust-lang/rust/commit/bf408ef5fdc5f95464eca620f170462b2e831a87"}, {"sha": "f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "html_url": "https://github.com/rust-lang/rust/commit/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "d59c26438b46653041adda39bc92a0e39d15b71e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b88b01ececc148b14c27b8fbc85b275806b19cbc", "patch": "@@ -3035,6 +3035,18 @@ impl HasCrate for Function {\n     }\n }\n \n+impl HasCrate for Const {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for TypeAlias {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Type {\n     fn krate(&self, _db: &dyn HirDatabase) -> Crate {\n         self.krate.into()"}, {"sha": "3b88085d2decfc23872a173f06a0384c6e0bcaf2", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=b88b01ececc148b14c27b8fbc85b275806b19cbc", "patch": "@@ -86,6 +86,10 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: &hir::ScopeDef,\n     ) {\n+        if ctx.is_scope_def_hidden(resolution) {\n+            cov_mark::hit!(qualified_path_doc_hidden);\n+            return;\n+        }\n         self.add_opt(render_resolution(RenderContext::new(ctx), local_name, resolution));\n     }\n \n@@ -108,6 +112,9 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.is_visible(&func) {\n+            return;\n+        }\n         self.add_opt(render_fn(RenderContext::new(ctx), None, local_name, func));\n     }\n \n@@ -118,14 +125,23 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.is_visible(&func) {\n+            return;\n+        }\n         self.add_opt(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n     }\n \n-    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        self.add_opt(render_const(RenderContext::new(ctx), constant));\n+    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, konst: hir::Const) {\n+        if !ctx.is_visible(&konst) {\n+            return;\n+        }\n+        self.add_opt(render_const(RenderContext::new(ctx), konst));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n+        if !ctx.is_visible(&type_alias) {\n+            return;\n+        }\n         self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n     }\n \n@@ -164,6 +180,9 @@ impl Completions {\n         field: hir::Field,\n         ty: &hir::Type,\n     ) {\n+        if !ctx.is_visible(&field) {\n+            return;\n+        }\n         let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n         self.add(item);\n     }"}, {"sha": "e01e9c9fa7e6c1c47e6eb27d4a36669f94da6b86", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=b88b01ececc148b14c27b8fbc85b275806b19cbc", "patch": "@@ -63,9 +63,6 @@ fn complete_fields(\n ) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n-            if !ctx.is_visible(&field) {\n-                continue;\n-            }\n             f(Either::Left(field), ty);\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n@@ -84,10 +81,7 @@ fn complete_methods(\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope.traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.self_param(ctx.db).is_some()\n-                && ctx.is_visible(&func)\n-                && seen_methods.insert(func.name(ctx.db))\n-            {\n+            if func.self_param(ctx.db).is_some() && seen_methods.insert(func.name(ctx.db)) {\n                 f(func);\n             }\n             None::<()>"}, {"sha": "b5bf6b551462b3fa246f6d5234bc4441c6c0d318", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88b01ececc148b14c27b8fbc85b275806b19cbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=b88b01ececc148b14c27b8fbc85b275806b19cbc", "patch": "@@ -102,11 +102,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                 }\n \n-                if ctx.is_scope_def_hidden(&def) {\n-                    cov_mark::hit!(qualified_path_doc_hidden);\n-                    continue;\n-                }\n-\n                 let add_resolution = match def {\n                     // Don't suggest attribute macros and derives.\n                     hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n@@ -167,18 +162,12 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             if let Some(krate) = krate {\n                 let traits_in_scope = ctx.scope.traits_in_scope();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n                     add_assoc_item(acc, ctx, item);\n                     None::<()>\n                 });\n \n                 // Iterate assoc types separately\n                 ty.iterate_assoc_items(ctx.db, krate, |item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n                     if let hir::AssocItem::TypeAlias(ty) = item {\n                         acc.add_type_alias(ctx, ty)\n                     }\n@@ -189,9 +178,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         hir::PathResolution::Def(hir::ModuleDef::Trait(t)) => {\n             // Handles `Trait::assoc` as well as `<Ty as Trait>::assoc`.\n             for item in t.items(ctx.db) {\n-                if !ctx.is_visible(&item) {\n-                    continue;\n-                }\n                 add_assoc_item(acc, ctx, item);\n             }\n         }\n@@ -210,10 +196,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 let traits_in_scope = ctx.scope.traits_in_scope();\n                 let mut seen = FxHashSet::default();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n-\n                     // We might iterate candidates of a trait multiple times here, so deduplicate\n                     // them.\n                     if seen.insert(item) {"}]}