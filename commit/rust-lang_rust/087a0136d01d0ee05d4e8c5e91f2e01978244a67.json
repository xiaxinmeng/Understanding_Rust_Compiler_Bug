{"sha": "087a0136d01d0ee05d4e8c5e91f2e01978244a67", "node_id": "C_kwDOAAsO6NoAKDA4N2EwMTM2ZDAxZDBlZTA1ZDRlOGM1ZTkxZjJlMDE5NzgyNDRhNjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-13T21:07:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-14T01:03:06Z"}, "message": "Don't ICE in might_permit_raw_init if reference is polymorphic", "tree": {"sha": "732dfdecbfdfffb6075d43398a935d2d8da98d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732dfdecbfdfffb6075d43398a935d2d8da98d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087a0136d01d0ee05d4e8c5e91f2e01978244a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087a0136d01d0ee05d4e8c5e91f2e01978244a67", "html_url": "https://github.com/rust-lang/rust/commit/087a0136d01d0ee05d4e8c5e91f2e01978244a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087a0136d01d0ee05d4e8c5e91f2e01978244a67/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b439b119b8d49450bddbbea317afeb0d4166f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b439b119b8d49450bddbbea317afeb0d4166f70", "html_url": "https://github.com/rust-lang/rust/commit/0b439b119b8d49450bddbbea317afeb0d4166f70"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "a2db98683b5295c634e795bea4887b39dfd83dfb", "filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/087a0136d01d0ee05d4e8c5e91f2e01978244a67/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087a0136d01d0ee05d4e8c5e91f2e01978244a67/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs?ref=087a0136d01d0ee05d4e8c5e91f2e01978244a67", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::ty::layout::{LayoutCx, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_middle::ty::{ParamEnv, TyCtxt, TypeVisitable};\n use rustc_session::Limit;\n use rustc_target::abi::{Abi, FieldsShape, InitKind, Scalar, Variants};\n \n@@ -108,7 +108,12 @@ fn might_permit_raw_init_lax<'tcx>(\n \n     // Special magic check for references and boxes (i.e., special pointer types).\n     if let Some(pointee) = this.ty.builtin_deref(false) {\n-        let pointee = cx.layout_of(pointee.ty).expect(\"need to be able to compute layouts\");\n+        let Ok(pointee) = cx.layout_of(pointee.ty) else {\n+            // Reference is too polymorphic, it has a layout but the pointee does not.\n+            // So we must assume that there may be some substitution that is valid.\n+            assert!(pointee.ty.needs_subst());\n+            return true;\n+        };\n         // We need to ensure that the LLVM attributes `aligned` and `dereferenceable(size)` are satisfied.\n         if pointee.align.abi.bytes() > 1 {\n             // 0x01-filling is not aligned."}, {"sha": "fb08ad582d927c7660216274f27e55bc99995a79", "filename": "tests/mir-opt/dont_yeet_assert.generic.InstCombine.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff?ref=087a0136d01d0ee05d4e8c5e91f2e01978244a67", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `generic` before InstCombine\n++ // MIR for `generic` after InstCombine\n+  \n+  fn generic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +0:21\n+      let _1: ();                          // in scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+-         _1 = assert_mem_uninitialized_valid::<&T>() -> bb1; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/dont_yeet_assert.rs:10:5: 10:59\n+-                                          // + user_ty: UserType(0)\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<&T>}, val: Value(<ZST>) }\n++         goto -> bb1;                     // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:61: +1:62\n+          _0 = const ();                   // scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +2:2\n+          return;                          // scope 0 at $DIR/dont_yeet_assert.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "7cec761eabac1d7c79ddd77b081f9c6ba9bb7738", "filename": "tests/mir-opt/dont_yeet_assert.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.rs?ref=087a0136d01d0ee05d4e8c5e91f2e01978244a67", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --crate-type=lib\n+// unit-test: InstCombine\n+\n+#![feature(core_intrinsics)]\n+\n+// Want to make sure this assertion isn't compiled away in generic code.\n+\n+// EMIT_MIR dont_yeet_assert.generic.InstCombine.diff\n+pub fn generic<T>() {\n+    core::intrinsics::assert_mem_uninitialized_valid::<&T>();\n+}"}, {"sha": "055173e9842dd994dd69c4f49aad9f3bc489cdf5", "filename": "tests/ui/lint/invalid_value-polymorphic.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087a0136d01d0ee05d4e8c5e91f2e01978244a67/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs?ref=087a0136d01d0ee05d4e8c5e91f2e01978244a67", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --crate-type=lib -Zmir-enable-passes=+InstCombine\n+// build-pass\n+\n+#![feature(core_intrinsics)]\n+\n+pub fn generic<T>() {\n+    core::intrinsics::assert_mem_uninitialized_valid::<&T>();\n+}"}]}