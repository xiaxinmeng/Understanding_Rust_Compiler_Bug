{"sha": "40313fb6b0104f703c06b2dd46198ad1f15d267b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzEzZmI2YjAxMDRmNzAzYzA2YjJkZDQ2MTk4YWQxZjE1ZDI2N2I=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-24T19:08:30Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:57Z"}, "message": "Renovate nullary variant construction", "tree": {"sha": "ff35f403a58f38b255575dafc1123704c52fe135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff35f403a58f38b255575dafc1123704c52fe135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40313fb6b0104f703c06b2dd46198ad1f15d267b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40313fb6b0104f703c06b2dd46198ad1f15d267b", "html_url": "https://github.com/rust-lang/rust/commit/40313fb6b0104f703c06b2dd46198ad1f15d267b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40313fb6b0104f703c06b2dd46198ad1f15d267b/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd28451f68a14916c57c50baa045132316cedc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd28451f68a14916c57c50baa045132316cedc6", "html_url": "https://github.com/rust-lang/rust/commit/fdd28451f68a14916c57c50baa045132316cedc6"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "9a69acd4987e8a5e8658b78800161da5bc427901", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40313fb6b0104f703c06b2dd46198ad1f15d267b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40313fb6b0104f703c06b2dd46198ad1f15d267b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=40313fb6b0104f703c06b2dd46198ad1f15d267b", "patch": "@@ -722,14 +722,12 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n                 let fn_data = callee::trans_fn_ref(bcx, vid, ref_expr.id);\n                 Store(bcx, fn_data.llfn, lldest);\n                 return bcx;\n-            } else if !ty::enum_is_univariant(ccx.tcx, tid) {\n-                // Nullary variant.\n-                let lldiscrimptr = GEPi(bcx, lldest, [0u, 0u]);\n-                let lldiscrim = C_int(bcx.ccx(), variant_info.disr_val);\n-                Store(bcx, lldiscrim, lldiscrimptr);\n-                return bcx;\n             } else {\n-                // Nullary univariant.\n+                // Nullary variant.\n+                let ty = expr_ty(bcx, ref_expr);\n+                let repr = adt::represent_type(ccx, ty);\n+                adt::trans_set_discr(bcx, &repr, lldest,\n+                                     variant_info.disr_val);\n                 return bcx;\n             }\n         }"}]}