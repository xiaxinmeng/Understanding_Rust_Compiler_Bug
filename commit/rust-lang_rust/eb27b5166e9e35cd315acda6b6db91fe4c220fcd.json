{"sha": "eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMjdiNTE2NmU5ZTM1Y2QzMTVhY2RhNmI2ZGI5MWZlNGMyMjBmY2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-21T19:12:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-22T02:17:05Z"}, "message": "field signatures", "tree": {"sha": "1adc92f33752230ffd93160ad8a32811966fef7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1adc92f33752230ffd93160ad8a32811966fef7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "html_url": "https://github.com/rust-lang/rust/commit/eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53fa9a8983a0195076f436e70be24f449c37afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53fa9a8983a0195076f436e70be24f449c37afc", "html_url": "https://github.com/rust-lang/rust/commit/c53fa9a8983a0195076f436e70be24f449c37afc"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "a9db5a440ef2ad6a820776c34307a7e02fdf80c5", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -387,6 +387,7 @@ pub struct VariableData {\n     pub type_value: String,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "5f61e888ca487821f3a218c83a6cf1a40aca24a5", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -372,6 +372,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         parent: None,\n                         visibility: Visibility::Inherited,\n                         docs: String::new(),\n+                        sig: None,\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -587,6 +588,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: Some(parent_id),\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n+                sig: None,\n             }.lower(self.tcx));\n         }\n \n@@ -1072,6 +1074,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: None,\n                     visibility: Visibility::Inherited,\n                     docs: String::new(),\n+                    sig: None,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1521,6 +1524,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             parent: None,\n                             visibility: Visibility::Inherited,\n                             docs: String::new(),\n+                            sig: None,\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "81ea681a2899ed2fb2ec8f33232698b1b8920f90", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -658,6 +658,7 @@ pub struct VariableData {\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n impl Lower for data::VariableData {\n@@ -676,6 +677,7 @@ impl Lower for data::VariableData {\n             parent: self.parent,\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.map(|s| s.lower(tcx)),\n         }\n     }\n }"}, {"sha": "b349d15e62f7ae7fc81b9830298455425e15666f", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -419,7 +419,7 @@ impl From<VariableData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n-                sig: None,\n+                sig: data.sig,\n             }),\n             _ => None,\n         }"}, {"sha": "795ba1fe0fb8e3559264854ed741afd7234d83f1", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -379,7 +379,7 @@ impl From<MacroData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: data.sig,\n         }\n     }\n }"}, {"sha": "c2e441e7ebaaecb094cb76ff1fd0da436f1addf3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb27b5166e9e35cd315acda6b6db91fe4c220fcd/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "patch": "@@ -179,6 +179,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: None,\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -197,6 +198,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: None,\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -287,18 +289,39 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_field_data(&self, field: &ast::StructField,\n-                          scope: NodeId) -> Option<VariableData> {\n+    pub fn get_field_data(&self,\n+                          field: &ast::StructField,\n+                          scope: NodeId)\n+                          -> Option<VariableData> {\n         if let Some(ident) = field.ident {\n+            let name = ident.to_string();\n             let qualname = format!(\"::{}::{}\", self.tcx.node_path_str(scope), ident);\n-            let def_id = self.tcx.map.local_def_id(field.id);\n-            let typ = self.tcx.item_type(def_id).to_string();\n             let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n             filter!(self.span_utils, sub_span, field.span, None);\n+            let def_id = self.tcx.map.local_def_id(field.id);\n+            let typ = self.tcx.item_type(def_id).to_string();\n+\n+            let span = field.span;\n+            let text = self.span_utils.snippet(field.span);\n+            let ident_start = text.find(&name).unwrap();\n+            let ident_end = ident_start + name.len();\n+            // TODO refs\n+            let sig = Signature {\n+                span: span,\n+                text: text,\n+                ident_start: ident_start,\n+                ident_end: ident_end,\n+                defs: vec![SigElement {\n+                    id: def_id,\n+                    start: ident_start,\n+                    end: ident_end,\n+                }],\n+                refs: vec![],\n+            };\n             Some(VariableData {\n                 id: field.id,\n                 kind: VariableKind::Field,\n-                name: ident.to_string(),\n+                name: name,\n                 qualname: qualname,\n                 span: sub_span.unwrap(),\n                 scope: scope,\n@@ -307,6 +330,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n+                sig: Some(sig),\n             })\n         } else {\n             None"}]}