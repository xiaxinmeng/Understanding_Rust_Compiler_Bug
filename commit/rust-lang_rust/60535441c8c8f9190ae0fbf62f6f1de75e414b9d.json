{"sha": "60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTM1NDQxYzhjOGY5MTkwYWUwZmJmNjJmNmYxZGU3NWU0MTRiOWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-06T13:41:22Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-07T13:26:38Z"}, "message": "Check FromIterator trait impl in prelude collision check.", "tree": {"sha": "ff48ee825c5669a2aab6b500bfef896cef06e99f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff48ee825c5669a2aab6b500bfef896cef06e99f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "html_url": "https://github.com/rust-lang/rust/commit/60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "html_url": "https://github.com/rust-lang/rust/commit/c5e344f7747dbd7e7d4b209e3c480deb5979a56f"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "085e3811ac1a3d298d15d26b847076967c2b5c7f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "patch": "@@ -155,6 +155,7 @@ symbols! {\n         FormatSpec,\n         Formatter,\n         From,\n+        FromIterator,\n         Future,\n         FxHashMap,\n         FxHashSet,"}, {"sha": "f853c0fd9ccdb481a2865964870ad8964a521fb8", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "patch": "@@ -4,11 +4,13 @@ use hir::ItemKind;\n use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::check::{\n     method::probe::{self, Pick},\n@@ -206,6 +208,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        // For from_iter, check if the type actualy implements FromIterator.\n+        // If we know it does not, we don't need to warn.\n+        if method_name.name == sym::from_iter {\n+            if let Some(trait_def_id) = self.tcx.get_diagnostic_item(sym::FromIterator) {\n+                if !self\n+                    .infcx\n+                    .type_implements_trait(\n+                        trait_def_id,\n+                        self_ty,\n+                        InternalSubsts::empty(),\n+                        self.param_env,\n+                    )\n+                    .may_apply()\n+                {\n+                    return;\n+                }\n+            }\n+        }\n+\n         // No need to lint if this is an inherent method called on a specific type, like `Vec::foo(...)`,\n         // since such methods take precedence over trait methods.\n         if matches!(pick.kind, probe::PickKind::InherentImplPick) {"}, {"sha": "7f87ead6feed6c132faec40398c48dc1912591e6", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60535441c8c8f9190ae0fbf62f6f1de75e414b9d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=60535441c8c8f9190ae0fbf62f6f1de75e414b9d", "patch": "@@ -89,6 +89,7 @@\n                over elements of type `{A}`\",\n     label = \"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\"\n )]\n+#[rustc_diagnostic_item = \"FromIterator\"]\n pub trait FromIterator<A>: Sized {\n     /// Creates a value from an iterator.\n     ///"}]}