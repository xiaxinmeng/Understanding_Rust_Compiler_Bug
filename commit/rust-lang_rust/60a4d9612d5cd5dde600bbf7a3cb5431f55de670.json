{"sha": "60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTRkOTYxMmQ1Y2Q1ZGRlNjAwYmJmN2EzY2I1NDMxZjU1ZGU2NzA=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-24T14:52:16Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-05-12T10:12:19Z"}, "message": "unix: impl ExitStatusExt for ExitStatusError\n\nIt is unergnomic to have to say things like\n   bad.into_status().signal()\n\nImplementing `ExitStatusExt` for `ExitStatusError` fixes this.\nUnfortunately it does mean making a previously-infallible method\ncapable of panicing, although of course the existing impl remains\ninfallible.\n\nThe alternative would be a whole new `ExitStatusErrorExt` trait.\n\n`<ExitStatus as ExitStatusExt>::into_raw()` is not particularly\nergonomic to call because of the often-required type annotation.\nSee for example the code in the test case in\n  library/std/src/sys/unix/process/process_unix/tests.rs\n\nPerhaps we should provide equivalent free functions for `ExitStatus`\nand `ExitStatusExt` in std::os::unix::process and maybe deprecate this\ntrait method.  But I think that is for the future.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "b0b7f78a61a3a29ac2925517d0e9fee9a4e12295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b7f78a61a3a29ac2925517d0e9fee9a4e12295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "html_url": "https://github.com/rust-lang/rust/commit/60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a4d9612d5cd5dde600bbf7a3cb5431f55de670/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e893089ea066ce2b339543ac8e59b4e0ca8c44d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e893089ea066ce2b339543ac8e59b4e0ca8c44d3", "html_url": "https://github.com/rust-lang/rust/commit/e893089ea066ce2b339543ac8e59b4e0ca8c44d3"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "21da8ba15de0130db9660a8625e12592b73f7d8f", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/60a4d9612d5cd5dde600bbf7a3cb5431f55de670/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a4d9612d5cd5dde600bbf7a3cb5431f55de670/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "patch": "@@ -195,28 +195,62 @@ impl CommandExt for process::Command {\n     }\n }\n \n-/// Unix-specific extensions to [`process::ExitStatus`].\n+/// Unix-specific extensions to [`process::ExitStatus`] and\n+/// [`ExitStatusError`](process::ExitStatusError).\n ///\n-/// On Unix, `ExitStatus` **does not necessarily represent an exit status**, as passed to the\n-/// `exit` system call or returned by [`ExitStatus::code()`](crate::process::ExitStatus::code).\n-/// It represents **any wait status**, as returned by one of the `wait` family of system calls.\n+/// On Unix, `ExitStatus` and `ExitStatusError` **do not necessarily represent an exit status**, as\n+/// passed to the `exit` system call or returned by\n+/// [`ExitStatus::code()`](crate::process::ExitStatus::code).  They represents **any wait status**\n+/// (or any nonzero wait status, respectively), as returned by one of the `wait` family of system\n+/// calls.\n ///\n-/// This is because a Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but\n-/// can also represent other kinds of process event.\n+/// A Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but can also\n+/// represent other kinds of process event.\n ///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt: Sealed {\n-    /// Creates a new `ExitStatus` from the raw underlying integer status value from `wait`\n+    /// Creates a new `ExitStatus` or `ExitStatusError` from the raw underlying integer status\n+    /// value from `wait`\n     ///\n     /// The value should be a **wait status, not an exit status**.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics on an attempt to make an `ExitStatusError` from a wait status of `0`.\n+    ///\n+    /// Making an `ExitStatus` always succeds and never panics.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n     /// If the process was terminated by a signal, returns that signal.\n     ///\n     /// In other words, if `WIFSIGNALED`, this returns `WTERMSIG`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(exit_status_error)]\n+    /// use std::process::{Command, ExitStatusError};\n+    /// use std::os::unix::process::ExitStatusExt;\n+    ///\n+    /// fn run(script: &str) -> Result<(), ExitStatusError> {\n+    ///     Command::new(\"sh\").args(&[\"-ec\",script])\n+    ///         .status().expect(\"failed to fork/exec sh\")\n+    ///         .exit_ok()\n+    ///         .or_else(|bad| {\n+    ///             if bad.signal() == Some(13) /*PIPE*/ {\n+    ///                 Ok(())\n+    ///             } else {\n+    ///                 Err(bad)\n+    ///             }\n+    ///         })\n+    /// }\n+    ///\n+    /// run(\"exit\").unwrap();\n+    /// run(\"kill -PIPE $$\").unwrap();\n+    /// run(\"exit 42\").unwrap_err();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn signal(&self) -> Option<i32>;\n \n@@ -272,6 +306,35 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n+#[unstable(feature = \"exit_status_error\", issue = \"84908\")]\n+impl ExitStatusExt for process::ExitStatusError {\n+    fn from_raw(raw: i32) -> Self {\n+        process::ExitStatus::from_raw(raw)\n+            .exit_ok()\n+            .expect_err(\"<ExitStatusError as ExitStatusExt>::from_raw(0) but zero is not an error\")\n+    }\n+\n+    fn signal(&self) -> Option<i32> {\n+        self.into_status().signal()\n+    }\n+\n+    fn core_dumped(&self) -> bool {\n+        self.into_status().core_dumped()\n+    }\n+\n+    fn stopped_signal(&self) -> Option<i32> {\n+        self.into_status().stopped_signal()\n+    }\n+\n+    fn continued(&self) -> bool {\n+        self.into_status().continued()\n+    }\n+\n+    fn into_raw(self) -> i32 {\n+        self.into_status().into_raw()\n+    }\n+}\n+\n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawFd for process::Stdio {\n     #[inline]"}, {"sha": "c55cc18b2cff5f982ed74fbbd710db6785898416", "filename": "library/std/src/process.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60a4d9612d5cd5dde600bbf7a3cb5431f55de670/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a4d9612d5cd5dde600bbf7a3cb5431f55de670/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=60a4d9612d5cd5dde600bbf7a3cb5431f55de670", "patch": "@@ -1500,6 +1500,10 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for ExitStatusError {}\n+\n /// Describes the result of a process after it has failed\n ///\n /// Produced by the [`.exit_ok`](ExitStatus::exit_ok) method on [`ExitStatus`].\n@@ -1536,9 +1540,8 @@ impl ExitStatusError {\n     /// runtime system (often, for example, 255, 254, 127 or 126).\n     ///\n     /// On Unix, this will return `None` if the process was terminated by a signal.  If you want to\n-    /// handle such situations specially, consider using\n-    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) (possibly after getting the\n-    /// general `ExitStatus` by using [`status()`](ExitStatusError::status).\n+    /// handle such situations specially, consider using methods from\n+    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt).\n     ///\n     /// If the process finished by calling `exit` with a nonzero value, this will return\n     /// that exit status."}]}