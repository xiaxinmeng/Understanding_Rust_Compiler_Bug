{"sha": "fe920ebf8b043e12e2f330f65ff6127a68f722b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTIwZWJmOGIwNDNlMTJlMmYzMzBmNjVmZjYxMjdhNjhmNzIyYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T06:21:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T06:21:55Z"}, "message": "Auto merge of #4593 - james9909:fix-multiple-inherent-impls, r=llogiq\n\nFix false positive in `multiple_inherent_impl`\n\nchangelog: Fix false positive in `multiple_inherent_impl` by ignoring impls derived from macros.\n\nCloses #4578.", "tree": {"sha": "63bf3a543ea0e02a578e8ca10a8db94e074bf07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63bf3a543ea0e02a578e8ca10a8db94e074bf07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe920ebf8b043e12e2f330f65ff6127a68f722b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe920ebf8b043e12e2f330f65ff6127a68f722b1", "html_url": "https://github.com/rust-lang/rust/commit/fe920ebf8b043e12e2f330f65ff6127a68f722b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe920ebf8b043e12e2f330f65ff6127a68f722b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f058d80fc3869a4e5afc50d1200ece293386527", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f058d80fc3869a4e5afc50d1200ece293386527", "html_url": "https://github.com/rust-lang/rust/commit/5f058d80fc3869a4e5afc50d1200ece293386527"}, {"sha": "189eaa54c6e1d3b5a40fa82b8656eb3ac5ebb7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/189eaa54c6e1d3b5a40fa82b8656eb3ac5ebb7a8", "html_url": "https://github.com/rust-lang/rust/commit/189eaa54c6e1d3b5a40fa82b8656eb3ac5ebb7a8"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "063aade4e7f875332367c6b266068daec39f7aaf", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe920ebf8b043e12e2f330f65ff6127a68f722b1/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe920ebf8b043e12e2f330f65ff6127a68f722b1/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=fe920ebf8b043e12e2f330f65ff6127a68f722b1", "patch": "@@ -1,6 +1,6 @@\n //! lint on inherent implementations\n \n-use crate::utils::span_lint_and_then;\n+use crate::utils::{in_macro, span_lint_and_then};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n@@ -52,7 +52,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n         if let ItemKind::Impl(_, _, _, ref generics, None, _, _) = item.kind {\n             // Remember for each inherent implementation encoutered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n-            if generics.params.len() == 0 {\n+            // or are derived from a macro\n+            if !in_macro(item.span) && generics.params.len() == 0 {\n                 self.impls.insert(item.hir_id.owner_def_id(), item.span);\n             }\n         }"}, {"sha": "aeb27b5ba8c2fbfe36da4e533e0a0b14ec9b5e0e", "filename": "tests/ui/crashes/inherent_impl.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe920ebf8b043e12e2f330f65ff6127a68f722b1/tests%2Fui%2Fcrashes%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe920ebf8b043e12e2f330f65ff6127a68f722b1/tests%2Fui%2Fcrashes%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Finherent_impl.rs?ref=fe920ebf8b043e12e2f330f65ff6127a68f722b1", "patch": "@@ -0,0 +1,26 @@\n+#![deny(clippy::multiple_inherent_impl)]\n+\n+/// Test for https://github.com/rust-lang/rust-clippy/issues/4578\n+\n+macro_rules! impl_foo {\n+    ($struct:ident) => {\n+        impl $struct {\n+            fn foo() {}\n+        }\n+    };\n+}\n+\n+macro_rules! impl_bar {\n+    ($struct:ident) => {\n+        impl $struct {\n+            fn bar() {}\n+        }\n+    };\n+}\n+\n+struct MyStruct;\n+\n+impl_foo!(MyStruct);\n+impl_bar!(MyStruct);\n+\n+fn main() {}"}]}