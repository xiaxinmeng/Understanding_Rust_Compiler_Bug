{"sha": "17ee25d77550b771200d73533e3bcb2a9959122d", "node_id": "C_kwDOAAsO6NoAKDE3ZWUyNWQ3NzU1MGI3NzEyMDBkNzM1MzNlM2JjYjJhOTk1OTEyMmQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-08T11:27:49Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-15T09:22:17Z"}, "message": "add the build.reuse config option to choose the reuse binary", "tree": {"sha": "568986a2cdcb5be0beac47793abb6645fdf677cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568986a2cdcb5be0beac47793abb6645fdf677cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17ee25d77550b771200d73533e3bcb2a9959122d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmNzWkkACgkQzXazX3c0\ndp4qKw//XBEediyecI9yBhm6GqbYmRhe7WM8PUcf3kgQqs8rpNgDv+HbRtvfqYHs\nsN1APX8x+zCx3y3+2HCaWSB4sItd5pdL/EJR1WQt4M3ii+VI2ACxTpsS4OX8bXCH\notNoowWanMjX2QU/dkfP9s/9oZ6dyKhT6UYpp6kgkpy5AbDXHGch+rOKOI/AsQ2e\nyn1U1zqjW4+mUs9h6Czfude/5qNNCFlKF3k2sG+xp1Rh31ty8xZcAs3h8bZG8INh\nK03kkgC7xUrVZy2tiEl7tAlOc7Ni/Toseyh5NVsUwt27aY8PeQHUqFmm8aizO72x\nAPSYec5eWIpUxik/XAuDCdMrR6+ihcEDW5Z2BCuEQpo3aoGQ0kZLo2cxBvqD3NIO\nVbWwUfq4Td/EuS0jNk7lph2pkLs4swg2gkKVyaw4TgQDZrI/gmLOa6AHd+FJ543n\niL0C9+/Nkn3bNX8mAoG9uMmJKwAv5jYblY9PvpIdaE7UrhwOQ6xHPI6UytC+vWxr\nQmYBK9faOrnh1pLqxKgBbTxMZN+jR15/qU5LWNPGVxckTPncJHapLjQaQ1RZRIEI\n/FQaYYiZ5f2QI82dx1f2jCZ5dJ+pbcuys43NT78Yu5wwTkhfyf0bBpzPkNQ1d63Q\nx54XjzJ3aY5yDNDKrbfoH8uk6h1wsv2rptKmWSRpQ1jseO0OH98=\n=Xn+k\n-----END PGP SIGNATURE-----", "payload": "tree 568986a2cdcb5be0beac47793abb6645fdf677cc\nparent 101e1822c3e54e63996c8aaa014d55716f3937eb\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1667906869 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1668504137 +0100\n\nadd the build.reuse config option to choose the reuse binary\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17ee25d77550b771200d73533e3bcb2a9959122d", "html_url": "https://github.com/rust-lang/rust/commit/17ee25d77550b771200d73533e3bcb2a9959122d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17ee25d77550b771200d73533e3bcb2a9959122d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101e1822c3e54e63996c8aaa014d55716f3937eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/101e1822c3e54e63996c8aaa014d55716f3937eb", "html_url": "https://github.com/rust-lang/rust/commit/101e1822c3e54e63996c8aaa014d55716f3937eb"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "ffc6a330b9f60f766af56571c8bac242aae313a2", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17ee25d77550b771200d73533e3bcb2a9959122d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/17ee25d77550b771200d73533e3bcb2a9959122d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=17ee25d77550b771200d73533e3bcb2a9959122d", "patch": "@@ -255,6 +255,13 @@ changelog-seen = 2\n # Defaults to the Python interpreter used to execute x.py\n #python = \"python\"\n \n+# The path to the REUSE executable to use. REUSE will be used to gather\n+# the licensing information of the codebase.\n+#\n+# If this is omitted, the cached licensing information present in the source\n+# tarball will have to be present.\n+#reuse = \"reuse\"\n+\n # Force Cargo to check that Cargo.lock describes the precise dependency\n # set that all the Cargo.toml files create, instead of updating it.\n #locked-deps = false"}, {"sha": "34b631c2bcac88f41562c3784e56caf748945e20", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17ee25d77550b771200d73533e3bcb2a9959122d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee25d77550b771200d73533e3bcb2a9959122d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=17ee25d77550b771200d73533e3bcb2a9959122d", "patch": "@@ -212,6 +212,7 @@ pub struct Config {\n     pub npm: Option<PathBuf>,\n     pub gdb: Option<PathBuf>,\n     pub python: Option<PathBuf>,\n+    pub reuse: Option<PathBuf>,\n     pub cargo_native_static: bool,\n     pub configure_args: Vec<String>,\n \n@@ -610,6 +611,7 @@ define_config! {\n         nodejs: Option<String> = \"nodejs\",\n         npm: Option<String> = \"npm\",\n         python: Option<String> = \"python\",\n+        reuse: Option<String> = \"reuse\",\n         locked_deps: Option<bool> = \"locked-deps\",\n         vendor: Option<bool> = \"vendor\",\n         full_bootstrap: Option<bool> = \"full-bootstrap\",\n@@ -1003,6 +1005,7 @@ impl Config {\n         config.npm = build.npm.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n+        config.reuse = build.reuse.map(PathBuf::from);\n         config.submodules = build.submodules;\n         set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);"}, {"sha": "8a40b0f64f4b6c5673ce6fc1c885f4622958c0e0", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17ee25d77550b771200d73533e3bcb2a9959122d/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee25d77550b771200d73533e3bcb2a9959122d/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=17ee25d77550b771200d73533e3bcb2a9959122d", "patch": "@@ -140,6 +140,13 @@ than building it.\n         .map(|p| cmd_finder.must_have(p))\n         .or_else(|| cmd_finder.maybe_have(\"gdb\"));\n \n+    build.config.reuse = build\n+        .config\n+        .reuse\n+        .take()\n+        .map(|p| cmd_finder.must_have(p))\n+        .or_else(|| cmd_finder.maybe_have(\"reuse\"));\n+\n     // We're gonna build some custom C code here and there, host triples\n     // also build some C++ shims for LLVM so we need a C++ compiler.\n     for target in &build.targets {"}]}