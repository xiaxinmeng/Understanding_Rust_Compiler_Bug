{"sha": "af0c280be6744ec62a5eccd721de61837fa75345", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMGMyODBiZTY3NDRlYzYyYTVlY2NkNzIxZGU2MTgzN2ZhNzUzNDU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-29T00:34:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T00:34:45Z"}, "message": "Rollup merge of #68378 - billyrieger:btreemap-remove-entry, r=KodrAus\n\nAdd BTreeMap::remove_entry\n\nImplements https://github.com/rust-lang/rust/issues/66714.", "tree": {"sha": "65eb4ef221f59b8dfc05cf72bbb296fa7a71768b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65eb4ef221f59b8dfc05cf72bbb296fa7a71768b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0c280be6744ec62a5eccd721de61837fa75345", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMNMlCRBK7hj4Ov3rIwAAdHIIADF3WIbnwozlXgoj6cNqSffq\nU4tIrpZhOUdMWcldi9KhiEdjmC+Zy6hgxJHKqVM62nws8pXG0CVKc/sfZEQ0JBYc\ncbZw7nOOx2RL06BdRYLYn8bcqVraMZitRtGQ48m0umWFQkBO0FHjPuiqPOxKtIo9\n3WOTrfHo53nymXjk+lCa6HSQJ55mxO1TVjvKKjGN5LwLwVjpozidBgPtNkr+2rJO\nVuYYR4LpjauL6gucxo/0Gotd2X9OGlpfITMEn+Tcy12GvHAEUVNISHQ1n3HKxL0R\nPTKDuuR0pGhNCyuYcDYDg1BdGLUkJ5kn1K5wEZjlV2BxLBInG1Qk/H1/dxlWZsM=\n=3evk\n-----END PGP SIGNATURE-----\n", "payload": "tree 65eb4ef221f59b8dfc05cf72bbb296fa7a71768b\nparent cb3884adaa538a9d380ac64dd3c9bb6ce6738da6\nparent 5654305a7ba419e4a7c0334fc77d0ef41a1ca2ac\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1580258085 +0900\ncommitter GitHub <noreply@github.com> 1580258085 +0900\n\nRollup merge of #68378 - billyrieger:btreemap-remove-entry, r=KodrAus\n\nAdd BTreeMap::remove_entry\n\nImplements https://github.com/rust-lang/rust/issues/66714.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0c280be6744ec62a5eccd721de61837fa75345", "html_url": "https://github.com/rust-lang/rust/commit/af0c280be6744ec62a5eccd721de61837fa75345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0c280be6744ec62a5eccd721de61837fa75345/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3884adaa538a9d380ac64dd3c9bb6ce6738da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3884adaa538a9d380ac64dd3c9bb6ce6738da6", "html_url": "https://github.com/rust-lang/rust/commit/cb3884adaa538a9d380ac64dd3c9bb6ce6738da6"}, {"sha": "5654305a7ba419e4a7c0334fc77d0ef41a1ca2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5654305a7ba419e4a7c0334fc77d0ef41a1ca2ac", "html_url": "https://github.com/rust-lang/rust/commit/5654305a7ba419e4a7c0334fc77d0ef41a1ca2ac"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "4dc004864fd465988cccfcd5ac575df4320ebf83", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/af0c280be6744ec62a5eccd721de61837fa75345/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0c280be6744ec62a5eccd721de61837fa75345/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=af0c280be6744ec62a5eccd721de61837fa75345", "patch": "@@ -806,13 +806,42 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Ord,\n+    {\n+        self.remove_entry(key).map(|(_, v)| v)\n+    }\n+\n+    /// Removes a key from the map, returning the stored key and value if the key\n+    /// was previously in the map.\n+    ///\n+    /// The key may be any borrowed form of the map's key type, but the ordering\n+    /// on the borrowed form *must* match the ordering on the key type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(btreemap_remove_entry)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n+    /// assert_eq!(map.remove_entry(&1), None);\n+    /// ```\n+    #[unstable(feature = \"btreemap_remove_entry\", issue = \"66714\")]\n+    pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>\n     where\n         K: Borrow<Q>,\n         Q: Ord,\n     {\n         match search::search_tree(self.root.as_mut(), key) {\n             Found(handle) => Some(\n-                OccupiedEntry { handle, length: &mut self.length, _marker: PhantomData }.remove(),\n+                OccupiedEntry { handle, length: &mut self.length, _marker: PhantomData }\n+                    .remove_entry(),\n             ),\n             GoDown(_) => None,\n         }"}]}