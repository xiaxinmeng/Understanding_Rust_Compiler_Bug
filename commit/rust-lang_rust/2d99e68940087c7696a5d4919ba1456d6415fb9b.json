{"sha": "2d99e68940087c7696a5d4919ba1456d6415fb9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTllNjg5NDAwODdjNzY5NmE1ZDQ5MTliYTE0NTZkNjQxNWZiOWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-17T00:49:46Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-17T00:57:58Z"}, "message": "Emit more pretty diagnostics for qualified paths", "tree": {"sha": "b2e3f753ad423017c7e43e19108a210f99e39f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2e3f753ad423017c7e43e19108a210f99e39f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d99e68940087c7696a5d4919ba1456d6415fb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d99e68940087c7696a5d4919ba1456d6415fb9b", "html_url": "https://github.com/rust-lang/rust/commit/2d99e68940087c7696a5d4919ba1456d6415fb9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d99e68940087c7696a5d4919ba1456d6415fb9b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8240f1a3d3f0ff3e36c19836ea4d783f29752b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8240f1a3d3f0ff3e36c19836ea4d783f29752b0b", "html_url": "https://github.com/rust-lang/rust/commit/8240f1a3d3f0ff3e36c19836ea4d783f29752b0b"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "77e85c06ff5aea1a4774930830c223ca0b7fa068", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2d99e68940087c7696a5d4919ba1456d6415fb9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d99e68940087c7696a5d4919ba1456d6415fb9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2d99e68940087c7696a5d4919ba1456d6415fb9b", "patch": "@@ -640,7 +640,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut err) => {\n-                    // We could't parse generic parameters, unlikely to be a turbofish. Rely on\n+                    // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n                     *self = snapshot;\n@@ -1242,7 +1242,7 @@ impl<'a> Parser<'a> {\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n-            // This needs to be handled separatedly from the next arm to avoid\n+            // This needs to be handled separately from the next arm to avoid\n             // interpreting `await { <expr> }?` as `<expr>?.await`.\n             self.parse_block_expr(None, self.token.span, BlockCheckMode::Default, AttrVec::new())\n         } else {\n@@ -1618,6 +1618,8 @@ impl<'a> Parser<'a> {\n                 || self.token == token::Lt\n                 || self.token == token::CloseDelim(token::Paren))\n         {\n+            let rfc_note = \"anonymous parameters are removed in the 2018 edition (see RFC 1685)\";\n+\n             let (ident, self_sugg, param_sugg, type_sugg) = match pat.kind {\n                 PatKind::Ident(_, ident, _) => (\n                     ident,\n@@ -1626,7 +1628,9 @@ impl<'a> Parser<'a> {\n                     format!(\"_: {}\", ident),\n                 ),\n                 // Also catches `fn foo(&a)`.\n-                PatKind::Ref(ref pat, mutab) => {\n+                PatKind::Ref(ref pat, mutab)\n+                    if matches!(pat.clone().into_inner().kind, PatKind::Ident(..)) =>\n+                {\n                     match pat.clone().into_inner().kind {\n                         PatKind::Ident(_, ident, _) => {\n                             let mutab = mutab.prefix_str();\n@@ -1637,20 +1641,23 @@ impl<'a> Parser<'a> {\n                                 format!(\"_: &{}{}\", mutab, ident),\n                             )\n                         }\n-                        PatKind::Path(..) => {\n-                            err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-                            return None;\n-                        }\n-                        _ => return None,\n+                        _ => unreachable!(),\n                     }\n                 }\n-                // Also catches `fn foo(<Bar as T>::Baz)`\n-                PatKind::Path(..) => {\n-                    err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n+                _ => {\n+                    // Otherwise, try to get a type and emit a suggestion.\n+                    if let Some(ty) = pat.to_ty() {\n+                        err.span_suggestion_verbose(\n+                            pat.span,\n+                            \"explicitly ignore the parameter name\",\n+                            format!(\"_: {}\", pprust::ty_to_string(&ty)),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(rfc_note);\n+                    }\n+\n                     return None;\n                 }\n-                // Ignore other `PatKind`.\n-                _ => return None,\n             };\n \n             // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n@@ -1678,7 +1685,7 @@ impl<'a> Parser<'a> {\n                 type_sugg,\n                 Applicability::MachineApplicable,\n             );\n-            err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n+            err.note(rfc_note);\n \n             // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n             return if self.token == token::Lt { None } else { Some(ident) };"}, {"sha": "39f18dff25082f406362c95c43fb5550c79f0be3", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d99e68940087c7696a5d4919ba1456d6415fb9b/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d99e68940087c7696a5d4919ba1456d6415fb9b/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=2d99e68940087c7696a5d4919ba1456d6415fb9b", "patch": "@@ -45,6 +45,10 @@ LL |     fn foo_with_qualified_path(<Bar as T>::Baz);\n    |                                               ^ expected one of 8 possible tokens\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path(_: <Bar as T>::Baz);\n+   |                                ^^^^^^^^^^^^^^^^^^\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:15:56\n@@ -53,6 +57,10 @@ LL |     fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n    |                                                        ^ expected one of 8 possible tokens\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path_and_ref(_: &<Bar as T>::Baz);\n+   |                                        ^^^^^^^^^^^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:18:36"}]}