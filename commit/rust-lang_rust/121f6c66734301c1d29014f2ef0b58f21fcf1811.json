{"sha": "121f6c66734301c1d29014f2ef0b58f21fcf1811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWY2YzY2NzM0MzAxYzFkMjkwMTRmMmVmMGI1OGYyMWZjZjE4MTE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-04T23:53:00Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-05T22:08:21Z"}, "message": "Final alpha stabilization of std::slice\n\nMarks as `#[stable]`:\n\n* Various iterator structs for stable methods, e.g. `Chunks` and\n  `Windows`.\n* The `SliceExt` trait itself.", "tree": {"sha": "2b61b2f70b138fa31ac2d95437fd2c041fc8ced5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b61b2f70b138fa31ac2d95437fd2c041fc8ced5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121f6c66734301c1d29014f2ef0b58f21fcf1811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121f6c66734301c1d29014f2ef0b58f21fcf1811", "html_url": "https://github.com/rust-lang/rust/commit/121f6c66734301c1d29014f2ef0b58f21fcf1811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121f6c66734301c1d29014f2ef0b58f21fcf1811/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e921afddd8c12d676205bb951deff1aa5761bedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e921afddd8c12d676205bb951deff1aa5761bedf", "html_url": "https://github.com/rust-lang/rust/commit/e921afddd8c12d676205bb951deff1aa5761bedf"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "ceccca561aec794651afffff172bbcde70678a79", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/121f6c66734301c1d29014f2ef0b58f21fcf1811/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121f6c66734301c1d29014f2ef0b58f21fcf1811/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=121f6c66734301c1d29014f2ef0b58f21fcf1811", "patch": "@@ -86,6 +86,7 @@\n //! * Further iterators exist that split, chunk or permute the slice.\n \n #![doc(primitive = \"slice\")]\n+#![stable]\n \n use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n@@ -119,8 +120,9 @@ pub use core::slice::{from_raw_buf, from_raw_mut_buf};\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Allocating extension methods for slices.\n-#[unstable = \"needs associated types, may merge with other traits\"]\n+#[stable]\n pub trait SliceExt for Sized? {\n+    #[stable]\n     type Item;\n \n     /// Sorts the slice, in place, using `compare` to compare\n@@ -699,7 +701,7 @@ pub trait SliceExt for Sized? {\n     fn into_vec(self: Box<Self>) -> Vec<Self::Item>;\n }\n \n-#[unstable = \"trait is unstable\"]\n+#[stable]\n impl<T> SliceExt for [T] {\n     type Item = T;\n "}, {"sha": "8174596e65e520a0b355bfeba7f4f23fc10910f3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/121f6c66734301c1d29014f2ef0b58f21fcf1811/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121f6c66734301c1d29014f2ef0b58f21fcf1811/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=121f6c66734301c1d29014f2ef0b58f21fcf1811", "patch": "@@ -1083,26 +1083,30 @@ impl<T, I: SplitIter + Iterator<Item=T>> Iterator for GenericSplitN<I> {\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+#[stable]\n pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n }\n \n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+#[stable]\n pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n }\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+#[stable]\n pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n }\n \n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+#[stable]\n pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n }\n@@ -1134,7 +1138,7 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n \n /// An iterator over overlapping subslices of length `size`.\n #[derive(Clone)]\n-#[experimental = \"needs review\"]\n+#[stable]\n pub struct Windows<'a, T:'a> {\n     v: &'a [T],\n     size: uint\n@@ -1171,7 +1175,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n /// When the slice len is not evenly divided by the chunk size, the last slice\n /// of the iteration will be the remainder.\n #[derive(Clone)]\n-#[experimental = \"needs review\"]\n+#[stable]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],\n     size: uint\n@@ -1246,7 +1250,7 @@ impl<'a, T> RandomAccessIterator for Chunks<'a, T> {\n /// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n-#[experimental = \"needs review\"]\n+#[stable]\n pub struct ChunksMut<'a, T:'a> {\n     v: &'a mut [T],\n     chunk_size: uint\n@@ -1360,7 +1364,7 @@ pub unsafe fn from_raw_buf<'a, T>(p: &'a *const T, len: uint) -> &'a [T] {\n /// not being able to provide a non-aliasing guarantee of the returned mutable\n /// slice.\n #[inline]\n-#[unstable = \"jshould be renamed to from_raw_parts_mut\"]\n+#[unstable = \"should be renamed to from_raw_parts_mut\"]\n pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n     transmute(RawSlice { data: *p as *const T, len: len })\n }"}]}