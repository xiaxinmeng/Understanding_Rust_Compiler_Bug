{"sha": "82ec4586f1a43112ba22645e9c88edf08994843e", "node_id": "C_kwDOAAsO6NoAKDgyZWM0NTg2ZjFhNDMxMTJiYTIyNjQ1ZTljODhlZGYwODk5NDg0M2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T19:48:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T19:48:04Z"}, "message": "Auto merge of #14408 - Veykril:intern-block, r=Veykril\n\ninternal: Only intern blocks that declare items\n\nWe only used `BlockId` for the block defmap, so this is wasted memory. Lowering for non item declaring blocks is also cheaper now as we no longer have to fully lower a block that defines not items.", "tree": {"sha": "50ceee02ae08a7d4a9a76e96b72caf8d800f203a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50ceee02ae08a7d4a9a76e96b72caf8d800f203a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ec4586f1a43112ba22645e9c88edf08994843e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ec4586f1a43112ba22645e9c88edf08994843e", "html_url": "https://github.com/rust-lang/rust/commit/82ec4586f1a43112ba22645e9c88edf08994843e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ec4586f1a43112ba22645e9c88edf08994843e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c798439654bded00fb7d92fae549ba8cd586f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c798439654bded00fb7d92fae549ba8cd586f3", "html_url": "https://github.com/rust-lang/rust/commit/d1c798439654bded00fb7d92fae549ba8cd586f3"}, {"sha": "675fc88afd9f4bb767330eac554672ae9764cd0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/675fc88afd9f4bb767330eac554672ae9764cd0c", "html_url": "https://github.com/rust-lang/rust/commit/675fc88afd9f4bb767330eac554672ae9764cd0c"}], "stats": {"total": 74, "additions": 57, "deletions": 17}, "files": [{"sha": "3fb3e4f68dd55cb04a4bff6325ccff2e89b77534", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=82ec4586f1a43112ba22645e9c88edf08994843e", "patch": "@@ -37,6 +37,7 @@ use crate::{\n         RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n+    item_tree::ItemTree,\n     lang_item::LangItem,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n@@ -888,16 +889,24 @@ impl ExprCollector<'_> {\n     fn collect_block_(\n         &mut self,\n         block: ast::BlockExpr,\n-        mk_block: impl FnOnce(BlockId, Box<[Statement]>, Option<ExprId>) -> Expr,\n+        mk_block: impl FnOnce(Option<BlockId>, Box<[Statement]>, Option<ExprId>) -> Expr,\n     ) -> ExprId {\n         let file_local_id = self.ast_id_map.ast_id(&block);\n         let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n-        let block_loc =\n-            BlockLoc { ast_id, module: self.expander.def_map.module_id(self.expander.module) };\n-        let block_id = self.db.intern_block(block_loc);\n \n-        let (module, def_map) = match self.db.block_def_map(block_id) {\n-            Some(def_map) => {\n+        let block_id = if ItemTree::block_has_items(self.db, ast_id.file_id, &block) {\n+            Some(self.db.intern_block(BlockLoc {\n+                ast_id,\n+                module: self.expander.def_map.module_id(self.expander.module),\n+            }))\n+        } else {\n+            None\n+        };\n+\n+        let (module, def_map) = match block_id\n+            .and_then(|block_id| self.db.block_def_map(block_id).zip(Some(block_id)))\n+        {\n+            Some((def_map, block_id)) => {\n                 self.body.block_scopes.push(block_id);\n                 (def_map.root(), def_map)\n             }"}, {"sha": "8fe20da74778d5aa806a4e235e0020e2b5b780f1", "filename": "crates/hir-def/src/body/scope.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs?ref=82ec4586f1a43112ba22645e9c88edf08994843e", "patch": "@@ -115,15 +115,10 @@ impl ExprScopes {\n     fn new_block_scope(\n         &mut self,\n         parent: ScopeId,\n-        block: BlockId,\n+        block: Option<BlockId>,\n         label: Option<(LabelId, Name)>,\n     ) -> ScopeId {\n-        self.scopes.alloc(ScopeData {\n-            parent: Some(parent),\n-            block: Some(block),\n-            label,\n-            entries: vec![],\n-        })\n+        self.scopes.alloc(ScopeData { parent: Some(parent), block, label, entries: vec![] })\n     }\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, binding: BindingId) {"}, {"sha": "443594d271787a54fb75526062521711a3207af3", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=82ec4586f1a43112ba22645e9c88edf08994843e", "patch": "@@ -117,23 +117,23 @@ pub enum Expr {\n         expr: ExprId,\n     },\n     Block {\n-        id: BlockId,\n+        id: Option<BlockId>,\n         statements: Box<[Statement]>,\n         tail: Option<ExprId>,\n         label: Option<LabelId>,\n     },\n     Async {\n-        id: BlockId,\n+        id: Option<BlockId>,\n         statements: Box<[Statement]>,\n         tail: Option<ExprId>,\n     },\n     Const {\n-        id: BlockId,\n+        id: Option<BlockId>,\n         statements: Box<[Statement]>,\n         tail: Option<ExprId>,\n     },\n     Unsafe {\n-        id: BlockId,\n+        id: Option<BlockId>,\n         statements: Box<[Statement]>,\n         tail: Option<ExprId>,\n     },"}, {"sha": "06942170179616af77f7c73fb8a08bb5fb283c85", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=82ec4586f1a43112ba22645e9c88edf08994843e", "patch": "@@ -152,6 +152,14 @@ impl ItemTree {\n         &self.top_level\n     }\n \n+    pub fn block_has_items(\n+        db: &dyn DefDatabase,\n+        file_id: HirFileId,\n+        block: &ast::BlockExpr,\n+    ) -> bool {\n+        lower::Ctx::new(db, file_id).block_has_items(block)\n+    }\n+\n     /// Returns the inner attributes of the source file.\n     pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n         Attrs::filter("}, {"sha": "49deff080e538e67a429ecc9e95ca25f8d0951c0", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec4586f1a43112ba22645e9c88edf08994843e/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=82ec4586f1a43112ba22645e9c88edf08994843e", "patch": "@@ -101,6 +101,34 @@ impl<'a> Ctx<'a> {\n         self.tree\n     }\n \n+    pub(super) fn block_has_items(mut self, block: &ast::BlockExpr) -> bool {\n+        let statement_has_item = block\n+            .statements()\n+            .find_map(|stmt| match stmt {\n+                ast::Stmt::Item(item) => self.lower_mod_item(&item),\n+                // Macro calls can be both items and expressions. The syntax library always treats\n+                // them as expressions here, so we undo that.\n+                ast::Stmt::ExprStmt(es) => match es.expr()? {\n+                    ast::Expr::MacroExpr(expr) => self.lower_mod_item(&expr.macro_call()?.into()),\n+                    _ => None,\n+                },\n+                _ => None,\n+            })\n+            .is_some();\n+        if statement_has_item {\n+            return true;\n+        }\n+\n+        if let Some(ast::Expr::MacroExpr(expr)) = block.tail_expr() {\n+            if let Some(call) = expr.macro_call() {\n+                if let Some(_) = self.lower_mod_item(&call.into()) {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     fn data(&mut self) -> &mut ItemTreeData {\n         self.tree.data_mut()\n     }"}]}