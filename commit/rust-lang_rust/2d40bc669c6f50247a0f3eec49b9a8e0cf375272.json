{"sha": "2d40bc669c6f50247a0f3eec49b9a8e0cf375272", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNDBiYzY2OWM2ZjUwMjQ3YTBmM2VlYzQ5YjlhOGUwY2YzNzUyNzI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T04:02:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T04:02:49Z"}, "message": "Retire defunct copy_ty in favour of trans_copy_ty, which invokes the same logic at the bottom.", "tree": {"sha": "1572751c14e6a05f74a29452f610701325db12af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1572751c14e6a05f74a29452f610701325db12af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d40bc669c6f50247a0f3eec49b9a8e0cf375272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d40bc669c6f50247a0f3eec49b9a8e0cf375272", "html_url": "https://github.com/rust-lang/rust/commit/2d40bc669c6f50247a0f3eec49b9a8e0cf375272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d40bc669c6f50247a0f3eec49b9a8e0cf375272/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a1b6e9140688388f785218ba477d4b93946219", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1b6e9140688388f785218ba477d4b93946219", "html_url": "https://github.com/rust-lang/rust/commit/d0a1b6e9140688388f785218ba477d4b93946219"}], "stats": {"total": 131, "additions": 60, "deletions": 71}, "files": [{"sha": "b0fd9c2602f4eb48fa2768cf803f8fcff07c4d75", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 60, "deletions": 71, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/2d40bc669c6f50247a0f3eec49b9a8e0cf375272/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2d40bc669c6f50247a0f3eec49b9a8e0cf375272/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=2d40bc669c6f50247a0f3eec49b9a8e0cf375272", "patch": "@@ -1695,7 +1695,7 @@ let trans_visitor\n       let dst = deref out_ptr in\n       let ty_params = deref (get_element_ptr args 0) in\n       let src = deref (get_element_ptr args 1) in\n-        copy_ty ty_params dst src ty curr_iso\n+        trans_copy_ty ty_params false dst ty src ty curr_iso\n     in\n     let ty_params_ptr = ty_params_covering ty in\n     let fty =\n@@ -2595,73 +2595,6 @@ let trans_visitor\n           iter_ty_parts_full ty_params dst src ty\n             (clone_ty ty_params clone_task) curr_iso\n \n-  and copy_ty\n-      (ty_params:Il.cell)\n-      (dst:Il.cell)\n-      (src:Il.cell)\n-      (ty:Ast.ty)\n-      (curr_iso:Ast.ty_iso option)\n-      : unit =\n-    iflog (fun _ ->\n-             annotate (\"copy_ty: referent data of type \" ^\n-                         (Fmt.fmt_to_str Ast.fmt_ty ty)));\n-    match ty with\n-        Ast.TY_nil\n-      | Ast.TY_bool\n-      | Ast.TY_mach _\n-      | Ast.TY_int\n-      | Ast.TY_uint\n-      | Ast.TY_native _\n-      | Ast.TY_type\n-      | Ast.TY_char ->\n-          iflog\n-            (fun _ -> annotate\n-               (Printf.sprintf \"copy_ty: simple mov (%Ld byte scalar)\"\n-                  (ty_sz abi ty)));\n-          mov dst (Il.Cell src)\n-\n-      | Ast.TY_param (i, _) ->\n-          iflog\n-            (fun _ -> annotate\n-               (Printf.sprintf \"copy_ty: parametric copy %#d\" i));\n-          aliasing false src\n-            begin\n-              fun src ->\n-                let td = get_ty_param ty_params i in\n-                let ty_params_ptr = get_tydesc_params ty_params td in\n-                  trans_call_dynamic_glue\n-                    td Abi.tydesc_field_copy_glue\n-                    (Some dst) [| ty_params_ptr; src; |]\n-            end\n-\n-      | Ast.TY_fn _\n-      | Ast.TY_obj _ ->\n-          begin\n-            let src_item = get_element_ptr src Abi.binding_field_item in\n-            let dst_item = get_element_ptr dst Abi.binding_field_item in\n-            let src_binding = get_element_ptr src Abi.binding_field_binding in\n-            let dst_binding = get_element_ptr dst Abi.binding_field_binding in\n-              mov dst_item (Il.Cell src_item);\n-              let null_jmp = null_check src_binding in\n-                (* Copy if we have a src binding. *)\n-                (* FIXME (issue #58): this is completely wrong, call\n-                 * through to the binding's self-copy fptr. For now\n-                 * this only works by accident.\n-                 *)\n-                trans_copy_ty ty_params true\n-                  dst_binding (Ast.TY_box Ast.TY_int)\n-                  src_binding (Ast.TY_box Ast.TY_int)\n-                  curr_iso;\n-                patch null_jmp\n-          end\n-\n-      | _ ->\n-          iter_ty_parts_full ty_params dst src ty\n-            (fun dst src ty curr_iso ->\n-               trans_copy_ty ty_params true\n-                 dst ty src ty curr_iso)\n-            curr_iso\n-\n   and free_ty\n       (is_gc:bool)\n       (ty_params:Il.cell)\n@@ -3004,10 +2937,66 @@ let trans_visitor\n                annotate (\"heavy copy: slot preparation\"));\n \n       let curr_iso = maybe_enter_iso dst_ty curr_iso in\n-      let (dst, dst_ty') = deref_ty DEREF_none initializing dst dst_ty in\n+      let (dst, ty) = deref_ty DEREF_none initializing dst dst_ty in\n       let (src, _) = deref_ty DEREF_none false src src_ty in\n-        assert (dst_ty' = dst_ty);\n-        copy_ty ty_params dst src dst_ty' curr_iso\n+        assert (ty = dst_ty);\n+        match ty with\n+            Ast.TY_nil\n+          | Ast.TY_bool\n+          | Ast.TY_mach _\n+          | Ast.TY_int\n+          | Ast.TY_uint\n+          | Ast.TY_native _\n+          | Ast.TY_type\n+          | Ast.TY_char ->\n+              iflog\n+                (fun _ -> annotate\n+                   (Printf.sprintf \"copy_ty: simple mov (%Ld byte scalar)\"\n+                      (ty_sz abi ty)));\n+              mov dst (Il.Cell src)\n+\n+          | Ast.TY_param (i, _) ->\n+              iflog\n+                (fun _ -> annotate\n+                   (Printf.sprintf \"copy_ty: parametric copy %#d\" i));\n+              aliasing false src\n+                begin\n+                  fun src ->\n+                    let td = get_ty_param ty_params i in\n+                    let ty_params_ptr = get_tydesc_params ty_params td in\n+                      trans_call_dynamic_glue\n+                        td Abi.tydesc_field_copy_glue\n+                        (Some dst) [| ty_params_ptr; src; |]\n+                end\n+\n+          | Ast.TY_fn _\n+          | Ast.TY_obj _ ->\n+              begin\n+                let src_item = get_element_ptr src Abi.binding_field_item in\n+                let dst_item = get_element_ptr dst Abi.binding_field_item in\n+                let src_binding = get_element_ptr src Abi.binding_field_binding in\n+                let dst_binding = get_element_ptr dst Abi.binding_field_binding in\n+                  mov dst_item (Il.Cell src_item);\n+                  let null_jmp = null_check src_binding in\n+                    (* Copy if we have a src binding. *)\n+                    (* FIXME (issue #58): this is completely wrong, call\n+                     * through to the binding's self-copy fptr. For now\n+                     * this only works by accident.\n+                     *)\n+                    trans_copy_ty ty_params false\n+                      dst_binding (Ast.TY_box Ast.TY_int)\n+                      src_binding (Ast.TY_box Ast.TY_int)\n+                      curr_iso;\n+                    patch null_jmp\n+              end\n+\n+          | _ ->\n+              iter_ty_parts_full ty_params dst src ty\n+                (fun dst src ty curr_iso ->\n+                   trans_copy_ty ty_params true\n+                     dst ty src ty curr_iso)\n+                curr_iso\n+\n \n   and trans_copy\n       (initializing:bool)"}]}