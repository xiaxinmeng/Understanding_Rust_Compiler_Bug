{"sha": "598d836fff59787892de1d736e521b10d9117531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OGQ4MzZmZmY1OTc4Nzg5MmRlMWQ3MzZlNTIxYjEwZDkxMTc1MzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-03T18:11:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-16T14:25:10Z"}, "message": "Stabilize x86/x86_64 SIMD\n\nThis commit stabilizes the SIMD in Rust for the x86/x86_64 platforms. Notably\nthis commit is stabilizing:\n\n* The `std::arch::{x86, x86_64}` modules and the intrinsics contained inside.\n* The `is_x86_feature_detected!` macro in the standard library\n* The `#[target_feature(enable = \"...\")]` attribute\n* The `#[cfg(target_feature = \"...\")]` matcher\n\nStabilization of the module and intrinsics were primarily done in\nrust-lang-nursery/stdsimd#414 and the two attribute stabilizations are done in\nthis commit. The standard library is also tweaked a bit with the new way that\nstdsimd is integrated.\n\nNote that other architectures like `std::arch::arm` are not stabilized as part\nof this commit, they will likely stabilize in the future after they've been\nimplemented and fleshed out. Similarly the `std::simd` module is also not being\nstabilized in this commit, only `std::arch`. Finally, nothing related to `__m64`\nis stabilized in this commit either (MMX), only SSE and up types and intrinsics\nare stabilized.\n\nCloses #29717\nCloses #44839\nCloses #48556", "tree": {"sha": "d45d80454394b7c40bfab3e074258bb5e57be8ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45d80454394b7c40bfab3e074258bb5e57be8ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598d836fff59787892de1d736e521b10d9117531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598d836fff59787892de1d736e521b10d9117531", "html_url": "https://github.com/rust-lang/rust/commit/598d836fff59787892de1d736e521b10d9117531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598d836fff59787892de1d736e521b10d9117531/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a2dd9912e762fb0029c4463002d674686c1159", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2dd9912e762fb0029c4463002d674686c1159", "html_url": "https://github.com/rust-lang/rust/commit/d6a2dd9912e762fb0029c4463002d674686c1159"}], "stats": {"total": 123, "additions": 26, "deletions": 97}, "files": [{"sha": "1d56c0c637afc509e871fe3e4c3587efe805cad6", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598d836fff59787892de1d736e521b10d9117531/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/598d836fff59787892de1d736e521b10d9117531/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=598d836fff59787892de1d736e521b10d9117531", "patch": "@@ -49,7 +49,7 @@\n \turl = https://github.com/rust-lang/llvm\n [submodule \"src/stdsimd\"]\n \tpath = src/stdsimd\n-\turl = https://github.com/rust-lang-nursery/stdsimd\n+\turl = https://github.com/alexcrichton/stdsimd\n [submodule \"src/tools/lld\"]\n \tpath = src/tools/lld\n \turl = https://github.com/rust-lang/lld.git"}, {"sha": "d6861922f864a6d7ccea24612cf68aeb12e5bf05", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/598d836fff59787892de1d736e521b10d9117531/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d836fff59787892de1d736e521b10d9117531/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=598d836fff59787892de1d736e521b10d9117531", "patch": "@@ -68,7 +68,6 @@\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n #![feature(attr_literals)]\n-#![feature(cfg_target_feature)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n@@ -96,11 +95,13 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n-#![feature(target_feature)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n \n+#![cfg_attr(stage0, feature(target_feature))]\n+#![cfg_attr(stage0, feature(cfg_target_feature))]\n+\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;\n@@ -204,6 +205,20 @@ mod unit;\n // things like SIMD and such. Note that the actual source for all this lies in a\n // different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n // a bit wonky.\n+#[allow(unused_macros)]\n+macro_rules! test_v16 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v32 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v64 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v128 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v256 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v512 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n #[path = \"../stdsimd/coresimd/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n@@ -213,6 +228,6 @@ mod coresimd;\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(not(stage0))]\n pub use coresimd::simd;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n #[cfg(not(stage0))]\n pub use coresimd::arch;"}, {"sha": "01de49ef5dfd83cd0dbe932c24439c5099bc2c9a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598d836fff59787892de1d736e521b10d9117531/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d836fff59787892de1d736e521b10d9117531/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=598d836fff59787892de1d736e521b10d9117531", "patch": "@@ -525,7 +525,7 @@ mod coresimd {\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::simd;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n #[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::arch;\n "}, {"sha": "ab3364a18ecc7c8b12498ec737f8289794ff6cde", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/598d836fff59787892de1d736e521b10d9117531/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d836fff59787892de1d736e521b10d9117531/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=598d836fff59787892de1d736e521b10d9117531", "patch": "@@ -231,9 +231,6 @@ declare_features! (\n     // allow `repr(simd)`, and importing the various simd intrinsics\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // Allows cfg(target_feature = \"...\").\n-    (active, cfg_target_feature, \"1.4.0\", Some(29717), None),\n-\n     // allow `extern \"platform-intrinsic\" { ... }`\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n@@ -293,9 +290,6 @@ declare_features! (\n \n     (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n-    // Allows #[target_feature(...)]\n-    (active, target_feature, \"1.15.0\", None, None),\n-\n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", None, None),\n \n@@ -574,6 +568,10 @@ declare_features! (\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n     (accepted, generic_param_attrs, \"1.26.0\", Some(48848), None),\n+    // Allows cfg(target_feature = \"...\").\n+    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    // Allows #[target_feature(...)]\n+    (accepted, target_feature, \"1.27.0\", None, None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -918,10 +916,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n-    (\"target_feature\", Whitelisted, Gated(\n-        Stability::Unstable, \"target_feature\",\n-        \"the `#[target_feature]` attribute is an experimental feature\",\n-        cfg_fn!(target_feature))),\n+    (\"target_feature\", Normal, Ungated),\n     (\"export_name\", Whitelisted, Ungated),\n     (\"inline\", Whitelisted, Ungated),\n     (\"link\", Whitelisted, Ungated),\n@@ -1052,7 +1047,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n // cfg(...)'s that are feature gated\n const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n-    (\"target_feature\", \"cfg_target_feature\", cfg_fn!(cfg_target_feature)),\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),"}, {"sha": "01ed2bb1dea492324fbe21c3069cb8efacb14ec0", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=598d836fff59787892de1d736e521b10d9117531", "patch": "@@ -1 +1 @@\n-Subproject commit bcb720e55861c38db47f2ebdf26b7198338cb39d\n+Subproject commit 01ed2bb1dea492324fbe21c3069cb8efacb14ec0"}, {"sha": "7832e1c7c51520e7978b491b2bad1426d52f65c2", "filename": "src/test/ui/feature-gate-cfg-target-feature.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n-#[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n-struct Foo(u64, u64);\n-\n-#[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n-fn foo() {}\n-\n-fn main() {\n-    cfg!(target_feature = \"x\");\n-    //~^ ERROR `cfg(target_feature)` is experimental and subject to change\n-}"}, {"sha": "bf9e596e71a7401f98dbaf6428c5667bf74d13ef", "filename": "src/test/ui/feature-gate-cfg-target-feature.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:12:12\n-   |\n-LL | #[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:11:7\n-   |\n-LL | #[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n-   |       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:15:19\n-   |\n-LL | #[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n-   |                   ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:19:10\n-   |\n-LL |     cfg!(target_feature = \"x\");\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "da2e41a0f5e422347b8643fa42b683f2f517a25b", "filename": "src/test/ui/feature-gate-target_feature.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[target_feature = \"+sse2\"]\n-//~^ the `#[target_feature]` attribute is an experimental feature\n-fn foo() {}"}, {"sha": "0f31abf7b42c8a561b17872dd5d3f1137c4582c2", "filename": "src/test/ui/feature-gate-target_feature.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2dd9912e762fb0029c4463002d674686c1159/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr?ref=d6a2dd9912e762fb0029c4463002d674686c1159", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: the `#[target_feature]` attribute is an experimental feature\n-  --> $DIR/feature-gate-target_feature.rs:11:1\n-   |\n-LL | #[target_feature = \"+sse2\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(target_feature)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}