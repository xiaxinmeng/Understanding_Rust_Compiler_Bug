{"sha": "33245fe682874fd138bb6d49b9e5d72e5b915800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjQ1ZmU2ODI4NzRmZDEzOGJiNmQ0OWI5ZTVkNzJlNWI5MTU4MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-11T06:54:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-11T06:54:24Z"}, "message": "Auto merge of #46640 - tommyip:ui_tests, r=estebank\n\nEnforce successful ui tests to have must-compile-successfully flag.\n\nr? @nikomatsakis\ncc @oli-obk\n\nFixes #46587", "tree": {"sha": "9c34a3d4b28f95bfef057f663ac0ff13083c82b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c34a3d4b28f95bfef057f663ac0ff13083c82b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33245fe682874fd138bb6d49b9e5d72e5b915800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33245fe682874fd138bb6d49b9e5d72e5b915800", "html_url": "https://github.com/rust-lang/rust/commit/33245fe682874fd138bb6d49b9e5d72e5b915800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33245fe682874fd138bb6d49b9e5d72e5b915800/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3bd73d8143f093c58f367b46434c2d555ef62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3bd73d8143f093c58f367b46434c2d555ef62d", "html_url": "https://github.com/rust-lang/rust/commit/5f3bd73d8143f093c58f367b46434c2d555ef62d"}, {"sha": "2ad5bf056c88283613cec925e4d025c4d4b89c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad5bf056c88283613cec925e4d025c4d4b89c55", "html_url": "https://github.com/rust-lang/rust/commit/2ad5bf056c88283613cec925e4d025c4d4b89c55"}], "stats": {"total": 456, "additions": 253, "deletions": 203}, "files": [{"sha": "12ccba0ebf2f9a745e2e22e59ddf988282c735b0", "filename": "src/test/ui/check_match/issue-43253.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![feature(exclusive_range_pattern)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "91bd6b39c8c1dec4c5227e4037668d297ec04bfc", "filename": "src/test/ui/check_match/issue-43253.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,24 +1,24 @@\n warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:37:9\n+  --> $DIR/issue-43253.rs:39:9\n    |\n-37 |         9 => {},\n+39 |         9 => {},\n    |         ^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43253.rs:12:9\n+  --> $DIR/issue-43253.rs:14:9\n    |\n-12 | #![warn(unreachable_patterns)]\n+14 | #![warn(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:43:9\n+  --> $DIR/issue-43253.rs:45:9\n    |\n-43 |         8...9 => {},\n+45 |         8...9 => {},\n    |         ^^^^^\n \n warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:49:9\n+  --> $DIR/issue-43253.rs:51:9\n    |\n-49 |         9...9 => {},\n+51 |         9...9 => {},\n    |         ^^^^^\n "}, {"sha": "81c3b5dde6d7611b322a8b0b67939d9bf42d3220", "filename": "src/test/ui/codemap_tests/unicode_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n fn main() {\n     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n     println!(\"{}\", s);"}, {"sha": "d2c850d3cbdf259f423d1e9e45b446133165f7bc", "filename": "src/test/ui/codemap_tests/unicode_3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,7 +1,7 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/unicode_3.rs:12:45\n+  --> $DIR/unicode_3.rs:14:45\n    |\n-12 |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n+14 |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n    |                       ----------^^^^^^^^^^^\n    |                       |\n    |                       help: use `loop`"}, {"sha": "6305fbcffce4e849d6cab6637255c2289f11ee24", "filename": "src/test/ui/explain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fexplain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fexplain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,3 +9,4 @@\n // except according to those terms.\n \n // compile-flags: --explain E0591\n+// must-compile-successfully"}, {"sha": "4c53d19f719bf627381c428cddcb90860553c65a", "filename": "src/test/ui/hello_world/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n // Test that compiling hello world succeeds with no output of any kind.\n \n fn main() {"}, {"sha": "c1840f3d44c13c0e0e6ccea8aba002352564ae84", "filename": "src/test/ui/lint/command-line-lint-group-allow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -A bad-style\n+// must-compile-successfully\n \n fn main() {\n     let _InappropriateCamelCasing = true;"}, {"sha": "048c15b1230457cca022bf9922aa9071660ba3f2", "filename": "src/test/ui/lint/command-line-lint-group-warn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -W bad-style\n+// must-compile-successfully\n \n fn main() {\n     let _InappropriateCamelCasing = true;"}, {"sha": "6562e16a45d8f11d50cbd7cbee8258319183b365", "filename": "src/test/ui/lint/command-line-lint-group-warn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,7 +1,7 @@\n warning: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n-  --> $DIR/command-line-lint-group-warn.rs:14:9\n+  --> $DIR/command-line-lint-group-warn.rs:15:9\n    |\n-14 |     let _InappropriateCamelCasing = true;\n+15 |     let _InappropriateCamelCasing = true;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-W non-snake-case` implied by `-W bad-style`"}, {"sha": "3de2cc0bfae0402ca3c6b82c1e10eb87c2557a2e", "filename": "src/test/ui/lint/not_found.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fnot_found.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fnot_found.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n // this tests the `unknown_lint` lint, especially the suggestions\n \n // the suggestion only appears if a lint with the lowercase name exists"}, {"sha": "16daceecb988c9bf8bd4468350f17e68ec759666", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,20 +1,20 @@\n warning: unknown lint: `FOO_BAR`\n-  --> $DIR/not_found.rs:14:9\n+  --> $DIR/not_found.rs:16:9\n    |\n-14 | #[allow(FOO_BAR)]\n+16 | #[allow(FOO_BAR)]\n    |         ^^^^^^^\n    |\n    = note: #[warn(unknown_lints)] on by default\n \n warning: unknown lint: `DEAD_CODE`\n-  --> $DIR/not_found.rs:16:8\n+  --> $DIR/not_found.rs:18:8\n    |\n-16 | #[warn(DEAD_CODE)]\n+18 | #[warn(DEAD_CODE)]\n    |        ^^^^^^^^^ help: lowercase the lint name: `dead_code`\n \n warning: unknown lint: `Warnings`\n-  --> $DIR/not_found.rs:18:8\n+  --> $DIR/not_found.rs:20:8\n    |\n-18 | #[deny(Warnings)]\n+20 | #[deny(Warnings)]\n    |        ^^^^^^^^ help: lowercase the lint name: `warnings`\n "}, {"sha": "4192b7dceef20c504509d5225ff4a3840e5610ec", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -14,6 +14,8 @@\n // suggestions to use `crate` given when it is on). When that feature becomes\n // stable, this test can be deleted.\n \n+// must-compile-successfully\n+\n #![feature(macro_vis_matcher)]\n \n #![allow(unused)]"}, {"sha": "0c2841a9e15d537ab2f5396e30f1c0c92e4772d8", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,131 +1,131 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:24:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:26:5\n    |\n-24 |     pub use std::fmt;\n+26 |     pub use std::fmt;\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n note: lint level defined here\n-  --> $DIR/unreachable_pub-pub_crate.rs:20:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:22:9\n    |\n-20 | #![warn(unreachable_pub)]\n+22 | #![warn(unreachable_pub)]\n    |         ^^^^^^^^^^^^^^^\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:26:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:28:5\n    |\n-26 |     pub struct Hydrogen {\n+28 |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub-pub_crate.rs:28:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:30:9\n    |\n-28 |         pub neutrons: usize,\n+30 |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:34:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:36:9\n    |\n-34 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n+36 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:38:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n    |\n-38 |     pub enum Helium {}\n+40 |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:39:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n    |\n-39 |     pub union Lithium { c1: usize, c2: u8 }\n+41 |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n    |\n-40 |     pub fn beryllium() {}\n+42 |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n    |\n-41 |     pub trait Boron {}\n+43 |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n    |\n-42 |     pub const CARBON: usize = 1;\n+44 |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:45:5\n    |\n-43 |     pub static NITROGEN: usize = 2;\n+45 |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:46:5\n    |\n-44 |     pub type Oxygen = bool;\n+46 |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:47:47\n+  --> $DIR/unreachable_pub-pub_crate.rs:49:47\n    |\n-47 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+49 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n    |                                               |\n    |                                               help: consider restricting its visibility: `pub(crate)`\n-48 |     }\n-49 |     define_empty_struct_with_visibility!(pub, Fluorine);\n+50 |     }\n+51 |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ---------------------------------------------------- in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:52:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:54:9\n    |\n-52 |         pub fn catalyze() -> bool;\n+54 |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`"}, {"sha": "393bccf03a73a48e266bf44032389a0706636db0", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![feature(crate_visibility_modifier)]\n #![feature(macro_vis_matcher)]\n "}, {"sha": "093870866c0a3fd8bce52792e327979281f5a2c9", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,131 +1,131 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:19:5\n+  --> $DIR/unreachable_pub.rs:21:5\n    |\n-19 |     pub use std::fmt;\n+21 |     pub use std::fmt;\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n note: lint level defined here\n-  --> $DIR/unreachable_pub.rs:15:9\n+  --> $DIR/unreachable_pub.rs:17:9\n    |\n-15 | #![warn(unreachable_pub)]\n+17 | #![warn(unreachable_pub)]\n    |         ^^^^^^^^^^^^^^^\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:21:5\n+  --> $DIR/unreachable_pub.rs:23:5\n    |\n-21 |     pub struct Hydrogen {\n+23 |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub.rs:23:9\n+  --> $DIR/unreachable_pub.rs:25:9\n    |\n-23 |         pub neutrons: usize,\n+25 |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:29:9\n+  --> $DIR/unreachable_pub.rs:31:9\n    |\n-29 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n+31 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:33:5\n+  --> $DIR/unreachable_pub.rs:35:5\n    |\n-33 |     pub enum Helium {}\n+35 |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:34:5\n+  --> $DIR/unreachable_pub.rs:36:5\n    |\n-34 |     pub union Lithium { c1: usize, c2: u8 }\n+36 |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:35:5\n+  --> $DIR/unreachable_pub.rs:37:5\n    |\n-35 |     pub fn beryllium() {}\n+37 |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:36:5\n+  --> $DIR/unreachable_pub.rs:38:5\n    |\n-36 |     pub trait Boron {}\n+38 |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:37:5\n+  --> $DIR/unreachable_pub.rs:39:5\n    |\n-37 |     pub const CARBON: usize = 1;\n+39 |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:38:5\n+  --> $DIR/unreachable_pub.rs:40:5\n    |\n-38 |     pub static NITROGEN: usize = 2;\n+40 |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:39:5\n+  --> $DIR/unreachable_pub.rs:41:5\n    |\n-39 |     pub type Oxygen = bool;\n+41 |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:42:47\n+  --> $DIR/unreachable_pub.rs:44:47\n    |\n-42 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+44 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n    |                                               |\n    |                                               help: consider restricting its visibility: `crate`\n-43 |     }\n-44 |     define_empty_struct_with_visibility!(pub, Fluorine);\n+45 |     }\n+46 |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ---------------------------------------------------- in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:47:9\n+  --> $DIR/unreachable_pub.rs:49:9\n    |\n-47 |         pub fn catalyze() -> bool;\n+49 |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`"}, {"sha": "fdcd45c8314dbe81071474a3c9f9a2c596812a3e", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: --error-format pretty-json -Zunstable-options\n+// must-compile-successfully\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "37eb9a98f74df1edfd5318d8ac2c72763f508cf4", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,10 +8,10 @@\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-      \"byte_start\": 1027,\n-      \"byte_end\": 1040,\n-      \"line_start\": 24,\n-      \"line_end\": 24,\n+      \"byte_start\": 1056,\n+      \"byte_end\": 1069,\n+      \"line_start\": 25,\n+      \"line_end\": 25,\n       \"column_start\": 14,\n       \"column_end\": 27,\n       \"is_primary\": true,\n@@ -35,10 +35,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 873,\n-          \"byte_end\": 886,\n-          \"line_start\": 19,\n-          \"line_end\": 19,\n+          \"byte_start\": 902,\n+          \"byte_end\": 915,\n+          \"line_start\": 20,\n+          \"line_end\": 20,\n           \"column_start\": 9,\n           \"column_end\": 22,\n           \"is_primary\": true,\n@@ -64,10 +64,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 1027,\n-          \"byte_end\": 1040,\n-          \"line_start\": 24,\n-          \"line_end\": 24,\n+          \"byte_start\": 1056,\n+          \"byte_end\": 1069,\n+          \"line_start\": 25,\n+          \"line_end\": 25,\n           \"column_start\": 14,\n           \"column_end\": 27,\n           \"is_primary\": true,\n@@ -88,15 +88,15 @@\n     }\n   ],\n   \"rendered\": \"warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_parens_json_suggestion.rs:24:14\n+  --> $DIR/unused_parens_json_suggestion.rs:25:14\n    |\n-24 |     let _a = (1 / (2 + 3));\n+25 |     let _a = (1 / (2 + 3));\n    |              ^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/unused_parens_json_suggestion.rs:19:9\n+  --> $DIR/unused_parens_json_suggestion.rs:20:9\n    |\n-19 | #![warn(unused_parens)]\n+20 | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n \""}, {"sha": "7e6da840900bc7fcc76bb3590e9650181faa360d", "filename": "src/test/ui/macros/trace-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z trace-macros\n+// must-compile-successfully\n \n fn main() {\n     println!(\"Hello, World!\");"}, {"sha": "842799648b2f71c1f3fc648524c5b89e332bbebd", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,7 +1,7 @@\n note: trace_macro\n-  --> $DIR/trace-macro.rs:14:5\n+  --> $DIR/trace-macro.rs:15:5\n    |\n-14 |     println!(\"Hello, World!\");\n+15 |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`"}, {"sha": "006bdaf4c6072874dc808a8960f142d6979b5743", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -28,6 +28,7 @@\n // requirement, as you can see from the `#[rustc_regions]` output.\n \n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n "}, {"sha": "81eb90020cc604067f9a324e05b60797cce25a74", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-approximated-ref.rs:60:9\n+  --> $DIR/propagate-approximated-ref.rs:61:9\n    |\n-60 |         demand_y(x, y, x.get())\n+61 |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/propagate-approximated-ref.rs:58:47\n+  --> $DIR/propagate-approximated-ref.rs:59:47\n    |\n-58 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+59 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-59 | |         // Only works if 'x: 'y:\n-60 | |         demand_y(x, y, x.get())\n-61 | |     });\n+60 | |         // Only works if 'x: 'y:\n+61 | |         demand_y(x, y, x.get())\n+62 | |     });\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n@@ -22,14 +22,14 @@ note: External requirements\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-ref.rs:57:1\n+  --> $DIR/propagate-approximated-ref.rs:58:1\n    |\n-57 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-58 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-59 | |         // Only works if 'x: 'y:\n-60 | |         demand_y(x, y, x.get())\n-61 | |     });\n-62 | | }\n+58 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+59 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+60 | |         // Only works if 'x: 'y:\n+61 | |         demand_y(x, y, x.get())\n+62 | |     });\n+63 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]) with substs []"}, {"sha": "5bd170cc30468b55c44c72dc39fabee422d4108c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -17,6 +17,7 @@\n // these errors are not (yet) reported.\n \n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n "}, {"sha": "8fd6acbbe5d2aea811e92db54e85c1e47583ab90", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:47:9\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:48:9\n    |\n-47 |         demand_y(x, y, x.get())\n+48 |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:46:47\n    |\n-45 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+46 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n-46 | |         // Only works if 'x: 'y:\n-47 | |         demand_y(x, y, x.get())\n-48 | |     });\n+47 | |         // Only works if 'x: 'y:\n+48 | |         demand_y(x, y, x.get())\n+49 | |     });\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n@@ -22,14 +22,14 @@ note: External requirements\n    = note: where '_#1r: '_#0r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:1\n    |\n-44 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-45 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-46 | |         // Only works if 'x: 'y:\n-47 | |         demand_y(x, y, x.get())\n-48 | |     });\n-49 | | }\n+45 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+46 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+47 | |         // Only works if 'x: 'y:\n+48 | |         demand_y(x, y, x.get())\n+49 | |     });\n+50 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []"}, {"sha": "f4fdd4a8c17a99cdb8d37d6e5a08f6154ae2b0c2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -18,6 +18,7 @@\n // these errors are not (yet) reported.\n \n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n "}, {"sha": "f189967244aa5c7c000f168d2efda222535cd490", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:50:9\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:51:9\n    |\n-50 |         demand_y(x, y, x.get())\n+51 |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:49:47\n    |\n-48 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+49 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-49 | |         // Only works if 'x: 'y:\n-50 | |         demand_y(x, y, x.get())\n-51 | |     });\n+50 | |         // Only works if 'x: 'y:\n+51 | |         demand_y(x, y, x.get())\n+52 | |     });\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n@@ -22,14 +22,14 @@ note: External requirements\n    = note: where '_#1r: '_#0r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:1\n    |\n-47 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-48 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-49 | |         // Only works if 'x: 'y:\n-50 | |         demand_y(x, y, x.get())\n-51 | |     });\n-52 | | }\n+48 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+49 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+50 | |         // Only works if 'x: 'y:\n+51 | |         demand_y(x, y, x.get())\n+52 | |     });\n+53 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []"}, {"sha": "97a15a36fdd1d85744c6d7b249ebb95cf3491982", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -16,6 +16,7 @@\n // anonymous regions as well.\n \n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n "}, {"sha": "1577e34e0defa0ab1c1e56cac85901484ac2a1fb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-approximated-val.rs:48:9\n+  --> $DIR/propagate-approximated-val.rs:49:9\n    |\n-48 |         demand_y(outlives1, outlives2, x.get())\n+49 |         demand_y(outlives1, outlives2, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/propagate-approximated-val.rs:46:45\n+  --> $DIR/propagate-approximated-val.rs:47:45\n    |\n-46 |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+47 |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |  _____________________________________________^\n-47 | |         // Only works if 'x: 'y:\n-48 | |         demand_y(outlives1, outlives2, x.get())\n-49 | |     });\n+48 | |         // Only works if 'x: 'y:\n+49 | |         demand_y(outlives1, outlives2, x.get())\n+50 | |     });\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n@@ -22,14 +22,14 @@ note: External requirements\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-val.rs:45:1\n+  --> $DIR/propagate-approximated-val.rs:46:1\n    |\n-45 | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-46 | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-47 | |         // Only works if 'x: 'y:\n-48 | |         demand_y(outlives1, outlives2, x.get())\n-49 | |     });\n-50 | | }\n+46 | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+47 | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+48 | |         // Only works if 'x: 'y:\n+49 | |         demand_y(outlives1, outlives2, x.get())\n+50 | |     });\n+51 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]) with substs []"}, {"sha": "ba4c287592eb48fd7b4273c58ba23e9503f027c3", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -14,6 +14,7 @@\n // regions is erased.\n \n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n "}, {"sha": "d93124963ebf82dbc9a59a5b8c245723c1db49ed", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-despite-same-free-region.rs:53:21\n+  --> $DIR/propagate-despite-same-free-region.rs:54:21\n    |\n-53 |             let p = x.get();\n+54 |             let p = x.get();\n    |                     ^^^^^^^\n \n note: External requirements\n-  --> $DIR/propagate-despite-same-free-region.rs:51:9\n+  --> $DIR/propagate-despite-same-free-region.rs:52:9\n    |\n-51 | /         |_outlives1, _outlives2, x, y| {\n-52 | |             // Only works if 'x: 'y:\n-53 | |             let p = x.get();\n-54 | |             demand_y(x, y, p)\n-55 | |         },\n+52 | /         |_outlives1, _outlives2, x, y| {\n+53 | |             // Only works if 'x: 'y:\n+54 | |             let p = x.get();\n+55 | |             demand_y(x, y, p)\n+56 | |         },\n    | |_________^\n    |\n    = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n@@ -22,15 +22,15 @@ note: External requirements\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n-  --> $DIR/propagate-despite-same-free-region.rs:48:1\n+  --> $DIR/propagate-despite-same-free-region.rs:49:1\n    |\n-48 | / fn supply<'a>(cell_a: Cell<&'a u32>) {\n-49 | |     establish_relationships(\n-50 | |         cell_a,\n-51 | |         |_outlives1, _outlives2, x, y| {\n+49 | / fn supply<'a>(cell_a: Cell<&'a u32>) {\n+50 | |     establish_relationships(\n+51 | |         cell_a,\n+52 | |         |_outlives1, _outlives2, x, y| {\n ...  |\n-56 | |     );\n-57 | | }\n+57 | |     );\n+58 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []"}, {"sha": "92b29a98c1c49f6863251ce6910ddd9647b4d8c8", "filename": "src/test/ui/nll/maybe-initialized-drop-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n //compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll\n+// must-compile-successfully\n \n #![allow(warnings)]\n "}, {"sha": "2012a7d02eeb38eada5323a2209b6878b364cf31", "filename": "src/test/ui/print-fuel/print-fuel.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -12,6 +12,7 @@\n #![allow(dead_code)]\n \n // compile-flags: -Z print-fuel=foo\n+// must-compile-successfully\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}, {"sha": "cf0bedee2ab3ea7b32a9463135294293ea44aae7", "filename": "src/test/ui/print_type_sizes/anonymous.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // All of the types that occur in this function are uninteresting, in\n // that one cannot control the sizes of these types with the same sort"}, {"sha": "7bc4822359e2a8182e6715999cdd2effbf41b238", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates how generics are handled: types have to be\n // monomorphized, in the MIR of the original function in which they"}, {"sha": "a9f294490159d842b465ae0b242977efa14877b1", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output."}, {"sha": "08b58704022ec299e44d321d71bc3551c72657a3", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates how niche-filling enums are handled,\n // modelled after cases like `Option<&u32>`, `Option<bool>` and such."}, {"sha": "40c41aae9109d9238d5097154d36e652eea6ede6", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates that when the same type occurs repeatedly\n // (even if multiple functions), it is only printed once in the"}, {"sha": "1ee6395ac6cba711849fab6b31b3244f0487a715", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates how packing is handled; it should cause\n // the elimination of padding that would normally be introduced"}, {"sha": "b3cd21323430546410007e6fb8828753fa0d4213", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates how padding is handled: alignment\n // requirements can lead to the introduction of padding, either before"}, {"sha": "1bf76da811552873edff540667e1d548c5a47a84", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates how padding is handled: alignment\n // requirements can lead to the introduction of padding, either before"}, {"sha": "fae6cd4009c309d8c226d6d63b84f6f29fa0fc93", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n #![feature(never_type)]\n "}, {"sha": "2725bb09b4bc0c89ad2b6e008529b75fc4d0e634", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z print-type-sizes\n+// must-compile-successfully\n \n // This file illustrates two things:\n //"}, {"sha": "7d74daaa6ee2046e461735292d8d2b84b8eefaf7", "filename": "src/test/ui/reachable/expr_andand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]"}, {"sha": "ab0b71f078186ac1cab1ac98fbdbb8ee86cb0cb7", "filename": "src/test/ui/reachable/expr_oror.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]"}, {"sha": "eb4753122f35c8d2637cf38acbe2cd228bfa6f85", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![feature(fn_must_use)]\n #![warn(unused_must_use)]\n "}, {"sha": "92d1eeaf155247a1acf657d87f30c0039bde1112", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,48 +1,48 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:59:5\n+  --> $DIR/fn_must_use.rs:61:5\n    |\n-59 |     need_to_use_this_value(); //~ WARN unused return value\n+61 |     need_to_use_this_value(); //~ WARN unused return value\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:12:9\n+  --> $DIR/fn_must_use.rs:14:9\n    |\n-12 | #![warn(unused_must_use)]\n+14 | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:64:5\n+  --> $DIR/fn_must_use.rs:66:5\n    |\n-64 |     m.need_to_use_this_method_value(); //~ WARN unused return value\n+66 |     m.need_to_use_this_method_value(); //~ WARN unused return value\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` which must be used: no side effects\n-  --> $DIR/fn_must_use.rs:65:5\n+  --> $DIR/fn_must_use.rs:67:5\n    |\n-65 |     m.is_even(); // trait method!\n+67 |     m.is_even(); // trait method!\n    |     ^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:71:5\n+  --> $DIR/fn_must_use.rs:73:5\n    |\n-71 |     2.eq(&3); //~ WARN unused return value\n+73 |     2.eq(&3); //~ WARN unused return value\n    |     ^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:72:5\n+  --> $DIR/fn_must_use.rs:74:5\n    |\n-72 |     m.eq(&n); //~ WARN unused return value\n+74 |     m.eq(&n); //~ WARN unused return value\n    |     ^^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/fn_must_use.rs:75:5\n+  --> $DIR/fn_must_use.rs:77:5\n    |\n-75 |     2 == 3; //~ WARN unused comparison\n+77 |     2 == 3; //~ WARN unused comparison\n    |     ^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/fn_must_use.rs:76:5\n+  --> $DIR/fn_must_use.rs:78:5\n    |\n-76 |     m == n; //~ WARN unused comparison\n+78 |     m == n; //~ WARN unused comparison\n    |     ^^^^^^\n "}, {"sha": "0baa4fb4fe2cdb051de72f5df14519259a7a18ce", "filename": "src/test/ui/span/macro-span-replacement.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![warn(unused)]\n \n macro_rules! m {"}, {"sha": "2a0e71e192c621cd64c228768e93ae9125da46a4", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,16 +1,16 @@\n warning: struct is never used: `S`\n-  --> $DIR/macro-span-replacement.rs:15:9\n+  --> $DIR/macro-span-replacement.rs:17:9\n    |\n-15 |         $b $a; //~ WARN struct is never used\n+17 |         $b $a; //~ WARN struct is never used\n    |         ^^^^^^\n ...\n-20 |     m!(S struct);\n+22 |     m!(S struct);\n    |     ------------- in this macro invocation\n    |\n note: lint level defined here\n-  --> $DIR/macro-span-replacement.rs:11:9\n+  --> $DIR/macro-span-replacement.rs:13:9\n    |\n-11 | #![warn(unused)]\n+13 | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(dead_code)] implied by #[warn(unused)]\n "}, {"sha": "5fb0ff7fb708a285f075435a29e16ed446ab5239", "filename": "src/test/ui/span/multispan-import-lint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// must-compile-successfully\n+\n #![warn(unused)]\n \n use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};"}, {"sha": "e2c1d9cdc79ad16737f447aee2ba4bdfbcc1bc79", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -1,13 +1,13 @@\n warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`\n-  --> $DIR/multispan-import-lint.rs:13:16\n+  --> $DIR/multispan-import-lint.rs:15:16\n    |\n-13 | use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n+15 | use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n    |                ^^  ^^^       ^^^^^^^^^  ^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/multispan-import-lint.rs:11:9\n+  --> $DIR/multispan-import-lint.rs:13:9\n    |\n-11 | #![warn(unused)]\n+13 | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_imports)] implied by #[warn(unused)]\n "}, {"sha": "1f736e33c8b2a34a11e55721f5afce42d3ba50eb", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -218,7 +218,7 @@ pub struct TestProps {\n     // testing harness and used when generating compilation\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n-    // Specifies that a cfail test must actually compile without errors.\n+    // Specifies that a test must actually compile without errors.\n     pub must_compile_successfully: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n@@ -359,10 +359,6 @@ impl TestProps {\n                 self.forbid_output.push(of);\n             }\n \n-            if !self.must_compile_successfully {\n-                self.must_compile_successfully = config.parse_must_compile_successfully(ln);\n-            }\n-\n             if !self.check_test_line_numbers_match {\n                 self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n             }\n@@ -371,6 +367,12 @@ impl TestProps {\n                 self.run_pass = config.parse_run_pass(ln);\n             }\n \n+            if !self.must_compile_successfully {\n+                // run-pass implies must_compile_sucessfully\n+                self.must_compile_successfully =\n+                    config.parse_must_compile_successfully(ln) || self.run_pass;\n+            }\n+\n             if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n                 self.normalize_stdout.push(rule);\n             }"}, {"sha": "74da774c6d55a2809a77157129b0d32599e4a0f2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33245fe682874fd138bb6d49b9e5d72e5b915800/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=33245fe682874fd138bb6d49b9e5d72e5b915800", "patch": "@@ -147,23 +147,26 @@ impl<'test> TestCx<'test> {\n         assert!(self.revision.is_none(), \"init_all invoked for a revision\");\n     }\n \n-    fn run_cfail_test(&self) {\n-        let proc_res = self.compile_test();\n-\n+    fn check_if_test_should_compile(&self, proc_res: &ProcRes) {\n         if self.props.must_compile_successfully {\n             if !proc_res.status.success() {\n-                self.fatal_proc_rec(\"test compilation failed although it shouldn't!\", &proc_res);\n+                self.fatal_proc_rec(\"test compilation failed although it shouldn't!\", proc_res);\n             }\n         } else {\n             if proc_res.status.success() {\n                 self.fatal_proc_rec(\n                     &format!(\"{} test compiled successfully!\", self.config.mode)[..],\n-                    &proc_res,\n+                    proc_res,\n                 );\n             }\n \n-            self.check_correct_failure_status(&proc_res);\n+            self.check_correct_failure_status(proc_res);\n         }\n+    }\n+\n+    fn run_cfail_test(&self) {\n+        let proc_res = self.compile_test();\n+        self.check_if_test_should_compile(&proc_res);\n \n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n@@ -2388,6 +2391,7 @@ impl<'test> TestCx<'test> {\n             .any(|s| s.contains(\"--error-format\"));\n \n         let proc_res = self.compile_test();\n+        self.check_if_test_should_compile(&proc_res);\n \n         let expected_stderr_path = self.expected_output_path(UI_STDERR);\n         let expected_stderr = self.load_expected_output(&expected_stderr_path);"}]}