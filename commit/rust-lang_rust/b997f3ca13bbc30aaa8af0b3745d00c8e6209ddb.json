{"sha": "b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "node_id": "C_kwDOAAsO6NoAKGI5OTdmM2NhMTNiYmMzMGFhYThhZjBiMzc0NWQwMGM4ZTYyMDlkZGI", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2023-01-19T05:15:18Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-05-19T10:42:58Z"}, "message": "remove unstable `Poll::ready`", "tree": {"sha": "313ecf1943d3ebe80041bbb8a94880b431515e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313ecf1943d3ebe80041bbb8a94880b431515e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "html_url": "https://github.com/rust-lang/rust/commit/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d17294d18040f872e5c33e38cf9ce8da860f609", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17294d18040f872e5c33e38cf9ce8da860f609", "html_url": "https://github.com/rust-lang/rust/commit/2d17294d18040f872e5c33e38cf9ce8da860f609"}], "stats": {"total": 97, "additions": 3, "deletions": 94}, "files": [{"sha": "22bac5d3e6fccf3154268d14a2dd8c3ca8703926", "filename": "library/core/src/future/join.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs?ref=b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "patch": "@@ -4,7 +4,7 @@ use crate::cell::UnsafeCell;\n use crate::future::{poll_fn, Future};\n use crate::mem;\n use crate::pin::Pin;\n-use crate::task::{Context, Poll};\n+use crate::task::{Context, Poll, ready};\n \n /// Polls multiple futures simultaneously, returning a tuple\n /// of all results once complete.\n@@ -118,7 +118,7 @@ macro join_internal {\n                             fut\n                         })\n                     };\n-                    // Despite how tempting it may be to `let () = fut.poll(cx).ready()?;`\n+                    // Despite how tempting it may be to `let () = ready!(fut.poll(cx));`\n                     // doing so would defeat the point of `join!`: to start polling eagerly all\n                     // of the futures, to allow parallelizing the waits.\n                     done &= fut.poll(cx).is_ready();\n@@ -180,7 +180,7 @@ impl<F: Future> Future for MaybeDone<F> {\n             // Do not mix match ergonomics with unsafe.\n             match *self.as_mut().get_unchecked_mut() {\n                 MaybeDone::Future(ref mut f) => {\n-                    let val = Pin::new_unchecked(f).poll(cx).ready()?;\n+                    let val = ready!(Pin::new_unchecked(f).poll(cx));\n                     self.set(Self::Done(val));\n                 }\n                 MaybeDone::Done(_) => {}"}, {"sha": "3f0080e3832e197202683111b20a5d8217a76ebb", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "patch": "@@ -13,5 +13,3 @@ pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n mod ready;\n #[stable(feature = \"ready_macro\", since = \"1.64.0\")]\n pub use ready::ready;\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-pub use ready::Ready;"}, {"sha": "83230384a220c8fa6c80d66d0329b8acf757d8ff", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "patch": "@@ -3,7 +3,6 @@\n use crate::convert;\n use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n-use crate::task::Ready;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n@@ -96,37 +95,6 @@ impl<T> Poll<T> {\n         !self.is_ready()\n     }\n \n-    /// Extracts the successful type of a [`Poll<T>`].\n-    ///\n-    /// When combined with the `?` operator, this function will\n-    /// propagate any [`Poll::Pending`] values to the caller, and\n-    /// extract the `T` from [`Poll::Ready`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// #![feature(poll_ready)]\n-    ///\n-    /// use std::task::{Context, Poll};\n-    /// use std::future::{self, Future};\n-    /// use std::pin::Pin;\n-    ///\n-    /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n-    ///     let mut fut = future::ready(42);\n-    ///     let fut = Pin::new(&mut fut);\n-    ///\n-    ///     let num = fut.poll(cx).ready()?;\n-    ///     # let _ = num; // to silence unused warning\n-    ///     // ... use num\n-    ///\n-    ///     Poll::Ready(())\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-    pub fn ready(self) -> Ready<T> {\n-        Ready(self)\n-    }\n }\n \n impl<T, E> Poll<Result<T, E>> {"}, {"sha": "495d72fd14be27af2f36842ccdca3ff87cb684a3", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=b997f3ca13bbc30aaa8af0b3745d00c8e6209ddb", "patch": "@@ -1,8 +1,3 @@\n-use core::convert;\n-use core::fmt;\n-use core::ops::{ControlFlow, FromResidual, Try};\n-use core::task::Poll;\n-\n /// Extracts the successful type of a [`Poll<T>`].\n ///\n /// This macro bakes in propagation of [`Pending`] signals by returning early.\n@@ -60,55 +55,3 @@ pub macro ready($e:expr) {\n         }\n     }\n }\n-\n-/// Extracts the successful type of a [`Poll<T>`].\n-///\n-/// See [`Poll::ready`] for details.\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-pub struct Ready<T>(pub(crate) Poll<T>);\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> Try for Ready<T> {\n-    type Output = T;\n-    type Residual = Ready<convert::Infallible>;\n-\n-    #[inline]\n-    fn from_output(output: Self::Output) -> Self {\n-        Ready(Poll::Ready(output))\n-    }\n-\n-    #[inline]\n-    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n-        match self.0 {\n-            Poll::Ready(v) => ControlFlow::Continue(v),\n-            Poll::Pending => ControlFlow::Break(Ready(Poll::Pending)),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> FromResidual for Ready<T> {\n-    #[inline]\n-    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n-        match residual.0 {\n-            Poll::Pending => Ready(Poll::Pending),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> FromResidual<Ready<convert::Infallible>> for Poll<T> {\n-    #[inline]\n-    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n-        match residual.0 {\n-            Poll::Pending => Poll::Pending,\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> fmt::Debug for Ready<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_tuple(\"Ready\").finish()\n-    }\n-}"}]}