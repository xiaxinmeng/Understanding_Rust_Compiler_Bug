{"sha": "470ed70a86c3a77b4643300d022fd79cf43d97cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MGVkNzBhODZjM2E3N2I0NjQzMzAwZDAyMmZkNzljZjQzZDk3Y2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-05T17:33:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T17:33:16Z"}, "message": "Rollup merge of #86852 - Amanieu:remove_doc_aliases, r=joshtriplett\n\nRemove some doc aliases\n\nAs per the new doc alias policy in https://github.com/rust-lang/std-dev-guide/pull/25, this removes some controversial doc aliases:\n- `malloc`, `alloc`, `realloc`, etc.\n- `length` (alias for `len`)\n- `delete` (alias for `remove` in collections and also file/directory deletion)\n\nr? `@joshtriplett`", "tree": {"sha": "a016cbf6eb5658347509ae95d4f3ce04698cc5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a016cbf6eb5658347509ae95d4f3ce04698cc5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470ed70a86c3a77b4643300d022fd79cf43d97cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg40JcCRBK7hj4Ov3rIwAARpUIAKeX5QjZAyCGavJ2NwEaE6M8\n84fpg2dAFYLnr8h9KOxKNYIuum3kEAXoImmcu5lpBgv6ETtnArB7p+R5DIKeycnJ\nWjaPh8hSYUc7c5XETsaTCBvBSWmfmeaUSvxLeIbHOH9YvS1rlhDvGZ/OLoXn5FQ/\nc6atUKHVzM1TbgWniGJVao2GLfJgmxMoeFwdHnJlkzq/SqRRWoewfVzSyZZYmumP\n4NxXzwo61zEKqtadImts3HHCmWKaj3jHi8Cg8ZeiwXIJ1t/FNuq4ghtrcgyyVpWL\nHFaVix0d/RG0Yr5IDGb9/AU7RMI9dUiyxZFxRtrbk6SCZksojy1vXeHZedhM0BI=\n=YXdZ\n-----END PGP SIGNATURE-----\n", "payload": "tree a016cbf6eb5658347509ae95d4f3ce04698cc5e9\nparent 2bc7d4d70acc2fb317c26600e59094c510ac528b\nparent e2536bb271ead2228f5a7c54db043fe681d61b3f\nauthor Yuki Okushi <jtitor@2k36.org> 1625506396 +0900\ncommitter GitHub <noreply@github.com> 1625506396 +0900\n\nRollup merge of #86852 - Amanieu:remove_doc_aliases, r=joshtriplett\n\nRemove some doc aliases\n\nAs per the new doc alias policy in https://github.com/rust-lang/std-dev-guide/pull/25, this removes some controversial doc aliases:\n- `malloc`, `alloc`, `realloc`, etc.\n- `length` (alias for `len`)\n- `delete` (alias for `remove` in collections and also file/directory deletion)\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470ed70a86c3a77b4643300d022fd79cf43d97cc", "html_url": "https://github.com/rust-lang/rust/commit/470ed70a86c3a77b4643300d022fd79cf43d97cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470ed70a86c3a77b4643300d022fd79cf43d97cc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc7d4d70acc2fb317c26600e59094c510ac528b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc7d4d70acc2fb317c26600e59094c510ac528b", "html_url": "https://github.com/rust-lang/rust/commit/2bc7d4d70acc2fb317c26600e59094c510ac528b"}, {"sha": "e2536bb271ead2228f5a7c54db043fe681d61b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2536bb271ead2228f5a7c54db043fe681d61b3f", "html_url": "https://github.com/rust-lang/rust/commit/e2536bb271ead2228f5a7c54db043fe681d61b3f"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "53bfe02d0e7a31d43d8c56790a402cd3fbbfc748", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -187,8 +187,6 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(x: T) -> Self {\n         box x\n@@ -239,7 +237,6 @@ impl<T> Box<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"calloc\")]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)"}, {"sha": "2f656e4a6b4acc2d5cb18ddd5c6c3a7a7462c90c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -1034,7 +1034,6 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()"}, {"sha": "dfd693d13b330f51a222324e2970598f1800134d", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -889,7 +889,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>\n     where\n@@ -2165,7 +2164,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {"}, {"sha": "34ec27e461c757f551330a284df19d987d35b4c3", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -810,7 +810,6 @@ impl<T> BTreeSet<T> {\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n     where\n@@ -1021,7 +1020,6 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {"}, {"sha": "588ba2de2209bcd32e1ae3425a48c87bc2b44e5d", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -586,7 +586,6 @@ impl<T> LinkedList<T> {\n     /// dl.push_back(3);\n     /// assert_eq!(dl.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "461e701be054ee82b9493ef0ba0d27ec95f14668", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -1036,7 +1036,6 @@ impl<T> VecDeque<T> {\n     /// v.push_back(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         count(self.tail, self.head, self.cap())"}, {"sha": "189da9f06392add94c1ac45a83e982a28715d4f1", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -35,8 +35,6 @@\n ///\n /// [`Vec`]: crate::vec::Vec\n #[cfg(not(test))]\n-#[doc(alias = \"alloc\")]\n-#[doc(alias = \"malloc\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]"}, {"sha": "0d8678291bef749536a7a30b003ff84aa6e9eab7", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -419,8 +419,6 @@ impl String {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }\n@@ -1534,7 +1532,6 @@ impl String {\n     /// assert_eq!(fancy_f.len(), 4);\n     /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "61599259735c7d5a25632b46f5c58f41227a8384", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -459,7 +459,6 @@ impl<T> Vec<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n@@ -799,7 +798,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.buf.reserve(self.len, additional);\n@@ -826,7 +824,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.buf.reserve_exact(self.len, additional);\n@@ -864,7 +861,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n@@ -906,7 +902,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n@@ -927,7 +922,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         // The capacity is never less than the length, and there's nothing to do when\n@@ -958,7 +952,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         if self.capacity() > min_capacity {\n@@ -1820,7 +1813,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let a = vec![1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "a476799b70d6c60088f66c76c3c9c5989730faca", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -97,7 +97,6 @@ pub trait ExactSizeIterator: Iterator {\n     ///\n     /// assert_eq!(5, five.len());\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn len(&self) -> usize {"}, {"sha": "de25c984abf90fd729c1ce2556d469e2a7cf0ec7", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -95,7 +95,6 @@ impl<T> [T] {\n     /// let a = [1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[cfg_attr(not(bootstrap), lang = \"slice_len_fn\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]"}, {"sha": "7ca95a02dd8f482d42d1fac093e71297571cc790", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -138,7 +138,6 @@ impl str {\n     /// assert_eq!(\"\u0192oo\".len(), 4); // fancy f!\n     /// assert_eq!(\"\u0192oo\".chars().count(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n     #[inline]"}, {"sha": "d7cb8a556367c9d76d0e9de505bc18f54198af92", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -454,7 +454,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.base.len()\n@@ -893,7 +892,6 @@ where\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>"}, {"sha": "272e1c2be2b409dc9d3e3eb9ee2044e6139b81c3", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -202,7 +202,6 @@ impl<T, S> HashSet<T, S> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n@@ -875,7 +874,6 @@ where\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool"}, {"sha": "2a85f375ae2790250a74d9d72e823df4c04caefc", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -694,7 +694,6 @@ impl OsStr {\n     /// let os_str = OsStr::new(\"foo\");\n     /// assert_eq!(os_str.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     #[inline]\n     pub fn len(&self) -> usize {"}, {"sha": "a9ce814e2ec18fbb23de827cfdef0d59e97a7f09", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ed70a86c3a77b4643300d022fd79cf43d97cc/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=470ed70a86c3a77b4643300d022fd79cf43d97cc", "patch": "@@ -1551,7 +1551,6 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::unlink(path.as_ref())\n@@ -1986,7 +1985,6 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::rmdir(path.as_ref())\n@@ -2024,7 +2022,6 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::remove_dir_all(path.as_ref())"}]}