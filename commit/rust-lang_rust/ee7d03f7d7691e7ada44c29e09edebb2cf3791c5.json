{"sha": "ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlN2QwM2Y3ZDc2OTFlN2FkYTQ0YzI5ZTA5ZWRlYmIyY2YzNzkxYzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T22:42:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T23:13:13Z"}, "message": "Convert most working tests to ivecs\n\nI tried to pay attention to what was actually being tested so, e.g. when I\ntest was just using a vec as a boxed thing, I converted to boxed ints, etc.\n\nHaven't converted the macro tests yet. Not sure what to do there.", "tree": {"sha": "3488e2d12fbd03333e7204f7a5f6c562865ac863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3488e2d12fbd03333e7204f7a5f6c562865ac863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "html_url": "https://github.com/rust-lang/rust/commit/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594c7fb0c6eb997afa7da32a2a6b4f0f78522c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/594c7fb0c6eb997afa7da32a2a6b4f0f78522c3f", "html_url": "https://github.com/rust-lang/rust/commit/594c7fb0c6eb997afa7da32a2a6b4f0f78522c3f"}], "stats": {"total": 245, "additions": 124, "deletions": 121}, "files": [{"sha": "5be089671d9e8bb42f3147218b81d647a595344a", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -12,9 +12,9 @@ fn main() {\n     // during 'make check' under valgrind\n     // 5000000\n     // 50000000\n-    let inputs: vec[int] = [50000, 500000];\n+    let inputs: [int] = ~[50000, 500000];\n \n-    let bodies: vec[Body::props] = NBodySystem::MakeNBodySystem();\n+    let bodies: [Body::props] = NBodySystem::MakeNBodySystem();\n \n \n     for n: int  in inputs {\n@@ -31,10 +31,10 @@ fn main() {\n \n mod NBodySystem {\n \n-    fn MakeNBodySystem() -> vec[Body::props] {\n+    fn MakeNBodySystem() -> [Body::props] {\n         // these each return a Body::props\n-        let bodies: vec[Body::props] =\n-            [Body::sun(), Body::jupiter(), Body::saturn(), Body::uranus(),\n+        let bodies: [Body::props] =\n+            ~[Body::sun(), Body::jupiter(), Body::saturn(), Body::uranus(),\n              Body::neptune()];\n \n         let px: float = 0.0;\n@@ -56,7 +56,7 @@ mod NBodySystem {\n         ret bodies;\n     }\n \n-    fn advance(bodies: vec[Body::props], dt: float) {\n+    fn advance(bodies: &[Body::props], dt: float) {\n \n         let i: int = 0;\n         while i < 5 {\n@@ -95,7 +95,7 @@ mod NBodySystem {\n         b.z += dt * b.vz;\n     }\n \n-    fn energy(bodies: vec[Body::props]) -> float {\n+    fn energy(bodies: &[Body::props]) -> float {\n         let dx: float;\n         let dy: float;\n         let dz: float;"}, {"sha": "dec058bb5925647c92fe20c270350b99c7b80138", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -69,9 +69,9 @@ fn stress_task(id: int) {\n }\n \n fn stress(num_tasks: int) {\n-    let tasks = [];\n+    let tasks = ~[];\n     for each i: int  in range(0, num_tasks) {\n-        tasks += [spawn stress_task(i)];\n+        tasks += ~[spawn stress_task(i)];\n     }\n     for each i: int  in range(0, num_tasks) { task::join(tasks.(i)); }\n }"}, {"sha": "e65ad1af413592227b0f81685be426912bb19ff2", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected str but found vec\n-fn main() { fail []; }\n\\ No newline at end of file\n+// error-pattern:expected str but found [int]\n+fn main() { fail ~[0]; }\n\\ No newline at end of file"}, {"sha": "1bc565cf5350c8261cf73db40add3cb05f85399a", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n // error-pattern: illegal recursive type\n \n-type x = vec[x];\n+type x = [x];\n \n-fn main() { let b: x = []; }\n\\ No newline at end of file\n+fn main() { let b: x = ~[]; }\n\\ No newline at end of file"}, {"sha": "99e762f84596c1ad62fd4957baf8509026ca0d58", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Attempt to use a type argument out of scope\n-fn hd[U](v: &vec[U]) -> U {\n-    fn hd1(w: &vec[U]) -> U { ret w.(0); }\n+fn hd[U](v: &[U]) -> U {\n+    fn hd1(w: &[U]) -> U { ret w.(0); }\n     ret hd1(v);\n }\n\\ No newline at end of file"}, {"sha": "e1ead1d79a5be8af053496171cd0eee99b1eeb4b", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -6,7 +6,7 @@ import std::option::some;\n \n // error-pattern: mismatched types\n \n-tag bar { t1((), option::t[vec[int]]); t2; }\n+tag bar { t1((), option::t[[int]]); t2; }\n \n fn foo(t: bar) -> int { alt t { t1(_, some(x)) { ret x * 3; } _ { fail; } } }\n "}, {"sha": "6f8c24be9ae2cefb7064be25bd2c4cd4c95a5046", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -5,7 +5,7 @@ import std::option::some;\n \n // error-pattern: mismatched types\n \n-tag bar { t1((), option::t[vec[int]]); t2; }\n+tag bar { t1((), option::t[[int]]); t2; }\n \n fn foo(t: bar) { alt t { t1(_, some[int](x)) { log x; } _ { fail; } } }\n "}, {"sha": "73cf4ac9655bf527f51beeac7903e98351103ead", "filename": "src/test/compile-fail/shadow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadow.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,15 +1,15 @@\n // -*- rust -*-\n // error-pattern:src/test/compile-fail/shadow.rs\n-fn foo(c: vec[int]) {\n+fn foo(c: [int]) {\n     let a: int = 5;\n-    let b: vec[int] = [];\n+    let b: [int] = ~[];\n \n \n     alt none[int] {\n-      some[int](_) { for i: int  in c { log a; let a = 17; b += [a]; } }\n+      some[int](_) { for i: int  in c { log a; let a = 17; b += ~[a]; } }\n     }\n }\n \n tag t[T] { none; some(T); }\n \n-fn main() { foo([]); }\n\\ No newline at end of file\n+fn main() { foo(~[]); }\n\\ No newline at end of file"}, {"sha": "829dbd41c1b95e2fccd69fbb53b0a1dfee28c211", "filename": "src/test/compile-fail/unsafe-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:invalidate alias x\n \n fn main() {\n-    let v: vec[mutable int] = [mutable 1, 2, 3];\n+    let v: [mutable int] = ~[mutable 1, 2, 3];\n     for x: int  in v { v.(0) = 10; log x; }\n }\n\\ No newline at end of file"}, {"sha": "58ede2bba6cba792471819a26e6fa589e0ba9469", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,8 +1,8 @@\n-// error-pattern:attempted field access on type vec[int]\n+// error-pattern:attempted field access on type [int]\n // issue #367\n \n fn f() {\n-    let v = [1];\n+    let v = ~[1];\n     log v.some_field_name; //type error\n }\n "}, {"sha": "9c0938c0dfb59d912ad710aae801e30d42e330f6", "filename": "src/test/compile-fail/writing-through-uninit-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: Unsatisfied precondition constraint\n \n-fn test() { let w: vec[int]; w.(5) = 0; }\n+fn test() { let w: [int]; w.(5) = 0; }\n \n fn main() { test(); }\n\\ No newline at end of file"}, {"sha": "cbb68d50f767ef1b0393ae1156551fb44ff52f53", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,2 +1,2 @@\n // error-pattern:assignment to immutable vec content\n-fn main() { let v: vec[int] = [1, 2, 3]; v.(1) = 4; }\n\\ No newline at end of file\n+fn main() { let v: [int] = ~[1, 2, 3]; v.(1) = 4; }\n\\ No newline at end of file"}, {"sha": "b5552c61407b2bf467d9bca5c1534b3efb8990e8", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,7 +3,7 @@\n // error-pattern:bounds check\n // no-valgrind\n fn main() {\n-    let v: vec[int] = [10];\n+    let v: [int] = ~[10];\n     let x: int = 0;\n     assert (v.(x) == 10);\n     // Bounds-check failure."}, {"sha": "1c8a6ebd5c4e7df840dd40e738cdefe57fac2f06", "filename": "src/test/run-fail/vec-underrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-underrun.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,7 +3,7 @@\n // error-pattern:bounds check\n // no-valgrind\n fn main() {\n-    let v: vec[int] = [10, 20];\n+    let v: [int] = ~[10, 20];\n     let x: int = 0;\n     assert (v.(x) == 10);\n     // Bounds-check failure."}, {"sha": "7b90287d9d41e41432ab83c83d4555c85f10a47d", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -7,12 +7,12 @@ import std::option::some;\n \n fn foo[T](y: &option::t[T]) {\n     let x: int;\n-    let rs: vec[int] = [];\n+    let rs: [int] = ~[];\n     /* tests that x doesn't get put in the precondition for the\n        entire if expression */\n \n     if true {\n-    } else { alt y { none[T]. { x = 17; } _ { x = 42; } } rs += [x]; }\n+    } else { alt y { none[T]. { x = 17; } _ { x = 42; } } rs += ~[x]; }\n     ret;\n }\n "}, {"sha": "0f2716ea2bef9ce2b9ec954b010bbca99965a04f", "filename": "src/test/run-pass/argv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,8 @@\n-\n+use std;\n+import std::ivec;\n \n fn main(args: vec[str]) {\n-    let vs: vec[str] = [\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"];\n-    let vvs: vec[vec[str]] = [args, vs];\n-    for vs: vec[str]  in vvs { for s: str  in vs { log s; } }\n+    let vs: [str] = ~[\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"];\n+    let vvs: [[str]] = ~[ivec::from_vec(args), vs];\n+    for vs: [str]  in vvs { for s: str  in vs { log s; } }\n }\n\\ No newline at end of file"}, {"sha": "2a1d2a97608c43fcfc9253b27d0fb3b15bf70562", "filename": "src/test/run-pass/bind-parameterized-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n-    fn echo[T](c: int, x: vec[T]) { }\n+    fn echo[T](c: int, x: &[T]) { }\n \n-    let y: fn(vec[int])  = bind echo(42, _);\n+    let y: fn(&[int])  = bind echo(42, _);\n \n-    y([1]);\n+    y(~[1]);\n }"}, {"sha": "41401a4d9898515654def7b1dba9b55db1f072d4", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n-fn iter_vec[T](v: &vec[T], f: &block(&T) ) { for x: T  in v { f(x); } }\n+fn iter_vec[T](v: &[T], f: &block(&T) ) { for x: T  in v { f(x); } }\n \n fn main() {\n-    let v = [1, 2, 3, 4, 5, 6, 7];\n+    let v = ~[1, 2, 3, 4, 5, 6, 7];\n     let odds = 0;\n     iter_vec(v,\n              block (i: &int) {"}, {"sha": "93fda829cbe22379221353972373da9dc25374e0", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n-fn iter_vec[T](v: &vec[T], f: &block(&T) ) { for x: T  in v { f(x); } }\n+fn iter_vec[T](v: &[T], f: &block(&T) ) { for x: T  in v { f(x); } }\n \n fn main() {\n-    let v = [1, 2, 3, 4, 5];\n+    let v = ~[1, 2, 3, 4, 5];\n     let sum = 0;\n     iter_vec(v,\n              block (i: &int) {"}, {"sha": "ef8051a14e13beed173ef930bc9b00219ab8e531", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -2,14 +2,14 @@\n \n // -*- rust -*-\n \n-fn some_vec(x: int) -> vec[int] { ret []; }\n+fn some_box(x: int) -> @int { ret @x; }\n \n fn is_odd(n: int) -> bool { ret true; }\n \n-fn length_is_even(vs: vec[int]) -> bool { ret true; }\n+fn length_is_even(vs: @int) -> bool { ret true; }\n \n fn foo(acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_vec(1)) { log_err \"bloop\"; }\n+    if is_odd(n) && length_is_even(some_box(1)) { log_err \"bloop\"; }\n }\n \n fn main() { foo(67, 5); }\n\\ No newline at end of file"}, {"sha": "e7da90960a166af0fab7e00acf7e2c1b61112b5b", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -2,14 +2,14 @@\n \n // -*- rust -*-\n \n-fn some_vec(x: int) -> vec[int] { ret []; }\n+fn some_box(x: int) -> @int { ret @x; }\n \n fn is_odd(n: int) -> bool { ret true; }\n \n-fn length_is_even(vs: vec[int]) -> bool { ret true; }\n+fn length_is_even(vs: @int) -> bool { ret true; }\n \n fn foo(acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_vec(1)) { log_err \"bloop\"; }\n+    if is_odd(n) || length_is_even(some_box(1)) { log_err \"bloop\"; }\n }\n \n fn main() { foo(67, 5); }\n\\ No newline at end of file"}, {"sha": "28b9a806c113304407158b78ba7265f886e467a3", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -6,15 +6,15 @@ fn main() {\n     assert (i == 10);\n     do  { i += 1; if i == 20 { break; } } while i < 30\n     assert (i == 20);\n-    for x: int  in [1, 2, 3, 4, 5, 6] {\n+    for x: int  in ~[1, 2, 3, 4, 5, 6] {\n         if x == 3 { break; }\n         assert (x <= 3);\n     }\n     i = 0;\n     while i < 10 { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); }\n     i = 0;\n     do  { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); } while i < 10\n-    for x: int  in [1, 2, 3, 4, 5, 6] {\n+    for x: int  in ~[1, 2, 3, 4, 5, 6] {\n         if x % 2 == 0 { cont; }\n         assert (x % 2 != 0);\n     }"}, {"sha": "48a393f42d9d7cab8fe606f19459cb8eb44a878a", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let v: vec[mutable int] = [mutable ]; }\n\\ No newline at end of file\n+fn main() { let v: [mutable int] = ~[mutable ]; }\n\\ No newline at end of file"}, {"sha": "fb3f0dac0146cdc2016b197dc27acced327c0fc6", "filename": "src/test/run-pass/expr-alt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -4,7 +4,7 @@ fn test_simple() {\n }\n \n fn test_box() {\n-    let r = alt true { true { [10] } false { fail } };\n+    let r = alt true { true { ~[10] } false { fail } };\n     assert (r.(0) == 10);\n }\n "}, {"sha": "53750ff59de0d5e9adb54720611afc79111ae7f8", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -10,9 +10,9 @@ fn test_generic[T](expected: &T, eq: &compare[T]) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: &vec[int], v2: &vec[int]) -> bool { ret v1 == v2; }\n-    let eq = bind compare_vec(_, _);\n-    test_generic[vec[int]]([1, 2, 3], eq);\n+    fn compare_box(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n+    let eq = bind compare_box(_, _);\n+    test_generic[@int](@1, eq);\n }\n \n fn main() { test_vec(); }\n\\ No newline at end of file"}, {"sha": "34c1cf833947089fe1cd8405a3030d3159cfa201", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -10,9 +10,9 @@ fn test_generic[T](expected: &T, eq: &compare[T]) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: &vec[int], v2: &vec[int]) -> bool { ret v1 == v2; }\n+    fn compare_vec(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n     let eq = bind compare_vec(_, _);\n-    test_generic[vec[int]]([1, 2], eq);\n+    test_generic[@int](@1, eq);\n }\n \n fn main() { test_vec(); }\n\\ No newline at end of file"}, {"sha": "6a0a1700a94becb1df4b830b2a07f65ac1fcba54", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,2 +1,2 @@\n // Regression test for issue #388\n-fn main() { let x = { { [10] } }; }\n\\ No newline at end of file\n+fn main() { let x = { { @10 } }; }\n\\ No newline at end of file"}, {"sha": "6c3dc3891d18b91a1c7aaf1873446158ef233f6b", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n // Make sure we drop the refs of the temporaries needed to return the\n // values from the else if branch\n fn main() {\n-    let y: vec[uint] = [10u];\n+    let y: @uint = @10u;\n     let x = if false { y } else if (true) { y } else { y };\n-    assert (y.(0) == 10u);\n+    assert (y == 10u);\n }\n\\ No newline at end of file"}, {"sha": "ef8559ef062f7ce7801c3fa0cc5126aaf5d1dd46", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,4 +1,4 @@\n // Regression test for issue #388\n fn main() {\n-    let x = if false { [0u] } else if (true) { [10u] } else { [0u] };\n+    let x = if false { @0u } else if (true) { @10u } else { @0u };\n }\n\\ No newline at end of file"}, {"sha": "da78aa47e024c18bfbadbf561ccda9576343a72f", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -4,7 +4,7 @@ fn test_int() {\n }\n \n fn test_vec() {\n-    fn f() -> vec[int] { [10, 11] }\n+    fn f() -> [int] { ~[10, 11] }\n     assert (f().(1) == 11);\n }\n "}, {"sha": "fefc3e0d2cfddb6c3de674078382867f1cec4c8d", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -10,9 +10,9 @@ fn test_generic[T](expected: &T, not_expected: &T, eq: &compare[T]) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: &vec[int], v2: &vec[int]) -> bool { ret v1 == v2; }\n-    let eq = bind compare_vec(_, _);\n-    test_generic[vec[int]]([1, 2], [2, 3], eq);\n+    fn compare_box(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n+    let eq = bind compare_box(_, _);\n+    test_generic[@int](@1, @2, eq);\n }\n \n fn main() { test_vec(); }\n\\ No newline at end of file"}, {"sha": "4a39d10590a95bf658f40875e1abde57e08ce1a9", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1 +1 @@\n-fn main() { let x: vec[int] = []; for i: int  in x { fail \"moop\"; } }\n\\ No newline at end of file\n+fn main() { let x: [int] = ~[]; for i: int  in x { fail \"moop\"; } }\n\\ No newline at end of file"}, {"sha": "26d1caca5ab60617ee28e7350f53050374455b0b", "filename": "src/test/run-pass/foreach-nested-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -10,7 +10,7 @@ iter range(start: int, stop: int) -> int {\n }\n \n fn main() {\n-    let a: vec[mutable int] = [mutable -1, -1, -1, -1, -1, -1, -1, -1];\n+    let a: [mutable int] = ~[mutable -1, -1, -1, -1, -1, -1, -1, -1];\n     let p: int = 0;\n     for each i: int  in two() {\n         for each j: int  in range(0, 2) {"}, {"sha": "ecf80b191dbf5d6a27c9816d904ef2be57f58913", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -5,7 +5,7 @@\n iter two() -> int { put 0; put 1; }\n \n fn main() {\n-    let a: vec[mutable int] = [mutable -1, -1, -1, -1];\n+    let a: [mutable int] = ~[mutable -1, -1, -1, -1];\n     let p: int = 0;\n     for each i: int  in two() {\n         for each j: int  in two() { a.(p) = 10 * i + j; p += 1; }"}, {"sha": "c6909a67fae16f1bff33bdd9f10252c0b504d53f", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,7 +3,7 @@\n \n // This is a testcase for issue #94.\n fn main() {\n-    let v: vec[int] = [0, 1, 2, 3, 4, 5];\n+    let v: [int] = ~[0, 1, 2, 3, 4, 5];\n     let s: str = \"abcdef\";\n     assert (v.(3u) == 3);\n     assert (v.(3u8) == 3);"}, {"sha": "119ee8c76bc3ab96de6d66793d7a172b7579e62c", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let x = [1, 2, 3];\n+    let x = ~[1, 2, 3];\n     let y = 0;\n     for i: int  in x { log i; y += i; }\n     log y;"}, {"sha": "563fa5e627232ba60a7c5296e84ce6c9821770bf", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -2,15 +2,15 @@\n \n \n // -*- rust -*-\n-fn len(v: vec[mutable? int]) -> uint {\n+fn len(v: [mutable? int]) -> uint {\n     let i = 0u;\n     for x: int  in v { i += 1u; }\n     ret i;\n }\n \n fn main() {\n-    let v0 = [1, 2, 3, 4, 5];\n+    let v0 = ~[1, 2, 3, 4, 5];\n     log len(v0);\n-    let v1 = [mutable 1, 2, 3, 4, 5];\n+    let v1 = ~[mutable 1, 2, 3, 4, 5];\n     log len(v1);\n }\n\\ No newline at end of file"}, {"sha": "8c0920208141d6adc751ac04e2e7ec702d32ec98", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,6 +1,6 @@\n \n fn main() {\n     // This just tests whether the vec leaks its members.\n-    let pvec: vec[mutable @{a: int, b: int}] =\n-        [mutable @{a: 1, b: 2}, @{a: 3, b: 4}, @{a: 5, b: 6}];\n+    let pvec: [mutable @{a: int, b: int}] =\n+        ~[mutable @{a: 1, b: 2}, @{a: 3, b: 4}, @{a: 5, b: 6}];\n }\n\\ No newline at end of file"}, {"sha": "618b012c66a74e6fcdfedcdd0cb5e2ba8e6c54dc", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,11 +1,11 @@\n-tag myvec[X] = vec[X];\n+tag myvec[X] = [X];\n \n-fn myvec_deref[X](mv: &myvec[X]) -> vec[X] { ret *mv; }\n+fn myvec_deref[X](mv: &myvec[X]) -> [X] { ret *mv; }\n \n fn myvec_elt[X](mv: &myvec[X]) -> X { ret mv.(0); }\n \n fn main() {\n-    let mv = myvec([1, 2, 3]);\n+    let mv = myvec(~[1, 2, 3]);\n     assert (myvec_deref(mv).(1) == 2);\n     assert (myvec_elt(mv) == 1);\n     assert (mv.(2) == 3);"}, {"sha": "2754cae8a94df809b9f45fbd024acdf873fd3203", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,10 +1,10 @@\n \n \n fn main() {\n-    obj buf(data: vec[u8]) {\n+    obj buf(data: [u8]) {\n         fn get(i: int) -> u8 { ret data.(i); }\n     }\n-    let b = buf([1 as u8, 2 as u8, 3 as u8]);\n+    let b = buf(~[1 as u8, 2 as u8, 3 as u8]);\n     log b.get(1);\n     assert (b.get(1) == 2 as u8);\n }\n\\ No newline at end of file"}, {"sha": "265c45a101d9a636da06af691fed2ed27c380eef", "filename": "src/test/run-pass/seq-compare.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fseq-compare.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -4,13 +4,13 @@ fn main() {\n     assert (\"hello\" < \"hellr\");\n     assert (\"hello \" > \"hello\");\n     assert (\"hello\" != \"there\");\n-    assert ([1, 2, 3, 4] > [1, 2, 3]);\n-    assert ([1, 2, 3] < [1, 2, 3, 4]);\n-    assert ([1, 2, 4, 4] > [1, 2, 3, 4]);\n-    assert ([1, 2, 3, 4] < [1, 2, 4, 4]);\n-    assert ([1, 2, 3] <= [1, 2, 3]);\n-    assert ([1, 2, 3] <= [1, 2, 3, 3]);\n-    assert ([1, 2, 3, 4] > [1, 2, 3]);\n-    assert ([1, 2, 3] == [1, 2, 3]);\n-    assert ([1, 2, 3] != [1, 1, 3]);\n+    assert (~[1, 2, 3, 4] > ~[1, 2, 3]);\n+    assert (~[1, 2, 3] < ~[1, 2, 3, 4]);\n+    assert (~[1, 2, 4, 4] > ~[1, 2, 3, 4]);\n+    assert (~[1, 2, 3, 4] < ~[1, 2, 4, 4]);\n+    assert (~[1, 2, 3] <= ~[1, 2, 3]);\n+    assert (~[1, 2, 3] <= ~[1, 2, 3, 3]);\n+    assert (~[1, 2, 3, 4] > ~[1, 2, 3]);\n+    assert (~[1, 2, 3] == ~[1, 2, 3]);\n+    assert (~[1, 2, 3] != ~[1, 1, 3]);\n }\n\\ No newline at end of file"}, {"sha": "7c4e0990290103990e0f02744888ab9be197cbe5", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -4,14 +4,14 @@\n // -*- rust -*-\n tag clam[T] { a(T, int); b; }\n \n-fn uhoh[T](v: vec[clam[T]]) {\n+fn uhoh[T](v: &[clam[T]]) {\n     alt v.(1) {\n       a[T](t, u) { log \"incorrect\"; log u; fail; }\n       b[T]. { log \"correct\"; }\n     }\n }\n \n fn main() {\n-    let v: vec[clam[int]] = [b[int], b[int], a[int](42, 17)];\n+    let v: [clam[int]] = ~[b[int], b[int], a[int](42, 17)];\n     uhoh[int](v);\n }\n\\ No newline at end of file"}, {"sha": "a3c49f3bc47d85295ee4615d6326619e6220872b", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n-fn swap[@T](v: &vec[mutable T], i: int, j: int) { v.(i) <-> v.(j); }\n+fn swap[@T](v: &[mutable T], i: int, j: int) { v.(i) <-> v.(j); }\n \n fn main() {\n-    let a: vec[mutable int] = [mutable 0, 1, 2, 3, 4, 5, 6];\n+    let a: [mutable int] = ~[mutable 0, 1, 2, 3, 4, 5, 6];\n     swap(a, 2, 4);\n     assert (a.(2) == 4);\n     assert (a.(4) == 2);"}, {"sha": "87b1f5c66b57aa199a08ba923b43494f6bcf5d30", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -15,8 +15,8 @@ fn test00() {\n     let number_of_tasks: int = 8;\n \n     let i: int = 0;\n-    let tasks: vec[task] = [];\n-    while i < number_of_tasks { i = i + 1; tasks += [spawn start(i)]; }\n+    let tasks: [task] = ~[];\n+    while i < number_of_tasks { i = i + 1; tasks += ~[spawn start(i)]; }\n \n     for t: task  in tasks { task::join(t); }\n "}, {"sha": "39c8199527ba248495afbb3a9e9d224c90da5ac4", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -24,9 +24,10 @@ fn test00() {\n     let i: int = 0;\n \n     // Create and spawn tasks...\n-    let tasks: vec[task] = [];\n+    let tasks: [task] = ~[];\n     while i < number_of_tasks {\n-        tasks += [spawn test00_start(ch.unsafe_ptr(), i, number_of_messages)];\n+        tasks +=\n+            ~[spawn test00_start(ch.unsafe_ptr(), i, number_of_messages)];\n         i = i + 1;\n     }\n "}, {"sha": "cbac351b02e4c6118391489f526745e25388ee6c", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -29,10 +29,10 @@ fn test00() {\n \n     let i: int = 0;\n \n-    let tasks: vec[task] = [];\n+    let tasks: [task] = ~[];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [spawn test00_start(ch, i, number_of_messages)];\n+        tasks += ~[spawn test00_start(ch, i, number_of_messages)];\n     }\n \n     let sum: int = 0;\n@@ -132,8 +132,9 @@ fn test06() {\n \n     let i: int = 0;\n \n-    let tasks: vec[task] = [];\n-    while i < number_of_tasks { i = i + 1; tasks += [spawn test06_start(i)]; }\n+    let tasks: [task] = ~[];\n+    while i < number_of_tasks {\n+        i = i + 1; tasks += ~[spawn test06_start(i)]; }\n \n \n     for t: task  in tasks { task::join(t); }"}, {"sha": "76ab695634a36d9ad2a34e7323592bee5623663f", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -5,8 +5,8 @@ iter range(lo: uint, hi: uint) -> uint {\n     while lo_ < hi { put lo_; lo_ += 1u; }\n }\n \n-fn create_index[T](index: vec[{a: T, b: uint}], hash_fn: fn(&T) -> uint ) {\n-    for each i: uint  in range(0u, 256u) { let bucket: vec[T] = []; }\n+fn create_index[T](index: &[{a: T, b: uint}], hash_fn: fn(&T) -> uint ) {\n+    for each i: uint  in range(0u, 256u) { let bucket: [T] = ~[]; }\n }\n \n fn main() { }\n\\ No newline at end of file"}, {"sha": "382c8de97a02d4699e9ab80a1496e4775e47222b", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,9 +3,9 @@\n \n // -*- rust -*-\n fn main() {\n-    let a: vec[int] = [1, 2, 3, 4, 5];\n-    let b: vec[int] = [6, 7, 8, 9, 0];\n-    let v: vec[int] = a + b;\n+    let a: [int] = ~[1, 2, 3, 4, 5];\n+    let b: [int] = ~[6, 7, 8, 9, 0];\n+    let v: [int] = a + b;\n     log v.(9);\n     assert (v.(0) == 1);\n     assert (v.(7) == 8);"}, {"sha": "b8bf2774d4b1992d9ffe973fb441341ac9cb2f05", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     // This just tests whether the vec leaks its members.\n \n-    let pvec: vec[@{x: int, y: int}] =\n-        [@{x: 1, y: 2}, @{x: 3, y: 4}, @{x: 5, y: 6}];\n+    let pvec: [@{x: int, y: int}] =\n+        ~[@{x: 1, y: 2}, @{x: 3, y: 4}, @{x: 5, y: 6}];\n }\n\\ No newline at end of file"}, {"sha": "c91d360c88b669a5394ccd1f5af4759ef0f65f53", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,11 +1,11 @@\n \n \n fn main() {\n-    let v = [1];\n-    v += [2];\n-    v += [3];\n-    v += [4];\n-    v += [5];\n+    let v = ~[1];\n+    v += ~[2];\n+    v += ~[3];\n+    v += ~[4];\n+    v += ~[5];\n     assert (v.(0) == 1);\n     assert (v.(1) == 2);\n     assert (v.(2) == 3);"}, {"sha": "2dae6e3fcb41e187c339aa3552953101b0b9c191", "filename": "src/test/run-pass/vec-ivec-deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1 +1 @@\n-fn main() { let a = ~[1, 2, 3, 4, 5]; let b = [a, a]; b += b; }\n\\ No newline at end of file\n+fn main() { let a = ~[1, 2, 3, 4, 5]; let b = ~[a, a]; b += b; }\n\\ No newline at end of file"}, {"sha": "619de5e4d7a2055d8ae5a9a925b795425e93c430", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let later: vec[int];\n-    if true { later = [1]; } else { later = [2]; }\n+    let later: [int];\n+    if true { later = ~[1]; } else { later = ~[2]; }\n     log later.(0);\n }\n\\ No newline at end of file"}, {"sha": "2740c23df41fa25a26f380f96a140ac6a6a37250", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn push[T](v: &mutable vec[mutable? T], t: &T) { v += [t]; }\n+fn push[T](v: &mutable [mutable? T], t: &T) { v += ~[t]; }\n \n-fn main() { let v = [1, 2, 3]; push(v, 1); }\n\\ No newline at end of file\n+fn main() { let v = ~[1, 2, 3]; push(v, 1); }\n\\ No newline at end of file"}, {"sha": "bd3f6c46cf27da04df11ef66346c13de2ea7ed30", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let v: vec[int] = [10, 20];\n+    let v: [int] = ~[10, 20];\n     assert (v.(0) == 10);\n     assert (v.(1) == 20);\n     let x: int = 0;"}, {"sha": "2357bf08477582a87ca5389b7f604f23fa5c5da1", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -1 +1 @@\n-fn main() { let quux: @vec[uint] = @[]; }\n\\ No newline at end of file\n+fn main() { let quux: @[uint] = @~[]; }\n\\ No newline at end of file"}, {"sha": "1616e03effce15889fb7448815f4b72c0f377440", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7d03f7d7691e7ada44c29e09edebb2cf3791c5/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=ee7d03f7d7691e7ada44c29e09edebb2cf3791c5", "patch": "@@ -8,8 +8,8 @@ fn main() {\n         log i;\n         i = i + 1;\n         if i == 95 {\n-            let v: vec[int] =\n-                [1, 2, 3, 4, 5]; // we check that it is freed by break\n+            let v: [int] =\n+                ~[1, 2, 3, 4, 5]; // we check that it is freed by break\n \n             log \"breaking\";\n             break;"}]}