{"sha": "63b2b9c4a89a13fb6855086d183272bd5e360a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjJiOWM0YTg5YTEzZmI2ODU1MDg2ZDE4MzI3MmJkNWUzNjBhNjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:45:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:45:39Z"}, "message": "rustdoc: Remove structural records", "tree": {"sha": "047d1dc524ad2a39f5a282fd45306de0fd5d287b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047d1dc524ad2a39f5a282fd45306de0fd5d287b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b2b9c4a89a13fb6855086d183272bd5e360a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b2b9c4a89a13fb6855086d183272bd5e360a65", "html_url": "https://github.com/rust-lang/rust/commit/63b2b9c4a89a13fb6855086d183272bd5e360a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b2b9c4a89a13fb6855086d183272bd5e360a65/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf301cd3ef97115c82cac7f84827b54886f5635", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf301cd3ef97115c82cac7f84827b54886f5635", "html_url": "https://github.com/rust-lang/rust/commit/baf301cd3ef97115c82cac7f84827b54886f5635"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "cdfc13e4fa779c85898b71e61bcf27e1bcdcaffe", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=63b2b9c4a89a13fb6855086d183272bd5e360a65", "patch": "@@ -40,10 +40,10 @@ use syntax::diagnostic::handler;\n use syntax::diagnostic;\n use syntax;\n \n-pub type Ctxt = {\n+pub struct Ctxt {\n     ast: @ast::crate,\n     ast_map: ast_map::map\n-};\n+}\n \n type SrvOwner<T> = fn(srv: Srv) -> T;\n pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n@@ -54,9 +54,9 @@ enum Msg {\n     Exit\n }\n \n-pub enum Srv = {\n+pub struct Srv {\n     ch: oldcomm::Chan<Msg>\n-};\n+}\n \n impl Srv: Clone {\n     fn clone(&self) -> Srv { copy *self }\n@@ -72,11 +72,11 @@ pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n \n fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n \n-    let srv_ = Srv({\n+    let srv_ = Srv {\n         ch: do util::spawn_listener |copy source, move parse, po| {\n             act(po, copy source, copy parse);\n         }\n-    });\n+    };\n \n     let res = owner(srv_);\n     oldcomm::send(srv_.ch, Exit);\n@@ -127,7 +127,7 @@ fn build_ctxt(sess: Session,\n     let ast = front::test::modify_for_testing(sess, ast);\n     let ast_map = ast_map::map_crate(sess.diagnostic(), *ast);\n \n-    {\n+    Ctxt {\n         ast: ast,\n         ast_map: ast_map,\n     }"}, {"sha": "afbb10f2cbbc23f95f03a8af84d6a9914b7930cb", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=63b2b9c4a89a13fb6855086d183272bd5e360a65", "patch": "@@ -25,9 +25,9 @@ use syntax::attr;\n use syntax::codemap;\n use syntax;\n \n-pub type CrateAttrs = {\n+pub struct CrateAttrs {\n     name: Option<~str>\n-};\n+}\n \n #[cfg(test)]\n mod test {\n@@ -66,7 +66,7 @@ fn doc_metas(\n pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n \n-    {\n+    CrateAttrs {\n         name: attr::last_meta_item_value_str_by_name(link_metas, ~\"name\")\n     }\n }"}, {"sha": "9ba23a20b50952ba35052ebdc2a5f9eb6db24388", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=63b2b9c4a89a13fb6855086d183272bd5e360a65", "patch": "@@ -104,21 +104,33 @@ pub fn default_config(input_crate: &Path) -> Config {\n     }\n }\n \n-type ProgramOutput = fn~((&str), (&[~str])) ->\n-    {status: int, out: ~str, err: ~str};\n+struct ProcOut {\n+    status: int,\n+    out: ~str,\n+    err: ~str\n+}\n+\n+type ProgramOutput = fn~((&str), (&[~str])) -> ProcOut;\n \n-pub fn mock_program_output(_prog: &str, _args: &[~str]) -> {\n-    status: int, out: ~str, err: ~str\n-} {\n-    {\n+pub fn mock_program_output(_prog: &str, _args: &[~str]) -> ProcOut {\n+    ProcOut {\n         status: 0,\n         out: ~\"\",\n         err: ~\"\"\n     }\n }\n \n+pub fn program_output(prog: &str, args: &[~str]) -> ProcOut {\n+    let {status, out, err} = run::program_output(prog, args);\n+    ProcOut {\n+        status: status,\n+        out: out,\n+        err: err\n+    }\n+}\n+\n pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n-    parse_config_(args, run::program_output)\n+    parse_config_(args, program_output)\n }\n \n pub fn parse_config_(\n@@ -260,10 +272,8 @@ fn should_find_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> {\n-        status: int, out: ~str, err: ~str\n-    } {\n-        {\n+    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> ProcOut {\n+        ProcOut {\n             status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n         }\n     };\n@@ -277,10 +287,8 @@ fn should_error_with_no_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> {\n-        status: int, out: ~str, err: ~str\n-    } {\n-        {\n+    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> ProcOut {\n+        ProcOut {\n             status: 1, out: ~\"\", err: ~\"\"\n         }\n     };"}, {"sha": "6bd461d1f9246607990fe02d8b968f0bb89a5f0b", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=63b2b9c4a89a13fb6855086d183272bd5e360a65", "patch": "@@ -110,9 +110,9 @@ fn should_write_modules_last() {\n     assert idx_a < idx_c;\n }\n \n-type Ctxt = {\n+struct Ctxt {\n     w: Writer\n-};\n+}\n \n pub fn write_markdown(\n     doc: doc::Doc,\n@@ -122,7 +122,7 @@ pub fn write_markdown(\n     // we don't want to spawn too many pandoc processes.\n     // (See #2484, which is closed.)\n     do doc.pages.map |page| {\n-        let ctxt = {\n+        let ctxt = Ctxt {\n             w: writer_factory(copy *page)\n         };\n         write_page(&ctxt, page)"}, {"sha": "9d4469f2077561147ecd8c7c3998378bc4230f25", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/63b2b9c4a89a13fb6855086d183272bd5e360a65/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=63b2b9c4a89a13fb6855086d183272bd5e360a65", "patch": "@@ -20,7 +20,6 @@\n #[crate_type = \"lib\"];\n \n #[no_core];\n-#[legacy_records];\n \n #[allow(non_implicitly_copyable_typarams)];\n #[allow(deprecated_self)];"}]}