{"sha": "8237efc52d909c482092fbf60356cfca59bf8ea0", "node_id": "C_kwDOAAsO6NoAKDgyMzdlZmM1MmQ5MDljNDgyMDkyZmJmNjAzNTZjZmNhNTliZjhlYTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-11T20:53:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T20:53:08Z"}, "message": "Rollup merge of #100392 - nnethercote:simplify-visitors, r=cjgillot\n\nSimplify visitors\n\nBy removing some unused arguments.\n\nr? `@cjgillot`", "tree": {"sha": "3a817b002a70d7151595c25a24a45463cc22aa4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a817b002a70d7151595c25a24a45463cc22aa4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8237efc52d909c482092fbf60356cfca59bf8ea0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9Ww0CRBK7hj4Ov3rIwAA61QIAHZ6Z052GKHkbKY7REA0tYlq\n5/v+VoN9Lg5rX4LPgArjYN6Wy8HQoQ4frxHedEEaEmKcXa27OtQp7eiG0JHQWRbO\nBYbZemKSRMVq2MgOt5rRD2C1DNS9txvkqOsSr9dZ3GMtBA9MBP3NF63DRlbHW0At\n9c3nE/+bC4MGAncHtJSLcviHEghezRO0NPMhGtJz4sf80RTiLGXzrnsn372HARZN\niBOkOhMJV1j4N0I6ASh3+Mv1HUGu4rYnptzA3A8jG9PL50sLVg23mNeqM6cmljII\nZCubtTbFhuW2fwRt1xej9F+kzQU4ZFfGzamDiTqtC4w9vaiGl1J3yqegzVgSZvY=\n=dXdY\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a817b002a70d7151595c25a24a45463cc22aa4d\nparent cefcfda6e63f934b44368261c6972f75dbe791f6\nparent b8b851f42e9a322179526f55d3fecf2a83bfeb11\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660251188 +0200\ncommitter GitHub <noreply@github.com> 1660251188 +0200\n\nRollup merge of #100392 - nnethercote:simplify-visitors, r=cjgillot\n\nSimplify visitors\n\nBy removing some unused arguments.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8237efc52d909c482092fbf60356cfca59bf8ea0", "html_url": "https://github.com/rust-lang/rust/commit/8237efc52d909c482092fbf60356cfca59bf8ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8237efc52d909c482092fbf60356cfca59bf8ea0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cefcfda6e63f934b44368261c6972f75dbe791f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cefcfda6e63f934b44368261c6972f75dbe791f6", "html_url": "https://github.com/rust-lang/rust/commit/cefcfda6e63f934b44368261c6972f75dbe791f6"}, {"sha": "b8b851f42e9a322179526f55d3fecf2a83bfeb11", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b851f42e9a322179526f55d3fecf2a83bfeb11", "html_url": "https://github.com/rust-lang/rust/commit/b8b851f42e9a322179526f55d3fecf2a83bfeb11"}], "stats": {"total": 240, "additions": 60, "deletions": 180}, "files": [{"sha": "4b485b547f49518867d0361dd63ab30b99bc497e", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -168,23 +168,17 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n-        walk_poly_trait_ref(self, t, m)\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &'ast VariantData) {\n         walk_struct_def(self, s)\n     }\n     fn visit_field_def(&mut self, s: &'ast FieldDef) {\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'ast EnumDef,\n-        generics: &'ast Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+    fn visit_enum_def(&mut self, enum_definition: &'ast EnumDef) {\n+        walk_enum_def(self, enum_definition)\n     }\n     fn visit_variant(&mut self, v: &'ast Variant) {\n         walk_variant(self, v)\n@@ -287,11 +281,8 @@ pub fn walk_lifetime<'a, V: Visitor<'a>>(visitor: &mut V, lifetime: &'a Lifetime\n     visitor.visit_ident(lifetime.ident);\n }\n \n-pub fn walk_poly_trait_ref<'a, V>(\n-    visitor: &mut V,\n-    trait_ref: &'a PolyTraitRef,\n-    _: &TraitBoundModifier,\n-) where\n+pub fn walk_poly_trait_ref<'a, V>(visitor: &mut V, trait_ref: &'a PolyTraitRef)\n+where\n     V: Visitor<'a>,\n {\n     walk_list!(visitor, visit_generic_param, &trait_ref.bound_generic_params);\n@@ -334,7 +325,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n+            visitor.visit_enum_def(enum_definition)\n         }\n         ItemKind::Impl(box Impl {\n             defaultness: _,\n@@ -377,12 +368,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }\n \n-pub fn walk_enum_def<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    enum_definition: &'a EnumDef,\n-    _: &'a Generics,\n-    _: NodeId,\n-) {\n+pub fn walk_enum_def<'a, V: Visitor<'a>>(visitor: &mut V, enum_definition: &'a EnumDef) {\n     walk_list!(visitor, visit_variant, &enum_definition.variants);\n }\n \n@@ -598,7 +584,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n \n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n-        GenericBound::Trait(ref typ, ref modifier) => visitor.visit_poly_trait_ref(typ, modifier),\n+        GenericBound::Trait(ref typ, ref _modifier) => visitor.visit_poly_trait_ref(typ),\n         GenericBound::Outlives(ref lifetime) => {\n             visitor.visit_lifetime(lifetime, LifetimeCtxt::Bound)\n         }"}, {"sha": "e08c1d063c10544aca6fd83785b103c4597c9d30", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -295,14 +295,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.insert(lifetime.span, lifetime.hir_id, Node::Lifetime(lifetime));\n     }\n \n-    fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics<'hir>, item_id: HirId) {\n+    fn visit_variant(&mut self, v: &'hir Variant<'hir>) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n                 this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));\n             }\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}, {"sha": "8c67cebae55aff7aa67b77100e544dc1e26ee545", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -1,9 +1,6 @@\n use super::ResolverAstLoweringExt;\n use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n-use rustc_ast::{\n-    FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, TraitBoundModifier, Ty,\n-    TyKind,\n-};\n+use rustc_ast::{FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, Ty, TyKind};\n use rustc_hir::def::LifetimeRes;\n use rustc_middle::span_bug;\n use rustc_middle::ty::ResolverAstLowering;\n@@ -71,10 +68,10 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n         visit::walk_path_segment(self, path_span, path_segment);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n         self.current_binders.push(t.trait_ref.ref_id);\n \n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n \n         self.current_binders.pop();\n     }"}, {"sha": "e61dfef7bd380394b28d3f0711c4a22cf8445a80", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -1536,25 +1536,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef) {\n         self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a VariantData) {\n         self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n     }\n \n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'a EnumDef,\n-        generics: &'a Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n-        self.with_banned_assoc_ty_bound(|this| {\n-            visit::walk_enum_def(this, enum_definition, generics, item_id)\n-        })\n+    fn visit_enum_def(&mut self, enum_definition: &'a EnumDef) {\n+        self.with_banned_assoc_ty_bound(|this| visit::walk_enum_def(this, enum_definition))\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {"}, {"sha": "be3e46661bf02398fa20f401b8c0d22262e8f949", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -79,9 +79,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef) {\n         self.count += 1;\n-        walk_poly_trait_ref(self, t, m)\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &VariantData) {\n         self.count += 1;\n@@ -91,15 +91,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &EnumDef,\n-        generics: &Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n+    fn visit_enum_def(&mut self, enum_definition: &EnumDef) {\n         self.count += 1;\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+        walk_enum_def(self, enum_definition)\n     }\n     fn visit_variant(&mut self, v: &Variant) {\n         self.count += 1;"}, {"sha": "ef64f52d40b761e723f50be49bd9aafc642b704f", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -383,16 +383,12 @@ fn find_type_parameters(\n         }\n \n         // Place bound generic params on a stack, to extract them when a type is encountered.\n-        fn visit_poly_trait_ref(\n-            &mut self,\n-            trait_ref: &'a ast::PolyTraitRef,\n-            modifier: &'a ast::TraitBoundModifier,\n-        ) {\n+        fn visit_poly_trait_ref(&mut self, trait_ref: &'a ast::PolyTraitRef) {\n             let stack_len = self.bound_generic_params_stack.len();\n             self.bound_generic_params_stack\n                 .extend(trait_ref.bound_generic_params.clone().into_iter());\n \n-            visit::walk_poly_trait_ref(self, trait_ref, modifier);\n+            visit::walk_poly_trait_ref(self, trait_ref);\n \n             self.bound_generic_params_stack.truncate(stack_len);\n         }"}, {"sha": "51b1bfad8a0d85a2cbdcc16d9178866dab6a57b5", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -385,30 +385,17 @@ pub trait Visitor<'v>: Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'v VariantData<'v>,\n-        _: Symbol,\n-        _: &'v Generics<'v>,\n-        _parent_id: HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'v VariantData<'v>) {\n         walk_struct_def(self, s)\n     }\n     fn visit_field_def(&mut self, s: &'v FieldDef<'v>) {\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'v EnumDef<'v>,\n-        generics: &'v Generics<'v>,\n-        item_id: HirId,\n-        _: Span,\n-    ) {\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef<'v>, item_id: HirId) {\n+        walk_enum_def(self, enum_definition, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant<'v>, g: &'v Generics<'v>, item_id: HirId) {\n-        walk_variant(self, v, g, item_id)\n+    fn visit_variant(&mut self, v: &'v Variant<'v>) {\n+        walk_variant(self, v)\n     }\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n@@ -572,7 +559,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n-            visitor.visit_enum_def(enum_definition, generics, item.hir_id(), item.span)\n+            visitor.visit_enum_def(enum_definition, item.hir_id())\n         }\n         ItemKind::Impl(Impl {\n             unsafety: _,\n@@ -595,13 +582,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         | ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.hir_id());\n-            visitor.visit_variant_data(\n-                struct_definition,\n-                item.ident.name,\n-                generics,\n-                item.hir_id(),\n-                item.span,\n-            );\n+            visitor.visit_variant_data(struct_definition);\n         }\n         ItemKind::Trait(.., ref generics, bounds, trait_item_refs) => {\n             visitor.visit_id(item.hir_id());\n@@ -649,28 +630,16 @@ pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id:\n pub fn walk_enum_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     enum_definition: &'v EnumDef<'v>,\n-    generics: &'v Generics<'v>,\n     item_id: HirId,\n ) {\n     visitor.visit_id(item_id);\n-    walk_list!(visitor, visit_variant, enum_definition.variants, generics, item_id);\n+    walk_list!(visitor, visit_variant, enum_definition.variants);\n }\n \n-pub fn walk_variant<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    variant: &'v Variant<'v>,\n-    generics: &'v Generics<'v>,\n-    parent_item_id: HirId,\n-) {\n+pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V, variant: &'v Variant<'v>) {\n     visitor.visit_ident(variant.ident);\n     visitor.visit_id(variant.id);\n-    visitor.visit_variant_data(\n-        &variant.data,\n-        variant.ident.name,\n-        generics,\n-        parent_item_id,\n-        variant.span,\n-    );\n+    visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n }\n "}, {"sha": "cbf1a6775550106534f89da3f30f31dcadad279f", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -233,9 +233,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n-        run_early_pass!(self, check_poly_trait_ref, t, m);\n-        ast_visit::walk_poly_trait_ref(self, t, m);\n+    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n+        run_early_pass!(self, check_poly_trait_ref, t);\n+        ast_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {"}, {"sha": "5188ac633d3928b9bcf56cc63bcab58bd76ab4da", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -24,7 +24,6 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use std::any::Any;\n@@ -194,14 +193,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &'tcx hir::Generics<'tcx>,\n-        _: hir::HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'tcx hir::VariantData<'tcx>) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n     }\n@@ -213,15 +205,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n-            hir_visit::walk_variant(cx, v, g, item_id);\n+            hir_visit::walk_variant(cx, v);\n         })\n     }\n "}, {"sha": "7ab9302d835a2d57da295324c08020b11b2a2dda", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -772,14 +772,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |builder| {\n-            intravisit::walk_variant(builder, v, g, item_id);\n+            intravisit::walk_variant(builder, v);\n         })\n     }\n "}, {"sha": "413f06a97a2455f8e76c7f5039ee87ea4c519c23", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -156,8 +156,7 @@ macro_rules! early_lint_methods {\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n-                                    b: &ast::TraitBoundModifier);\n+            fn check_poly_trait_ref(a: &ast::PolyTraitRef);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n             fn check_trait_item(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);"}, {"sha": "2a51af582f5854c35d21a27e42f4b583166305f6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -29,7 +29,6 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_span::{Span, Symbol};\n \n #[macro_use]\n mod pass_manager;\n@@ -159,14 +158,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n         set: &'a mut FxIndexSet<LocalDefId>,\n     }\n     impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n-        fn visit_variant_data(\n-            &mut self,\n-            v: &'tcx hir::VariantData<'tcx>,\n-            _: Symbol,\n-            _: &'tcx hir::Generics<'tcx>,\n-            _: hir::HirId,\n-            _: Span,\n-        ) {\n+        fn visit_variant_data(&mut self, v: &'tcx hir::VariantData<'tcx>) {\n             if let hir::VariantData::Tuple(_, hir_id) = *v {\n                 self.set.insert(self.tcx.hir().local_def_id(hir_id));\n             }"}, {"sha": "f75fffb6871f73aed9194c51de005b04c80da836", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -2066,14 +2066,9 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_expr(self, expr)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        variant: &'tcx hir::Variant<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        item_id: HirId,\n-    ) {\n+    fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n         self.check_attributes(variant.id, variant.span, Target::Variant, None);\n-        intravisit::walk_variant(self, variant, generics, item_id)\n+        intravisit::walk_variant(self, variant)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "625c854ea77a5dd7363aff05d995751edc5bf220", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -368,14 +368,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         self.maybe_typeck_results = old_maybe_typeck_results;\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        def: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &hir::Generics<'_>,\n-        _: hir::HirId,\n-        _: rustc_span::Span,\n-    ) {\n+    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData<'tcx>) {\n         let tcx = self.tcx;\n         let has_repr_c = self.repr_has_repr_c;\n         let has_repr_simd = self.repr_has_repr_simd;"}, {"sha": "399d00b403a6ba784eb5a88791f8ccbf33c25aa1", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -276,14 +276,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_field_def(self, s)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'v hir::Variant<'v>,\n-        g: &'v hir::Generics<'v>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'v hir::Variant<'v>) {\n         self.record(\"Variant\", Id::None, v);\n-        hir_visit::walk_variant(self, v, g, item_id)\n+        hir_visit::walk_variant(self, v)\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {"}, {"sha": "574e8073d8efd508fdc72891a80805ee56ae0a5d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{FieldDef, Generics, HirId, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n+use rustc_hir::{FieldDef, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n@@ -442,7 +442,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         );\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.annotate(\n             self.tcx.hir().local_def_id(var.id),\n             var.span,\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     );\n                 }\n \n-                intravisit::walk_variant(v, var, g, item_id)\n+                intravisit::walk_variant(v, var)\n             },\n         )\n     }\n@@ -598,9 +598,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         intravisit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n-        intravisit::walk_variant(self, var, g, item_id);\n+        intravisit::walk_variant(self, var);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {"}, {"sha": "f7c28eff55b763c4cfc1c6b83fa64b0d7f36fab0", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -1625,15 +1625,10 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, t)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {\n             self.in_variant = true;\n-            intravisit::walk_variant(self, v, g, item_id);\n+            intravisit::walk_variant(self, v);\n             self.in_variant = false;\n         }\n     }"}, {"sha": "58a4cff55db7dc906b0522107a92cd9502793285", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -723,7 +723,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_trait_object = prev;\n         self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n-    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, _: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef) {\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,"}, {"sha": "20ae102bc27d30ce7cee4a74eda73c4b145dad4d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -1289,14 +1289,9 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'hir hir::Variant<'_>,\n-        g: &'hir hir::Generics<'_>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'hir hir::Variant<'_>) {\n         self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}, {"sha": "cd1d90e860b9fe865baef8a27bcbeb3078b7b0ec", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8237efc52d909c482092fbf60356cfca59bf8ea0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8237efc52d909c482092fbf60356cfca59bf8ea0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=8237efc52d909c482092fbf60356cfca59bf8ea0", "patch": "@@ -89,7 +89,7 @@ impl EarlyLintPass for UnusedUnit {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef, _: &ast::TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef) {\n         let segments = &poly.trait_ref.path.segments;\n \n         if_chain! {"}]}