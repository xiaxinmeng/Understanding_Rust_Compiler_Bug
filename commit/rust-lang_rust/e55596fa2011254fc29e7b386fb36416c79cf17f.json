{"sha": "e55596fa2011254fc29e7b386fb36416c79cf17f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTU5NmZhMjAxMTI1NGZjMjllN2IzODZmYjM2NDE2Yzc5Y2YxN2Y=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-20T22:26:58Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-20T22:26:58Z"}, "message": "Move rt into sys::rt, fix tidy", "tree": {"sha": "1324f595eb13c1be23720e56539b93bfe2f56e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1324f595eb13c1be23720e56539b93bfe2f56e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55596fa2011254fc29e7b386fb36416c79cf17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55596fa2011254fc29e7b386fb36416c79cf17f", "html_url": "https://github.com/rust-lang/rust/commit/e55596fa2011254fc29e7b386fb36416c79cf17f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55596fa2011254fc29e7b386fb36416c79cf17f/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01157e6b3cf3acd2c555d36e272c7ad05d837868", "url": "https://api.github.com/repos/rust-lang/rust/commits/01157e6b3cf3acd2c555d36e272c7ad05d837868", "html_url": "https://github.com/rust-lang/rust/commit/01157e6b3cf3acd2c555d36e272c7ad05d837868"}], "stats": {"total": 500, "additions": 163, "deletions": 337}, "files": [{"sha": "1f2b94239a86b93888a91fe13891f9dee6d95db0", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -26,9 +26,8 @@\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // Reexport the start module on platforms that provide it\n-#[unstable(feature = \"start_fn\", issue=\"0\")]\n-#[cfg(target_os = \"redox\")]\n-pub use sys::start::*;\n+#[unstable(feature = \"sys_rt\", issue=\"0\")]\n+pub use sys::rt::*;\n \n #[cfg(not(test))]\n #[lang = \"start\"]"}, {"sha": "d4811a3444fd3f768de0aab01355358dc0b1f6ba", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -29,9 +29,9 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n+pub mod rt;\n pub mod rwlock;\n pub mod stack_overflow;\n-pub mod start;\n pub mod stdio;\n pub mod syscall;\n pub mod thread;"}, {"sha": "03e1c9fffa4d0abdf78de2b08f4569bd197cf958", "filename": "src/libstd/sys/redox/net/netc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fnetc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fnetc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fnetc.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n pub type in_addr_t = u32;\n pub type in_port_t = u16;\n "}, {"sha": "0e854989c125ce1223e927333a572cbf64a11273", "filename": "src/libstd/sys/redox/rt.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Frt.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,6 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Defintion of functions like _start for the linker\n+\n use sys::syscall::exit;\n \n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n #[naked]\n #[cfg(target_arch = \"x86\")]\n@@ -15,7 +27,7 @@ pub unsafe fn _start() {\n     let _ = exit(0);\n }\n \n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n #[naked]\n #[cfg(target_arch = \"x86_64\")]\n@@ -30,7 +42,7 @@ pub unsafe fn _start() {\n     let _ = exit(0);\n }\n \n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern \"C\" fn _start_stack(stack: *const usize){\n     extern \"C\" {\n@@ -45,7 +57,7 @@ pub unsafe extern \"C\" fn _start_stack(stack: *const usize){\n /// Memcpy\n ///\n /// Copy N bytes of memory from one location to another.\n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern fn memcpy(dest: *mut u8, src: *const u8,\n                             n: usize) -> *mut u8 {\n@@ -61,7 +73,7 @@ pub unsafe extern fn memcpy(dest: *mut u8, src: *const u8,\n /// Memmove\n ///\n /// Copy N bytes of memory from src to dest. The memory areas may overlap.\n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern fn memmove(dest: *mut u8, src: *const u8,\n                              n: usize) -> *mut u8 {\n@@ -85,7 +97,7 @@ pub unsafe extern fn memmove(dest: *mut u8, src: *const u8,\n /// Memset\n ///\n /// Fill a block of memory with a specified value.\n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern fn memset(dest: *mut u8, c: i32, n: usize) -> *mut u8 {\n     let mut i = 0;\n@@ -100,7 +112,7 @@ pub unsafe extern fn memset(dest: *mut u8, c: i32, n: usize) -> *mut u8 {\n /// Memcmp\n ///\n /// Compare two blocks of memory.\n-#[unstable(feature = \"start_fn\", issue = \"0\")]\n+#[unstable(feature = \"sys_rt\", issue = \"0\")]\n #[no_mangle]\n pub unsafe extern fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32 {\n     let mut i = 0;", "previous_filename": "src/libstd/sys/redox/start.rs"}, {"sha": "9fb3961486df23c3b39eb41d4876acebe09a55d4", "filename": "src/libstd/sys/redox/syscall/arch/arm.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Farm.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use super::error::{Error, Result};\n \n pub unsafe fn syscall0(mut a: usize) -> Result<usize> {\n@@ -61,7 +71,8 @@ pub unsafe fn syscall4(mut a: usize, b: usize, c: usize, d: usize, e: usize) ->\n     Error::demux(a)\n }\n \n-pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize) -> Result<usize> {\n+pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize)\n+                       -> Result<usize> {\n     asm!(\"swi $$0\"\n         : \"={r0}\"(a)\n         : \"{r7}\"(a), \"{r0}\"(b), \"{r1}\"(c), \"{r2}\"(d), \"{r3}\"(e), \"{r4}\"(f)"}, {"sha": "724a6b927f43a66df8dfaca1f33406264ee1fa6d", "filename": "src/libstd/sys/redox/syscall/arch/x86.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use super::error::{Error, Result};\n \n pub unsafe fn syscall0(mut a: usize) -> Result<usize> {\n@@ -61,7 +71,8 @@ pub unsafe fn syscall4(mut a: usize, b: usize, c: usize, d: usize, e: usize) ->\n     Error::demux(a)\n }\n \n-pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize) -> Result<usize> {\n+pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize)\n+                       -> Result<usize> {\n     asm!(\"int 0x80\"\n         : \"={eax}\"(a)\n         : \"{eax}\"(a), \"{ebx}\"(b), \"{ecx}\"(c), \"{edx}\"(d), \"{esi}\"(e), \"{edi}\"(f)"}, {"sha": "a321c31f207d0c2d2829249efa61c47a5babb5d7", "filename": "src/libstd/sys/redox/syscall/arch/x86_64.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Farch%2Fx86_64.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use super::error::{Error, Result};\n \n pub unsafe fn syscall0(mut a: usize) -> Result<usize> {\n@@ -25,7 +35,8 @@ pub unsafe fn syscall1_clobber(mut a: usize, b: usize) -> Result<usize> {\n     asm!(\"int 0x80\"\n         : \"={rax}\"(a)\n         : \"{rax}\"(a), \"{rbx}\"(b)\n-        : \"memory\", \"rbx\", \"rcx\", \"rdx\", \"rsi\", \"rdi\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\"\n+        : \"memory\", \"rbx\", \"rcx\", \"rdx\", \"rsi\", \"rdi\", \"r8\",\n+          \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\"\n         : \"intel\", \"volatile\");\n \n     Error::demux(a)\n@@ -61,7 +72,8 @@ pub unsafe fn syscall4(mut a: usize, b: usize, c: usize, d: usize, e: usize) ->\n     Error::demux(a)\n }\n \n-pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize) -> Result<usize> {\n+pub unsafe fn syscall5(mut a: usize, b: usize, c: usize, d: usize, e: usize, f: usize)\n+                       -> Result<usize> {\n     asm!(\"int 0x80\"\n         : \"={rax}\"(a)\n         : \"{rax}\"(a), \"{rbx}\"(b), \"{rcx}\"(c), \"{rdx}\"(d), \"{rsi}\"(e), \"{rdi}\"(f)"}, {"sha": "f58c240f31e65909c781d6890d5b26fd1bdb0cad", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use super::arch::*;\n use super::data::{Stat, StatVfs, TimeSpec};\n use super::error::Result;\n@@ -63,7 +73,8 @@ pub fn dup(fd: usize, buf: &[u8]) -> Result<usize> {\n \n /// Replace the current process with a new executable\n pub fn execve(path: &str, args: &[[usize; 2]]) -> Result<usize> {\n-    unsafe { syscall4(SYS_EXECVE, path.as_ptr() as usize, path.len(), args.as_ptr() as usize, args.len()) }\n+    unsafe { syscall4(SYS_EXECVE, path.as_ptr() as usize, path.len(),\n+                                  args.as_ptr() as usize, args.len()) }\n }\n \n /// Exit the current process\n@@ -116,8 +127,9 @@ pub fn ftruncate(fd: usize, len: usize) -> Result<usize> {\n     unsafe { syscall2(SYS_FTRUNCATE, fd, len) }\n }\n \n-/// Fast userspace mutex - TODO: Document\n-pub unsafe fn futex(addr: *mut i32, op: usize, val: i32, val2: usize, addr2: *mut i32) -> Result<usize> {\n+/// Fast userspace mutex\n+pub unsafe fn futex(addr: *mut i32, op: usize, val: i32, val2: usize, addr2: *mut i32)\n+                    -> Result<usize> {\n     syscall5(SYS_FUTEX, addr as usize, op, (val as isize) as usize, val2, addr2 as usize)\n }\n \n@@ -188,7 +200,8 @@ pub fn mkns(schemes: &[[usize; 2]]) -> Result<usize> {\n \n /// Sleep for the time specified in `req`\n pub fn nanosleep(req: &TimeSpec, rem: &mut TimeSpec) -> Result<usize> {\n-    unsafe { syscall2(SYS_NANOSLEEP, req as *const TimeSpec as usize, rem as *mut TimeSpec as usize) }\n+    unsafe { syscall2(SYS_NANOSLEEP, req as *const TimeSpec as usize,\n+                                     rem as *mut TimeSpec as usize) }\n }\n \n /// Open a file"}, {"sha": "223167d6bf75d32247a44082fcc43c30565a81ab", "filename": "src/libstd/sys/redox/syscall/data.rs", "status": "modified", "additions": 12, "deletions": 82, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,60 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use core::ops::{Deref, DerefMut};\n use core::{mem, slice};\n \n-#[derive(Copy, Clone, Debug, Default)]\n-pub struct Event {\n-    pub id: usize,\n-    pub flags: usize,\n-    pub data: usize\n-}\n-\n-impl Deref for Event {\n-    type Target = [u8];\n-    fn deref(&self) -> &[u8] {\n-        unsafe {\n-            slice::from_raw_parts(self as *const Event as *const u8, mem::size_of::<Event>()) as &[u8]\n-        }\n-    }\n-}\n-\n-impl DerefMut for Event {\n-    fn deref_mut(&mut self) -> &mut [u8] {\n-        unsafe {\n-            slice::from_raw_parts_mut(self as *mut Event as *mut u8, mem::size_of::<Event>()) as &mut [u8]\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, Default)]\n-#[repr(packed)]\n-pub struct Packet {\n-    pub id: u64,\n-    pub pid: usize,\n-    pub uid: u32,\n-    pub gid: u32,\n-    pub a: usize,\n-    pub b: usize,\n-    pub c: usize,\n-    pub d: usize\n-}\n-\n-impl Deref for Packet {\n-    type Target = [u8];\n-    fn deref(&self) -> &[u8] {\n-        unsafe {\n-            slice::from_raw_parts(self as *const Packet as *const u8, mem::size_of::<Packet>()) as &[u8]\n-        }\n-    }\n-}\n-\n-impl DerefMut for Packet {\n-    fn deref_mut(&mut self) -> &mut [u8] {\n-        unsafe {\n-            slice::from_raw_parts_mut(self as *mut Packet as *mut u8, mem::size_of::<Packet>()) as &mut [u8]\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, Default)]\n #[repr(packed)]\n pub struct Stat {\n@@ -87,34 +43,8 @@ impl Deref for Stat {\n impl DerefMut for Stat {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut Stat as *mut u8, mem::size_of::<Stat>()) as &mut [u8]\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, Default)]\n-#[repr(packed)]\n-pub struct StatVfs {\n-    pub f_bsize: u32,\n-    pub f_blocks: u64,\n-    pub f_bfree: u64,\n-    pub f_bavail: u64,\n-    //TODO: More fields https://linux.die.net/man/2/statvfs\n-}\n-\n-impl Deref for StatVfs {\n-    type Target = [u8];\n-    fn deref(&self) -> &[u8] {\n-        unsafe {\n-            slice::from_raw_parts(self as *const StatVfs as *const u8, mem::size_of::<StatVfs>()) as &[u8]\n-        }\n-    }\n-}\n-\n-impl DerefMut for StatVfs {\n-    fn deref_mut(&mut self) -> &mut [u8] {\n-        unsafe {\n-            slice::from_raw_parts_mut(self as *mut StatVfs as *mut u8, mem::size_of::<StatVfs>()) as &mut [u8]\n+            slice::from_raw_parts_mut(self as *mut Stat as *mut u8,\n+                                      mem::size_of::<Stat>()) as &mut [u8]\n         }\n     }\n }"}, {"sha": "d8d78d550162ae3ef0f6750b8b82d39b3095bec1", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use core::{fmt, result};\n \n #[derive(Eq, PartialEq)]"}, {"sha": "9f0d3e6f77955ec25de81e27a66dd77bc7101c08", "filename": "src/libstd/sys/redox/syscall/flag.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n pub const CLONE_VM: usize = 0x100;\n pub const CLONE_FS: usize = 0x200;\n pub const CLONE_FILES: usize = 0x400;"}, {"sha": "ce789c269a7e0ab3bc5d0f88967101afc7c033bc", "filename": "src/libstd/sys/redox/syscall/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fmod.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,10 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n pub use self::arch::*;\n pub use self::call::*;\n pub use self::data::*;\n pub use self::error::*;\n pub use self::flag::*;\n pub use self::number::*;\n-pub use self::scheme::*;\n \n #[cfg(target_arch = \"arm\")]\n #[path=\"arch/arm.rs\"]\n@@ -32,6 +41,3 @@ pub mod flag;\n \n /// Call numbers used by each system call\n pub mod number;\n-\n-/// A trait useful for scheme handlers\n-pub mod scheme;"}, {"sha": "358746cd20a2385c3351730bcad74bc8b8692c77", "filename": "src/libstd/sys/redox/syscall/number.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n pub const SYS_CLASS: usize =    0xF000_0000;\n pub const SYS_CLASS_PATH: usize=0x1000_0000;\n pub const SYS_CLASS_FILE: usize=0x2000_0000;"}, {"sha": "d322f0b5a9c8c660a0c2401612c2cc56eb585898", "filename": "src/libstd/sys/redox/syscall/scheme.rs", "status": "removed", "additions": 0, "deletions": 232, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/01157e6b3cf3acd2c555d36e272c7ad05d837868/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fscheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01157e6b3cf3acd2c555d36e272c7ad05d837868/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fscheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fscheme.rs?ref=01157e6b3cf3acd2c555d36e272c7ad05d837868", "patch": "@@ -1,232 +0,0 @@\n-use core::{mem, slice};\n-\n-use super::*;\n-\n-pub trait Scheme {\n-    fn handle(&self, packet: &mut Packet) {\n-        packet.a = Error::mux(match packet.a {\n-            SYS_OPEN => self.open(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.d, packet.uid, packet.gid),\n-            SYS_CHMOD => self.chmod(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.d as u16, packet.uid, packet.gid),\n-            SYS_RMDIR => self.rmdir(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.uid, packet.gid),\n-            SYS_UNLINK => self.unlink(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.uid, packet.gid),\n-\n-            SYS_DUP => self.dup(packet.b, unsafe { slice::from_raw_parts(packet.c as *const u8, packet.d) }),\n-            SYS_READ => self.read(packet.b, unsafe { slice::from_raw_parts_mut(packet.c as *mut u8, packet.d) }),\n-            SYS_WRITE => self.write(packet.b, unsafe { slice::from_raw_parts(packet.c as *const u8, packet.d) }),\n-            SYS_LSEEK => self.seek(packet.b, packet.c, packet.d),\n-            SYS_FCNTL => self.fcntl(packet.b, packet.c, packet.d),\n-            SYS_FEVENT => self.fevent(packet.b, packet.c),\n-            SYS_FMAP => self.fmap(packet.b, packet.c, packet.d),\n-            SYS_FPATH => self.fpath(packet.b, unsafe { slice::from_raw_parts_mut(packet.c as *mut u8, packet.d) }),\n-            SYS_FSTAT => if packet.d >= mem::size_of::<Stat>() { self.fstat(packet.b, unsafe { &mut *(packet.c as *mut Stat) }) } else { Err(Error::new(EFAULT)) },\n-            SYS_FSTATVFS => if packet.d >= mem::size_of::<StatVfs>() { self.fstatvfs(packet.b, unsafe { &mut *(packet.c as *mut StatVfs) }) } else { Err(Error::new(EFAULT)) },\n-            SYS_FSYNC => self.fsync(packet.b),\n-            SYS_FTRUNCATE => self.ftruncate(packet.b, packet.c),\n-            SYS_CLOSE => self.close(packet.b),\n-\n-            _ => Err(Error::new(ENOSYS))\n-        });\n-    }\n-\n-    /* Scheme operations */\n-\n-    #[allow(unused_variables)]\n-    fn open(&self, path: &[u8], flags: usize, uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn chmod(&self, path: &[u8], mode: u16, uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn rmdir(&self, path: &[u8], uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn unlink(&self, path: &[u8], uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    /* Resource operations */\n-    #[allow(unused_variables)]\n-    fn dup(&self, old_id: usize, buf: &[u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn read(&self, id: usize, buf: &mut [u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn write(&self, id: usize, buf: &[u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn seek(&self, id: usize, pos: usize, whence: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fcntl(&self, id: usize, cmd: usize, arg: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fevent(&self, id: usize, flags: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fmap(&self, id: usize, offset: usize, size: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fpath(&self, id: usize, buf: &mut [u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fstat(&self, id: usize, stat: &mut Stat) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fstatvfs(&self, id: usize, stat: &mut StatVfs) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fsync(&self, id: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn ftruncate(&self, id: usize, len: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn close(&self, id: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-}\n-\n-pub trait SchemeMut {\n-    fn handle(&mut self, packet: &mut Packet) {\n-        packet.a = Error::mux(match packet.a {\n-            SYS_OPEN => self.open(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.d, packet.uid, packet.gid),\n-            SYS_CHMOD => self.chmod(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.d as u16, packet.uid, packet.gid),\n-            SYS_RMDIR => self.rmdir(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.uid, packet.gid),\n-            SYS_UNLINK => self.unlink(unsafe { slice::from_raw_parts(packet.b as *const u8, packet.c) }, packet.uid, packet.gid),\n-\n-            SYS_DUP => self.dup(packet.b, unsafe { slice::from_raw_parts(packet.c as *const u8, packet.d) }),\n-            SYS_READ => self.read(packet.b, unsafe { slice::from_raw_parts_mut(packet.c as *mut u8, packet.d) }),\n-            SYS_WRITE => self.write(packet.b, unsafe { slice::from_raw_parts(packet.c as *const u8, packet.d) }),\n-            SYS_LSEEK => self.seek(packet.b, packet.c, packet.d),\n-            SYS_FCNTL => self.fcntl(packet.b, packet.c, packet.d),\n-            SYS_FEVENT => self.fevent(packet.b, packet.c),\n-            SYS_FMAP => self.fmap(packet.b, packet.c, packet.d),\n-            SYS_FPATH => self.fpath(packet.b, unsafe { slice::from_raw_parts_mut(packet.c as *mut u8, packet.d) }),\n-            SYS_FSTAT => if packet.d >= mem::size_of::<Stat>() { self.fstat(packet.b, unsafe { &mut *(packet.c as *mut Stat) }) } else { Err(Error::new(EFAULT)) },\n-            SYS_FSTATVFS => if packet.d >= mem::size_of::<StatVfs>() { self.fstatvfs(packet.b, unsafe { &mut *(packet.c as *mut StatVfs) }) } else { Err(Error::new(EFAULT)) },\n-            SYS_FSYNC => self.fsync(packet.b),\n-            SYS_FTRUNCATE => self.ftruncate(packet.b, packet.c),\n-            SYS_CLOSE => self.close(packet.b),\n-\n-            _ => Err(Error::new(ENOSYS))\n-        });\n-    }\n-\n-    /* Scheme operations */\n-    #[allow(unused_variables)]\n-    fn open(&mut self, path: &[u8], flags: usize, uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn chmod(&self, path: &[u8], mode: u16, uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn rmdir(&mut self, path: &[u8], uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn unlink(&mut self, path: &[u8], uid: u32, gid: u32) -> Result<usize> {\n-        Err(Error::new(ENOENT))\n-    }\n-\n-    /* Resource operations */\n-    #[allow(unused_variables)]\n-    fn dup(&mut self, old_id: usize, buf: &[u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn read(&mut self, id: usize, buf: &mut [u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn write(&mut self, id: usize, buf: &[u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn seek(&mut self, id: usize, pos: usize, whence: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fcntl(&mut self, id: usize, cmd: usize, arg: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fevent(&mut self, id: usize, flags: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fmap(&mut self, id: usize, offset: usize, size: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fpath(&mut self, id: usize, buf: &mut [u8]) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fstat(&mut self, id: usize, stat: &mut Stat) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fstatvfs(&self, id: usize, stat: &mut StatVfs) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn fsync(&mut self, id: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn ftruncate(&mut self, id: usize, len: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-\n-    #[allow(unused_variables)]\n-    fn close(&mut self, id: usize) -> Result<usize> {\n-        Err(Error::new(EBADF))\n-    }\n-}"}, {"sha": "5e14b392bdc2cffbdbd53ae8ac2512aecd17c27f", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -50,6 +50,7 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n+pub mod rt;\n pub mod rwlock;\n pub mod stack_overflow;\n pub mod thread;"}, {"sha": "188e31cb5d7b2ed64e8162606d013781d39c19fd", "filename": "src/libstd/sys/unix/rt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Funix%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Funix%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frt.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Stub for placing functions like _start for the linker"}, {"sha": "52d256630a5e9b7bb706b9a92c81a1273c82581d", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -36,6 +36,7 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n+pub mod rt;\n pub mod rwlock;\n pub mod stack_overflow;\n pub mod thread;"}, {"sha": "188e31cb5d7b2ed64e8162606d013781d39c19fd", "filename": "src/libstd/sys/windows/rt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fwindows%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55596fa2011254fc29e7b386fb36416c79cf17f/src%2Flibstd%2Fsys%2Fwindows%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frt.rs?ref=e55596fa2011254fc29e7b386fb36416c79cf17f", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Stub for placing functions like _start for the linker"}]}