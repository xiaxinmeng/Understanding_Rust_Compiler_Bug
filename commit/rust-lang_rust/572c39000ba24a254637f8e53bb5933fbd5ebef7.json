{"sha": "572c39000ba24a254637f8e53bb5933fbd5ebef7", "node_id": "C_kwDOAAsO6NoAKDU3MmMzOTAwMGJhMjRhMjU0NjM3ZjhlNTNiYjU5MzNmYmQ1ZWJlZjc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-25T12:45:35Z"}, "committer": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T22:24:14Z"}, "message": "Stabilize `box_into_pin`", "tree": {"sha": "cf0dfc6e2d44cff7d0875fd237741f524076b34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0dfc6e2d44cff7d0875fd237741f524076b34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572c39000ba24a254637f8e53bb5933fbd5ebef7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEClCZYSKPPkQPouAvN5zu/dY+XdcFAmKX5w4ACgkQN5zu/dY+\nXdf3UBAAqno/mn8TUkpqq5Ktz5w5FLv3ufZTnUNxnLndpnxBEl4rUubw449Fx0He\nFUopzT1raw7EHYdcUc2J1wwTMCrMs16ADCVpm0/mYGKF4puAgXtyKEmget7+wJ/r\nLhzy7C5jaeIVVw+HX9OXlt9DyhIlnGqGflLL5SYgBBPLM875H91KBn5CpSGintOS\n/I/7Uqgz0Uf8mMckckDrzuL1bGwj5fVHhoz3tPqxAGXeck+cCf9ffGeBvEcAIckj\nuQyxtsrOh0FB+htFVTa2WzHQA0ELYKSOP7/1EUiZoFsb2n/zbYnSVQcs09JQA2Ai\nSvDamgp9xE94GIChckyUafQVvTUb0lMLDFoIXZmcI07JwukJTsQA4ztADqiRFYGW\nHeJCpMn3bH/IgOADbQqiuQaamVdOVXUb+B8z7zSjY3BQATGJm13vfKWQL9aqDQSn\n5bVd1da29wWAcy77G8JLLHn5PaW4OJk2V2X/Orn074tO4IHEHv9T6PAjTX9GyHym\ne1ePnj2OFr/96lmlZZOSKa5nua87kLlA8Pz24jpFoir5BjlB67XtLTIrj0O3x69M\n1AAMixJOJJYfNBluwlwZeYUP51XP3jW84U9J5/1bYfhBdLLUAfxZ+OgQDddIrd9H\n88gtC7OcS8uW5iVTXP1HVtNvVJskWy24ZfAy0ZE3Zj9HtqbcWRg=\n=YeZQ\n-----END PGP SIGNATURE-----", "payload": "tree cf0dfc6e2d44cff7d0875fd237741f524076b34f\nparent b5a2d27f8f59df6f2162e61461b41d6116d4815e\nauthor Yuki Okushi <jtitor@2k36.org> 1653482735 +0900\ncommitter Yuki Okushi <jtitor@2k36.org> 1654122254 +0900\n\nStabilize `box_into_pin`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572c39000ba24a254637f8e53bb5933fbd5ebef7", "html_url": "https://github.com/rust-lang/rust/commit/572c39000ba24a254637f8e53bb5933fbd5ebef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572c39000ba24a254637f8e53bb5933fbd5ebef7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a2d27f8f59df6f2162e61461b41d6116d4815e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a2d27f8f59df6f2162e61461b41d6116d4815e", "html_url": "https://github.com/rust-lang/rust/commit/b5a2d27f8f59df6f2162e61461b41d6116d4815e"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "e2c692b5299f45faef3c0976a1b4cf4301729d12", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/572c39000ba24a254637f8e53bb5933fbd5ebef7/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c39000ba24a254637f8e53bb5933fbd5ebef7/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=572c39000ba24a254637f8e53bb5933fbd5ebef7", "patch": "@@ -1175,14 +1175,33 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     /// This conversion does not allocate on the heap and happens in place.\n     ///\n     /// This is also available via [`From`].\n-    #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n+    ///\n+    /// # Notes\n+    ///\n+    /// It's not recommended that crates add an impl like `From<Box<T>> for Pin<T>`,\n+    /// as it'll introduce an ambiguity when calling `Pin::from`.\n+    /// A demonstration of such a poor impl is shown below.\n+    ///\n+    /// ```compile_fail\n+    /// # use std::pin::Pin;\n+    /// struct Foo; // A type defined in this crate.\n+    /// impl From<Box<()>> for Pin<Foo> {\n+    ///     fn from(_: Box<()>) -> Pin<Foo> {\n+    ///         Pin::new(Foo)\n+    ///     }\n+    /// }\n+    ///\n+    /// let foo = Box::new(());\n+    /// let bar = Pin::from(foo);\n+    /// ```\n+    #[stable(feature = \"box_into_pin\", since = \"1.63.0\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     pub const fn into_pin(boxed: Self) -> Pin<Self>\n     where\n         A: 'static,\n     {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n-        // when `T: !Unpin`,  so it's safe to pin it directly without any\n+        // when `T: !Unpin`, so it's safe to pin it directly without any\n         // additional requirements.\n         unsafe { Pin::new_unchecked(boxed) }\n     }"}]}