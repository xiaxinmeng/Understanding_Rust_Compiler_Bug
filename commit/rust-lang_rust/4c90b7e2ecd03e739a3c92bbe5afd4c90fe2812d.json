{"sha": "4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTBiN2UyZWNkMDNlNzM5YTNjOTJiYmU1YWZkNGM5MGZlMjgxMmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T20:24:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T20:24:56Z"}, "message": "Sourcify some things\n\nIf we want to support macros properly, we need to get rid of those\nFileIds everywhere...", "tree": {"sha": "3f95c69830b973c86362586dcbc25831996dfe98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f95c69830b973c86362586dcbc25831996dfe98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "html_url": "https://github.com/rust-lang/rust/commit/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1889b3c7b52c1070734dc449d4119c5e5cf991a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1889b3c7b52c1070734dc449d4119c5e5cf991a4", "html_url": "https://github.com/rust-lang/rust/commit/1889b3c7b52c1070734dc449d4119c5e5cf991a4"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "79152a57c4e803cb270212af09a24351f227ea99", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -196,9 +196,8 @@ where\n     N: AstNode,\n     DEF: AstItemDef<N>,\n {\n-    let module_src =\n-        crate::ModuleSource::from_child_node(db, src.file_id.original_file(db), &src.ast.syntax());\n-    let module = Module::from_definition(db, Source { file_id: src.file_id, ast: module_src })?;\n+    let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n+    let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n     let ctx = LocationCtx::new(db, module.id, src.file_id);\n     Some(DEF::from_ast(ctx, &src.ast))\n }"}, {"sha": "f08827ed3d0b30f3052b12b4ea01594cfbc0af05", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -56,7 +56,7 @@ fn try_get_resolver_for_node(\n             },\n             _ => {\n                 if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n-                    Some(def_with_body_from_child_node(db, file_id, node)?.resolver(db))\n+                    Some(def_with_body_from_child_node(db, Source::new(file_id.into(), node))?.resolver(db))\n                 } else {\n                     // FIXME add missing cases\n                     None\n@@ -68,14 +68,13 @@ fn try_get_resolver_for_node(\n \n fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n+    child: Source<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n-    let src = crate::ModuleSource::from_child_node(db, file_id, node);\n-    let module = Module::from_definition(db, crate::Source { file_id: file_id.into(), ast: src })?;\n-    let ctx = LocationCtx::new(db, module.id, file_id.into());\n+    let module_source = crate::ModuleSource::from_child_node(db, child);\n+    let module = Module::from_definition(db, Source::new(child.file_id, module_source))?;\n+    let ctx = LocationCtx::new(db, module.id, child.file_id);\n \n-    node.ancestors().find_map(|node| {\n+    child.ast.ancestors().find_map(|node| {\n         match_ast! {\n             match node {\n                 ast::FnDef(def)  => { Some(Function {id: ctx.to_def(&def) }.into()) },\n@@ -142,7 +141,7 @@ impl SourceAnalyzer {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let def_with_body = def_with_body_from_child_node(db, file_id, node);\n+        let def_with_body = def_with_body_from_child_node(db, Source::new(file_id.into(), node));\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n             let scopes = def.expr_scopes(db);"}, {"sha": "a240a10b82662d26f14097029b2a9708e827dd83", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -78,14 +78,13 @@ impl ModuleSource {\n         }\n     }\n \n-    pub fn from_child_node(\n-        db: &impl db::DefDatabase2,\n-        file_id: FileId,\n-        child: &SyntaxNode,\n-    ) -> ModuleSource {\n-        if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n+    pub fn from_child_node(db: &impl db::DefDatabase2, child: Source<&SyntaxNode>) -> ModuleSource {\n+        if let Some(m) =\n+            child.ast.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n+        {\n             ModuleSource::Module(m)\n         } else {\n+            let file_id = child.file_id.original_file(db);\n             let source_file = db.parse(file_id).tree();\n             ModuleSource::SourceFile(source_file)\n         }"}, {"sha": "437d73e94dfed62a26fb7615a3c7f6e1ce722371", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -230,6 +230,10 @@ pub struct Source<T> {\n }\n \n impl<T> Source<T> {\n+    pub fn new(file_id: HirFileId, ast: T) -> Source<T> {\n+        Source { file_id, ast }\n+    }\n+\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }"}, {"sha": "b5e35e29f2b9986f5b8cab0ef10b6156d65ae4cd", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -144,8 +144,8 @@ pub(crate) fn classify_name_ref(\n         }\n     }\n \n-    let ast = ModuleSource::from_child_node(db, file_id, &parent);\n     let file_id = file_id.into();\n+    let ast = ModuleSource::from_child_node(db, Source::new(file_id, &parent));\n     // FIXME: find correct container and visibility for each case\n     let container = Module::from_definition(db, Source { file_id, ast })?;\n     let visibility = None;"}, {"sha": "8039a5164ebf9eb5b5af82819cd0234c0edbe8f5", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=4c90b7e2ecd03e739a3c92bbe5afd4c90fe2812d", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use hir::Source;\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_syntax::{\n@@ -65,9 +66,8 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Opti\n         return None;\n     }\n     let range = module.syntax().text_range();\n-    let src = hir::ModuleSource::from_child_node(db, file_id, &module.syntax());\n-    let module =\n-        hir::Module::from_definition(db, hir::Source { file_id: file_id.into(), ast: src })?;\n+    let src = hir::ModuleSource::from_child_node(db, Source::new(file_id.into(), &module.syntax()));\n+    let module = hir::Module::from_definition(db, Source::new(file_id.into(), src))?;\n \n     let path = module.path_to_root(db).into_iter().rev().filter_map(|it| it.name(db)).join(\"::\");\n     Some(Runnable { range, kind: RunnableKind::TestMod { path } })"}]}