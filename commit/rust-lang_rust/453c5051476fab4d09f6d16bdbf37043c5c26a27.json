{"sha": "453c5051476fab4d09f6d16bdbf37043c5c26a27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1M2M1MDUxNDc2ZmFiNGQwOWY2ZDE2YmRiZjM3MDQzYzVjMjZhMjc=", "commit": {"author": {"name": "David", "email": "daboross@daboross.net", "date": "2020-02-25T06:11:15Z"}, "committer": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-29T19:05:39Z"}, "message": "Replace ptr hashing with ptr casting\n\nImplementes suggeseted changes by Centril.\n\nThis checks whether the memory location of the cast remains the same\nafter atttempting to parse a postfix operator after a cast has been\nparsed. If the address is not the same, an illegal postfix operator\nwas parsed.\n\nPreviously the code generated a hash of the pointer, which was overly\ncomplex and inefficent. Casting the pointers and comparing them\nis simpler and more effcient.", "tree": {"sha": "d90987a52bbbba22159f2dcc5ba8e1c45a6ee82f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d90987a52bbbba22159f2dcc5ba8e1c45a6ee82f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453c5051476fab4d09f6d16bdbf37043c5c26a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453c5051476fab4d09f6d16bdbf37043c5c26a27", "html_url": "https://github.com/rust-lang/rust/commit/453c5051476fab4d09f6d16bdbf37043c5c26a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453c5051476fab4d09f6d16bdbf37043c5c26a27/comments", "author": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f434c6e636eda6c6c4fe167eee5b2549f8524ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f434c6e636eda6c6c4fe167eee5b2549f8524ec7", "html_url": "https://github.com/rust-lang/rust/commit/f434c6e636eda6c6c4fe167eee5b2549f8524ec7"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "36ed075cebd2feffe58abd8db2ed5b41735e641a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/453c5051476fab4d09f6d16bdbf37043c5c26a27/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453c5051476fab4d09f6d16bdbf37043c5c26a27/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=453c5051476fab4d09f6d16bdbf37043c5c26a27", "patch": "@@ -628,26 +628,17 @@ impl<'a> Parser<'a> {\n         &mut self,\n         cast_expr: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n-        use std::collections::hash_map::DefaultHasher;\n-        use std::hash::Hasher;\n-        // Hash the memory location of expr before parsing any following postfix operators.\n-        // This will be compared with the hash of the output expression.\n+        // Save the memory location of expr before parsing any following postfix operators.\n+        // This will be compared with the memory location of the output expression.\n         // If they different we can assume we parsed another expression because the existing expression is not reallocated.\n-        let mut before_hasher = DefaultHasher::new();\n-        std::ptr::hash(&*cast_expr, &mut before_hasher);\n-        let before_hash = before_hasher.finish();\n+        let addr_before = &*cast_expr as *const _ as usize;\n         let span = cast_expr.span;\n         let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;\n-\n-        let mut after_hasher = DefaultHasher::new();\n-        std::ptr::hash(&*with_postfix, &mut after_hasher);\n-        let after_hash = after_hasher.finish();\n+        let changed = addr_before != &*with_postfix as *const _ as usize;\n \n         // Check if an illegal postfix operator has been added after the cast.\n         // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.\n-        if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _))\n-            || after_hash != before_hash\n-        {\n+        if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {\n             let msg = format!(\n                 \"casts cannot be followed by {}\",\n                 match with_postfix.kind {\n@@ -661,7 +652,7 @@ impl<'a> Parser<'a> {\n                 }\n             );\n             let mut err = self.struct_span_err(span, &msg);\n-            // if type ascription is \"likely an error\", the user will already be getting a useful\n+            // If type ascription is \"likely an error\", the user will already be getting a useful\n             // help message, and doesn't need a second.\n             if self.last_type_ascription.map_or(false, |last_ascription| last_ascription.1) {\n                 self.maybe_annotate_with_ascription(&mut err, false);"}]}