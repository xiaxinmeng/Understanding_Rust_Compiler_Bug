{"sha": "1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGIyZWU2ZjllOWUxZmUxMDlmNDBiZTRjNzU2NjE5ZDVjOWFhM2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-09T11:34:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-09T11:34:29Z"}, "message": "add raw ptr variant of UnsafeCell::get", "tree": {"sha": "b3434f37391269874326b9103915692864d59db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3434f37391269874326b9103915692864d59db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f", "html_url": "https://github.com/rust-lang/rust/commit/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/475c713b2f8c41eb06fd1a65f226c77f84fea4a5", "html_url": "https://github.com/rust-lang/rust/commit/475c713b2f8c41eb06fd1a65f226c77f84fea4a5"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "0860d9c0cfa8bb8becdec69b8d4c3bbc420d13f7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=1b8b2ee6f9e9e1fe109f40be4c756619d5c9aa3f", "patch": "@@ -1548,6 +1548,36 @@ impl<T: ?Sized> UnsafeCell<T> {\n         // #[repr(transparent)]\n         self as *const UnsafeCell<T> as *const T as *mut T\n     }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n+    ///\n+    /// # Examples\n+    ///\n+    /// Gradual initialization of an `UnsafeCell`:\n+    ///\n+    /// ```\n+    /// #![feature(unsafe_cell_raw_get)]\n+    /// use std::cell::UnsafeCell;\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n+    /// unsafe { m.as_ptr().raw_get().write(5); }\n+    /// let uc = unsafe { m.assume_init() };\n+    ///\n+    /// assert_eq!(uc.into_inner(), 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"0\")]\n+    pub const fn raw_get(self: *const Self) -> *mut T {\n+        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n+        // #[repr(transparent)]\n+        self as *const T as *mut T\n+    }\n }\n \n #[stable(feature = \"unsafe_cell_default\", since = \"1.10.0\")]"}]}