{"sha": "d49d428f791b97c476c066deb9c2b3c20165199f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OWQ0MjhmNzkxYjk3YzQ3NmMwNjZkZWI5YzJiM2MyMDE2NTE5OWY=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-08T19:36:17Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-08T19:36:17Z"}, "message": "Revert checking casts before fallback.\n\nThis turns out to not be backwards compatible.", "tree": {"sha": "da9dd8704a3abc58e61f3532bffaa98e5d7a18a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9dd8704a3abc58e61f3532bffaa98e5d7a18a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49d428f791b97c476c066deb9c2b3c20165199f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49d428f791b97c476c066deb9c2b3c20165199f", "html_url": "https://github.com/rust-lang/rust/commit/d49d428f791b97c476c066deb9c2b3c20165199f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49d428f791b97c476c066deb9c2b3c20165199f/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b813718f6dff49b851fcd18a5674640554bda2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b813718f6dff49b851fcd18a5674640554bda2e5", "html_url": "https://github.com/rust-lang/rust/commit/b813718f6dff49b851fcd18a5674640554bda2e5"}], "stats": {"total": 52, "additions": 17, "deletions": 35}, "files": [{"sha": "48bd7b14fc96ab69439bbf7325900b5589497df3", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d49d428f791b97c476c066deb9c2b3c20165199f", "patch": "@@ -38,7 +38,7 @@\n //! expression, `e as U2` is not necessarily so (in fact it will only be valid if\n //! `U1` coerces to `U2`).\n \n-use super::{Diverges, Fallback, FnCtxt};\n+use super::{Diverges, FnCtxt};\n \n use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n@@ -290,9 +290,6 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             }\n             CastError::UnknownCastPtrKind |\n             CastError::UnknownExprPtrKind => {\n-                if fcx.is_tainted_by_errors() {\n-                    return;\n-                }\n                 let unknown_cast_to = match e {\n                     CastError::UnknownCastPtrKind => true,\n                     CastError::UnknownExprPtrKind => false,\n@@ -396,12 +393,6 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n     pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {\n         self.expr_ty = fcx.structurally_resolved_type(self.span, self.expr_ty);\n-        // For backwards compatibility we apply numeric fallback here. This means that in:\n-        // `let x = 100; x as u8;`, we infer `x` to `i32` rather than `u8`.\n-        if self.expr_ty.is_ty_infer() {\n-            fcx.fallback_if_possible(self.expr_ty, Fallback::Numeric);\n-            self.expr_ty = fcx.structurally_resolved_type(self.span, self.expr_ty);\n-        }\n         self.cast_ty = fcx.structurally_resolved_type(self.span, self.cast_ty);\n \n         debug!(\"check_cast({}, {:?} as {:?})\","}, {"sha": "f50bd03a9e07b3560be233ac5ffc8e942c324521", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d49d428f791b97c476c066deb9c2b3c20165199f", "patch": "@@ -858,17 +858,19 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             fcx\n         };\n \n-        fcx.check_casts();\n-\n         // All type checking constraints were added, try to fallback unsolved variables.\n         fcx.select_obligations_where_possible();\n         for ty in &fcx.unsolved_variables() {\n-            fcx.fallback_if_possible(ty, Fallback::Full);\n+            fcx.fallback_if_possible(ty);\n         }\n         fcx.select_obligations_where_possible();\n \n+        // Even though coercion casts provide type hints, we check casts after fallback for\n+        // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n+        fcx.check_casts();\n+\n         // Closure and generater analysis may run after fallback\n-        // because they doen't constrain other type variables.\n+        // because they don't constrain other type variables.\n         fcx.closure_analyze(body);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         fcx.resolve_generator_interiors(def_id);\n@@ -1734,12 +1736,6 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum Fallback {\n-    Full,\n-    Numeric\n-}\n-\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n@@ -2149,7 +2145,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n-    fn fallback_if_possible(&self, ty: Ty<'tcx>, fallback: Fallback) {\n+    fn fallback_if_possible(&self, ty: Ty<'tcx>) {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -2158,12 +2154,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => {\n-                match fallback {\n-                    Fallback::Full => self.tcx.mk_diverging_default(),\n-                    Fallback::Numeric => return,\n-                }\n-            }\n+            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n             Neither => return\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);"}, {"sha": "aa6752ffc35b077c1929d5490179584c5abf036d", "filename": "src/test/run-pass/cast-does-fallback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs?ref=d49d428f791b97c476c066deb9c2b3c20165199f", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n+    // Test that these type check correctly.\n+    (&42u8 >> 4) as usize;\n+    (&42u8 << 4) as usize;\n+\n     let cap = 512 * 512;\n     cap as u8;\n     // Assert `cap` did not get inferred to `u8` and overflowed."}, {"sha": "d733c8e6de26fe0dc80a9e0bc868e91b26fb72d5", "filename": "src/test/ui/issue-45730.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Fui%2Fissue-45730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Fui%2Fissue-45730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.rs?ref=d49d428f791b97c476c066deb9c2b3c20165199f", "patch": "@@ -11,13 +11,9 @@\n use std::fmt;\n fn main() {\n     let x: *const _ = 0 as _; //~ ERROR cannot cast\n-}\n \n-fn a() {\n     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n     let y: Option<*const fmt::Debug> = Some(x) as _;\n-}\n \n-fn c() {\n     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n }"}, {"sha": "94d39239117add7754d7b5826ae4c48c16572edd", "filename": "src/test/ui/issue-45730.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Fui%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49d428f791b97c476c066deb9c2b3c20165199f/src%2Ftest%2Fui%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.stderr?ref=d49d428f791b97c476c066deb9c2b3c20165199f", "patch": "@@ -9,19 +9,19 @@ error[E0641]: cannot cast to a pointer of an unknown kind\n    = note: The type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:17:23\n+  --> $DIR/issue-45730.rs:15:23\n    |\n-17 |     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n+15 |     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n    |                       ^^^^^--------\n    |                            |\n    |                            help: consider giving more type information\n    |\n    = note: The type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:22:13\n+  --> $DIR/issue-45730.rs:18:13\n    |\n-22 |     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n+18 |     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n    |                                            |\n    |                                            help: consider giving more type information"}]}