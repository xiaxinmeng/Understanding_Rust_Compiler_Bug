{"sha": "f33a30e7e8f22a1e438dc5b30959bb80829ee505", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzM2EzMGU3ZThmMjJhMWU0MzhkYzViMzA5NTliYjgwODI5ZWU1MDU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-18T11:57:35Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:20:00Z"}, "message": "std::str: Correct docstrings for lack of null terminator in ~str and &str", "tree": {"sha": "bf2003d4cbde8bc03f20dc592ff77f9f9246e563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2003d4cbde8bc03f20dc592ff77f9f9246e563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f33a30e7e8f22a1e438dc5b30959bb80829ee505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f33a30e7e8f22a1e438dc5b30959bb80829ee505", "html_url": "https://github.com/rust-lang/rust/commit/f33a30e7e8f22a1e438dc5b30959bb80829ee505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f33a30e7e8f22a1e438dc5b30959bb80829ee505/comments", "author": null, "committer": null, "parents": [{"sha": "595dd843d7e2e38c08b4e03b79a0531d32d778fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/595dd843d7e2e38c08b4e03b79a0531d32d778fb", "html_url": "https://github.com/rust-lang/rust/commit/595dd843d7e2e38c08b4e03b79a0531d32d778fb"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "8944d0b291e5797a485db439700bad49f80cdbbc", "filename": "src/libstd/str.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f33a30e7e8f22a1e438dc5b30959bb80829ee505/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a30e7e8f22a1e438dc5b30959bb80829ee505/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f33a30e7e8f22a1e438dc5b30959bb80829ee505", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n- * String manipulation\n- *\n- * Strings are a packed UTF-8 representation of text, stored as null\n- * terminated buffers of u8 bytes.  Strings should be indexed in bytes,\n- * for efficiency, but UTF-8 unsafe operations should be avoided.\n- */\n+//! String manipulation\n+//!\n+//! Strings are a packed UTF-8 representation of text, stored as\n+//! buffers of u8 bytes. The buffer is not null terminated.\n+//! Strings should be indexed in bytes, for efficiency, but UTF-8 unsafe\n+//! operations should be avoided.\n \n use at_vec;\n use cast;\n@@ -1772,8 +1771,6 @@ impl<'self> StrSlice<'self> for &'self str {\n     }\n \n     /// Work with the byte buffer of a string as a byte slice.\n-    ///\n-    /// The byte slice does not include the null terminator.\n     fn as_bytes(&self) -> &'self [u8] {\n         unsafe { cast::transmute(*self) }\n     }\n@@ -1953,10 +1950,7 @@ impl<'self> StrSlice<'self> for &'self str {\n \n     /// Work with the byte buffer and length of a slice.\n     ///\n-    /// The given length is one byte longer than the 'official' indexable\n-    /// length of the string. This is to permit probing the byte past the\n-    /// indexable area for a null byte, as is the case in slices pointing\n-    /// to full strings, or suffixes of them.\n+    /// The buffer does not have a null terminator.\n     #[inline]\n     fn as_imm_buf<T>(&self, f: &fn(*u8, uint) -> T) -> T {\n         let v: &[u8] = unsafe { cast::transmute(*self) };\n@@ -1979,12 +1973,10 @@ pub trait OwnedStr {\n \n     /// Work with the mutable byte buffer and length of a slice.\n     ///\n-    /// The given length is one byte longer than the 'official' indexable\n-    /// length of the string. This is to permit probing the byte past the\n-    /// indexable area for a null byte, as is the case in slices pointing\n-    /// to full strings, or suffixes of them.\n+    /// The buffer does not have a null terminator.\n     ///\n-    /// Make sure any mutations to this buffer keep this string valid UTF8.\n+    /// The caller must make sure any mutations to this buffer keep the string\n+    /// valid UTF-8!\n     fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T;\n }\n \n@@ -2085,12 +2077,10 @@ impl OwnedStr for ~str {\n         new_str\n     }\n \n-    /// Reserves capacity for exactly `n` bytes in the given string, not including\n-    /// the null terminator.\n+    /// Reserves capacity for exactly `n` bytes in the given string.\n     ///\n     /// Assuming single-byte characters, the resulting string will be large\n-    /// enough to hold a string of length `n`. To account for the null terminator,\n-    /// the underlying buffer will have the size `n` + 1.\n+    /// enough to hold a string of length `n`.\n     ///\n     /// If the capacity for `s` is already equal to or greater than the requested\n     /// capacity, then no action is taken.\n@@ -2110,8 +2100,7 @@ impl OwnedStr for ~str {\n     /// Reserves capacity for at least `n` bytes in the given string.\n     ///\n     /// Assuming single-byte characters, the resulting string will be large\n-    /// enough to hold a string of length `n`. To account for the null terminator,\n-    /// the underlying buffer will have the size `n` + 1.\n+    /// enough to hold a string of length `n`.\n     ///\n     /// This function will over-allocate in order to amortize the allocation costs\n     /// in scenarios where the caller may need to repeatedly reserve additional"}]}