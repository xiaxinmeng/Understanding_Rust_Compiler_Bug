{"sha": "bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "node_id": "C_kwDOAAsO6NoAKGJkMWYwOWQ0MTdjOGIwZTQ2MGY5MGJjZDIzYjkwNjdkNTVmN2Y3ZGQ", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-11T20:06:18Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-11T20:06:18Z"}, "message": "Annotate dead code lint with notes about ignored derived impls", "tree": {"sha": "ecf68ca184f655511c07a0dee7a3e59e8d8ddf48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf68ca184f655511c07a0dee7a3e59e8d8ddf48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "html_url": "https://github.com/rust-lang/rust/commit/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2c86eba21a08cf505cd67073736d03ff3887ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c86eba21a08cf505cd67073736d03ff3887ad", "html_url": "https://github.com/rust-lang/rust/commit/2e2c86eba21a08cf505cd67073736d03ff3887ad"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "9db9140f71ea8eaeacd2eace623ee26c6214acc2", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "patch": "@@ -3,6 +3,7 @@\n // from live codes are live, and everything else is dead.\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::pluralize;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -47,6 +48,8 @@ struct MarkSymbolVisitor<'tcx> {\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n+    // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n+    ignored_derived_traits: FxHashMap<DefId, Vec<DefId>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -242,14 +245,22 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     /// Automatically generated items marked with `rustc_trivial_field_reads`\n     /// will be ignored for the purposes of dead code analysis (see PR #85200\n     /// for discussion).\n-    fn should_ignore_item(&self, def_id: DefId) -> bool {\n+    fn should_ignore_item(&mut self, def_id: DefId) -> bool {\n         if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n             if !self.tcx.has_attr(impl_of, sym::automatically_derived) {\n                 return false;\n             }\n \n             if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n                 if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n+                    let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n+                    if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n+                        if let Some(v) = self.ignored_derived_traits.get_mut(&adt_def.did) {\n+                            v.push(trait_of);\n+                        } else {\n+                            self.ignored_derived_traits.insert(adt_def.did, vec![trait_of]);\n+                        }\n+                    }\n                     return true;\n                 }\n             }\n@@ -577,7 +588,7 @@ fn create_and_seed_worklist<'tcx>(\n fn find_live<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-) -> FxHashSet<LocalDefId> {\n+) -> (FxHashSet<LocalDefId>, FxHashMap<DefId, Vec<DefId>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n@@ -590,14 +601,16 @@ fn find_live<'tcx>(\n         pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n+        ignored_derived_traits: FxHashMap::default(),\n     };\n     symbol_visitor.mark_live_symbols();\n-    symbol_visitor.live_symbols\n+    (symbol_visitor.live_symbols, symbol_visitor.ignored_derived_traits)\n }\n \n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_symbols: FxHashSet<LocalDefId>,\n+    ignored_derived_traits: FxHashMap<DefId, Vec<DefId>>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -666,7 +679,34 @@ impl<'tcx> DeadVisitor<'tcx> {\n             self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n                 let def_id = self.tcx.hir().local_def_id(id);\n                 let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n-                lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name)).emit()\n+                let mut err = lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name));\n+                let hir = self.tcx.hir();\n+                if let Some(encl_scope) = hir.get_enclosing_scope(id) {\n+                    if let Some(encl_def_id) = hir.opt_local_def_id(encl_scope) {\n+                        if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id.to_def_id()) {\n+                            let traits_str = ign_traits\n+                                .iter()\n+                                .map(|t| format!(\"`{}`\", self.tcx.item_name(*t))).collect::<Vec<_>>()\n+                                .join(\" and \");\n+                            let plural_s = pluralize!(ign_traits.len());\n+                            let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n+                            let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n+                            let msg = format!(\"`{}` has {}derived impl{} for the trait{} {}, but {} ignored during dead code analysis\",\n+                                              self.tcx.item_name(encl_def_id.to_def_id()),\n+                                              article,\n+                                              plural_s,\n+                                              plural_s,\n+                                              traits_str,\n+                                              is_are);\n+                            if let Some(span) = self.tcx.def_ident_span(encl_def_id) {\n+                                err.span_note(span, &msg);\n+                            } else {\n+                                err.note(&msg);\n+                            }\n+                        }\n+                    }\n+                }\n+                err.emit();\n             });\n         }\n     }\n@@ -796,7 +836,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(());\n-    let live_symbols = find_live(tcx, access_levels);\n-    let mut visitor = DeadVisitor { tcx, live_symbols };\n+    let (live_symbols, ignored_derived_traits) = find_live(tcx, access_levels);\n+    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n     tcx.hir().walk_toplevel_module(&mut visitor);\n }"}, {"sha": "feaadd201b306b2304a91ae6b5f29f6af2a510ea", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "patch": "@@ -5,6 +5,11 @@ LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n+note: `Foo` has a derived impl for the trait `Debug`, but this is ignored during dead code analysis\n+  --> $DIR/derive-uninhabited-enum-38885.rs:11:6\n+   |\n+LL | enum Foo {\n+   |      ^^^\n \n warning: 1 warning emitted\n "}, {"sha": "d7cab0815b8f045a0390fe86620a4d35f6fcd888", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "patch": "@@ -15,18 +15,36 @@ error: field is never read: `f`\n    |\n LL | struct B { f: () }\n    |            ^^^^^\n+   |\n+note: `B` has a derived impl for the trait `Clone`, but this is ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:10:8\n+   |\n+LL | struct B { f: () }\n+   |        ^\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n    |            ^^^^^\n+   |\n+note: `C` has a derived impl for the trait `Debug`, but this is ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:14:8\n+   |\n+LL | struct C { f: () }\n+   |        ^\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n    |            ^^^^^\n+   |\n+note: `D` has derived impls for the traits `Clone` and `Debug`, but these are ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:18:8\n+   |\n+LL | struct D { f: () }\n+   |        ^\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:21:12"}, {"sha": "abac1f29ce24b5e353a9bb0323ec3717f5ef5a73", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "patch": "@@ -9,6 +9,11 @@ note: the lint level is defined here\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n+note: `Enum` has a derived impl for the trait `Clone`, but this is ignored during dead code analysis\n+  --> $DIR/unused-variant.rs:4:6\n+   |\n+LL | enum Enum {\n+   |      ^^^^\n \n error: aborting due to previous error\n "}]}