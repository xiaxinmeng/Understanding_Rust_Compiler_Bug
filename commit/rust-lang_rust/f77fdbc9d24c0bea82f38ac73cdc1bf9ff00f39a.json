{"sha": "f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2ZkYmM5ZDI0YzBiZWE4MmYzOGFjNzNjZGMxYmY5ZmYwMGYzOWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-09T18:30:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-14T22:05:18Z"}, "message": "brush up docs", "tree": {"sha": "ba754d6438dd50e2081a15723204be88a1d999fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba754d6438dd50e2081a15723204be88a1d999fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "html_url": "https://github.com/rust-lang/rust/commit/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e55aaeeed318a13b429d4b23c68569033bae0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e55aaeeed318a13b429d4b23c68569033bae0a3", "html_url": "https://github.com/rust-lang/rust/commit/7e55aaeeed318a13b429d4b23c68569033bae0a3"}], "stats": {"total": 279, "additions": 146, "deletions": 133}, "files": [{"sha": "f046ca35bab60e7f116d634075acc63ea89e3508", "filename": "ARCHITECTURE.md", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/ARCHITECTURE.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/ARCHITECTURE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ARCHITECTURE.md?ref=f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "patch": "@@ -0,0 +1,127 @@\n+# Architecture\n+\n+This document describes high-level architecture of rust-analyzer.\n+If you want to familiarize yourself with the code base, you are just\n+in the right place!\n+\n+\n+## Code generation\n+\n+Some of the components of this repository are generated through automatic\n+processes. These are outlined below:\n+\n+- `gen-kinds`: The kinds of tokens are reused in several places, so a generator\n+  is used. This process uses [tera] to generate, using data in [grammar.ron],\n+  the files:\n+  - [ast/generated.rs][ast generated] in `ra_syntax` based on\n+    [ast/generated.tera.rs][ast source]\n+  - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on\n+    [syntax_kinds/generated.tera.rs][syntax_kinds source]\n+\n+[tera]: https://tera.netlify.com/\n+[grammar.ron]: ./crates/ra_syntax/src/grammar.ron\n+[ast generated]: ./crates/ra_syntax/src/ast/generated.rs\n+[ast source]: ./crates/ra_syntax/src/ast/generated.tera.rs\n+[syntax_kinds generated]: ./crates/ra_syntax/src/syntax_kinds/generated.rs\n+[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs\n+\n+\n+## Code Walk-Through\n+\n+### `crates/ra_syntax`\n+\n+Rust syntax tree structure and parser. See\n+[RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design\n+notes.\n+\n+- [rowan](https://github.com/rust-analyzer/rowan) library is used for constructing syntax trees.\n+- `grammar` module is the actual parser. It is a hand-written recursive descent parsers, which\n+  produced a sequence of events like \"start node X\", \"finish not Y\". It works similarly to  [kotlin parser](https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java),\n+  which is a good source for inspiration for dealing with syntax errors and incomplete input. Original [libsyntax parser](https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs)\n+  is what we use for the definition of the Rust language.\n+- `parser_api/parser_impl` bridges the tree-agnostic parser from `grammar` with `rowan` trees.\n+  This is the thing that turns a flat list of events into a tree (see `EventProcessor`)\n+- `ast` a type safe API on top of the raw `rowan` tree.\n+- `grammar.ron` RON description of the grammar, which is used to\n+  generate `syntax_kinds` and `ast` modules, using `cargo gen-kinds` command.\n+- `algo`: generic tree algorithms, including `walk` for O(1) stack\n+  space tree traversal (this is cool) and `visit` for type-driven\n+  visiting the nodes (this is double plus cool, if you understand how\n+  `Visitor` works, you understand rust-analyzer).\n+\n+Test for ra_syntax are mostly data-driven: `tests/data/parser` contains a bunch of `.rs`\n+(test vectors) and `.txt` files with corresponding syntax trees. During testing, we check\n+`.rs` against `.txt`. If the `.txt` file is missing, it is created (this is how you update\n+tests). Additionally, running `cargo gen-tests` will walk the grammar module and collect\n+all `//test test_name` comments into files inside `tests/data` directory.\n+\n+See [#93](https://github.com/rust-analyzer/rust-analyzer/pull/93) for an example PR which\n+fixes a bug in the grammar.\n+\n+\n+### `crates/ra_editor`\n+\n+All IDE features which can be implemented if you only have access to a\n+single file. `ra_editor` could be used to enhance editing of Rust code\n+without the need to fiddle with build-systems, file\n+synchronization and such.\n+\n+In a sense, `ra_editor` is just a bunch of pure functions which take a\n+syntax tree as an input.\n+\n+The tests for `ra_editor` are `[cfg(test)] mod tests` unit-tests spread\n+throughout its modules.\n+\n+### `crates/salsa`\n+\n+An implementation of red-green incremental compilation algorithm from\n+rust compiler. It makes all rust-analyzer features on-demand. To be replaced\n+with `salsa-rs/salsa` soon.\n+\n+\n+### `crates/ra_analysis`\n+\n+A stateful library for analyzing many Rust files as they change.\n+`AnalysisHost` is a mutable entity (clojure's atom) which holds\n+current state, incorporates changes and handles out `Analysis` --- an\n+immutable consistent snapshot of world state at a point in time, which\n+actually powers analysis.\n+\n+\n+### `crates/ra_lsp_server`\n+\n+An LSP implementation which uses `ra_analysis` for managing state and\n+`ra_editor` for actually doing useful stuff.\n+\n+See [#79](https://github.com/rust-analyzer/rust-analyzer/pull/79/) as an\n+example of PR which adds a new feature to `ra_editor` and exposes it\n+to `ra_lsp_server`.\n+\n+\n+### `crates/cli`\n+\n+A CLI interface to rust-analyzer.\n+\n+### `crate/tools`\n+\n+Code-gen tasks, used to develop rust-analyzer:\n+\n+- `cargo gen-kinds` -- generate `ast` and `syntax_kinds`\n+- `cargo gen-tests` -- collect inline tests from grammar\n+- `cargo install-code` -- build and install VS Code extension and server\n+\n+### `editors/code`\n+\n+VS Code plugin\n+\n+\n+## Common workflows\n+\n+To try out VS Code extensions, run `cargo install-code`. To see logs from the language server,\n+set `RUST_LOG=info` env variable. To see all communication between the server and the client, use\n+`RUST_LOG=gen_lsp_server=debug` (will print quite a bit of stuff).\n+\n+To run tests, just `cargo test`.\n+\n+To work on VS Code extension, launch code inside `editors/code` and use `F5` to launch/debug.\n+"}, {"sha": "a2efc7afa5abc75409a520237ba52547d1838e1e", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 12, "deletions": 52, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "patch": "@@ -1,58 +1,18 @@\n The project is in its early stages: contributions are welcome and would be\n **very** helpful, but the project is not _yet_ optimized for contribution.\n Moreover, it is doubly experimental, so there's no guarantee that any work here\n-would reach production. That said, here are some areas where contributions would\n-be **especially** welcome:\n+would reach production.\n \n-- Designing internal data structures: RFC only outlines the constraints, it's an\n-  open question how to satisfy them in the optimal way. See `ARCHITECTURE.md`\n-  for current design questions.\n+To get an idea of how rust-analyzer works, take a look at the [ARCHITECTURE.md](./ARCHITECTURE.md)\n+document.\n \n-- Porting libsyntax parser to rust-analyzer: currently rust-analyzer parses only\n-  a tiny subset of Rust. This should be fixed by porting parsing functions from\n-  libsyntax one by one. Take a look at the [libsyntax parser] for \"what to port\"\n-  and at the [Kotlin parser] for \"how to port\".\n+Useful labels on the issue tracker:\n+  * [E-mentor](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor)\n+    issues have links to the code in question and tests,\n+  * [E-easy](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n+    [E-medium](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n+    [E-hard](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-hard),\n+    labels are *estimates* for how hard would be to write a fix.\n \n-- Writing validators: by design, rust-analyzer is very lax about the input. For\n-  example, the lexer happily accepts unclosed strings. The idea is that there\n-  should be a higher level visitor, which walks the syntax tree after parsing\n-  and produces all the warnings. Alas, there's no such visitor yet :( Would you\n-  like to write one? :)\n-\n-- Creating tests: it would be tremendously helpful to read each of libsyntax and\n-  rust-analyzer parser functions and crate a small separate test cases to cover\n-  each and every edge case.\n-\n-- Building stuff with rust-analyzer: it would be really cool to compile\n-  rust-analyzer to WASM and add _client side_ syntax validation to rust\n-  playground!\n-\n-Do take a look at the issue tracker.\n-\n-If you don't know where to start, or have _any_ questions or suggestions, don't\n-hesitate to chat at [Gitter]!\n-\n-# Code generation\n-\n-Some of the components of this repository are generated through automatic\n-processes. These are outlined below:\n-\n-- `gen-kinds`: The kinds of tokens are reused in several places, so a generator\n-  is used. This process uses [tera] to generate, using data in [grammar.ron],\n-  the files:\n-  - [ast/generated.rs][ast generated] in `ra_syntax` based on\n-    [ast/generated.tera.rs][ast source]\n-  - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on\n-    [syntax_kinds/generated.tera.rs][syntax_kinds source]\n-\n-[libsyntax parser]:\n-  https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs\n-[kotlin parser]:\n-  https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java\n-[gitter]: https://gitter.im/libsyntax2/Lobby\n-[tera]: https://tera.netlify.com/\n-[grammar.ron]: ./crates/ra_syntax/src/grammar.ron\n-[ast generated]: ./crates/ra_syntax/src/ast/generated.rs\n-[ast source]: ./crates/ra_syntax/src/ast/generated.tera.rs\n-[syntax_kinds generated]: ./crates/ra_syntax/src/syntax_kinds/generated.rs\n-[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs\n+There's no formal PR check list: everything that passes CI (we use [bors](https://bors.tech/)) is valid,\n+but it's a good idea to write nice commit messages, test code thoroughly, maintain consistent style, etc."}, {"sha": "1c6facbbd5f2fe43d3b0d5a26a2fead024e37981", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 81, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f77fdbc9d24c0bea82f38ac73cdc1bf9ff00f39a", "patch": "@@ -61,106 +61,32 @@ fold:\n * to quickly bootstrap usable and useful language server: solution\n   that covers 80% of Rust code will be useful for IDEs, and will be\n   vastly simpler than 100% solution.\n-  \n+\n * to understand how the consumer-side of compiler API should look like\n   (especially it's on-demand aspects). If you have\n   `get_expression_type` function, you can write a ton of purely-IDE\n   features on top of it, even if the function is only partially\n   correct. Plugin in the precise function afterwards should just make\n   IDE features more reliable.\n-  \n+\n The long term plan is to merge with the mainline rustc compiler,\n probably around the HIR boundary? That is, use rust analyzer for\n parsing, macro expansion and related bits of name resolution, but\n leave the rest (including type inference and trait selection) to the\n existing rustc.\n \n-## Code Walk-Through\n-\n-### `crates/ra_syntax`\n-\n-Rust syntax tree structure and parser. See\n-[RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design\n-notes.\n-\n-- `yellow`, red/green syntax tree, heavily inspired [by this](https://github.com/apple/swift/tree/ab68f0d4cbf99cdfa672f8ffe18e433fddc8b371/lib/Syntax)\n-- `grammar`, the actual parser\n-- `parser_api/parser_impl` bridges the tree-agnostic parser from `grammar` with `yellow` trees\n-- `grammar.ron` RON description of the grammar, which is used to\n-  generate `syntax_kinds` and `ast` modules.\n-- `algo`: generic tree algorithms, including `walk` for O(1) stack\n-  space tree traversal (this is cool) and `visit` for type-driven\n-  visiting the nodes (this is double plus cool, if you understand how\n-  `Visitor` works, you understand rust-analyzer).\n-\n-\n-### `crates/ra_editor`\n-\n-All IDE features which can be implemented if you only have access to a\n-single file. `ra_editor` could be used to enhance editing of Rust code\n-without the need to fiddle with build-systems, file\n-synchronization and such.\n-\n-In a sense, `ra_editor` is just a bunch of pure functions which take a\n-syntax tree as an input.\n-\n-### `crates/salsa`\n-\n-An implementation of red-green incremental compilation algorithm from\n-rust compiler. It makes all rust-analyzer features on-demand.\n-\n-\n-### `crates/ra_analysis`\n-\n-A stateful library for analyzing many Rust files as they change.\n-`AnalysisHost` is a mutable entity (clojure's atom) which holds\n-current state, incorporates changes and handles out `Analysis` --- an\n-immutable consistent snapshot of world state at a point in time, which\n-actually powers analysis.\n-\n-\n-### `crates/ra_lsp_server`\n-\n-An LSP implementation which uses `ra_analysis` for managing state and\n-`ra_editor` for actually doing useful stuff.\n-\n-\n-### `crates/cli`\n-\n-A CLI interface to libsyntax\n-\n-### `crate/tools`\n-\n-Code-gen tasks, used to develop rust-analyzer:\n-\n-- `cargo gen-kinds` -- generate `ast` and `syntax_kinds`\n-- `cargo gen-tests` -- collect inline tests from grammar\n-- `cargo install-code` -- build and install VS Code extension and server\n-\n-### `editors/code`\n-\n-VS Code plugin\n-\n-\n-## Performance\n-\n-Non-incremental, but seems pretty fast:\n-\n-```\n-$ cargo build --release --package ra_cli\n-$ wc -l ~/projects/rust/src/libsyntax/parse/parser.rs\n-7546 /home/matklad/projects/rust/src/libsyntax/parse/parser.rs\n-$ ./target/release/ra_cli parse < ~/projects/rust/src/libsyntax/parse/parser.rs --no-dump  > /dev/null\n-parsing: 21.067065ms\n-```\n-\n ## Getting in touch\n \n @matklad can be found at Rust\n [discord](https://discordapp.com/invite/rust-lang), in\n #ides-and-editors.\n \n \n+## Contributing\n+\n+See [CONTRIBUTING.md](./CONTRIBUTING.md) and [ARCHITECTURE.md](./ARCHITECTURE.md)\n+\n+\n ## License\n \n Rust analyzer is primarily distributed under the terms of both the MIT"}]}