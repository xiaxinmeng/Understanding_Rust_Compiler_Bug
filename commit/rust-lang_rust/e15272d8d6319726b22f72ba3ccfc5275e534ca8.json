{"sha": "e15272d8d6319726b22f72ba3ccfc5275e534ca8", "node_id": "C_kwDOAAsO6NoAKGUxNTI3MmQ4ZDYzMTk3MjZiMjJmNzJiYTNjY2ZjNTI3NWU1MzRjYTg", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-14T19:22:03Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T10:23:01Z"}, "message": "Add tidy check to deny merge commits\n\nThis will prevent users with the pre-push hook from pushing a merge\ncommit.\n\nExceptions are added for subtree updates. These exceptions are a little\nhacky and may be non-exhaustive but can be extended in the future.", "tree": {"sha": "27b8ed99fc2de15a81f444e3fc103a7f3d493731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b8ed99fc2de15a81f444e3fc103a7f3d493731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15272d8d6319726b22f72ba3ccfc5275e534ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15272d8d6319726b22f72ba3ccfc5275e534ca8", "html_url": "https://github.com/rust-lang/rust/commit/e15272d8d6319726b22f72ba3ccfc5275e534ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15272d8d6319726b22f72ba3ccfc5275e534ca8/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "html_url": "https://github.com/rust-lang/rust/commit/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "186cd9bb11b9af5c467cc694f8e527f71962eb72", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=e15272d8d6319726b22f72ba3ccfc5275e534ca8", "patch": "@@ -48,6 +48,7 @@ pub mod errors;\n pub mod extdeps;\n pub mod features;\n pub mod mir_opt_tests;\n+pub mod no_merge;\n pub mod pal;\n pub mod primitive_docs;\n pub mod style;"}, {"sha": "65f0fe9743f80b5247111c8a78a7a86ce47f6bc8", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=e15272d8d6319726b22f72ba3ccfc5275e534ca8", "patch": "@@ -107,6 +107,8 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n+        check!(no_merge, ());\n+\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "445004e539aae6e5591885675c039afdf9391e30", "filename": "src/tools/tidy/src/no_merge.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15272d8d6319726b22f72ba3ccfc5275e534ca8/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fno_merge.rs?ref=e15272d8d6319726b22f72ba3ccfc5275e534ca8", "patch": "@@ -0,0 +1,128 @@\n+//! This check makes sure that no accidental merge commits are introduced to the repository.\n+//! It forbids all merge commits that are not caused by rollups/bors or subtree syncs.\n+\n+use std::process::Command;\n+\n+macro_rules! try_unwrap_in_ci {\n+    ($expr:expr) => {\n+        match $expr {\n+            Ok(value) => value,\n+            Err(err) if CiEnv::is_ci() => {\n+                panic!(\"Encountered error while testing Git status: {:?}\", err)\n+            }\n+            Err(_) => return,\n+        }\n+    };\n+}\n+\n+pub fn check(_: (), bad: &mut bool) {\n+    let remote = try_unwrap_in_ci!(get_rust_lang_rust_remote());\n+    let merge_commits = try_unwrap_in_ci!(find_merge_commits(&remote));\n+\n+    let mut bad_merge_commits = merge_commits.lines().filter(|commit| {\n+        !(\n+            // Bors is the ruler of merge commits.\n+            commit.starts_with(\"Auto merge of\") || commit.starts_with(\"Rollup merge of\")\n+        )\n+    });\n+\n+    if let Some(merge) = bad_merge_commits.next() {\n+        tidy_error!(\n+            bad,\n+            \"found a merge commit in the history: `{merge}`.\n+To resolve the issue, see this: https://rustc-dev-guide.rust-lang.org/git.html#i-made-a-merge-commit-by-accident.\n+If you're doing a subtree sync, add your tool to the list in the code that emitted this error.\"\n+        );\n+    }\n+}\n+\n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+fn get_rust_lang_rust_remote() -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"failed to execute git config command: {}\",\n+            String::from_utf8_lossy(&output.stderr)\n+        ));\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}\n+\n+/// Runs `git log --merges --format=%s $REMOTE/master..HEAD` and returns all commits\n+fn find_merge_commits(remote: &str) -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\n+        \"log\",\n+        \"--merges\",\n+        \"--format=%s\",\n+        &format!(\"{remote}/master..HEAD\"),\n+        // Ignore subtree syncs. Add your new subtrees here.\n+        \":!src/tools/miri\",\n+        \":!src/tools/rust-analyzer\",\n+        \":!compiler/rustc_smir\",\n+        \":!library/portable-simd\",\n+        \":!compiler/rustc_codegen_gcc\",\n+        \":!src/tools/rustfmt\",\n+        \":!compiler/rustc_codegen_cranelift\",\n+        \":!src/tools/clippy\",\n+    ]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"failed to execute git log command: {}\",\n+            String::from_utf8_lossy(&output.stderr)\n+        ));\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    Ok(stdout)\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum CiEnv {\n+    /// Not a CI environment.\n+    None,\n+    /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n+    AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n+}\n+\n+impl CiEnv {\n+    /// Obtains the current CI environment.\n+    pub fn current() -> CiEnv {\n+        if std::env::var(\"TF_BUILD\").map_or(false, |e| e == \"True\") {\n+            CiEnv::AzurePipelines\n+        } else if std::env::var(\"GITHUB_ACTIONS\").map_or(false, |e| e == \"true\") {\n+            CiEnv::GitHubActions\n+        } else {\n+            CiEnv::None\n+        }\n+    }\n+\n+    pub fn is_ci() -> bool {\n+        Self::current() != CiEnv::None\n+    }\n+}"}]}