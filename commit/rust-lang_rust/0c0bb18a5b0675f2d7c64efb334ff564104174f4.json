{"sha": "0c0bb18a5b0675f2d7c64efb334ff564104174f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMGJiMThhNWIwNjc1ZjJkN2M2NGVmYjMzNGZmNTY0MTA0MTc0ZjQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-17T19:51:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-17T19:51:20Z"}, "message": "Rollup merge of #50553 - clarcharr:option_xor, r=sfackler\n\nAdd Option::xor method\n\nImplements the method requested in #50512.", "tree": {"sha": "d61626a15519130c94fcae746888c187a1e809c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d61626a15519130c94fcae746888c187a1e809c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0bb18a5b0675f2d7c64efb334ff564104174f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa/d04CRBK7hj4Ov3rIwAAdHIIAJHi+D1rqCXzq49Bk8L4OTe8\nySxFHHj80aF6/uZpGw99e5IUJUE2Jbq1cIrWD0hzhkzdFifOHDJp6oaQM0qEsBOq\nCM9reu0L+dFASQ5mM0NbbvedVyAgM8jp5ozbc4KI1ngDaPgHvyUsn39elA2e2Yzf\nyltga0qhHZcizZzBrl8g5ncLAdhHB7iZd4mj+2UFIc7GhHadGvITrT++tPv3pVKu\ndWIOg012yAkAjQErItePDSYjV2K3tamF5SkZJf2M7Zarv5dJQTWRygCYMC7tSEZW\nin3vLQF6A3G0k0yEpdBRP784wPTZijw4mTjuaUfTRWT+ZEhMkVltUdQV4u6PldE=\n=9nLW\n-----END PGP SIGNATURE-----\n", "payload": "tree d61626a15519130c94fcae746888c187a1e809c9\nparent 6e95b8715cc7eec3bb987a70698eb7bb1d93a67f\nparent 8ab2d15f6753054797c88f07028e4802c43b70ab\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526586680 -0600\ncommitter GitHub <noreply@github.com> 1526586680 -0600\n\nRollup merge of #50553 - clarcharr:option_xor, r=sfackler\n\nAdd Option::xor method\n\nImplements the method requested in #50512.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0bb18a5b0675f2d7c64efb334ff564104174f4", "html_url": "https://github.com/rust-lang/rust/commit/0c0bb18a5b0675f2d7c64efb334ff564104174f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0bb18a5b0675f2d7c64efb334ff564104174f4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e95b8715cc7eec3bb987a70698eb7bb1d93a67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e95b8715cc7eec3bb987a70698eb7bb1d93a67f", "html_url": "https://github.com/rust-lang/rust/commit/6e95b8715cc7eec3bb987a70698eb7bb1d93a67f"}, {"sha": "8ab2d15f6753054797c88f07028e4802c43b70ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab2d15f6753054797c88f07028e4802c43b70ab", "html_url": "https://github.com/rust-lang/rust/commit/8ab2d15f6753054797c88f07028e4802c43b70ab"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "28f37f72d6f9df33172b5eced84265de40414126", "filename": "src/libcore/option.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c0bb18a5b0675f2d7c64efb334ff564104174f4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0bb18a5b0675f2d7c64efb334ff564104174f4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0c0bb18a5b0675f2d7c64efb334ff564104174f4", "patch": "@@ -705,6 +705,42 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_xor)]\n+    ///\n+    /// let x = Some(2);\n+    /// let y: Option<u32> = None;\n+    /// assert_eq!(x.xor(y), Some(2));\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// let y = Some(2);\n+    /// assert_eq!(x.xor(y), Some(2));\n+    ///\n+    /// let x = Some(2);\n+    /// let y = Some(2);\n+    /// assert_eq!(x.xor(y), None);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// let y: Option<u32> = None;\n+    /// assert_eq!(x.xor(y), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_xor\", issue = \"50512\")]\n+    pub fn xor(self, optb: Option<T>) -> Option<T> {\n+        match (self, optb) {\n+            (Some(a), None) => Some(a),\n+            (None, Some(b)) => Some(b),\n+            _ => None,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////"}]}