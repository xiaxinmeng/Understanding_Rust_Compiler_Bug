{"sha": "9596dc2a47861d73996a550cba7caf55b2737c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTZkYzJhNDc4NjFkNzM5OTZhNTUwY2JhN2NhZjU1YjI3MzdjMTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T00:47:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:32:34Z"}, "message": "parse_labeled_expr: simplify", "tree": {"sha": "84376a02fcdefcb5bf8fc0a75c11f5bcee8721b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84376a02fcdefcb5bf8fc0a75c11f5bcee8721b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9596dc2a47861d73996a550cba7caf55b2737c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9596dc2a47861d73996a550cba7caf55b2737c17", "html_url": "https://github.com/rust-lang/rust/commit/9596dc2a47861d73996a550cba7caf55b2737c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9596dc2a47861d73996a550cba7caf55b2737c17/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbade652ed8ebac70f903e01f51cd92c4e4302c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbade652ed8ebac70f903e01f51cd92c4e4302c", "html_url": "https://github.com/rust-lang/rust/commit/3dbade652ed8ebac70f903e01f51cd92c4e4302c"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "e0e6fd5eed6b78a8a61add4db962ba5db9e1d0f2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9596dc2a47861d73996a550cba7caf55b2737c17/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596dc2a47861d73996a550cba7caf55b2737c17/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=9596dc2a47861d73996a550cba7caf55b2737c17", "patch": "@@ -1069,24 +1069,22 @@ impl<'a> Parser<'a> {\n \n     fn parse_labeled_expr(&mut self, label: Label, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = label.ident.span;\n+        let label = Some(label);\n         self.expect(&token::Colon)?;\n         if self.eat_keyword(kw::While) {\n-            return self.parse_while_expr(Some(label), lo, attrs);\n-        }\n-        if self.eat_keyword(kw::For) {\n-            return self.parse_for_expr(Some(label), lo, attrs);\n-        }\n-        if self.eat_keyword(kw::Loop) {\n-            return self.parse_loop_expr(Some(label), lo, attrs);\n-        }\n-        if self.token == token::OpenDelim(token::Brace) {\n-            return self.parse_block_expr(Some(label), lo, BlockCheckMode::Default, attrs);\n+            self.parse_while_expr(label, lo, attrs)\n+        } else if self.eat_keyword(kw::For) {\n+            self.parse_for_expr(label, lo, attrs)\n+        } else if self.eat_keyword(kw::Loop) {\n+            self.parse_loop_expr(label, lo, attrs)\n+        } else if self.check(&token::OpenDelim(token::Brace)) {\n+            self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n+        } else {\n+            let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n+            self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n+            // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n+            self.parse_expr()\n         }\n-\n-        let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n-        self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n-        // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n-        self.parse_expr()\n     }\n \n     /// Recover on the syntax `do catch { ... }` suggesting `try { ... }` instead."}]}