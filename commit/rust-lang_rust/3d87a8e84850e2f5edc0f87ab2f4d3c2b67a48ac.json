{"sha": "3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac", "node_id": "C_kwDOAAsO6NoAKDNkODdhOGU4NDg1MGUyZjVlZGMwZjg3YWIyZjRkM2MyYjY3YTQ4YWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-17T18:19:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T14:28:14Z"}, "message": "Assemble object bound candidates", "tree": {"sha": "888d76a3ac4d82c8e859f6e8019c0da010c81ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888d76a3ac4d82c8e859f6e8019c0da010c81ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac", "html_url": "https://github.com/rust-lang/rust/commit/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99b273d577914ee0c9073e2e6144aee17354717", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99b273d577914ee0c9073e2e6144aee17354717", "html_url": "https://github.com/rust-lang/rust/commit/f99b273d577914ee0c9073e2e6144aee17354717"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "0a82c14e226fd59055043b56cea1b3cb546d26d0", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=3d87a8e84850e2f5edc0f87ab2f4d3c2b67a48ac", "patch": "@@ -4,6 +4,7 @@ use super::infcx_ext::InferCtxtExt;\n use super::{CanonicalResponse, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n+use rustc_infer::traits::util::elaborate_predicates;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::fmt::Debug;\n@@ -119,6 +120,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n         self.assemble_alias_bound_candidates(goal, &mut candidates);\n \n+        self.assemble_object_bound_candidates(goal, &mut candidates);\n+\n         candidates\n     }\n \n@@ -272,4 +275,53 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n         }\n     }\n+\n+    fn assemble_object_bound_candidates<G: GoalKind<'tcx>>(\n+        &mut self,\n+        goal: Goal<'tcx, G>,\n+        candidates: &mut Vec<Candidate<'tcx>>,\n+    ) {\n+        let self_ty = goal.predicate.self_ty();\n+        let bounds = match *self_ty.kind() {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Adt(_, _)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Alias(..)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Param(_)\n+            | ty::Placeholder(..)\n+            | ty::Infer(_)\n+            | ty::Error(_) => return,\n+            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Dynamic(bounds, ..) => bounds,\n+        };\n+\n+        let tcx = self.tcx();\n+        for assumption in\n+            elaborate_predicates(tcx, bounds.iter().map(|bound| bound.with_self_ty(tcx, self_ty)))\n+        {\n+            match G::consider_assumption(self, goal, assumption.predicate)\n+            {\n+                Ok(result) => {\n+                    candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result })\n+                }\n+                Err(NoSolution) => (),\n+            }\n+        }\n+    }\n }"}]}