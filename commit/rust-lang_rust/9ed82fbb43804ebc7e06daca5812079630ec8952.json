{"sha": "9ed82fbb43804ebc7e06daca5812079630ec8952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDgyZmJiNDM4MDRlYmM3ZTA2ZGFjYTU4MTIwNzk2MzBlYzg5NTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-22T20:49:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-22T20:49:34Z"}, "message": "auto merge of #7943 : Dretch/rust/vec-slice-from-to, r=huonw", "tree": {"sha": "44fd77dc33a7ca6a876b3e3f2056717684f6ca79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44fd77dc33a7ca6a876b3e3f2056717684f6ca79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed82fbb43804ebc7e06daca5812079630ec8952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed82fbb43804ebc7e06daca5812079630ec8952", "html_url": "https://github.com/rust-lang/rust/commit/9ed82fbb43804ebc7e06daca5812079630ec8952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed82fbb43804ebc7e06daca5812079630ec8952/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7d86f9a86f0da23579eef50ba1275d36e6c0bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7d86f9a86f0da23579eef50ba1275d36e6c0bc", "html_url": "https://github.com/rust-lang/rust/commit/2f7d86f9a86f0da23579eef50ba1275d36e6c0bc"}, {"sha": "30f13e661a8dc2281b4c57484629f03c096f24f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f13e661a8dc2281b4c57484629f03c096f24f1", "html_url": "https://github.com/rust-lang/rust/commit/30f13e661a8dc2281b4c57484629f03c096f24f1"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "baeb87e51b9107dcf297244c8cbda60c10528a54", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9ed82fbb43804ebc7e06daca5812079630ec8952/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed82fbb43804ebc7e06daca5812079630ec8952/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9ed82fbb43804ebc7e06daca5812079630ec8952", "patch": "@@ -689,6 +689,8 @@ impl<'self,T:Clone> CopyableVector<T> for &'self [T] {\n #[allow(missing_doc)]\n pub trait ImmutableVector<'self, T> {\n     fn slice(&self, start: uint, end: uint) -> &'self [T];\n+    fn slice_from(&self, start: uint) -> &'self [T];\n+    fn slice_to(&self, end: uint) -> &'self [T];\n     fn iter(self) -> VecIterator<'self, T>;\n     fn rev_iter(self) -> VecRevIterator<'self, T>;\n     fn split_iter(self, pred: &'self fn(&T) -> bool) -> VecSplitIterator<'self, T>;\n@@ -720,11 +722,17 @@ pub trait ImmutableVector<'self, T> {\n \n /// Extension methods for vectors\n impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n-    /// Return a slice that points into another slice.\n+\n+    /**\n+     * Returns a slice of self between `start` and `end`.\n+     *\n+     * Fails when `start` or `end` point outside the bounds of self,\n+     * or when `start` > `end`.\n+     */\n     #[inline]\n     fn slice(&self, start: uint, end: uint) -> &'self [T] {\n-    assert!(start <= end);\n-    assert!(end <= self.len());\n+        assert!(start <= end);\n+        assert!(end <= self.len());\n         do self.as_imm_buf |p, _len| {\n             unsafe {\n                 transmute((ptr::offset(p, start),\n@@ -733,6 +741,26 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         }\n     }\n \n+    /**\n+     * Returns a slice of self from `start` to the end of the vec.\n+     *\n+     * Fails when `start` points outside the bounds of self.\n+     */\n+    #[inline]\n+    fn slice_from(&self, start: uint) -> &'self [T] {\n+        self.slice(start, self.len())\n+    }\n+\n+    /**\n+     * Returns a slice of self from the start of the vec to `end`.\n+     *\n+     * Fails when `end` points outside the bounds of self.\n+     */\n+    #[inline]\n+    fn slice_to(&self, end: uint) -> &'self [T] {\n+        self.slice(0, end)\n+    }\n+\n     #[inline]\n     fn iter(self) -> VecIterator<'self, T> {\n         unsafe {\n@@ -2453,6 +2481,22 @@ mod tests {\n         assert_eq!(v_d[4], 6);\n     }\n \n+    #[test]\n+    fn test_slice_from() {\n+        let vec = &[1, 2, 3, 4];\n+        assert_eq!(vec.slice_from(0), vec);\n+        assert_eq!(vec.slice_from(2), &[3, 4]);\n+        assert_eq!(vec.slice_from(4), &[]);\n+    }\n+\n+    #[test]\n+    fn test_slice_to() {\n+        let vec = &[1, 2, 3, 4];\n+        assert_eq!(vec.slice_to(4), vec);\n+        assert_eq!(vec.slice_to(2), &[1, 2]);\n+        assert_eq!(vec.slice_to(0), &[]);\n+    }\n+\n     #[test]\n     fn test_pop() {\n         // Test on-heap pop."}]}