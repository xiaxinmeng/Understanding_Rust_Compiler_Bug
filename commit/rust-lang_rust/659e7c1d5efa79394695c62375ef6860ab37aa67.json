{"sha": "659e7c1d5efa79394695c62375ef6860ab37aa67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWU3YzFkNWVmYTc5Mzk0Njk1YzYyMzc1ZWY2ODYwYWIzN2FhNjc=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-19T23:04:21Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-26T22:57:55Z"}, "message": "Don't suggest using a for loop if the iterator is used in the loop body\n\nDue to https://github.com/rust-lang/rust/issues/8372, we have to use while-let\nin these cases.", "tree": {"sha": "7614c74be8fa4cc52dc670148427197cae81873f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7614c74be8fa4cc52dc670148427197cae81873f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659e7c1d5efa79394695c62375ef6860ab37aa67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659e7c1d5efa79394695c62375ef6860ab37aa67", "html_url": "https://github.com/rust-lang/rust/commit/659e7c1d5efa79394695c62375ef6860ab37aa67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659e7c1d5efa79394695c62375ef6860ab37aa67/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6163fce6120b6bde902d1fd8f862d80e67c0721", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6163fce6120b6bde902d1fd8f862d80e67c0721", "html_url": "https://github.com/rust-lang/rust/commit/f6163fce6120b6bde902d1fd8f862d80e67c0721"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "04a2350db6bf1d308893e375ceddd0b04d2cecc8", "filename": "src/loops.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/659e7c1d5efa79394695c62375ef6860ab37aa67/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659e7c1d5efa79394695c62375ef6860ab37aa67/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=659e7c1d5efa79394695c62375ef6860ab37aa67", "patch": "@@ -232,11 +232,14 @@ impl LateLintPass for LoopsPass {\n             }\n         }\n         if let ExprMatch(ref expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n+            let body = &arms[0].body;\n             let pat = &arms[0].pats[0].node;\n-            if let (&PatEnum(ref path, _), &ExprMethodCall(method_name, _, _)) = (pat, &expr.node) {\n+            if let (&PatEnum(ref path, _), &ExprMethodCall(method_name, _, ref args)) = (pat, &expr.node) {\n+                let iterator_def_id = var_def_id(cx, &args[0]);\n                 if method_name.node.as_str() == \"next\" &&\n                         match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) &&\n-                        path.segments.last().unwrap().identifier.name.as_str() == \"Some\" {\n+                        path.segments.last().unwrap().identifier.name.as_str() == \"Some\" &&\n+                        !var_used(body, iterator_def_id, cx) {\n                     span_lint(cx, WHILE_LET_ON_ITERATOR, expr.span,\n                               \"this loop could be written as a `for` loop\");\n                 }\n@@ -314,6 +317,32 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n     }\n }\n \n+fn var_used(expr: &Expr, def_id: Option<NodeId>, cx: &LateContext) -> bool {\n+    match def_id {\n+        None => false,\n+        Some(def_id) => {\n+            let mut visitor = VarUsedVisitor{ def_id: def_id, found: false, cx: cx };\n+            walk_expr(&mut visitor, expr);\n+            visitor.found\n+        }\n+    }\n+}\n+\n+struct VarUsedVisitor<'v, 't: 'v> {\n+    cx: &'v LateContext<'v, 't>,\n+    def_id: NodeId,\n+    found: bool\n+}\n+\n+impl<'v, 't> Visitor<'v> for VarUsedVisitor<'v, 't> {\n+    fn visit_expr(&mut self, expr: &'v Expr) {\n+        if Some(self.def_id) == var_def_id(self.cx, expr) {\n+            self.found = true;\n+        }\n+        walk_expr(self, expr);\n+    }\n+}\n+\n /// Return true if the type of expr is one that provides IntoIterator impls\n /// for &T and &mut T, such as Vec.\n fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {"}, {"sha": "ae2f6995061a6ac98a6816cd86d05511ae488004", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/659e7c1d5efa79394695c62375ef6860ab37aa67/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659e7c1d5efa79394695c62375ef6860ab37aa67/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=659e7c1d5efa79394695c62375ef6860ab37aa67", "patch": "@@ -70,6 +70,16 @@ fn main() {\n     if let Some(x) = (1..20).next() { // also fine\n         println!(\"{}\", x)\n     }\n+\n+    // the following shouldn't warn because it can't be written with a for loop\n+    let mut iter = 1u32..20;\n+    while let Some(x) = iter.next() {\n+        println!(\"next: {:?}\", iter.next())\n+    }\n+\n+    // but this should:\n+    let mut iter2 = 1u32..20;\n+    while let Some(x) = iter2.next() { } //~ERROR this loop could be written as a `for` loop\n }\n \n // regression test (#360)"}]}