{"sha": "4b4ff2cf8b5f888581d41b3b2f10dacf7d716478", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNGZmMmNmOGI1Zjg4ODU4MWQ0MWIzYjJmMTBkYWNmN2Q3MTY0Nzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:20:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `DynamicFailureHandler::finished`", "tree": {"sha": "c9218591f486546f4b76a4e5680be7730168e4dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9218591f486546f4b76a4e5680be7730168e4dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478", "html_url": "https://github.com/rust-lang/rust/commit/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "html_url": "https://github.com/rust-lang/rust/commit/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "47bcfe1ac72bae3b88e1b3833cee293c707ac4cb", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4ff2cf8b5f888581d41b3b2f10dacf7d716478/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=4b4ff2cf8b5f888581d41b3b2f10dacf7d716478", "patch": "@@ -219,6 +219,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr, vec_map_to_str};\n \n+use std::cell::Cell;\n use std::hashmap::HashMap;\n use std::ptr;\n use std::vec;\n@@ -1188,19 +1189,19 @@ struct DynamicFailureHandler {\n     bcx: @Block,\n     sp: Span,\n     msg: @str,\n-    finished: @mut Option<BasicBlockRef>,\n+    finished: @Cell<Option<BasicBlockRef>>,\n }\n \n impl CustomFailureHandler for DynamicFailureHandler {\n     fn handle_fail(&self) -> BasicBlockRef {\n-        match *self.finished {\n+        match self.finished.get() {\n             Some(bb) => return bb,\n             _ => (),\n         }\n \n         let fail_cx = sub_block(self.bcx, \"case_fallthrough\");\n         controlflow::trans_fail(fail_cx, Some(self.sp), self.msg);\n-        *self.finished = Some(fail_cx.llbb);\n+        self.finished.set(Some(fail_cx.llbb));\n         fail_cx.llbb\n     }\n }\n@@ -1911,7 +1912,7 @@ fn trans_match_inner(scope_cx: @Block,\n     let chk = {\n         if ty::type_is_empty(tcx, t) {\n             // Special case for empty types\n-            let fail_cx = @mut None;\n+            let fail_cx = @Cell::new(None);\n             let fail_handler = @DynamicFailureHandler {\n                 bcx: scope_cx,\n                 sp: discr_expr.span,"}]}