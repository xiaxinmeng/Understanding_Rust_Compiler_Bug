{"sha": "9e346646e93cc243567e27bb0f4e8716d56ad1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMzQ2NjQ2ZTkzY2MyNDM1NjdlMjdiYjBmNGU4NzE2ZDU2YWQxZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T15:52:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T15:52:14Z"}, "message": "Auto merge of #66225 - Centril:rollup-it0t5tk, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #65785 (Transition future compat lints to {ERROR, DENY} - Take 2)\n - #66007 (Remove \"here\" from \"expected one of X here\")\n - #66043 (rename Memory::get methods to get_raw to indicate their unchecked nature)\n - #66154 (miri: Rename to_{u,i}size to to_machine_{u,i}size)\n - #66188 (`MethodSig` -> `FnSig` & Use it in `ItemKind::Fn`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "32241bdad56a558bbfa93093ba4cc65797df3498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32241bdad56a558bbfa93093ba4cc65797df3498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e346646e93cc243567e27bb0f4e8716d56ad1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e346646e93cc243567e27bb0f4e8716d56ad1f1", "html_url": "https://github.com/rust-lang/rust/commit/9e346646e93cc243567e27bb0f4e8716d56ad1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e346646e93cc243567e27bb0f4e8716d56ad1f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "html_url": "https://github.com/rust-lang/rust/commit/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc"}, {"sha": "65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3", "html_url": "https://github.com/rust-lang/rust/commit/65c77bc09ab38b3d9377168d673ed7b0a2c1e0c3"}], "stats": {"total": 1842, "additions": 643, "deletions": 1199}, "files": [{"sha": "dc5a9e44acfa2670b3a5869e7accbe9d82b8ce50", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 27, "deletions": 64, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -45,53 +45,6 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n \n-## legacy-constructor-visibility\n-\n-[RFC 1506](https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md) modified some\n-visibility rules, and changed the visibility of struct constructors. Some\n-example code that triggers this lint:\n-\n-```rust,ignore\n-mod m {\n-    pub struct S(u8);\n-    \n-    fn f() {\n-        // this is trying to use S from the 'use' line, but because the `u8` is\n-        // not pub, it is private\n-        ::S;\n-    }\n-}\n-\n-use m::S;\n-```\n-\n-This will produce:\n-\n-```text\n-error: private struct constructors are not usable through re-exports in outer modules\n- --> src/main.rs:5:9\n-  |\n-5 |         ::S;\n-  |         ^^^\n-  |\n-  = note: `#[deny(legacy_constructor_visibility)]` on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n-```\n-\n-\n-## legacy-directory-ownership\n-\n-The legacy_directory_ownership warning is issued when\n-\n-* There is a non-inline module with a `#[path]` attribute (e.g. `#[path = \"foo.rs\"] mod bar;`),\n-* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n-* The module's file contains a non-inline child module without a `#[path]` attribute.\n-\n-The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n-it into its own directory if appropriate.\n-\n-\n ## missing-fragment-specifier\n \n The missing_fragment_specifier warning is issued when an unused pattern in a\n@@ -169,39 +122,49 @@ error: literal out of range for u8\n   |\n ```\n \n-## parenthesized-params-in-types-and-modules\n+## patterns-in-fns-without-body\n \n-This lint detects incorrect parentheses. Some example code that triggers this\n-lint:\n+This lint detects patterns in functions without body were that were\n+previously erroneously allowed. Some example code that triggers this lint:\n \n-```rust,ignore\n-let x = 5 as usize();\n+```rust,compile_fail\n+trait Trait {\n+    fn foo(mut arg: u8);\n+}\n ```\n \n This will produce:\n \n ```text\n-error: parenthesized parameters may only be used with a trait\n- --> src/main.rs:2:21\n+warning: patterns aren't allowed in methods without bodies\n+ --> src/main.rs:2:12\n   |\n-2 |   let x = 5 as usize();\n-  |                     ^^\n+2 |     fn foo(mut arg: u8);\n+  |            ^^^^^^^\n   |\n-  = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n+  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n ```\n \n-To fix it, remove the `()`s.\n+To fix this, remove the pattern; it can be used in the implementation without\n+being used in the definition. That is:\n \n-## pub-use-of-private-extern-crate\n+```rust\n+trait Trait {\n+    fn foo(arg: u8);\n+}\n \n-This lint detects a specific situation of re-exporting a private `extern crate`;\n+impl Trait for i32 {\n+    fn foo(mut arg: u8) {\n+\n+    }\n+}\n+```\n \n-## safe-extern-statics\n+## pub-use-of-private-extern-crate\n \n-In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n-to be accessed in safe code. This lint now catches and denies this kind of code.\n+This lint detects a specific situation of re-exporting a private `extern crate`;\n \n ## unknown-crate-types\n "}, {"sha": "77642a850fae847c6c517ed2221055591ee91afe", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -307,46 +307,6 @@ warning: path statement with no effect\n   |\n ```\n \n-## patterns-in-fns-without-body\n-\n-This lint detects patterns in functions without body were that were\n-previously erroneously allowed. Some example code that triggers this lint:\n-\n-```rust\n-trait Trait {\n-    fn foo(mut arg: u8);\n-}\n-```\n-\n-This will produce:\n-\n-```text\n-warning: patterns aren't allowed in methods without bodies\n- --> src/main.rs:2:12\n-  |\n-2 |     fn foo(mut arg: u8);\n-  |            ^^^^^^^\n-  |\n-  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n-```\n-\n-To fix this, remove the pattern; it can be used in the implementation without\n-being used in the definition. That is:\n-\n-```rust\n-trait Trait {\n-    fn foo(arg: u8);\n-}\n-\n-impl Trait for i32 {\n-    fn foo(mut arg: u8) {\n-\n-    }\n-}\n-```\n-\n ## plugin-as-library\n \n This lint detects when compiler plugins are used as ordinary library in"}, {"sha": "29e3f7132766ee27c10f97e21704f43762a31476", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -45,7 +45,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a [Attribute]),\n \n     /// `|x, y| {}`\n     Closure(&'a [Attribute]),\n@@ -481,13 +481,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_nested_body(body);\n         }\n-        ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n+        ItemKind::Fn(ref sig, ref generics, body_id) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident,\n                                             generics,\n-                                            header,\n+                                            sig.header,\n                                             &item.vis,\n                                             &item.attrs),\n-                             declaration,\n+                             &sig.decl,\n                              body_id,\n                              item.span,\n                              item.hir_id)"}, {"sha": "278f45371b1511f2df1ebcbeb8604e5fdeafb3af", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -44,8 +44,7 @@ use crate::hir::def::{Namespace, Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n use crate::hir::ptr::P;\n use crate::lint;\n-use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                    ELIDED_LIFETIMES_IN_PATHS};\n+use crate::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n use crate::session::Session;\n use crate::session::config::nightly_options;\n@@ -298,7 +297,6 @@ enum ParamMode {\n \n enum ParenthesizedGenericArgs {\n     Ok,\n-    Warn,\n     Err,\n }\n \n@@ -1701,29 +1699,19 @@ impl<'a> LoweringContext<'a> {\n                     };\n                     let parenthesized_generic_args = match partial_res.base_res() {\n                         // `a::b::Trait(Args)`\n-                        Res::Def(DefKind::Trait, _)\n-                            if i + 1 == proj_start => ParenthesizedGenericArgs::Ok,\n+                        Res::Def(DefKind::Trait, _) if i + 1 == proj_start => {\n+                            ParenthesizedGenericArgs::Ok\n+                        }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n-                        | Res::Def(DefKind::AssocConst, _)\n-                        | Res::Def(DefKind::AssocTy, _)\n-                            if i + 2 == proj_start =>\n-                        {\n+                        Res::Def(DefKind::Method, _) |\n+                        Res::Def(DefKind::AssocConst, _) |\n+                        Res::Def(DefKind::AssocTy, _) if i + 2 == proj_start => {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // Avoid duplicated errors.\n                         Res::Err => ParenthesizedGenericArgs::Ok,\n                         // An error\n-                        Res::Def(DefKind::Struct, _)\n-                        | Res::Def(DefKind::Enum, _)\n-                        | Res::Def(DefKind::Union, _)\n-                        | Res::Def(DefKind::TyAlias, _)\n-                        | Res::Def(DefKind::Variant, _) if i + 1 == proj_start =>\n-                        {\n-                            ParenthesizedGenericArgs::Err\n-                        }\n-                        // A warning for now, for compatibility reasons.\n-                        _ => ParenthesizedGenericArgs::Warn,\n+                        _ => ParenthesizedGenericArgs::Err,\n                     };\n \n                     let num_lifetimes = type_def_id.map_or(0, |def_id| {\n@@ -1786,7 +1774,7 @@ impl<'a> LoweringContext<'a> {\n                 segment,\n                 param_mode,\n                 0,\n-                ParenthesizedGenericArgs::Warn,\n+                ParenthesizedGenericArgs::Err,\n                 itctx.reborrow(),\n                 None,\n             ));\n@@ -1862,15 +1850,6 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n                     ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n-                    ParenthesizedGenericArgs::Warn => {\n-                        self.resolver.lint_buffer().buffer_lint(\n-                            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                            CRATE_NODE_ID,\n-                            data.span,\n-                            msg.into(),\n-                        );\n-                        (hir::GenericArgs::none(), true)\n-                    }\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");"}, {"sha": "7aa1aa8bb514a82f6fe6cba02772b47384fcfd81", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -306,7 +306,7 @@ impl LoweringContext<'_> {\n                     self.lower_const_body(e)\n                 )\n             }\n-            ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n+            ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -317,7 +317,7 @@ impl LoweringContext<'_> {\n                     // declaration (decl), not the return types.\n                     let body_id = this.lower_maybe_async_body(&decl, header.asyncness.node, body);\n \n-                    let (generics, fn_decl) = this.add_in_band_defs(\n+                    let (generics, decl) = this.add_in_band_defs(\n                         generics,\n                         fn_def_id,\n                         AnonymousLifetimeMode::PassThrough,\n@@ -328,13 +328,8 @@ impl LoweringContext<'_> {\n                             header.asyncness.node.opt_return_id()\n                         ),\n                     );\n-\n-                    hir::ItemKind::Fn(\n-                        fn_decl,\n-                        this.lower_fn_header(header),\n-                        generics,\n-                        body_id,\n-                    )\n+                    let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n+                    hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n@@ -1260,11 +1255,11 @@ impl LoweringContext<'_> {\n     fn lower_method_sig(\n         &mut self,\n         generics: &Generics,\n-        sig: &MethodSig,\n+        sig: &FnSig,\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-    ) -> (hir::Generics, hir::MethodSig) {\n+    ) -> (hir::Generics, hir::FnSig) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n@@ -1277,7 +1272,7 @@ impl LoweringContext<'_> {\n                 is_async,\n             ),\n         );\n-        (generics, hir::MethodSig { header, decl })\n+        (generics, hir::FnSig { header, decl })\n     }\n \n     fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {"}, {"sha": "f25f3b5741a0ef2984e1c9287e96722f413da9b5", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -158,25 +158,25 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn body(self) -> ast::BodyId {\n         self.handle(|i: ItemFnParts<'a>| i.body,\n-                    |_, _, _: &'a ast::MethodSig, _, body: ast::BodyId, _, _| body,\n+                    |_, _, _: &'a ast::FnSig, _, body: ast::BodyId, _, _| body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(|i: ItemFnParts<'a>| &*i.decl,\n-                    |_, _, sig: &'a ast::MethodSig, _, _, _, _| &sig.decl,\n+                    |_, _, sig: &'a ast::FnSig, _, _, _, _| &sig.decl,\n                     |c: ClosureParts<'a>| c.decl)\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(|i: ItemFnParts<'_>| i.span,\n-                    |_, _, _: &'a ast::MethodSig, _, _, span, _| span,\n+                    |_, _, _: &'a ast::FnSig, _, _, span, _| span,\n                     |c: ClosureParts<'_>| c.span)\n     }\n \n     pub fn id(self) -> ast::HirId {\n         self.handle(|i: ItemFnParts<'_>| i.id,\n-                    |id, _, _: &'a ast::MethodSig, _, _, _, _| id,\n+                    |id, _, _: &'a ast::FnSig, _, _, _, _| id,\n                     |c: ClosureParts<'_>| c.id)\n     }\n \n@@ -199,7 +199,7 @@ impl<'a> FnLikeNode<'a> {\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n         };\n-        let method = |_, ident: Ident, sig: &'a ast::MethodSig, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a ast::FnSig, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -209,7 +209,7 @@ impl<'a> FnLikeNode<'a> {\n         I: FnOnce(ItemFnParts<'a>) -> A,\n         M: FnOnce(ast::HirId,\n                   Ident,\n-                  &'a ast::MethodSig,\n+                  &'a ast::FnSig,\n                   Option<&'a ast::Visibility>,\n                   ast::BodyId,\n                   Span,\n@@ -219,16 +219,16 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             map::Node::Item(i) => match i.kind {\n-                ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n+                ast::ItemKind::Fn(ref sig, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.hir_id,\n                         ident: i.ident,\n-                        decl: &decl,\n+                        decl: &sig.decl,\n                         body: block,\n                         vis: &i.vis,\n                         span: i.span,\n                         attrs: &i.attrs,\n-                        header,\n+                        header: sig.header,\n                         generics,\n                     }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),"}, {"sha": "d858e00a2e9cdd7c204789326fbb3644d535b61a", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -100,7 +100,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into, the better\n-        let def_data = match i.kind {\n+        let def_data = match &i.kind {\n             ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n                 return visit::walk_item(self, i);\n@@ -109,19 +109,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n             ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(\n-                ref decl,\n-                ref header,\n-                ref generics,\n-                ref body,\n-            ) if header.asyncness.node.is_async() => {\n+            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n                     i.span,\n-                    header,\n+                    &sig.header,\n                     generics,\n-                    decl,\n+                    &sig.decl,\n                     body,\n                 )\n             }\n@@ -228,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.kind {\n-            ImplItemKind::Method(MethodSig {\n+            ImplItemKind::Method(FnSig {\n                 ref header,\n                 ref decl,\n             }, ref body) if header.asyncness.node.is_async() => {"}, {"sha": "d7b1676c1d4d397ac3ad1e72b7de81031292eba8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -49,21 +49,21 @@ impl<'hir> Entry<'hir> {\n         match self.node {\n             Node::Item(ref item) => {\n                 match item.kind {\n-                    ItemKind::Fn(ref fn_decl, _, _, _) => Some(fn_decl),\n+                    ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n \n             Node::TraitItem(ref item) => {\n                 match item.kind {\n-                    TraitItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None\n                 }\n             }\n \n             Node::ImplItem(ref item) => {\n                 match item.kind {\n-                    ImplItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n@@ -85,7 +85,7 @@ impl<'hir> Entry<'hir> {\n                 match item.kind {\n                     ItemKind::Const(_, body) |\n                     ItemKind::Static(.., body) |\n-                    ItemKind::Fn(_, _, _, body) => Some(body),\n+                    ItemKind::Fn(.., body) => Some(body),\n                     _ => None,\n                 }\n             }\n@@ -605,7 +605,7 @@ impl<'hir> Map<'hir> {\n                 Node::TraitItem(ref trait_item) => Some(&trait_item.generics),\n                 Node::Item(ref item) => {\n                     match item.kind {\n-                        ItemKind::Fn(_, _, ref generics, _) |\n+                        ItemKind::Fn(_, ref generics, _) |\n                         ItemKind::TyAlias(_, ref generics) |\n                         ItemKind::Enum(_, ref generics) |\n                         ItemKind::Struct(_, ref generics) |\n@@ -702,9 +702,9 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => true,\n             Node::Item(&Item {\n-                kind: ItemKind::Fn(_, header, ..),\n+                kind: ItemKind::Fn(ref sig, ..),\n                 ..\n-            }) => header.constness == Constness::Const,\n+            }) => sig.header.constness == Constness::Const,\n             _ => false,\n         }\n     }"}, {"sha": "83f68e210bd94f1761b6dbb4000c2eb87bbb77b4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1876,9 +1876,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration or implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or a free function.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1921,7 +1922,7 @@ pub enum TraitItemKind {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(P<Ty>, Option<BodyId>),\n     /// A method with an optional body.\n-    Method(MethodSig, TraitMethod),\n+    Method(FnSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds, Option<P<Ty>>),\n@@ -1955,7 +1956,7 @@ pub enum ImplItemKind {\n     /// of the expression.\n     Const(P<Ty>, BodyId),\n     /// A method implementation with the given signature and body.\n-    Method(MethodSig, BodyId),\n+    Method(FnSig, BodyId),\n     /// An associated type.\n     TyAlias(P<Ty>),\n     /// An associated `type = impl Trait`.\n@@ -2534,7 +2535,7 @@ pub enum ItemKind {\n     /// A `const` item.\n     Const(P<Ty>, BodyId),\n     /// A function declaration.\n-    Fn(P<FnDecl>, FnHeader, Generics, BodyId),\n+    Fn(FnSig, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`.\n@@ -2599,7 +2600,7 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         Some(match *self {\n-            ItemKind::Fn(_, _, ref generics, _) |\n+            ItemKind::Fn(_, ref generics, _) |\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(OpaqueTy { ref generics, impl_trait_fn: None, .. }) |\n             ItemKind::Enum(_, ref generics) |"}, {"sha": "d5fdde8732929537347a5aafd48ad46258276633", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -533,10 +533,10 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            hir::ItemKind::Fn(ref decl, header, ref param_names, body) => {\n+            hir::ItemKind::Fn(ref sig, ref param_names, body) => {\n                 self.head(\"\");\n-                self.print_fn(decl,\n-                              header,\n+                self.print_fn(&sig.decl,\n+                              sig.header,\n                               Some(item.ident.name),\n                               param_names,\n                               &item.vis,\n@@ -835,7 +835,7 @@ impl<'a> State<'a> {\n     }\n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n-                            m: &hir::MethodSig,\n+                            m: &hir::FnSig,\n                             generics: &hir::Generics,\n                             vis: &hir::Visibility,\n                             arg_names: &[ast::Ident],"}, {"sha": "db5557204e4da2945d6b9ddfa9590aa750a0aa61", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -31,10 +31,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             if let Some(hir_id) = self.tcx().hir().as_local_hir_id(def_id) {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item {\n-                        kind: hir::ItemKind::Fn(ref fndecl, ..),\n+                        kind: hir::ItemKind::Fn(ref m, ..),\n                         ..\n-                    }) => &fndecl,\n-                    Node::TraitItem(&hir::TraitItem {\n+                    })\n+                    | Node::TraitItem(&hir::TraitItem {\n                         kind: hir::TraitItemKind::Method(ref m, ..),\n                         ..\n                     })"}, {"sha": "f8a592d22c19c1a3f6ce285fa294ffa9a44a6688", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 81, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -177,16 +177,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub SAFE_EXTERN_STATICS,\n-    Deny,\n-    \"safe access to extern statics was erroneously allowed\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n@@ -199,35 +189,14 @@ declare_lint! {\n \n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n-    Warn,\n+    Deny,\n     \"patterns in functions without body were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n         edition: None,\n     };\n }\n \n-declare_lint! {\n-    pub LEGACY_DIRECTORY_OWNERSHIP,\n-    Deny,\n-    \"non-inline, non-`#[path]` modules (e.g., `mod foo;`) were erroneously allowed in some files \\\n-     not named `mod.rs`\",\n-     @future_incompatible = FutureIncompatibleInfo {\n-         reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-         edition: None,\n-     };\n-}\n-\n-declare_lint! {\n-    pub LEGACY_CONSTRUCTOR_VISIBILITY,\n-    Deny,\n-    \"detects use of struct constructors that would be invisible with new visibility rules\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub MISSING_FRAGMENT_SPECIFIER,\n     Deny,\n@@ -238,16 +207,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-    Deny,\n-    \"detects parenthesized generic parameters in type and module names\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n@@ -372,16 +331,6 @@ declare_lint! {\n     \"detects labels that are never used\"\n }\n \n-declare_lint! {\n-    pub DUPLICATE_MACRO_EXPORTS,\n-    Deny,\n-    \"detects duplicate macro exports\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n-        edition: Some(Edition::Edition2018),\n-    };\n-}\n-\n declare_lint! {\n     pub INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     Warn,\n@@ -459,7 +408,7 @@ declare_lint! {\n pub mod parser {\n     declare_lint! {\n         pub ILL_FORMED_ATTRIBUTE_INPUT,\n-        Warn,\n+        Deny,\n         \"ill-formed attribute inputs that were previously accepted and used in practice\",\n         @future_incompatible = super::FutureIncompatibleInfo {\n             reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n@@ -497,16 +446,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub NESTED_IMPL_TRAIT,\n-    Warn,\n-    \"nested occurrence of `impl Trait` type\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n     Warn,\n@@ -556,13 +495,9 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n-        SAFE_EXTERN_STATICS,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n-        LEGACY_DIRECTORY_OWNERSHIP,\n-        LEGACY_CONSTRUCTOR_VISIBILITY,\n         MISSING_FRAGMENT_SPECIFIER,\n-        PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         DEPRECATED,\n@@ -578,7 +513,6 @@ declare_lint_pass! {\n         ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n         UNSTABLE_NAME_COLLISIONS,\n         IRREFUTABLE_LET_PATTERNS,\n-        DUPLICATE_MACRO_EXPORTS,\n         INTRA_DOC_LINK_RESOLUTION_FAILURE,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS,\n@@ -590,7 +524,6 @@ declare_lint_pass! {\n         parser::META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n-        NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n@@ -604,13 +537,11 @@ pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n-    DuplicatedMacroExports(ast::Ident, Span, Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n-    NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n }\n@@ -687,10 +618,6 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion(span, \"use `crate`\", sugg, app);\n             }\n-            BuiltinLintDiagnostics::DuplicatedMacroExports(ident, earlier_span, later_span) => {\n-                db.span_label(later_span, format!(\"`{}` already exported\", ident));\n-                db.span_note(earlier_span, \"previous macro export is now shadowed\");\n-            }\n             BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n                 db.span_label(span, \"names from parent modules are not \\\n                                      accessible without an explicit import\");\n@@ -723,12 +650,6 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n-            BuiltinLintDiagnostics::NestedImplTrait {\n-                outer_impl_trait_span, inner_impl_trait_span\n-            } => {\n-                db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n-                db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n-            }\n             BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n                 for (span, is_imported) in spans {\n                     let introduced = if is_imported { \"imported\" } else { \"defined\" };"}, {"sha": "f77f5a72e60ce88cd0010206598fa34e0d8ed4a3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -33,7 +33,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n \n     match item.kind {\n-        hir::ItemKind::Fn(_, header, ..) if header.is_const() => {\n+        hir::ItemKind::Fn(ref sig, ..) if sig.header.is_const() => {\n             return true;\n         }\n         hir::ItemKind::Impl(..) |\n@@ -225,8 +225,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let Node::Item(item) = *node {\n-                let reachable = if let hir::ItemKind::Fn(_, header, ..) = item.kind {\n-                    header.abi != Abi::Rust\n+                let reachable = if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n+                    sig.header.abi != Abi::Rust\n                 } else {\n                     false\n                 };"}, {"sha": "f37d9b2827be03c26cc4b2b1cca2c857d1f7624b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -460,8 +460,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.kind {\n-            hir::ItemKind::Fn(ref decl, _, ref generics, _) => {\n-                self.visit_early_late(None, decl, generics, |this| {\n+            hir::ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n             }\n@@ -1524,8 +1524,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             {\n                 match parent {\n                     Node::Item(item) => {\n-                        if let hir::ItemKind::Fn(decl, _, _, _) = &item.kind {\n-                            find_arg_use_span(&decl.inputs);\n+                        if let hir::ItemKind::Fn(sig, _, _) = &item.kind {\n+                            find_arg_use_span(&sig.decl.inputs);\n                         }\n                     },\n                     Node::ImplItem(impl_item) => {"}, {"sha": "7b29fb26e74f51e0321b49ec61e85ed54bcde0b6", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -439,7 +439,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Ok(b as u64)\n     }\n \n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n+    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n         let b = self.to_bits(cx.data_layout().pointer_size)?;\n         Ok(b as u64)\n     }\n@@ -465,7 +465,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Ok(b as i64)\n     }\n \n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n+    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n         let sz = cx.data_layout().pointer_size;\n         let b = self.to_bits(sz)?;\n         let b = sign_extend(b, sz) as i128;\n@@ -592,8 +592,8 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n+    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n+        self.not_undef()?.to_machine_usize(cx)\n     }\n \n     #[inline(always)]\n@@ -612,8 +612,8 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n+    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n+        self.not_undef()?.to_machine_isize(cx)\n     }\n }\n "}, {"sha": "2eaf05beb2e9f8004f1f1be94c950d4cde4c5720", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2701,7 +2701,6 @@ pub enum UnsafetyViolationKind {\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n-    ExternStatic(hir::HirId),\n     BorrowPacked(hir::HirId),\n }\n "}, {"sha": "54c01034221734ff456b29ea73ccbab837117091", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -383,9 +383,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n         if let hir::Node::Item(\n-            hir::Item{kind: hir::ItemKind::Fn(_ ,fn_header ,_ , body_id), .. }) = &node {\n+            hir::Item{kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n             self.describe_generator(*body_id).or_else(||\n-                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = fn_header {\n+                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = sig.header {\n                     \"an async function\"\n                 } else {\n                     \"a function\"\n@@ -1081,7 +1081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n \n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), ..\n                 }) |\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     kind: hir::ItemKind::Impl(_, _, _, generics, ..), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), span, ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n                     kind: hir::ItemKind::TyAlias(_, generics), span, ..\n@@ -1436,12 +1436,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(decl, _, _, body_id),\n+            kind: hir::ItemKind::Fn(sig, _, body_id),\n             ..\n         })) = node {\n             let body = hir.body(*body_id);\n             if let hir::ExprKind::Block(blk, _) = &body.value.kind {\n-                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                if sig.decl.output.span().overlaps(span) && blk.expr.is_none() &&\n                     \"()\" == &trait_ref.self_ty().to_string()\n                 {\n                     // FIXME(estebank): When encountering a method with a trait\n@@ -1493,20 +1493,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             Node::Item(&hir::Item {\n                 span,\n-                kind: hir::ItemKind::Fn(ref decl, ..),\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n                 ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 span,\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::ImplItemKind::Method(ref sig, _),\n                 ..\n             }) |\n             Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::TraitItemKind::Method(ref sig, _),\n                 ..\n             }) => {\n-                (self.tcx.sess.source_map().def_span(span), decl.inputs.iter()\n+                (self.tcx.sess.source_map().def_span(span), sig.decl.inputs.iter()\n                         .map(|arg| match arg.clone().kind {\n                     hir::TyKind::Tup(ref tys) => ArgKind::Tuple(\n                         Some(arg.span),\n@@ -2040,11 +2040,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .and_then(|parent_did| self.tcx.hir().get_if_local(parent_did));\n         debug!(\"note_obligation_cause_for_async_await: parent_node={:?}\", parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(sig, _, _),\n             ..\n         })) = parent_node {\n-            debug!(\"note_obligation_cause_for_async_await: header={:?}\", header);\n-            if header.asyncness != hir::IsAsync::Async {\n+            debug!(\"note_obligation_cause_for_async_await: header={:?}\", sig.header);\n+            if sig.header.asyncness != hir::IsAsync::Async {\n                 return false;\n             }\n         }"}, {"sha": "a74ea4bca39eb9d0a4103fdbd5a03e776f7283d3", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -786,14 +786,17 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n             false\n         }\n     }\n+\n+    fn is_sig_const(sig: &ast::FnSig) -> bool {\n+        sig.header.constness.node == ast::Constness::Const || Self::should_ignore_fn(&sig.decl)\n+    }\n }\n \n impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref decl, ref header, _, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -802,8 +805,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let is_const = match i.kind {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::TraitItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_trait_item(i, s))\n@@ -812,8 +814,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let is_const = match i.kind {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n-                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ImplItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_impl_item(i, s))"}, {"sha": "a1e50018f8aa245d693fdf618e8d9e0f7cbde3e8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -339,6 +339,18 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/57742\");\n     store.register_removed(\"incoherent_fundamental_impls\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n+    store.register_removed(\"legacy_constructor_visibility\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/39207\");\n+    store.register_removed(\"legacy_disrectory_ownership\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n+    store.register_removed(\"safe_extern_statics\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36247\");\n+    store.register_removed(\"parenthesized_params_in_types_and_modules\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/42238\");\n+    store.register_removed(\"duplicate_macro_exports\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/35896\");\n+    store.register_removed(\"nested_impl_trait\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/59014\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "c6677ea3534d028fd81912986192edb730889efc", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1095,10 +1095,10 @@ impl EncodeContext<'tcx> {\n                     self.encode_rendered_const_for_body(body_id)\n                 )\n             }\n-            hir::ItemKind::Fn(_, header, .., body) => {\n+            hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n-                    asyncness: header.asyncness,\n-                    constness: header.constness,\n+                    asyncness: sig.header.asyncness,\n+                    constness: sig.header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                 };\n \n@@ -1284,14 +1284,14 @@ impl EncodeContext<'tcx> {\n \n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n-            hir::ItemKind::Fn(_, header, ..) => {\n+            hir::ItemKind::Fn(ref sig, ..) => {\n                 let generics = tcx.generics_of(def_id);\n                 let needs_inline =\n                     (generics.requires_monomorphization(tcx) ||\n                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n                         !self.metadata_output_only();\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || header.constness == hir::Constness::Const || always_encode_mir\n+                needs_inline || sig.header.constness == hir::Constness::Const || always_encode_mir\n             }\n             _ => false,\n         };"}, {"sha": "e2541eeedbc06a5707ce91fe105febb669091a84", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -30,17 +30,22 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n-        | Node::Item(hir::Item { kind: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n+        | Node::Item(\n+            hir::Item {\n+                kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n+                ..\n+            }\n+        )\n         | Node::ImplItem(\n             hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n+                kind: hir::ImplItemKind::Method(hir::FnSig { decl, .. }, body_id),\n                 ..\n             }\n         )\n         | Node::TraitItem(\n             hir::TraitItem {\n                 kind: hir::TraitItemKind::Method(\n-                    hir::MethodSig { decl, .. },\n+                    hir::FnSig { decl, .. },\n                     hir::TraitMethod::Provided(body_id),\n                 ),\n                 .."}, {"sha": "707ad1511826a67751d9cc8ceedb0bc0954e05b6", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -118,7 +118,7 @@ fn op_to_const<'tcx>(\n                     0,\n                 ),\n             };\n-            let len = b.to_usize(&ecx.tcx.tcx).unwrap();\n+            let len = b.to_machine_usize(&ecx.tcx.tcx).unwrap();\n             let start = start.try_into().unwrap();\n             let len: usize = len.try_into().unwrap();\n             ConstValue::Slice {"}, {"sha": "8e901068a8d26f78176b343d7788ffac6a02b6f2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -447,7 +447,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             ty::Slice(_) | ty::Str => {\n-                let len = metadata.expect(\"slice fat ptr must have vtable\").to_usize(self)?;\n+                let len = metadata.expect(\"slice fat ptr must have length\").to_machine_usize(self)?;\n                 let elem = layout.field(self, 0)?;\n \n                 // Make sure the slice is not too big."}, {"sha": "a7de533506c01404313d00053ffe6fd082c7e132", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -228,7 +228,7 @@ for\n                             ty::Array(_, n)\n                                 if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n                             ty::Slice(_)\n-                                if mplace.meta.unwrap().to_usize(self.ecx)? == 0 => {}\n+                                if mplace.meta.unwrap().to_machine_usize(self.ecx)? == 0 => {}\n                             _ => bug!(\"const qualif failed to prevent mutable references\"),\n                         }\n                     },"}, {"sha": "39f10d8e6045dfeb7a731eeefb4b3344eced17a7", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -263,8 +263,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // This is the dual to the special exception for offset-by-0\n                 // in the inbounds pointer offset operation (see the Miri code, `src/operator.rs`).\n                 if a.is_bits() && b.is_bits() {\n-                    let a = a.to_usize(self)?;\n-                    let b = b.to_usize(self)?;\n+                    let a = a.to_machine_usize(self)?;\n+                    let b = b.to_machine_usize(self)?;\n                     if a == b && a != 0 {\n                         self.write_scalar(Scalar::from_int(0, isize_layout.size), dest)?;\n                         return Ok(true);"}, {"sha": "88bfcd63129fa9759fa27e9bab358e109438cc23", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -37,7 +37,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let col_out = self.force_ptr(self.mplace_field(location, 2)?.ptr)?;\n \n         let layout = &self.tcx.data_layout;\n-        let alloc = self.memory.get_mut(file_ptr_out.alloc_id)?;\n+        // We just allocated this, so we can skip the bounds checks.\n+        let alloc = self.memory.get_raw_mut(file_ptr_out.alloc_id)?;\n \n         alloc.write_scalar(layout, file_ptr_out, file.into(), ptr_size)?;\n         alloc.write_scalar(layout, file_len_out, file_len.into(), ptr_size)?;"}, {"sha": "e929b0855834e98a2e3834ae8f147bf18993eeb6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -210,7 +210,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let new_ptr = self.allocate(new_size, new_align, kind);\n         let old_size = match old_size_and_align {\n             Some((size, _align)) => size,\n-            None => self.get(ptr.alloc_id)?.size,\n+            None => self.get_raw(ptr.alloc_id)?.size,\n         };\n         self.copy(\n             ptr,\n@@ -480,7 +480,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         ).0)\n     }\n \n-    pub fn get(\n+    /// Gives raw access to the `Allocation`, without bounds or alignment checks.\n+    /// Use the higher-level, `PlaceTy`- and `OpTy`-based APIs in `InterpCtx` instead!\n+    pub fn get_raw(\n         &self,\n         id: AllocId,\n     ) -> InterpResult<'tcx, &Allocation<M::PointerTag, M::AllocExtra>> {\n@@ -513,7 +515,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn get_mut(\n+    /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.\n+    /// Use the higher-level, `PlaceTy`- and `OpTy`-based APIs in `InterpCtx` instead!\n+    pub fn get_raw_mut(\n         &mut self,\n         id: AllocId,\n     ) -> InterpResult<'tcx, &mut Allocation<M::PointerTag, M::AllocExtra>> {\n@@ -555,7 +559,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n         // # Regular allocations\n-        // Don't use `self.get` here as that will\n+        // Don't use `self.get_raw` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a static's allocation in miri\n         if let Some((_, alloc)) = self.alloc_map.get(id) {\n@@ -627,7 +631,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     pub fn mark_immutable(&mut self, id: AllocId) -> InterpResult<'tcx> {\n-        self.get_mut(id)?.mutability = Mutability::Immutable;\n+        self.get_raw_mut(id)?.mutability = Mutability::Immutable;\n         Ok(())\n     }\n \n@@ -776,15 +780,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(ptr) => ptr,\n             None => return Ok(&[]), // zero-sized access\n         };\n-        self.get(ptr.alloc_id)?.get_bytes(self, ptr, size)\n+        self.get_raw(ptr.alloc_id)?.get_bytes(self, ptr, size)\n     }\n \n     /// Reads a 0-terminated sequence of bytes from memory. Returns them as a slice.\n     ///\n     /// Performs appropriate bounds checks.\n     pub fn read_c_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, &[u8]> {\n         let ptr = self.force_ptr(ptr)?; // We need to read at least 1 byte, so we *need* a ptr.\n-        self.get(ptr.alloc_id)?.read_c_str(self, ptr)\n+        self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n     }\n \n     /// Writes the given stream of bytes into memory.\n@@ -804,7 +808,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             None => return Ok(()), // zero-sized access\n         };\n         let tcx = self.tcx.tcx;\n-        self.get_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n+        self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n     /// Expects the caller to have checked bounds and alignment.\n@@ -832,16 +836,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // since we don't want to keep any relocations at the target.\n         // (`get_bytes_with_undef_and_ptr` below checks that there are no\n         // relocations overlapping the edges; those would not be handled correctly).\n-        let relocations = self.get(src.alloc_id)?\n+        let relocations = self.get_raw(src.alloc_id)?\n             .prepare_relocation_copy(self, src, size, dest, length);\n \n         let tcx = self.tcx.tcx;\n \n         // This checks relocation edges on the src.\n-        let src_bytes = self.get(src.alloc_id)?\n+        let src_bytes = self.get_raw(src.alloc_id)?\n             .get_bytes_with_undef_and_ptr(&tcx, src, size)?\n             .as_ptr();\n-        let dest_bytes = self.get_mut(dest.alloc_id)?\n+        let dest_bytes = self.get_raw_mut(dest.alloc_id)?\n             .get_bytes_mut(&tcx, dest, size * length)?\n             .as_mut_ptr();\n \n@@ -880,7 +884,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // copy definedness to the destination\n         self.copy_undef_mask(src, dest, size, length)?;\n         // copy the relocations to the destination\n-        self.get_mut(dest.alloc_id)?.mark_relocation_range(relocations);\n+        self.get_raw_mut(dest.alloc_id)?.mark_relocation_range(relocations);\n \n         Ok(())\n     }\n@@ -899,11 +903,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // The bits have to be saved locally before writing to dest in case src and dest overlap.\n         assert_eq!(size.bytes() as usize as u64, size.bytes());\n \n-        let src_alloc = self.get(src.alloc_id)?;\n+        let src_alloc = self.get_raw(src.alloc_id)?;\n         let compressed = src_alloc.compress_undef_range(src, size);\n \n         // now fill in all the data\n-        let dest_allocation = self.get_mut(dest.alloc_id)?;\n+        let dest_allocation = self.get_raw_mut(dest.alloc_id)?;\n         dest_allocation.mark_compressed_undef_range(&compressed, dest, size, repeat);\n \n         Ok(())\n@@ -915,7 +919,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         match scalar {\n             Scalar::Ptr(ptr) => Ok(ptr),\n-            _ => M::int_to_ptr(&self, scalar.to_usize(self)?)\n+            _ => M::int_to_ptr(&self, scalar.to_machine_usize(self)?)\n         }\n     }\n "}, {"sha": "79762b87b0a8502e9f6291e7fac4f7181ad125ce", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -248,7 +248,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match mplace.layout.abi {\n             layout::Abi::Scalar(..) => {\n                 let scalar = self.memory\n-                    .get(ptr.alloc_id)?\n+                    .get_raw(ptr.alloc_id)?\n                     .read_scalar(self, ptr, mplace.layout.size)?;\n                 Ok(Some(ImmTy {\n                     imm: scalar.into(),\n@@ -266,10 +266,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields\n                 let b_ptr = ptr.offset(b_offset, self)?;\n                 let a_val = self.memory\n-                    .get(ptr.alloc_id)?\n+                    .get_raw(ptr.alloc_id)?\n                     .read_scalar(self, a_ptr, a_size)?;\n                 let b_val = self.memory\n-                    .get(ptr.alloc_id)?\n+                    .get_raw(ptr.alloc_id)?\n                     .read_scalar(self, b_ptr, b_size)?;\n                 Ok(Some(ImmTy {\n                     imm: Immediate::ScalarPair(a_val, b_val),"}, {"sha": "0bd47edc046602d50dcdf3081b3453bd13c80248", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -195,7 +195,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind {\n                 ty::Slice(..) | ty::Str =>\n-                    return self.mplace.meta.unwrap().to_usize(cx),\n+                    return self.mplace.meta.unwrap().to_machine_usize(cx),\n                 _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n         } else {\n@@ -808,7 +808,7 @@ where\n                     _ => bug!(\"write_immediate_to_mplace: invalid Scalar layout: {:#?}\",\n                             dest.layout)\n                 }\n-                self.memory.get_mut(ptr.alloc_id)?.write_scalar(\n+                self.memory.get_raw_mut(ptr.alloc_id)?.write_scalar(\n                     tcx, ptr, scalar, dest.layout.size\n                 )\n             }\n@@ -830,10 +830,10 @@ where\n                 // fields do not match the `ScalarPair` components.\n \n                 self.memory\n-                    .get_mut(ptr.alloc_id)?\n+                    .get_raw_mut(ptr.alloc_id)?\n                     .write_scalar(tcx, ptr, a_val, a_size)?;\n                 self.memory\n-                    .get_mut(b_ptr.alloc_id)?\n+                    .get_raw_mut(b_ptr.alloc_id)?\n                     .write_scalar(tcx, b_ptr, b_val, b_size)\n             }\n         }"}, {"sha": "1df98f079cc104957575686d85cba453074f803d", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -392,7 +392,7 @@ impl<'b, 'mir, 'tcx> SnapshotContext<'b>\n     for Memory<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>\n {\n     fn resolve(&'b self, id: &AllocId) -> Option<&'b Allocation> {\n-        self.get(*id).ok()\n+        self.get_raw(*id).ok()\n     }\n }\n "}, {"sha": "e10bb85d52df8b97b29806e63d60d979562417ce", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -445,7 +445,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ptr_size,\n                     self.tcx.data_layout.pointer_align.abi,\n                 )?.expect(\"cannot be a ZST\");\n-                let fn_ptr = self.memory.get(vtable_slot.alloc_id)?\n+                let fn_ptr = self.memory.get_raw(vtable_slot.alloc_id)?\n                     .read_ptr_sized(self, vtable_slot)?.not_undef()?;\n                 let drop_fn = self.memory.get_fn(fn_ptr)?;\n "}, {"sha": "c15425321ec0123a249ae2be1ce3c4a0ce2d8762", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -63,35 +63,30 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let drop = Instance::resolve_drop_in_place(*tcx, ty);\n         let drop = self.memory.create_fn_alloc(FnVal::Instance(drop));\n \n-        // no need to do any alignment checks on the memory accesses below, because we know the\n+        // No need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n         // multiples of `ptr_align`, which means that it will stay aligned to `ptr_align`.\n-        self.memory\n-            .get_mut(vtable.alloc_id)?\n-            .write_ptr_sized(tcx, vtable, Scalar::Ptr(drop).into())?;\n-\n-        let size_ptr = vtable.offset(ptr_size, self)?;\n-        self.memory\n-            .get_mut(size_ptr.alloc_id)?\n-            .write_ptr_sized(tcx, size_ptr, Scalar::from_uint(size, ptr_size).into())?;\n-        let align_ptr = vtable.offset(ptr_size * 2, self)?;\n-        self.memory\n-            .get_mut(align_ptr.alloc_id)?\n-            .write_ptr_sized(tcx, align_ptr, Scalar::from_uint(align, ptr_size).into())?;\n+        let vtable_alloc = self.memory.get_raw_mut(vtable.alloc_id)?;\n+        vtable_alloc.write_ptr_sized(tcx, vtable, Scalar::Ptr(drop).into())?;\n+\n+        let size_ptr = vtable.offset(ptr_size, tcx)?;\n+        vtable_alloc.write_ptr_sized(tcx, size_ptr, Scalar::from_uint(size, ptr_size).into())?;\n+        let align_ptr = vtable.offset(ptr_size * 2, tcx)?;\n+        vtable_alloc.write_ptr_sized(tcx, align_ptr, Scalar::from_uint(align, ptr_size).into())?;\n \n         for (i, method) in methods.iter().enumerate() {\n             if let Some((def_id, substs)) = *method {\n                 // resolve for vtable: insert shims where needed\n                 let instance = ty::Instance::resolve_for_vtable(\n-                    *self.tcx,\n+                    *tcx,\n                     self.param_env,\n                     def_id,\n                     substs,\n                 ).ok_or_else(|| err_inval!(TooGeneric))?;\n                 let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n-                let method_ptr = vtable.offset(ptr_size * (3 + i as u64), self)?;\n-                self.memory\n-                    .get_mut(method_ptr.alloc_id)?\n+                // We cannot use `vtable_allic` as we are creating fn ptrs in this loop.\n+                let method_ptr = vtable.offset(ptr_size * (3 + i as u64), tcx)?;\n+                self.memory.get_raw_mut(vtable.alloc_id)?\n                     .write_ptr_sized(tcx, method_ptr, Scalar::Ptr(fn_ptr).into())?;\n             }\n         }\n@@ -114,7 +109,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.tcx.data_layout.pointer_align.abi,\n         )?.expect(\"cannot be a ZST\");\n         let drop_fn = self.memory\n-            .get(vtable.alloc_id)?\n+            .get_raw(vtable.alloc_id)?\n             .read_ptr_sized(self, vtable)?\n             .not_undef()?;\n         // We *need* an instance here, no other kind of function value, to be able\n@@ -140,7 +135,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             3*pointer_size,\n             self.tcx.data_layout.pointer_align.abi,\n         )?.expect(\"cannot be a ZST\");\n-        let alloc = self.memory.get(vtable.alloc_id)?;\n+        let alloc = self.memory.get_raw(vtable.alloc_id)?;\n         let size = alloc.read_ptr_sized(\n             self,\n             vtable.offset(pointer_size, self)?"}, {"sha": "d698b2e8d8f80d42f1d5fbb468eb824b2cdc7bd0", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -282,7 +282,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                 // FIXME: More checks for the vtable.\n             }\n             ty::Slice(..) | ty::Str => {\n-                let _len = try_validation!(meta.unwrap().to_usize(self.ecx),\n+                let _len = try_validation!(meta.unwrap().to_machine_usize(self.ecx),\n                     \"non-integer slice length in wide pointer\", self.path);\n                 // We do not check that `len * elem_size <= isize::MAX`:\n                 // that is only required for references, and there it falls out of the\n@@ -586,6 +586,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     _ => false,\n                 }\n             } => {\n+                // Optimized handling for arrays of integer/float type.\n+\n                 // bailing out for zsts is ok, since the array element type can only be int/float\n                 if op.layout.is_zst() {\n                     return Ok(());\n@@ -605,6 +607,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // Size is not 0, get a pointer.\n                 let ptr = self.ecx.force_ptr(mplace.ptr)?;\n \n+                // This is the optimization: we just check the entire range at once.\n                 // NOTE: Keep this in sync with the handling of integer and float\n                 // types above, in `visit_primitive`.\n                 // In run-time mode, we accept pointers in here.  This is actually more\n@@ -614,7 +617,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // to reject those pointers, we just do not have the machinery to\n                 // talk about parts of a pointer.\n                 // We also accept undef, for consistency with the slow path.\n-                match self.ecx.memory.get(ptr.alloc_id)?.check_bytes(\n+                match self.ecx.memory.get_raw(ptr.alloc_id)?.check_bytes(\n                     self.ecx,\n                     ptr,\n                     size,"}, {"sha": "49cdd9142345dbfe49b8ae17a91ea4e555834814", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1071,7 +1071,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.kind {\n-            hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n+            hir::ImplItemKind::Method(hir::FnSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }"}, {"sha": "e29239a4536c27e169a2c497cfda9ebebc0dd76c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::cast::CastTy;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n-use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n+use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n@@ -208,23 +208,20 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n             PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                 if self.tcx.is_mutable_static(def_id) {\n-                    self.require_unsafe(\"use of mutable static\",\n+                    self.require_unsafe(\n+                        \"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing \\\n-                         violations or data races will cause undefined behavior\",\n-                         UnsafetyViolationKind::General);\n+                        violations or data races will cause undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 } else if self.tcx.is_foreign_item(def_id) {\n-                    let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n-                    self.register_violations(&[UnsafetyViolation {\n-                        source_info,\n-                        description: Symbol::intern(\"use of extern static\"),\n-                        details: Symbol::intern(\n-                            \"extern statics are not controlled by the Rust type system: \\\n-                            invalid data, aliasing violations or data races will cause \\\n-                            undefined behavior\"),\n-                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n-                    }], &[]);\n+                    self.require_unsafe(\n+                        \"use of extern static\",\n+                        \"extern statics are not controlled by the Rust type system: \\\n+                        invalid data, aliasing violations or data races will cause \\\n+                        undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 }\n             }\n         }\n@@ -351,8 +348,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn |\n                         UnsafetyViolationKind::General => {},\n-                        UnsafetyViolationKind::BorrowPacked(_) |\n-                        UnsafetyViolationKind::ExternStatic(_) => if self.min_const_fn {\n+                        UnsafetyViolationKind::BorrowPacked(_) => if self.min_const_fn {\n                             // const fns don't need to be backwards compatible and can\n                             // emit these violations as a hard error instead of a backwards\n                             // compat lint\n@@ -380,8 +376,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             UnsafetyViolationKind::GeneralAndConstFn => {},\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General |\n-                            UnsafetyViolationKind::BorrowPacked(_) |\n-                            UnsafetyViolationKind::ExternStatic(_) => {\n+                            UnsafetyViolationKind::BorrowPacked(_) => {\n                                 let mut violation = violation.clone();\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n@@ -576,10 +571,10 @@ fn is_enclosed(\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(Node::Item(&hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(ref sig, _, _),\n             ..\n         })) = tcx.hir().find(parent_id) {\n-            match header.unsafety {\n+            match sig.header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,\n             }\n@@ -646,14 +641,6 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                     .note(&details.as_str())\n                     .emit();\n             }\n-            UnsafetyViolationKind::ExternStatic(lint_hir_id) => {\n-                tcx.lint_node_note(SAFE_EXTERN_STATICS,\n-                              lint_hir_id,\n-                              source_info.span,\n-                              &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                        (error E0133)\", description),\n-                              &details.as_str());\n-            }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.unsafe_derive_on_repr_packed(impl_def_id);"}, {"sha": "8cf83d41ac2daf82af167d58fd3786d746554fe7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 23, "deletions": 116, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -9,7 +9,6 @@\n use std::mem;\n use syntax::print::pprust;\n use rustc::lint;\n-use rustc::lint::builtin::{BuiltinLintDiagnostics, NESTED_IMPL_TRAIT};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n@@ -23,39 +22,14 @@ use syntax::{span_err, struct_span_err, walk_list};\n use syntax_pos::{Span, MultiSpan};\n use errors::{Applicability, FatalError};\n \n-#[derive(Copy, Clone, Debug)]\n-struct OuterImplTrait {\n-    span: Span,\n-\n-    /// rust-lang/rust#57979: a bug in original implementation caused\n-    /// us to fail sometimes to record an outer `impl Trait`.\n-    /// Therefore, in order to reliably issue a warning (rather than\n-    /// an error) in the *precise* places where we are newly injecting\n-    /// the diagnostic, we have to distinguish between the places\n-    /// where the outer `impl Trait` has always been recorded, versus\n-    /// the places where it has only recently started being recorded.\n-    only_recorded_since_pull_request_57730: bool,\n-}\n-\n-impl OuterImplTrait {\n-    /// This controls whether we should downgrade the nested impl\n-    /// trait diagnostic to a warning rather than an error, based on\n-    /// whether the outer impl trait had been improperly skipped in\n-    /// earlier implementations of the analysis on the stable\n-    /// compiler.\n-    fn should_warn_instead_of_error(&self) -> bool {\n-        self.only_recorded_since_pull_request_57730\n-    }\n-}\n-\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,\n \n     /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     /// Nested `impl Trait` _is_ allowed in associated type position,\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n-    outer_impl_trait: Option<OuterImplTrait>,\n+    outer_impl_trait: Option<Span>,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -65,26 +39,10 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    /// rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n-    /// until PRs #57730 and #57981 landed: it would jump directly to\n-    /// walk_ty rather than visit_ty (or skip recurring entirely for\n-    /// impl trait in projections), and thus miss some cases. We track\n-    /// whether we should downgrade to a warning for short-term via\n-    /// these booleans.\n-    warning_period_57979_didnt_record_next_impl_trait: bool,\n-    warning_period_57979_impl_trait_in_proj: bool,\n-\n     lint_buffer: &'a mut lint::LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n-    fn with_impl_trait_in_proj_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let old = mem::replace(&mut self.warning_period_57979_impl_trait_in_proj, v);\n-        let ret = f(self);\n-        self.warning_period_57979_impl_trait_in_proj = old;\n-        ret\n-    }\n-\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n@@ -97,22 +55,15 @@ impl<'a> AstValidator<'a> {\n         self.is_assoc_ty_bound_banned = old;\n     }\n \n-    fn with_impl_trait(&mut self, outer: Option<OuterImplTrait>, f: impl FnOnce(&mut Self)) {\n+    fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n-            AssocTyConstraintKind::Equality { ref ty } => {\n-                // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-                // `walk_ty` rather than `visit_ty`, skipping outer `impl Trait`\n-                // if it happened to occur at `ty`.\n-                if let TyKind::ImplTrait(..) = ty.kind {\n-                    self.warning_period_57979_didnt_record_next_impl_trait = true;\n-                }\n-            }\n+            AssocTyConstraintKind::Equality { .. } => {}\n             AssocTyConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n                     self.err_handler().span_err(constraint.span,\n@@ -124,37 +75,11 @@ impl<'a> AstValidator<'a> {\n         self.visit_assoc_ty_constraint(constraint);\n     }\n \n-    fn visit_ty_from_generic_args(&mut self, ty: &'a Ty) {\n-        // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-        // `walk_ty` rather than `visit_ty`, skippping outer `impl Trait`\n-        // if it happened to occur at `ty`.\n-        if let TyKind::ImplTrait(..) = ty.kind {\n-            self.warning_period_57979_didnt_record_next_impl_trait = true;\n-        }\n-        self.visit_ty(ty);\n-    }\n-\n-    fn outer_impl_trait(&mut self, span: Span) -> OuterImplTrait {\n-        let only_recorded_since_pull_request_57730 =\n-            self.warning_period_57979_didnt_record_next_impl_trait;\n-\n-        // (This flag is designed to be set to `true`, and then only\n-        // reach the construction point for the outer impl trait once,\n-        // so its safe and easiest to unconditionally reset it to\n-        // false.)\n-        self.warning_period_57979_didnt_record_next_impl_trait = false;\n-\n-        OuterImplTrait {\n-            span, only_recorded_since_pull_request_57730,\n-        }\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match t.kind {\n             TyKind::ImplTrait(..) => {\n-                let outer_impl_trait = self.outer_impl_trait(t.span);\n-                self.with_impl_trait(Some(outer_impl_trait), |this| visit::walk_ty(this, t))\n+                self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n@@ -484,40 +409,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n-                    if self.warning_period_57979_impl_trait_in_proj {\n-                        self.lint_buffer.buffer_lint(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"`impl Trait` is not allowed in path parameters\");\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0667,\n-                            \"`impl Trait` is not allowed in path parameters\").emit();\n-                    }\n+                    struct_span_err!(\n+                        self.session, ty.span, E0667,\n+                        \"`impl Trait` is not allowed in path parameters\"\n+                    )\n+                    .emit();\n                 }\n \n-                if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                    if outer_impl_trait.should_warn_instead_of_error() {\n-                        self.lint_buffer.buffer_lint_with_diagnostic(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"nested `impl Trait` is not allowed\",\n-                            BuiltinLintDiagnostics::NestedImplTrait {\n-                                outer_impl_trait_span: outer_impl_trait.span,\n-                                inner_impl_trait_span: ty.span,\n-                            });\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0666,\n-                            \"nested `impl Trait` is not allowed\")\n-                            .span_label(outer_impl_trait.span, \"outer `impl Trait`\")\n-                            .span_label(ty.span, \"nested `impl Trait` here\")\n-                            .emit();\n-                    }\n+                if let Some(outer_impl_trait_sp) = self.outer_impl_trait {\n+                    struct_span_err!(\n+                        self.session, ty.span, E0666,\n+                        \"nested `impl Trait` is not allowed\"\n+                    )\n+                    .span_label(outer_impl_trait_sp, \"outer `impl Trait`\")\n+                    .span_label(ty.span, \"nested `impl Trait` here\")\n+                    .emit();\n                 }\n \n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n \n-                self.with_impl_trait_in_proj_warning(true, |this| this.walk_ty(ty));\n+                self.walk_ty(ty);\n                 return;\n             }\n             _ => {}\n@@ -575,12 +489,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(ref decl, ref header, ref generics, _) => {\n-                self.visit_fn_header(header);\n-                self.check_fn_decl(decl);\n+            ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_fn_header(&sig.header);\n+                self.check_fn_decl(&sig.decl);\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n-                if header.constness.node == Constness::Const {\n+                if sig.header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n                         match param.kind {\n@@ -654,11 +568,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, sym::path);\n-                if attr::contains_name(&item.attrs, sym::warn_directory_ownership) {\n-                    let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n-                    let msg = \"cannot declare a new module at this location\";\n-                    self.lint_buffer.buffer_lint(lint, item.id, item.span, msg);\n-                }\n             }\n             ItemKind::Union(ref vdata, _) => {\n                 if let VariantData::Tuple(..) | VariantData::Unit(..) = vdata {\n@@ -731,7 +640,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if let Some(ref type_) = data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty_from_generic_args(type_));\n+                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n                 }\n             }\n         }\n@@ -849,8 +758,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffe\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n-        warning_period_57979_didnt_record_next_impl_trait: false,\n-        warning_period_57979_impl_trait_in_proj: false,\n         lint_buffer: lints,\n     };\n     visit::walk_crate(&mut validator, krate);"}, {"sha": "3340566a8758e81dfcc7c438c4b67da6985cb19a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -731,7 +731,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         match item.kind {\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(_, ref generics) |\n-            ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::Fn(_, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes),\n                                             |this| visit::walk_item(this, item));\n             }\n@@ -1539,25 +1539,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 if is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err {\n                     partial_res\n                 } else {\n-                    // Add a temporary hack to smooth the transition to new struct ctor\n-                    // visibility rules. See #38932 for more details.\n-                    let mut res = None;\n-                    if let Res::Def(DefKind::Struct, def_id) = partial_res.base_res() {\n-                        if let Some((ctor_res, ctor_vis))\n-                                = self.r.struct_constructors.get(&def_id).cloned() {\n-                            if is_expected(ctor_res) &&\n-                               self.r.is_accessible_from(ctor_vis, self.parent_scope.module) {\n-                                let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n-                                self.r.lint_buffer.buffer_lint(lint, id, span,\n-                                    \"private struct constructors are not usable through \\\n-                                     re-exports in outer modules\",\n-                                );\n-                                res = Some(PartialRes::new(ctor_res));\n-                            }\n-                        }\n-                    }\n-\n-                    res.unwrap_or_else(|| report_errors(self, Some(partial_res.base_res())))\n+                    report_errors(self, Some(partial_res.base_res()))\n                 }\n             }\n             Some(partial_res) if source.defer_to_typeck() => {"}, {"sha": "083b11daaa1532b183143d218461502ed9f4724c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -16,18 +16,14 @@ use errors::{Applicability, pluralize};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n-use rustc::lint::builtin::{\n-    DUPLICATE_MACRO_EXPORTS,\n-    PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n-    UNUSED_IMPORTS,\n-};\n+use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::{self, PartialRes, Export};\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n \n-use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n+use syntax::ast::{Ident, Name, NodeId};\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{struct_span_err, unwrap_or};\n@@ -496,13 +492,13 @@ impl<'a> Resolver<'a> {\n                         if let (&NameBindingKind::Res(_, true), &NameBindingKind::Res(_, true)) =\n                                (&old_binding.kind, &binding.kind) {\n \n-                            this.lint_buffer.buffer_lint_with_diagnostic(\n-                                DUPLICATE_MACRO_EXPORTS,\n-                                CRATE_NODE_ID,\n+                            this.session.struct_span_err(\n                                 binding.span,\n                                 &format!(\"a macro named `{}` has already been exported\", key.ident),\n-                                BuiltinLintDiagnostics::DuplicatedMacroExports(\n-                                    key.ident, old_binding.span, binding.span));\n+                            )\n+                            .span_label(binding.span, format!(\"`{}` already exported\", key.ident))\n+                            .span_note(old_binding.span, \"previous macro export is now shadowed\")\n+                            .emit();\n \n                             resolution.binding = Some(binding);\n                         } else {"}, {"sha": "92c391fb4a338ca8189305e3299b1cf4ca99f375", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -272,7 +272,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n     fn process_method(\n         &mut self,\n-        sig: &'l ast::MethodSig,\n+        sig: &'l ast::FnSig,\n         body: Option<&'l ast::Block>,\n         id: ast::NodeId,\n         ident: ast::Ident,\n@@ -1334,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, ref header, ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, &header, ty_params, &body)\n+            Fn(ref sig, ref ty_params, ref body) => {\n+                self.process_fn(item, &sig.decl, &sig.header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "424d57c8fe7fa7175afd200865a2fb86843e6ffa", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -180,7 +180,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.kind {\n-            ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n+            ast::ItemKind::Fn(ref sig, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n@@ -190,7 +190,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     span: self.span_from_span(item.ident.span),\n                     name: item.ident.to_string(),\n                     qualname,\n-                    value: make_signature(decl, generics),\n+                    value: make_signature(&sig.decl, generics),\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,"}, {"sha": "d1b9b8ff44ddbdaee5c96597734938845c50329e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -72,7 +72,7 @@ pub fn method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -376,7 +376,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref generics, _) => {\n+            ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");\n@@ -932,7 +932,7 @@ fn make_method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Result {\n     // FIXME code dup with function signature"}, {"sha": "39a7996df0cdca2c41ef8bcb82dedf6be6fbc710", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -815,8 +815,8 @@ fn primary_body_of(\n                 hir::ItemKind::Const(ref ty, body) |\n                 hir::ItemKind::Static(ref ty, _, body) =>\n                     Some((body, Some(ty), None, None)),\n-                hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, None, Some(header), Some(decl))),\n+                hir::ItemKind::Fn(ref sig, .., body) =>\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n@@ -1297,7 +1297,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -1345,7 +1345,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -4278,7 +4278,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n-                kind: hir::ItemKind::Fn(_, _, _, body_id), ..\n+                kind: hir::ItemKind::Fn(_, _, body_id), ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 kind: hir::ImplItemKind::Method(_, body_id), ..\n@@ -4303,23 +4303,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn get_node_fn_decl(&self, node: Node<'tcx>) -> Option<(&'tcx hir::FnDecl, ast::Ident, bool)> {\n         match node {\n             Node::Item(&hir::Item {\n-                ident, kind: hir::ItemKind::Fn(ref decl, ..), ..\n+                ident, kind: hir::ItemKind::Fn(ref sig, ..), ..\n             }) => {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((decl, ident, ident.name != sym::main))\n+                Some((&sig.decl, ident, ident.name != sym::main))\n             }\n             Node::TraitItem(&hir::TraitItem {\n-                ident, kind: hir::TraitItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, true)),\n+                ident, kind: hir::TraitItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n-                ident, kind: hir::ImplItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, false)),\n+                ident, kind: hir::ImplItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, false)),\n             _ => None,\n         }\n     }"}, {"sha": "5b25d8f25a9566d7ab5edd4e0a07867e8116b5cc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -190,7 +190,7 @@ fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n-    sig_if_method: Option<&hir::MethodSig>,\n+    sig_if_method: Option<&hir::FnSig>,\n ) {\n     debug!(\"check_associated_item: {:?}\", item_id);\n \n@@ -783,7 +783,7 @@ const HELP_FOR_SELF_TYPE: &str =\n \n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n-    method_sig: &hir::MethodSig,\n+    fn_sig: &hir::FnSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n@@ -794,7 +794,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n         return;\n     }\n \n-    let span = method_sig.decl.inputs[0].span;\n+    let span = fn_sig.decl.inputs[0].span;\n \n     let sig = fcx.tcx.fn_sig(method.def_id);\n     let sig = fcx.normalize_associated_types_in(span, &sig);"}, {"sha": "9c1da65c84687de2a571ac5073f429d3cdd33a52", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -885,8 +885,8 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             _ => None,\n         },\n         Node::Item(item) => match item.kind {\n-            hir::ItemKind::Fn(ref fn_decl, .., ref generics, _) => {\n-                has_late_bound_regions(tcx, generics, fn_decl)\n+            hir::ItemKind::Fn(ref sig, .., ref generics, _) => {\n+                has_late_bound_regions(tcx, generics, &sig.decl)\n             }\n             _ => None,\n         },\n@@ -1779,17 +1779,17 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            kind: ImplItemKind::Method(MethodSig { header, decl }, _),\n+            kind: ImplItemKind::Method(sig, _),\n             ..\n         })\n         | Item(hir::Item {\n-            kind: ItemKind::Fn(decl, header, _, _),\n+            kind: ItemKind::Fn(sig, _, _),\n             ..\n-        }) => match get_infer_ret_ty(&decl.output) {\n+        }) => match get_infer_ret_ty(&sig.decl.output) {\n             Some(ty) => {\n                 let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n                 let mut diag = bad_placeholder_type(tcx, ty.span);\n@@ -1805,11 +1805,11 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                 diag.emit();\n                 ty::Binder::bind(fn_sig)\n             },\n-            None => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+            None => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl)\n         },\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n             ..\n         }) => {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)"}, {"sha": "6696447ceae575c2389e947b03eba6f4fb3801ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1984,7 +1984,7 @@ pub struct Method {\n     pub ret_types: Vec<Type>,\n }\n \n-impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n+impl<'a> Clean<Method> for (&'a hir::FnSig, &'a hir::Generics, hir::BodyId,\n                             Option<hir::Defaultness>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Method {\n         let (generics, decl) = enter_impl_trait(cx, || {"}, {"sha": "aea9b7c38efba1734c8ae23055d112f68c67b92d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -438,8 +438,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.structs.push(self.visit_variant_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Union(ref sd, ref gen) =>\n                 om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n-            hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n-                self.visit_fn(om, item, ident.name, &**fd, header, gen, body),\n+            hir::ItemKind::Fn(ref sig, ref gen, body) =>\n+                self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body),\n             hir::ItemKind::TyAlias(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty,"}, {"sha": "b57d223899184ddd407b60a4dbf62759482cbcd7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1501,10 +1501,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration,\n-/// or in an implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or free function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1528,7 +1528,7 @@ pub struct TraitItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n-    Method(MethodSig, Option<P<Block>>),\n+    Method(FnSig, Option<P<Block>>),\n     Type(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n@@ -1552,7 +1552,7 @@ pub struct ImplItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n-    Method(MethodSig, P<Block>),\n+    Method(FnSig, P<Block>),\n     TyAlias(P<Ty>),\n     OpaqueTy(GenericBounds),\n     Macro(Mac),\n@@ -2433,7 +2433,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(P<FnDecl>, FnHeader, Generics, P<Block>),\n+    Fn(FnSig, Generics, P<Block>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`."}, {"sha": "7696ea48f9338392f1fc94893fc5c250711fef34", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -357,7 +357,7 @@ pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_method_sig<T: MutVisitor>(MethodSig { header, decl }: &mut MethodSig, vis: &mut T) {\n+pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n     vis.visit_fn_header(header);\n     vis.visit_fn_decl(decl);\n }\n@@ -878,9 +878,8 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             vis.visit_expr(expr);\n         }\n-        ItemKind::Fn(decl, header, generics, body) => {\n-            vis.visit_fn_decl(decl);\n-            vis.visit_fn_header(header);\n+        ItemKind::Fn(sig, generics, body) => {\n+            visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             vis.visit_block(body);\n         }\n@@ -938,7 +937,7 @@ pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n             visit_opt(default, |default| vis.visit_expr(default));\n         }\n         TraitItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, vis);\n+            visit_fn_sig(sig, vis);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         TraitItemKind::Type(bounds, default) => {\n@@ -970,7 +969,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(sig, body) => {\n-            visit_method_sig(sig, visitor);\n+            visit_fn_sig(sig, visitor);\n             visitor.visit_block(body);\n         }\n         ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),"}, {"sha": "b54f4862f1220a14c06d992c42431b08bd095055", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -37,7 +37,7 @@ pub enum DirectoryOwnership {\n         relative: Option<ast::Ident>,\n     },\n     UnownedViaBlock,\n-    UnownedViaMod(bool /* legacy warnings? */),\n+    UnownedViaMod,\n }\n \n // A bunch of utility functions of the form `parse_<thing>_from_<source>`"}, {"sha": "5df24804a7603af12e2ced9345f33d3bf9848126", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n             };\n             (format!(\"expected one of {}, found {}\", expect, actual),\n                 (self.sess.source_map().next_point(self.prev_span),\n-                format!(\"expected one of {} here\", short_expect)))\n+                format!(\"expected one of {}\", short_expect)))\n         } else if expected.is_empty() {\n             (format!(\"unexpected token: {}\", actual),\n                 (self.prev_span, \"unexpected token after this\".to_string()))"}, {"sha": "531ad532a54dc5b4c1924aacb1ce0cd6a3d2efed", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, Use\n use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use crate::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n-use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, MethodSig, SelfKind, Param};\n+use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use crate::parse::token;\n use crate::tokenstream::{TokenTree, TokenStream};\n use crate::symbol::{kw, sym};\n@@ -1800,7 +1800,7 @@ impl<'a> Parser<'a> {\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ItemKind::Fn(decl, header, generics, body);\n+        let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n         self.mk_item_with_info(attrs, lo, vis, (ident, kind, Some(inner_attrs)))\n     }\n \n@@ -1897,14 +1897,14 @@ impl<'a> Parser<'a> {\n     fn parse_method_sig(\n         &mut self,\n         is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, (Ident, MethodSig, Generics)> {\n+    ) -> PResult<'a, (Ident, FnSig, Generics)> {\n         let header = self.parse_fn_front_matter()?;\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: true,\n             allow_c_variadic: false,\n             is_name_required,\n         })?;\n-        Ok((ident, MethodSig { header, decl }, generics))\n+        Ok((ident, FnSig { header, decl }, generics))\n     }\n \n     /// Parses all the \"front matter\" for a `fn` declaration, up to"}, {"sha": "3e5974c2eee770cfd1dc3ce479379007e9154b90", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -23,7 +23,6 @@ pub(super) struct ModulePath {\n pub(super) struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n-    warn: bool,\n }\n \n impl<'a> Parser<'a> {\n@@ -57,17 +56,10 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership, warn } =\n+                let ModulePathSuccess { path, directory_ownership } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, mut attrs) =\n+                let (module, attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n-                // Record that we fetched the mod from an external file.\n-                if warn {\n-                    let attr = attr::mk_attr_outer(\n-                        attr::mk_word_item(Ident::with_dummy_span(sym::warn_directory_ownership)));\n-                    attr::mark_known(&attr);\n-                    attrs.push(attr);\n-                }\n                 Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n                 let placeholder = ast::Mod {\n@@ -138,17 +130,16 @@ impl<'a> Parser<'a> {\n                     // `#[path]` included and contains a `mod foo;` declaration.\n                     // If you encounter this, it's your own darn fault :P\n                     Some(_) => DirectoryOwnership::Owned { relative: None },\n-                    _ => DirectoryOwnership::UnownedViaMod(true),\n+                    _ => DirectoryOwnership::UnownedViaMod,\n                 },\n                 path,\n-                warn: false,\n             });\n         }\n \n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n             DirectoryOwnership::UnownedViaBlock |\n-            DirectoryOwnership::UnownedViaMod(_) => None,\n+            DirectoryOwnership::UnownedViaMod => None,\n         };\n         let paths = Parser::default_submod_path(\n                         id, relative, &self.directory.path, self.sess.source_map());\n@@ -169,12 +160,7 @@ impl<'a> Parser<'a> {\n                 }\n                 Err(err)\n             }\n-            DirectoryOwnership::UnownedViaMod(warn) => {\n-                if warn {\n-                    if let Ok(result) = paths.result {\n-                        return Ok(ModulePathSuccess { warn: true, ..result });\n-                    }\n-                }\n+            DirectoryOwnership::UnownedViaMod => {\n                 let mut err = self.diagnostic().struct_span_err(id_sp,\n                     \"cannot declare a new module at this location\");\n                 if !id_sp.is_dummy() {\n@@ -252,14 +238,12 @@ impl<'a> Parser<'a> {\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: Some(id),\n                 },\n-                warn: false,\n             }),\n             (false, true) => Ok(ModulePathSuccess {\n                 path: secondary_path,\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: None,\n                 },\n-                warn: false,\n             }),\n             (false, false) => Err(Error::FileNotFoundForModule {\n                 mod_name: mod_name.clone(),"}, {"sha": "2203e8d9d0637a64ae0fcb3a152937b4dc20d45f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1199,11 +1199,11 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n+            ast::ItemKind::Fn(ref sig, ref param_names, ref body) => {\n                 self.head(\"\");\n                 self.print_fn(\n-                    decl,\n-                    header,\n+                    &sig.decl,\n+                    sig.header,\n                     Some(item.ident),\n                     param_names,\n                     &item.vis\n@@ -1541,7 +1541,7 @@ impl<'a> State<'a> {\n     crate fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n                             generics: &ast::Generics,\n-                            m: &ast::MethodSig,\n+                            m: &ast::FnSig,\n                             vis: &ast::Visibility)\n                             {\n         self.print_fn(&m.decl,"}, {"sha": "ea2dc357e6ebf0630284b6c436e0274f67c9a586", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -25,7 +25,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// E.g., `fn foo(&self)`.\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a Block),\n \n     /// E.g., `|x, y| body`.\n     Closure(&'a Expr),\n@@ -244,12 +244,11 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, ref header, ref generics, ref body) => {\n+        ItemKind::Fn(ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_fn_header(header);\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, header,\n-                                            &item.vis, body),\n-                             declaration,\n+            visitor.visit_fn_header(&sig.header);\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, &sig.header, &item.vis, body),\n+                             &sig.decl,\n                              item.span,\n                              item.id)\n         }"}, {"sha": "516b284cecd609cbe2158aa98a408247a7d87325", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1301,7 +1301,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         Some(_) => DirectoryOwnership::Owned {\n                             relative: Some(item.ident),\n                         },\n-                        None => DirectoryOwnership::UnownedViaMod(false),\n+                        None => DirectoryOwnership::UnownedViaMod,\n                     };\n                     path.pop();\n                     module.directory = path;"}, {"sha": "b24306def7482941591fbdbd6692aeb15dc35c11", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -950,7 +950,7 @@ impl<'a> MethodDef<'a> {\n \n         let trait_lo_sp = trait_.span.shrink_to_lo();\n \n-        let sig = ast::MethodSig {\n+        let sig = ast::FnSig {\n             header: ast::FnHeader {\n                 unsafety,\n                 abi: Abi::new(abi, trait_lo_sp),"}, {"sha": "dc29e057455d131141ab42aae6f9effd2e176622", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,7 +1,7 @@\n use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n-use syntax::ast::{self, Param, Attribute, Expr, FnHeader, Generics, Ident};\n+use syntax::ast::{self, Param, Attribute, Expr, FnSig, FnHeader, Generics, Ident};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -73,15 +73,10 @@ impl AllocFnFactory<'_, '_> {\n             .collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n-        let kind = ItemKind::Fn(\n-            self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n-            FnHeader {\n-                unsafety: Unsafety::Unsafe,\n-                ..FnHeader::default()\n-            },\n-            Generics::default(),\n-            self.cx.block_expr(output_expr),\n-        );\n+        let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n+        let header = FnHeader { unsafety: Unsafety::Unsafe, ..FnHeader::default() };\n+        let sig = FnSig { decl, header };\n+        let kind = ItemKind::Fn(sig, Generics::default(), self.cx.block_expr(output_expr));\n         let item = self.cx.item(\n             self.span,\n             self.cx.ident_of(&self.kind.fn_name(method.name), self.span),"}, {"sha": "8656100c92127ae9eda4b6b80fb9b0832b795b52", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -310,15 +310,15 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(ref decl, ref header, ref generics, _) = i.kind {\n-        if header.unsafety == ast::Unsafety::Unsafe {\n+    if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n+        if sig.header.unsafety == ast::Unsafety::Unsafe {\n             sd.span_err(\n                 i.span,\n                 \"unsafe functions cannot be used for tests\"\n             );\n             return false\n         }\n-        if header.asyncness.node.is_async() {\n+        if sig.header.asyncness.node.is_async() {\n             sd.span_err(\n                 i.span,\n                 \"async functions cannot be used for tests\"\n@@ -329,13 +329,13 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n \n         // If the termination trait is active, the compiler will check that the output\n         // type implements the `Termination` trait as `libtest` enforces that.\n-        let has_output = match decl.output {\n+        let has_output = match sig.decl.output {\n             ast::FunctionRetTy::Default(..) => false,\n             ast::FunctionRetTy::Ty(ref t) if t.kind.is_unit() => false,\n             _ => true\n         };\n \n-        if !decl.inputs.is_empty() {\n+        if !sig.decl.inputs.is_empty() {\n             sd.span_err(i.span, \"functions used as tests can not have any arguments\");\n             return false;\n         }\n@@ -361,10 +361,10 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(ref decl, _, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(ref sig, _, _) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n-        decl.inputs.len() == 1\n+        sig.decl.inputs.len() == 1\n     } else {\n         false\n     };"}, {"sha": "1492f6f575ff71a64c7ee77e6a24871df05ea524", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -306,10 +306,9 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         ecx.block(sp, vec![call_test_main])\n     };\n \n-    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n-                           ast::FnHeader::default(),\n-                           ast::Generics::default(),\n-                           main_body);\n+    let decl = ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty));\n+    let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n+    let main = ast::ItemKind::Fn(sig, ast::Generics::default(), main_body);\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}, {"sha": "ae82ffd63838b9a4449eae1a45302e3f2aeae817", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -739,7 +739,6 @@ symbols! {\n         visible_private_types,\n         volatile,\n         warn,\n-        warn_directory_ownership,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}, {"sha": "e7a806a846820cd4e33ecbd7d5e32a4613778289", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n LL |     fn foo(i32);\n-   |               ^ expected one of `:`, `@`, or `|` here\n+   |               ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a `self` type, give it a parameter name\n@@ -22,7 +22,7 @@ error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:8:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                    ^ expected one of `:`, `@`, or `|` here\n+   |                                    ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a `self` type, give it a parameter name\n@@ -42,7 +42,7 @@ error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:8:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                            ^ expected one of `:`, `@`, or `|` here\n+   |                                            ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -58,7 +58,7 @@ error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:13:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n-   |                      ^ expected one of `:`, `@`, or `|` here\n+   |                      ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "92cef80c19360d27c6b0ebd71fad26730fe750cc", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -130,7 +130,7 @@ error: expected one of `.`, `?`, `{`, or an operator, found `}`\n   --> $DIR/incorrect-syntax-suggestions.rs:134:1\n    |\n LL |     match await { await => () }\n-   |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n+   |     -----                      - expected one of `.`, `?`, `{`, or an operator\n    |     |\n    |     while parsing this match expression\n ..."}, {"sha": "05cdbff0bf042f6eec7718747ddb33d44d45e0b7", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `fn` or `unsafe`, found keyword `const`\n   --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}\n-   |           ^^^^^ expected one of `fn` or `unsafe` here\n+   |           ^^^^^ expected one of `fn` or `unsafe`\n \n error: aborting due to previous error\n "}, {"sha": "bbeb34278490be206d2bf5a13b85bca659f2ee28", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,13 +2,13 @@ error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:7:12\n    |\n LL |     unsafe async fn g() {}\n-   |            ^^^^^ expected one of `extern` or `fn` here\n+   |            ^^^^^ expected one of `extern` or `fn`\n \n error: expected one of `extern`, `fn`, or `{`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n    |\n LL | unsafe async fn f() {}\n-   |        ^^^^^ expected one of `extern`, `fn`, or `{` here\n+   |        ^^^^^ expected one of `extern`, `fn`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d674fc36bc2bdcf7429336ee63c41f17fd161b51", "filename": "src/test/ui/can-begin-expr-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n LL |     return enum;\n-   |            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "17d4df2a22324fa1b973bd34c38c8e51191189b1", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -16,7 +16,7 @@ error: expected one of `,`, `.`, `?`, or an operator, found `1`\n   --> $DIR/bad-format-args.rs:4:19\n    |\n LL |     format!(\"\", 1 1);\n-   |                   ^ expected one of `,`, `.`, `?`, or an operator here\n+   |                   ^ expected one of `,`, `.`, `?`, or an operator\n \n error: aborting due to 3 previous errors\n "}, {"sha": "28bea4ec94f13d0e3c9442464139a294badfb35f", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,` or `>`, found `+`\n   --> $DIR/const-expression-parameter.rs:13:22\n    |\n LL |     i32_identity::<1 + 2>();\n-   |                      ^ expected one of `,` or `>` here\n+   |                      ^ expected one of `,` or `>`\n \n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/const-expression-parameter.rs:1:12"}, {"sha": "30ae6ed4c6d493850a755ef20fe9de64cf8586e9", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -48,7 +48,7 @@ error: expected one of `!` or `::`, found `(`\n   --> $DIR/issue-40006.rs:28:9\n    |\n LL |     ::Y ();\n-   |         ^ expected one of `!` or `::` here\n+   |         ^ expected one of `!` or `::`\n \n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:32:8"}, {"sha": "f230395f7a51b5362288d2f5345617fa22afa3ce", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -24,7 +24,7 @@ error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found\n LL |     if (a and b) {\n    |           ^^^\n    |           |\n-   |           expected one of 8 possible tokens here\n+   |           expected one of 8 possible tokens\n    |           help: use `&&` instead of `and` for the boolean operator\n \n error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `or`\n@@ -33,7 +33,7 @@ error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found\n LL |     if (a or b) {\n    |           ^^\n    |           |\n-   |           expected one of 8 possible tokens here\n+   |           expected one of 8 possible tokens\n    |           help: use `||` instead of `or` for the boolean operator\n \n error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n@@ -42,7 +42,7 @@ error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n LL |     while a and b {\n    |             ^^^\n    |             |\n-   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator here\n+   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n    |             help: use `&&` instead of `and` for the boolean operator\n \n error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n@@ -51,7 +51,7 @@ error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n LL |     while a or b {\n    |             ^^\n    |             |\n-   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator here\n+   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n    |             help: use `||` instead of `or` for the boolean operator\n \n error: aborting due to 6 previous errors"}, {"sha": "22a7495ca234a31a1b95c532fb6b914fd00c92fc", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -36,7 +36,7 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n   --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n    |\n LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||` here\n+   |                      ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2015-parsing.rs:16:8\n    |"}, {"sha": "7488fcc2e584e624d40722610a48bf89888a3a17", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -36,7 +36,7 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n   --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n    |\n LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||` here\n+   |                      ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2018-parsing.rs:16:8\n    |"}, {"sha": "80c602eb00afb61503e7dca2a5ef9408cd0d41bf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -15,7 +15,7 @@ mod inline {\n     //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] fn f() { }\n-    //~^ WARN attribute must be of the form\n+    //~^ ERROR attribute must be of the form\n     //~| WARN this was previously accepted\n \n     #[inline] struct S;"}, {"sha": "0987937192fe21f9ea681bfb12770f69ff9deedf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,10 +1,10 @@\n-warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n   --> $DIR/issue-43106-gating-of-inline.rs:17:5\n    |\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(ill_formed_attribute_input)]` on by default\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n@@ -47,6 +47,6 @@ error[E0518]: attribute should be applied to function or closure\n LL |     #[inline] impl S { }\n    |     ^^^^^^^^^ ---------- not a function or closure\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0518`."}, {"sha": "d72e47e9ed8ffda77f14fdc1b923e2e6a3d4535c", "filename": "src/test/ui/feature-gates/feature-gate-extern_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_prelude.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!` or `::`, found `-`\n   --> $DIR/feature-gate-extern_prelude.rs:1:4\n    |\n LL | can-only-test-this-in-run-make-fulldeps\n-   |    ^ expected one of `!` or `::` here\n+   |    ^ expected one of `!` or `::`\n \n error: aborting due to previous error\n "}, {"sha": "0daec3305c0aeb399d9e5fa52fe6116b6873e13f", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,42 +1,17 @@\n // rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n // properly check syntax hidden behind an associated type projection,\n // but it did catch *some cases*. This is checking that we continue to\n-// properly emit errors for those, even with the new\n-// future-incompatibility warnings.\n+// properly emit errors for those.\n //\n // issue-57979-nested-impl-trait-in-assoc-proj.rs shows the main case\n // that we were previously failing to catch.\n \n struct Deeper<T>(T);\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "6bebbc01f3d6f88142fa8fdec54941e366fac1a3", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,30 +1,12 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:18:59\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:14:48\n    |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n+LL | pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+   |                                       ---------^^^^^^^^-\n+   |                                       |        |\n+   |                                       |        nested `impl Trait` here\n+   |                                       outer `impl Trait`\n \n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:28:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:38:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0666`."}, {"sha": "c5ecd1caae1f946de6141ff9d3f21b69a1f5dcd1", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within a path\n // component in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ WARN `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ ERROR `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n+pub trait Bar { }\n+pub trait Quux<T> { type Assoc; }\n+pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+impl<T> Quux<T> for () { type Assoc = u32; }\n \n fn main() { }"}, {"sha": "f64545d83b8d6b7f1324db534020da9776944c8e", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.stderr", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,30 +1,8 @@\n-warning: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:20:52\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:8:48\n    |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:31:52\n-   |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+LL | pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a444d3dfddfa12a18cb650c2f788e318009fea3", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within an\n // `impl Trait` in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ WARN nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "8d3d4b5e20618b0eb4af44bbaa5f3b8a5b0a6442", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,36 +1,12 @@\n-warning: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:21:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:32:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:9:41\n+   |\n+LL | pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                ---------^^^^^^^^-\n+   |                                |        |\n+   |                                |        nested `impl Trait` here\n+   |                                outer `impl Trait`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0666`."}, {"sha": "6c12a366b7152ffc5e697811f21ed16d7a809c6c", "filename": "src/test/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `;`, or `as`, found `{`\n   --> $DIR/import-prefix-macro-1.rs:11:27\n    |\n LL |     ($p: path) => (use $p {S, Z});\n-   |                           ^^^^^^ expected one of `::`, `;`, or `as` here\n+   |                           ^^^^^^ expected one of `::`, `;`, or `as`\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation"}, {"sha": "7e58b17e7db749af5fc0eec1b217c73ce011a89d", "filename": "src/test/ui/invalid/invalid-variadic-function.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ error: expected one of `->`, `where`, or `{`, found `;`\n   --> $DIR/invalid-variadic-function.rs:1:30\n    |\n LL | extern \"C\" fn foo(x: u8, ...);\n-   |                              ^ expected one of `->`, `where`, or `{` here\n+   |                              ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "15d072957cbd8292639e7abd96225a7a50ccf386", "filename": "src/test/ui/issues/auxiliary/issue-38715-modern.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,7 +0,0 @@\n-#![allow(duplicate_macro_exports)]\n-\n-#[macro_export]\n-macro_rules! foo_modern { ($i:ident) => {} }\n-\n-#[macro_export]\n-macro_rules! foo_modern { () => {} }"}, {"sha": "5c15073f5a5e687a65621ddbb9d7aaea5437f0e8", "filename": "src/test/ui/issues/auxiliary/issue-38715.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,7 +0,0 @@\n-#![allow(duplicate_macro_exports)]\n-\n-#[macro_export]\n-macro_rules! foo { ($i:ident) => {} }\n-\n-#[macro_export]\n-macro_rules! foo { () => {} }"}, {"sha": "d80eefc41bf53cd3bba4cf0a9ba46eec8b024f80", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,10 +1,7 @@\n-#![allow(safe_extern_statics, warnings)]\n-\n extern {\n     pub static symbol: u32;\n }\n static CRASH: u32 = symbol;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "f9cdbe452df9c4b5f09774dd4dbf95a5467a0b14", "filename": "src/test/ui/issues/issue-14227.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-14227.rs:6:21\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-14227.rs:4:21\n    |\n LL | static CRASH: u32 = symbol;\n-   |                     ^^^^^^ tried to read from foreign (extern) static\n+   |                     ^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "54d9a732912c77b80ac6ed0bdb59027c6fcdd337", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,5 +1,3 @@\n-#![allow(safe_extern_statics)]\n-\n mod Y {\n     pub type X = usize;\n     extern {\n@@ -13,5 +11,6 @@ mod Y {\n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n //~| ERROR E0015\n+//~| ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "5e1f95a989ee0fbf7cc812ecdf6e360a019a76b6", "filename": "src/test/ui/issues/issue-16538.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,19 +1,27 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:13:27\n+  --> $DIR/issue-16538.rs:11:27\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:13:1\n+  --> $DIR/issue-16538.rs:11:1\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `*const usize`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:11:34\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                                  ^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n+Some errors have detailed explanations: E0015, E0133, E0277.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "816046237854a5de89336d6024746b69ebad4027", "filename": "src/test/ui/issues/issue-20616-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,`, `:`, or `>`, found `T`\n   --> $DIR/issue-20616-1.rs:9:16\n    |\n LL | type Type_1<'a T> = &'a T;\n-   |                ^ expected one of `,`, `:`, or `>` here\n+   |                ^ expected one of `,`, `:`, or `>`\n \n error: aborting due to previous error\n "}, {"sha": "50ec7a304c5c161811b48b178ff0bda05ab23aeb", "filename": "src/test/ui/issues/issue-20616-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,` or `>`, found `(`\n   --> $DIR/issue-20616-2.rs:12:31\n    |\n LL | type Type_2 = Type_1_<'static ()>;\n-   |                               ^ expected one of `,` or `>` here\n+   |                               ^ expected one of `,` or `>`\n \n error: aborting due to previous error\n "}, {"sha": "cc4d79484e7a4538578516a9ded668e5d370e494", "filename": "src/test/ui/issues/issue-20616-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n   --> $DIR/issue-20616-3.rs:13:24\n    |\n LL | type Type_3<T> = Box<T,,>;\n-   |                        ^ expected one of `>`, const, identifier, lifetime, or type here\n+   |                        ^ expected one of `>`, const, identifier, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "254e4d6a34dc5e1b96df1bdd59581afd4971382e", "filename": "src/test/ui/issues/issue-20616-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-4.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n   --> $DIR/issue-20616-4.rs:16:34\n    |\n LL | type Type_4<T> = Type_1_<'static,, T>;\n-   |                                  ^ expected one of `>`, const, identifier, lifetime, or type here\n+   |                                  ^ expected one of `>`, const, identifier, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "aee8bf01a4321fde707ceb93bd806ee030c099a8", "filename": "src/test/ui/issues/issue-20616-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-5.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n   --> $DIR/issue-20616-5.rs:22:34\n    |\n LL | type Type_5<'a> = Type_1_<'a, (),,>;\n-   |                                  ^ expected one of `>`, const, identifier, lifetime, or type here\n+   |                                  ^ expected one of `>`, const, identifier, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "7192a87bc18f5636b6d329456a39a2d07a1f70aa", "filename": "src/test/ui/issues/issue-20616-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-6.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n   --> $DIR/issue-20616-6.rs:25:26\n    |\n LL | type Type_6 = Type_5_<'a,,>;\n-   |                          ^ expected one of `>`, const, identifier, lifetime, or type here\n+   |                          ^ expected one of `>`, const, identifier, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "123dc1e2b7d9c996bb0fe88840472b2b80ca46ca", "filename": "src/test/ui/issues/issue-20616-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-7.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, identifier, lifetime, or type, found `,`\n   --> $DIR/issue-20616-7.rs:28:22\n    |\n LL | type Type_7 = Box<(),,>;\n-   |                      ^ expected one of `>`, const, identifier, lifetime, or type here\n+   |                      ^ expected one of `>`, const, identifier, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "479469634c523b9847a4d3bfc875204a763defe6", "filename": "src/test/ui/issues/issue-20616-8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-8.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/issue-20616-8.rs:31:16\n    |\n LL | type Type_8<'a,,> = &'a ();\n-   |                ^ expected one of `>`, `const`, identifier, or lifetime here\n+   |                ^ expected one of `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "b7e3322b7aa9207dd393f9df4124882cf86e25a7", "filename": "src/test/ui/issues/issue-20616-9.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20616-9.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/issue-20616-9.rs:34:15\n    |\n LL | type Type_9<T,,> = Box<T>;\n-   |               ^ expected one of `>`, `const`, identifier, or lifetime here\n+   |               ^ expected one of `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "c71fda3d63fe92553a09cc597fdb2f656eed237d", "filename": "src/test/ui/issues/issue-21146.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-21146.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-21146.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21146.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!` or `::`, found `<eof>`\n   --> $DIR/auxiliary/issue-21146-inc.rs:3:1\n    |\n LL | parse_error\n-   | ^^^^^^^^^^^ expected one of `!` or `::` here\n+   | ^^^^^^^^^^^ expected one of `!` or `::`\n \n error: aborting due to previous error\n "}, {"sha": "bb48508a4a438d5f51eb853447411932b8babf62", "filename": "src/test/ui/issues/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,11 +1,8 @@\n-#![allow(safe_extern_statics)]\n-\n extern {\n     static error_message_count: u32;\n }\n \n pub static BAZ: u32 = *&error_message_count;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "d7dad99215204f0f02985133fa3809a59dd297d3", "filename": "src/test/ui/issues/issue-28324.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-28324.rs:7:23\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28324.rs:5:24\n    |\n LL | pub static BAZ: u32 = *&error_message_count;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^ tried to read from foreign (extern) static\n+   |                        ^^^^^^^^^^^^^^^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "e713a64d3f5a63fdd94ba260a5cff679bddee299", "filename": "src/test/ui/issues/issue-32995-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,18 +1,13 @@\n-#![allow(unused)]\n-\n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     { fn f() -> impl ::std::marker()::Send { } }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-//~| WARN previously accepted"}, {"sha": "6c2d772a23332cf48ad7a0beeb7481a2f486c942", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,30 +1,21 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:22\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:2:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                      ^^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:5:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:12:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^^^^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "0d07a76939f2a214aa4f44d942bd4afc7f763660", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,33 +1,24 @@\n-#![allow(unused)]\n-\n fn main() {\n     let x: usize() = 1;\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }"}, {"sha": "b868011b99b2443672e3a7104530a09649766d24", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 22, "deletions": 43, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,66 +1,45 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:12\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:2:12\n    |\n LL |     let x: usize() = 1;\n-   |            ^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |            ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:19\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:5:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                   ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                   ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:20\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:8:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                    ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                    ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:25\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:11:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                         ^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                         ^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:14:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:35\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:17:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                   ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                                   ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:22:13\n    |\n LL |     let d : X() = Default::default();\n-   |             ^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "a3749487ac92f85fa7e36f52d4b38053b0eca047", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -14,7 +14,7 @@ error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         ---                 ^ expected one of `,` or `>` here\n+   |         ---                 ^ expected one of `,` or `>`\n    |         | |\n    |         | help: use `=` if you meant to assign\n    |         while parsing the type for `sr`"}, {"sha": "e3c3a027f3cd0cd3829e61b4d955b1afbb99dfa1", "filename": "src/test/ui/issues/issue-38715-rpass.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-// aux-build:issue-38715.rs\n-// aux-build:issue-38715-modern.rs\n-\n-// Test that `#[macro_export] macro_rules!` shadow earlier `#[macro_export] macro_rules!`\n-\n-#[macro_use]\n-extern crate issue_38715;\n-#[macro_use]\n-extern crate issue_38715_modern;\n-\n-fn main() {\n-    foo!();\n-    foo_modern!();\n-}"}, {"sha": "7e9defab588644cf31a6bcaf65e5fa07fb06a037", "filename": "src/test/ui/issues/issue-38715.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -3,6 +3,5 @@ macro_rules! foo { ($i:ident) => {} }\n \n #[macro_export]\n macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n-                              //~| WARN this was previously accepted\n \n fn main() {}"}, {"sha": "d7c4f88ff50792bd90e7988d0b20f67e2361d6ef", "filename": "src/test/ui/issues/issue-38715.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -4,9 +4,6 @@ error: a macro named `foo` has already been exported\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n    |\n-   = note: `#[deny(duplicate_macro_exports)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #35896 <https://github.com/rust-lang/rust/issues/35896>\n note: previous macro export is now shadowed\n   --> $DIR/issue-38715.rs:2:1\n    |"}, {"sha": "74e94eda51faac6b44d53faa310396a64b3b4779", "filename": "src/test/ui/issues/issue-39616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ error: expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n   --> $DIR/issue-39616.rs:1:16\n    |\n LL | fn foo(a: [0; 1]) {}\n-   |                ^ expected one of `)`, `,`, `->`, `where`, or `{` here\n+   |                ^ expected one of `)`, `,`, `->`, `where`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b888cd989a67cf2433f5a28a570748920094779f", "filename": "src/test/ui/issues/issue-44021.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-44021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-44021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44021.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `}`\n   --> $DIR/issue-44021.rs:3:18\n    |\n LL |     fn f() {|x, y}\n-   |                  ^ expected one of `:`, `@`, or `|` here\n+   |                  ^ expected one of `:`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "10fcc46f344eba45aaf14b2d552276187787be66", "filename": "src/test/ui/issues/issue-52496.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ error: expected one of `,` or `}`, found `.`\n   --> $DIR/issue-52496.rs:8:22\n    |\n LL |     let _ = Foo { bar.into(), bat: -1, . };\n-   |             ---      ^ expected one of `,` or `}` here\n+   |             ---      ^ expected one of `,` or `}`\n    |             |\n    |             while parsing this struct\n "}, {"sha": "01d70d861e2c93f572e014c0dbc6d2c880ecc64c", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -11,7 +11,7 @@ error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pu\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n LL |     }\n-   |      - expected one of 10 possible tokens here\n+   |      - expected one of 10 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "39e3ad7b6b4fd221796bae5fdac95446edb3c824", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n   --> $DIR/issue-60075.rs:6:10\n    |\n LL |         });\n-   |          ^ expected one of `.`, `;`, `?`, `else`, or an operator here\n+   |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n   --> $DIR/issue-60075.rs:6:11"}, {"sha": "0036f0f1db0fb57e64b091c69ea508893c75a7d4", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `extern`, `fn`, or `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:6:12\n    |\n LL |     unsafe 'b: {}\n-   |            ^^ expected one of `extern`, `fn`, or `{` here\n+   |            ^^ expected one of `extern`, `fn`, or `{`\n \n error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:10:13\n@@ -27,7 +27,7 @@ error: expected one of `.`, `?`, `{`, or an operator, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:18:17\n    |\n LL |     match false 'b: {}\n-   |     -----       ^^ expected one of `.`, `?`, `{`, or an operator here\n+   |     -----       ^^ expected one of `.`, `?`, `{`, or an operator\n    |     |\n    |     while parsing this match expression\n "}, {"sha": "c4950e0fdf5b2afe6e20aa314fedf2759f1cf557", "filename": "src/test/ui/macro_backtrace/main.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -3,7 +3,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens here\n+   | |                    ^^^^^ expected one of 8 possible tokens\n LL | | }\n    | |_- in this expansion of `pong!`\n ...\n@@ -15,7 +15,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens here\n+   | |                    ^^^^^ expected one of 8 possible tokens\n LL | | }\n    | |_- in this expansion of `pong!`\n ...\n@@ -35,7 +35,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens here\n+   | |                    ^^^^^ expected one of 8 possible tokens\n LL | | }\n    | |_- in this expansion of `pong!` (#5)\n ..."}, {"sha": "4d18a531a800c639e56f92b1e279c9fa006c3f3b", "filename": "src/test/ui/macros/assert-trailing-junk.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,13 +2,13 @@ error: expected one of `,`, `.`, `?`, or an operator, found `some`\n   --> $DIR/assert-trailing-junk.rs:6:18\n    |\n LL |     assert!(true some extra junk, \"whatever\");\n-   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator here\n+   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `,`, `.`, `?`, or an operator, found `some`\n   --> $DIR/assert-trailing-junk.rs:9:18\n    |\n LL |     assert!(true some extra junk);\n-   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator here\n+   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: no rules expected the token `blah`\n   --> $DIR/assert-trailing-junk.rs:12:30"}, {"sha": "1139ef06a1263ac659419180dad7ec38e2a2d13e", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found keyword\n   --> $DIR/issue-54441.rs:3:9\n    |\n LL |         let\n-   |         ^^^ expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n+   |         ^^^ expected one of `crate`, `fn`, `pub`, `static`, or `type`\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "8d750b66838439c05efb3251deee5b08a44ac41b", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,13 +2,13 @@ error: expected one of `)`, `,`, or `::`, found `(`\n   --> $DIR/malformed-derive-entry.rs:1:14\n    |\n LL | #[derive(Copy(Bad))]\n-   |              ^ expected one of `)`, `,`, or `::` here\n+   |              ^ expected one of `)`, `,`, or `::`\n \n error: expected one of `)`, `,`, or `::`, found `=`\n   --> $DIR/malformed-derive-entry.rs:4:14\n    |\n LL | #[derive(Copy=\"bad\")]\n-   |              ^ expected one of `)`, `,`, or `::` here\n+   |              ^ expected one of `)`, `,`, or `::`\n \n error: malformed `derive` attribute input\n   --> $DIR/malformed-derive-entry.rs:7:1"}, {"sha": "ac1444bbaef4ed6ce945c04533535c330aadb66f", "filename": "src/test/ui/malformed/malformed-regressions.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,18 +1,12 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+#[doc] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[ignore()] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[inline = \"\"] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[link] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[link = \"\"] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n \n-#[doc]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[ignore()]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[inline = \"\"]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[link]\n-//~^WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[link = \"\"]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n fn main() {}"}, {"sha": "b14f99be50c2ddfdb7a43f6bb87313ab57a47cdb", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,46 +1,48 @@\n-warning: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"string\"]`\n-  --> $DIR/malformed-regressions.rs:3:1\n+error: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"string\"]`\n+  --> $DIR/malformed-regressions.rs:1:1\n    |\n LL | #[doc]\n    | ^^^^^^\n    |\n-   = note: `#[warn(ill_formed_attribute_input)]` on by default\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[ignore]` or `#[ignore = \"reason\"]`\n-  --> $DIR/malformed-regressions.rs:6:1\n+error: attribute must be of the form `#[ignore]` or `#[ignore = \"reason\"]`\n+  --> $DIR/malformed-regressions.rs:3:1\n    |\n LL | #[ignore()]\n    | ^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n-  --> $DIR/malformed-regressions.rs:9:1\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/malformed-regressions.rs:5:1\n    |\n LL | #[inline = \"\"]\n    | ^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n-  --> $DIR/malformed-regressions.rs:12:1\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:7:1\n    |\n LL | #[link]\n    | ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n-  --> $DIR/malformed-regressions.rs:15:1\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:9:1\n    |\n LL | #[link = \"\"]\n    | ^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "525d09b8fc1c16df6b3029b1bc8550c19d8ac643", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -13,7 +13,7 @@ error: expected one of `(` or `<`, found `{`\n   --> $DIR/recovered-block.rs:19:9\n    |\n LL |     Foo { text: \"\".to_string() }\n-   |         ^ expected one of `(` or `<` here\n+   |         ^ expected one of `(` or `<`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f091082f35f7630c81a5cee8422d3218bce951ed", "filename": "src/test/ui/missing/missing-comma-in-match.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.fixed?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -5,7 +5,7 @@ fn main() {\n         &None => 1,\n         &Some(2) => { 3 }\n         //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n-        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n+        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator\n         _ => 2\n     };\n }"}, {"sha": "54dab4e9750d626a72685a1ac4fcca71862ffcc8", "filename": "src/test/ui/missing/missing-comma-in-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -5,7 +5,7 @@ fn main() {\n         &None => 1\n         &Some(2) => { 3 }\n         //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n-        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n+        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator\n         _ => 2\n     };\n }"}, {"sha": "fe210f697c446d68abbca2f0a18eefd96773b26e", "filename": "src/test/ui/missing/missing-comma-in-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-comma-in-match.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -4,7 +4,7 @@ error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n LL |         &None => 1\n    |                   - help: missing a comma here to end this `match` arm\n LL |         &Some(2) => { 3 }\n-   |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+   |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "738bf7c6c6ba0e60d70a78e25784d878c8f5dac3", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)` or `,`, found `label`\n   --> $DIR/expected-comma-found-token.rs:9:5\n    |\n LL |     message=\"the message\"\n-   |                          - expected one of `)` or `,` here\n+   |                          - expected one of `)` or `,`\n LL |     label=\"the label\"\n    |     ^^^^^ unexpected token\n "}, {"sha": "acf71b4893ab0a0d7cfdb6410edd79ab52814b21", "filename": "src/test/ui/parser/assoc-oddities-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or `}`, found `[`\n   --> $DIR/assoc-oddities-1.rs:10:28\n    |\n LL |     ..if c { a } else { b }[n];\n-   |                            ^ expected one of `.`, `;`, `?`, or `}` here\n+   |                            ^ expected one of `.`, `;`, `?`, or `}`\n \n error: aborting due to previous error\n "}, {"sha": "d3b90c34c29a13f77e1074d60daa7c83a3b658f3", "filename": "src/test/ui/parser/assoc-oddities-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-oddities-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or `}`, found `[`\n   --> $DIR/assoc-oddities-2.rs:5:29\n    |\n LL |     x..if c { a } else { b }[n];\n-   |                             ^ expected one of `.`, `;`, `?`, or `}` here\n+   |                             ^ expected one of `.`, `;`, `?`, or `}`\n \n error: aborting due to previous error\n "}, {"sha": "17bd5b54738b9e8a05edbe55b9f775fe44f609c8", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -13,7 +13,7 @@ error: expected one of `::` or `>`, found `Foo`\n   --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:29\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n-   |                             ^^^ expected one of `::` or `>` here\n+   |                             ^^^ expected one of `::` or `>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d65c423c8daba1195af61c82a5edc8b98f03e07", "filename": "src/test/ui/parser/attr-bad-meta.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `(`, `::`, `=`, `[`, `]`, or `{`, found `*`\n   --> $DIR/attr-bad-meta.rs:1:7\n    |\n LL | #[path*]\n-   |       ^ expected one of `(`, `::`, `=`, `[`, `]`, or `{` here\n+   |       ^ expected one of `(`, `::`, `=`, `[`, `]`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "13784c409cd276b72b16b56e2d9d3700201f1fdf", "filename": "src/test/ui/parser/bad-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `x`\n   --> $DIR/bad-match.rs:2:13\n    |\n LL |   let isize x = 5;\n-   |             ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |             ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "a36b67794fa840a10a330e6fbd19f287ac00d3f7", "filename": "src/test/ui/parser/bad-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `.`\n   --> $DIR/bad-name.rs:4:8\n    |\n LL |   let x.y::<isize>.z foo;\n-   |        ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |        ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "21bf8d19a721e49283387c00d9fd642fa7e702aa", "filename": "src/test/ui/parser/better-expected.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbetter-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbetter-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbetter-expected.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `3`\n   --> $DIR/better-expected.rs:2:19\n    |\n LL |     let x: [isize 3];\n-   |         -         ^ expected one of 7 possible tokens here\n+   |         -         ^ expected one of 7 possible tokens\n    |         |\n    |         while parsing the type for `x`\n "}, {"sha": "000e84f635b7b6306e284452b34be1b61bd1cc8f", "filename": "src/test/ui/parser/bounds-lifetime-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,`, `:`, or `>`, found `'b`\n   --> $DIR/bounds-lifetime-1.rs:1:17\n    |\n LL | type A = for<'a 'b> fn();\n-   |                 ^^ expected one of `,`, `:`, or `>` here\n+   |                 ^^ expected one of `,`, `:`, or `>`\n \n error: aborting due to previous error\n "}, {"sha": "dd3e69c11396d0d31b1ded62b4d0db6f7df193dc", "filename": "src/test/ui/parser/bounds-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,`, `:`, or `>`, found `+`\n   --> $DIR/bounds-lifetime-2.rs:1:17\n    |\n LL | type A = for<'a + 'b> fn();\n-   |                 ^ expected one of `,`, `:`, or `>` here\n+   |                 ^ expected one of `,`, `:`, or `>`\n \n error: aborting due to previous error\n "}, {"sha": "05cebd6d3519316946fe3674b3d854b7121cc259", "filename": "src/test/ui/parser/bounds-lifetime-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `=`, lifetime, or type, found `,`\n   --> $DIR/bounds-lifetime-where.rs:8:14\n    |\n LL | type A where , = u8;\n-   |              ^ expected one of `=`, lifetime, or type here\n+   |              ^ expected one of `=`, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "12b9b61ebd17465259112728d27af3fc0fddeb83", "filename": "src/test/ui/parser/bounds-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/bounds-lifetime.rs:9:14\n    |\n LL | type A = for<,> fn();\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime here\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime\n \n error: aborting due to previous error\n "}, {"sha": "5636ee75c97a8b72f265038310ade044ecf8561a", "filename": "src/test/ui/parser/bounds-type-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-type-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fbounds-type-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type-where.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `:`, `<`, `==`, or `=`, found `,`\n   --> $DIR/bounds-type-where.rs:8:15\n    |\n LL | type A where T, = u8;\n-   |               ^ expected one of 8 possible tokens here\n+   |               ^ expected one of 8 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "3a4dea95d5ddc5f79b9eecd4d1945d2275ccbc03", "filename": "src/test/ui/parser/class-implements-bad-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fclass-implements-bad-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fclass-implements-bad-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclass-implements-bad-trait.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!` or `::`, found `cat`\n   --> $DIR/class-implements-bad-trait.rs:2:7\n    |\n LL | class cat : nonexistent {\n-   |       ^^^ expected one of `!` or `::` here\n+   |       ^^^ expected one of `!` or `::`\n \n error: aborting due to previous error\n "}, {"sha": "bfb7f98c5f527568ba38790e4ceecc9211cbee0f", "filename": "src/test/ui/parser/closure-return-syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `<`, or `{`, found `22`\n   --> $DIR/closure-return-syntax.rs:5:23\n    |\n LL |     let x = || -> i32 22;\n-   |                       ^^ expected one of `!`, `(`, `+`, `::`, `<`, or `{` here\n+   |                       ^^ expected one of `!`, `(`, `+`, `::`, `<`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "dde36cf8ddeed199aa96b2e5dde62238ab881e4c", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, fo\n   --> $DIR/default.rs:22:13\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |             ^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n+   |             ^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5"}, {"sha": "313e88e812bb5342a2675a35cb1a8a390f6750f0", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `(`, `fn`, `static`, or `type`, found keyword `pub`\n   --> $DIR/duplicate-visibility.rs:3:9\n    |\n LL |     pub pub fn foo();\n-   |         ^^^ expected one of `(`, `fn`, `static`, or `type` here\n+   |         ^^^ expected one of `(`, `fn`, `static`, or `type`\n \n error: aborting due to previous error\n "}, {"sha": "398eb5c898cddbe84a20d90b0078ceba6b38b3ff", "filename": "src/test/ui/parser/empty-impl-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `\n   --> $DIR/empty-impl-semicolon.rs:1:9\n    |\n LL | impl Foo;\n-   |         ^ expected one of 8 possible tokens here\n+   |         ^ expected one of 8 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "0e745dc582f4b05007ec618079ee3ba30614eef6", "filename": "src/test/ui/parser/extern-crate-unexpected-token.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `crate`, `fn`, or `{`, found `crte`\n   --> $DIR/extern-crate-unexpected-token.rs:1:8\n    |\n LL | extern crte foo;\n-   |        ^^^^ expected one of `crate`, `fn`, or `{` here\n+   |        ^^^^ expected one of `crate`, `fn`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "0ebe9a0d3ead547152ac2015b00b20f81b8ec88a", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `fn` or `{`, found keyword `mod`\n   --> $DIR/extern-expected-fn-or-brace.rs:4:12\n    |\n LL | extern \"C\" mod foo;\n-   |            ^^^ expected one of `fn` or `{` here\n+   |            ^^^ expected one of `fn` or `{`\n \n error: aborting due to previous error\n "}, {"sha": "eb75c0fc9c6aac89f20b374c97c87d5edbb2e5e3", "filename": "src/test/ui/parser/extern-foreign-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-foreign-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fextern-foreign-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-foreign-crate.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `;` or `as`, found `{`\n   --> $DIR/extern-foreign-crate.rs:4:18\n    |\n LL | extern crate foo {}\n-   |                  ^ expected one of `;` or `as` here\n+   |                  ^ expected one of `;` or `as`\n \n error: aborting due to previous error\n "}, {"sha": "51e9087ffc1e1715c0ede211eccd9cfcbf8a45eb", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -4,7 +4,7 @@ error: expected one of `:`, `@`, or `|`, found `bar`\n LL |     fn foo(&self, &str bar) {}\n    |                   -----^^^\n    |                   |    |\n-   |                   |    expected one of `:`, `@`, or `|` here\n+   |                   |    expected one of `:`, `@`, or `|`\n    |                   help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: expected one of `:`, `@`, or `|`, found `quux`\n@@ -13,26 +13,26 @@ error: expected one of `:`, `@`, or `|`, found `quux`\n LL | fn baz(S quux, xyzzy: i32) {}\n    |        --^^^^\n    |        | |\n-   |        | expected one of `:`, `@`, or `|` here\n+   |        | expected one of `:`, `@`, or `|`\n    |        help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: expected one of `:`, `@`, or `|`, found `a`\n   --> $DIR/inverted-parameters.rs:15:12\n    |\n LL | fn one(i32 a b) {}\n-   |            ^ expected one of `:`, `@`, or `|` here\n+   |            ^ expected one of `:`, `@`, or `|`\n \n error: expected one of `:` or `|`, found `(`\n   --> $DIR/inverted-parameters.rs:18:23\n    |\n LL | fn pattern((i32, i32) (a, b)) {}\n-   |                       ^ expected one of `:` or `|` here\n+   |                       ^ expected one of `:` or `|`\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/inverted-parameters.rs:21:12\n    |\n LL | fn fizz(i32) {}\n-   |            ^ expected one of `:`, `@`, or `|` here\n+   |            ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -50,7 +50,7 @@ error: expected one of `:`, `@`, or `|`, found `S`\n LL | fn missing_colon(quux S) {}\n    |                  -----^\n    |                  |    |\n-   |                  |    expected one of `:`, `@`, or `|` here\n+   |                  |    expected one of `:`, `@`, or `|`\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: aborting due to 6 previous errors"}, {"sha": "87faa7d5ff1bf1aba973b41833449cd10ca5fc13", "filename": "src/test/ui/parser/issue-15980.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -9,7 +9,7 @@ fn main(){\n             //~^ ERROR expected identifier, found keyword `return`\n             //~| NOTE expected identifier, found keyword\n         }\n-        //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n+        //~^ NOTE expected one of `.`, `=>`, `?`, or an operator\n         _ => {}\n         //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n         //~| NOTE unexpected token"}, {"sha": "5cefead2c74d29af835ded00b73fcd3b7204ffd8", "filename": "src/test/ui/parser/issue-15980.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -16,7 +16,7 @@ error: expected one of `.`, `=>`, `?`, or an operator, found reserved identifier\n   --> $DIR/issue-15980.rs:13:9\n    |\n LL |         }\n-   |          - expected one of `.`, `=>`, `?`, or an operator here\n+   |          - expected one of `.`, `=>`, `?`, or an operator\n LL |\n LL |         _ => {}\n    |         ^ unexpected token"}, {"sha": "a3cac676189c0f63bca61fe68a7c45a2e67a8e63", "filename": "src/test/ui/parser/issue-17904.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `==`, or `=`, found `;`\n   --> $DIR/issue-17904.rs:4:33\n    |\n LL | struct Foo<T> where T: Copy, (T);\n-   |                                 ^ expected one of `:`, `==`, or `=` here\n+   |                                 ^ expected one of `:`, `==`, or `=`\n \n error: aborting due to previous error\n "}, {"sha": "4df7f878b9e4be94a5abeb93d7e302ff1ecd31a5", "filename": "src/test/ui/parser/issue-19096.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-19096.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-19096.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19096.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,13 +2,13 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `::`\n   --> $DIR/issue-19096.rs:3:8\n    |\n LL |     t.0::<isize>;\n-   |        ^^ expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |        ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `::`\n   --> $DIR/issue-19096.rs:8:8\n    |\n LL |     t.0::<isize>;\n-   |        ^^ expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |        ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee484890fada8b504340c72df3da561fc9db0345", "filename": "src/test/ui/parser/issue-20711-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pu\n   --> $DIR/issue-20711-2.rs:7:1\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 9 possible tokens here\n+   |                                                  - expected one of 9 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "152c9f1c68975f302f20ec7da0156b1bba2ee22e", "filename": "src/test/ui/parser/issue-20711.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pu\n   --> $DIR/issue-20711.rs:5:1\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 9 possible tokens here\n+   |                                                  - expected one of 9 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "89b454d1973d53511482f228a9f5cb87e9dcbd49", "filename": "src/test/ui/parser/issue-22647.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22647.rs:2:15\n    |\n LL |     let caller<F> = |f: F|\n-   |               ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |               ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "30fabac65640c243402476a36ad0da526b7a78ac", "filename": "src/test/ui/parser/issue-22712.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22712.rs:6:12\n    |\n LL |     let Foo<Vec<u8>>\n-   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "fd7015ccd390701343af0ea1aa9623258051e293", "filename": "src/test/ui/parser/issue-24197.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/issue-24197.rs:2:12\n    |\n LL |     let buf[0] = 0;\n-   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "7aed88768a074dca4db4c9eb836d20a97b88e4ee", "filename": "src/test/ui/parser/issue-24375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24375.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `=>`, `@`, `if`, or `|`, found `[`\n   --> $DIR/issue-24375.rs:6:12\n    |\n LL |         tmp[0] => {}\n-   |            ^ expected one of `=>`, `@`, `if`, or `|` here\n+   |            ^ expected one of `=>`, `@`, `if`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "d9470191b25a46c2aa062ee09fbe08276cb83708", "filename": "src/test/ui/parser/issue-24780.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^ expected one of `!`, `+`, `::`, `where`, or `{` here\n+   |                       ^ expected one of `!`, `+`, `::`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "ab37dd7c39dbe95a3d96eb14fdea1a365b8e4d75", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 7 possible tokens here\n+   |           ^^^ expected one of 7 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "c535ef23b229674d752a260e700040ff298e7916", "filename": "src/test/ui/parser/issue-33455.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-33455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-33455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33455.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `;`, or `as`, found `.`\n   --> $DIR/issue-33455.rs:1:8\n    |\n LL | use foo.bar;\n-   |        ^ expected one of `::`, `;`, or `as` here\n+   |        ^ expected one of `::`, `;`, or `as`\n \n error: aborting due to previous error\n "}, {"sha": "0e191eb7e0a0459ed0b41d61c5a3957c87a695ea", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`,\n   --> $DIR/issue-41155.rs:5:1\n    |\n LL |     pub\n-   |        - expected one of 8 possible tokens here\n+   |        - expected one of 8 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "0844da1bd92a94150743c45dda5d5d48fe921cf4", "filename": "src/test/ui/parser/issue-62660.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n   --> $DIR/issue-62660.rs:7:38\n    |\n LL |     pub fn foo(_: i32, self: Box<Self) {}\n-   |                                      ^ expected one of 7 possible tokens here\n+   |                                      ^ expected one of 7 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "e2a5b4cba06f5948a29caa0b5d449380d87a151b", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -13,7 +13,7 @@ error: expected one of `,` or `}`, found `{`\n   --> $DIR/issue-62973.rs:6:25\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        -       -       -^ expected one of `,` or `}` here\n+   |        -       -       -^ expected one of `,` or `}`\n    |        |       |       |\n    |        |       |       help: `}` may belong here\n    |        |       while parsing this struct\n@@ -42,7 +42,7 @@ LL | fn p() { match s { v, E { [) {) }\n    |          ----- while parsing this match expression\n LL | \n LL | \n-   |  ^ expected one of `.`, `?`, `{`, or an operator here\n+   |  ^ expected one of `.`, `?`, `{`, or an operator\n \n error: incorrect close delimiter: `)`\n   --> $DIR/issue-62973.rs:6:28"}, {"sha": "152601b35380595bbd197596ecae684c6c476972", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -32,7 +32,7 @@ error: expected one of `:` or `|`, found `)`\n   --> $DIR/issue-63135.rs:3:16\n    |\n LL | fn i(n{...,f #\n-   |                ^ expected one of `:` or `|` here\n+   |                ^ expected one of `:` or `|`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4641c286cb80821880ab34f3f2cbd9534b64d74c", "filename": "src/test/ui/parser/lifetime-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,` or `>`, found `;`\n   --> $DIR/lifetime-semicolon.rs:5:30\n    |\n LL | fn foo<'a, 'b>(x: &mut Foo<'a; 'b>) {}\n-   |                              ^ expected one of `,` or `>` here\n+   |                              ^ expected one of `,` or `>`\n \n error: aborting due to previous error\n "}, {"sha": "8cef5ae3758534639e4ce2d35b1b6901ea898984", "filename": "src/test/ui/parser/macro/issue-37234.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or an operator, found `\"\"`\n   --> $DIR/issue-37234.rs:3:19\n    |\n LL |         let x = 5 \"\";\n-   |                   ^^ expected one of `.`, `;`, `?`, or an operator here\n+   |                   ^^ expected one of `.`, `;`, `?`, or an operator\n ...\n LL |     failed!();\n    |     ---------- in this macro invocation"}, {"sha": "46cccba74c0b60b867e72e0b33455ebce7bd57fc", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -13,7 +13,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n   --> $DIR/macro-incomplete-parse.rs:10:14\n    |\n LL |     () => ( 1,\n-   |              ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |              ^ expected one of `.`, `;`, `?`, `}`, or an operator\n ...\n LL |     ignored_expr!();\n    |     ---------------- in this macro invocation"}, {"sha": "dd97a3afa99fe30bec7883bf2b65107a5456ce84", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, fo\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n+   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "9492191b8df143072fab8bce813895b56636f248", "filename": "src/test/ui/parser/macros-no-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `assert_eq`\n   --> $DIR/macros-no-semicolon.rs:3:5\n    |\n LL |     assert_eq!(1, 2)\n-   |                     - expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |                     - expected one of `.`, `;`, `?`, `}`, or an operator\n LL |     assert_eq!(3, 4)\n    |     ^^^^^^^^^ unexpected token\n "}, {"sha": "e10ebf2e2d60af0955b0174f59b96e7113f40a37", "filename": "src/test/ui/parser/match-refactor-to-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let foo =\n         match //~ NOTE while parsing this match expression\n         Some(4).unwrap_or_else(5)\n-        //~^ NOTE expected one of `.`, `?`, `{`, or an operator here\n+        //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n         ; //~ NOTE unexpected token\n         //~^ ERROR expected one of `.`, `?`, `{`, or an operator, found `;`\n "}, {"sha": "5cbf0232bc31ef990d7e7a33d66cf98b3eb5228b", "filename": "src/test/ui/parser/match-refactor-to-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -7,7 +7,7 @@ LL |         match\n    |         while parsing this match expression\n    |         help: try removing this `match`\n LL |         Some(4).unwrap_or_else(5)\n-   |                                  - expected one of `.`, `?`, `{`, or an operator here\n+   |                                  - expected one of `.`, `?`, `{`, or an operator\n LL |\n LL |         ;\n    |         ^ unexpected token"}, {"sha": "e1aed8a6b4ea387042d3ac90c322b8509a87f304", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -16,7 +16,7 @@ LL |\n LL | fn foo(&self) {}\n    |                 -\n    |                 |\n-   |                 expected one of 10 possible tokens here\n+   |                 expected one of 10 possible tokens\n    |                 help: `}` may belong here\n LL | \n LL | trait T {"}, {"sha": "1bd8e445fadd344a8f94e4d8659939597424dd2d", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -15,7 +15,7 @@ LL | trait T {\n LL |     fn foo(&self);\n    |                   -\n    |                   |\n-   |                   expected one of 7 possible tokens here\n+   |                   expected one of 7 possible tokens\n    |                   help: `}` may belong here\n LL | \n LL | pub(crate) struct Bar<T>();"}, {"sha": "ac16ebe6412710cc1a3b86f9527bde767774475f", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -11,7 +11,7 @@ error: expected one of `:` or `|`, found `)`\n   --> $DIR/missing_right_paren.rs:3:11\n    |\n LL | fn main((\u063c\n-   |           ^ expected one of `:` or `|` here\n+   |           ^ expected one of `:` or `|`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a8bb2f7a457ced3ac844005cb055e1e0370d4e8", "filename": "src/test/ui/parser/multitrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmultitrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fmultitrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmultitrait.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `\n   --> $DIR/multitrait.rs:5:9\n    |\n LL | impl Cmp, ToString for S {\n-   |         ^ expected one of 8 possible tokens here\n+   |         ^ expected one of 8 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "90246b92bf0fa7c855048cbd7a777dadfe8fce7d", "filename": "src/test/ui/parser/not-a-pred.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `->`, `where`, or `{`, found `:`\n   --> $DIR/not-a-pred.rs:3:26\n    |\n LL | fn f(a: isize, b: isize) : lt(a, b) { }\n-   |                          ^ expected one of `->`, `where`, or `{` here\n+   |                          ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "c7c76a7f1d42c0d05183b681376ec521736cc433", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/omitted-arg-in-item-fn.rs:1:9\n    |\n LL | fn foo(x) {\n-   |         ^ expected one of `:`, `@`, or `|` here\n+   |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "e8ccbad668a2bb0f1912baac19f68bc14ad5d23f", "filename": "src/test/ui/parser/pat-lt-bracket-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `=>`, `@`, `if`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-1.rs:3:7\n    |\n LL |     x < 7 => (),\n-   |       ^ expected one of `=>`, `@`, `if`, or `|` here\n+   |       ^ expected one of `=>`, `@`, `if`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "e51dd57f9c7071d756cc8542fe26718ba955c318", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-2.rs:1:7\n    |\n LL | fn a(B<) {}\n-   |       ^ expected one of `:`, `@`, or `|` here\n+   |       ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a type, explicitly ignore the parameter name"}, {"sha": "bacf868e3c4e7f42285d6c731a530154a2170ec9", "filename": "src/test/ui/parser/pat-lt-bracket-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `=>`, `@`, `if`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-3.rs:6:16\n    |\n LL |             Foo<T>(x, y) => {\n-   |                ^ expected one of `=>`, `@`, `if`, or `|` here\n+   |                ^ expected one of `=>`, `@`, `if`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "911c276b9319acdbfe8d8682f2a6c1b8a2ad4fdc", "filename": "src/test/ui/parser/pat-lt-bracket-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-4.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `=>`, `@`, `if`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-4.rs:8:12\n    |\n LL |         Foo<T>::A(value) => value,\n-   |            ^ expected one of `=>`, `@`, `if`, or `|` here\n+   |            ^ expected one of `=>`, `@`, `if`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "e23674bcec5879fd92e9e3dfd6fdcb264a2e8add", "filename": "src/test/ui/parser/pat-lt-bracket-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-5.rs:2:10\n    |\n LL |     let v[0] = v[1];\n-   |          ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |          ^ expected one of `:`, `;`, `=`, `@`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "234e0c37723a754947d0ea9d38f5fb2d1e3ad59c", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-6.rs:5:19\n    |\n LL |     let Test(&desc[..]) = x;\n-   |                   ^ expected one of `)`, `,`, `@`, or `|` here\n+   |                   ^ expected one of `)`, `,`, `@`, or `|`\n \n error[E0658]: subslice patterns are unstable\n   --> $DIR/pat-lt-bracket-6.rs:5:20"}, {"sha": "86693ac27bd2bb5072d6905523210e8660b94be7", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-7.rs:5:16\n    |\n LL |     for Thing(x[]) in foo {}\n-   |                ^ expected one of `)`, `,`, `@`, or `|` here\n+   |                ^ expected one of `)`, `,`, `@`, or `|`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-lt-bracket-7.rs:9:30"}, {"sha": "b64a3ce5c083dcb6fa6bf83ee4bd6a50d9815ca0", "filename": "src/test/ui/parser/pat-ranges-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, or `|`, found `..=`\n   --> $DIR/pat-ranges-1.rs:4:21\n    |\n LL |     let macropus!() ..= 11 = 12;\n-   |                     ^^^ expected one of `:`, `;`, `=`, or `|` here\n+   |                     ^^^ expected one of `:`, `;`, `=`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "1a9e33bebe914299f3867e04e55510ef1011a1f5", "filename": "src/test/ui/parser/pat-ranges-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `:`, `;`, `=`, or `|`, found `!`\n   --> $DIR/pat-ranges-2.rs:4:26\n    |\n LL |     let 10 ..= makropulos!() = 12;\n-   |                          ^ expected one of `::`, `:`, `;`, `=`, or `|` here\n+   |                          ^ expected one of `::`, `:`, `;`, `=`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "c9787b789a88be40d7a17b2d94f61ffb1ff61400", "filename": "src/test/ui/parser/pat-ranges-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `;`, `=`, or `|`, found `+`\n   --> $DIR/pat-ranges-3.rs:4:19\n    |\n LL |     let 10 ..= 10 + 3 = 12;\n-   |                   ^ expected one of `:`, `;`, `=`, or `|` here\n+   |                   ^ expected one of `:`, `;`, `=`, or `|`\n \n error: aborting due to previous error\n "}, {"sha": "69084b5a414755196c8ea746317773a21dada4d7", "filename": "src/test/ui/parser/pat-ranges-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `...`, `..=`, `..`, `:`, `;`, `=`, or `|`, found `-`\n   --> $DIR/pat-ranges-4.rs:4:12\n    |\n LL |     let 10 - 3 ..= 10 = 8;\n-   |            ^ expected one of 7 possible tokens here\n+   |            ^ expected one of 7 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "f866ea59983b6db54bcc73237fd09b160340168b", "filename": "src/test/ui/parser/range-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frange-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frange-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange-3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or an operator, found `..`\n   --> $DIR/range-3.rs:4:17\n    |\n LL |     let r = 1..2..3;\n-   |                 ^^ expected one of `.`, `;`, `?`, or an operator here\n+   |                 ^^ expected one of `.`, `;`, `?`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "dcb85170c1d3b8eaf33be950308a45e6e3c660c8", "filename": "src/test/ui/parser/range-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frange-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frange-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange-4.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or an operator, found `..`\n   --> $DIR/range-4.rs:4:16\n    |\n LL |     let r = ..1..2;\n-   |                ^^ expected one of `.`, `;`, `?`, or an operator here\n+   |                ^^ expected one of `.`, `;`, `?`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "ddb75722bef9f32c37e39f6da7fcc4eebd8beda2", "filename": "src/test/ui/parser/raw-str-unbalanced.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fraw-str-unbalanced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fraw-str-unbalanced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-str-unbalanced.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `.`, `;`, `?`, or an operator, found `#`\n   --> $DIR/raw-str-unbalanced.rs:3:9\n    |\n LL |       \"##\n-   |         ^ expected one of `.`, `;`, `?`, or an operator here\n+   |         ^ expected one of `.`, `;`, `?`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "fd8eda3770d27fb01c679b06504a4069ad9ea543", "filename": "src/test/ui/parser/raw/raw-literal-keywords.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,19 +2,19 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n   --> $DIR/raw-literal-keywords.rs:2:10\n    |\n LL |     r#if true { }\n-   |          ^^^^ expected one of 8 possible tokens here\n+   |          ^^^^ expected one of 8 possible tokens\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n   --> $DIR/raw-literal-keywords.rs:6:14\n    |\n LL |     r#struct Test;\n-   |              ^^^^ expected one of 8 possible tokens here\n+   |              ^^^^ expected one of 8 possible tokens\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n   --> $DIR/raw-literal-keywords.rs:10:13\n    |\n LL |     r#union Test;\n-   |             ^^^^ expected one of 8 possible tokens here\n+   |             ^^^^ expected one of 8 possible tokens\n \n error[E0425]: cannot find value `if` in this scope\n   --> $DIR/raw-literal-keywords.rs:14:13"}, {"sha": "ee29f06638f11d51e0d26d642db2e72b19c12b32", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,7 @@ error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n   --> $DIR/recover-enum2.rs:25:22\n    |\n LL |             Nope(i32 {})\n-   |                      ^ expected one of 7 possible tokens here\n+   |                      ^ expected one of 7 possible tokens\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ccabfbded8bada9adbb3c2b64396506361e821fb", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n    |\n LL |     for ( elem in vec ) {\n-   |                ^^ expected one of `)`, `,`, `@`, or `|` here\n+   |                ^^ expected one of `)`, `,`, `@`, or `|`\n \n error: unexpected closing `)`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:23"}, {"sha": "a100f689fb8d2c75a18cb9ac3c533d53bc7e4b64", "filename": "src/test/ui/parser/removed-syntax-closure-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-closure-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-closure-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-closure-lifetime.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `/`\n   --> $DIR/removed-syntax-closure-lifetime.rs:1:22\n    |\n LL | type closure = Box<lt/fn()>;\n-   |                      ^ expected one of 7 possible tokens here\n+   |                      ^ expected one of 7 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "2daa6249b4ce0f11f403d4de542021d3c31d0d0b", "filename": "src/test/ui/parser/removed-syntax-enum-newtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `<`, `where`, or `{`, found `=`\n   --> $DIR/removed-syntax-enum-newtype.rs:1:8\n    |\n LL | enum e = isize;\n-   |        ^ expected one of `<`, `where`, or `{` here\n+   |        ^ expected one of `<`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "a2b97544f9e556fb0176a1b58297a820fb8d97c6", "filename": "src/test/ui/parser/removed-syntax-fixed-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-fixed-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-fixed-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-fixed-vec.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `*`\n   --> $DIR/removed-syntax-fixed-vec.rs:1:17\n    |\n LL | type v = [isize * 3];\n-   |                 ^ expected one of 7 possible tokens here\n+   |                 ^ expected one of 7 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "5b388ff4ce0597cc5a506c3f74a6b74e06810aa4", "filename": "src/test/ui/parser/removed-syntax-ptr-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `(`, `::`, `;`, or `<`, found `/`\n   --> $DIR/removed-syntax-ptr-lifetime.rs:1:22\n    |\n LL | type bptr = &lifetime/isize;\n-   |                      ^ expected one of `!`, `(`, `::`, `;`, or `<` here\n+   |                      ^ expected one of `!`, `(`, `::`, `;`, or `<`\n \n error: aborting due to previous error\n "}, {"sha": "dfadefee23c15ba3df0d3a08516db16aae72d14d", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pu\n   --> $DIR/removed-syntax-static-fn.rs:4:5\n    |\n LL | impl S {\n-   |         - expected one of 10 possible tokens here\n+   |         - expected one of 10 possible tokens\n LL |     static fn f() {}\n    |     ^^^^^^ unexpected token\n "}, {"sha": "0703caf5beddd11c18bd18e1a2c54af5eec57399", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, const, lifetime, or type, found keyword `mut`\n   --> $DIR/removed-syntax-uniq-mut-ty.rs:1:20\n    |\n LL | type mut_box = Box<mut isize>;\n-   |                    ^^^ expected one of `>`, const, lifetime, or type here\n+   |                    ^^^ expected one of `>`, const, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "193138d74604dc8bc55b4564f5f6fb5825636449", "filename": "src/test/ui/parser/removed-syntax-with-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,`, `.`, `?`, `}`, or an operator, found `with`\n   --> $DIR/removed-syntax-with-1.rs:8:25\n    |\n LL |     let b = S { foo: () with a, bar: () };\n-   |             -           ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+   |             -           ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator\n    |             |\n    |             while parsing this struct\n "}, {"sha": "024c97cc9c14e83723574522db1af1db84d8b33a", "filename": "src/test/ui/parser/removed-syntax-with-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,` or `}`, found `a`\n   --> $DIR/removed-syntax-with-2.rs:8:31\n    |\n LL |     let b = S { foo: (), with a };\n-   |             -                 ^ expected one of `,` or `}` here\n+   |             -                 ^ expected one of `,` or `}`\n    |             |\n    |             while parsing this struct\n "}, {"sha": "ebf1ff9ff1ea38be795cc02da552d4d184699a62", "filename": "src/test/ui/parser/underscore_item_not_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -86,7 +86,7 @@ error: expected one of `!` or `::`, found reserved identifier `_`\n   --> $DIR/underscore_item_not_const.rs:28:7\n    |\n LL | union _ { f: u8 }\n-   |       ^ expected one of `!` or `::` here\n+   |       ^ expected one of `!` or `::`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "7a461cf630c33f7658092adceae6c2289b32f859", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -13,7 +13,7 @@ error: expected one of `::`, `;`, or `as`, found `foo`\n   --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:19\n    |\n LL | use std::any:: as foo;\n-   |                   ^^^ expected one of `::`, `;`, or `as` here\n+   |                   ^^^ expected one of `::`, `;`, or `as`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5732b6446fea8e1b43b0d3af268ac576a738c292", "filename": "src/test/ui/privacy/legacy-ctor-visibility.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,7 +1,3 @@\n-// ignore-tidy-linelength\n-\n-#![allow(unused)]\n-\n use m::S;\n \n mod m {\n@@ -11,8 +7,7 @@ mod m {\n         use S;\n         fn f() {\n             S(10);\n-            //~^ ERROR private struct constructors are not usable through re-exports in outer modules\n-            //~| WARN this was previously accepted\n+            //~^ ERROR expected function, tuple struct or tuple variant, found struct `S`\n         }\n     }\n }"}, {"sha": "74a1f1ceeffb4c7c3474546dd89f2da2ea4c970d", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,12 +1,13 @@\n-error: private struct constructors are not usable through re-exports in outer modules\n-  --> $DIR/legacy-ctor-visibility.rs:13:13\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `S`\n+  --> $DIR/legacy-ctor-visibility.rs:9:13\n    |\n-LL |             S(10);\n-   |             ^\n-   |\n-   = note: `#[deny(legacy_constructor_visibility)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n+LL | /         fn f() {\n+LL | |             S(10);\n+   | |             ^ help: a function with a similar name exists: `f`\n+LL | |\n+LL | |         }\n+   | |_________- similarly named function `f` defined here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "dd0e2597850378cf4608c98461372205f8e1a7a7", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -10,7 +10,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n   --> $DIR/token-error-correct-3.rs:18:9\n    |\n LL |             fs::create_dir_all(path.as_ref()).map(|()| true)\n-   |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator here\n+   |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator\n LL |         } else {\n    |         ^ unexpected token\n "}, {"sha": "65de150b10071951efdd7b7a4c0d6f7f95e152c7", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,` or `>`, found `&&`\n   --> $DIR/disallowed-positions.rs:242:14\n    |\n LL |         true && let 1 = 1\n-   |              ^^ expected one of `,` or `>` here\n+   |              ^^ expected one of `,` or `>`\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:32:9"}, {"sha": "1e51567a9b1c44b405e47b540df10e4619dbec07", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/param-attrs-2018.rs:3:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n-   |                                         ^ expected one of `:`, `@`, or `|` here\n+   |                                         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a `self` type, give it a parameter name"}, {"sha": "9c8d3f192da2aa9dd224392660a877a704a463d1", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/empty_generics.rs:5:14\n    |\n LL |     type Bar<,>;\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime here\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime\n \n warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n   --> $DIR/empty_generics.rs:1:12"}, {"sha": "0535a078d2c31cb9c3ca006bf03c1aaeeafad5ef", "filename": "src/test/ui/safe-extern-statics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,7 +1,5 @@\n // aux-build:extern-statics.rs\n \n-#![allow(unused)]\n-\n extern crate extern_statics;\n use extern_statics::*;\n \n@@ -11,11 +9,7 @@ extern {\n \n fn main() {\n     let a = A; //~ ERROR use of extern static is unsafe\n-               //~^ WARN this was previously accepted by the compiler\n     let ra = &A; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xa = XA; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xra = &XA; //~ ERROR use of extern static is unsafe\n-                   //~^ WARN this was previously accepted by the compiler\n }"}, {"sha": "b42572ea3eeb52b39dbb55bd128c078f6db5d411", "filename": "src/test/ui/safe-extern-statics.stderr", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,43 +1,35 @@\n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:13:13\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:11:13\n    |\n LL |     let a = A;\n-   |             ^\n+   |             ^ use of extern static\n    |\n-   = note: `#[deny(safe_extern_statics)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:15:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:12:14\n    |\n LL |     let ra = &A;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:17:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:13:14\n    |\n LL |     let xa = XA;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:19:15\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:14:15\n    |\n LL |     let xra = &XA;\n-   |               ^^^\n+   |               ^^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "d3d5b4a6d1e7db7cbbf1be02ed71d4da8213eb51", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `,`, `::`, `as`, or `}`, found `.`\n   --> $DIR/similar-tokens.rs:7:10\n    |\n LL | use x::{A. B};\n-   |          ^ expected one of `,`, `::`, `as`, or `}` here\n+   |          ^ expected one of `,`, `::`, `as`, or `}`\n \n error: aborting due to previous error\n "}, {"sha": "26d686f6f5055022851e907f924ca75ab2ce7d9e", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-34264.rs:1:14\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |              ^ expected one of `:`, `@`, or `|` here\n+   |              ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a type, explicitly ignore the parameter name\n@@ -14,7 +14,7 @@ error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |                           ^ expected one of `:`, `@`, or `|` here\n+   |                           ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -30,7 +30,7 @@ error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n    |\n LL | fn bar(x, y: usize) {}\n-   |         ^ expected one of `:`, `@`, or `|` here\n+   |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "4abffb1ad79f6a12edc8aeb6e7dec83a7d104206", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-64252-self-type.rs:4:15\n    |\n LL | pub fn foo(Box<Self>) { }\n-   |               ^ expected one of `:`, `@`, or `|` here\n+   |               ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a type, explicitly ignore the parameter name\n@@ -14,7 +14,7 @@ error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-64252-self-type.rs:10:15\n    |\n LL |     fn bar(Box<Self>) { }\n-   |               ^ expected one of `:`, `@`, or `|` here\n+   |               ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a `self` type, give it a parameter name"}, {"sha": "94c72a31e5e6c267fe2fb33b01aad852df626658", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -1,9 +1,9 @@\n pub fn foo(num: i32) -> i32 {\n     let foo: i32::from_be(num);\n     //~^ ERROR expected type, found local variable `num`\n+    //~| ERROR type arguments are not allowed for this type\n     //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| ERROR ambiguous associated type\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n     foo\n }\n "}, {"sha": "5353b3a75b24931869eb1766c3f78ab3380996a0", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -6,23 +6,28 @@ LL |     let foo: i32::from_be(num);\n    |            |\n    |            help: use `=` if you meant to assign\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n    |                   ^^^^^^^^^^^^\n+   |                   |\n+   |                   only `Fn` traits may use parentheses\n+   |                   help: use angle brackets instead: `from_be<num>`\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n    |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+LL |     let foo: i32::from_be(num);\n+   |                           ^^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n    |\n LL |     let foo: i32::from_be(num);\n    |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0223, E0573.\n-For more information about an error, try `rustc --explain E0223`.\n+Some errors have detailed explanations: E0109, E0214, E0223, E0573.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "94f39f3b9f1dde107f44c14aeeb3d2004452de43", "filename": "src/test/ui/tuple/tuple-struct-fields/test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test.rs:4:26\n    |\n LL |     struct S2(pub((foo)) ());\n-   |                          ^ expected one of `)` or `,` here\n+   |                          ^ expected one of `)` or `,`\n \n error[E0412]: cannot find type `foo` in this scope\n   --> $DIR/test.rs:4:20"}, {"sha": "9a64ed97ae1d4c6ee3755a8327cbc23e93b4c0d0", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test2.rs:5:26\n    |\n LL |         struct S3(pub $t ());\n-   |                          ^ expected one of `)` or `,` here\n+   |                          ^ expected one of `)` or `,`\n ...\n LL |     define_struct! { (foo) }\n    |     ------------------------ in this macro invocation"}, {"sha": "89ae784882d4de97b3e6aa2c0d04f0eb065a1ec2", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test3.rs:5:27\n    |\n LL |         struct S3(pub($t) ());\n-   |                           ^ expected one of `)` or `,` here\n+   |                           ^ expected one of `)` or `,`\n ...\n LL |     define_struct! { foo }\n    |     ---------------------- in this macro invocation"}, {"sha": "c0d39c59014eca7d094d19ad13c876f2e9a0abc0", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -8,7 +8,6 @@ impl Reactor {\n         //~^ ERROR cannot find value `input_cells` in this scope\n         //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n         //~| ERROR wrong number of type arguments: expected 1, found 0\n-        //~| WARNING this was previously accepted by the compiler but is being phased out\n     }\n }\n "}, {"sha": "7895cf77fc0bf0cacf93bffd8f45746b7aa12145", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -4,15 +4,11 @@ error[E0425]: cannot find value `input_cells` in this scope\n LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-34255-1.rs:7:27\n    |\n LL |         input_cells: Vec::new()\n-   |                           ^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                           ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-34255-1.rs:7:22\n@@ -22,5 +18,5 @@ LL |         input_cells: Vec::new()\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0425.\n+Some errors have detailed explanations: E0107, E0214, E0425.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "47e3c78459d6a0689d3cc96d722f527521e0189b", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `,`, or `::`, found `(`\n   --> $DIR/issue-54516.rs:4:58\n    |\n LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n-   |                            -                             ^ expected one of `!`, `,`, or `::` here\n+   |                            -                             ^ expected one of `!`, `,`, or `::`\n    |                            |\n    |                            help: maybe write a path separator here: `::`\n    |"}, {"sha": "c47042bbe5984228fcd713e65cd1547a190122e7", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `!`, `::`, or `;`, found `(`\n   --> $DIR/issue-60933.rs:2:43\n    |\n LL |     let u: usize = std::mem:size_of::<u32>();\n-   |                            -              ^ expected one of `!`, `::`, or `;` here\n+   |                            -              ^ expected one of `!`, `::`, or `;`\n    |                            |\n    |                            help: maybe write a path separator here: `::`\n    |"}, {"sha": "637fdeead362d11020e77a3e1a94771c4429b305", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e346646e93cc243567e27bb0f4e8716d56ad1f1/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr?ref=9e346646e93cc243567e27bb0f4e8716d56ad1f1", "patch": "@@ -2,7 +2,7 @@ error: expected one of `extern`, `fn`, or `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:3:9\n    |\n LL |     unsafe //{\n-   |           - expected one of `extern`, `fn`, or `{` here\n+   |           - expected one of `extern`, `fn`, or `{`\n LL |         std::mem::transmute::<f32, u32>(1.0);\n    |         ^^^ unexpected token\n "}]}