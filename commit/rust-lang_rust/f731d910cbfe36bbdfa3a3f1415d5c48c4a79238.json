{"sha": "f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzFkOTEwY2JmZTM2YmJkZmEzYTNmMTQxNWQ1YzQ4YzRhNzkyMzg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-25T08:26:38Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-25T08:26:38Z"}, "message": "Move Completions structure definition into completions module", "tree": {"sha": "cc221d5bad05e1b6dc8e30f876b29d274b05e827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc221d5bad05e1b6dc8e30f876b29d274b05e827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "html_url": "https://github.com/rust-lang/rust/commit/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c10672023ead0c1d64486154b6c4145b649568", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c10672023ead0c1d64486154b6c4145b649568", "html_url": "https://github.com/rust-lang/rust/commit/19c10672023ead0c1d64486154b6c4145b649568"}], "stats": {"total": 148, "additions": 74, "deletions": 74}, "files": [{"sha": "db27bdd9cbd9d0cb18033e869d2ee68e5b474685", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -11,3 +11,39 @@ pub(crate) mod postfix;\n pub(crate) mod macro_in_item_position;\n pub(crate) mod trait_impl;\n pub(crate) mod mod_;\n+\n+use crate::item::{Builder, CompletionItem};\n+\n+/// Represents an in-progress set of completions being built.\n+#[derive(Debug, Default)]\n+pub struct Completions {\n+    buf: Vec<CompletionItem>,\n+}\n+\n+impl Completions {\n+    pub fn add(&mut self, item: CompletionItem) {\n+        self.buf.push(item.into())\n+    }\n+\n+    pub fn add_all<I>(&mut self, items: I)\n+    where\n+        I: IntoIterator,\n+        I::Item: Into<CompletionItem>,\n+    {\n+        items.into_iter().for_each(|item| self.add(item.into()))\n+    }\n+}\n+\n+impl Into<Vec<CompletionItem>> for Completions {\n+    fn into(self) -> Vec<CompletionItem> {\n+        self.buf\n+    }\n+}\n+\n+impl Builder {\n+    /// Convenience method, which allows to add a freshly created completion into accumulator\n+    /// without binding it to the variable.\n+    pub(crate) fn add_to(self, acc: &mut Completions) {\n+        acc.add(self.build())\n+    }\n+}"}, {"sha": "f3d6694589b3e9a5979f4998c5eabb09169db165", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -9,7 +9,8 @@ use syntax::{ast, AstNode, SyntaxKind};\n use crate::{\n     context::CompletionContext,\n     generated_lint_completions::{CLIPPY_LINTS, FEATURES},\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    Completions,\n };\n \n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -60,7 +61,7 @@ fn complete_attribute_start(acc: &mut Completions, ctx: &CompletionContext, attr\n         }\n \n         if attribute.kind() == ast::AttrKind::Inner || !attr_completion.prefer_inner {\n-            acc.add(item);\n+            acc.add(item.build());\n         }\n     }\n }\n@@ -152,21 +153,15 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n                 label.push_str(\", \");\n                 label.push_str(dependency);\n             }\n-            acc.add(\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n-                    .kind(CompletionItemKind::Attribute),\n-            );\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n+                .kind(CompletionItemKind::Attribute)\n+                .add_to(acc)\n         }\n \n         for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            acc.add(\n-                CompletionItem::new(\n-                    CompletionKind::Attribute,\n-                    ctx.source_range(),\n-                    custom_derive_name,\n-                )\n-                .kind(CompletionItemKind::Attribute),\n-            );\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), custom_derive_name)\n+                .kind(CompletionItemKind::Attribute)\n+                .add_to(acc)\n         }\n     }\n }\n@@ -182,15 +177,14 @@ fn complete_lint(\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n-            acc.add(\n-                CompletionItem::new(\n-                    CompletionKind::Attribute,\n-                    ctx.source_range(),\n-                    lint_completion.label,\n-                )\n-                .kind(CompletionItemKind::Attribute)\n-                .detail(lint_completion.description),\n-            );\n+            CompletionItem::new(\n+                CompletionKind::Attribute,\n+                ctx.source_range(),\n+                lint_completion.label,\n+            )\n+            .kind(CompletionItemKind::Attribute)\n+            .detail(lint_completion.description)\n+            .add_to(acc)\n         }\n     }\n }"}, {"sha": "c9875045ad4676367058f49684b62c807005ebff", "filename": "crates/completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -4,7 +4,7 @@ use hir::{HasVisibility, Type};\n use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n-use crate::{context::CompletionContext, item::Completions};\n+use crate::{context::CompletionContext, Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {"}, {"sha": "c96f84171bc74d98f6f622ae853ceede8c48a741", "filename": "crates/completion/src/completions/mod_.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -7,7 +7,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{CompletionItem, CompletionItemKind};\n \n-use crate::{context::CompletionContext, item::CompletionKind, item::Completions};\n+use crate::{context::CompletionContext, item::CompletionKind, Completions};\n \n /// Complete mod declaration, i.e. `mod <|> ;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -75,10 +75,9 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             if mod_under_caret.semicolon_token().is_none() {\n                 label.push(';')\n             }\n-            acc.add(\n-                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n-                    .kind(CompletionItemKind::Module),\n-            )\n+            CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n+                .kind(CompletionItemKind::Module)\n+                .add_to(acc)\n         });\n \n     Some(())"}, {"sha": "348f017bd703c00abd29377055ef2f7c6291769b", "filename": "crates/completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -13,8 +13,8 @@ use self::format_like::add_format_like_completions;\n use crate::{\n     config::SnippetCap,\n     context::CompletionContext,\n-    item::{Builder, CompletionKind, Completions},\n-    CompletionItem, CompletionItemKind,\n+    item::{Builder, CompletionKind},\n+    CompletionItem, CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {"}, {"sha": "3595e0fcef895e75f3fb4c2a2d54261223f30c34", "filename": "crates/completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -16,7 +16,7 @@\n \n use crate::{\n     completions::postfix::postfix_snippet, config::SnippetCap, context::CompletionContext,\n-    item::Completions,\n+    Completions,\n };\n use syntax::ast::{self, AstToken};\n "}, {"sha": "6d1d085f4bc779e63ebfe1750b11577ac18494c3", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -272,10 +272,6 @@ pub(crate) struct Builder {\n }\n \n impl Builder {\n-    pub(crate) fn add_to(self, acc: &mut Completions) {\n-        acc.add(self.build())\n-    }\n-\n     pub(crate) fn build(self) -> CompletionItem {\n         let label = self.label;\n         let text_edit = match self.text_edit {\n@@ -376,28 +372,3 @@ impl<'a> Into<CompletionItem> for Builder {\n         self.build()\n     }\n }\n-\n-/// Represents an in-progress set of completions being built.\n-#[derive(Debug, Default)]\n-pub struct Completions {\n-    buf: Vec<CompletionItem>,\n-}\n-\n-impl Completions {\n-    pub fn add(&mut self, item: impl Into<CompletionItem>) {\n-        self.buf.push(item.into())\n-    }\n-    pub fn add_all<I>(&mut self, items: I)\n-    where\n-        I: IntoIterator,\n-        I::Item: Into<CompletionItem>,\n-    {\n-        items.into_iter().for_each(|item| self.add(item.into()))\n-    }\n-}\n-\n-impl Into<Vec<CompletionItem>> for Completions {\n-    fn into(self) -> Vec<CompletionItem> {\n-        self.buf\n-    }\n-}"}, {"sha": "d8e5cf0dad8a311527fe74072abc6b8cd3c37e48", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -14,10 +14,7 @@ mod completions;\n use ide_db::base_db::FilePosition;\n use ide_db::RootDatabase;\n \n-use crate::{\n-    context::CompletionContext,\n-    item::{CompletionKind, Completions},\n-};\n+use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n     config::CompletionConfig,"}, {"sha": "17584f734429fe0806c77f612510d68bae300d35", "filename": "crates/completion/src/presentation.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f731d910cbfe36bbdfa3a3f1415d5c48c4a79238/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpresentation.rs?ref=f731d910cbfe36bbdfa3a3f1415d5c48c4a79238", "patch": "@@ -57,15 +57,17 @@ impl Completions {\n         let kind = match resolution {\n             ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::Module,\n             ScopeDef::ModuleDef(Function(func)) => {\n-                return self.add_function(ctx, *func, Some(local_name));\n+                self.add_function(ctx, *func, Some(local_name));\n+                return;\n             }\n             ScopeDef::ModuleDef(Adt(hir::Adt::Struct(_))) => CompletionItemKind::Struct,\n             // FIXME: add CompletionItemKind::Union\n             ScopeDef::ModuleDef(Adt(hir::Adt::Union(_))) => CompletionItemKind::Struct,\n             ScopeDef::ModuleDef(Adt(hir::Adt::Enum(_))) => CompletionItemKind::Enum,\n \n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                return self.add_enum_variant(ctx, *var, Some(local_name));\n+                self.add_enum_variant(ctx, *var, Some(local_name));\n+                return;\n             }\n             ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::Const,\n             ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::Static,\n@@ -77,13 +79,14 @@ impl Completions {\n             // (does this need its own kind?)\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n             ScopeDef::MacroDef(mac) => {\n-                return self.add_macro(ctx, Some(local_name), *mac);\n+                self.add_macro(ctx, Some(local_name), *mac);\n+                return;\n             }\n             ScopeDef::Unknown => {\n-                return self.add(\n-                    CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n-                        .kind(CompletionItemKind::UnresolvedReference),\n-                );\n+                CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+                    .kind(CompletionItemKind::UnresolvedReference)\n+                    .add_to(self);\n+                return;\n             }\n         };\n \n@@ -189,7 +192,7 @@ impl Completions {\n             }\n         };\n \n-        self.add(builder);\n+        self.add(builder.build());\n     }\n \n     pub(crate) fn add_function(\n@@ -241,7 +244,7 @@ impl Completions {\n \n         builder = builder.add_call_parens(ctx, name, Params::Named(params));\n \n-        self.add(builder)\n+        self.add(builder.build())\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {"}]}