{"sha": "9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmNmNDJjNWZkMGJkOThkZDM0NDUyMzlmMmM2NDE0ZThmZDkzMjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T14:24:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T14:24:20Z"}, "message": "Switch to file ids", "tree": {"sha": "5e6496a681a56e9fd1b6e6bae196538cd471e2d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6496a681a56e9fd1b6e6bae196538cd471e2d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "html_url": "https://github.com/rust-lang/rust/commit/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109658332a75ca91d6dc2bf573e0ab77fa5619ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/109658332a75ca91d6dc2bf573e0ab77fa5619ca", "html_url": "https://github.com/rust-lang/rust/commit/109658332a75ca91d6dc2bf573e0ab77fa5619ca"}], "stats": {"total": 338, "additions": 213, "deletions": 125}, "files": [{"sha": "7c52080cb8f5d71aa9786d50c935ef2a03fa44da", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -37,7 +37,6 @@ pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n const INDEXING_THRESHOLD: usize = 128;\n \n pub struct WorldState {\n-    next_file_id: u32,\n     data: Arc<WorldData>\n }\n \n@@ -47,12 +46,11 @@ pub struct World {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct FileId(u32);\n+pub struct FileId(pub u32);\n \n impl WorldState {\n     pub fn new() -> WorldState {\n         WorldState {\n-            next_file_id: 0,\n             data: Arc::new(WorldData::default())\n         }\n     }\n@@ -61,12 +59,6 @@ impl WorldState {\n         World { data: self.data.clone() }\n     }\n \n-    pub fn new_file_id(&mut self) -> FileId {\n-        let id = FileId(self.next_file_id);\n-        self.next_file_id += 1;\n-        id\n-    }\n-\n     pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n         self.change_files(::std::iter::once((file_id, text)));\n     }"}, {"sha": "058bf36d238aba2d6b9f36d7a7a1ced4acc521b4", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -16,6 +16,7 @@ log = \"0.4.3\"\n url_serde = \"0.2.0\"\n languageserver-types = \"0.49.0\"\n walkdir = \"2.2.0\"\n+im = { version = \"11.0.1\", features = [\"arc\"] }\n text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n \n libsyntax2 = { path = \"../libsyntax2\" }"}, {"sha": "bbe512ece627575eca301b4dd17c87d6b041a879", "filename": "crates/server/src/conv.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -1,10 +1,12 @@\n-use std::path::Path;\n-\n-use languageserver_types::{Range, SymbolKind, Position, TextEdit, Location, Url};\n+use languageserver_types::{\n+    Range, SymbolKind, Position, TextEdit, Location, Url,\n+    TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem,\n+};\n use libeditor::{LineIndex, LineCol, Edit, AtomEdit};\n use libsyntax2::{SyntaxKind, TextUnit, TextRange};\n+use libanalysis::FileId;\n \n-use Result;\n+use {Result, PathMap};\n \n pub trait Conv {\n     type Output;\n@@ -115,21 +117,65 @@ impl ConvWith for AtomEdit {\n     }\n }\n \n-impl<'a> TryConvWith for (&'a Path, TextRange) {\n-    type Ctx = LineIndex;\n-    type Output = Location;\n+impl<'a> TryConvWith for &'a Url {\n+    type Ctx = PathMap;\n+    type Output = FileId;\n+    fn try_conv_with(self, path_map: &PathMap) -> Result<FileId> {\n+        let path = self.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self))?;\n+        path_map.get_id(&path).ok_or_else(|| format_err!(\"unknown file: {}\", path.display()))\n+    }\n+}\n+\n+impl TryConvWith for FileId {\n+    type Ctx = PathMap;\n+    type Output = Url;\n+    fn try_conv_with(self, path_map: &PathMap) -> Result<Url> {\n+        let path = path_map.get_path(self);\n+        let url = Url::from_file_path(path)\n+            .map_err(|()| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+        Ok(url)\n+    }\n+}\n+\n+impl<'a> TryConvWith for &'a TextDocumentItem {\n+    type Ctx = PathMap;\n+    type Output = FileId;\n+    fn try_conv_with(self, path_map: &PathMap) -> Result<FileId> {\n+        self.uri.try_conv_with(path_map)\n+    }\n+}\n \n-    fn try_conv_with(self, line_index: &LineIndex) -> Result<Location> {\n+impl<'a> TryConvWith for &'a VersionedTextDocumentIdentifier {\n+    type Ctx = PathMap;\n+    type Output = FileId;\n+    fn try_conv_with(self, path_map: &PathMap) -> Result<FileId> {\n+        self.uri.try_conv_with(path_map)\n+    }\n+}\n+\n+impl<'a> TryConvWith for &'a TextDocumentIdentifier {\n+    type Ctx = PathMap;\n+    type Output = FileId;\n+    fn try_conv_with(self, path_map: &PathMap) -> Result<FileId> {\n+        self.uri.try_conv_with(path_map)\n+    }\n+}\n+\n+pub fn to_location(\n+    file_id: FileId,\n+    range: TextRange,\n+    path_map: &PathMap,\n+    line_index: &LineIndex,\n+) -> Result<Location> {\n+        let url = file_id.try_conv_with(path_map)?;\n         let loc = Location::new(\n-            Url::from_file_path(self.0)\n-                .map_err(|()| format_err!(\"can't convert path to url: {}\", self.0.display()))?,\n-            self.1.conv_with(line_index),\n+            url,\n+            range.conv_with(line_index),\n         );\n         Ok(loc)\n-    }\n }\n \n-\n pub trait MapConvWith<'a>: Sized {\n     type Ctx;\n     type Output;"}, {"sha": "71d53199cb9cd6144a6fb3355a70750498038861", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -17,23 +17,25 @@ extern crate walkdir;\n extern crate libeditor;\n extern crate libanalysis;\n extern crate libsyntax2;\n+extern crate im;\n \n mod io;\n mod caps;\n mod req;\n mod dispatch;\n-mod util;\n mod conv;\n mod main_loop;\n mod vfs;\n+mod path_map;\n \n use threadpool::ThreadPool;\n use crossbeam_channel::bounded;\n use flexi_logger::{Logger, Duplicate};\n use libanalysis::WorldState;\n \n use ::{\n-    io::{Io, RawMsg, RawResponse, RawRequest, RawNotification}\n+    io::{Io, RawMsg, RawResponse, RawRequest, RawNotification},\n+    path_map::PathMap,\n };\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;"}, {"sha": "637bf1b24f2b220056452e910677aa97f29bfb30", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -11,27 +11,29 @@ use libsyntax2::TextUnit;\n use serde_json::{to_value, from_value};\n \n use ::{\n+    PathMap,\n     req::{self, Decoration}, Result,\n-    util::FilePath,\n-    conv::{Conv, ConvWith, TryConvWith, MapConvWith},\n+    conv::{Conv, ConvWith, TryConvWith, MapConvWith, to_location},\n };\n \n pub fn handle_syntax_tree(\n     world: World,\n+    path_map: PathMap,\n     params: req::SyntaxTreeParams,\n ) -> Result<String> {\n-    let path = params.text_document.file_path()?;\n-    let file = world.file_syntax(&path)?;\n+    let id = params.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(id)?;\n     Ok(libeditor::syntax_tree(&file))\n }\n \n pub fn handle_extend_selection(\n     world: World,\n+    path_map: PathMap,\n     params: req::ExtendSelectionParams,\n ) -> Result<req::ExtendSelectionResult> {\n-    let path = params.text_document.file_path()?;\n-    let file = world.file_syntax(&path)?;\n-    let line_index = world.file_line_index(&path)?;\n+    let file_id = params.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let selections = params.selections.into_iter()\n         .map_conv_with(&line_index)\n         .map(|r| libeditor::extend_selection(&file, r).unwrap_or(r))\n@@ -42,11 +44,12 @@ pub fn handle_extend_selection(\n \n pub fn handle_document_symbol(\n     world: World,\n+    path_map: PathMap,\n     params: req::DocumentSymbolParams,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n-    let path = params.text_document.file_path()?;\n-    let file = world.file_syntax(&path)?;\n-    let line_index = world.file_line_index(&path)?;\n+    let file_id = params.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n \n     let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n@@ -81,11 +84,12 @@ pub fn handle_document_symbol(\n \n pub fn handle_code_action(\n     world: World,\n+    path_map: PathMap,\n     params: req::CodeActionParams,\n ) -> Result<Option<Vec<Command>>> {\n-    let path = params.text_document.file_path()?;\n-    let file = world.file_syntax(&path)?;\n-    let line_index = world.file_line_index(&path)?;\n+    let file_id = params.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let offset = params.range.conv_with(&line_index).start();\n     let mut ret = Vec::new();\n \n@@ -105,6 +109,7 @@ pub fn handle_code_action(\n \n pub fn handle_workspace_symbol(\n     world: World,\n+    path_map: PathMap,\n     params: req::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let all_symbols = params.query.contains(\"#\");\n@@ -119,23 +124,26 @@ pub fn handle_workspace_symbol(\n         q.limit(128);\n         q\n     };\n-    let mut res = exec_query(&world, query)?;\n+    let mut res = exec_query(&world, &path_map, query)?;\n     if res.is_empty() && !all_symbols {\n         let mut query = Query::new(params.query);\n         query.limit(128);\n-        res = exec_query(&world, query)?;\n+        res = exec_query(&world, &path_map, query)?;\n     }\n \n     return Ok(Some(res));\n \n-    fn exec_query(world: &World, query: Query) -> Result<Vec<SymbolInformation>> {\n+    fn exec_query(world: &World, path_map: &PathMap, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n-        for (path, symbol) in world.world_symbols(query) {\n-            let line_index = world.file_line_index(path)?;\n+        for (file_id, symbol) in world.world_symbols(query) {\n+            let line_index = world.file_line_index(file_id)?;\n             let info = SymbolInformation {\n                 name: symbol.name.to_string(),\n                 kind: symbol.kind.conv(),\n-                location: (path, symbol.node_range).try_conv_with(&line_index)?,\n+                location: to_location(\n+                    file_id, symbol.node_range,\n+                    path_map, &line_index\n+                )?,\n                 container_name: None,\n             };\n             res.push(info);\n@@ -146,22 +154,27 @@ pub fn handle_workspace_symbol(\n \n pub fn handle_goto_definition(\n     world: World,\n+    path_map: PathMap,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n-    let path = params.text_document.file_path()?;\n-    let line_index = world.file_line_index(&path)?;\n+    let file_id = params.text_document.try_conv_with(&path_map)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let offset = params.position.conv_with(&line_index);\n     let mut res = Vec::new();\n-    for (path, symbol) in world.approximately_resolve_symbol(&path, offset)? {\n-        let line_index = world.file_line_index(path)?;\n-        let location = (path, symbol.node_range).try_conv_with(&line_index)?;\n+    for (file_id, symbol) in world.approximately_resolve_symbol(file_id, offset)? {\n+        let line_index = world.file_line_index(file_id)?;\n+        let location = to_location(\n+            file_id, symbol.node_range,\n+            &path_map, &line_index,\n+        )?;\n         res.push(location)\n     }\n     Ok(Some(req::GotoDefinitionResponse::Array(res)))\n }\n \n pub fn handle_execute_command(\n     world: World,\n+    path_map: PathMap,\n     mut params: req::ExecuteCommandParams,\n ) -> Result<req::ApplyWorkspaceEditParams> {\n     if params.command.as_str() != \"apply_code_action\" {\n@@ -172,8 +185,8 @@ pub fn handle_execute_command(\n     }\n     let arg = params.arguments.pop().unwrap();\n     let arg: ActionRequest = from_value(arg)?;\n-    let path = arg.text_document.file_path()?;\n-    let file = world.file_syntax(&path)?;\n+    let file_id = arg.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n     let edit = match arg.id {\n         ActionId::FlipComma => libeditor::flip_comma(&file, arg.offset).map(|edit| edit()),\n         ActionId::AddDerive => libeditor::add_derive(&file, arg.offset).map(|edit| edit()),\n@@ -182,7 +195,7 @@ pub fn handle_execute_command(\n         Some(edit) => edit,\n         None => bail!(\"command not applicable\"),\n     };\n-    let line_index = world.file_line_index(&path)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let mut changes = HashMap::new();\n     changes.insert(\n         arg.text_document.uri,\n@@ -231,10 +244,14 @@ impl ActionId {\n     }\n }\n \n-pub fn publish_diagnostics(world: World, uri: Url) -> Result<req::PublishDiagnosticsParams> {\n-    let path = uri.file_path()?;\n-    let file = world.file_syntax(&path)?;\n-    let line_index = world.file_line_index(&path)?;\n+pub fn publish_diagnostics(\n+    world: World,\n+    path_map: PathMap,\n+    uri: Url\n+) -> Result<req::PublishDiagnosticsParams> {\n+    let file_id = uri.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let diagnostics = libeditor::diagnostics(&file)\n         .into_iter()\n         .map(|d| Diagnostic {\n@@ -248,10 +265,14 @@ pub fn publish_diagnostics(world: World, uri: Url) -> Result<req::PublishDiagnos\n     Ok(req::PublishDiagnosticsParams { uri, diagnostics })\n }\n \n-pub fn publish_decorations(world: World, uri: Url) -> Result<req::PublishDecorationsParams> {\n-    let path = uri.file_path()?;\n-    let file = world.file_syntax(&path)?;\n-    let line_index = world.file_line_index(&path)?;\n+pub fn publish_decorations(\n+    world: World,\n+    path_map: PathMap,\n+    uri: Url\n+) -> Result<req::PublishDecorationsParams> {\n+    let file_id = uri.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let decorations = libeditor::highlight(&file)\n         .into_iter()\n         .map(|h| Decoration {"}, {"sha": "2a31297be21e24d21638656ed1452e987d65bc86", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -1,22 +1,21 @@\n mod handlers;\n \n use std::{\n-    path::PathBuf,\n     collections::{HashSet, HashMap},\n };\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{Sender, Receiver};\n use languageserver_types::Url;\n-use libanalysis::{World, WorldState};\n+use libanalysis::{World, WorldState, FileId};\n use serde_json::to_value;\n \n use {\n     req, dispatch,\n-    Task, Result,\n+    Task, Result, PathMap,\n     io::{Io, RawMsg, RawRequest, RawNotification},\n-    util::FilePath,\n     vfs::{FileEvent, FileEventKind},\n+    conv::TryConvWith,\n     main_loop::handlers::{\n         handle_syntax_tree,\n         handle_extend_selection,\n@@ -41,7 +40,8 @@ pub(super) fn main_loop(\n     info!(\"server initialized, serving requests\");\n     let mut next_request_id = 0;\n     let mut pending_requests: HashSet<u64> = HashSet::new();\n-    let mut mem_map: HashMap<PathBuf, Option<String>> = HashMap::new();\n+    let mut path_map = PathMap::new();\n+    let mut mem_map: HashMap<FileId, Option<String>> = HashMap::new();\n     let mut fs_events_receiver = Some(&fs_events_receiver);\n     loop {\n         enum Event {\n@@ -98,12 +98,15 @@ pub(super) fn main_loop(\n                         };\n                         (event.path, text)\n                     })\n-                    .filter_map(|(path, text)| {\n-                        if mem_map.contains_key(path.as_path()) {\n-                            mem_map.insert(path, text);\n+                    .map(|(path, text)| {\n+                        (path_map.get_or_insert(path), text)\n+                    })\n+                    .filter_map(|(id, text)| {\n+                        if mem_map.contains_key(&id) {\n+                            mem_map.insert(id, text);\n                             None\n                         } else {\n-                            Some((path, text))\n+                            Some((id, text))\n                         }\n                     });\n \n@@ -112,12 +115,12 @@ pub(super) fn main_loop(\n             Event::Msg(msg) => {\n                 match msg {\n                     RawMsg::Request(req) => {\n-                        if !on_request(io, world, pool, &task_sender, req)? {\n+                        if !on_request(io, world, &path_map, pool, &task_sender, req)? {\n                             return Ok(());\n                         }\n                     }\n                     RawMsg::Notification(not) => {\n-                        on_notification(io, world, pool, &task_sender, not, &mut mem_map)?\n+                        on_notification(io, world, &mut path_map, pool, &task_sender, not, &mut mem_map)?\n                     }\n                     RawMsg::Response(resp) => {\n                         if !pending_requests.remove(&resp.id) {\n@@ -133,36 +136,38 @@ pub(super) fn main_loop(\n fn on_request(\n     io: &mut Io,\n     world: &WorldState,\n+    path_map: &PathMap,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     req: RawRequest,\n ) -> Result<bool> {\n     let mut req = Some(req);\n     handle_request_on_threadpool::<req::SyntaxTree>(\n-        &mut req, pool, world, sender, handle_syntax_tree,\n+        &mut req, pool, path_map, world, sender, handle_syntax_tree,\n     )?;\n     handle_request_on_threadpool::<req::ExtendSelection>(\n-        &mut req, pool, world, sender, handle_extend_selection,\n+        &mut req, pool, path_map, world, sender, handle_extend_selection,\n     )?;\n     handle_request_on_threadpool::<req::DocumentSymbolRequest>(\n-        &mut req, pool, world, sender, handle_document_symbol,\n+        &mut req, pool, path_map, world, sender, handle_document_symbol,\n     )?;\n     handle_request_on_threadpool::<req::CodeActionRequest>(\n-        &mut req, pool, world, sender, handle_code_action,\n+        &mut req, pool, path_map, world, sender, handle_code_action,\n     )?;\n     handle_request_on_threadpool::<req::WorkspaceSymbol>(\n-        &mut req, pool, world, sender, handle_workspace_symbol,\n+        &mut req, pool, path_map, world, sender, handle_workspace_symbol,\n     )?;\n     handle_request_on_threadpool::<req::GotoDefinition>(\n-        &mut req, pool, world, sender, handle_goto_definition,\n+        &mut req, pool, path_map, world, sender, handle_goto_definition,\n     )?;\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n \n         let world = world.snapshot();\n+        let path_map = path_map.clone();\n         let sender = sender.clone();\n         pool.execute(move || {\n-            let task = match handle_execute_command(world, params) {\n+            let task = match handle_execute_command(world, path_map, params) {\n                 Ok(req) => match to_value(req) {\n                     Err(e) => Task::Die(e.into()),\n                     Ok(params) => {\n@@ -202,39 +207,43 @@ fn on_request(\n fn on_notification(\n     io: &mut Io,\n     world: &mut WorldState,\n+    path_map: &mut PathMap,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     not: RawNotification,\n-    mem_map: &mut HashMap<PathBuf, Option<String>>,\n+    mem_map: &mut HashMap<FileId, Option<String>>,\n ) -> Result<()> {\n     let mut not = Some(not);\n     dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n-        let path = params.text_document.file_path()?;\n-        mem_map.insert(path.clone(), None);\n-        world.change_file(path, Some(params.text_document.text));\n+        let uri = params.text_document.uri;\n+        let path = uri.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+        let file_id = path_map.get_or_insert(path);\n+        mem_map.insert(file_id, None);\n+        world.change_file(file_id, Some(params.text_document.text));\n         update_file_notifications_on_threadpool(\n-            pool, world.snapshot(), sender.clone(), params.text_document.uri,\n+            pool, world.snapshot(), path_map.clone(), sender.clone(), uri,\n         );\n         Ok(())\n     })?;\n     dispatch::handle_notification::<req::DidChangeTextDocument, _>(&mut not, |mut params| {\n-        let path = params.text_document.file_path()?;\n+        let file_id = params.text_document.try_conv_with(path_map)?;\n         let text = params.content_changes.pop()\n             .ok_or_else(|| format_err!(\"empty changes\"))?\n             .text;\n-        world.change_file(path, Some(text));\n+        world.change_file(file_id, Some(text));\n         update_file_notifications_on_threadpool(\n-            pool, world.snapshot(), sender.clone(), params.text_document.uri,\n+            pool, world.snapshot(), path_map.clone(), sender.clone(), params.text_document.uri,\n         );\n         Ok(())\n     })?;\n     dispatch::handle_notification::<req::DidCloseTextDocument, _>(&mut not, |params| {\n-        let path = params.text_document.file_path()?;\n-        let text = match mem_map.remove(&path) {\n+        let file_id = params.text_document.try_conv_with(path_map)?;\n+        let text = match mem_map.remove(&file_id) {\n             Some(text) => text,\n             None => bail!(\"unmatched close notification\"),\n         };\n-        world.change_file(path, text);\n+        world.change_file(file_id, text);\n         let not = req::PublishDiagnosticsParams {\n             uri: params.text_document.uri,\n             diagnostics: Vec::new(),\n@@ -253,16 +262,18 @@ fn on_notification(\n fn handle_request_on_threadpool<R: req::ClientRequest>(\n     req: &mut Option<RawRequest>,\n     pool: &ThreadPool,\n+    path_map: &PathMap,\n     world: &WorldState,\n     sender: &Sender<Task>,\n-    f: fn(World, R::Params) -> Result<R::Result>,\n+    f: fn(World, PathMap, R::Params) -> Result<R::Result>,\n ) -> Result<()>\n {\n     dispatch::handle_request::<R, _>(req, |params, resp| {\n         let world = world.snapshot();\n+        let path_map = path_map.clone();\n         let sender = sender.clone();\n         pool.execute(move || {\n-            let res = f(world, params);\n+            let res = f(world, path_map, params);\n             let task = match resp.into_response(res) {\n                 Ok(resp) => Task::Respond(resp),\n                 Err(e) => Task::Die(e),\n@@ -276,11 +287,12 @@ fn handle_request_on_threadpool<R: req::ClientRequest>(\n fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: World,\n+    path_map: PathMap,\n     sender: Sender<Task>,\n     uri: Url,\n ) {\n     pool.execute(move || {\n-        match publish_diagnostics(world.clone(), uri.clone()) {\n+        match publish_diagnostics(world.clone(), path_map.clone(), uri.clone()) {\n             Err(e) => {\n                 error!(\"failed to compute diagnostics: {:?}\", e)\n             }\n@@ -289,7 +301,7 @@ fn update_file_notifications_on_threadpool(\n                 sender.send(Task::Notify(not));\n             }\n         }\n-        match publish_decorations(world, uri) {\n+        match publish_decorations(world, path_map.clone(), uri) {\n             Err(e) => {\n                 error!(\"failed to compute decorations: {:?}\", e)\n             }"}, {"sha": "2454ba05fed8112d074d833aad13e37c555756ea", "filename": "crates/server/src/path_map.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324/crates%2Fserver%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fpath_map.rs?ref=9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "patch": "@@ -0,0 +1,47 @@\n+use std::path::{PathBuf, Path};\n+use im;\n+use libanalysis::{FileId};\n+\n+#[derive(Debug, Default, Clone)]\n+pub struct PathMap {\n+    next_id: u32,\n+    path2id: im::HashMap<PathBuf, FileId>,\n+    id2path: im::HashMap<FileId, PathBuf>,\n+}\n+\n+impl PathMap {\n+    pub fn new() -> PathMap {\n+        Default::default()\n+    }\n+\n+    pub fn get_or_insert(&mut self, path: PathBuf) -> FileId {\n+        self.path2id.get(path.as_path())\n+            .map(|&id| id)\n+            .unwrap_or_else(|| {\n+                let id = self.new_file_id();\n+                self.insert(path, id);\n+                id\n+            })\n+    }\n+\n+    pub fn get_id(&self, path: &Path) -> Option<FileId> {\n+        self.path2id.get(path).map(|&id| id)\n+    }\n+\n+    pub fn get_path(&self, id: FileId) -> &Path {\n+        self.id2path.get(&id)\n+            .unwrap()\n+            .as_path()\n+    }\n+\n+    fn insert(&mut self, path: PathBuf, id: FileId) {\n+        self.path2id.insert(path.clone(), id);\n+        self.id2path.insert(id, path.clone());\n+    }\n+\n+    fn new_file_id(&mut self) -> FileId {\n+        let id = FileId(self.next_id);\n+        self.next_id += 1;\n+        id\n+    }\n+}"}, {"sha": "6747c20a8950369425798c6d5c49c7fa31a32edc", "filename": "crates/server/src/util.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Fserver%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Fserver%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Futil.rs?ref=109658332a75ca91d6dc2bf573e0ab77fa5619ca", "patch": "@@ -1,33 +0,0 @@\n-use std::path::PathBuf;\n-use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier,\n-                           TextDocumentIdentifier, Url};\n-use ::{Result};\n-\n-pub trait FilePath {\n-    fn file_path(&self) -> Result<PathBuf>;\n-}\n-\n-impl FilePath for TextDocumentItem {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for VersionedTextDocumentIdentifier {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for TextDocumentIdentifier {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for Url {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.to_file_path()\n-            .map_err(|()| format_err!(\"invalid uri: {}\", self))\n-    }\n-}"}]}