{"sha": "dab71516f1f4f6a63e32dffeb2625a12e5113485", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjcxNTE2ZjFmNGY2YTYzZTMyZGZmZWIyNjI1YTEyZTUxMTM0ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T20:44:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T20:44:17Z"}, "message": "Auto merge of #52585 - GuillaumeGomez:generic-impls, r=QuietMisdreavus\n\n[rustdoc] Generic impls\n\nFixes #33772.\n\nr? @QuietMisdreavus", "tree": {"sha": "167f5fe69ffe5db1313a1febdafd30557d4504b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167f5fe69ffe5db1313a1febdafd30557d4504b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab71516f1f4f6a63e32dffeb2625a12e5113485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab71516f1f4f6a63e32dffeb2625a12e5113485", "html_url": "https://github.com/rust-lang/rust/commit/dab71516f1f4f6a63e32dffeb2625a12e5113485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab71516f1f4f6a63e32dffeb2625a12e5113485/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "url": "https://api.github.com/repos/rust-lang/rust/commits/4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "html_url": "https://github.com/rust-lang/rust/commit/4234adf0d4fa56e8a8b8d790fb4992d160ab2188"}, {"sha": "06364bd46019bc598d5c8eb16ae1481d57827530", "url": "https://api.github.com/repos/rust-lang/rust/commits/06364bd46019bc598d5c8eb16ae1481d57827530", "html_url": "https://github.com/rust-lang/rust/commit/06364bd46019bc598d5c8eb16ae1481d57827530"}], "stats": {"total": 315, "additions": 246, "deletions": 69}, "files": [{"sha": "c30d6817b466404d89e5c75c32f5558522dc4dd7", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 145, "deletions": 26, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -8,10 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::traits::auto_trait as auto;\n-use rustc::ty::TypeFoldable;\n use rustc::hir;\n+use rustc::traits::{self, auto_trait as auto};\n+use rustc::ty::{self, ToPredicate, TypeFoldable};\n+use rustc::ty::subst::Subst;\n+use rustc::infer::InferOk;\n use std::fmt::Debug;\n+use syntax_pos::DUMMY_SP;\n+\n+use core::DocAccessLevels;\n \n use super::*;\n \n@@ -75,6 +80,141 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         self.get_auto_trait_impls(did, &def_ctor, Some(name))\n     }\n \n+    fn get_real_ty<F>(&self,\n+                      def_id: DefId,\n+                      def_ctor: &F,\n+                      real_name: &Option<Ident>,\n+                      generics: &ty::Generics,\n+    ) -> hir::Ty\n+    where F: Fn(DefId) -> Def {\n+        let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n+        let mut segments = path.segments.into_vec();\n+        let last = segments.pop().unwrap();\n+\n+        segments.push(hir::PathSegment::new(\n+            real_name.unwrap_or(last.ident),\n+            self.generics_to_path_params(generics.clone()),\n+            false,\n+        ));\n+\n+        let new_path = hir::Path {\n+            span: path.span,\n+            def: path.def,\n+            segments: HirVec::from_vec(segments),\n+        };\n+\n+        hir::Ty {\n+            id: ast::DUMMY_NODE_ID,\n+            node: hir::TyKind::Path(hir::QPath::Resolved(None, P(new_path))),\n+            span: DUMMY_SP,\n+            hir_id: hir::DUMMY_HIR_ID,\n+        }\n+    }\n+\n+    pub fn get_blanket_impls<F>(\n+        &self,\n+        def_id: DefId,\n+        def_ctor: &F,\n+        name: Option<String>,\n+        generics: &ty::Generics,\n+    ) -> Vec<Item>\n+    where F: Fn(DefId) -> Def {\n+        let ty = self.cx.tcx.type_of(def_id);\n+        let mut traits = Vec::new();\n+        if self.cx.access_levels.borrow().is_doc_reachable(def_id) {\n+            let real_name = name.clone().map(|name| Ident::from_str(&name));\n+            let param_env = self.cx.tcx.param_env(def_id);\n+            for &trait_def_id in self.cx.all_traits.iter() {\n+                if !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) ||\n+                   self.cx.generated_synthetics\n+                          .borrow_mut()\n+                          .get(&(def_id, trait_def_id))\n+                          .is_some() {\n+                    continue\n+                }\n+                self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n+                    self.cx.tcx.infer_ctxt().enter(|infcx| {\n+                        let t_generics = infcx.tcx.generics_of(impl_def_id);\n+                        let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n+\n+                        match infcx.tcx.type_of(impl_def_id).sty {\n+                            ::rustc::ty::TypeVariants::TyParam(_) => {},\n+                            _ => return,\n+                        }\n+\n+                        let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n+                        let ty = ty.subst(infcx.tcx, substs);\n+                        let param_env = param_env.subst(infcx.tcx, substs);\n+\n+                        let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n+                        let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n+\n+                        // Require the type the impl is implemented on to match\n+                        // our type, and ignore the impl if there was a mismatch.\n+                        let cause = traits::ObligationCause::dummy();\n+                        let eq_result = infcx.at(&cause, param_env)\n+                                             .eq(trait_ref.self_ty(), ty);\n+                        if let Ok(InferOk { value: (), obligations }) = eq_result {\n+                            // FIXME(eddyb) ignoring `obligations` might cause false positives.\n+                            drop(obligations);\n+\n+                            let may_apply = infcx.predicate_may_hold(&traits::Obligation::new(\n+                                cause.clone(),\n+                                param_env,\n+                                trait_ref.to_predicate(),\n+                            ));\n+                            if !may_apply {\n+                                return\n+                            }\n+                            self.cx.generated_synthetics.borrow_mut()\n+                                                        .insert((def_id, trait_def_id));\n+                            let trait_ = hir::TraitRef {\n+                                path: get_path_for_type(infcx.tcx,\n+                                                        trait_def_id,\n+                                                        hir::def::Def::Trait),\n+                                ref_id: ast::DUMMY_NODE_ID,\n+                            };\n+                            let provided_trait_methods =\n+                                infcx.tcx.provided_trait_methods(trait_def_id)\n+                                         .into_iter()\n+                                         .map(|meth| meth.ident.to_string())\n+                                         .collect();\n+\n+                            let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n+                            let predicates = infcx.tcx.predicates_of(impl_def_id);\n+\n+                            traits.push(Item {\n+                                source: infcx.tcx.def_span(impl_def_id).clean(self.cx),\n+                                name: None,\n+                                attrs: Default::default(),\n+                                visibility: None,\n+                                def_id: self.next_def_id(impl_def_id.krate),\n+                                stability: None,\n+                                deprecation: None,\n+                                inner: ImplItem(Impl {\n+                                    unsafety: hir::Unsafety::Normal,\n+                                    generics: (t_generics, &predicates).clean(self.cx),\n+                                    provided_trait_methods,\n+                                    trait_: Some(trait_.clean(self.cx)),\n+                                    for_: ty.clean(self.cx),\n+                                    items: infcx.tcx.associated_items(impl_def_id)\n+                                                    .collect::<Vec<_>>()\n+                                                    .clean(self.cx),\n+                                    polarity: None,\n+                                    synthetic: false,\n+                                    blanket_impl: Some(infcx.tcx.type_of(impl_def_id)\n+                                                                .clean(self.cx)),\n+                                }),\n+                            });\n+                            debug!(\"{:?} => {}\", trait_ref, may_apply);\n+                        }\n+                    });\n+                });\n+            }\n+        }\n+        traits\n+    }\n+\n     pub fn get_auto_trait_impls<F>(\n         &self,\n         def_id: DefId,\n@@ -122,6 +262,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),\n             ).into_iter())\n+            .chain(self.get_blanket_impls(def_id, def_ctor, name, &generics).into_iter())\n             .collect();\n \n         debug!(\n@@ -196,31 +337,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 }\n                 _ => unreachable!(),\n             };\n-\n-            let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n-            let mut segments = path.segments.into_vec();\n-            let last = segments.pop().unwrap();\n-\n             let real_name = name.map(|name| Ident::from_str(&name));\n-\n-            segments.push(hir::PathSegment::new(\n-                real_name.unwrap_or(last.ident),\n-                self.generics_to_path_params(generics.clone()),\n-                false,\n-            ));\n-\n-            let new_path = hir::Path {\n-                span: path.span,\n-                def: path.def,\n-                segments: HirVec::from_vec(segments),\n-            };\n-\n-            let ty = hir::Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: hir::TyKind::Path(hir::QPath::Resolved(None, P(new_path))),\n-                span: DUMMY_SP,\n-                hir_id: hir::DUMMY_HIR_ID,\n-            };\n+            let ty = self.get_real_ty(def_id, def_ctor, &real_name, &generics);\n \n             return Some(Item {\n                 source: Span::empty(),\n@@ -239,6 +357,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     items: Vec::new(),\n                     polarity,\n                     synthetic: true,\n+                    blanket_impl: None,\n                 }),\n             });\n         }"}, {"sha": "9245ef3cf507bd89cbcce6c3ff643de81bdbaf51", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -275,7 +275,6 @@ pub fn build_impls(cx: &DocContext, did: DefId, auto_traits: bool) -> Vec<clean:\n     if auto_traits {\n         let auto_impls = get_auto_traits_with_def_id(cx, did);\n         let mut renderinfo = cx.renderinfo.borrow_mut();\n-\n         let new_impls: Vec<clean::Item> = auto_impls.into_iter()\n             .filter(|i| renderinfo.inlined.insert(i.def_id)).collect();\n \n@@ -415,6 +414,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n             items: trait_items,\n             polarity: Some(polarity.clean(cx)),\n             synthetic: false,\n+            blanket_impl: None,\n         }),\n         source: tcx.def_span(did).clean(cx),\n         name: None,"}, {"sha": "c050e30fea050220505bcbf42baae9b29736049e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -1549,7 +1549,6 @@ impl GenericBound {\n     }\n \n     fn get_trait_type(&self) -> Option<Type> {\n-\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             return Some(trait_.clone());\n         }\n@@ -3880,6 +3879,7 @@ pub struct Impl {\n     pub items: Vec<Item>,\n     pub polarity: Option<ImplPolarity>,\n     pub synthetic: bool,\n+    pub blanket_impl: Option<Type>,\n }\n \n pub fn get_auto_traits_with_node_id(cx: &DocContext, id: ast::NodeId, name: String) -> Vec<Item> {\n@@ -3947,6 +3947,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                 items,\n                 polarity: Some(self.polarity.clean(cx)),\n                 synthetic: false,\n+                blanket_impl: None,\n             })\n         });\n         ret"}, {"sha": "77375442d4ce57c4bc49c9175efa7aea4b817411", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -11,7 +11,7 @@\n use rustc_lint;\n use rustc_driver::{self, driver, target_features, abort_on_err};\n use rustc::session::{self, config};\n-use rustc::hir::def_id::{DefId, CrateNum};\n+use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::hir::def::Def;\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n@@ -84,6 +84,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// Maps (type_id, trait_id) -> auto trait impl\n     pub generated_synthetics: RefCell<FxHashSet<(DefId, DefId)>>,\n     pub current_item_name: RefCell<Option<Name>>,\n+    pub all_traits: Vec<DefId>,\n }\n \n impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n@@ -386,6 +387,7 @@ pub fn run_core(search_paths: SearchPaths,\n                 all_fake_def_ids: RefCell::new(FxHashSet()),\n                 generated_synthetics: RefCell::new(FxHashSet()),\n                 current_item_name: RefCell::new(None),\n+                all_traits: tcx.all_traits(LOCAL_CRATE).to_vec(),\n             };\n             debug!(\"crate: {:?}\", tcx.hir.krate());\n "}, {"sha": "9c7354a7c63fc196593b4b1c609e0d94ad19150c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -769,7 +769,11 @@ fn fmt_impl(i: &clean::Impl,\n         write!(f, \" for \")?;\n     }\n \n-    fmt_type(&i.for_, f, use_absolute)?;\n+    if let Some(ref ty) = i.blanket_impl {\n+        fmt_type(ty, f, use_absolute)?;\n+    } else {\n+        fmt_type(&i.for_, f, use_absolute)?;\n+    }\n \n     fmt::Display::fmt(&WhereClause { gens: &i.generics, indent: 0, end_newline: true }, f)?;\n     Ok(())"}, {"sha": "79c127a1c40b807243d3560ef5b4354ae8a22c7f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 61, "deletions": 34, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -177,7 +177,7 @@ pub enum ExternalLocation {\n }\n \n /// Metadata about implementations for a type or trait.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct Impl {\n     pub impl_item: clean::Item,\n }\n@@ -2900,18 +2900,18 @@ fn item_trait(\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)?;\n \n     let cache = cache();\n-    let impl_header = \"\n-        <h2 id='implementors' class='small-section-header'>\n-          Implementors<a href='#implementors' class='anchor'></a>\n-        </h2>\n-        <ul class='item-list' id='implementors-list'>\n+    let impl_header = \"\\\n+        <h2 id='implementors' class='small-section-header'>\\\n+          Implementors<a href='#implementors' class='anchor'></a>\\\n+        </h2>\\\n+        <ul class='item-list' id='implementors-list'>\\\n     \";\n \n-    let synthetic_impl_header = \"\n-        <h2 id='synthetic-implementors' class='small-section-header'>\n-          Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\n-        </h2>\n-        <ul class='item-list' id='synthetic-implementors-list'>\n+    let synthetic_impl_header = \"\\\n+        <h2 id='synthetic-implementors' class='small-section-header'>\\\n+          Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\\\n+        </h2>\\\n+        <ul class='item-list' id='synthetic-implementors-list'>\\\n     \";\n \n     let mut synthetic_types = Vec::new();\n@@ -2942,9 +2942,9 @@ fn item_trait(\n                                          .map_or(true, |d| cache.paths.contains_key(&d)));\n \n \n-        let (synthetic, concrete) = local.iter()\n-            .partition::<Vec<_>, _>(|i| i.inner_impl().synthetic);\n-\n+        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n+            .filter(|i| i.inner_impl().blanket_impl.is_none())\n+            .partition(|i| i.inner_impl().synthetic);\n \n         if !foreign.is_empty() {\n             write!(w, \"\n@@ -3590,18 +3590,19 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n     if !non_trait.is_empty() {\n         let render_mode = match what {\n             AssocItemRender::All => {\n-                write!(w, \"\n-                    <h2 id='methods' class='small-section-header'>\n-                      Methods<a href='#methods' class='anchor'></a>\n-                    </h2>\n+                write!(w, \"\\\n+                    <h2 id='methods' class='small-section-header'>\\\n+                      Methods<a href='#methods' class='anchor'></a>\\\n+                    </h2>\\\n                 \")?;\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n-                write!(w, \"\n-                    <h2 id='deref-methods' class='small-section-header'>\n-                      Methods from {}&lt;Target = {}&gt;<a href='#deref-methods' class='anchor'></a>\n-                    </h2>\n+                write!(w, \"\\\n+                    <h2 id='deref-methods' class='small-section-header'>\\\n+                      Methods from {}&lt;Target = {}&gt;\\\n+                      <a href='#deref-methods' class='anchor'></a>\\\n+                    </h2>\\\n                 \", trait_, type_)?;\n                 RenderMode::ForDeref { mut_: deref_mut_ }\n             }\n@@ -3625,9 +3626,12 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut)?;\n         }\n \n-        let (synthetic, concrete) = traits\n+        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = traits\n             .iter()\n-            .partition::<Vec<_>, _>(|t| t.inner_impl().synthetic);\n+            .partition(|t| t.inner_impl().synthetic);\n+        let (blanket_impl, concrete) = concrete\n+            .into_iter()\n+            .partition(|t| t.inner_impl().blanket_impl.is_some());\n \n         struct RendererStruct<'a, 'b, 'c>(&'a Context, Vec<&'b &'b Impl>, &'c clean::Item);\n \n@@ -3639,23 +3643,36 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n \n         let impls = format!(\"{}\", RendererStruct(cx, concrete, containing_item));\n         if !impls.is_empty() {\n-            write!(w, \"\n-                <h2 id='implementations' class='small-section-header'>\n-                  Trait Implementations<a href='#implementations' class='anchor'></a>\n-                </h2>\n+            write!(w, \"\\\n+                <h2 id='implementations' class='small-section-header'>\\\n+                  Trait Implementations<a href='#implementations' class='anchor'></a>\\\n+                </h2>\\\n                 <div id='implementations-list'>{}</div>\", impls)?;\n         }\n \n         if !synthetic.is_empty() {\n-            write!(w, \"\n-                <h2 id='synthetic-implementations' class='small-section-header'>\n-                  Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a>\n-                </h2>\n-                <div id='synthetic-implementations-list'>\n+            write!(w, \"\\\n+                <h2 id='synthetic-implementations' class='small-section-header'>\\\n+                  Auto Trait Implementations\\\n+                  <a href='#synthetic-implementations' class='anchor'></a>\\\n+                </h2>\\\n+                <div id='synthetic-implementations-list'>\\\n             \")?;\n             render_impls(cx, w, &synthetic, containing_item)?;\n             write!(w, \"</div>\")?;\n         }\n+\n+        if !blanket_impl.is_empty() {\n+            write!(w, \"\\\n+                <h2 id='blanket-implementations' class='small-section-header'>\\\n+                  Blanket Implementations\\\n+                  <a href='#blanket-implementations' class='anchor'></a>\\\n+                </h2>\\\n+                <div id='blanket-implementations-list'>\\\n+            \")?;\n+            render_impls(cx, w, &blanket_impl, containing_item)?;\n+            write!(w, \"</div>\")?;\n+        }\n     }\n     Ok(())\n }\n@@ -4201,12 +4218,16 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                            .collect::<String>()\n             };\n \n-            let (synthetic, concrete) = v\n+            let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) = v\n                 .iter()\n                 .partition::<Vec<_>, _>(|i| i.inner_impl().synthetic);\n+            let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) = concrete\n+                .into_iter()\n+                .partition::<Vec<_>, _>(|i| i.inner_impl().blanket_impl.is_some());\n \n             let concrete_format = format_impls(concrete);\n             let synthetic_format = format_impls(synthetic);\n+            let blanket_format = format_impls(blanket_impl);\n \n             if !concrete_format.is_empty() {\n                 out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementations\\\">\\\n@@ -4219,6 +4240,12 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                               Auto Trait Implementations</a>\");\n                 out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", synthetic_format));\n             }\n+\n+            if !blanket_format.is_empty() {\n+                out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#blanket-implementations\\\">\\\n+                              Blanket Implementations</a>\");\n+                out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", blanket_format));\n+            }\n         }\n     }\n "}, {"sha": "e2665fd8f375b5bc136c3142a3927b209946d16d", "filename": "src/test/rustdoc/generic-impl.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+use std::fmt;\n+\n+// @!has foo/struct.Bar.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+pub struct Bar;\n+\n+// @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+pub struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Foo\")\n+    }\n+}"}, {"sha": "54a8a7648334187dc606be45ed3fc1ffa9ff3e4d", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -56,7 +56,6 @@ impl T for S1 {\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait c_method definition.'\n // @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n-// @!has - '//*[@class=\"docblock\"]' 'Read more'\n pub struct S2(usize);\n \n /// Docs associated with the S2 trait implementation."}, {"sha": "3ecd6b63510f5d3a8a24d5a16c3f18da918cfb40", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab71516f1f4f6a63e32dffeb2625a12e5113485/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=dab71516f1f4f6a63e32dffeb2625a12e5113485", "patch": "@@ -31,11 +31,11 @@ pub trait Foo {\n // @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f\"]' 'f'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.u\"]' 'u'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'w'\n+// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n pub struct Bar {\n     pub f: u32,\n     pub u: u32,\n-    w: u32,\n+    waza: u32,\n }\n \n // @has foo/enum.En.html\n@@ -51,9 +51,9 @@ pub enum En {\n // @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f1\"]' 'f1'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f2\"]' 'f2'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'w'\n+// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n pub union MyUnion {\n     pub f1: u32,\n     pub f2: f32,\n-    w: u32,\n+    waza: u32,\n }"}]}