{"sha": "caefec955f1226652b734a4a2cc46a8e9d405c24", "node_id": "C_kwDOAAsO6NoAKGNhZWZlYzk1NWYxMjI2NjUyYjczNGE0YTJjYzQ2YThlOWQ0MDVjMjQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-11T09:22:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:55:58Z"}, "message": "Do not abort compilation when failing to normalize opaque types.", "tree": {"sha": "617c5322d4a456badb767111defa28743313c8d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617c5322d4a456badb767111defa28743313c8d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caefec955f1226652b734a4a2cc46a8e9d405c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caefec955f1226652b734a4a2cc46a8e9d405c24", "html_url": "https://github.com/rust-lang/rust/commit/caefec955f1226652b734a4a2cc46a8e9d405c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caefec955f1226652b734a4a2cc46a8e9d405c24/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "b167b9b566d6d14bbdfffa31ee1471c35c923b24", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/caefec955f1226652b734a4a2cc46a8e9d405c24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caefec955f1226652b734a4a2cc46a8e9d405c24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=caefec955f1226652b734a4a2cc46a8e9d405c24", "patch": "@@ -101,6 +101,18 @@ pub trait InferCtxtExt<'tcx> {\n }\n \n pub trait TypeErrCtxtExt<'tcx> {\n+    fn build_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+\n     fn report_overflow_error<T>(\n         &self,\n         predicate: &T,\n@@ -478,6 +490,26 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         suggest_increasing_limit: bool,\n         mutate: impl FnOnce(&mut Diagnostic),\n     ) -> !\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n+        let mut err = self.build_overflow_error(predicate, span, suggest_increasing_limit);\n+        mutate(&mut err);\n+        err.emit();\n+\n+        self.tcx.sess.abort_if_errors();\n+        bug!();\n+    }\n+\n+    fn build_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n     where\n         T: fmt::Display\n             + TypeFoldable<'tcx>\n@@ -511,11 +543,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             self.suggest_new_overflow_limit(&mut err);\n         }\n \n-        mutate(&mut err);\n-\n-        err.emit();\n-        self.tcx.sess.abort_if_errors();\n-        bug!();\n+        err\n     }\n \n     /// Reports that an overflow has occurred and halts compilation. We"}, {"sha": "8249144f57aaec9988906c7c9b3fa32ab7e31164", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caefec955f1226652b734a4a2cc46a8e9d405c24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caefec955f1226652b734a4a2cc46a8e9d405c24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=caefec955f1226652b734a4a2cc46a8e9d405c24", "patch": "@@ -216,12 +216,16 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n-                            self.infcx.err_ctxt().report_overflow_error(\n-                                &ty,\n-                                self.cause.span,\n-                                true,\n-                                |_| {},\n-                            );\n+                            // A closure or generator may have itself as in its upvars.  This\n+                            // should be checked handled by the recursion check for opaque types,\n+                            // but we may end up here before that check can happen.  In that case,\n+                            // we delay a bug to mark the trip, and continue without revealing the\n+                            // opaque.\n+                            self.infcx\n+                                .err_ctxt()\n+                                .build_overflow_error(&ty, self.cause.span, true)\n+                                .delay_as_bug();\n+                            return ty.try_super_fold_with(self);\n                         }\n \n                         let generic_ty = self.tcx().bound_type_of(def_id);"}]}