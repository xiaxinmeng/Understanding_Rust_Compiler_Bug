{"sha": "f18118702f088ee2d4726e1e1e6e87d17b105f5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODExODcwMmYwODhlZTJkNDcyNmUxZTFlNmU4N2QxN2IxMDVmNWQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-27T00:05:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-27T00:05:52Z"}, "message": "Rewrite variadic-ffi pass to use test helper\n\nThe sprintf used in this test previously isn\u2019t available on some versions of MSVC.\n\nFixes #32305", "tree": {"sha": "eff009ce8b5b08284957574ac802e6764e167ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff009ce8b5b08284957574ac802e6764e167ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f18118702f088ee2d4726e1e1e6e87d17b105f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f18118702f088ee2d4726e1e1e6e87d17b105f5d", "html_url": "https://github.com/rust-lang/rust/commit/f18118702f088ee2d4726e1e1e6e87d17b105f5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f18118702f088ee2d4726e1e1e6e87d17b105f5d/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da66f2fd8cab261911163ece04d5c15a13cf5e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/da66f2fd8cab261911163ece04d5c15a13cf5e58", "html_url": "https://github.com/rust-lang/rust/commit/da66f2fd8cab261911163ece04d5c15a13cf5e58"}], "stats": {"total": 67, "additions": 23, "deletions": 44}, "files": [{"sha": "fad360329ffd8520cc6f5a428f632ac9ac035848", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f18118702f088ee2d4726e1e1e6e87d17b105f5d/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18118702f088ee2d4726e1e1e6e87d17b105f5d/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=f18118702f088ee2d4726e1e1e6e87d17b105f5d", "patch": "@@ -8,60 +8,39 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-msvc -- sprintf isn't a symbol in msvcrt? maybe a #define?\n-\n-#![feature(libc, std_misc)]\n-\n-extern crate libc;\n-\n-use std::ffi::{CStr, CString};\n-use libc::{c_char, c_int};\n-\n-\n+#[link(name = \"rust_test_helpers\")]\n extern {\n-    fn sprintf(s: *mut c_char, format: *const c_char, ...) -> c_int;\n-}\n-\n-unsafe fn check<T, F>(expected: &str, f: F) where F: FnOnce(*mut c_char) -> T {\n-    let mut x = [0 as c_char; 50];\n-    f(&mut x[0] as *mut c_char);\n-    assert_eq!(expected.as_bytes(), CStr::from_ptr(x.as_ptr()).to_bytes());\n+    fn rust_interesting_average(_: i64, ...) -> f64;\n }\n \n pub fn main() {\n-\n+    // Call without variadic arguments\n     unsafe {\n-        // Call with just the named parameter\n-        let c = CString::new(&b\"Hello World\\n\"[..]).unwrap();\n-        check(\"Hello World\\n\", |s| sprintf(s, c.as_ptr()));\n-\n-        // Call with variable number of arguments\n-        let c = CString::new(&b\"%d %f %c %s\\n\"[..]).unwrap();\n-        check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n-            sprintf(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n-        });\n+        assert!(rust_interesting_average(0).is_nan());\n+    }\n \n-        // Make a function pointer\n-        let x: unsafe extern fn(*mut c_char, *const c_char, ...) -> c_int = sprintf;\n+    // Call with direct arguments\n+    unsafe {\n+        assert_eq!(rust_interesting_average(1, 10, 10.0) as i64, 20);\n+    }\n \n-        // A function that takes a function pointer\n-        unsafe fn call(fp: unsafe extern fn(*mut c_char, *const c_char, ...) -> c_int) {\n-            // Call with just the named parameter\n-            let c = CString::new(&b\"Hello World\\n\"[..]).unwrap();\n-            check(\"Hello World\\n\", |s| fp(s, c.as_ptr()));\n+    // Call with named arguments, variable number of them\n+    let (x1, x2, x3, x4) = (10, 10.0, 20, 20.0);\n+    unsafe {\n+        assert_eq!(rust_interesting_average(2, x1, x2, x3, x4) as i64, 30);\n+    }\n \n-            // Call with variable number of arguments\n-            let c = CString::new(&b\"%d %f %c %s\\n\"[..]).unwrap();\n-            check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n-                fp(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n-            });\n-        }\n+    // A function that takes a function pointer\n+    unsafe fn call(fp: unsafe extern fn(i64, ...) -> f64) {\n+        let (x1, x2, x3, x4) = (10, 10.0, 20, 20.0);\n+        assert_eq!(fp(2, x1, x2, x3, x4) as i64, 30);\n+    }\n \n-        // Pass sprintf directly\n-        call(sprintf);\n+    unsafe {\n+        call(rust_interesting_average);\n \n-        // Pass sprintf indirectly\n+        // Make a function pointer, pass indirectly\n+        let x: unsafe extern fn(i64, ...) -> f64 = rust_interesting_average;\n         call(x);\n     }\n-\n }"}]}