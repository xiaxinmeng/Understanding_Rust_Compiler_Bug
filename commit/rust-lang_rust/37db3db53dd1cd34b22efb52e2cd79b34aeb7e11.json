{"sha": "37db3db53dd1cd34b22efb52e2cd79b34aeb7e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGIzZGI1M2RkMWNkMzRiMjJlZmI1MmUyY2Q3OWIzNGFlYjdlMTE=", "commit": {"author": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-22T19:54:05Z"}, "committer": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T15:52:31Z"}, "message": "Fixed long strings", "tree": {"sha": "417dba63a7c1c6c8b22438c3bf7a25edf8ad4582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/417dba63a7c1c6c8b22438c3bf7a25edf8ad4582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJbfthBAAoJEOQhx0GR6hhsxwsH/RQnaQvpDf+5x1meT3lZ0QDX\nqJu+QduYmEgKzZxmq7LdH/f1003+nVXiJvx9R+XUyVdNaRqayWf5/jSl1/i1BHLt\nx7w1XusKCly3AIimQ41S/9qCAxfU9F1kNrlag+J+UKTH9f1c377+cASRpFS3SaPF\nbQ2he4xMmT1stzLgPlGlOcY9zpRTGTuVg2/0uNSyvn2C8ijtz59xNDzlQ1KTiAw/\nDtovTb26IA0Kbk8eiSxv/g00qmhLWJpghWsh8PE4YgM5a0a+dQc1EsB7nbFIlCSH\n69nPN/9vxf1fd6F6KljGmt+M953csShw4Tm8+zuOTaNGV76QsTnXN+5bK11/Kf4=\n=PNhn\n-----END PGP SIGNATURE-----", "payload": "tree 417dba63a7c1c6c8b22438c3bf7a25edf8ad4582\nparent 22beeb4cab4943b055625b71a5b7b8339ee38b3d\nauthor Bernardo Meurer <meurerbernardo@gmail.com> 1534967645 -0300\ncommitter Bernardo Meurer <meurerbernardo@gmail.com> 1535039551 -0700\n\nFixed long strings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11", "html_url": "https://github.com/rust-lang/rust/commit/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11/comments", "author": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22beeb4cab4943b055625b71a5b7b8339ee38b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/22beeb4cab4943b055625b71a5b7b8339ee38b3d", "html_url": "https://github.com/rust-lang/rust/commit/22beeb4cab4943b055625b71a5b7b8339ee38b3d"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "3590cbdf2c7670392c40afb53dd8aa28f067d9d7", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37db3db53dd1cd34b22efb52e2cd79b34aeb7e11/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=37db3db53dd1cd34b22efb52e2cd79b34aeb7e11", "patch": "@@ -325,7 +325,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n             ReadForeignStatic =>\n                 \"tried to read from foreign (extern) static\",\n             InvalidPointerMath =>\n-                \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. comparing pointers into different allocations\",\n+                \"attempted to do invalid arithmetic on pointers that would leak base addresses, \\\n+                e.g. comparing pointers into different allocations\",\n             ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n             DeadLocal =>\n@@ -379,11 +380,13 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n             Layout(_) =>\n                 \"rustc layout computation failed\",\n             UnterminatedCString(_) =>\n-                \"attempted to get length of a null terminated string, but no null found before end of allocation\",\n+                \"attempted to get length of a null terminated string, but no null found before end\n+                of allocation\",\n             HeapAllocZeroBytes =>\n                 \"tried to re-, de- or allocate zero bytes on the heap\",\n             HeapAllocNonPowerOfTwoAlignment(_) =>\n-                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of two\",\n+                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of\n+                two\",\n             Unreachable =>\n                 \"entered unreachable code\",\n             Panic { .. } =>\n@@ -445,8 +448,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                        kind, ptr, len, lock)\n             }\n             InvalidMemoryLockRelease { ptr, len, frame, ref lock } => {\n-                write!(f, \"frame {} tried to release memory write lock at {:?}, size {}, but cannot release lock {:?}\",\n-                       frame, ptr, len, lock)\n+                write!(f, \"frame {} tried to release memory write lock at {:?}, size {}, but \\\n+                       cannot release lock {:?}\", frame, ptr, len, lock)\n             }\n             DeallocatedLockedMemory { ptr, ref lock } => {\n                 write!(f, \"tried to deallocate memory at {:?} in conflict with lock {:?}\",\n@@ -457,7 +460,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n             }\n             NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n             FunctionPointerTyMismatch(sig, got) =>\n-                write!(f, \"tried to call a function with sig {} through a function pointer of type {}\", sig, got),\n+                write!(f, \"tried to call a function with sig {} through a \\\n+                       function pointer of type {}\", sig, got),\n             BoundsCheck { ref len, ref index } =>\n                 write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             ReallocatedWrongMemoryKind(ref old, ref new) =>\n@@ -480,7 +484,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n             MachineError(ref inner) =>\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n-                write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and align {}\", size.bytes(), align.abi(), size2.bytes(), align2.abi()),\n+                write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and \\\n+                       align {}\", size.bytes(), align.abi(), size2.bytes(), align2.abi()),\n             Panic { ref msg, line, col, ref file } =>\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n             _ => write!(f, \"{}\", self.description()),"}]}