{"sha": "83f1f118e56320667c04a522e05f09a9f4abb6ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjFmMTE4ZTU2MzIwNjY3YzA0YTUyMmUwNWYwOWE5ZjRhYmI2ZmY=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-06-09T06:07:58Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-06-09T06:07:58Z"}, "message": "hack around bug in emscripten", "tree": {"sha": "fb65bf2463d65a9885b22a51557456e312d013a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb65bf2463d65a9885b22a51557456e312d013a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f1f118e56320667c04a522e05f09a9f4abb6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f1f118e56320667c04a522e05f09a9f4abb6ff", "html_url": "https://github.com/rust-lang/rust/commit/83f1f118e56320667c04a522e05f09a9f4abb6ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f1f118e56320667c04a522e05f09a9f4abb6ff/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "url": "https://api.github.com/repos/rust-lang/rust/commits/b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "html_url": "https://github.com/rust-lang/rust/commit/b795b7b43b5812a07b8fa7ed022b2f0f012a4950"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "7c63ecd203e2acde3d8dec8d9ab9ca943402bb73", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f1f118e56320667c04a522e05f09a9f4abb6ff/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f1f118e56320667c04a522e05f09a9f4abb6ff/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=83f1f118e56320667c04a522e05f09a9f4abb6ff", "patch": "@@ -503,7 +503,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // that swapping either 32 bytes or 64 bytes at a time is most efficient for intel\n         // Haswell E processors. LLVM is more able to optimize if we give a struct a\n         // #[repr(simd)], even if we don't actually use this struct directly.\n-        #[repr(simd)]\n+        //\n+        // FIXME repr(simd) broken on emscripten\n+        #[cfg_attr(not(target_os = \"emscripten\"), repr(simd))]\n         struct Block(u64, u64, u64, u64);\n         struct UnalignedBlock(u64, u64, u64, u64);\n "}]}