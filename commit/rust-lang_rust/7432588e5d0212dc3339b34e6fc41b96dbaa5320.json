{"sha": "7432588e5d0212dc3339b34e6fc41b96dbaa5320", "node_id": "C_kwDOAAsO6NoAKDc0MzI1ODhlNWQwMjEyZGMzMzM5YjM0ZTZmYzQxYjk2ZGJhYTUzMjA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-19T04:06:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-19T04:06:31Z"}, "message": "Rollup merge of #89258 - est31:const_char_convert, r=oli-obk\n\nMake char conversion functions unstably const\n\nThe char conversion functions like `char::from_u32` do trivial computations and can easily be converted into const fns. Only smaller tricks are needed to avoid non-const standard library functions like `Result::ok` or `bool::then_some`.\n\nTracking issue: https://github.com/rust-lang/rust/issues/89259", "tree": {"sha": "5e60c0a44ec4754b7c99e97c9fb8ab78bb9b12ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e60c0a44ec4754b7c99e97c9fb8ab78bb9b12ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7432588e5d0212dc3339b34e6fc41b96dbaa5320", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlyLHCRBK7hj4Ov3rIwAAFXgIAAaquRfyIYHv2imtPkJwf+Hb\nvhJ1EDTFlAK2cZ9sDzQ4mmuxlngeI89BTDM6pYxTNrDdFizQ5tDu92xi4WLZska2\nfGifUbjEabeFgH+yYqmsfnDs52Kjoif0SbFfFKAZJx6bNr6c+9wnxmHz7p3xcKpY\nv8LgiIyOIBA+k+VUPjB1v/LXepXIoq15Cn8uRJtxybTU06uT2Cl3khJ42XnrYDWw\nntvEhDxAA/d83jc+sKtjgLTLkd1hbIkj6jADZ6+GbGyI4/kavv/ulB/PO0OVXbZ3\n/Oc7y9bkHqyQFo6wgspqySZX2Y88EL02tGyz4zlrkMPdmeGPd3+CBPs7HopkAJI=\n=9slv\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e60c0a44ec4754b7c99e97c9fb8ab78bb9b12ba\nparent 548c1088eff51fd92ad94d56b8c5b2d48b7088f0\nparent 7272b6fc8ce5c5d4b087129029c0a5be2570dd44\nauthor Yuki Okushi <jtitor@2k36.org> 1637294791 +0900\ncommitter GitHub <noreply@github.com> 1637294791 +0900\n\nRollup merge of #89258 - est31:const_char_convert, r=oli-obk\n\nMake char conversion functions unstably const\n\nThe char conversion functions like `char::from_u32` do trivial computations and can easily be converted into const fns. Only smaller tricks are needed to avoid non-const standard library functions like `Result::ok` or `bool::then_some`.\n\nTracking issue: https://github.com/rust-lang/rust/issues/89259\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7432588e5d0212dc3339b34e6fc41b96dbaa5320", "html_url": "https://github.com/rust-lang/rust/commit/7432588e5d0212dc3339b34e6fc41b96dbaa5320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7432588e5d0212dc3339b34e6fc41b96dbaa5320/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c1088eff51fd92ad94d56b8c5b2d48b7088f0", "html_url": "https://github.com/rust-lang/rust/commit/548c1088eff51fd92ad94d56b8c5b2d48b7088f0"}, {"sha": "7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "url": "https://api.github.com/repos/rust-lang/rust/commits/7272b6fc8ce5c5d4b087129029c0a5be2570dd44", "html_url": "https://github.com/rust-lang/rust/commit/7272b6fc8ce5c5d4b087129029c0a5be2570dd44"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "c4046d7496f71b3238a1f83a2a7f879e734ecd6d", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=7432588e5d0212dc3339b34e6fc41b96dbaa5320", "patch": "@@ -51,8 +51,13 @@ use super::MAX;\n #[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_u32(i: u32) -> Option<char> {\n-    char::try_from(i).ok()\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_u32(i: u32) -> Option<char> {\n+    // FIXME: once Result::ok is const fn, use it here\n+    match char_try_from_u32(i) {\n+        Ok(c) => Some(c),\n+        Err(_) => None,\n+    }\n }\n \n /// Converts a `u32` to a `char`, ignoring validity.\n@@ -91,7 +96,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n #[inline]\n #[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n-pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n     if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { unsafe { transmute(i) } }\n }\n@@ -248,18 +254,23 @@ impl FromStr for char {\n     }\n }\n \n+#[inline]\n+const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {\n+    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+        Err(CharTryFromError(()))\n+    } else {\n+        // SAFETY: checked that it's a legal unicode value\n+        Ok(unsafe { transmute(i) })\n+    }\n+}\n+\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n     #[inline]\n     fn try_from(i: u32) -> Result<Self, Self::Error> {\n-        if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n-            Err(CharTryFromError(()))\n-        } else {\n-            // SAFETY: checked that it's a legal unicode value\n-            Ok(unsafe { transmute(i) })\n-        }\n+        char_try_from_u32(i)\n     }\n }\n \n@@ -327,7 +338,8 @@ impl fmt::Display for CharTryFromError {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n     }"}, {"sha": "d5ad0c385c7012f16c666660c51fd071926531ed", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=7432588e5d0212dc3339b34e6fc41b96dbaa5320", "patch": "@@ -136,9 +136,10 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_u32(i: u32) -> Option<char> {\n+    pub const fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n     }\n \n@@ -178,9 +179,10 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+    pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n         unsafe { super::convert::from_u32_unchecked(i) }\n     }\n@@ -235,9 +237,10 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n+    pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)\n     }\n \n@@ -331,10 +334,11 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    pub fn to_digit(self, radix: u32) -> Option<u32> {\n+    pub const fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // If not a digit, a number greater than radix will be created.\n         let mut digit = (self as u32).wrapping_sub('0' as u32);\n@@ -345,7 +349,8 @@ impl char {\n             // Force the 6th bit to be set to ensure ascii is lower case.\n             digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);\n         }\n-        (digit < radix).then_some(digit)\n+        // FIXME: once then_some is const fn, use it here\n+        if digit < radix { Some(digit) } else { None }\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a"}, {"sha": "4a64e2e2d102dc10171ceadeed49ab6e33db9b73", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7432588e5d0212dc3339b34e6fc41b96dbaa5320/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7432588e5d0212dc3339b34e6fc41b96dbaa5320", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_char_convert)]\n #![feature(const_discriminant)]\n #![feature(const_eval_select)]\n #![feature(const_float_bits_conv)]"}]}