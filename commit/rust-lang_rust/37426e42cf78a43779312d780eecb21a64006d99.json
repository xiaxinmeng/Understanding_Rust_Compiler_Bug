{"sha": "37426e42cf78a43779312d780eecb21a64006d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDI2ZTQyY2Y3OGE0Mzc3OTMxMmQ3ODBlZWNiMjFhNjQwMDZkOTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-26T04:57:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-26T04:57:46Z"}, "message": "Add sever-glue, for missing first stage of sweep.", "tree": {"sha": "6eb0b5a43bf0672e2d272f78ef9b939333af47fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb0b5a43bf0672e2d272f78ef9b939333af47fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37426e42cf78a43779312d780eecb21a64006d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37426e42cf78a43779312d780eecb21a64006d99", "html_url": "https://github.com/rust-lang/rust/commit/37426e42cf78a43779312d780eecb21a64006d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37426e42cf78a43779312d780eecb21a64006d99/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf3c2ad935be699281ed20fb3d2f29554e6229b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf3c2ad935be699281ed20fb3d2f29554e6229b", "html_url": "https://github.com/rust-lang/rust/commit/0cf3c2ad935be699281ed20fb3d2f29554e6229b"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "9108a18288747cdafbb5bfb1889030302ebe9a1e", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=37426e42cf78a43779312d780eecb21a64006d99", "patch": "@@ -57,8 +57,9 @@ let tydesc_field_align = 2;;\n let tydesc_field_copy_glue = 3;;\n let tydesc_field_drop_glue = 4;;\n let tydesc_field_free_glue = 5;;\n-let tydesc_field_mark_glue = 6;;\n-let tydesc_field_obj_drop_glue = 7;;\n+let tydesc_field_sever_glue = 6;;\n+let tydesc_field_mark_glue = 7;;\n+let tydesc_field_obj_drop_glue = 8;;\n \n let vec_elt_rc = 0;;\n let vec_elt_alloc = 1;;"}, {"sha": "08155ed35f6b0144488ce0dd8247b4f4c824f7d0", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=37426e42cf78a43779312d780eecb21a64006d99", "patch": "@@ -20,24 +20,25 @@ type glue =\n   | GLUE_yield\n   | GLUE_exit_main_task\n   | GLUE_exit_task\n-  | GLUE_mark of Ast.ty\n-  | GLUE_drop of Ast.ty\n-  | GLUE_free of Ast.ty\n-  | GLUE_copy of Ast.ty      (* One-level copy. *)\n-  | GLUE_clone of Ast.ty     (* Deep copy. *)\n+  | GLUE_copy of Ast.ty           (* One-level copy.                    *)\n+  | GLUE_drop of Ast.ty           (* De-initialize interior memory.     *)\n+  | GLUE_free of Ast.ty           (* Drop body + free() exterior ptr.   *)\n+  | GLUE_sever of Ast.ty          (* Null all exterior state slots.     *)\n+  | GLUE_mark of Ast.ty           (* Mark all exterior state slots.     *)\n+  | GLUE_clone of Ast.ty          (* Deep copy.                         *)\n   | GLUE_compare of Ast.ty\n   | GLUE_hash of Ast.ty\n   | GLUE_write of Ast.ty\n   | GLUE_read of Ast.ty\n   | GLUE_unwind\n   | GLUE_gc\n   | GLUE_get_next_pc\n-  | GLUE_mark_frame of node_id    (* node is the frame                 *)\n-  | GLUE_drop_frame of node_id    (* node is the frame                 *)\n-  | GLUE_reloc_frame of node_id   (* node is the frame                 *)\n-  | GLUE_fn_binding of node_id    (* node is the 'bind' stmt           *)\n-  | GLUE_obj_drop of node_id      (* node is the obj                   *)\n-  | GLUE_loop_body of node_id     (* node is the 'for each' body block *)\n+  | GLUE_mark_frame of node_id    (* Node is the frame.                 *)\n+  | GLUE_drop_frame of node_id    (* Node is the frame.                 *)\n+  | GLUE_reloc_frame of node_id   (* Node is the frame.                 *)\n+  | GLUE_fn_binding of node_id    (* Node is the 'bind' stmt.           *)\n+  | GLUE_obj_drop of node_id      (* Node is the obj.                   *)\n+  | GLUE_loop_body of node_id     (* Node is the 'for each' body block. *)\n   | GLUE_forward of (Ast.ident * Ast.ty_obj * Ast.ty_obj)\n ;;\n \n@@ -1603,6 +1604,7 @@ let tydesc_rty (abi:Abi.abi) : Il.referent_ty =\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_copy_glue     *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_drop_glue     *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_free_glue     *)\n+      Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_sever_glue    *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_mark_glue     *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_obj_drop_glue *)\n     |]\n@@ -1982,10 +1984,11 @@ let glue_str (cx:ctxt) (g:glue) : string =\n     | GLUE_yield -> \"glue$yield\"\n     | GLUE_exit_main_task -> \"glue$exit_main_task\"\n     | GLUE_exit_task -> \"glue$exit_task\"\n-    | GLUE_mark ty -> \"glue$mark$\" ^ (ty_str ty)\n+    | GLUE_copy ty -> \"glue$copy$\" ^ (ty_str ty)\n     | GLUE_drop ty -> \"glue$drop$\" ^ (ty_str ty)\n     | GLUE_free ty -> \"glue$free$\" ^ (ty_str ty)\n-    | GLUE_copy ty -> \"glue$copy$\" ^ (ty_str ty)\n+    | GLUE_sever ty -> \"glue$sever$\" ^ (ty_str ty)\n+    | GLUE_mark ty -> \"glue$mark$\" ^ (ty_str ty)\n     | GLUE_clone ty -> \"glue$clone$\" ^ (ty_str ty)\n     | GLUE_compare ty -> \"glue$compare$\" ^ (ty_str ty)\n     | GLUE_hash ty -> \"glue$hash$\" ^ (ty_str ty)"}, {"sha": "911c2acd7d1f13dc3a2f7e23e3f24af48d906a96", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/37426e42cf78a43779312d780eecb21a64006d99/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=37426e42cf78a43779312d780eecb21a64006d99", "patch": "@@ -1082,6 +1082,7 @@ let trans_visitor\n                        get_copy_glue t None;\n                        get_drop_glue t None;\n                        get_free_glue t (slot_mem_ctrl (interior_slot t)) None;\n+                       get_sever_glue t None;\n                        get_mark_glue t None;\n                      |];\n                    (* Include any obj-dtor, if this is an obj and has one. *)\n@@ -1653,6 +1654,21 @@ let trans_visitor\n       get_typed_mem_glue g fty inner\n \n \n+  and get_sever_glue\n+      (ty:Ast.ty)\n+      (curr_iso:Ast.ty_iso option)\n+      : fixup =\n+    let g = GLUE_sever ty in\n+    let inner _ (args:Il.cell) =\n+      let ty_params = deref (get_element_ptr args 0) in\n+      let cell = get_element_ptr args 1 in\n+        sever_ty ty_params ty (deref cell) curr_iso\n+    in\n+    let ty_params_ptr = ty_params_covering ty in\n+    let fty = mk_simple_ty_fn [| ty_params_ptr; alias_slot ty |] in\n+      get_typed_mem_glue g fty inner\n+\n+\n   and get_mark_glue\n       (ty:Ast.ty)\n       (curr_iso:Ast.ty_iso option)\n@@ -2485,6 +2501,18 @@ let trans_visitor\n       | _ ->\n           iter_ty_slots ty_params ty cell (drop_slot ty_params) curr_iso\n \n+  and sever_ty\n+      (ty_params:Il.cell)\n+      (ty:Ast.ty)\n+      (cell:Il.cell)\n+      (curr_iso:Ast.ty_iso option)\n+      : unit =\n+    match ty with\n+      | Ast.TY_fn _\n+      | Ast.TY_obj _ -> ()\n+      | _ ->\n+          iter_ty_slots ty_params ty cell (sever_slot ty_params) curr_iso\n+\n   and mark_ty\n       (ty_params:Il.cell)\n       (ty:Ast.ty)\n@@ -2624,6 +2652,44 @@ let trans_visitor\n         Ast.TY_iso tiso -> Some tiso\n       | _ -> curr_iso\n \n+  and sever_slot\n+      (ty_params:Il.cell)\n+      (cell:Il.cell)\n+      (slot:Ast.slot)\n+      (curr_iso:Ast.ty_iso option)\n+      : unit =\n+    let ty = slot_ty slot in\n+      match slot_mem_ctrl slot with\n+          MEM_gc ->\n+\n+            let _ = check_exterior_rty cell in\n+            let null_jmp = null_check cell in\n+            let rc = exterior_rc_cell cell in\n+            let _ = note_gc_step slot \"severing\" in\n+              emit (Il.binary Il.SUB rc (Il.Cell rc) one);\n+              mov cell zero;\n+              patch null_jmp\n+\n+        | MEM_interior when type_is_structured ty ->\n+            (iflog (fun _ ->\n+                      annotate (\"sever interior slot \" ^\n+                                  (Fmt.fmt_to_str Ast.fmt_slot slot))));\n+            let (mem, _) = need_mem_cell cell in\n+            let tmp = next_vreg_cell Il.voidptr_t in\n+            let ty = maybe_iso curr_iso ty in\n+            let curr_iso = maybe_enter_iso ty curr_iso in\n+              lea tmp mem;\n+              trans_call_simple_static_glue\n+                (get_sever_glue ty curr_iso)\n+                ty_params tmp\n+\n+        | MEM_interior ->\n+            (* Interior allocation of all-interior value: sever directly. *)\n+            let ty = maybe_iso curr_iso ty in\n+              sever_ty ty_params ty cell curr_iso\n+\n+        | _ -> ()\n+\n   and mark_slot\n       (ty_params:Il.cell)\n       (cell:Il.cell)"}, {"sha": "2db0eb458d76a855bbe77cb84713752d906e4e37", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37426e42cf78a43779312d780eecb21a64006d99/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/37426e42cf78a43779312d780eecb21a64006d99/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=37426e42cf78a43779312d780eecb21a64006d99", "patch": "@@ -221,6 +221,7 @@ rust_crate_cache::get_type_desc(size_t size,\n     adjust_disp(td->drop_glue_off, descs[0], td);\n     adjust_disp(td->free_glue_off, descs[0], td);\n     adjust_disp(td->mark_glue_off, descs[0], td);\n+    adjust_disp(td->sever_glue_off, descs[0], td);\n     adjust_disp(td->obj_drop_glue_off, descs[0], td);\n     HASH_ADD(hh, this->type_descs, descs, keysz, td);\n     return td;"}, {"sha": "c9a28946e7b27e2df15b5307f1f6e99141a0bcd5", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37426e42cf78a43779312d780eecb21a64006d99/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/37426e42cf78a43779312d780eecb21a64006d99/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=37426e42cf78a43779312d780eecb21a64006d99", "patch": "@@ -306,6 +306,7 @@ struct type_desc {\n     uintptr_t copy_glue_off;\n     uintptr_t drop_glue_off;\n     uintptr_t free_glue_off;\n+    uintptr_t sever_glue_off;    // For GC.\n     uintptr_t mark_glue_off;     // For GC.\n     uintptr_t obj_drop_glue_off; // For custom destructors.\n "}]}