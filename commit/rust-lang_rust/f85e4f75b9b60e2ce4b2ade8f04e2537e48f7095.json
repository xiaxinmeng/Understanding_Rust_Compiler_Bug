{"sha": "f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NWU0Zjc1YjliNjBlMmNlNGIyYWRlOGYwNGUyNTM3ZTQ4ZjcwOTU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-16T21:47:19Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-17T18:18:14Z"}, "message": "Add a forbid-output property in cfail tests", "tree": {"sha": "ea916e4b67d3e1d2a3a4c3cbc55deeb2c3d7ec95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea916e4b67d3e1d2a3a4c3cbc55deeb2c3d7ec95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "html_url": "https://github.com/rust-lang/rust/commit/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad9ed40e7fec03158929ba3a2847870d54498d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9ed40e7fec03158929ba3a2847870d54498d6d", "html_url": "https://github.com/rust-lang/rust/commit/ad9ed40e7fec03158929ba3a2847870d54498d6d"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "cc765695cb7123162807906b550edada3d6784e3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "patch": "@@ -42,6 +42,8 @@ pub struct TestProps {\n     pub pretty_mode: String,\n     // Only compare pretty output and don't try compiling\n     pub pretty_compare_only: bool,\n+    // Patterns which must not appear in the output of a cfail test.\n+    pub forbid_output: Vec<String>,\n }\n \n // Load any test directives embedded in the file\n@@ -59,6 +61,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut no_pretty_expanded = false;\n     let mut pretty_mode = None;\n     let mut pretty_compare_only = false;\n+    let mut forbid_output = Vec::new();\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -116,6 +119,11 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             None => ()\n         };\n \n+        match parse_forbid_output(ln) {\n+            Some(of) => forbid_output.push(of),\n+            None => (),\n+        }\n+\n         true\n     });\n \n@@ -132,7 +140,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         no_prefer_dynamic: no_prefer_dynamic,\n         no_pretty_expanded: no_pretty_expanded,\n         pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n-        pretty_compare_only: pretty_compare_only\n+        pretty_compare_only: pretty_compare_only,\n+        forbid_output: forbid_output,\n     }\n }\n \n@@ -210,6 +219,10 @@ fn parse_error_pattern(line: &str) -> Option<String> {\n     parse_name_value_directive(line, \"error-pattern\")\n }\n \n+fn parse_forbid_output(line: &str) -> Option<String> {\n+    parse_name_value_directive(line, \"forbid-output\")\n+}\n+\n fn parse_aux_build(line: &str) -> Option<String> {\n     parse_name_value_directive(line, \"aux-build\")\n }"}, {"sha": "d64d3317e2e5b91946a4be61155e4b1bae45197a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f85e4f75b9b60e2ce4b2ade8f04e2537e48f7095", "patch": "@@ -71,6 +71,14 @@ pub fn run_metrics(config: Config, testfile: String, mm: &mut MetricMap) {\n     }\n }\n \n+fn get_output(props: &TestProps, proc_res: &ProcRes) -> String {\n+    if props.check_stdout {\n+        format!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n+    } else {\n+        proc_res.stderr.clone()\n+    }\n+}\n+\n fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = compile_test(config, props, testfile);\n \n@@ -81,16 +89,22 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     check_correct_failure_status(&proc_res);\n \n+    if proc_res.status.success() {\n+        fatal(\"process did not return an error status\");\n+    }\n+\n+    let output_to_check = get_output(props, &proc_res);\n     let expected_errors = errors::load_errors(&config.cfail_regex, testfile);\n     if !expected_errors.is_empty() {\n         if !props.error_patterns.is_empty() {\n             fatal(\"both error pattern and expected errors specified\");\n         }\n         check_expected_errors(expected_errors, testfile, &proc_res);\n     } else {\n-        check_error_patterns(props, testfile, &proc_res);\n+        check_error_patterns(props, testfile, output_to_check.as_slice(), &proc_res);\n     }\n     check_no_compiler_crash(&proc_res);\n+    check_forbid_output(props, output_to_check.as_slice(), &proc_res);\n }\n \n fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n@@ -112,8 +126,9 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n         fatal_proc_rec(\"run-fail test isn't valgrind-clean!\", &proc_res);\n     }\n \n+    let output_to_check = get_output(props, &proc_res);\n     check_correct_failure_status(&proc_res);\n-    check_error_patterns(props, testfile, &proc_res);\n+    check_error_patterns(props, testfile, output_to_check.as_slice(), &proc_res);\n }\n \n fn check_correct_failure_status(proc_res: &ProcRes) {\n@@ -834,24 +849,15 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n \n fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n+                        output_to_check: &str,\n                         proc_res: &ProcRes) {\n     if props.error_patterns.is_empty() {\n         fatal(format!(\"no error pattern specified in {}\",\n                       testfile.display()).as_slice());\n     }\n-\n-    if proc_res.status.success() {\n-        fatal(\"process did not return an error status\");\n-    }\n-\n     let mut next_err_idx = 0u;\n     let mut next_err_pat = &props.error_patterns[next_err_idx];\n     let mut done = false;\n-    let output_to_check = if props.check_stdout {\n-        format!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n-    } else {\n-        proc_res.stderr.clone()\n-    };\n     for line in output_to_check.as_slice().lines() {\n         if line.contains(next_err_pat.as_slice()) {\n             debug!(\"found error pattern {}\", next_err_pat);\n@@ -890,6 +896,16 @@ fn check_no_compiler_crash(proc_res: &ProcRes) {\n     }\n }\n \n+fn check_forbid_output(props: &TestProps,\n+                       output_to_check: &str,\n+                       proc_res: &ProcRes) {\n+    for pat in props.forbid_output.iter() {\n+        if output_to_check.contains(pat.as_slice()) {\n+            fatal_proc_rec(\"forbidden pattern found in compiler output\", proc_res);\n+        }\n+    }\n+}\n+\n fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                          testfile: &Path,\n                          proc_res: &ProcRes) {"}]}