{"sha": "c8334ce60cce9571fcfdea31a3e67e3933fb7665", "node_id": "C_kwDOAAsO6NoAKGM4MzM0Y2U2MGNjZTk1NzFmY2ZkZWEzMWEzZTY3ZTM5MzNmYjc2NjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T00:39:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T20:12:57Z"}, "message": "Move autoderef to rustc_hir_analysis", "tree": {"sha": "1f63730aeb8a6734ac3aaec57a44238e003a246b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f63730aeb8a6734ac3aaec57a44238e003a246b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8334ce60cce9571fcfdea31a3e67e3933fb7665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8334ce60cce9571fcfdea31a3e67e3933fb7665", "html_url": "https://github.com/rust-lang/rust/commit/c8334ce60cce9571fcfdea31a3e67e3933fb7665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8334ce60cce9571fcfdea31a3e67e3933fb7665/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 116, "additions": 70, "deletions": 46}, "files": [{"sha": "41f458f6c1785e31a83dec0c9de3efc6cc00bb60", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -120,3 +120,7 @@ hir_analysis_self_in_impl_self =\n \n hir_analysis_linkage_type =\n     invalid type for variable with `#[linkage]` attribute\n+\n+hir_analysis_auto_deref_reached_recursion_limit = reached the recursion limit while auto-dereferencing `{$ty}`\n+    .label = deref recursion limit reached\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)"}, {"sha": "14eb4a5502d5c2f2df139f117eba5e09f5793cf9", "filename": "compiler/rustc_error_messages/locales/en-US/trait_selection.ftl", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -2,10 +2,6 @@ trait_selection_dump_vtable_entries = vtable entries for `{$trait_ref}`: {$entri\n \n trait_selection_unable_to_construct_constant_value = unable to construct a constant value for the unevaluated constant {$unevaluated}\n \n-trait_selection_auto_deref_reached_recursion_limit = reached the recursion limit while auto-dereferencing `{$ty}`\n-    .label = deref recursion limit reached\n-    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n-\n trait_selection_empty_on_clause_in_rustc_on_unimplemented = empty `on`-clause in `#[rustc_on_unimplemented]`\n     .label = empty on-clause here\n "}, {"sha": "730560cc6868627e593dad15649f951df8075093", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -178,6 +178,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         self.state.obligations\n     }\n \n+    pub fn current_obligations(&self) -> Vec<traits::PredicateObligation<'tcx>> {\n+        self.state.obligations.clone()\n+    }\n+\n     pub fn steps(&self) -> &[(Ty<'tcx>, AutoderefKind)] {\n         &self.state.steps\n     }", "previous_filename": "compiler/rustc_trait_selection/src/autoderef.rs"}, {"sha": "d1f4dbc8d84549c3f991ff59bf1d4d51c7b125e9", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -1,4 +1,6 @@\n+use crate::autoderef::Autoderef;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n+\n use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n@@ -22,7 +24,6 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;"}, {"sha": "04f5f3f62765a7f5eea5c46ab69bb6bdeb514d41", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -300,3 +300,15 @@ pub(crate) struct LinkageType {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[help]\n+#[diag(hir_analysis_auto_deref_reached_recursion_limit, code = \"E0055\")]\n+pub struct AutoDerefReachedRecursionLimit<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ty: Ty<'a>,\n+    pub suggested_limit: rustc_session::Limit,\n+    pub crate_name: Symbol,\n+}"}, {"sha": "65c1d7f373a3464b12d6fe74489ec09552d31fd8", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -84,6 +84,7 @@ extern crate rustc_middle;\n pub mod check;\n \n pub mod astconv;\n+pub mod autoderef;\n mod bounds;\n mod check_unused;\n mod coherence;"}, {"sha": "7873257c4e3d1c46343920842db11bcd62c01314", "filename": "compiler/rustc_hir_typeck/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -2,11 +2,11 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, PlaceOp};\n \n+use rustc_hir_analysis::autoderef::{Autoderef, AutoderefKind};\n use rustc_infer::infer::InferOk;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n-use rustc_trait_selection::autoderef::{Autoderef, AutoderefKind};\n \n use std::iter;\n "}, {"sha": "8d417290407ed033049bbe2d48afb48b99d94c2a", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed,\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir_analysis::autoderef::Autoderef;\n use rustc_infer::{\n     infer,\n     traits::{self, Obligation},\n@@ -25,7 +26,6 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n-use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;"}, {"sha": "27db4d27b609432858a83ca4db0add34c83221dc", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeVisitable};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n-use rustc_span::{self, Span};\n+use rustc_span::{self, Span, DUMMY_SP};\n use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode, ObligationCtxt};\n \n use std::cell::{Cell, RefCell};\n@@ -175,6 +175,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     fn_sig\n                 })\n             }),\n+            autoderef_steps: Box::new(|ty| {\n+                let mut autoderef = self.autoderef(DUMMY_SP, ty).silence_errors();\n+                let mut steps = vec![];\n+                while let Some((ty, _)) = autoderef.next() {\n+                    steps.push((ty, autoderef.current_obligations()));\n+                }\n+                steps\n+            }),\n         }\n     }\n "}, {"sha": "ba9c0c8d15e7c07735c5cd2b7970975bbe4e83bd", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -9,6 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n+use rustc_hir_analysis::autoderef::{self, Autoderef};\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -29,7 +30,6 @@ use rustc_span::lev_distance::{\n };\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n-use rustc_trait_selection::autoderef::{self, Autoderef};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n use rustc_trait_selection::traits::query::method_autoderef::{"}, {"sha": "ae0df5aa8f1cf0c89b385653455f9734395569cf", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -3,14 +3,14 @@ use crate::{has_expected_num_generic_args, FnCtxt, PlaceOp};\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir_analysis::autoderef::Autoderef;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref, PointerCast};\n use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n-use rustc_trait_selection::autoderef::Autoderef;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {"}, {"sha": "0223979263d85cb7189858a2243cd5407ecb35e9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -55,6 +55,7 @@ use crate::infer::ExpectedFound;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n+    PredicateObligation,\n };\n \n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n@@ -91,8 +92,12 @@ pub mod nice_region_error;\n pub struct TypeErrCtxt<'a, 'tcx> {\n     pub infcx: &'a InferCtxt<'tcx>,\n     pub typeck_results: Option<std::cell::Ref<'a, ty::TypeckResults<'tcx>>>,\n-    pub normalize_fn_sig: Box<dyn Fn(ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> + 'a>,\n     pub fallback_has_occurred: bool,\n+\n+    pub normalize_fn_sig: Box<dyn Fn(ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> + 'a>,\n+\n+    pub autoderef_steps:\n+        Box<dyn Fn(Ty<'tcx>) -> Vec<(Ty<'tcx>, Vec<PredicateObligation<'tcx>>)> + 'a>,\n }\n \n impl TypeErrCtxt<'_, '_> {"}, {"sha": "8825b5e12c3d9d44a74310e3662befdf1d113d4c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -688,6 +688,10 @@ impl<'tcx> InferCtxt<'tcx> {\n             typeck_results: None,\n             fallback_has_occurred: false,\n             normalize_fn_sig: Box::new(|fn_sig| fn_sig),\n+            autoderef_steps: Box::new(|ty| {\n+                debug_assert!(false, \"shouldn't be using autoderef_steps outside of typeck\");\n+                vec![(ty, vec![])]\n+            }),\n         }\n     }\n "}, {"sha": "4405537c645a9ffb384407f0c8e4ffd686fdef00", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -1,7 +1,6 @@\n use rustc_errors::{fluent, ErrorGuaranteed, Handler, IntoDiagnostic};\n use rustc_macros::Diagnostic;\n use rustc_middle::ty::{self, PolyTraitRef, Ty};\n-use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n #[derive(Diagnostic)]\n@@ -21,18 +20,6 @@ pub struct UnableToConstructConstantValue<'a> {\n     pub unevaluated: ty::UnevaluatedConst<'a>,\n }\n \n-#[derive(Diagnostic)]\n-#[help]\n-#[diag(trait_selection_auto_deref_reached_recursion_limit, code = \"E0055\")]\n-pub struct AutoDerefReachedRecursionLimit<'a> {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-    pub ty: Ty<'a>,\n-    pub suggested_limit: Limit,\n-    pub crate_name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(trait_selection_empty_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n pub struct EmptyOnClauseInOnUnimplemented {"}, {"sha": "081ac966c696193252a769e5944aae4ac38c9090", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -35,7 +35,6 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate smallvec;\n \n-pub mod autoderef;\n pub mod errors;\n pub mod infer;\n pub mod solve;"}, {"sha": "6c6696439c1b9aeff1c28747bae2b28fdff3c089", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8334ce60cce9571fcfdea31a3e67e3933fb7665/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c8334ce60cce9571fcfdea31a3e67e3933fb7665", "patch": "@@ -5,7 +5,6 @@ use super::{\n     PredicateObligation,\n };\n \n-use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::{NormalizeExt, ObligationCtxt};\n \n@@ -750,26 +749,30 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n \n             if let ty::Ref(region, base_ty, mutbl) = *real_ty.skip_binder().kind() {\n-                let mut autoderef = Autoderef::new(\n-                    self,\n-                    obligation.param_env,\n-                    obligation.cause.body_id,\n-                    span,\n-                    base_ty,\n-                );\n-                if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n-                    // Re-add the `&`\n-                    let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n-\n-                    // Remapping bound vars here\n-                    let real_trait_pred_and_ty =\n-                        real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n-                    let obligation = self.mk_trait_obligation_with_new_self_ty(\n-                        obligation.param_env,\n-                        real_trait_pred_and_ty,\n-                    );\n-                    Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n-                }) {\n+                let autoderef = (self.autoderef_steps)(base_ty);\n+                if let Some(steps) =\n+                    autoderef.into_iter().enumerate().find_map(|(steps, (ty, obligations))| {\n+                        // Re-add the `&`\n+                        let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n+\n+                        // Remapping bound vars here\n+                        let real_trait_pred_and_ty =\n+                            real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n+                        let obligation = self.mk_trait_obligation_with_new_self_ty(\n+                            obligation.param_env,\n+                            real_trait_pred_and_ty,\n+                        );\n+                        if obligations\n+                            .iter()\n+                            .chain([&obligation])\n+                            .all(|obligation| self.predicate_may_hold(obligation))\n+                        {\n+                            Some(steps)\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                {\n                     if steps > 0 {\n                         // Don't care about `&mut` because `DerefMut` is used less\n                         // often and user will not expect autoderef happens."}]}