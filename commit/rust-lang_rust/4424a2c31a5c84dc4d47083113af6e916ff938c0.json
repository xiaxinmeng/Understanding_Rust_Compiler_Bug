{"sha": "4424a2c31a5c84dc4d47083113af6e916ff938c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MjRhMmMzMWE1Yzg0ZGM0ZDQ3MDgzMTEzYWY2ZTkxNmZmOTM4YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T03:35:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T03:35:22Z"}, "message": "Auto merge of #58152 - ljedrz:HirIdify_mir, r=Zoxc\n\nPartially HirIdify mir\n\nAnother step towards https://github.com/rust-lang/rust/pull/57578.", "tree": {"sha": "86b385922eb837954d411d4c385a254bbfe792e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86b385922eb837954d411d4c385a254bbfe792e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4424a2c31a5c84dc4d47083113af6e916ff938c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4424a2c31a5c84dc4d47083113af6e916ff938c0", "html_url": "https://github.com/rust-lang/rust/commit/4424a2c31a5c84dc4d47083113af6e916ff938c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4424a2c31a5c84dc4d47083113af6e916ff938c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d725287e3ac05e5f7aa1c8f9f41011bd593c73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d725287e3ac05e5f7aa1c8f9f41011bd593c73a", "html_url": "https://github.com/rust-lang/rust/commit/2d725287e3ac05e5f7aa1c8f9f41011bd593c73a"}, {"sha": "44752c260bc338999c74e8b2324ef26f489c8632", "url": "https://api.github.com/repos/rust-lang/rust/commits/44752c260bc338999c74e8b2324ef26f489c8632", "html_url": "https://github.com/rust-lang/rust/commit/44752c260bc338999c74e8b2324ef26f489c8632"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "5a8d7545e6826ca687ff06673218ea7b1beb67a3", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -833,13 +833,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 format!(\"`{}` would have to be valid for `{}`...\", name, region_name),\n             );\n \n-            if let Some(fn_node_id) = self.infcx.tcx.hir().as_local_node_id(self.mir_def_id) {\n+            if let Some(fn_hir_id) = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id) {\n                 err.span_label(\n                     drop_span,\n                     format!(\n                         \"...but `{}` will be dropped here, when the function `{}` returns\",\n                         name,\n-                        self.infcx.tcx.hir().name(fn_node_id),\n+                        self.infcx.tcx.hir().name_by_hir_id(fn_hir_id),\n                     ),\n                 );\n "}, {"sha": "2a5433d4317860e57a243948d7ba41f31806f627", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -308,9 +308,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                         let upvar_decl = &self.mir.upvar_decls[field.index()];\n                                         let upvar_hir_id =\n                                             upvar_decl.var_hir_id.assert_crate_local();\n-                                        let upvar_node_id =\n-                                            self.infcx.tcx.hir().hir_to_node_id(upvar_hir_id);\n-                                        let upvar_span = self.infcx.tcx.hir().span(upvar_node_id);\n+                                        let upvar_span = self.infcx.tcx.hir().span_by_hir_id(\n+                                            upvar_hir_id);\n                                         diag.span_label(upvar_span, \"captured outer variable\");\n                                         break;\n                                     }"}, {"sha": "e2148140c56ce4bb151122cd17a9d3b76c784038", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n use rustc::util::ppaux::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n-use syntax::ast::{Name, DUMMY_NODE_ID};\n+use syntax::ast::Name;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n@@ -293,9 +293,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         name: &InternedString,\n     ) -> Span {\n         let scope = error_region.free_region_binding_scope(tcx);\n-        let node = tcx.hir().as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n+        let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n \n-        let span = tcx.sess.source_map().def_span(tcx.hir().span(node));\n+        let span = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(node));\n         if let Some(param) = tcx.hir()\n             .get_generics(scope)\n             .and_then(|generics| generics.get_named(name))"}, {"sha": "f6bbaf2db0383e799d3701a1494e22c5bffa8e0a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -71,11 +71,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         upvar_index: usize,\n     ) -> (Symbol, Span) {\n         let upvar_hir_id = mir.upvar_decls[upvar_index].var_hir_id.assert_crate_local();\n-        let upvar_node_id = tcx.hir().hir_to_node_id(upvar_hir_id);\n-        debug!(\"get_upvar_name_and_span_for_region: upvar_node_id={:?}\", upvar_node_id);\n+        debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={:?}\", upvar_hir_id);\n \n-        let upvar_name = tcx.hir().name(upvar_node_id);\n-        let upvar_span = tcx.hir().span(upvar_node_id);\n+        let upvar_name = tcx.hir().name_by_hir_id(upvar_hir_id);\n+        let upvar_span = tcx.hir().span_by_hir_id(upvar_hir_id);\n         debug!(\"get_upvar_name_and_span_for_region: upvar_name={:?} upvar_span={:?}\",\n                upvar_name, upvar_span);\n "}, {"sha": "ad4444e0df24c70403f264e3e12ec3d20f2ce306", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -771,9 +771,8 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n                 owner: fn_def_id.index,\n                 local_id: *late_bound,\n             };\n-            let region_node_id = tcx.hir().hir_to_node_id(hir_id);\n-            let name = tcx.hir().name(region_node_id).as_interned_str();\n-            let region_def_id = tcx.hir().local_def_id(region_node_id);\n+            let name = tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n+            let region_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,\n                 bound_region: ty::BoundRegion::BrNamed(region_def_id, name),"}, {"sha": "ed35fb2e532f5252264ffc7948d53d4eab8a0177", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -64,8 +64,8 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         ) => {\n             (*body_id, ty.span)\n         }\n-        Node::AnonConst(hir::AnonConst { body, id, .. }) => {\n-            (*body, tcx.hir().span(*id))\n+        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => {\n+            (*body, tcx.hir().span_by_hir_id(*hir_id))\n         }\n \n         _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def_id),\n@@ -114,7 +114,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                         let self_arg;\n                         if let Some(ref fn_decl) = tcx.hir().fn_decl(owner_id) {\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let ty_span = tcx.hir().span(tcx.hir().hir_to_node_id(ty_hir_id));\n+                            let ty_span = tcx.hir().span_by_hir_id(ty_hir_id);\n                             opt_ty_info = Some(ty_span);\n                             self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n                                 match fn_decl.implicit_self {"}, {"sha": "ed9f95fdecac6b2ab6cd58b0b984e50d8fb5b4b5", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -48,7 +48,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-        let stmt_span = StatementSpan(cx.tcx.hir().span(stmt.id));\n+        let stmt_span = StatementSpan(cx.tcx.hir().span_by_hir_id(hir_id));\n         match stmt.node {\n             hir::StmtKind::Expr(ref expr) |\n             hir::StmtKind::Semi(ref expr) => {"}, {"sha": "a76aa7454cbe4c6e72eeb510415b842f51db5b29", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4424a2c31a5c84dc4d47083113af6e916ff938c0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4424a2c31a5c84dc4d47083113af6e916ff938c0", "patch": "@@ -450,8 +450,8 @@ fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if recursion_depth > *tcx.sess.recursion_limit.get() {\n         let error = format!(\"reached the recursion limit while instantiating `{}`\",\n                             instance);\n-        if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n-            tcx.sess.span_fatal(tcx.hir().span(node_id), &error);\n+        if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n+            tcx.sess.span_fatal(tcx.hir().span_by_hir_id(hir_id), &error);\n         } else {\n             tcx.sess.fatal(&error);\n         }\n@@ -482,8 +482,8 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let instance_name = instance.to_string();\n         let msg = format!(\"reached the type-length limit while instantiating `{:.64}...`\",\n                           instance_name);\n-        let mut diag = if let Some(node_id) = tcx.hir().as_local_node_id(instance.def_id()) {\n-            tcx.sess.struct_span_fatal(tcx.hir().span(node_id), &msg)\n+        let mut diag = if let Some(hir_id) = tcx.hir().as_local_hir_id(instance.def_id()) {\n+            tcx.sess.struct_span_fatal(tcx.hir().span_by_hir_id(hir_id), &msg)\n         } else {\n             tcx.sess.struct_fatal(&msg)\n         };"}]}