{"sha": "6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzY3OWI4ZTRiMWU5YWUzNDg1MGUxNWQ0M2EyYjk4NDY3MDNlM2E=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:16:19Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/zero_div_zero.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "0c4fd5b10490b6353430d3735da0eee531a59c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4fd5b10490b6353430d3735da0eee531a59c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "html_url": "https://github.com/rust-lang/rust/commit/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a124bc27e2a0c8d30988c680deabe7c504dcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a124bc27e2a0c8d30988c680deabe7c504dcf1", "html_url": "https://github.com/rust-lang/rust/commit/b5a124bc27e2a0c8d30988c680deabe7c504dcf1"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "040615d067e1200b6701eb185c1f17ba6d057dd3", "filename": "tests/ui/wrong_macro_span.rs_", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fwrong_macro_span.rs_", "raw_url": "https://github.com/rust-lang/rust/raw/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fwrong_macro_span.rs_", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_macro_span.rs_?ref=6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "patch": "@@ -19,9 +19,6 @@ fn main() {\n             let t = &thingy;\n \n             match t.$idx { Foo::A(ref val) => { println!(\"42\"); }, _ => {} }\n-\n-\n-\n         }}\n     }\n "}, {"sha": "22253476c231ac870dbd682937485355889a2625", "filename": "tests/ui/zero_div_zero.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.rs?ref=6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "patch": "@@ -5,13 +5,9 @@\n #[deny(zero_divided_by_zero)]\n fn main() {\n     let nan = 0.0 / 0.0;\n-\n     let f64_nan = 0.0 / 0.0f64;\n-\n     let other_f64_nan = 0.0f64 / 0.0;\n-\n     let one_more_f64_nan = 0.0f64/0.0f64;\n-\n     let zero = 0.0;\n     let other_zero = 0.0;\n     let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants."}, {"sha": "4853c2dc70c8861348415073528ad6f62849e27e", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f3679b8e4b1e9ae34850e15d43a2b9846703e3a/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=6f3679b8e4b1e9ae34850e15d43a2b9846703e3a", "patch": "@@ -20,49 +20,49 @@ note: lint level defined here\n   = help: Consider using `std::f32::NAN` if you would like a constant representing NaN\n \n warning: equal expressions as operands to `/`\n- --> $DIR/zero_div_zero.rs:9:19\n+ --> $DIR/zero_div_zero.rs:8:19\n   |\n-9 |     let f64_nan = 0.0 / 0.0f64;\n+8 |     let f64_nan = 0.0 / 0.0f64;\n   |                   ^^^^^^^^^^^^\n   |\n   = note: #[warn(eq_op)] on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n- --> $DIR/zero_div_zero.rs:9:19\n+ --> $DIR/zero_div_zero.rs:8:19\n   |\n-9 |     let f64_nan = 0.0 / 0.0f64;\n+8 |     let f64_nan = 0.0 / 0.0f64;\n   |                   ^^^^^^^^^^^^\n   |\n   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n \n warning: equal expressions as operands to `/`\n-  --> $DIR/zero_div_zero.rs:11:25\n-   |\n-11 |     let other_f64_nan = 0.0f64 / 0.0;\n-   |                         ^^^^^^^^^^^^\n-   |\n-   = note: #[warn(eq_op)] on by default\n+ --> $DIR/zero_div_zero.rs:9:25\n+  |\n+9 |     let other_f64_nan = 0.0f64 / 0.0;\n+  |                         ^^^^^^^^^^^^\n+  |\n+  = note: #[warn(eq_op)] on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n-  --> $DIR/zero_div_zero.rs:11:25\n-   |\n-11 |     let other_f64_nan = 0.0f64 / 0.0;\n-   |                         ^^^^^^^^^^^^\n-   |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+ --> $DIR/zero_div_zero.rs:9:25\n+  |\n+9 |     let other_f64_nan = 0.0f64 / 0.0;\n+  |                         ^^^^^^^^^^^^\n+  |\n+  = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n \n warning: equal expressions as operands to `/`\n-  --> $DIR/zero_div_zero.rs:13:28\n+  --> $DIR/zero_div_zero.rs:10:28\n    |\n-13 |     let one_more_f64_nan = 0.0f64/0.0f64;\n+10 |     let one_more_f64_nan = 0.0f64/0.0f64;\n    |                            ^^^^^^^^^^^^^\n    |\n    = note: #[warn(eq_op)] on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n-  --> $DIR/zero_div_zero.rs:13:28\n+  --> $DIR/zero_div_zero.rs:10:28\n    |\n-13 |     let one_more_f64_nan = 0.0f64/0.0f64;\n+10 |     let one_more_f64_nan = 0.0f64/0.0f64;\n    |                            ^^^^^^^^^^^^^\n    |\n    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN"}]}