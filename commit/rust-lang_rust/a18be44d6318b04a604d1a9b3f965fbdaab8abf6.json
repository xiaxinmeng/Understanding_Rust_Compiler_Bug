{"sha": "a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGJlNDRkNjMxOGIwNGE2MDRkMWE5YjNmOTY1ZmJkYWFiOGFiZjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-20T23:49:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-20T23:49:34Z"}, "message": "Avoid using `#[macro_export]` for documenting builtin macros", "tree": {"sha": "9841b2089a67a7f9335f68223ffa36f4ce1d4f3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9841b2089a67a7f9335f68223ffa36f4ce1d4f3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "html_url": "https://github.com/rust-lang/rust/commit/a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878dd0b5e19e086e608351f33bf12e3625425f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/878dd0b5e19e086e608351f33bf12e3625425f20", "html_url": "https://github.com/rust-lang/rust/commit/878dd0b5e19e086e608351f33bf12e3625425f20"}], "stats": {"total": 101, "additions": 43, "deletions": 58}, "files": [{"sha": "83f9dfea8f2676059c9dc6cf4c0617534ddd6201", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "patch": "@@ -543,6 +543,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n+#[cfg(dox)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n@@ -551,8 +552,7 @@ mod builtin {\n     ///\n     /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -564,8 +564,7 @@ mod builtin {\n     ///\n     /// [`std::format_args!`]: ../std/macro.format_args.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -577,8 +576,7 @@ mod builtin {\n     ///\n     /// [`std::env!`]: ../std/macro.env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -590,8 +588,7 @@ mod builtin {\n     ///\n     /// [`std::option_env!`]: ../std/macro.option_env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -603,8 +600,7 @@ mod builtin {\n     ///\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -616,8 +612,7 @@ mod builtin {\n     ///\n     /// [`std::concat!`]: ../std/macro.concat.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -629,8 +624,7 @@ mod builtin {\n     ///\n     /// [`std::line!`]: ../std/macro.line.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -639,8 +633,7 @@ mod builtin {\n     ///\n     /// [`std::column!`]: ../std/macro.column.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -649,8 +642,7 @@ mod builtin {\n     ///\n     /// [`std::file!`]: ../std/macro.file.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -659,8 +651,7 @@ mod builtin {\n     ///\n     /// [`std::stringify!`]: ../std/macro.stringify.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -669,8 +660,7 @@ mod builtin {\n     ///\n     /// [`std::include_str!`]: ../std/macro.include_str.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -682,8 +672,7 @@ mod builtin {\n     ///\n     /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -695,8 +684,7 @@ mod builtin {\n     ///\n     /// [`std::module_path!`]: ../std/macro.module_path.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -705,8 +693,7 @@ mod builtin {\n     ///\n     /// [`std::cfg!`]: ../std/macro.cfg.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -715,8 +702,7 @@ mod builtin {\n     ///\n     /// [`std::include!`]: ../std/macro.include.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -727,9 +713,8 @@ mod builtin {\n     /// For more information, see the documentation for [`std::assert!`].\n     ///\n     /// [`std::assert!`]: ../std/macro.assert.html\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(dox)]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "8e27a9914f485618f964d5dd021da44f84316af9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "patch": "@@ -3191,7 +3191,8 @@ impl<'a> LoweringContext<'a> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n-            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") {\n+            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n+                              attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n                 self.exported_macros.push(hir::MacroDef {\n                     name,"}, {"sha": "44a1cfa6246ecbccfec4ca617480cce0e752abfe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "patch": "@@ -1253,15 +1253,13 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n         if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n-            Some(def)\n-        } else {\n-            None\n+            return Some(def);\n         }\n-    } else if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n-        Some(*def)\n-    } else {\n-        None\n     }\n+    if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n+        return Some(*def);\n+    }\n+    None\n }\n \n #[derive(Debug)]"}, {"sha": "57ae5d3f8620465fcbc088db419aad7ce0666d57", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "patch": "@@ -303,7 +303,7 @@ macro_rules! assert_approx_eq {\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n #[cfg(dox)]\n-pub mod builtin {\n+mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n@@ -341,7 +341,7 @@ pub mod builtin {\n     ///\n     /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -393,7 +393,7 @@ pub mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -431,7 +431,7 @@ pub mod builtin {\n     /// error: what's that?!\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -457,7 +457,7 @@ pub mod builtin {\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -488,7 +488,7 @@ pub mod builtin {\n     /// # }\n     /// ```\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -510,7 +510,7 @@ pub mod builtin {\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -538,7 +538,7 @@ pub mod builtin {\n     /// println!(\"defined on line: {}\", current_line);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -563,7 +563,7 @@ pub mod builtin {\n     /// println!(\"defined on column: {}\", current_col);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -587,7 +587,7 @@ pub mod builtin {\n     /// println!(\"defined in file: {}\", this_file);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -606,7 +606,7 @@ pub mod builtin {\n     /// assert_eq!(one_plus_one, \"1 + 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -640,7 +640,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -677,7 +677,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -701,7 +701,7 @@ pub mod builtin {\n     /// test::foo();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -723,7 +723,7 @@ pub mod builtin {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -766,7 +766,7 @@ pub mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -819,7 +819,7 @@ pub mod builtin {\n     /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "6164a2bf42f9744d9697c6a9d0183a1a429dcbb9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18be44d6318b04a604d1a9b3f965fbdaab8abf6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "patch": "@@ -686,7 +686,8 @@ pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, Att\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name))\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name)) ||\n+    attr.name().as_str().starts_with(\"rustc_\")\n }\n \n // Attributes that have a special meaning to rustc or rustdoc"}]}