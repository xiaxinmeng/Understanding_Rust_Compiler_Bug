{"sha": "13f0463a195832f10f0f22105ad14e6d6b2eff59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjA0NjNhMTk1ODMyZjEwZjBmMjIxMDVhZDE0ZTZkNmIyZWZmNTk=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-04T01:29:57Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-13T14:25:14Z"}, "message": "Add checked_add method to Instant time type", "tree": {"sha": "aa93f5e194b0d3a8d74072cee40bdc0b8cbaa5a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa93f5e194b0d3a8d74072cee40bdc0b8cbaa5a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f0463a195832f10f0f22105ad14e6d6b2eff59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f0463a195832f10f0f22105ad14e6d6b2eff59", "html_url": "https://github.com/rust-lang/rust/commit/13f0463a195832f10f0f22105ad14e6d6b2eff59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f0463a195832f10f0f22105ad14e6d6b2eff59/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe5cb5342244a716055fa0162e795deabd4985c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe5cb5342244a716055fa0162e795deabd4985c", "html_url": "https://github.com/rust-lang/rust/commit/9fe5cb5342244a716055fa0162e795deabd4985c"}], "stats": {"total": 136, "additions": 62, "deletions": 74}, "files": [{"sha": "fdd172a896cce96a116d841445dd9a36104509f5", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -21,8 +21,8 @@ pub struct Instant {\n \n fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n     dur.as_secs()\n-        .checked_mul(NSEC_PER_SEC)\n-        .and_then(|nanos| nanos.checked_add(dur.subsec_nanos() as abi::timestamp))\n+        .checked_mul(NSEC_PER_SEC)?\n+        .checked_add(dur.subsec_nanos() as abi::timestamp)\n }\n \n pub fn dur2intervals(dur: &Duration) -> abi::timestamp {\n@@ -47,12 +47,10 @@ impl Instant {\n         Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant {\n-            t: self.t\n-                .checked_add(dur2intervals(other))\n-                .expect(\"overflow when adding duration to instant\"),\n-        }\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        checked_dur2intervals(other)?\n+            .checked_add(self.t)\n+            .map(|t| Instant {t})\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> Instant {\n@@ -95,11 +93,6 @@ impl SystemTime {\n         }\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        self.checked_add_duration(other)\n-            .expect(\"overflow when adding duration to instant\")\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n         checked_dur2intervals(other)\n             .and_then(|d| self.t.checked_add(d))"}, {"sha": "5ba8b780727c43be9c60210db1bd368b6036b1e5", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -41,10 +41,6 @@ impl Timespec {\n         }\n     }\n \n-    fn add_duration(&self, other: &Duration) -> Timespec {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n@@ -150,8 +146,8 @@ impl Instant {\n         })\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant { t: self.t.add_duration(other) }\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        self.t.checked_add_duration(other).map(|t| Instant { t })\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> Instant {\n@@ -178,10 +174,6 @@ impl SystemTime {\n         self.t.sub_timespec(&other.t)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime { t: self.t.add_duration(other) }\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n         self.t.checked_add_duration(other).map(|t| SystemTime { t })\n     }"}, {"sha": "81ef0f48833860d57ba03bad3e2752c2ff11a053", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -42,10 +42,6 @@ impl Timespec {\n         }\n     }\n \n-    fn add_duration(&self, other: &Duration) -> Timespec {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n@@ -165,11 +161,8 @@ mod inner {\n             Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> Instant {\n-            Instant {\n-                t: self.t.checked_add(dur2intervals(other))\n-                       .expect(\"overflow when adding duration to instant\"),\n-            }\n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+            checked_dur2intervals(other)?.checked_add(self.t).map(|t| Instant {t})\n         }\n \n         pub fn sub_duration(&self, other: &Duration) -> Instant {\n@@ -199,10 +192,6 @@ mod inner {\n             self.t.sub_timespec(&other.t)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.add_duration(other) }\n-        }\n-\n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n             self.t.checked_add_duration(other).map(|t| SystemTime { t })\n         }\n@@ -237,11 +226,16 @@ mod inner {\n     }\n \n     fn dur2intervals(dur: &Duration) -> u64 {\n+        checked_dur2intervals(dur)\n+            .expect(\"overflow converting duration to nanoseconds\")\n+    }\n+\n+    fn checked_dur2intervals(dur: &Duration) -> Option<u64> {\n+        let nanos = dur.as_secs()\n+            .checked_mul(NSEC_PER_SEC)?\n+            .checked_add(dur.subsec_nanos() as u64)?;\n         let info = info();\n-        let nanos = dur.as_secs().checked_mul(NSEC_PER_SEC).and_then(|nanos| {\n-            nanos.checked_add(dur.subsec_nanos() as u64)\n-        }).expect(\"overflow converting duration to nanoseconds\");\n-        mul_div_u64(nanos, info.denom as u64, info.numer as u64)\n+        Some(mul_div_u64(nanos, info.denom as u64, info.numer as u64))\n     }\n \n     fn info() -> &'static libc::mach_timebase_info {\n@@ -299,8 +293,8 @@ mod inner {\n             })\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> Instant {\n-            Instant { t: self.t.add_duration(other) }\n+        pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+            self.t.checked_add_duration(other).map(|t| Instant { t })\n         }\n \n         pub fn sub_duration(&self, other: &Duration) -> Instant {\n@@ -327,10 +321,6 @@ mod inner {\n             self.t.sub_timespec(&other.t)\n         }\n \n-        pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.add_duration(other) }\n-        }\n-\n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n             self.t.checked_add_duration(other).map(|t| SystemTime { t })\n         }"}, {"sha": "20cd870919c3d67469a5a70a8dc21befd4c05199", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -28,8 +28,8 @@ impl Instant {\n         self.0 - other.0\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 + *other)\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        self.0.checked_add(*other).map(|d| Instant(d))\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> Instant {\n@@ -47,10 +47,6 @@ impl SystemTime {\n         self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 + *other)\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n         self.0.checked_add(*other).map(|d| SystemTime(d))\n     }"}, {"sha": "cad36627bf31d8c2f29cabd7eeb7b4c717228a7b", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -68,26 +68,23 @@ impl Instant {\n         Duration::new(nanos / NANOS_PER_SEC, (nanos % NANOS_PER_SEC) as u32)\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> Instant {\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n         let freq = frequency() as u64;\n-        let t = other.as_secs().checked_mul(freq).and_then(|i| {\n-            (self.t as u64).checked_add(i)\n-        }).and_then(|i| {\n-            i.checked_add(mul_div_u64(other.subsec_nanos() as u64, freq,\n-                                      NANOS_PER_SEC))\n-        }).expect(\"overflow when adding duration to time\");\n-        Instant {\n+        let t = other.as_secs()\n+            .checked_mul(freq)?\n+            .checked_add(mul_div_u64(other.subsec_nanos() as u64, freq, NANOS_PER_SEC))?\n+            .checked_add(self.t as u64)?;\n+        Some(Instant {\n             t: t as c::LARGE_INTEGER,\n-        }\n+        })\n     }\n \n     pub fn sub_duration(&self, other: &Duration) -> Instant {\n         let freq = frequency() as u64;\n         let t = other.as_secs().checked_mul(freq).and_then(|i| {\n             (self.t as u64).checked_sub(i)\n         }).and_then(|i| {\n-            i.checked_sub(mul_div_u64(other.subsec_nanos() as u64, freq,\n-                                      NANOS_PER_SEC))\n+            i.checked_sub(mul_div_u64(other.subsec_nanos() as u64, freq, NANOS_PER_SEC))\n         }).expect(\"overflow when subtracting duration from time\");\n         Instant {\n             t: t as c::LARGE_INTEGER,\n@@ -127,10 +124,6 @@ impl SystemTime {\n         }\n     }\n \n-    pub fn add_duration(&self, other: &Duration) -> SystemTime {\n-        self.checked_add_duration(other).expect(\"overflow when adding duration to time\")\n-    }\n-\n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n         checked_dur2intervals(other)\n             .and_then(|d| self.intervals().checked_add(d))\n@@ -184,11 +177,12 @@ impl Hash for SystemTime {\n     }\n }\n \n-fn checked_dur2intervals(d: &Duration) -> Option<i64> {\n-    d.as_secs()\n-        .checked_mul(INTERVALS_PER_SEC)\n-        .and_then(|i| i.checked_add(d.subsec_nanos() as u64 / 100))\n-        .and_then(|i| i.try_into().ok())\n+fn checked_dur2intervals(dur: &Duration) -> Option<i64> {\n+    dur.as_secs()\n+        .checked_mul(INTERVALS_PER_SEC)?\n+        .checked_add(dur.subsec_nanos() as u64 / 100)?\n+        .try_into()\n+        .ok()\n }\n \n fn dur2intervals(d: &Duration) -> i64 {"}, {"sha": "a0703fd50d5a788ffba442c5bd423e28cddbc0e1", "filename": "src/libstd/time.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f0463a195832f10f0f22105ad14e6d6b2eff59/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=13f0463a195832f10f0f22105ad14e6d6b2eff59", "patch": "@@ -208,14 +208,23 @@ impl Instant {\n     pub fn elapsed(&self) -> Duration {\n         Instant::now() - *self\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n+    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_add(&self, duration: Duration) -> Option<Instant> {\n+        self.0.checked_add_duration(&duration).map(|t| Instant(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Add<Duration> for Instant {\n     type Output = Instant;\n \n     fn add(self, other: Duration) -> Instant {\n-        Instant(self.0.add_duration(&other))\n+        self.checked_add(other)\n+            .expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -372,7 +381,8 @@ impl Add<Duration> for SystemTime {\n     type Output = SystemTime;\n \n     fn add(self, dur: Duration) -> SystemTime {\n-        SystemTime(self.0.add_duration(&dur))\n+        self.checked_add(dur)\n+            .expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -521,6 +531,19 @@ mod tests {\n \n         let second = Duration::new(1, 0);\n         assert_almost_eq!(a - second + second, a);\n+\n+        // checked_add_duration will not panic on overflow\n+        let mut maybe_t = Some(Instant::now());\n+        let max_duration = Duration::from_secs(u64::max_value());\n+        // in case `Instant` can store `>= now + max_duration`.\n+        for _ in 0..2 {\n+            maybe_t = maybe_t.and_then(|t| t.checked_add(max_duration));\n+        }\n+        assert_eq!(maybe_t, None);\n+\n+        // checked_add_duration calculates the right time and will work for another year\n+        let year = Duration::from_secs(60 * 60 * 24 * 365);\n+        assert_eq!(a + year, a.checked_add(year).unwrap());\n     }\n \n     #[test]"}]}