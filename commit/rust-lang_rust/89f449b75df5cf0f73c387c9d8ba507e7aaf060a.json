{"sha": "89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "node_id": "C_kwDOAAsO6NoAKDg5ZjQ0OWI3NWRmNWNmMGY3M2MzODdjOWQ4YmE1MDdlN2FhZjA2MGE", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-05-22T11:41:15Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-05-22T11:41:15Z"}, "message": "fix(extract_module): import resolution for items of submodules", "tree": {"sha": "1791dc278109831b01c323060905d3b1a0cd0f9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1791dc278109831b01c323060905d3b1a0cd0f9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "html_url": "https://github.com/rust-lang/rust/commit/89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89f449b75df5cf0f73c387c9d8ba507e7aaf060a/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddd59b9a9a57c3b013fe298a20db2ab876200f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd59b9a9a57c3b013fe298a20db2ab876200f28", "html_url": "https://github.com/rust-lang/rust/commit/ddd59b9a9a57c3b013fe298a20db2ab876200f28"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "9c2526ef403f0da12fd19ff92e99fd9f704b210d", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/89f449b75df5cf0f73c387c9d8ba507e7aaf060a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f449b75df5cf0f73c387c9d8ba507e7aaf060a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "patch": "@@ -180,7 +180,6 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             }\n \n             for import_path_text_range in import_paths_to_be_removed {\n-                println!(\"Deleting : {:?}\", import_path_text_range);\n                 builder.delete(import_path_text_range);\n             }\n \n@@ -565,12 +564,23 @@ impl Module {\n         } else if exists_inside_sel && !exists_outside_sel {\n             //Changes to be made inside new module, and remove import from outside\n \n-            if let Some((use_tree_str, text_range_opt)) =\n+            if let Some((mut use_tree_str, text_range_opt)) =\n                 self.process_use_stmt_for_import_resolve(use_stmt_opt, node_syntax)\n             {\n                 if let Some(text_range) = text_range_opt {\n                     import_path_to_be_removed = Some(text_range);\n                 }\n+\n+                if source_exists_outside_sel_in_same_mod {\n+                    let first_path_in_use_tree = use_tree_str[use_tree_str.len() - 1].to_string();\n+                    if !first_path_in_use_tree.contains(\"super\")\n+                        && !first_path_in_use_tree.contains(\"crate\")\n+                    {\n+                        let super_path = make::ext::ident_path(\"super\");\n+                        use_tree_str.push(super_path);\n+                    }\n+                }\n+\n                 use_tree_str_opt = Some(use_tree_str);\n             } else if source_exists_outside_sel_in_same_mod {\n                 self.make_use_stmt_of_node_with_super(node_syntax);\n@@ -580,9 +590,14 @@ impl Module {\n         if let Some(use_tree_str) = use_tree_str_opt {\n             let mut use_tree_str = use_tree_str;\n             use_tree_str.reverse();\n-            if use_tree_str[0].to_string().contains(\"super\") {\n-                let super_path = make::ext::ident_path(\"super\");\n-                use_tree_str.insert(0, super_path)\n+\n+            if !(!exists_outside_sel && exists_inside_sel && source_exists_outside_sel_in_same_mod)\n+            {\n+                let first_path_in_use_tree = use_tree_str[0].to_string();\n+                if first_path_in_use_tree.contains(\"super\") {\n+                    let super_path = make::ext::ident_path(\"super\");\n+                    use_tree_str.insert(0, super_path)\n+                }\n             }\n \n             let use_ ="}]}