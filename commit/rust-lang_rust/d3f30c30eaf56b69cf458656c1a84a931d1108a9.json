{"sha": "d3f30c30eaf56b69cf458656c1a84a931d1108a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjMwYzMwZWFmNTZiNjljZjQ1ODY1NmMxYTg0YTkzMWQxMTA4YTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:28Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:39:15Z"}, "message": "Rollup merge of #59009 - sfackler:fix-sgx-vectors, r=alexcrichton\n\nFix SGX implementations of read/write_vectored.", "tree": {"sha": "840b98a2652bbcc32d2e1e5bb39c5f30fb84eeb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840b98a2652bbcc32d2e1e5bb39c5f30fb84eeb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f30c30eaf56b69cf458656c1a84a931d1108a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCpUACgkQ/vbIBR0O\nATxqpA/9G5kPu5e8iGRcb3xbAVCUHZJj9dLhaTOqvrIRYA/knmgwojxwj5Fa8MK8\nF7hi7pZsClGIMifiqEhGSfJ8TFeyBubnRonE3ST2ISFgL9HLET9JjhF5UkBw4Gqm\nhqM8bnzxiKSRf/ArQdhIfwFkOaUQq4zj9P4W5lsxqzVP3q97yVsgT9hDGE0KslEv\nVP9Q61JAHKzNLQ/g3NWXL74rN5G9e/adHWfpRKivceUBNw283G884UcsxGE/B6BW\nFfwSQuGaIfS8o+6TdRX99maJtyrJ5jWfp9yeu757cLdlWt5tmqHXuSoBTabaxEdx\nu95ZD1S6gRvUN0i14KZXBS6OEyOiNzwL4mJkwRA03IAuHs3Gu9uyedxlGn1NDMcr\nm9Az1RLLzodOaecSunWZ6EmvJxWPEf6bnoM+UrZ9JZXbRVWcUk8LhO2u/fXU2SJl\n5S0dRKkjKs9BxZD1U8TNN5nBHglK5U32JySn1CW7cKzaSbwTkWYPadixk4FxSFvN\nuxFcd0cC1Mi/MpgR7WFOszWBuEudM0eJJDexeZuisFBSWAhG+ftIhbg2ThYmCkQC\nMslEByU/pocguK/Bjj9aBWoDhkzgEA3/ilOM5RmFqiImtiEcyoSnjtgdyt7j95AV\nVjuMgbIT2d1gRw15Z1sdmduwS0uzoTu5wMoVrYDUYXPou2hAL8Q=\n=wG91\n-----END PGP SIGNATURE-----", "payload": "tree 840b98a2652bbcc32d2e1e5bb39c5f30fb84eeb9\nparent e2fdf625e9f3a1aeb3c5f1e3327140fdfc437bb7\nparent ab8e1d264e6722169d25d3f52ac2e8de172e205d\nauthor kennytm <kennytm@gmail.com> 1552719388 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747155 +0800\n\nRollup merge of #59009 - sfackler:fix-sgx-vectors, r=alexcrichton\n\nFix SGX implementations of read/write_vectored.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f30c30eaf56b69cf458656c1a84a931d1108a9", "html_url": "https://github.com/rust-lang/rust/commit/d3f30c30eaf56b69cf458656c1a84a931d1108a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f30c30eaf56b69cf458656c1a84a931d1108a9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2fdf625e9f3a1aeb3c5f1e3327140fdfc437bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fdf625e9f3a1aeb3c5f1e3327140fdfc437bb7", "html_url": "https://github.com/rust-lang/rust/commit/e2fdf625e9f3a1aeb3c5f1e3327140fdfc437bb7"}, {"sha": "ab8e1d264e6722169d25d3f52ac2e8de172e205d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e1d264e6722169d25d3f52ac2e8de172e205d", "html_url": "https://github.com/rust-lang/rust/commit/ab8e1d264e6722169d25d3f52ac2e8de172e205d"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "1a2152a79af5a235fc660e5362dc7a79a4fe7fba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d3f30c30eaf56b69cf458656c1a84a931d1108a9", "patch": "@@ -390,6 +390,28 @@ fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n     ret\n }\n \n+pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoVecMut<'_>]) -> Result<usize>\n+where\n+    F: FnOnce(&mut [u8]) -> Result<usize>\n+{\n+    let buf = bufs\n+        .iter_mut()\n+        .find(|b| !b.is_empty())\n+        .map_or(&mut [][..], |b| &mut **b);\n+    read(buf)\n+}\n+\n+pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoVec<'_>]) -> Result<usize>\n+where\n+    F: FnOnce(&[u8]) -> Result<usize>\n+{\n+    let buf = bufs\n+        .iter()\n+        .find(|b| !b.is_empty())\n+        .map_or(&[][..], |b| &**b);\n+    write(buf)\n+}\n+\n /// The `Read` trait allows for reading bytes from a source.\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n@@ -528,14 +550,11 @@ pub trait Read {\n     /// written to possibly being only partially filled. This method must behave\n     /// as a single call to `read` with the buffers concatenated would.\n     ///\n-    /// The default implementation simply passes the first nonempty buffer to\n-    /// `read`.\n+    /// The default implementation calls `read` with either the first nonempty\n+    /// buffer provided, or an empty one if none exists.\n     #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n-        match bufs.iter_mut().find(|b| !b.is_empty()) {\n-            Some(buf) => self.read(buf),\n-            None => Ok(0),\n-        }\n+        default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     /// Determines if this `Read`er can work with buffers of uninitialized\n@@ -1107,14 +1126,11 @@ pub trait Write {\n     /// read from possibly being only partially consumed. This method must\n     /// behave as a call to `write` with the buffers concatenated would.\n     ///\n-    /// The default implementation simply passes the first nonempty buffer to\n-    /// `write`.\n+    /// The default implementation calls `write` with either the first nonempty\n+    /// buffer provided, or an empty one if none exists.\n     #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n-        match bufs.iter().find(|b| !b.is_empty()) {\n-            Some(buf) => self.write(buf),\n-            None => Ok(0),\n-        }\n+        default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     /// Flush this output stream, ensuring that all intermediately buffered"}, {"sha": "3f2f6166a791a4433c316c1e9d90d9d25f44b7dd", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=d3f30c30eaf56b69cf458656c1a84a931d1108a9", "patch": "@@ -35,21 +35,15 @@ impl TcpStream {\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        match bufs.iter_mut().find(|b| !b.is_empty()) {\n-            Some(buf) => self.read(buf),\n-            None => Ok(0),\n-        }\n+        io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> Result<usize> {\n         self.0.write(buf)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        match bufs.iter().find(|b| !b.is_empty()) {\n-            Some(buf) => self.write(buf),\n-            None => Ok(0),\n-        }\n+        io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     pub fn take_error(&self) -> Result<Option<Error>> {"}, {"sha": "e167e917957f3f652b9dce3735f802c868bcb9fd", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f30c30eaf56b69cf458656c1a84a931d1108a9/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=d3f30c30eaf56b69cf458656c1a84a931d1108a9", "patch": "@@ -103,24 +103,16 @@ impl TcpStream {\n         self.inner.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, buf: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        let buf = match buf.get_mut(0) {\n-            Some(buf) => buf,\n-            None => return Ok(0),\n-        };\n-        self.read(buf)\n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n \n-    pub fn write_vectored(&self, buf: &[IoVec<'_>]) -> io::Result<usize> {\n-        let buf = match buf.get(0) {\n-            Some(buf) => buf,\n-            None => return Ok(0),\n-        };\n-        self.write(buf)\n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {"}]}