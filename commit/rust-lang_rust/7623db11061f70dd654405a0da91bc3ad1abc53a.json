{"sha": "7623db11061f70dd654405a0da91bc3ad1abc53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjNkYjExMDYxZjcwZGQ2NTQ0MDVhMGRhOTFiYzNhZDFhYmM1M2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T12:52:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T17:30:00Z"}, "message": "minor clenup", "tree": {"sha": "30d133fdbba5c85443af01de6a1791e67e6f1657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d133fdbba5c85443af01de6a1791e67e6f1657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7623db11061f70dd654405a0da91bc3ad1abc53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7623db11061f70dd654405a0da91bc3ad1abc53a", "html_url": "https://github.com/rust-lang/rust/commit/7623db11061f70dd654405a0da91bc3ad1abc53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7623db11061f70dd654405a0da91bc3ad1abc53a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5671bacfa66a9d83daa1cc42f72ec8701412ccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5671bacfa66a9d83daa1cc42f72ec8701412ccdc", "html_url": "https://github.com/rust-lang/rust/commit/5671bacfa66a9d83daa1cc42f72ec8701412ccdc"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "d95ad3107bea5d69782fcefbc57fca26050687de", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7623db11061f70dd654405a0da91bc3ad1abc53a/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7623db11061f70dd654405a0da91bc3ad1abc53a/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=7623db11061f70dd654405a0da91bc3ad1abc53a", "patch": "@@ -26,11 +26,18 @@ pub use crate::memory_usage::{Bytes, MemoryUsage};\n #[global_allocator]\n static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n+/// Filtering syntax\n+/// env RA_PROFILE=*             // dump everything\n+/// env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+/// env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n pub fn init() {\n-    set_filter(match std::env::var(\"RA_PROFILE\") {\n-        Ok(spec) => Filter::from_spec(&spec),\n-        Err(_) => Filter::disabled(),\n-    });\n+    let spec = std::env::var(\"RA_PROFILE\").unwrap_or_default();\n+    init_from(&spec);\n+}\n+\n+pub fn init_from(spec: &str) {\n+    let filter = if spec.is_empty() { Filter::disabled() } else { Filter::from_spec(spec) };\n+    set_filter(filter);\n }\n \n /// Set profiling filter. It specifies descriptions allowed to profile.\n@@ -43,7 +50,7 @@ pub fn init() {\n /// let f = Filter::from_spec(\"profile1|profile2@2\");\n /// set_filter(f);\n /// ```\n-pub fn set_filter(f: Filter) {\n+fn set_filter(f: Filter) {\n     PROFILING_ENABLED.store(f.depth > 0, Ordering::SeqCst);\n     let set: HashSet<_> = f.allowed.iter().cloned().collect();\n     let mut old = FILTER.write().unwrap();\n@@ -127,18 +134,14 @@ impl Profiler {\n     }\n }\n \n-pub struct Filter {\n+struct Filter {\n     depth: usize,\n     allowed: Vec<String>,\n     longer_than: Duration,\n }\n \n impl Filter {\n-    // Filtering syntax\n-    // env RA_PROFILE=*             // dump everything\n-    // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n-    // env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n-    pub fn from_spec(mut spec: &str) -> Filter {\n+    fn from_spec(mut spec: &str) -> Filter {\n         let longer_than = if let Some(idx) = spec.rfind('>') {\n             let longer_than = spec[idx + 1..].parse().expect(\"invalid profile longer_than\");\n             spec = &spec[..idx];"}, {"sha": "e4fe3411aa632da87c8a97535e19e6382650764b", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7623db11061f70dd654405a0da91bc3ad1abc53a/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7623db11061f70dd654405a0da91bc3ad1abc53a/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7623db11061f70dd654405a0da91bc3ad1abc53a", "patch": "@@ -62,11 +62,7 @@ impl<'a> Project<'a> {\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             env_logger::builder().is_test(true).try_init().unwrap();\n-            ra_prof::set_filter(if crate::PROFILE.is_empty() {\n-                ra_prof::Filter::disabled()\n-            } else {\n-                ra_prof::Filter::from_spec(&crate::PROFILE)\n-            });\n+            ra_prof::init_from(crate::PROFILE);\n         });\n \n         let mut paths = vec![];"}]}