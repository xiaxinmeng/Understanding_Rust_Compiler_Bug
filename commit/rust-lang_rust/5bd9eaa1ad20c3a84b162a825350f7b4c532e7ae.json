{"sha": "5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDllYWExYWQyMGMzYTg0YjE2MmE4MjUzNTBmN2I0YzUzMmU3YWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-27T09:25:22Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-27T09:25:22Z"}, "message": "Add a convenience method for getting the impl Trait `NodeId` of an `IsAysnc`", "tree": {"sha": "90476fbb54f00eef93fef844c7dd7404cf391fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90476fbb54f00eef93fef844c7dd7404cf391fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "html_url": "https://github.com/rust-lang/rust/commit/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85b27915fe8d7b077535cd3fd8a7e1bafb1469d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85b27915fe8d7b077535cd3fd8a7e1bafb1469d", "html_url": "https://github.com/rust-lang/rust/commit/a85b27915fe8d7b077535cd3fd8a7e1bafb1469d"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "09911292ff533ae061b2ca200af1dc3ead1f588a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "patch": "@@ -1352,18 +1352,18 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             fn visit_ty(&mut self, t: &'v hir::Ty) {\n-                    // Don't collect elided lifetimes used inside of `fn()` syntax\n+                // Don't collect elided lifetimes used inside of `fn()` syntax\n                 if let hir::Ty_::TyBareFn(_) = t.node {\n-                        let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n-                        self.collect_elided_lifetimes = false;\n+                    let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n+                    self.collect_elided_lifetimes = false;\n \n-                        // Record the \"stack height\" of `for<'a>` lifetime bindings\n-                        // to be able to later fully undo their introduction.\n-                        let old_len = self.currently_bound_lifetimes.len();\n-                        hir::intravisit::walk_ty(self, t);\n-                        self.currently_bound_lifetimes.truncate(old_len);\n+                    // Record the \"stack height\" of `for<'a>` lifetime bindings\n+                    // to be able to later fully undo their introduction.\n+                    let old_len = self.currently_bound_lifetimes.len();\n+                    hir::intravisit::walk_ty(self, t);\n+                    self.currently_bound_lifetimes.truncate(old_len);\n \n-                        self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n+                    self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n                     hir::intravisit::walk_ty(self, t)\n                 }\n@@ -2579,17 +2579,12 @@ impl<'a> LoweringContext<'a> {\n                         }\n                     });\n \n-                    let asyncness = match header.asyncness {\n-                        IsAsync::Async { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n-                        IsAsync::NotAsync => None,\n-                    };\n-\n                     let (generics, fn_decl) = this.add_in_band_defs(\n                         generics,\n                         fn_def_id,\n                         AnonymousLifetimeMode::PassThrough,\n                         |this| this.lower_fn_decl(\n-                            decl, Some(fn_def_id), true, asyncness)\n+                            decl, Some(fn_def_id), true, header.asyncness.opt_return_id())\n                     );\n \n                     hir::ItemFn(\n@@ -3016,11 +3011,6 @@ impl<'a> LoweringContext<'a> {\n                 });\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n \n-                let asyncness = match sig.header.asyncness {\n-                    IsAsync::Async { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n-                    IsAsync::NotAsync => None,\n-                };\n-\n                 self.add_in_band_defs(\n                     &i.generics,\n                     impl_item_def_id,\n@@ -3031,7 +3021,7 @@ impl<'a> LoweringContext<'a> {\n                                 sig,\n                                 impl_item_def_id,\n                                 impl_trait_return_allow,\n-                                asyncness,\n+                                sig.header.asyncness.opt_return_id(),\n                             ),\n                             body_id,\n                         )\n@@ -3136,8 +3126,8 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::MacroDef(..) => SmallVector::new(),\n             ItemKind::Fn(ref decl, ref header, ..) => {\n                 let mut ids = SmallVector::one(hir::ItemId { id: i.id });\n-                if let IsAsync::Async { return_impl_trait_id, .. } = header.asyncness {\n-                    ids.push(hir::ItemId { id: return_impl_trait_id });\n+                if let Some(id) = header.asyncness.opt_return_id() {\n+                    ids.push(hir::ItemId { id });\n                 }\n                 self.lower_impl_trait_ids(decl, &mut ids);\n                 ids\n@@ -3146,8 +3136,8 @@ impl<'a> LoweringContext<'a> {\n                 let mut ids = SmallVector::one(hir::ItemId { id: i.id });\n                 for item in items {\n                     if let ImplItemKind::Method(ref sig, _) = item.node {\n-                        if let IsAsync::Async { return_impl_trait_id, .. } = sig.header.asyncness {\n-                            ids.push(hir::ItemId { id: return_impl_trait_id });\n+                        if let Some(id) = sig.header.asyncness.opt_return_id() {\n+                            ids.push(hir::ItemId { id });\n                         }\n                         self.lower_impl_trait_ids(&sig.decl, &mut ids);\n                     }"}, {"sha": "d767265ead9d44278f9bffa0b69cde33924eea7e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5bd9eaa1ad20c3a84b162a825350f7b4c532e7ae", "patch": "@@ -1737,6 +1737,13 @@ impl IsAsync {\n             false\n         }\n     }\n+    /// In case this is an `Async` return the `NodeId` for the generated impl Trait item\n+    pub fn opt_return_id(self) -> Option<NodeId> {\n+        match self {\n+            IsAsync::Async { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n+            IsAsync::NotAsync => None,\n+        }\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}]}