{"sha": "d92cef74736aa4503e37ee67806ce5ab3a4eb97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MmNlZjc0NzM2YWE0NTAzZTM3ZWU2NzgwNmNlNWFiM2E0ZWI5N2E=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-11T14:44:01Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-11T14:44:01Z"}, "message": "resolve_for_fn_ptr checks that the instance is an Item before returning shim.", "tree": {"sha": "a12effefa08e3afea9c69038d331ad0e21064c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12effefa08e3afea9c69038d331ad0e21064c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d92cef74736aa4503e37ee67806ce5ab3a4eb97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d92cef74736aa4503e37ee67806ce5ab3a4eb97a", "html_url": "https://github.com/rust-lang/rust/commit/d92cef74736aa4503e37ee67806ce5ab3a4eb97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d92cef74736aa4503e37ee67806ce5ab3a4eb97a/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbc62b56a1ce0457108c86156a6ab357d870f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbc62b56a1ce0457108c86156a6ab357d870f08", "html_url": "https://github.com/rust-lang/rust/commit/2dbc62b56a1ce0457108c86156a6ab357d870f08"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "5139c8085a583d7021a0b13fede6e04cdc590e34", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d92cef74736aa4503e37ee67806ce5ab3a4eb97a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92cef74736aa4503e37ee67806ce5ab3a4eb97a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=d92cef74736aa4503e37ee67806ce5ab3a4eb97a", "patch": "@@ -311,16 +311,18 @@ impl<'tcx> Instance<'tcx> {\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         Instance::resolve(tcx, param_env, def_id, substs).map(|resolved| {\n-            let resolved_def = resolved.def_id();\n-            let codegen_attrs = tcx.codegen_fn_attrs(resolved_def);\n-            if codegen_attrs.flags.contains(CodegenFnAttrFlags::TRACK_CALLER) {\n-                debug!(\" => fn pointer created for function with #[track_caller]\");\n-                Instance {\n-                    def: InstanceDef::ReifyShim(resolved_def),\n-                    substs,\n-                }\n-            } else {\n-                resolved\n+            let has_track_caller = |def| tcx.codegen_fn_attrs(def).flags\n+                .contains(CodegenFnAttrFlags::TRACK_CALLER);\n+\n+            match resolved.def {\n+                InstanceDef::Item(def_id) if has_track_caller(def_id) => {\n+                    debug!(\" => fn pointer created for function with #[track_caller]\");\n+                    Instance {\n+                        def: InstanceDef::ReifyShim(def_id),\n+                        substs,\n+                    }\n+                },\n+                _ => resolved,\n             }\n         })\n     }"}]}