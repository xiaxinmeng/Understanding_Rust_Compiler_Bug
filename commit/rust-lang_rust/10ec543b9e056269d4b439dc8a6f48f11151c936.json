{"sha": "10ec543b9e056269d4b439dc8a6f48f11151c936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZWM1NDNiOWUwNTYyNjlkNGI0MzlkYzhhNmY0OGYxMTE1MWM5MzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-04T06:38:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-04T06:38:22Z"}, "message": "Merge pull request #235 from RalfJung/intrinsics\n\nImplement some missing intrinsics", "tree": {"sha": "af2c913142782ba43dbd2ccd52035b7a44932258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2c913142782ba43dbd2ccd52035b7a44932258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ec543b9e056269d4b439dc8a6f48f11151c936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ec543b9e056269d4b439dc8a6f48f11151c936", "html_url": "https://github.com/rust-lang/rust/commit/10ec543b9e056269d4b439dc8a6f48f11151c936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ec543b9e056269d4b439dc8a6f48f11151c936/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa05ca9f4a3d87ef481c3c554ae46af2026f58c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa05ca9f4a3d87ef481c3c554ae46af2026f58c1", "html_url": "https://github.com/rust-lang/rust/commit/fa05ca9f4a3d87ef481c3c554ae46af2026f58c1"}, {"sha": "19d6ad74e55288d31c15f616bba0418980c2ec1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d6ad74e55288d31c15f616bba0418980c2ec1b", "html_url": "https://github.com/rust-lang/rust/commit/19d6ad74e55288d31c15f616bba0418980c2ec1b"}], "stats": {"total": 343, "additions": 321, "deletions": 22}, "files": [{"sha": "ef6b152cac0651c2abdbe46f45b63d1953f0252f", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -1022,7 +1022,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn copy(&mut self, src: PrimVal, dest: PrimVal, ty: Ty<'tcx>) -> EvalResult<'tcx> {\n         let size = self.type_size(ty)?.expect(\"cannot copy from an unsized type\");\n         let align = self.type_align(ty)?;\n-        self.memory.copy(src, dest, size, align)?;\n+        self.memory.copy(src, dest, size, align, false)?;\n         Ok(())\n     }\n "}, {"sha": "7623a0c4d2e30f5db145e5b379006f9ce059fbe1", "filename": "src/memory.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -658,7 +658,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub fn copy(&mut self, src: PrimVal, dest: PrimVal, size: u64, align: u64) -> EvalResult<'tcx> {\n+    pub fn copy(&mut self, src: PrimVal, dest: PrimVal, size: u64, align: u64, nonoverlapping: bool) -> EvalResult<'tcx> {\n         if size == 0 {\n             return Ok(());\n         }\n@@ -675,6 +675,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         unsafe {\n             assert_eq!(size as usize as u64, size);\n             if src.alloc_id == dest.alloc_id {\n+                if nonoverlapping {\n+                    if (src.offset <= dest.offset && src.offset + size > dest.offset) ||\n+                       (dest.offset <= src.offset && dest.offset + size > src.offset) {\n+                        return Err(EvalError::Intrinsic(format!(\"copy_nonoverlapping called on overlapping ranges\")));\n+                    }\n+                }\n                 ptr::copy(src_bytes, dest_bytes, size as usize);\n             } else {\n                 ptr::copy_nonoverlapping(src_bytes, dest_bytes, size as usize);"}, {"sha": "e1362f52eedda7b37b6d34681d9a72c7917739d6", "filename": "src/operator.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -93,19 +93,20 @@ macro_rules! int_shift {\n     ($kind:expr, $int_op:ident, $l:expr, $r:expr) => ({\n         let l = $l;\n         let r = $r;\n+        let r_wrapped = r as u32;\n         match $kind {\n-            I8  => overflow!($int_op, l as i8,  r),\n-            I16 => overflow!($int_op, l as i16, r),\n-            I32 => overflow!($int_op, l as i32, r),\n-            I64 => overflow!($int_op, l as i64, r),\n-            I128 => overflow!($int_op, l as i128, r),\n-            U8  => overflow!($int_op, l as u8,  r),\n-            U16 => overflow!($int_op, l as u16, r),\n-            U32 => overflow!($int_op, l as u32, r),\n-            U64 => overflow!($int_op, l as u64, r),\n-            U128 => overflow!($int_op, l as u128, r),\n+            I8  => overflow!($int_op, l as i8,  r_wrapped),\n+            I16 => overflow!($int_op, l as i16, r_wrapped),\n+            I32 => overflow!($int_op, l as i32, r_wrapped),\n+            I64 => overflow!($int_op, l as i64, r_wrapped),\n+            I128 => overflow!($int_op, l as i128, r_wrapped),\n+            U8  => overflow!($int_op, l as u8,  r_wrapped),\n+            U16 => overflow!($int_op, l as u16, r_wrapped),\n+            U32 => overflow!($int_op, l as u32, r_wrapped),\n+            U64 => overflow!($int_op, l as u64, r_wrapped),\n+            U128 => overflow!($int_op, l as u128, r_wrapped),\n             _ => bug!(\"int_shift should only be called on int primvals\"),\n-        }\n+        }.map(|(val, over)| (val, over || r != r_wrapped as u128))\n     })\n }\n \n@@ -227,8 +228,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // These ops can have an RHS with a different numeric type.\n         if right_kind.is_int() && (bin_op == Shl || bin_op == Shr) {\n             return match bin_op {\n-                Shl => int_shift!(left_kind, overflowing_shl, l, r as u32),\n-                Shr => int_shift!(left_kind, overflowing_shr, l, r as u32),\n+                Shl => int_shift!(left_kind, overflowing_shl, l, r),\n+                Shr => int_shift!(left_kind, overflowing_shr, l, r),\n                 _ => bug!(\"it has already been checked that this is a shift op\"),\n             };\n         }"}, {"sha": "3121d6698c66bb1caec3512ba20dd5977161e774", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -140,15 +140,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"copy\" |\n             \"copy_nonoverlapping\" => {\n-                // FIXME: check whether overlapping occurs\n                 let elem_ty = substs.type_at(0);\n                 let elem_size = self.type_size(elem_ty)?.expect(\"cannot copy unsized value\");\n                 if elem_size != 0 {\n                     let elem_align = self.type_align(elem_ty)?;\n                     let src = arg_vals[0].read_ptr(&self.memory)?;\n                     let dest = arg_vals[1].read_ptr(&self.memory)?;\n                     let count = self.value_to_primval(arg_vals[2], usize)?.to_u64()?;\n-                    self.memory.copy(src, dest, count * elem_size, elem_align)?;\n+                    self.memory.copy(src, dest, count * elem_size, elem_align, intrinsic_name.ends_with(\"_nonoverlapping\"))?;\n                 }\n             }\n \n@@ -401,6 +400,40 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_value_to_ptr(arg_vals[0], PrimVal::Ptr(ptr), src_ty)?;\n             }\n \n+            \"unchecked_shl\" => {\n+                let bits = self.type_size(dest_ty)?.expect(\"intrinsic can't be called on unsized type\") as u128 * 8;\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs >= bits {\n+                    return Err(EvalError::Intrinsic(format!(\"Overflowing shift by {} in unchecked_shl\", rhs)));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Shl, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_shr\" => {\n+                let bits = self.type_size(dest_ty)?.expect(\"intrinsic can't be called on unsized type\") as u128 * 8;\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs >= bits {\n+                    return Err(EvalError::Intrinsic(format!(\"Overflowing shift by {} in unchecked_shr\", rhs)));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Shr, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_div\" => {\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs == 0 {\n+                    return Err(EvalError::Intrinsic(format!(\"Division by 0 in unchecked_div\")));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Div, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_rem\" => {\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs == 0 {\n+                    return Err(EvalError::Intrinsic(format!(\"Division by 0 in unchecked_rem\")));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Rem, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n             \"uninit\" => {\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes();\n                 let uninit = |this: &mut Self, val: Value| {"}, {"sha": "f4acbadfd549d588a01bdec05f9a7acc480da62c", "filename": "tests/compile-fail/copy_nonoverlapping.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: copy_nonoverlapping called on overlapping ranges\n+\n+fn main() {\n+    let mut data = [0u8; 16];\n+    unsafe {\n+        let a = &data[0] as *const _;\n+        let b = &mut data[1] as *mut _;\n+        std::ptr::copy_nonoverlapping(a, b, 2);\n+    }\n+}"}, {"sha": "3e869ad4a5078687497071ac400cbd6ed8c24801", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(const_err)]\n+\n+fn main() {\n+    let _n = 1 / 0; //~ ERROR: DivisionByZero\n+}"}, {"sha": "4ac6214d88abb12c139c63ae6a3f351faef47ea5", "filename": "tests/compile-fail/div-by-zero.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fdiv-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Fdiv-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Division by 0 in unchecked_div\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_div(1i64, 0);\n+    }\n+}"}, {"sha": "ac09a1740c43e5b8d93138a6632b0ad7361831c2", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(exceeding_bitshifts, const_err)]\n+\n+fn main() {\n+    // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ Overflow(Shr)\n+}"}, {"sha": "a7ac9d1d50398d1f50fb9cd00152cf1808a3b77c", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "previous_filename": "tests/compile-fail/overflowing-rsh-6.rs"}, {"sha": "b8291e1300edf0fbd8fe9e7664a4830fcfe6695c", "filename": "tests/compile-fail/overflowing-unchecked-rsh.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Overflowing shift by 64 in unchecked_shr\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_shr(1i64, 64);\n+    }\n+}"}, {"sha": "3773e699ddf36e0dcff1f984f93a82f91a4743cf", "filename": "tests/run-pass-fullmir/integer-ops.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Finteger-ops.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -0,0 +1,167 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::i32;\n+\n+pub fn main() {\n+    assert_eq!(i8::min_value(), -128);\n+\n+    assert_eq!(i8::max_value(), 127);\n+\n+    assert_eq!(i32::from_str_radix(\"A\", 16), Ok(10));\n+\n+    let n = -0b1000_0000i8;\n+    assert_eq!(n.count_ones(), 1);\n+\n+    let n = -0b1000_0000i8;\n+    assert_eq!(n.count_zeros(), 7);\n+\n+    let n = -1i16;\n+    assert_eq!(n.leading_zeros(), 0);\n+\n+    let n = -4i8;\n+    assert_eq!(n.trailing_zeros(), 2);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    let m = -0x76543210FEDCBA99i64;\n+    assert_eq!(n.rotate_left(32), m);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    let m = -0xFEDCBA987654322i64;\n+    assert_eq!(n.rotate_right(4), m);\n+\n+    let n =  0x0123456789ABCDEFi64;\n+    let m = -0x1032547698BADCFFi64;\n+    assert_eq!(n.swap_bytes(), m);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"big\") {\n+        assert_eq!(i64::from_be(n), n)\n+    } else {\n+        assert_eq!(i64::from_be(n), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"little\") {\n+        assert_eq!(i64::from_le(n), n)\n+    } else {\n+        assert_eq!(i64::from_le(n), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"big\") {\n+        assert_eq!(n.to_be(), n)\n+    } else {\n+        assert_eq!(n.to_be(), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"little\") {\n+        assert_eq!(n.to_le(), n)\n+    } else {\n+        assert_eq!(n.to_le(), n.swap_bytes())\n+    }\n+\n+    assert_eq!(7i16.checked_add(32760), Some(32767));\n+    assert_eq!(8i16.checked_add(32760), None);\n+\n+    assert_eq!((-127i8).checked_sub(1), Some(-128));\n+    assert_eq!((-128i8).checked_sub(1), None);\n+\n+    assert_eq!(6i8.checked_mul(21), Some(126));\n+    assert_eq!(6i8.checked_mul(22), None);\n+\n+    assert_eq!((-127i8).checked_div(-1), Some(127));\n+    assert_eq!((-128i8).checked_div(-1), None);\n+    assert_eq!((1i8).checked_div(0), None);\n+\n+    assert_eq!(5i32.checked_rem(2), Some(1));\n+    assert_eq!(5i32.checked_rem(0), None);\n+    assert_eq!(i32::MIN.checked_rem(-1), None);\n+\n+    assert_eq!(5i32.checked_neg(), Some(-5));\n+    assert_eq!(i32::MIN.checked_neg(), None);\n+\n+    assert_eq!(0x10i32.checked_shl(4), Some(0x100));\n+    assert_eq!(0x10i32.checked_shl(33), None);\n+\n+    assert_eq!(0x10i32.checked_shr(4), Some(0x1));\n+    assert_eq!(0x10i32.checked_shr(33), None);\n+\n+    assert_eq!((-5i32).checked_abs(), Some(5));\n+    assert_eq!(i32::MIN.checked_abs(), None);\n+\n+    assert_eq!(100i8.saturating_add(1), 101);\n+    assert_eq!(100i8.saturating_add(127), 127);\n+\n+    assert_eq!(100i8.saturating_sub(127), -27);\n+    assert_eq!((-100i8).saturating_sub(127), -128);\n+\n+    assert_eq!(100i32.saturating_mul(127), 12700);\n+    assert_eq!((1i32 << 23).saturating_mul(1 << 23), i32::MAX);\n+    assert_eq!((-1i32 << 23).saturating_mul(1 << 23), i32::MIN);\n+\n+    assert_eq!(100i8.wrapping_add(27), 127);\n+    assert_eq!(100i8.wrapping_add(127), -29);\n+\n+    assert_eq!(0i8.wrapping_sub(127), -127);\n+    assert_eq!((-2i8).wrapping_sub(127), 127);\n+\n+    assert_eq!(10i8.wrapping_mul(12), 120);\n+    assert_eq!(11i8.wrapping_mul(12), -124);\n+\n+    assert_eq!(100u8.wrapping_div(10), 10);\n+    assert_eq!((-128i8).wrapping_div(-1), -128);\n+\n+    assert_eq!(100i8.wrapping_rem(10), 0);\n+    assert_eq!((-128i8).wrapping_rem(-1), 0);\n+\n+    assert_eq!(100i8.wrapping_neg(), -100);\n+    assert_eq!((-128i8).wrapping_neg(), -128);\n+\n+    assert_eq!((-1i8).wrapping_shl(7), -128);\n+    assert_eq!((-1i8).wrapping_shl(8), -1);\n+\n+    assert_eq!((-128i8).wrapping_shr(7), -1);\n+    assert_eq!((-128i8).wrapping_shr(8), -128);\n+\n+    assert_eq!(100i8.wrapping_abs(), 100);\n+    assert_eq!((-100i8).wrapping_abs(), 100);\n+    assert_eq!((-128i8).wrapping_abs(), -128);\n+    assert_eq!((-128i8).wrapping_abs() as u8, 128);\n+\n+    assert_eq!(5i32.overflowing_add(2), (7, false));\n+    assert_eq!(i32::MAX.overflowing_add(1), (i32::MIN, true));\n+\n+    assert_eq!(5i32.overflowing_sub(2), (3, false));\n+    assert_eq!(i32::MIN.overflowing_sub(1), (i32::MAX, true));\n+\n+    assert_eq!(5i32.overflowing_mul(2), (10, false));\n+    assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\n+\n+    assert_eq!(5i32.overflowing_div(2), (2, false));\n+    assert_eq!(i32::MIN.overflowing_div(-1), (i32::MIN, true));\n+\n+    assert_eq!(5i32.overflowing_rem(2), (1, false));\n+    assert_eq!(i32::MIN.overflowing_rem(-1), (0, true));\n+\n+    assert_eq!(2i32.overflowing_neg(), (-2, false));\n+    assert_eq!(i32::MIN.overflowing_neg(), (i32::MIN, true));\n+\n+    assert_eq!(0x10i32.overflowing_shl(4), (0x100, false));\n+    assert_eq!(0x10i32.overflowing_shl(36), (0x100, true));\n+\n+    assert_eq!(0x10i32.overflowing_shr(4), (0x1, false));\n+    assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\n+    \n+    assert_eq!(10i8.overflowing_abs(), (10,false));\n+    assert_eq!((-10i8).overflowing_abs(), (10,false));\n+    assert_eq!((-128i8).overflowing_abs(), (-128,true));\n+}"}, {"sha": "a05308acbe6761623f5ca7250048bd4e9febaa2a", "filename": "tests/run-pass-fullmir/u128.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Frun-pass-fullmir%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ec543b9e056269d4b439dc8a6f48f11151c936/tests%2Frun-pass-fullmir%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fu128.rs?ref=10ec543b9e056269d4b439dc8a6f48f11151c936", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This disables the test completely:\n-// ignore-stage1\n-\n #![feature(i128_type)]\n \n fn b<T>(t: T) -> T { t }\n@@ -57,7 +54,6 @@ fn main() {\n     assert_eq!((l as f64) as u128, l);\n     // formatting\n     let j: u128 = 1 << 67;\n-    /*\n     assert_eq!(\"147573952589676412928\", format!(\"{}\", j));\n     assert_eq!(\"80000000000000000\", format!(\"{:x}\", j));\n     assert_eq!(\"20000000000000000000000\", format!(\"{:o}\", j));\n@@ -66,7 +62,6 @@ fn main() {\n     assert_eq!(\"340282366920938463463374607431768211455\",\n         format!(\"{}\", u128::max_value()));\n     assert_eq!(\"147573952589676412928\", format!(\"{:?}\", j));\n-    */\n     // common traits\n     assert_eq!(x, b(x.clone()));\n     // overflow checks", "previous_filename": "tests/run-pass/u128.rs"}]}