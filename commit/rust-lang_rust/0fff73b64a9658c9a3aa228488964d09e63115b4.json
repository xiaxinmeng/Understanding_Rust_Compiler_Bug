{"sha": "0fff73b64a9658c9a3aa228488964d09e63115b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZmY3M2I2NGE5NjU4YzlhM2FhMjI4NDg4OTY0ZDA5ZTYzMTE1YjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T21:22:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-06T00:58:10Z"}, "message": "std: When duplicating fds, skip extra set_cloexec\n\nSimilar to the previous commit, if `F_DUPFD_CLOEXEC` succeeds then there's no\nneed for us to then call `set_cloexec` on platforms other than Linux. The bug\nmentioned of kernels not actually setting the `CLOEXEC` flag has only been\nrepored on Linux, not elsewhere.", "tree": {"sha": "b56882a79aac5bc50479fb330ae228dcd7f5e77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b56882a79aac5bc50479fb330ae228dcd7f5e77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fff73b64a9658c9a3aa228488964d09e63115b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fff73b64a9658c9a3aa228488964d09e63115b4", "html_url": "https://github.com/rust-lang/rust/commit/0fff73b64a9658c9a3aa228488964d09e63115b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fff73b64a9658c9a3aa228488964d09e63115b4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d7eca0e5a80a961c022eed3581f0ab3f00adfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d7eca0e5a80a961c022eed3581f0ab3f00adfc", "html_url": "https://github.com/rust-lang/rust/commit/64d7eca0e5a80a961c022eed3581f0ab3f00adfc"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "0eadee54e26638e70f793a5c5f77f92f6e01470f", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fff73b64a9658c9a3aa228488964d09e63115b4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fff73b64a9658c9a3aa228488964d09e63115b4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=0fff73b64a9658c9a3aa228488964d09e63115b4", "patch": "@@ -77,9 +77,7 @@ impl FileDesc {\n         // follow a strategy similar to musl [1] where if passing\n         // F_DUPFD_CLOEXEC causes `fcntl` to return EINVAL it means it's not\n         // supported (the third parameter, 0, is always valid), so we stop\n-        // trying that. We also *still* call the `set_cloexec` method as\n-        // apparently some kernel at some point stopped setting CLOEXEC even\n-        // though it reported doing so on F_DUPFD_CLOEXEC.\n+        // trying that.\n         //\n         // Also note that Android doesn't have F_DUPFD_CLOEXEC, but get it to\n         // resolve so we at least compile this.\n@@ -95,14 +93,25 @@ impl FileDesc {\n             fd.set_cloexec();\n             fd\n         };\n-        static TRY_CLOEXEC: AtomicBool = AtomicBool::new(true);\n+        static TRY_CLOEXEC: AtomicBool =\n+            AtomicBool::new(!cfg!(target_os = \"android\"));\n         let fd = self.raw();\n-        if !cfg!(target_os = \"android\") && TRY_CLOEXEC.load(Ordering::Relaxed) {\n+        if TRY_CLOEXEC.load(Ordering::Relaxed) {\n             match cvt(unsafe { libc::fcntl(fd, F_DUPFD_CLOEXEC, 0) }) {\n+                // We *still* call the `set_cloexec` method as apparently some\n+                // linux kernel at some point stopped setting CLOEXEC even\n+                // though it reported doing so on F_DUPFD_CLOEXEC.\n+                Ok(fd) => {\n+                    return Ok(if cfg!(target_os = \"linux\") {\n+                        make_filedesc(fd)\n+                    } else {\n+                        FileDesc::new(fd)\n+                    })\n+                }\n                 Err(ref e) if e.raw_os_error() == Some(libc::EINVAL) => {\n                     TRY_CLOEXEC.store(false, Ordering::Relaxed);\n                 }\n-                res => return res.map(make_filedesc),\n+                Err(e) => return Err(e),\n             }\n         }\n         cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).map(make_filedesc)"}]}