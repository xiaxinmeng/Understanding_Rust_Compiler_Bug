{"sha": "3a02e06002e3c34cd63c1237d0998414c56f7efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDJlMDYwMDJlM2MzNGNkNjNjMTIzN2QwOTk4NDE0YzU2ZjdlZmM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-05T16:07:33Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-11T10:20:18Z"}, "message": "BTreeMap: purge innocent use of into_kv_mut", "tree": {"sha": "086c3acb64a2a729916c3737b278d9be7b8f8611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/086c3acb64a2a729916c3737b278d9be7b8f8611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a02e06002e3c34cd63c1237d0998414c56f7efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a02e06002e3c34cd63c1237d0998414c56f7efc", "html_url": "https://github.com/rust-lang/rust/commit/3a02e06002e3c34cd63c1237d0998414c56f7efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a02e06002e3c34cd63c1237d0998414c56f7efc/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441fd2255763c2aeea616aeac61b2c795a4c5330", "url": "https://api.github.com/repos/rust-lang/rust/commits/441fd2255763c2aeea616aeac61b2c795a4c5330", "html_url": "https://github.com/rust-lang/rust/commit/441fd2255763c2aeea616aeac61b2c795a4c5330"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "8e800f48c69de5786cc33b6ec2a7c7ddf5f4740c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a02e06002e3c34cd63c1237d0998414c56f7efc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a02e06002e3c34cd63c1237d0998414c56f7efc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3a02e06002e3c34cd63c1237d0998414c56f7efc", "patch": "@@ -245,7 +245,7 @@ where\n     fn replace(&mut self, key: K) -> Option<K> {\n         let root = Self::ensure_is_owned(&mut self.root);\n         match search::search_tree::<marker::Mut<'_>, K, (), K>(root.node_as_mut(), &key) {\n-            Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n+            Found(handle) => Some(mem::replace(handle.into_key_mut(), key)),\n             GoDown(handle) => {\n                 VacantEntry { key, handle, length: &mut self.length, _marker: PhantomData }\n                     .insert(());\n@@ -811,7 +811,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     {\n         let root_node = self.root.as_mut()?.node_as_mut();\n         match search::search_tree(root_node, key) {\n-            Found(handle) => Some(handle.into_kv_mut().1),\n+            Found(handle) => Some(handle.into_val_mut()),\n             GoDown(_) => None,\n         }\n     }\n@@ -2748,7 +2748,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n-        self.handle.into_kv_mut().1\n+        self.handle.into_val_mut()\n     }\n \n     /// Sets the value of the entry with the `OccupiedEntry`'s key,"}, {"sha": "d844433832471e8b848ea1e322edaab12f56a621", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a02e06002e3c34cd63c1237d0998414c56f7efc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a02e06002e3c34cd63c1237d0998414c56f7efc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=3a02e06002e3c34cd63c1237d0998414c56f7efc", "patch": "@@ -1018,6 +1018,16 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeTyp\n }\n \n impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n+    pub fn into_key_mut(self) -> &'a mut K {\n+        let keys = self.node.into_key_slice_mut();\n+        unsafe { keys.get_unchecked_mut(self.idx) }\n+    }\n+\n+    pub fn into_val_mut(self) -> &'a mut V {\n+        let vals = self.node.into_val_slice_mut();\n+        unsafe { vals.get_unchecked_mut(self.idx) }\n+    }\n+\n     pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) {\n         unsafe {\n             let (keys, vals) = self.node.into_slices_mut();\n@@ -1216,8 +1226,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         unsafe {\n             let (k, v, edge) = self.reborrow_mut().left_edge().descend().pop();\n \n-            let k = mem::replace(self.reborrow_mut().into_kv_mut().0, k);\n-            let v = mem::replace(self.reborrow_mut().into_kv_mut().1, v);\n+            let k = mem::replace(self.kv_mut().0, k);\n+            let v = mem::replace(self.kv_mut().1, v);\n \n             match self.reborrow_mut().right_edge().descend().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push_front(k, v),\n@@ -1233,8 +1243,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         unsafe {\n             let (k, v, edge) = self.reborrow_mut().right_edge().descend().pop_front();\n \n-            let k = mem::replace(self.reborrow_mut().into_kv_mut().0, k);\n-            let v = mem::replace(self.reborrow_mut().into_kv_mut().1, v);\n+            let k = mem::replace(self.kv_mut().0, k);\n+            let v = mem::replace(self.kv_mut().1, v);\n \n             match self.reborrow_mut().left_edge().descend().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push(k, v),\n@@ -1262,7 +1272,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n                 let parent_kv = {\n-                    let kv = self.reborrow_mut().into_kv_mut();\n+                    let kv = self.kv_mut();\n                     (kv.0 as *mut K, kv.1 as *mut V)\n                 };\n \n@@ -1319,7 +1329,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n                 let parent_kv = {\n-                    let kv = self.reborrow_mut().into_kv_mut();\n+                    let kv = self.kv_mut();\n                     (kv.0 as *mut K, kv.1 as *mut V)\n                 };\n "}]}