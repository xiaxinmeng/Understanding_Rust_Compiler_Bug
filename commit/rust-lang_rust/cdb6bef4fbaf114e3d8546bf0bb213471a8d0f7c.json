{"sha": "cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjZiZWY0ZmJhZjExNGUzZDg1NDZiZjBiYjIxMzQ3MWE4ZDBmN2M=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-04-15T13:37:46Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-04-15T14:18:33Z"}, "message": "Deprecate `Box::into_raw_non_null`\n\nPer https://github.com/rust-lang/rust/issues/47336#issuecomment-586589016", "tree": {"sha": "2f22f809f83def91ffd631d7cb98786fefbd4ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f22f809f83def91ffd631d7cb98786fefbd4ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "html_url": "https://github.com/rust-lang/rust/commit/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "html_url": "https://github.com/rust-lang/rust/commit/df768c5c8fcb361c4dc94b4c776d6a78c12862e1"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "567fd625582b9e570d426635a4cf8c6c260b9283", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "patch": "@@ -428,7 +428,15 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        Box::into_raw_non_null(b).as_ptr()\n+        let b = mem::ManuallyDrop::new(b);\n+        let mut unique = b.0;\n+        // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n+        // Stacked Borrows.  This function here corresponds to \"reborrowing to\n+        // a raw pointer\", but there is no actual reborrow here -- so\n+        // without some care, the pointer we are returning here still carries\n+        // the tag of `b`, with `Unique` permission.\n+        // We round-trip through a mutable reference to avoid that.\n+        unsafe { unique.as_mut() as *mut T }\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n@@ -451,6 +459,7 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// ```\n     /// #![feature(box_into_raw_non_null)]\n+    /// #![allow(deprecated)]\n     ///\n     /// let x = Box::new(5);\n     /// let ptr = Box::into_raw_non_null(x);\n@@ -460,24 +469,24 @@ impl<T: ?Sized> Box<T> {\n     /// let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n     /// ```\n     #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]\n+    #[rustc_deprecated(\n+        since = \"1.44.0\",\n+        reason = \"use `Box::leak(b).into()` or `NonNull::from(Box::leak(b))` instead\"\n+    )]\n     #[inline]\n     pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n-        Box::into_unique(b).into()\n+        Box::leak(b).into()\n     }\n \n-    #[unstable(feature = \"ptr_internals\", issue = \"none\", reason = \"use into_raw_non_null instead\")]\n+    #[unstable(\n+        feature = \"ptr_internals\",\n+        issue = \"none\",\n+        reason = \"use `Box::leak(b).into()` or `NonNull::from(Box::leak(b))` instead\"\n+    )]\n     #[inline]\n     #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n-        let b = mem::ManuallyDrop::new(b);\n-        let mut unique = b.0;\n-        // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n-        // Stacked Borrows.  This function here corresponds to \"reborrowing to\n-        // a raw pointer\", but there is no actual reborrow here -- so\n-        // without some care, the pointer we are returning here still carries\n-        // the tag of `b`, with `Unique` permission.\n-        // We round-trip through a mutable reference to avoid that.\n-        unsafe { Unique::new_unchecked(unique.as_mut() as *mut T) }\n+        Box::leak(b).into()\n     }\n \n     /// Consumes and leaks the `Box`, returning a mutable reference,"}, {"sha": "623aa592b604ae5c631730df9e4af43bc1a93363", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "patch": "@@ -143,7 +143,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Box::into_raw_non_null(node));\n+            let node = Some(Box::leak(node).into());\n \n             match self.head {\n                 None => self.tail = node,\n@@ -184,7 +184,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Box::into_raw_non_null(node));\n+            let node = Some(Box::leak(node).into());\n \n             match self.tail {\n                 None => self.head = node,\n@@ -1133,11 +1133,9 @@ impl<T> IterMut<'_, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Box::into_raw_non_null(box Node {\n-                    next: Some(head),\n-                    prev: Some(prev),\n-                    element,\n-                }));\n+                let node = Some(\n+                    Box::leak(box Node { next: Some(head), prev: Some(prev), element }).into(),\n+                );\n \n                 // Not creating references to entire nodes to not invalidate the\n                 // reference to `element` we handed to the user.\n@@ -1442,7 +1440,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn insert_after(&mut self, item: T) {\n         unsafe {\n-            let spliced_node = Box::into_raw_non_null(Box::new(Node::new(item)));\n+            let spliced_node = Box::leak(Box::new(Node::new(item))).into();\n             let node_next = match self.current {\n                 None => self.list.head,\n                 Some(node) => node.as_ref().next,\n@@ -1462,7 +1460,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn insert_before(&mut self, item: T) {\n         unsafe {\n-            let spliced_node = Box::into_raw_non_null(Box::new(Node::new(item)));\n+            let spliced_node = Box::leak(Box::new(Node::new(item))).into();\n             let node_prev = match self.current {\n                 None => self.list.tail,\n                 Some(node) => node.as_ref().prev,"}, {"sha": "26eee09e6fa2396f1fb00ffd627df82a6a47c130", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "patch": "@@ -77,7 +77,6 @@\n #![feature(allocator_api)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n-#![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]"}, {"sha": "653b4573e2a45e328125134697e48785588704b0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "patch": "@@ -324,11 +324,9 @@ impl<T> Rc<T> {\n         // pointers, which ensures that the weak destructor never frees\n         // the allocation while the strong destructor is running, even\n         // if the weak pointer is stored inside the strong one.\n-        Self::from_inner(Box::into_raw_non_null(box RcBox {\n-            strong: Cell::new(1),\n-            weak: Cell::new(1),\n-            value,\n-        }))\n+        Self::from_inner(\n+            Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),\n+        )\n     }\n \n     /// Constructs a new `Rc` with uninitialized contents."}, {"sha": "59bc8686cf4f9ac98b0f4858cc22ba7eb1666d7e", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=cdb6bef4fbaf114e3d8546bf0bb213471a8d0f7c", "patch": "@@ -325,7 +325,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Self::from_inner(Box::into_raw_non_null(x))\n+        Self::from_inner(Box::leak(x).into())\n     }\n \n     /// Constructs a new `Arc` with uninitialized contents."}]}