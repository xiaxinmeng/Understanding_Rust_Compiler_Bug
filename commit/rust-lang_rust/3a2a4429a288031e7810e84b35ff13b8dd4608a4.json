{"sha": "3a2a4429a288031e7810e84b35ff13b8dd4608a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMmE0NDI5YTI4ODAzMWU3ODEwZTg0YjM1ZmYxM2I4ZGQ0NjA4YTQ=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-19T17:28:47Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-19T17:28:47Z"}, "message": "Avoid llvm-config in more situations, like bootstrap test runs", "tree": {"sha": "bb62da749e3a6f4a43dde048eee5ed39b0193299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb62da749e3a6f4a43dde048eee5ed39b0193299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2a4429a288031e7810e84b35ff13b8dd4608a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2a4429a288031e7810e84b35ff13b8dd4608a4", "html_url": "https://github.com/rust-lang/rust/commit/3a2a4429a288031e7810e84b35ff13b8dd4608a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2a4429a288031e7810e84b35ff13b8dd4608a4/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "html_url": "https://github.com/rust-lang/rust/commit/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "dd519506d42a0f0973b7815c6ce339e998927ef3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a2a4429a288031e7810e84b35ff13b8dd4608a4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2a4429a288031e7810e84b35ff13b8dd4608a4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3a2a4429a288031e7810e84b35ff13b8dd4608a4", "patch": "@@ -698,6 +698,20 @@ impl<'a> Builder<'a> {\n         cmd\n     }\n \n+    /// Return the path to `llvm-config` for the target, if it exists.\n+    ///\n+    /// Note that this returns `None` if LLVM is disabled, or if we're in a\n+    /// check build or dry-run, where there's no need to build all of LLVM.\n+    fn llvm_config(&self, target: Interned<String>) -> Option<PathBuf> {\n+        if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run {\n+            let llvm_config = self.ensure(native::Llvm { target });\n+            if llvm_config.is_file() {\n+                return Some(llvm_config);\n+            }\n+        }\n+        None\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of\n@@ -1038,14 +1052,11 @@ impl<'a> Builder<'a> {\n         // requirement, but the `-L` library path is not propagated across\n         // separate Cargo projects. We can add LLVM's library path to the\n         // platform-specific environment variable as a workaround.\n-        //\n-        // Note that this is disabled if LLVM itself is disabled or we're in a\n-        // check build, where if we're in a check build there's no need to build\n-        // all of LLVM and such.\n-        if self.config.llvm_enabled() && self.kind != Kind::Check && mode == Mode::ToolRustc {\n-            let llvm_config = self.ensure(native::Llvm { target });\n-            let llvm_libdir = output(Command::new(&llvm_config).arg(\"--libdir\"));\n-            add_link_lib_path(vec![llvm_libdir.trim().into()], &mut cargo);\n+        if mode == Mode::ToolRustc {\n+            if let Some(llvm_config) = self.llvm_config(target) {\n+                let llvm_libdir = output(Command::new(&llvm_config).arg(\"--libdir\"));\n+                add_link_lib_path(vec![llvm_libdir.trim().into()], &mut cargo);\n+            }\n         }\n \n         if self.config.incremental {"}]}