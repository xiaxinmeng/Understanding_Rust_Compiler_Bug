{"sha": "57681628f9138a76302d0eb41cac69c44b00f75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjgxNjI4ZjkxMzhhNzYzMDJkMGViNDFjYWM2OWM0NGIwMGY3NWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-27T17:52:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-29T15:18:05Z"}, "message": "Move get_lib_features query in librustc_passes.", "tree": {"sha": "4a950c747f4a3f1ffa918b659d111bf04ed36027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a950c747f4a3f1ffa918b659d111bf04ed36027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57681628f9138a76302d0eb41cac69c44b00f75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57681628f9138a76302d0eb41cac69c44b00f75a", "html_url": "https://github.com/rust-lang/rust/commit/57681628f9138a76302d0eb41cac69c44b00f75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57681628f9138a76302d0eb41cac69c44b00f75a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3a9f64f1e08520a486c2a1dfffca7bb7332d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3a9f64f1e08520a486c2a1dfffca7bb7332d26", "html_url": "https://github.com/rust-lang/rust/commit/ec3a9f64f1e08520a486c2a1dfffca7bb7332d26"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "35c20cdbaf591b6a87ce20c3e3eef3ba36e6ac60", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=57681628f9138a76302d0eb41cac69c44b00f75a", "patch": "@@ -102,7 +102,30 @@ pub mod middle {\n     pub mod exported_symbols;\n     pub mod free_region;\n     pub mod lang_items;\n-    pub mod lib_features;\n+    pub mod lib_features {\n+        use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+        use syntax::symbol::Symbol;\n+\n+        #[derive(HashStable)]\n+        pub struct LibFeatures {\n+            // A map from feature to stabilisation version.\n+            pub stable: FxHashMap<Symbol, Symbol>,\n+            pub unstable: FxHashSet<Symbol>,\n+        }\n+\n+        impl LibFeatures {\n+            pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+                let mut all_features: Vec<_> = self\n+                    .stable\n+                    .iter()\n+                    .map(|(f, s)| (*f, Some(*s)))\n+                    .chain(self.unstable.iter().map(|f| (*f, None)))\n+                    .collect();\n+                all_features.sort_unstable_by_key(|f| f.0.as_str());\n+                all_features\n+            }\n+        }\n+    }\n     pub mod privacy;\n     pub mod recursion_limit;\n     pub mod region;"}, {"sha": "69e3358d6f65ebfd84e26eeeebcf3ec9919fabba", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=57681628f9138a76302d0eb41cac69c44b00f75a", "patch": "@@ -2751,10 +2751,6 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n-    providers.get_lib_features = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        tcx.arena.alloc(middle::lib_features::collect(tcx))\n-    };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.arena.alloc(middle::lang_items::collect(tcx))"}, {"sha": "da781f2bae528d2af479b96b8ceb89a533898d2a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=57681628f9138a76302d0eb41cac69c44b00f75a", "patch": "@@ -27,6 +27,7 @@ pub mod entry;\n pub mod hir_stats;\n mod intrinsicck;\n pub mod layout_test;\n+mod lib_features;\n mod liveness;\n pub mod loops;\n mod reachable;\n@@ -35,6 +36,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     check_const::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);\n+    lib_features::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n     intrinsicck::provide(providers);"}, {"sha": "0b0183f3cce04dd3dbbd28a52c5a4d7f02ccfb9a", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57681628f9138a76302d0eb41cac69c44b00f75a/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=57681628f9138a76302d0eb41cac69c44b00f75a", "patch": "@@ -4,38 +4,19 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::ty::TyCtxt;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_macros::HashStable;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::middle::lib_features::LibFeatures;\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax::symbol::Symbol;\n use syntax_pos::{sym, Span};\n \n use rustc_error_codes::*;\n \n-#[derive(HashStable)]\n-pub struct LibFeatures {\n-    // A map from feature to stabilisation version.\n-    pub stable: FxHashMap<Symbol, Symbol>,\n-    pub unstable: FxHashSet<Symbol>,\n-}\n-\n-impl LibFeatures {\n-    fn new() -> LibFeatures {\n-        LibFeatures { stable: Default::default(), unstable: Default::default() }\n-    }\n-\n-    pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n-        let mut all_features: Vec<_> = self\n-            .stable\n-            .iter()\n-            .map(|(f, s)| (*f, Some(*s)))\n-            .chain(self.unstable.iter().map(|f| (*f, None)))\n-            .collect();\n-        all_features.sort_unstable_by_key(|f| f.0.as_str());\n-        all_features\n-    }\n+fn new_lib_features() -> LibFeatures {\n+    LibFeatures { stable: Default::default(), unstable: Default::default() }\n }\n \n pub struct LibFeatureCollector<'tcx> {\n@@ -45,7 +26,7 @@ pub struct LibFeatureCollector<'tcx> {\n \n impl LibFeatureCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {\n-        LibFeatureCollector { tcx, lib_features: LibFeatures::new() }\n+        LibFeatureCollector { tcx, lib_features: new_lib_features() }\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n@@ -142,7 +123,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n+fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n     for attr in krate.non_exported_macro_attrs {\n@@ -151,3 +132,10 @@ pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     intravisit::walk_crate(&mut collector, krate);\n     collector.lib_features\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.get_lib_features = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        tcx.arena.alloc(collect(tcx))\n+    };\n+}"}]}