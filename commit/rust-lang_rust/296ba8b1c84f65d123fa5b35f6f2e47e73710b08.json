{"sha": "296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmJhOGIxYzg0ZjY1ZDEyM2ZhNWIzNWY2ZjJlNDdlNzM3MTBiMDg=", "commit": {"author": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-07T23:18:57Z"}, "committer": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-13T11:04:58Z"}, "message": "Fix bug with reporting wrong thread for races with reads & add thread ids to data-race tests", "tree": {"sha": "61c4c72b9bc9094d2c296b39717d045f52701173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c4c72b9bc9094d2c296b39717d045f52701173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "html_url": "https://github.com/rust-lang/rust/commit/296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe7fbb8900a93cbe080db35e68f35fd515fa87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe7fbb8900a93cbe080db35e68f35fd515fa87d", "html_url": "https://github.com/rust-lang/rust/commit/fbe7fbb8900a93cbe080db35e68f35fd515fa87d"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "7211f3176350b1c613cedd8dd2d5383f89eeff0c", "filename": "src/data_race.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -204,9 +204,9 @@ enum WriteType {\n impl WriteType {\n     fn get_descriptor(self) -> &'static str {\n         match self {\n-            WriteType::Allocate => \"ALLOCATE\",\n-            WriteType::Write => \"WRITE\",\n-            WriteType::Deallocate => \"DEALLOCATE\",\n+            WriteType::Allocate => \"Allocate\",\n+            WriteType::Write => \"Write\",\n+            WriteType::Deallocate => \"Deallocate\",\n         }\n     }\n }\n@@ -695,6 +695,7 @@ impl VClockAlloc {\n     // Find an index, if one exists where the value\n     // in `l` is greater than the value in `r`.\n     fn find_gt_index(l: &VClock, r: &VClock) -> Option<VectorIdx> {\n+        log::info!(\"Find index where not {:?} <= {:?}\", l, r);\n         let l_slice = l.as_slice();\n         let r_slice = r.as_slice();\n         l_slice\n@@ -714,7 +715,7 @@ impl VClockAlloc {\n                         .enumerate()\n                         .find_map(|(idx, &r)| if r == 0 { None } else { Some(idx) })\n                         .expect(\"Invalid VClock Invariant\");\n-                    Some(idx)\n+                    Some(idx + r_slice.len())\n                 } else {\n                     None\n                 }\n@@ -747,16 +748,16 @@ impl VClockAlloc {\n             write_clock = VClock::new_with_index(range.write_index, range.write);\n             (range.write_type.get_descriptor(), range.write_index, &write_clock)\n         } else if let Some(idx) = Self::find_gt_index(&range.read, &current_clocks.clock) {\n-            (\"READ\", idx, &range.read)\n+            (\"Read\", idx, &range.read)\n         } else if !is_atomic {\n             if let Some(atomic) = range.atomic() {\n                 if let Some(idx) = Self::find_gt_index(&atomic.write_vector, &current_clocks.clock)\n                 {\n-                    (\"ATOMIC_STORE\", idx, &atomic.write_vector)\n+                    (\"Atomic Store\", idx, &atomic.write_vector)\n                 } else if let Some(idx) =\n                     Self::find_gt_index(&atomic.read_vector, &current_clocks.clock)\n                 {\n-                    (\"ATOMIC_LOAD\", idx, &atomic.read_vector)\n+                    (\"Atomic Load\", idx, &atomic.read_vector)\n                 } else {\n                     unreachable!(\n                         \"Failed to report data-race for non-atomic operation: no race found\"\n@@ -807,7 +808,7 @@ impl VClockAlloc {\n                     return Self::report_data_race(\n                         &self.global,\n                         range,\n-                        \"READ\",\n+                        \"Read\",\n                         false,\n                         pointer,\n                         len,\n@@ -1167,6 +1168,8 @@ impl GlobalState {\n             vector_info.push(thread)\n         };\n \n+        log::info!(\"Creating thread = {:?} with vector index = {:?}\", thread, created_index);\n+\n         // Mark the chosen vector index as in use by the thread.\n         thread_info[thread].vector_index = Some(created_index);\n "}, {"sha": "620a019b65c7e25090d21d961c5f685ce5fa5694", "filename": "tests/compile-fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -33,7 +33,9 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Relaxed) //~ ERROR Data race\n+\n+            //Note detects with write due to the initialization of memory\n+            *pointer.load(Ordering::Relaxed) //~ ERROR Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "d9f5af396a2d8c15424ec0c6503f3d80cd639b82", "filename": "tests/compile-fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -10,6 +10,11 @@ struct EvilSend<T>(pub T);\n unsafe impl<T> Send for EvilSend<T> {}\n unsafe impl<T> Sync for EvilSend<T> {}\n \n+extern \"C\" {\n+    fn malloc(size: usize) -> *mut u8;\n+    fn free(ptr: *mut u8);\n+}\n+\n pub fn main() {\n     // Shared atomic pointer\n     let pointer = AtomicPtr::new(null_mut::<usize>());\n@@ -28,18 +33,18 @@ pub fn main() {\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n             let pointer = &*ptr.0;\n-            pointer.store(Box::into_raw(Box::new(0usize)), Ordering::Relaxed);\n+            pointer.store(malloc(std::mem::size_of::<usize>()) as *mut usize, Ordering::Relaxed);\n         });\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR Data race\n+            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1)\n         });\n \n         j1.join().unwrap();\n         j2.join().unwrap();\n \n         // Clean up memory, will never be executed\n-        drop(Box::from_raw(pointer.load(Ordering::Relaxed)));\n+        free(pointer.load(Ordering::Relaxed) as *mut _);\n     }\n }"}, {"sha": "44860ee6280037de31050c8378dec1ebd931a952", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).load(Ordering::SeqCst)\n-            atomic_load(c.0 as *mut usize) //~ ERROR Data race\n+            atomic_load(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "6d28e18886cd843afe937eabbbbc26033df7fb54", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race\n+            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "0b753f6710a5ff86382877ab6e166b54f0009034", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() //~ ERROR Data race\n+            *atomic_ref.get_mut() //~ ERROR Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "a9f5fb2fe5bc51e74af87734f251476ae649c7f0", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(32, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 32); //~ ERROR Data race\n+            atomic_store(c.0 as *mut usize, 32); //~ ERROR Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "d5a828fa6e41c2b4c58cdc2264d7c7c189fa9993", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(64, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 64); //~ ERROR Data race\n+            atomic_store(c.0 as *mut usize, 64); //~ ERROR Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "9812dcd79920a1a30297f06f64860517b6f3259a", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race\n+            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "61587dc6384a29a8f56b170fac88b559c9d23b26", "filename": "tests/compile-fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -24,7 +24,7 @@ fn main() {\n         })\n     };\n \n-    // Detatch the thread and sleep until it terminates\n+    // Detach the thread and sleep until it terminates\n     mem::drop(join);\n     sleep(Duration::from_millis(1000));\n \n@@ -36,7 +36,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race      \n+            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) \n         })\n     };\n "}, {"sha": "c14b68080cc82e19cd52f00127b9babc511ee9e1", "filename": "tests/compile-fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -36,6 +36,6 @@ fn main() {\n \n \n     unsafe {\n-        *c.0 = 64; //~ ERROR Data race\n+        *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1)\n     }\n }"}, {"sha": "14b02e95cc2330b5ce769af108f6e80035c51737", "filename": "tests/compile-fail/data_race/dealloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());  //~ ERROR Data race\n+            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());  //~ ERROR Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "8a770563c753fa242c99771807c99e525b386b11", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(1000));\n \n-            } //~ ERROR Data race\n+            } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "315d5eef3f01e1201ae0644c2c6536ba3bdaccf7", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack_drop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,9 +38,8 @@ pub fn main() {\n \n             sleep(Duration::from_millis(1000));\n \n-            // NOTE: the race is also detected with thread 0, and so reported for thread 0 instead of 2, unsure of the cause.\n             drop(stack_var);\n-        });  //~ ERROR Data race detected between DEALLOCATE on Thread(id = 1) and READ on Thread(id = 0, name = \"main\")\n+        });  //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;"}, {"sha": "edcdfffdb5f53b5443545cc1707c1f3dcbce094c", "filename": "tests/compile-fail/data_race/dealloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());  //~ ERROR Data race\n+            __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());  //~ ERROR Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "a245522b06f37de09f778ffa140de9f3fc3895a5", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(1000));\n \n-            } //~ ERROR Data race\n+            } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2)\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "db0bb252776300b4297b4b255e3bb1d98aa436b7", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack_drop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,7 +38,8 @@ pub fn main() {\n             \n             sleep(Duration::from_millis(1000));\n \n-            drop(stack_var);  //~ ERROR Data race\n+            // FIXME: find cause of implicit read event\n+            drop(stack_var); //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "832158a34a6a67cd362c3ee6030e7e1c1bf7acef", "filename": "tests/compile-fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race\n+            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5)\n         });\n \n         j1.join().unwrap();"}, {"sha": "0df66d66ad0773944aa0a0a205750db96a58376b", "filename": "tests/compile-fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race\n+            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "43270e0e915dc94e60180ca8e9ccfcb2c12618eb", "filename": "tests/compile-fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -41,7 +41,7 @@ pub fn main() {\n             sleep(Duration::from_millis(1000));\n \n             //read\n-            stack_var //~ ERROR Data race\n+            stack_var //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "8b8616431f37a797289bd5277f8f9c88a2453027", "filename": "tests/compile-fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race\n+                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n             } else {\n                 0\n             }"}, {"sha": "91235280d210ad0d0fdea22580bcef8befc7f27d", "filename": "tests/compile-fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             sleep(Duration::from_millis(5000));\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race\n+                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n             } else {\n                 0\n             }"}, {"sha": "54b9f49937c888dd8b523d8bb2d5e53b787acb67", "filename": "tests/compile-fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race\n+                *c.0 //~ ERROR Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1)\n             } else {\n                 0\n             }"}, {"sha": "fcf683a65d8ed6c7e128281d83254bc13caf2b4c", "filename": "tests/compile-fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race\n+                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n             } else {\n                 0\n             }"}, {"sha": "61909eda86337debbdbdb9b0dce7a0d0b868220b", "filename": "tests/compile-fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race\n+            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "91ac51787fbeb938c1d35a15844c080d37be78b0", "filename": "tests/compile-fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ba8b1c84f65d123fa5b35f6f2e47e73710b08/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=296ba8b1c84f65d123fa5b35f6f2e47e73710b08", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n             \n             sleep(Duration::from_millis(1000));\n \n-            stack_var = 1usize; //~ ERROR Data race\n+            stack_var = 1usize; //~ ERROR Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2)\n             \n             // read to silence errors\n             stack_var"}]}