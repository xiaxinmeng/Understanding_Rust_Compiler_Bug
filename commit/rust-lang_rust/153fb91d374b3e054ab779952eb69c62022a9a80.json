{"sha": "153fb91d374b3e054ab779952eb69c62022a9a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1M2ZiOTFkMzc0YjNlMDU0YWI3Nzk5NTJlYjY5YzYyMDIyYTlhODA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-16T19:24:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T19:24:08Z"}, "message": "Rollup merge of #76721 - camelid:intra-doc-links-for-core-mem, r=jyn514\n\nUse intra-doc links in `core::mem`\n\nPart of #75080.\n\nLast one for now!\n\n---\n\n@rustbot modify labels: A-intra-doc-links T-doc", "tree": {"sha": "d45aaea0c9b204862773eafe0d2181b5220d80ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45aaea0c9b204862773eafe0d2181b5220d80ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/153fb91d374b3e054ab779952eb69c62022a9a80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYmZZCRBK7hj4Ov3rIwAAdHIIAAO4IgAVyAIRlvazzXWGyyPb\nliMFH9l/X3wyr5olobB1D4x2WY+9Q1d5Vi/RQT3mR/gMgVHG7F8fVn1kG6nLjLVS\nLK8Ija7Q5sGkAFjNlhjFq7i28S9ljn2GakykpBPOjvo6RDZ+BnTGPKELnYloLfi/\nO16ra7IHMt3o95id9sLNjUodUP1WYGsAlQOJkA4pDnj1aziIwxIE3urWwuX0JQKk\nwK+vR4+x12yl1Ti3Enf0puwJ59mdull0UTsSgjQCVNTPY2AT6NwrTHKAbU2ZT5rK\nzv0ruKqmDeV5O/nlMc+ZTkmWTBAYOxr0iJ3q02TaZQVWvVlsPw8HoIUJe1VMqJQ=\n=CwVG\n-----END PGP SIGNATURE-----\n", "payload": "tree d45aaea0c9b204862773eafe0d2181b5220d80ab\nparent a63f8c1cac77a7b69e1aa3f25cb37f5b8299d1fc\nparent 58310ce94bc9bde54fdbf97ec4fee18201d69221\nauthor Tyler Mandry <tmandry@gmail.com> 1600284248 -0700\ncommitter GitHub <noreply@github.com> 1600284248 -0700\n\nRollup merge of #76721 - camelid:intra-doc-links-for-core-mem, r=jyn514\n\nUse intra-doc links in `core::mem`\n\nPart of #75080.\n\nLast one for now!\n\n---\n\n@rustbot modify labels: A-intra-doc-links T-doc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/153fb91d374b3e054ab779952eb69c62022a9a80", "html_url": "https://github.com/rust-lang/rust/commit/153fb91d374b3e054ab779952eb69c62022a9a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/153fb91d374b3e054ab779952eb69c62022a9a80/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63f8c1cac77a7b69e1aa3f25cb37f5b8299d1fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63f8c1cac77a7b69e1aa3f25cb37f5b8299d1fc", "html_url": "https://github.com/rust-lang/rust/commit/a63f8c1cac77a7b69e1aa3f25cb37f5b8299d1fc"}, {"sha": "58310ce94bc9bde54fdbf97ec4fee18201d69221", "url": "https://api.github.com/repos/rust-lang/rust/commits/58310ce94bc9bde54fdbf97ec4fee18201d69221", "html_url": "https://github.com/rust-lang/rust/commit/58310ce94bc9bde54fdbf97ec4fee18201d69221"}], "stats": {"total": 57, "additions": 17, "deletions": 40}, "files": [{"sha": "aa1b5529df22247a777697edb846a25c2f5194de", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/153fb91d374b3e054ab779952eb69c62022a9a80/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153fb91d374b3e054ab779952eb69c62022a9a80/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=153fb91d374b3e054ab779952eb69c62022a9a80", "patch": "@@ -31,10 +31,10 @@ pub use crate::intrinsics::transmute;\n /// forever in an unreachable state. However, it does not guarantee that pointers\n /// to this memory will remain valid.\n ///\n-/// * If you want to leak memory, see [`Box::leak`][leak].\n-/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`][into_raw].\n+/// * If you want to leak memory, see [`Box::leak`].\n+/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`].\n /// * If you want to dispose of a value properly, running its destructor, see\n-/// [`mem::drop`][drop].\n+/// [`mem::drop`].\n ///\n /// # Safety\n ///\n@@ -132,15 +132,11 @@ pub use crate::intrinsics::transmute;\n /// ownership to `s` \u2014 the final step of interacting with `v` to dispose of it without\n /// running its destructor is entirely avoided.\n ///\n-/// [drop]: fn.drop.html\n-/// [uninit]: fn.uninitialized.html\n-/// [clone]: ../clone/trait.Clone.html\n-/// [swap]: fn.swap.html\n-/// [box]: ../../std/boxed/struct.Box.html\n-/// [leak]: ../../std/boxed/struct.Box.html#method.leak\n-/// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n+/// [`Box`]: ../../std/boxed/struct.Box.html\n+/// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak\n+/// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw\n+/// [`mem::drop`]: drop\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [`ManuallyDrop`]: struct.ManuallyDrop.html\n #[inline]\n #[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -152,8 +148,6 @@ pub const fn forget<T>(t: T) {\n ///\n /// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n /// stabilized.\n-///\n-/// [`forget`]: fn.forget.html\n #[inline]\n #[unstable(feature = \"forget_unsized\", issue = \"none\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -301,7 +295,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n /// assert_eq!(2, mem::size_of::<ExampleUnion>());\n /// ```\n ///\n-/// [alignment]: ./fn.align_of.html\n+/// [alignment]: align_of\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n@@ -365,7 +359,6 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n-/// [`size_of_val`]: ../../core/mem/fn.size_of_val.html\n ///\n /// # Examples\n ///\n@@ -501,7 +494,6 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n-/// [`align_of_val`]: ../../core/mem/fn.align_of_val.html\n ///\n /// # Examples\n ///\n@@ -540,7 +532,7 @@ pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// `needs_drop` explicitly. Types like [`HashMap`], on the other hand, have to drop\n /// values one at a time and should use this API.\n ///\n-/// [`drop_in_place`]: ../ptr/fn.drop_in_place.html\n+/// [`drop_in_place`]: crate::ptr::drop_in_place\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n ///\n /// # Examples\n@@ -595,9 +587,9 @@ pub const fn needs_drop<T>() -> bool {\n /// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n /// It is useful for FFI sometimes, but should generally be avoided.\n ///\n-/// [zeroed]: union.MaybeUninit.html#method.zeroed\n+/// [zeroed]: MaybeUninit::zeroed\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [inv]: union.MaybeUninit.html#initialization-invariant\n+/// [inv]: MaybeUninit#initialization-invariant\n ///\n /// # Examples\n ///\n@@ -650,10 +642,10 @@ pub unsafe fn zeroed<T>() -> T {\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n ///\n-/// [`MaybeUninit<T>`]: union.MaybeUninit.html\n-/// [uninit]: union.MaybeUninit.html#method.uninit\n-/// [assume_init]: union.MaybeUninit.html#method.assume_init\n-/// [inv]: union.MaybeUninit.html#initialization-invariant\n+/// [`MaybeUninit<T>`]: MaybeUninit\n+/// [uninit]: MaybeUninit::uninit\n+/// [assume_init]: MaybeUninit::assume_init\n+/// [inv]: MaybeUninit#initialization-invariant\n #[inline(always)]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -686,9 +678,6 @@ pub unsafe fn uninitialized<T>() -> T {\n /// assert_eq!(42, x);\n /// assert_eq!(5, y);\n /// ```\n-///\n-/// [`replace`]: fn.replace.html\n-/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n@@ -754,10 +743,6 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n /// assert_eq!(buffer.buf.len(), 0);\n /// ```\n-///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`replace`]: fn.replace.html\n-/// [`swap`]: fn.swap.html\n #[inline]\n #[stable(feature = \"mem_take\", since = \"1.40.0\")]\n pub fn take<T: Default>(dest: &mut T) -> T {\n@@ -822,10 +807,6 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// assert_eq!(buffer.replace_index(0, 2), 0);\n /// assert_eq!(buffer.buf[0], 2);\n /// ```\n-///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`swap`]: fn.swap.html\n-/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n@@ -851,7 +832,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// Because `_x` is moved into the function, it is automatically dropped before\n /// the function returns.\n ///\n-/// [drop]: ../ops/trait.Drop.html\n+/// [drop]: Drop\n ///\n /// # Examples\n ///\n@@ -894,8 +875,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// println!(\"x: {}, y: {}\", x, y.0); // still available\n /// ```\n ///\n-/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`RefCell`]: crate::cell::RefCell\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) {}\n@@ -914,7 +894,6 @@ pub fn drop<T>(_x: T) {}\n /// `T`.\n ///\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [size_of]: fn.size_of.html\n ///\n /// # Examples\n ///\n@@ -960,8 +939,6 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n /// Opaque type representing the discriminant of an enum.\n ///\n /// See the [`discriminant`] function in this module for more information.\n-///\n-/// [`discriminant`]: fn.discriminant.html\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);\n "}]}