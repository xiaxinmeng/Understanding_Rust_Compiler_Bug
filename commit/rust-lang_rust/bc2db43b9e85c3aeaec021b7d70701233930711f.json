{"sha": "bc2db43b9e85c3aeaec021b7d70701233930711f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMmRiNDNiOWU4NWMzYWVhZWMwMjFiN2Q3MDcwMTIzMzkzMDcxMWY=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-03T19:50:39Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-04T15:10:24Z"}, "message": "Remove unnecessary parts of run_fat_lto signature\n\nFat LTO merges into one module, so only return one module.", "tree": {"sha": "44d3b9195e36e649f9e7648a36f36a0dfcf88ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d3b9195e36e649f9e7648a36f36a0dfcf88ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc2db43b9e85c3aeaec021b7d70701233930711f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2db43b9e85c3aeaec021b7d70701233930711f", "html_url": "https://github.com/rust-lang/rust/commit/bc2db43b9e85c3aeaec021b7d70701233930711f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc2db43b9e85c3aeaec021b7d70701233930711f/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdbee6311b5a317630fb46c7c46d50b14e18da24", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbee6311b5a317630fb46c7c46d50b14e18da24", "html_url": "https://github.com/rust-lang/rust/commit/bdbee6311b5a317630fb46c7c46d50b14e18da24"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "5f5d0c40fe3c6dd78c14e8d9c3e76bac2877fd1e", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=bc2db43b9e85c3aeaec021b7d70701233930711f", "patch": "@@ -144,22 +144,15 @@ fn prepare_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n /// for further optimization.\n pub(crate) fn run_fat(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                       modules: Vec<ModuleCodegen<ModuleLlvm>>,\n-                      _cached_modules: Vec<(SerializedModule<ModuleBuffer>, WorkProduct)>,\n                       timeline: &mut Timeline)\n-    -> Result<(Vec<LtoModuleCodegen<LlvmCodegenBackend>>, Vec<WorkProduct>), FatalError>\n+    -> Result<LtoModuleCodegen<LlvmCodegenBackend>, FatalError>\n {\n     let diag_handler = cgcx.create_diag_handler();\n     let (symbol_white_list, upstream_modules) = prepare_lto(cgcx, timeline, &diag_handler)?;\n     let symbol_white_list = symbol_white_list.iter()\n                                              .map(|c| c.as_ptr())\n                                              .collect::<Vec<_>>();\n-    let opt_jobs = fat_lto(cgcx,\n-                           &diag_handler,\n-                           modules,\n-                           upstream_modules,\n-                           &symbol_white_list,\n-                           timeline);\n-    opt_jobs.map(|opt_jobs| (opt_jobs, vec![]))\n+    fat_lto(cgcx, &diag_handler, modules, upstream_modules, &symbol_white_list, timeline)\n }\n \n /// Performs thin LTO by performing necessary global analysis and returning two\n@@ -195,7 +188,7 @@ fn fat_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n            mut serialized_modules: Vec<(SerializedModule<ModuleBuffer>, CString)>,\n            symbol_white_list: &[*const libc::c_char],\n            timeline: &mut Timeline)\n-    -> Result<Vec<LtoModuleCodegen<LlvmCodegenBackend>>, FatalError>\n+    -> Result<LtoModuleCodegen<LlvmCodegenBackend>, FatalError>\n {\n     info!(\"going for a fat lto\");\n \n@@ -284,10 +277,10 @@ fn fat_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         timeline.record(\"passes\");\n     }\n \n-    Ok(vec![LtoModuleCodegen::Fat {\n+    Ok(LtoModuleCodegen::Fat {\n         module: Some(module),\n         _serialized_bitcode: serialized_bitcode,\n-    }])\n+    })\n }\n \n struct Linker<'a>(&'a mut llvm::Linker<'a>);"}, {"sha": "4eb1fc1b1dc334f473583270a513ca73cdc16a57", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=bc2db43b9e85c3aeaec021b7d70701233930711f", "patch": "@@ -179,10 +179,9 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     fn run_fat_lto(\n         cgcx: &CodegenContext<Self>,\n         modules: Vec<ModuleCodegen<Self::Module>>,\n-        cached_modules: Vec<(SerializedModule<Self::ModuleBuffer>, WorkProduct)>,\n         timeline: &mut Timeline\n-    ) -> Result<(Vec<LtoModuleCodegen<Self>>, Vec<WorkProduct>), FatalError> {\n-        back::lto::run_fat(cgcx, modules, cached_modules, timeline)\n+    ) -> Result<LtoModuleCodegen<Self>, FatalError> {\n+        back::lto::run_fat(cgcx, modules, timeline)\n     }\n     fn run_thin_lto(\n         cgcx: &CodegenContext<Self>,"}, {"sha": "fe40cb184836737e8ad9ec5e54fd6acb1b1d62db", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=bc2db43b9e85c3aeaec021b7d70701233930711f", "patch": "@@ -264,8 +264,10 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n \n     let (lto_modules, copy_jobs) = if !needs_fat_lto.is_empty() {\n         assert!(needs_thin_lto.is_empty());\n-        B::run_fat_lto(cgcx, needs_fat_lto, import_only_modules, &mut timeline)\n-            .unwrap_or_else(|e| e.raise())\n+        assert!(import_only_modules.is_empty());\n+        let lto_module = B::run_fat_lto(cgcx, needs_fat_lto, &mut timeline)\n+            .unwrap_or_else(|e| e.raise());\n+        (vec![lto_module], vec![])\n     } else {\n         assert!(needs_fat_lto.is_empty());\n         B::run_thin_lto(cgcx, needs_thin_lto, import_only_modules, &mut timeline)"}, {"sha": "7b8f9395f85e97b1ae3863d5666c5ef5ed106c4c", "filename": "src/librustc_codegen_ssa/traits/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2db43b9e85c3aeaec021b7d70701233930711f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fwrite.rs?ref=bc2db43b9e85c3aeaec021b7d70701233930711f", "patch": "@@ -29,9 +29,8 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n     fn run_fat_lto(\n         cgcx: &CodegenContext<Self>,\n         modules: Vec<ModuleCodegen<Self::Module>>,\n-        cached_modules: Vec<(SerializedModule<Self::ModuleBuffer>, WorkProduct)>,\n         timeline: &mut Timeline,\n-    ) -> Result<(Vec<LtoModuleCodegen<Self>>, Vec<WorkProduct>), FatalError>;\n+    ) -> Result<LtoModuleCodegen<Self>, FatalError>;\n     /// Performs thin LTO by performing necessary global analysis and returning two\n     /// lists, one of the modules that need optimization and another for modules that\n     /// can simply be copied over from the incr. comp. cache."}]}