{"sha": "683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2U0ODBmZmUwZWEzNTVkMDM4YjRlOWMwZWZlYjljMTQ3NWEyZDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-10T22:59:33Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-14T07:40:30Z"}, "message": "Refactor away `WithAttrs` trait", "tree": {"sha": "a7c351646c6bf89fa99704a9cc97d882f8163ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c351646c6bf89fa99704a9cc97d882f8163ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "html_url": "https://github.com/rust-lang/rust/commit/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf7970ac70b4e7781e7b2f3816720aa62fac6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf7970ac70b4e7781e7b2f3816720aa62fac6fd", "html_url": "https://github.com/rust-lang/rust/commit/5bf7970ac70b4e7781e7b2f3816720aa62fac6fd"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "8a2b0a0d4d64a99a9065d1045c55f3a74c93d4b9", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "patch": "@@ -889,21 +889,6 @@ pub trait HasAttrs: Sized {\n     fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self;\n }\n \n-/// A cheap way to add Attributes to an AST node.\n-pub trait WithAttrs {\n-    // FIXME: Could be extended to anything IntoIter<Item=Attribute>\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self;\n-}\n-\n-impl<T: HasAttrs> WithAttrs for T {\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map_attrs(|mut orig_attrs| {\n-            orig_attrs.extend(attrs.into_attr_vec());\n-            orig_attrs\n-        })\n-    }\n-}\n-\n impl HasAttrs for Vec<Attribute> {\n     fn attrs(&self) -> &[Attribute] {\n         &self"}, {"sha": "f803b942b8b4599efa0b705882b854e834b708a8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683e480ffe0ea355d038b4e9c0efeb9c1475a2d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=683e480ffe0ea355d038b4e9c0efeb9c1475a2d3", "patch": "@@ -14,9 +14,8 @@ use ast::{MacStmtStyle, Mrk, Stmt, StmtKind, ItemKind};\n use ast::TokenTree;\n use ast;\n use ext::mtwt;\n-use ext::build::AstBuilder;\n use attr;\n-use attr::{AttrMetaMethods, WithAttrs, ThinAttributesExt};\n+use attr::{AttrMetaMethods, ThinAttributesExt};\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, ExpnId, NameAndSpan, MacroBang, MacroAttribute};\n use config::StripUnconfigured;\n@@ -87,19 +86,18 @@ impl MacroGenerable for Option<P<ast::Expr>> {\n     }\n }\n \n-pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n+pub fn expand_expr(mut expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n     match expr.node {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n         ast::ExprKind::Mac(mac) => {\n-            expand_mac_invoc(mac, None, expr.attrs.into_attr_vec(), expr.span, fld)\n+            return expand_mac_invoc(mac, None, expr.attrs.into_attr_vec(), expr.span, fld);\n         }\n \n         ast::ExprKind::While(cond, body, opt_ident) => {\n             let cond = fld.fold_expr(cond);\n             let (body, opt_ident) = expand_loop_block(body, opt_ident, fld);\n-            fld.cx.expr(expr.span, ast::ExprKind::While(cond, body, opt_ident))\n-                .with_attrs(fold_thin_attrs(expr.attrs, fld))\n+            expr.node = ast::ExprKind::While(cond, body, opt_ident);\n         }\n \n         ast::ExprKind::WhileLet(pat, cond, body, opt_ident) => {\n@@ -116,14 +114,12 @@ pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n             });\n             assert!(rewritten_pats.len() == 1);\n \n-            let wl = ast::ExprKind::WhileLet(rewritten_pats.remove(0), cond, body, opt_ident);\n-            fld.cx.expr(expr.span, wl).with_attrs(fold_thin_attrs(expr.attrs, fld))\n+            expr.node = ast::ExprKind::WhileLet(rewritten_pats.remove(0), cond, body, opt_ident);\n         }\n \n         ast::ExprKind::Loop(loop_block, opt_ident) => {\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n-            fld.cx.expr(expr.span, ast::ExprKind::Loop(loop_block, opt_ident))\n-                .with_attrs(fold_thin_attrs(expr.attrs, fld))\n+            expr.node = ast::ExprKind::Loop(loop_block, opt_ident);\n         }\n \n         ast::ExprKind::ForLoop(pat, head, body, opt_ident) => {\n@@ -140,8 +136,7 @@ pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n             assert!(rewritten_pats.len() == 1);\n \n             let head = fld.fold_expr(head);\n-            let fl = ast::ExprKind::ForLoop(rewritten_pats.remove(0), head, body, opt_ident);\n-            fld.cx.expr(expr.span, fl).with_attrs(fold_thin_attrs(expr.attrs, fld))\n+            expr.node = ast::ExprKind::ForLoop(rewritten_pats.remove(0), head, body, opt_ident);\n         }\n \n         ast::ExprKind::IfLet(pat, sub_expr, body, else_opt) => {\n@@ -159,25 +154,21 @@ pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             let else_opt = else_opt.map(|else_opt| fld.fold_expr(else_opt));\n             let sub_expr = fld.fold_expr(sub_expr);\n-            let il = ast::ExprKind::IfLet(rewritten_pats.remove(0), sub_expr, body, else_opt);\n-            fld.cx.expr(expr.span, il).with_attrs(fold_thin_attrs(expr.attrs, fld))\n+            expr.node = ast::ExprKind::IfLet(rewritten_pats.remove(0), sub_expr, body, else_opt);\n         }\n \n         ast::ExprKind::Closure(capture_clause, fn_decl, block, fn_decl_span) => {\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n-            let new_node = ast::ExprKind::Closure(capture_clause,\n-                                                  rewritten_fn_decl,\n-                                                  rewritten_block,\n-                                                  fn_decl_span);\n-            P(ast::Expr{ id: expr.id,\n-                         node: new_node,\n-                         span: expr.span,\n-                         attrs: fold_thin_attrs(expr.attrs, fld) })\n+            expr.node = ast::ExprKind::Closure(capture_clause,\n+                                               rewritten_fn_decl,\n+                                               rewritten_block,\n+                                               fn_decl_span);\n         }\n \n-        _ => P(noop_fold_expr(expr, fld)),\n-    }\n+        _ => expr = noop_fold_expr(expr, fld),\n+    };\n+    P(expr)\n }\n \n /// Expand a macro invocation. Returns the result of expansion."}]}