{"sha": "36216456a61f9d99bbbe187fd120fb39f891683d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MjE2NDU2YTYxZjlkOTliYmJlMTg3ZmQxMjBmYjM5Zjg5MTY4M2Q=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-01T15:02:15Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T21:48:20Z"}, "message": "Incorporate active-borrows dataflow into MIR borrow check, yielding\ntwo-phase `&mut`-borrow support.\n\nThis (new) support sits under `-Z two-phase-borrows` debugflag.\n\n(Still needs tests. That's coming next.)", "tree": {"sha": "e8a6e35cd70c09d0d1071bbcd781d3f0d8397798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a6e35cd70c09d0d1071bbcd781d3f0d8397798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36216456a61f9d99bbbe187fd120fb39f891683d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36216456a61f9d99bbbe187fd120fb39f891683d", "html_url": "https://github.com/rust-lang/rust/commit/36216456a61f9d99bbbe187fd120fb39f891683d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36216456a61f9d99bbbe187fd120fb39f891683d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1334638144d660822e02f087b6168356375e92ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/1334638144d660822e02f087b6168356375e92ac", "html_url": "https://github.com/rust-lang/rust/commit/1334638144d660822e02f087b6168356375e92ac"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "bff31afb5e5f121cea112b2da0afd8471db883c5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=36216456a61f9d99bbbe187fd120fb39f891683d", "patch": "@@ -1011,6 +1011,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"emit EndRegion as part of MIR; enable transforms that solely process EndRegion\"),\n     borrowck: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"select which borrowck is used (`ast`, `mir`, or `compare`)\"),\n+    two_phase_borrows: bool = (false, parse_bool, [UNTRACKED],\n+        \"use two-phase reserved/active distinction for `&mut` borrows in MIR borrowck\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n     count_llvm_insns: bool = (false, parse_bool,"}, {"sha": "1b02bbbc152a5b78954c13212a20bd16560a1984", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=36216456a61f9d99bbbe187fd120fb39f891683d", "patch": "@@ -701,9 +701,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             context,\n             (sd, place_span.0),\n             flow_state,\n-            |this, _index, borrow| match (rw, borrow.kind) {\n+            |this, index, borrow| match (rw, borrow.kind) {\n                 (Read(_), BorrowKind::Shared) => Control::Continue,\n+\n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut) => {\n+                    // Reading from mere reservations of mutable-borrows is OK.\n+                    if this.tcx.sess.opts.debugging_opts.two_phase_borrows &&\n+                        index.is_reservation()\n+                    {\n+                        return Control::Continue;\n+                    }\n+\n                     match kind {\n                         ReadKind::Copy => {\n                             error_reported = true;\n@@ -1826,9 +1834,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         // check for loan restricting path P being used. Accounts for\n         // borrows of P, P.a.b, etc.\n-        for i in flow_state.borrows.elems_incoming() {\n-            // FIXME for now, just skip the activation state.\n-            if i.is_activation() { continue }\n+        let mut elems_incoming = flow_state.borrows.elems_incoming();\n+        while let Some(i) = elems_incoming.next() {\n+            // Skip any reservation that has a corresponding current\n+            // activation.  This way, the traversal will visit each\n+            // borrow_index at most once.\n+            if let Some(j) = elems_incoming.peek() {\n+                if i.is_reservation() && j.is_activation() {\n+                    assert_eq!(i.borrow_index(), j.borrow_index());\n+                    continue;\n+                }\n+            }\n \n             let borrowed = &data[i.borrow_index()];\n "}, {"sha": "a6c3398489ad7dc166d76c8e4dc70e93bec9d447", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36216456a61f9d99bbbe187fd120fb39f891683d/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=36216456a61f9d99bbbe187fd120fb39f891683d", "patch": "@@ -18,6 +18,8 @@ use rustc_data_structures::indexed_vec::Idx;\n use dataflow::{BitDenotation, BlockSets, DataflowResults};\n use dataflow::move_paths::{HasMoveData, MovePathIndex};\n \n+use std::iter;\n+\n /// A trait for \"cartesian products\" of multiple FlowAtLocation.\n ///\n /// There's probably a way to auto-impl this, but I think\n@@ -94,9 +96,9 @@ where\n         self.curr_state.contains(x)\n     }\n \n-    pub fn elems_incoming(&self) -> indexed_set::Elems<BD::Idx> {\n+    pub fn elems_incoming(&self) -> iter::Peekable<indexed_set::Elems<BD::Idx>> {\n         let univ = self.base_results.sets().bits_per_block();\n-        self.curr_state.elems(univ)\n+        self.curr_state.elems(univ).peekable()\n     }\n \n     pub fn with_elems_outgoing<F>(&self, f: F)"}]}