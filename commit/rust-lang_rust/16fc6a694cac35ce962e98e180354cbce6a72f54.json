{"sha": "16fc6a694cac35ce962e98e180354cbce6a72f54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZmM2YTY5NGNhYzM1Y2U5NjJlOThlMTgwMzU0Y2JjZTZhNzJmNTQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-09-29T14:46:26Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-10-14T11:10:36Z"}, "message": "Remove unused abi attributes.\n\nThey've been replaced by putting the name on the extern block.\n\n  #[abi = \"foo\"]\n\ngoes to\n\n  extern \"foo\" { }\n\nCloses #9483.", "tree": {"sha": "20b5933785ac3aea831240447058df93be33ff1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b5933785ac3aea831240447058df93be33ff1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16fc6a694cac35ce962e98e180354cbce6a72f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16fc6a694cac35ce962e98e180354cbce6a72f54", "html_url": "https://github.com/rust-lang/rust/commit/16fc6a694cac35ce962e98e180354cbce6a72f54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16fc6a694cac35ce962e98e180354cbce6a72f54/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b10781c7b95a182da7c85af80a706f4ca7a4b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b10781c7b95a182da7c85af80a706f4ca7a4b65", "html_url": "https://github.com/rust-lang/rust/commit/5b10781c7b95a182da7c85af80a706f4ca7a4b65"}], "stats": {"total": 185, "additions": 56, "deletions": 129}, "files": [{"sha": "38aea02f04082ab435eea446abd675a94775c58b", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -415,21 +415,18 @@ fn main() {\n \n Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when\n calling foreign functions. Some foreign functions, most notably the Windows API, use other calling\n-conventions. Rust provides the `abi` attribute as a way to hint to the compiler which calling\n-convention to use:\n+conventions. Rust provides a way to tell the compiler which convention to use:\n \n ~~~~\n #[cfg(target_os = \"win32\")]\n-#[abi = \"stdcall\"]\n #[link_name = \"kernel32\"]\n-extern {\n+extern \"stdcall\" {\n     fn SetEnvironmentVariableA(n: *u8, v: *u8) -> int;\n }\n ~~~~\n \n-The `abi` attribute applies to a foreign module (it cannot be applied to a single function within a\n-module), and must be either `\"cdecl\"` or `\"stdcall\"`. The compiler may eventually support other\n-calling conventions.\n+This applies to the entire `extern` block, and must be either `\"cdecl\"` or\n+`\"stdcall\"`. The compiler may eventually support other calling conventions.\n \n # Interoperability with foreign code\n "}, {"sha": "a9f3c201b9b59065d7b49a9941806fbc458b5a81", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -19,8 +19,7 @@ static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n pub mod rustrt {\n     use super::Tm;\n \n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn get_time(sec: &mut i64, nsec: &mut i32);\n         pub fn precise_time_ns(ns: &mut u64);\n         pub fn rust_tzset();"}, {"sha": "1f850032266688c73a9129f60e779a3aef495890", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -162,8 +162,7 @@ pub mod icu {\n \n         // #[link_name = \"icuuc\"]\n         #[link_args = \"-licuuc\"]\n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n             pub fn u_isdigit(c: UChar32) -> UBool;\n             pub fn u_islower(c: UChar32) -> UBool;"}, {"sha": "6ad379377fcf8f3535f91e9280d4677e7a6ca188", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -300,8 +300,7 @@ pub mod llvm {\n \n     #[link_args = \"-Lrustllvm -lrustllvm\"]\n     #[link_name = \"rustllvm\"]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         /* Create and destroy contexts. */\n         pub fn LLVMContextCreate() -> ContextRef;\n         pub fn LLVMContextDispose(C: ContextRef);"}, {"sha": "c3f4de20938f508c4fd9d999d89cb040b5649ee7", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -76,9 +76,8 @@ pub type fd_t = c_int;\n pub mod rustrt {\n     use libc;\n \n-    #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn rust_get_stdin() -> *libc::FILE;\n         pub fn rust_get_stdout() -> *libc::FILE;\n         pub fn rust_get_stderr() -> *libc::FILE;"}, {"sha": "67df68df6e461d0c5c0322e91de487f82d5cdc3f", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 25, "deletions": 51, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -2663,11 +2663,10 @@ pub mod funcs {\n \n     pub mod c95 {\n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod ctype {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn isalnum(c: c_int) -> c_int;\n                 pub fn isalpha(c: c_int) -> c_int;\n                 pub fn iscntrl(c: c_int) -> c_int;\n@@ -2685,12 +2684,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stdio {\n             use libc::types::common::c95::{FILE, c_void, fpos_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n                 pub fn freopen(filename: *c_char, mode: *c_char, file: *FILE)\n                                -> *FILE;\n@@ -2742,14 +2740,13 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stdlib {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_double, c_int};\n             use libc::types::os::arch::c95::{c_long, c_uint, c_ulong};\n             use libc::types::os::arch::c95::{size_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn abs(i: c_int) -> c_int;\n                 pub fn labs(i: c_long) -> c_long;\n                 // Omitted: div, ldiv (return pub type incomplete).\n@@ -2776,13 +2773,12 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod string {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::c95::{wchar_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n                 pub fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n                                -> *c_char;\n@@ -2826,12 +2822,11 @@ pub mod funcs {\n     #[cfg(target_os = \"win32\")]\n     pub mod posix88 {\n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stat_ {\n             use libc::types::os::common::posix01::stat;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            extern {\n+            extern \"cdecl\" {\n                 #[link_name = \"_chmod\"]\n                 pub fn chmod(path: *c_char, mode: c_int) -> c_int;\n                 #[link_name = \"_mkdir\"]\n@@ -2844,12 +2839,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stdio {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            extern {\n+            extern \"cdecl\" {\n                 #[link_name = \"_popen\"]\n                 pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n                 #[link_name = \"_pclose\"]\n@@ -2862,10 +2856,9 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_int, c_char};\n-            extern {\n+            extern \"cdecl\" {\n                 #[link_name = \"_open\"]\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n                             -> c_int;\n@@ -2875,20 +2868,18 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod dirent {\n             // Not supplied at all.\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod unistd {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n                                              c_long, size_t};\n             use libc::types::os::arch::c99::intptr_t;\n \n-            extern {\n+            extern \"cdecl\" {\n                 #[link_name = \"_access\"]\n                 pub fn access(path: *c_char, amode: c_int) -> c_int;\n                 #[link_name = \"_chdir\"]\n@@ -2949,8 +2940,7 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::mode_t;\n \n             #[nolink]\n-            #[abi = \"cdecl\"]\n-            extern {\n+            extern \"cdecl\" {\n                 pub fn chmod(path: *c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n@@ -2978,12 +2968,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stdio {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n                 pub fn pclose(stream: *FILE) -> c_int;\n                 pub fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n@@ -2992,12 +2981,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix88::mode_t;\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n                             -> c_int;\n                 pub fn creat(path: *c_char, mode: mode_t) -> c_int;\n@@ -3006,7 +2994,6 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod dirent {\n             use libc::types::common::posix88::{DIR, dirent_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long};\n@@ -3026,12 +3013,12 @@ pub mod funcs {\n                 rust_readdir(dirp)\n             }\n \n-            extern {\n+            extern \"cdecl\" {\n                 fn rust_opendir(dirname: *c_char) -> *DIR;\n                 fn rust_readdir(dirp: *DIR) -> *dirent_t;\n             }\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn closedir(dirp: *DIR) -> c_int;\n                 pub fn rewinddir(dirp: *DIR);\n                 pub fn seekdir(dirp: *DIR, loc: c_long);\n@@ -3040,15 +3027,14 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod unistd {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n             use libc::types::os::arch::c95::{size_t};\n             use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n             use libc::types::os::arch::posix88::{ssize_t, uid_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn access(path: *c_char, amode: c_int) -> c_int;\n                 pub fn alarm(seconds: c_uint) -> c_uint;\n                 pub fn chdir(dir: *c_char) -> c_int;\n@@ -3100,24 +3086,22 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod signal {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn kill(pid: pid_t, sig: c_int) -> c_int;\n             }\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod mman {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{size_t, c_int, c_char};\n             use libc::types::os::arch::posix88::{mode_t, off_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn mlock(addr: *c_void, len: size_t) -> c_int;\n                 pub fn munlock(addr: *c_void, len: size_t) -> c_int;\n                 pub fn mlockall(flags: c_int) -> c_int;\n@@ -3150,12 +3134,11 @@ pub mod funcs {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod stat_ {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix01::stat;\n \n-            extern {\n+            extern \"cdecl\" {\n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n@@ -3168,12 +3151,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod unistd {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::posix88::{ssize_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn readlink(path: *c_char,\n                                 buf: *mut c_char,\n                                 bufsz: size_t)\n@@ -3195,25 +3177,23 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod wait {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn waitpid(pid: pid_t, status: *mut c_int, options: c_int)\n                                -> pid_t;\n             }\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod glob {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::common::posix01::{glob_t};\n             use option::Option;\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn glob(pattern: *c_char,\n                             flags: c_int,\n                             errfunc: Option<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n@@ -3223,12 +3203,11 @@ pub mod funcs {\n         }\n \n         #[nolink]\n-        #[abi = \"cdecl\"]\n         pub mod mman {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{c_int, size_t};\n \n-            extern {\n+            extern \"cdecl\" {\n                 pub fn posix_madvise(addr: *c_void,\n                                      len: size_t,\n                                      advice: c_int)\n@@ -3271,8 +3250,7 @@ pub mod funcs {\n         use libc::types::os::arch::c95::{c_char, c_uchar, c_int, c_uint,\n                                          size_t};\n \n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             pub fn sysctl(name: *c_int,\n                           namelen: c_uint,\n                           oldp: *mut c_void,\n@@ -3305,8 +3283,7 @@ pub mod funcs {\n         use libc::types::common::c95::{c_void};\n         use libc::types::os::arch::c95::{c_uchar, c_int, size_t};\n \n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             pub fn getdtablesize() -> c_int;\n             pub fn madvise(addr: *c_void, len: size_t, advice: c_int)\n                            -> c_int;\n@@ -3325,8 +3302,7 @@ pub mod funcs {\n     pub mod extra {\n         use libc::types::os::arch::c95::{c_char, c_int};\n \n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             pub fn _NSGetExecutablePath(buf: *mut c_char, bufsize: *mut u32)\n                                         -> c_int;\n         }\n@@ -3358,7 +3334,6 @@ pub mod funcs {\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n             #[cfg(target_arch = \"x86\")]\n-            #[abi = \"stdcall\"]\n             extern \"stdcall\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n                                                v: LPWSTR,\n@@ -3572,9 +3547,8 @@ pub mod funcs {\n         pub mod msvcrt {\n             use libc::types::os::arch::c95::{c_int, c_long};\n \n-            #[abi = \"cdecl\"]\n             #[nolink]\n-            extern {\n+            extern \"cdecl\" {\n                 #[link_name = \"_commit\"]\n                 pub fn commit(fd: c_int) -> c_int;\n "}, {"sha": "aed3601060b74084d1b5be53e5bae010d05e2cf7", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -18,8 +18,7 @@ pub mod c_double_utils {\n     use libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         // Alpabetically sorted by link_name\n \n         pub fn acos(n: c_double) -> c_double;\n@@ -107,8 +106,7 @@ pub mod c_float_utils {\n     use libc::{c_float, c_int};\n \n     #[link_name = \"m\"]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         // Alpabetically sorted by link_name\n \n         #[link_name=\"acosf\"]"}, {"sha": "b7921d7527b38f055bd88e474bedde8972c1a50c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -1039,7 +1039,6 @@ pub fn errno() -> uint {\n \n     #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n-    #[abi = \"stdcall\"]\n     extern \"stdcall\" {\n         fn GetLastError() -> DWORD;\n     }\n@@ -1118,7 +1117,6 @@ pub fn last_os_error() -> ~str {\n \n         #[cfg(target_arch = \"x86\")]\n         #[link_name = \"kernel32\"]\n-        #[abi = \"stdcall\"]\n         extern \"stdcall\" {\n             fn FormatMessageW(flags: DWORD,\n                               lpSrc: LPVOID,"}, {"sha": "cd89d09ffc0ab0d584c7bb56f626d5bb33a4b828", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -84,7 +84,6 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n }\n \n #[cfg(windows, target_arch = \"x86\")]\n-#[abi = \"stdcall\"]\n extern \"stdcall\" {\n        fn TlsAlloc() -> DWORD;\n        fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;"}, {"sha": "59b3c264b99f5541bb627677af4658940ce8fbe9", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -170,7 +170,6 @@ pub trait TyVisitor {\n     fn visit_closure_ptr(&mut self, ck: uint) -> bool;\n }\n \n-#[abi = \"rust-intrinsic\"]\n extern \"rust-intrinsic\" {\n \n     /// Atomic compare and exchange, sequentially consistent."}, {"sha": "c936cb9ab908e983caa98e9b70f8d583d89b002c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -1059,7 +1059,6 @@ pub fn std_macros() -> @str {\n     // It is intended to be used like:\n     //\n     // externfn!(#[nolink]\n-    //           #[abi = \\\"cdecl\\\"]\n     //           fn memcmp(cx: *u8, ct: *u8, n: u32) -> u32)\n     //\n     // Due to limitations in the macro parser, this pattern must be"}, {"sha": "987648ca6f2e7e4b7e5c65884265a3dc996494c3", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"cdecl\"];\n #[link_name = \"rustrt\"];\n #[link(name = \"anonexternmod\",\n        vers = \"0.1\")];\n@@ -17,6 +16,6 @@\n \n use std::libc;\n \n-extern {\n+extern \"cdecl\" {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "9e69715d1cb214d699cb04d0f340d7441e36ba53", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n         pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;"}, {"sha": "f6dca262d4c12126b8bada14e270a88a5096366f", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -11,8 +11,7 @@\n \n \n mod test {\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn free();\n     }\n }"}, {"sha": "ef951de6c4df5e6d1c58efd48c910a7f1d9f9679", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -10,9 +10,8 @@\n \n use std::libc;\n \n-#[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n-extern {\n+extern \"cdecl\" {\n     fn rust_get_test_int() -> libc::intptr_t;\n }\n "}, {"sha": "9a38702efbd58bb4481d49de6557a420bc9621e8", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -11,8 +11,7 @@\n mod rustrt {\n     use std::libc;\n \n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "7d7f0fc23fec9db1d7fe1362aacd005fb39dde3f", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -11,9 +11,8 @@\n mod libc {\n     use std::libc::{c_char, c_long, c_longlong};\n \n-    #[abi = \"cdecl\"]\n     #[nolink]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn atol(x: *c_char) -> c_long;\n         pub fn atoll(x: *c_char) -> c_longlong;\n     }"}, {"sha": "dc10a0bbd7799249bb45daa30cdb03c59b4c0198", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -21,15 +21,13 @@ static b: bool = true;\n \n mod rustrt {\n     #[cfg(bogus)]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         // This symbol doesn't exist and would be a link error if this\n         // module was translated\n         pub fn bogus();\n     }\n \n-    #[abi = \"cdecl\"]\n-    extern {}\n+    extern \"cdecl\" {}\n }\n \n #[cfg(bogus)]\n@@ -109,8 +107,7 @@ fn test_in_fn_ctxt() {\n \n mod test_foreign_items {\n     pub mod rustrt {\n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             #[cfg(bogus)]\n             pub fn rust_get_stdin() -> ~str;\n             pub fn rust_get_stdin() -> ~str;"}, {"sha": "793898058a1602f49c5ce22ea8cd54f5bbbc8624", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -14,19 +14,17 @@\n mod rustrt1 {\n     use std::libc;\n \n-    #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n \n mod rustrt2 {\n     use std::libc;\n \n-    #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "d037feab452db36004d0424495173fe5a893d08b", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -14,8 +14,7 @@ mod libc {\n     use std::libc::{c_char, size_t};\n \n     #[nolink]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *c_char) -> size_t;\n     }"}, {"sha": "654b3b7d43aaa8d747b7f101b162b517cf3bbc3e", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -9,31 +9,27 @@\n // except according to those terms.\n \n mod bar {\n-    #[abi = \"cdecl\"]\n     #[nolink]\n-    extern {}\n+    extern \"cdecl\" {}\n }\n \n mod zed {\n-    #[abi = \"cdecl\"]\n     #[nolink]\n-    extern {}\n+    extern \"cdecl\" {}\n }\n \n mod libc {\n     use std::libc::{c_int, c_void, size_t, ssize_t};\n \n-    #[abi = \"cdecl\"]\n     #[nolink]\n-    extern {\n+    extern \"cdecl\" {\n         pub fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n     }\n }\n \n mod baz {\n-    #[abi = \"cdecl\"]\n     #[nolink]\n-    extern {}\n+    extern \"cdecl\" {}\n }\n \n pub fn main() { }"}, {"sha": "051f92b165108b1de4877b490e2b5ebe050dd60c", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -11,7 +11,6 @@\n // xfail-fast Does not work with main in a submodule\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;"}, {"sha": "2ec91ee440b86969199acc839260b59c94e19741", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n         pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;"}, {"sha": "63635c7addfa000579a8784238ef2fae09c823cf", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -11,7 +11,6 @@\n // xfail-fast\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn frame_address(f: &once fn(*u8));\n     }"}, {"sha": "f328c4844781069aeb91ac615c00053e389e8306", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn move_val_init<T>(dst: &mut T, src: T);\n         pub fn move_val<T>(dst: &mut T, src: T);"}, {"sha": "ab6904927e87065ff06378a5f0677a7e09fba272", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn uninit<T>() -> T;\n     }"}, {"sha": "e45472634e619737c9fb5b6e5d9a8bb16119cfbb", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -15,7 +15,6 @@\n extern mod extra;\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn ctpop8(x: i8) -> i8;\n         pub fn ctpop16(x: i16) -> i16;"}, {"sha": "085ce6569083a97bd7bb4f5bb2704f71d05038a8", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -13,7 +13,6 @@\n #[feature(globs)];\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn sqrtf32(x: f32) -> f32;\n         pub fn sqrtf64(x: f64) -> f64;"}, {"sha": "298c4e7454d5f866db7d34b83955b7e782140861", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -30,8 +30,7 @@ mod m {\n     use std::libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n-    #[abi = \"cdecl\"]\n-    extern {\n+    extern \"cdecl\" {\n         #[cfg(unix)]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;"}, {"sha": "0266f6ea93054b57661ca05560e86aef862c0490", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -39,8 +39,7 @@ mod test_single_attr_outer {\n \n     pub mod rustrt {\n         #[attr = \"val\"]\n-        #[abi = \"cdecl\"]\n-        extern {}\n+        extern \"cdecl\" {}\n     }\n }\n \n@@ -60,8 +59,7 @@ mod test_multi_attr_outer {\n     pub mod rustrt {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n-        #[abi = \"cdecl\"]\n-        extern {}\n+        extern \"cdecl\" {}\n     }\n \n     #[attr1 = \"val\"]\n@@ -83,8 +81,7 @@ mod test_stmt_single_attr_outer {\n \n         mod rustrt {\n             #[attr = \"val\"]\n-            #[abi = \"cdecl\"]\n-            extern {\n+            extern \"cdecl\" {\n             }\n         }\n     }\n@@ -110,8 +107,7 @@ mod test_stmt_multi_attr_outer {\n         pub mod rustrt {\n             #[attr1 = \"val\"]\n             #[attr2 = \"val\"]\n-            #[abi = \"cdecl\"]\n-            extern {\n+            extern \"cdecl\" {\n             }\n         }\n         */\n@@ -169,8 +165,7 @@ mod test_foreign_items {\n     pub mod rustrt {\n         use std::libc;\n \n-        #[abi = \"cdecl\"]\n-        extern {\n+        extern \"cdecl\" {\n             #[attr];\n \n             #[attr]"}, {"sha": "ad8b32839ea4499fffbfd5283c4b8ce253454aea", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -10,7 +10,6 @@\n \n mod rusti {\n     #[nolink]\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn morestack_addr() -> *();\n     }"}, {"sha": "804e6902002123cdcf967e8da119d336101aa6f8", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -15,7 +15,6 @@\n use std::sys;\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;"}, {"sha": "6ec2b63cfff8ecf7a13dd32e6d5088d87dde6314", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -15,7 +15,6 @@\n use std::sys;\n \n mod rusti {\n-    #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;"}, {"sha": "b16218a59f982dd7ac3cd395ce58eb6c82866da8", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fc6a694cac35ce962e98e180354cbce6a72f54/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=16fc6a694cac35ce962e98e180354cbce6a72f54", "patch": "@@ -18,7 +18,6 @@ pub type BOOL = u8;\n mod kernel32 {\n     use super::{HANDLE, DWORD, SIZE_T, LPVOID, BOOL};\n \n-    #[abi = \"stdcall\"]\n     extern \"stdcall\" {\n         pub fn GetProcessHeap() -> HANDLE;\n         pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)"}]}