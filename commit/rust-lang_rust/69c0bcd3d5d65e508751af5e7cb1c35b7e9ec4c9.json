{"sha": "69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YzBiY2QzZDVkNjVlNTA4NzUxYWY1ZTdjYjFjMzViN2U5ZWM0Yzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-22T14:48:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:48:43Z"}, "message": "Rollup merge of #70266 - petrochenkov:prochead, r=varkor\n\nproc_macro_harness: Use item header spans for errors\n\nAddresses https://github.com/rust-lang/rust/pull/70233#discussion_r396043004.", "tree": {"sha": "31518fd812614d8630bddab5443624187e61159f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31518fd812614d8630bddab5443624187e61159f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3rLCRBK7hj4Ov3rIwAAdHIIAAdk5mi6+rAfzipmgtNZBSCb\nfBeMHdPzr78jT+JxICxMzV9sc1bx9Mmk89p6BiTNFrpy7d5VdSAsk7R2xeQeuuZC\nMncdUYt16qXXx3qgzsNPd8JuL96hunzk8zUDCHm0qVDIS7IBP6ABpMwFIgiEzOd6\npfQ7Xv8PZUumj8sH0meMJtfDdmcoWVZYrV36ARRuYtMxw8aK2s25KB32Nzf6NpQx\nFwCqCnl/NVRaHn0l+W2qruTe3aWuj5jBmhDASRkal8lQFSuJyjydH57TDDdHenDI\nkBexfFyGaJSMUwjH4XYctdrFuI8kWnT632gKtDWRjd5VYG/CST449MT/vL7//vY=\n=Sr0U\n-----END PGP SIGNATURE-----\n", "payload": "tree 31518fd812614d8630bddab5443624187e61159f\nparent 8fe8bad96b88cf981458e836e6866ddc7966cecb\nparent bdd07f932b6d707c99f9c6127a424a9e801c997f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584888523 +0100\ncommitter GitHub <noreply@github.com> 1584888523 +0100\n\nRollup merge of #70266 - petrochenkov:prochead, r=varkor\n\nproc_macro_harness: Use item header spans for errors\n\nAddresses https://github.com/rust-lang/rust/pull/70233#discussion_r396043004.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "html_url": "https://github.com/rust-lang/rust/commit/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe8bad96b88cf981458e836e6866ddc7966cecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe8bad96b88cf981458e836e6866ddc7966cecb", "html_url": "https://github.com/rust-lang/rust/commit/8fe8bad96b88cf981458e836e6866ddc7966cecb"}, {"sha": "bdd07f932b6d707c99f9c6127a424a9e801c997f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd07f932b6d707c99f9c6127a424a9e801c997f", "html_url": "https://github.com/rust-lang/rust/commit/bdd07f932b6d707c99f9c6127a424a9e801c997f"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "6540bcc415605336119598c32ebf7bcc84c617e0", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "patch": "@@ -10,6 +10,7 @@ use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n@@ -44,6 +45,7 @@ struct CollectProcMacros<'a> {\n     macros: Vec<ProcMacro>,\n     in_root: bool,\n     handler: &'a rustc_errors::Handler,\n+    source_map: &'a SourceMap,\n     is_proc_macro_crate: bool,\n     is_test_crate: bool,\n }\n@@ -65,6 +67,7 @@ pub fn inject(\n         macros: Vec::new(),\n         in_root: true,\n         handler,\n+        source_map: sess.source_map(),\n         is_proc_macro_crate,\n         is_test_crate,\n     };\n@@ -195,7 +198,7 @@ impl<'a> CollectProcMacros<'a> {\n             } else {\n                 \"functions tagged with `#[proc_macro_derive]` must be `pub`\"\n             };\n-            self.handler.span_err(item.span, msg);\n+            self.handler.span_err(self.source_map.def_span(item.span), msg);\n         }\n     }\n \n@@ -214,7 +217,7 @@ impl<'a> CollectProcMacros<'a> {\n             } else {\n                 \"functions tagged with `#[proc_macro_attribute]` must be `pub`\"\n             };\n-            self.handler.span_err(item.span, msg);\n+            self.handler.span_err(self.source_map.def_span(item.span), msg);\n         }\n     }\n \n@@ -233,7 +236,7 @@ impl<'a> CollectProcMacros<'a> {\n             } else {\n                 \"functions tagged with `#[proc_macro]` must be `pub`\"\n             };\n-            self.handler.span_err(item.span, msg);\n+            self.handler.span_err(self.source_map.def_span(item.span), msg);\n         }\n     }\n }\n@@ -244,7 +247,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n             if self.is_proc_macro_crate && attr::contains_name(&item.attrs, sym::macro_export) {\n                 let msg =\n                     \"cannot export macro_rules! macros from a `proc-macro` crate type currently\";\n-                self.handler.span_err(item.span, msg);\n+                self.handler.span_err(self.source_map.def_span(item.span), msg);\n             }\n         }\n \n@@ -295,7 +298,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n \n         let attr = match found_attr {\n             None => {\n-                self.check_not_pub_in_root(&item.vis, item.span);\n+                self.check_not_pub_in_root(&item.vis, self.source_map.def_span(item.span));\n                 let prev_in_root = mem::replace(&mut self.in_root, false);\n                 visit::walk_item(self, item);\n                 self.in_root = prev_in_root;"}, {"sha": "36a6a9bb3e72ba07d653e867d74a3ecb3cc82666", "filename": "src/test/ui/proc-macro/export-macro.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fexport-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fexport-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexport-macro.stderr?ref=69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "patch": "@@ -1,10 +1,8 @@\n error: cannot export macro_rules! macros from a `proc-macro` crate type currently\n   --> $DIR/export-macro.rs:9:1\n    |\n-LL | / macro_rules! foo {\n-LL | |     ($e:expr) => ($e)\n-LL | | }\n-   | |_^\n+LL | macro_rules! foo {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7b23d08f2a8a57bdcdefca923d4905ddb88360f9", "filename": "src/test/ui/proc-macro/exports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr?ref=69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "patch": "@@ -2,7 +2,7 @@ error: `proc-macro` crate types currently cannot export any items other than fun\n   --> $DIR/exports.rs:7:1\n    |\n LL | pub fn a() {}\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^\n \n error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:8:1\n@@ -14,13 +14,13 @@ error: `proc-macro` crate types currently cannot export any items other than fun\n   --> $DIR/exports.rs:9:1\n    |\n LL | pub enum C {}\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^^\n \n error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:10:1\n    |\n LL | pub mod d {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "90f94b677e90f20206ea244f71404e920204c9e6", "filename": "src/test/ui/proc-macro/non-root.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr?ref=69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "patch": "@@ -2,7 +2,7 @@ error: functions tagged with `#[proc_macro]` must currently reside in the root o\n   --> $DIR/non-root.rs:11:5\n    |\n LL |     pub fn foo(arg: TokenStream) -> TokenStream { arg }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2e7536a0c4f09c9b5eb77e7dcd6cacaad3fba574", "filename": "src/test/ui/proc-macro/pub-at-crate-root.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr?ref=69c0bcd3d5d65e508751af5e7cb1c35b7e9ec4c9", "patch": "@@ -1,32 +1,20 @@\n error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/pub-at-crate-root.rs:8:1\n    |\n-LL | / pub mod a {\n-LL | |     use proc_macro::TokenStream;\n-LL | |\n-LL | |     #[proc_macro_derive(B)]\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | pub mod a {\n+   | ^^^^^^^^^\n \n error: functions tagged with `#[proc_macro_derive]` must currently reside in the root of the crate\n   --> $DIR/pub-at-crate-root.rs:12:5\n    |\n-LL | /     pub fn bar(a: TokenStream) -> TokenStream {\n-LL | |\n-LL | |         a\n-LL | |     }\n-   | |_____^\n+LL |     pub fn bar(a: TokenStream) -> TokenStream {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: functions tagged with `#[proc_macro_derive]` must be `pub`\n   --> $DIR/pub-at-crate-root.rs:19:1\n    |\n-LL | / fn bar(a: proc_macro::TokenStream) -> proc_macro::TokenStream {\n-LL | |\n-LL | |     a\n-LL | | }\n-   | |_^\n+LL | fn bar(a: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}