{"sha": "f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjI5NjgzYThmNjNlOTY3YzQ3MWM4Y2MyN2M3ZTQzNzA5YmM2ZDE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T20:38:41Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T20:38:41Z"}, "message": "Remove aliases from most tests", "tree": {"sha": "9162de48cd0dc1af18c9c0f24cdcf32ded1d1546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9162de48cd0dc1af18c9c0f24cdcf32ded1d1546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "html_url": "https://github.com/rust-lang/rust/commit/f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f79d4a6f609ffec80f83e4c9a71ff8939b4384", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f79d4a6f609ffec80f83e4c9a71ff8939b4384", "html_url": "https://github.com/rust-lang/rust/commit/88f79d4a6f609ffec80f83e4c9a71ff8939b4384"}], "stats": {"total": 126, "additions": 64, "deletions": 62}, "files": [{"sha": "414a832b1be4128d4d3d162ea9982c9601791703", "filename": "crates/core_simd/tests/f32_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_float_tests! { SimdF32, f32, i32 }\n+impl_float_tests! { f32, i32 }"}, {"sha": "e0a1fa33f33270c1204f00bbade90d3f1fb22a63", "filename": "crates/core_simd/tests/f64_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_float_tests! { SimdF64, f64, i64 }\n+impl_float_tests! { f64, i64 }"}, {"sha": "f6c5d74fbbcc62ffcd2f044b33b9ed594e31abbd", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_signed_tests! { SimdI16, i16 }\n+impl_signed_tests! { i16 }"}, {"sha": "69a831c52a3faacdaf57305058cac5e4bf287e2f", "filename": "crates/core_simd/tests/i32_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_signed_tests! { SimdI32, i32 }\n+impl_signed_tests! { i32 }"}, {"sha": "37ac08117424c5515c85d70032c3d773a966da46", "filename": "crates/core_simd/tests/i64_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_signed_tests! { SimdI64, i64 }\n+impl_signed_tests! { i64 }"}, {"sha": "11e4a5cd6a9a75e42798902ac65bbdfa04448265", "filename": "crates/core_simd/tests/i8_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_signed_tests! { SimdI8, i8 }\n+impl_signed_tests! { i8 }"}, {"sha": "5cc9de2b7ff8297c883c8cab5f2f78cfa5021ad5", "filename": "crates/core_simd/tests/isize_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_signed_tests! { SimdIsize, isize }\n+impl_signed_tests! { isize }"}, {"sha": "0c45ea2367c935d3ffcf1507d1dc3168a0e48157", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -3,19 +3,19 @@\n /// Compares the vector operation to the equivalent scalar operation.\n #[macro_export]\n macro_rules! impl_unary_op_test {\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $scalar_fn:expr } => {\n+    { $scalar:ty, $trait:ident :: $fn:ident, $scalar_fn:expr } => {\n         test_helpers::test_lanes! {\n             fn $fn<const LANES: usize>() {\n                 test_helpers::test_unary_elementwise(\n-                    &<$vector as core::ops::$trait>::$fn,\n+                    &<core_simd::Simd<$scalar, LANES> as core::ops::$trait>::$fn,\n                     &$scalar_fn,\n                     &|_| true,\n                 );\n             }\n         }\n     };\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident } => {\n-        impl_unary_op_test! { $vector, $scalar, $trait::$fn, <$scalar as core::ops::$trait>::$fn }\n+    { $scalar:ty, $trait:ident :: $fn:ident } => {\n+        impl_unary_op_test! { $scalar, $trait::$fn, <$scalar as core::ops::$trait>::$fn }\n     };\n }\n \n@@ -24,55 +24,56 @@ macro_rules! impl_unary_op_test {\n /// Compares the vector operation to the equivalent scalar operation.\n #[macro_export]\n macro_rules! impl_binary_op_test {\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr } => {\n+    { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr } => {\n         mod $fn {\n             use super::*;\n+            use core_simd::Simd;\n \n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        &<$vector as core::ops::$trait>::$fn,\n+                        &<Simd<$scalar, LANES> as core::ops::$trait>::$fn,\n                         &$scalar_fn,\n                         &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n+                        &<Simd<$scalar, LANES> as core::ops::$trait<$scalar>>::$fn,\n                         &$scalar_fn,\n                         &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_lhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_lhs_elementwise(\n-                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n+                        &<$scalar as core::ops::$trait<Simd<$scalar, LANES>>>::$fn,\n                         &$scalar_fn,\n                         &|_, _| true,\n                     );\n                 }\n \n                 fn assign<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <Simd<$scalar, LANES> as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n                         &$scalar_fn,\n                         &|_, _| true,\n                     );\n                 }\n \n                 fn assign_scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <Simd<$scalar, LANES> as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n                         &$scalar_fn,\n                         &|_, _| true,\n                     );\n                 }\n             }\n         }\n     };\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident } => {\n-        impl_binary_op_test! { $vector, $scalar, $trait::$fn, $trait_assign::$fn_assign, <$scalar as core::ops::$trait>::$fn }\n+    { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident } => {\n+        impl_binary_op_test! { $scalar, $trait::$fn, $trait_assign::$fn_assign, <$scalar as core::ops::$trait>::$fn }\n     };\n }\n \n@@ -84,55 +85,56 @@ macro_rules! impl_binary_op_test {\n /// Compares the vector operation to the equivalent scalar operation.\n #[macro_export]\n macro_rules! impl_binary_checked_op_test {\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr, $check_fn:expr } => {\n+    { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr, $check_fn:expr } => {\n         mod $fn {\n             use super::*;\n+            use core_simd::Simd;\n \n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        &<$vector as core::ops::$trait>::$fn,\n+                        &<Simd<$scalar, LANES> as core::ops::$trait>::$fn,\n                         &$scalar_fn,\n                         &|x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n                     );\n                 }\n \n                 fn scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n+                        &<Simd<$scalar, LANES> as core::ops::$trait<$scalar>>::$fn,\n                         &$scalar_fn,\n                         &|x, y| x.iter().all(|x| $check_fn(*x, y)),\n                     );\n                 }\n \n                 fn scalar_lhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_lhs_elementwise(\n-                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n+                        &<$scalar as core::ops::$trait<Simd<$scalar, LANES>>>::$fn,\n                         &$scalar_fn,\n                         &|x, y| y.iter().all(|y| $check_fn(x, *y)),\n                     );\n                 }\n \n                 fn assign<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <Simd<$scalar, LANES> as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n                         &$scalar_fn,\n                         &|x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n                     )\n                 }\n \n                 fn assign_scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <Simd<$scalar, LANES> as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n                         &$scalar_fn,\n                         &|x, y| x.iter().all(|x| $check_fn(*x, y)),\n                     )\n                 }\n             }\n         }\n     };\n-    { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $check_fn:expr } => {\n-        impl_binary_nonzero_rhs_op_test! { $vector, $scalar, $trait::$fn, $trait_assign::$fn_assign, <$scalar as core::ops::$trait>::$fn, $check_fn }\n+    { $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $check_fn:expr } => {\n+        impl_binary_checked_op_test! { $scalar, $trait::$fn, $trait_assign::$fn_assign, <$scalar as core::ops::$trait>::$fn, $check_fn }\n     };\n }\n \n@@ -216,9 +218,9 @@ macro_rules! impl_common_integer_tests {\n /// Implement tests for signed integers.\n #[macro_export]\n macro_rules! impl_signed_tests {\n-    { $vector:ident, $scalar:tt } => {\n+    { $scalar:tt } => {\n         mod $scalar {\n-            type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n+            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n             impl_common_integer_tests! { Vector, Scalar }\n@@ -305,28 +307,28 @@ macro_rules! impl_signed_tests {\n                 }\n             }\n \n-            impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n+            impl_binary_op_test!(Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n+            impl_binary_op_test!(Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n+            impl_binary_op_test!(Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n \n             // Exclude Div and Rem panicking cases\n-            impl_binary_checked_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign, Scalar::wrapping_div, |x, y| y != 0 && !(x == Scalar::MIN && y == -1));\n-            impl_binary_checked_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign, Scalar::wrapping_rem, |x, y| y != 0 && !(x == Scalar::MIN && y == -1));\n+            impl_binary_checked_op_test!(Scalar, Div::div, DivAssign::div_assign, Scalar::wrapping_div, |x, y| y != 0 && !(x == Scalar::MIN && y == -1));\n+            impl_binary_checked_op_test!(Scalar, Rem::rem, RemAssign::rem_assign, Scalar::wrapping_rem, |x, y| y != 0 && !(x == Scalar::MIN && y == -1));\n \n-            impl_unary_op_test!(Vector<LANES>, Scalar, Not::not);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitAnd::bitand, BitAndAssign::bitand_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitOr::bitor, BitOrAssign::bitor_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitXor::bitxor, BitXorAssign::bitxor_assign);\n+            impl_unary_op_test!(Scalar, Not::not);\n+            impl_binary_op_test!(Scalar, BitAnd::bitand, BitAndAssign::bitand_assign);\n+            impl_binary_op_test!(Scalar, BitOr::bitor, BitOrAssign::bitor_assign);\n+            impl_binary_op_test!(Scalar, BitXor::bitxor, BitXorAssign::bitxor_assign);\n         }\n     }\n }\n \n /// Implement tests for unsigned integers.\n #[macro_export]\n macro_rules! impl_unsigned_tests {\n-    { $vector:ident, $scalar:tt } => {\n+    { $scalar:tt } => {\n         mod $scalar {\n-            type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n+            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n             impl_common_integer_tests! { Vector, Scalar }\n@@ -339,36 +341,36 @@ macro_rules! impl_unsigned_tests {\n                 }\n             }\n \n-            impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n+            impl_binary_op_test!(Scalar, Add::add, AddAssign::add_assign, Scalar::wrapping_add);\n+            impl_binary_op_test!(Scalar, Sub::sub, SubAssign::sub_assign, Scalar::wrapping_sub);\n+            impl_binary_op_test!(Scalar, Mul::mul, MulAssign::mul_assign, Scalar::wrapping_mul);\n \n             // Exclude Div and Rem panicking cases\n-            impl_binary_checked_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign, Scalar::wrapping_div, |_, y| y != 0);\n-            impl_binary_checked_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign, Scalar::wrapping_rem, |_, y| y != 0);\n+            impl_binary_checked_op_test!(Scalar, Div::div, DivAssign::div_assign, Scalar::wrapping_div, |_, y| y != 0);\n+            impl_binary_checked_op_test!(Scalar, Rem::rem, RemAssign::rem_assign, Scalar::wrapping_rem, |_, y| y != 0);\n \n-            impl_unary_op_test!(Vector<LANES>, Scalar, Not::not);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitAnd::bitand, BitAndAssign::bitand_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitOr::bitor, BitOrAssign::bitor_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, BitXor::bitxor, BitXorAssign::bitxor_assign);\n+            impl_unary_op_test!(Scalar, Not::not);\n+            impl_binary_op_test!(Scalar, BitAnd::bitand, BitAndAssign::bitand_assign);\n+            impl_binary_op_test!(Scalar, BitOr::bitor, BitOrAssign::bitor_assign);\n+            impl_binary_op_test!(Scalar, BitXor::bitxor, BitXorAssign::bitxor_assign);\n         }\n     }\n }\n \n /// Implement tests for floating point numbers.\n #[macro_export]\n macro_rules! impl_float_tests {\n-    { $vector:ident, $scalar:tt, $int_scalar:tt } => {\n+    { $scalar:tt, $int_scalar:tt } => {\n         mod $scalar {\n-            type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n+            type Vector<const LANES: usize> = core_simd::Simd<Scalar, LANES>;\n             type Scalar = $scalar;\n \n-            impl_unary_op_test!(Vector<LANES>, Scalar, Neg::neg);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, MulAssign::mul_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign);\n-            impl_binary_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign);\n+            impl_unary_op_test!(Scalar, Neg::neg);\n+            impl_binary_op_test!(Scalar, Add::add, AddAssign::add_assign);\n+            impl_binary_op_test!(Scalar, Sub::sub, SubAssign::sub_assign);\n+            impl_binary_op_test!(Scalar, Mul::mul, MulAssign::mul_assign);\n+            impl_binary_op_test!(Scalar, Div::div, DivAssign::div_assign);\n+            impl_binary_op_test!(Scalar, Rem::rem, RemAssign::rem_assign);\n \n             test_helpers::test_lanes! {\n                 fn is_sign_positive<const LANES: usize>() {"}, {"sha": "9ae3bd6a47d00f511375d791bbc878c4e9b8d350", "filename": "crates/core_simd/tests/u16_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_unsigned_tests! { SimdU16, u16 }\n+impl_unsigned_tests! { u16 }"}, {"sha": "de34b73d652621e31881e928a2705342af3cdc3d", "filename": "crates/core_simd/tests/u32_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_unsigned_tests! { SimdU32, u32 }\n+impl_unsigned_tests! { u32 }"}, {"sha": "8ee5a318c83d75afe5a29d56cff28ff42d96e70f", "filename": "crates/core_simd/tests/u64_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_unsigned_tests! { SimdU64, u64 }\n+impl_unsigned_tests! { u64 }"}, {"sha": "6d7211121284bcbfcc1622df9ca0e504e0cfa2a3", "filename": "crates/core_simd/tests/u8_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_unsigned_tests! { SimdU8, u8 }\n+impl_unsigned_tests! { u8 }"}, {"sha": "9c7b1687a08554f757b42184c6a12e8a5da2b208", "filename": "crates/core_simd/tests/usize_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f29683a8f63e967c471c8cc27c7e43709bc6d1/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs?ref=f7f29683a8f63e967c471c8cc27c7e43709bc6d1", "patch": "@@ -2,4 +2,4 @@\n \n #[macro_use]\n mod ops_macros;\n-impl_unsigned_tests! { SimdUsize, usize }\n+impl_unsigned_tests! { usize }"}]}