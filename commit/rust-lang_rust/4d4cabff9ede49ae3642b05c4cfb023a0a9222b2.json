{"sha": "4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGNhYmZmOWVkZTQ5YWUzNjQyYjA1YzRjZmIwMjNhMGE5MjIyYjI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-02T20:09:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-03T23:06:07Z"}, "message": "rustpkg: Implement install command\n\n    The install command should work now, though it only installs\n    in-place (anything else has to wait until I implement RUST_PATH).\n\nAlso including:\n    core: Add remove_directory_recursive, change copy_file\n\n    Make copy_file preserve permissions, and add a remove_directory_recursive\n    function.", "tree": {"sha": "18a2cb8d37c681056772201e2115f1b5bb61a7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a2cb8d37c681056772201e2115f1b5bb61a7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "html_url": "https://github.com/rust-lang/rust/commit/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd3cd8171bee519093f570264e5a2b1dc17e9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd3cd8171bee519093f570264e5a2b1dc17e9d8", "html_url": "https://github.com/rust-lang/rust/commit/bfd3cd8171bee519093f570264e5a2b1dc17e9d8"}], "stats": {"total": 413, "additions": 328, "deletions": 85}, "files": [{"sha": "7b68e6597a179357515680ff875d2bc15a4f8c50", "filename": "src/libcore/os.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -772,6 +772,28 @@ pub fn list_dir_path(p: &Path) -> ~[~Path] {\n     list_dir(p).map(|f| ~p.push(*f))\n }\n \n+/// Removes a directory at the specified path, after removing\n+/// all its contents. Use carefully!\n+pub fn remove_dir_recursive(p: &Path) -> bool {\n+    let mut error_happened = false;\n+    for walk_dir(p) |inner| {\n+        if !error_happened {\n+            if path_is_dir(inner) {\n+                if !remove_dir_recursive(inner) {\n+                    error_happened = true;\n+                }\n+            }\n+            else {\n+                if !remove_file(inner) {\n+                    error_happened = true;\n+                }\n+            }\n+        }\n+    };\n+    // Directory should now be empty\n+    !error_happened && remove_dir(p)\n+}\n+\n /// Removes a directory at the specified path\n pub fn remove_dir(p: &Path) -> bool {\n    return rmdir(p);\n@@ -877,6 +899,10 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             if istream as uint == 0u {\n                 return false;\n             }\n+            // Preserve permissions\n+            let from_mode = from.get_mode().expect(\"copy_file: couldn't get permissions \\\n+                                                    for source file\");\n+\n             let ostream = do as_c_charp(to.to_str()) |top| {\n                 do as_c_charp(\"w+b\") |modebuf| {\n                     libc::fopen(top, modebuf)\n@@ -908,6 +934,15 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             }\n             fclose(istream);\n             fclose(ostream);\n+\n+            // Give the new file the old file's permissions\n+            unsafe {\n+                if do str::as_c_str(to.to_str()) |to_buf| {\n+                    libc::chmod(to_buf, from_mode as mode_t)\n+                } != 0 {\n+                    return false; // should be a condition...\n+                }\n+            }\n             return ok;\n         }\n     }\n@@ -1594,13 +1629,15 @@ mod tests {\n                       == buf.len() as size_t))\n           }\n           assert!((libc::fclose(ostream) == (0u as c_int)));\n+          let in_mode = in.get_mode();\n           let rs = os::copy_file(&in, &out);\n           if (!os::path_exists(&in)) {\n             fail!(fmt!(\"%s doesn't exist\", in.to_str()));\n           }\n           assert!((rs));\n           let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);\n           assert!((rslt == 0));\n+          assert!(out.get_mode() == in_mode);\n           assert!((remove_file(&in)));\n           assert!((remove_file(&out)));\n         }"}, {"sha": "5b19a3bd660424b3b2ba66396a1d7c1a321521a5", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -18,5 +18,13 @@ condition! {\n }\n \n condition! {\n-    nonexistent_package: (super::PkgId, ~str) -> super::Path;\n+    nonexistent_package: (super::PkgId, ~str) -> ();\n+}\n+\n+condition! {\n+    copy_failed: (super::Path, super::Path) -> ();\n+}\n+\n+condition! {\n+    missing_pkg_files: (super::PkgId) -> ();\n }"}, {"sha": "161cb75e9e50e89bf38b472c6a3162e0f5ae31bd", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 119, "deletions": 11, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -12,6 +12,7 @@\n \n use util::PkgId;\n use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+use core::os::mkdir_recursive;\n \n #[deriving(Eq)]\n pub enum OutputType { Main, Lib, Bench, Test }\n@@ -23,7 +24,7 @@ pub fn rust_path() -> ~[Path] {\n     ~[Path(\".\")]\n }\n \n-static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n+pub static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n \n /// Creates a directory that is readable, writeable,\n /// and executable by the user. Returns true iff creation\n@@ -70,34 +71,137 @@ pub fn pkgid_src_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n     result.push(pkgid.path.to_str())\n }\n \n+/// Figure out what the executable name for <pkgid> in <workspace>'s build\n+/// directory is, and if the file exists, return it.\n+pub fn built_executable_in_workspace(pkgid: PkgId, workspace: &Path) -> Option<Path> {\n+    let mut result = workspace.push(\"build\");\n+    result = result.push_rel(&pkgid.path);\n+    // should use a target-specific subdirectory\n+    result = mk_output_path(Main, fmt!(\"%s-%s\", pkgid.path.to_str(), pkgid.version.to_str()),\n+                                       result);\n+    debug!(\"built_executable_in_workspace: checking whether %s exists\",\n+           result.to_str());\n+    if os::path_exists(&result) {\n+        Some(result)\n+    }\n+    else {\n+        None\n+    }\n+}\n+\n+/// Figure out what the library name for <pkgid> in <workspace>'s build\n+/// directory is, and if the file exists, return it.\n+pub fn built_library_in_workspace(pkgid: PkgId, workspace: &Path) -> Option<Path> {\n+    let mut result = workspace.push(\"build\");\n+    result = result.push_rel(&pkgid.path);\n+    // should use a target-specific subdirectory\n+    result = mk_output_path(Lib, pkgid.path.to_str(), result);\n+    debug!(\"built_library_in_workspace: checking whether %s exists\",\n+           result.to_str());\n+\n+    // We don't know what the hash is, so we have to search through the directory\n+    // contents\n+    let dir_contents = os::list_dir(&result.pop());\n+    debug!(\"dir has %? entries\", dir_contents.len());\n+\n+    // n.b. This code assumes the pkgid's path only has one element\n+    let lib_prefix = fmt!(\"%s%s\", os::consts::DLL_PREFIX, pkgid.path.to_str());\n+    let lib_filetype = fmt!(\"%s%s\", pkgid.version.to_str(), os::consts::DLL_SUFFIX);\n+\n+    debug!(\"lib_prefix = %s and lib_filetype = %s\", lib_prefix, lib_filetype);\n+\n+    let mut result_filename = None;\n+    for dir_contents.each |&p| {\n+        let mut which = 0;\n+        let mut hash = None;\n+        // Find a filename that matches the pattern: (lib_prefix)-hash-(version)(lib_suffix)\n+        // and remember what the hash was\n+        for p.each_split_char('-') |piece| {\n+            debug!(\"a piece = %s\", piece);\n+            if which == 0 && piece != lib_prefix {\n+                break;\n+            }\n+            else if which == 0 {\n+                which += 1;\n+            }\n+            else if which == 1 {\n+                hash = Some(piece.to_owned());\n+                which += 1;\n+            }\n+            else if which == 2 && piece != lib_filetype {\n+                hash = None;\n+                break;\n+            }\n+            else if which == 2 {\n+                break;\n+            }\n+            else {\n+                // something went wrong\n+                hash = None;\n+                break;\n+            }\n+        }\n+        if hash.is_some() {\n+            result_filename = Some(p);\n+            break;\n+        }\n+    }\n+\n+    // Return the filename that matches, which we now know exists\n+    // (if result_filename != None)\n+    debug!(\"result_filename = %?\", result_filename);\n+    match result_filename {\n+        None => None,\n+        Some(result_filename) => {\n+            let result_filename = result.with_filename(result_filename);\n+            debug!(\"result_filename = %s\", result_filename.to_str());\n+            Some(result_filename)\n+        }\n+    }\n+}\n+\n /// Returns the executable that would be installed for <pkgid>\n /// in <workspace>\n+/// As a side effect, creates the bin-dir if it doesn't exist\n pub fn target_executable_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n-    let result = workspace.push(\"bin\");\n-    // should use a target-specific subdirectory\n-    mk_output_path(Main, pkgid.path.to_str(), result)\n+    target_file_in_workspace(pkgid, workspace, Main)\n }\n \n \n /// Returns the executable that would be installed for <pkgid>\n /// in <workspace>\n+/// As a side effect, creates the bin-dir if it doesn't exist\n pub fn target_library_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n-    let result = workspace.push(\"lib\");\n-    mk_output_path(Lib, pkgid.path.to_str(), result)\n+    target_file_in_workspace(pkgid, workspace, Lib)\n }\n \n /// Returns the test executable that would be installed for <pkgid>\n /// in <workspace>\n pub fn target_test_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n-    let result = workspace.push(\"build\");\n-    mk_output_path(Test, pkgid.path.to_str(), result)\n+    target_file_in_workspace(pkgid, workspace, Test)\n }\n \n /// Returns the bench executable that would be installed for <pkgid>\n /// in <workspace>\n pub fn target_bench_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n-    let result = workspace.push(\"build\");\n-    mk_output_path(Bench, pkgid.path.to_str(), result)\n+    target_file_in_workspace(pkgid, workspace, Bench)\n+}\n+\n+fn target_file_in_workspace(pkgid: PkgId, workspace: &Path,\n+                            what: OutputType) -> Path {\n+    use conditions::bad_path::cond;\n+\n+    let (subdir, create_dir) = match what {\n+        Main => (\"bin\", true), Lib => (\"lib\", true), Test | Bench => (\"build\", false)\n+    };\n+    let result = workspace.push(subdir);\n+    if create_dir {\n+        if !os::path_exists(&result) && !mkdir_recursive(&result, u_rwx) {\n+            cond.raise((result, fmt!(\"I couldn't create the %s dir\", subdir)));\n+        }\n+    }\n+    mk_output_path(what, pkgid.path.to_str(), result)\n+\n }\n \n /// Return the directory for <pkgid>'s build artifacts in <workspace>.\n@@ -123,7 +227,11 @@ pub fn mk_output_path(what: OutputType, short_name: ~str, dir: Path) -> Path {\n     match what {\n         Lib => dir.push(os::dll_filename(short_name)),\n         _ => dir.push(fmt!(\"%s%s%s\", short_name,\n-                           if what == Test { ~\"test\" } else { ~\"\" },\n+                           match what {\n+                               Test => \"test\",\n+                               Bench => \"bench\",\n+                               _     => \"\"\n+                           }\n                            os::EXE_SUFFIX))\n     }\n }"}, {"sha": "cc74f464e0e82d0b1004d13f4a8ed47168907507", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 81, "deletions": 51, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -34,6 +34,8 @@ use syntax::{ast, diagnostic};\n use util::*;\n use path_util::normalize;\n use path_util::{build_pkg_id_in_workspace, pkgid_src_in_workspace};\n+use path_util::{built_executable_in_workspace, built_library_in_workspace};\n+use path_util::{target_executable_in_workspace, target_library_in_workspace};\n use workspace::pkg_parent_workspaces;\n use rustc::driver::session::{lib_crate, bin_crate, crate_type};\n use context::Ctx;\n@@ -188,49 +190,7 @@ impl Ctx {\n                 // argument\n                 let pkgid = PkgId::new(args[0]);\n                 for pkg_parent_workspaces(pkgid) |workspace| {\n-                    let src_dir   = pkgid_src_in_workspace(pkgid, workspace);\n-                    let build_dir = build_pkg_id_in_workspace(pkgid, workspace);\n-                    debug!(\"Destination dir = %s\", build_dir.to_str());\n-\n-                    // Create the package source\n-                    let mut src = PkgSrc::new(&workspace.push(\"src\"), &build_dir, &pkgid);\n-                    debug!(\"Package src = %?\", src);\n-\n-                    // Is there custom build logic? If so, use it\n-                    let pkg_src_dir = src_dir;\n-                    let mut custom = false;\n-                    debug!(\"Package source directory = %s\", pkg_src_dir.to_str());\n-                    let cfgs = match src.package_script_option(&pkg_src_dir) {\n-                        Some(package_script_path) => {\n-                            let pscript = PkgScript::parse(package_script_path,\n-                                                           workspace,\n-                                                           pkgid);\n-                            // Limited right now -- we're only running the post_build\n-                            // hook and probably fail otherwise\n-                            // also post_build should be called pre_build\n-                            let (cfgs, hook_result) = pscript.run_custom(~\"post_build\");\n-                            debug!(\"Command return code = %?\", hook_result);\n-                            if hook_result != 0 {\n-                                fail!(fmt!(\"Error running custom build command\"))\n-                            }\n-                            custom = true;\n-                            // otherwise, the package script succeeded\n-                            cfgs\n-                        }\n-                        None => {\n-                            debug!(\"No package script, continuing\");\n-                            ~[]\n-                        }\n-                    };\n-\n-                    // If there was a package script, it should have finished\n-                    // the build already. Otherwise...\n-                    if !custom {\n-                        // Find crates inside the workspace\n-                        src.find_crates();\n-                        // Build it!\n-                        src.build(&build_dir, cfgs);\n-                    }\n+                    self.build(workspace, pkgid);\n                 }\n             }\n             ~\"clean\" => {\n@@ -304,6 +264,53 @@ impl Ctx {\n         fail!(~\"`do` not yet implemented\");\n     }\n \n+    fn build(&self, workspace: &Path, pkgid: PkgId) {\n+        let src_dir   = pkgid_src_in_workspace(pkgid, workspace);\n+        let build_dir = build_pkg_id_in_workspace(pkgid, workspace);\n+        debug!(\"Destination dir = %s\", build_dir.to_str());\n+\n+        // Create the package source\n+        let mut src = PkgSrc::new(&workspace.push(\"src\"), &build_dir, &pkgid);\n+        debug!(\"Package src = %?\", src);\n+\n+        // Is there custom build logic? If so, use it\n+        let pkg_src_dir = src_dir;\n+        let mut custom = false;\n+        debug!(\"Package source directory = %s\", pkg_src_dir.to_str());\n+        let cfgs = match src.package_script_option(&pkg_src_dir) {\n+            Some(package_script_path) => {\n+                let pscript = PkgScript::parse(package_script_path,\n+                                               workspace,\n+                                               pkgid);\n+                // Limited right now -- we're only running the post_build\n+                // hook and probably fail otherwise\n+                // also post_build should be called pre_build\n+                let (cfgs, hook_result) = pscript.run_custom(~\"post_build\");\n+                debug!(\"Command return code = %?\", hook_result);\n+                if hook_result != 0 {\n+                    fail!(fmt!(\"Error running custom build command\"))\n+                }\n+                custom = true;\n+                // otherwise, the package script succeeded\n+                cfgs\n+            }\n+            None => {\n+                debug!(\"No package script, continuing\");\n+                ~[]\n+            }\n+        };\n+\n+        // If there was a package script, it should have finished\n+        // the build already. Otherwise...\n+        if !custom {\n+            // Find crates inside the workspace\n+            src.find_crates();\n+            // Build it!\n+            src.build(&build_dir, cfgs);\n+        }\n+\n+    }\n+\n     fn clean(&self, workspace: &Path, id: PkgId)  {\n         // Could also support a custom build hook in the pkg\n         // script for cleaning files rustpkg doesn't know about.\n@@ -325,9 +332,31 @@ impl Ctx {\n         fail!(~\"info not yet implemented\");\n     }\n \n-    fn install(&self, _workspace: &Path, _id: PkgId)  {\n-        // stub\n-        fail!(~\"install not yet implemented\");\n+    fn install(&self, workspace: &Path, id: PkgId)  {\n+        use conditions::copy_failed::cond;\n+\n+        // Should use RUST_PATH in the future.\n+        // Also should use workcache to not build if not necessary.\n+        self.build(workspace, id);\n+\n+        // Now copy stuff into the install dirs\n+        let maybe_executable = built_executable_in_workspace(id, workspace);\n+        let maybe_library = built_library_in_workspace(id, workspace);\n+        let target_exec = target_executable_in_workspace(id, workspace);\n+        let target_lib = target_library_in_workspace(id, workspace);\n+\n+        for maybe_executable.each |exec| {\n+            debug!(\"Copying: %s -> %s\", exec.to_str(), target_exec.to_str());\n+            if !os::copy_file(exec, &target_exec) {\n+                cond.raise((*exec, target_exec));\n+            }\n+        }\n+        for maybe_library.each |lib| {\n+            debug!(\"Copying: %s -> %s\", lib.to_str(), target_lib.to_str());\n+            if !os::copy_file(lib, &target_lib) {\n+                cond.raise((*lib, target_lib));\n+            }\n+        }\n     }\n \n     fn fetch(&self, _dir: &Path, _url: ~str, _target: Option<~str>)  {\n@@ -610,7 +639,7 @@ impl PkgSrc {\n \n \n     fn check_dir(&self) -> Path {\n-        use conditions::bad_path::cond;\n+        use conditions::nonexistent_package::cond;\n \n         debug!(\"Pushing onto root: %s | %s\", self.id.path.to_str(),\n                self.root.to_str());\n@@ -620,12 +649,12 @@ impl PkgSrc {\n         debug!(\"Checking dir: %s\", dir.to_str());\n \n         if !os::path_exists(&dir) {\n-            return cond.raise((dir, ~\"missing package dir\"));\n+            cond.raise((self.id, ~\"missing package dir\"));\n         }\n \n         if !os::path_is_dir(&dir) {\n-            return cond.raise((dir, ~\"supplied path for package dir is a \\\n-                                      non-directory\"));\n+            cond.raise((self.id, ~\"supplied path for package dir is a \\\n+                                   non-directory\"));\n         }\n \n         dir\n@@ -680,6 +709,7 @@ impl PkgSrc {\n     /// is no custom build logic\n     fn find_crates(&mut self) {\n         use PkgSrc::push_crate;\n+        use conditions::missing_pkg_files::cond;\n \n         let dir = self.check_dir();\n         let prefix = dir.components.len();\n@@ -704,7 +734,7 @@ impl PkgSrc {\n             util::note(~\"Couldn't infer any crates to build.\\n\\\n                          Try naming a crate `main.rs`, `lib.rs`, \\\n                          `test.rs`, or `bench.rs`.\");\n-            fail!(~\"Failed to infer crates to build\");\n+            cond.raise(self.id);\n         }\n \n         debug!(\"found %u libs, %u mains, %u tests, %u benchs\","}, {"sha": "f38fc88f7279199b428e597be54950aefcbce8ea", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -17,7 +17,8 @@ use std::tempfile::mkdtemp;\n use util::{PkgId, default_version};\n use path_util::{target_executable_in_workspace, target_library_in_workspace,\n                target_test_in_workspace, target_bench_in_workspace,\n-               make_dir_rwx};\n+               make_dir_rwx, u_rwx};\n+use core::os::mkdir_recursive;\n \n fn fake_ctxt() -> Ctx {\n     Ctx {\n@@ -33,69 +34,99 @@ fn fake_pkg() -> PkgId {\n     }\n }\n \n-fn mk_temp_workspace() -> Path {\n-    mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\")\n+fn writeFile(file_path: &Path, contents: ~str) {\n+    let out: @io::Writer =\n+        result::get(&io::file_writer(file_path,\n+                                     ~[io::Create, io::Truncate]));\n+    out.write_line(contents);\n+}\n+\n+fn mk_temp_workspace(short_name: &Path) -> Path {\n+    let workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n+    let package_dir = workspace.push(~\"src\").push_rel(short_name);\n+    assert!(mkdir_recursive(&package_dir, u_rwx));\n+    // Create main, lib, test, and bench files\n+    writeFile(&package_dir.push(~\"main.rs\"),\n+              ~\"fn main() { let _x = (); }\");\n+    writeFile(&package_dir.push(~\"lib.rs\"),\n+              ~\"pub fn f() { let _x = (); }\");\n+    writeFile(&package_dir.push(~\"test.rs\"),\n+              ~\"#[test] pub fn f() { (); }\");\n+    writeFile(&package_dir.push(~\"bench.rs\"),\n+              ~\"#[bench] pub fn f() { (); }\");\n+    workspace\n }\n \n fn is_rwx(p: &Path) -> bool {\n     use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n \n     match p.get_mode() {\n         None => return false,\n-        Some(m) => {\n+        Some(m) =>\n             ((m & S_IRUSR as uint) == S_IRUSR as uint\n             && (m & S_IWUSR as uint) == S_IWUSR as uint\n             && (m & S_IXUSR as uint) == S_IXUSR as uint)\n-        }\n     }\n }\n \n #[test]\n fn test_make_dir_rwx() {\n     let temp = &os::tmpdir();\n     let dir = temp.push(~\"quux\");\n-    let _ = os::remove_dir(&dir);\n+    assert!(!os::path_exists(&dir) ||\n+            os::remove_dir_recursive(&dir));\n+    debug!(\"Trying to make %s\", dir.to_str());\n     assert!(make_dir_rwx(&dir));\n     assert!(os::path_is_dir(&dir));\n     assert!(is_rwx(&dir));\n-    assert!(os::remove_dir(&dir));\n+    assert!(os::remove_dir_recursive(&dir));\n }\n \n #[test]\n-#[ignore(reason = \"install not yet implemented\")]\n fn test_install_valid() {\n+    use rustc::metadata::filesearch;\n+\n+    let sysroot = filesearch::get_rustpkg_sysroot();\n+    debug!(\"sysroot = %s\", sysroot.get().to_str());\n     let ctxt = fake_ctxt();\n     let temp_pkg_id = fake_pkg();\n-    let temp_workspace = mk_temp_workspace();\n+    let temp_workspace = mk_temp_workspace(&temp_pkg_id.path);\n     // should have test, bench, lib, and main\n     ctxt.install(&temp_workspace, temp_pkg_id);\n     // Check that all files exist\n     let exec = target_executable_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"exec = %s\", exec.to_str());\n     assert!(os::path_exists(&exec));\n     assert!(is_rwx(&exec));\n     let lib = target_library_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"lib = %s\", lib.to_str());\n     assert!(os::path_exists(&lib));\n     assert!(is_rwx(&lib));\n     // And that the test and bench executables aren't installed\n     assert!(!os::path_exists(&target_test_in_workspace(temp_pkg_id, &temp_workspace)));\n-    assert!(!os::path_exists(&target_bench_in_workspace(temp_pkg_id, &temp_workspace)));\n+    let bench = target_bench_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"bench = %s\", bench.to_str());\n+    assert!(!os::path_exists(&bench));\n }\n \n #[test]\n-#[ignore(reason = \"install not yet implemented\")]\n fn test_install_invalid() {\n     use conditions::nonexistent_package::cond;\n+    use cond1 = conditions::missing_pkg_files::cond;\n \n     let ctxt = fake_ctxt();\n     let pkgid = fake_pkg();\n-    let temp_workspace = mk_temp_workspace();\n-    let expected_path = Path(~\"quux\");\n-    let substituted: Path = do cond.trap(|_| {\n-        expected_path\n+    let temp_workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n+    let mut error_occurred = false;\n+    let mut error1_occurred = false;\n+    do cond1.trap(|_| {\n+        error1_occurred = true;\n     }).in {\n-        ctxt.install(&temp_workspace, pkgid);\n-        // ok\n-        fail!(~\"test_install_invalid failed, should have raised a condition\");\n-    };\n-    assert!(substituted == expected_path);\n+        do cond.trap(|_| {\n+            error_occurred = true;\n+        }).in {\n+            ctxt.install(&temp_workspace, pkgid);\n+        }\n+    }\n+    assert!(error_occurred && error1_occurred);\n }"}, {"sha": "1b3d72bf6aa64e58ebe84604320f05aa8d81b1ec", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -477,6 +477,8 @@ pub fn compile_input(sysroot: Option<Path>,\n \n     let matches = getopts(~[~\"-Z\", ~\"time-passes\"]\n                           + if building_library { ~[~\"--lib\"] }\n+                            else if test { ~[~\"--test\"] }\n+                            // bench?\n                             else { ~[] }\n                           + flags\n                           + cfgs.flat_map(|&c| { ~[~\"--cfg\", c] }),\n@@ -540,9 +542,13 @@ pub fn compile_crate_from_input(input: driver::input,\n             let (crate, _) = driver::compile_upto(sess, cfg, &input,\n                                                   driver::cu_parse, Some(outputs));\n \n+            debug!(\"About to inject link_meta info...\");\n             // Inject the inferred link_meta info if it's not already there\n             // (assumes that name and vers are the only linkage metas)\n             let mut crate_to_use = crate;\n+\n+            debug!(\"How many attrs? %?\", attr::find_linkage_metas(crate.node.attrs).len());\n+\n             if attr::find_linkage_metas(crate.node.attrs).is_empty() {\n                 crate_to_use = add_attrs(*crate, ~[mk_attr(@dummy_spanned(meta_list(@~\"link\",\n                                                   // change PkgId to have a <shortname> field?\n@@ -552,7 +558,6 @@ pub fn compile_crate_from_input(input: driver::input,\n                                                     mk_string_lit(@pkg_id.version.to_str())))])))]);\n             }\n \n-\n             driver::compile_rest(sess, cfg, what, Some(outputs), Some(crate_to_use));\n             crate_to_use\n         }"}, {"sha": "3d4e5bb8b79c1c0418e8e7a07aab0472a3624b8f", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cabff9ede49ae3642b05c4cfb023a0a9222b2/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=4d4cabff9ede49ae3642b05c4cfb023a0a9222b2", "patch": "@@ -27,7 +27,8 @@ pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n mod tests {\n     use tempfile::mkdtemp;\n     use tempfile;\n-\n+    use core::os;\n+    \n     #[test]\n     fn test_mkdtemp() {\n         let p = mkdtemp(&Path(\".\"), \"foobar\").unwrap();\n@@ -89,4 +90,27 @@ mod tests {\n             assert!(os::path_is_dir(&path2.pop()));\n         });\n     }\n+\n+    // Ideally this would be in core, but needs mkdtemp\n+    #[test]\n+    pub fn test_rmdir_recursive_ok() {\n+        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use core::os;\n+\n+        let rwx = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n+\n+        let tmpdir = mkdtemp(&os::tmpdir(), \"test\").expect(\"test_rmdir_recursive_ok: \\\n+                                            couldn't create temp dir\");\n+        let root = tmpdir.push(\"foo\");\n+\n+        debug!(\"making %s\", root.to_str());\n+        assert!(os::make_dir(&root, rwx));\n+        assert!(os::make_dir(&root.push(\"foo\"), rwx));\n+        assert!(os::make_dir(&root.push(\"foo\").push(\"bar\"), rwx));\n+        assert!(os::make_dir(&root.push(\"foo\").push(\"bar\").push(\"blat\"), rwx));\n+        assert!(os::remove_dir_recursive(&root));\n+        assert!(!os::path_exists(&root));\n+        assert!(!os::path_exists(&root.push(\"bar\")));\n+        assert!(!os::path_exists(&root.push(\"bar\").push(\"blat\")));\n+    }\n }"}]}