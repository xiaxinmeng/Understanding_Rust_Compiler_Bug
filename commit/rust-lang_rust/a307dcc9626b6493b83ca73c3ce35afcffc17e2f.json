{"sha": "a307dcc9626b6493b83ca73c3ce35afcffc17e2f", "node_id": "C_kwDOAAsO6NoAKGEzMDdkY2M5NjI2YjY0OTNiODNjYTczYzNjZTM1YWZjZmZjMTdlMmY", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-12T19:13:54Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-24T15:24:00Z"}, "message": "Add 1.56.0 release notes\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "9907077c9fb5753ddbbc6c7cf348b76171220b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9907077c9fb5753ddbbc6c7cf348b76171220b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a307dcc9626b6493b83ca73c3ce35afcffc17e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a307dcc9626b6493b83ca73c3ce35afcffc17e2f", "html_url": "https://github.com/rust-lang/rust/commit/a307dcc9626b6493b83ca73c3ce35afcffc17e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a307dcc9626b6493b83ca73c3ce35afcffc17e2f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0648eab3686f100c7ab9b0d38472c740079cce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0648eab3686f100c7ab9b0d38472c740079cce4", "html_url": "https://github.com/rust-lang/rust/commit/a0648eab3686f100c7ab9b0d38472c740079cce4"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "82a0cda9f6b741b0c3195e4645af64b9fa93a92d", "filename": "RELEASES.md", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/a307dcc9626b6493b83ca73c3ce35afcffc17e2f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a307dcc9626b6493b83ca73c3ce35afcffc17e2f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a307dcc9626b6493b83ca73c3ce35afcffc17e2f", "patch": "@@ -1,3 +1,188 @@\n+Rust 1.56.0 (2021-10-21)\n+========================\n+\n+Language\n+--------\n+\n+- [The 2021 Edition is now stable.][rust#88100]\n+  See [the edition guide][rust-2021-edition-guide] for more details.\n+- [You can now specify explicit discriminant values on any Rust enum.][rust#86860]\n+- [The pattern in `binding @ pattern` can now also introduce new bindings.][rust#85305]\n+- [Union field access is permitted in `const fn`.][rust#85769]\n+\n+[rust-2021-edition-guide]: https://doc.rust-lang.org/nightly/edition-guide/rust-2021/index.html\n+\n+Compiler\n+--------\n+\n+- [Upgrade to LLVM 13.][rust#87570]\n+- [Support memory, address, and thread sanitizers on aarch64-unknown-freebsd.][rust#88023]\n+- [Allow specifying an deployment target version for all iOS targets][rust#87699]\n+- [Warnings can be forced on with `--force-warn`.][rust#87472]\n+  This feature is primarily intended for usage by `cargo fix`, rather than end users.\n+- [Promote `aarch64-apple-ios-sim` to Tier 2\\*.][rust#87760]\n+- [Add `powerpc-unknown-freebsd` at Tier 3\\*.][rust#87370]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Allow writing of incomplete UTF-8 sequences via stdout/stderr on Windows.][rust#83342]\n+  The Windows console still requires valid Unicode, but this change allows\n+  splitting a UTF-8 character across multiple write calls. This allows, for\n+  instance, programs that just read and write data buffers (e.g. copying a file\n+  to stdout) without regard for Unicode or character boundaries.\n+- [Prefer `AtomicU{64,128}` over Mutex for Instant backsliding protection.][rust#83093]\n+  For this use case, atomics scale much better under contention.\n+- [Implement `Extend<(A, B)>` for `(Extend<A>, Extend<B>)`][rust#85835]\n+- [impl Default, Copy, Clone for std::io::Sink and std::io::Empty][rust#86744]\n+- [`impl From<[(K, V); N]>` for all collections.][rust#84111]\n+- [Remove `P: Unpin` bound on impl Future for Pin.][rust#81363]\n+- [Treat invalid environment variable names as non-existent.][rust#86183]\n+  Previously, the environment functions would panic if given a variable name\n+  with an internal null character or equal sign (`=`). Now, these functions will\n+  just treat such names as non-existent variables, since the OS cannot represent\n+  the existence of a variable with such a name.\n+\n+Stabilised APIs\n+---------------\n+\n+- [`std::os::unix::fs::chroot`]\n+- [`Iterator::intersperse`]\n+- [`Iterator::intersperse_with`]\n+- [`UnsafeCell::raw_get`]\n+- [`BufWriter::into_parts`]\n+- [`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]\n+  These APIs were previously stable in `std`, but are now also available in `core`.\n+- [`Vec::shrink_to`]\n+- [`String::shrink_to`]\n+- [`OsString::shrink_to`]\n+- [`PathBuf::shrink_to`]\n+- [`BinaryHeap::shrink_to`]\n+- [`VecDeque::shrink_to`]\n+- [`HashMap::shrink_to`]\n+- [`HashSet::shrink_to`]\n+- [`task::ready!`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`std::mem::transmute`]\n+- [`[T]::first`][`slice::first`]\n+- [`[T]::split_first`][`slice::split_first`]\n+- [`[T]::last`][`slice::last`]\n+- [`[T]::split_last`][`slice::split_last`]\n+\n+Cargo\n+-----\n+\n+- [Cargo supports specifying a minimum supported Rust version in Cargo.toml.][`rust-version`]\n+  This has no effect at present on dependency version selection.\n+  We encourage crates to specify their minimum supported Rust version, and we encourage CI systems\n+  that support Rust code to include a crate's specified minimum version in the text matrix for that\n+  crate by default.\n+\n+Compatibility notes\n+-------------------\n+\n+- [Update to new argument parsing rules on Windows.][rust#87580]\n+  This adjusts Rust's standard library to match the behavior of the standard\n+  libraries for C/C++. The rules have changed slightly over time, and this PR\n+  brings us to the latest set of rules (changed in 2008).\n+- [Disallow the aapcs calling convention on aarch64][rust#88399]\n+  This was already not supported by LLVM; this change surfaces this lack of\n+  support with a better error message.\n+- [Make `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default][rust#87385]\n+- [Warn when an escaped newline skips multiple lines.][rust#87671]\n+- [Calls to `libc::getpid` / `std::process::id` from `Command::pre_exec`\n+   may return different values on glibc <= 2.24.][rust#81825]\n+   Rust now invokes the `clone3` system call directly, when available, to use new functionality\n+   available via that system call. Older versions of glibc cache the result of `getpid`, and only\n+   update that cache when calling glibc's clone/fork functions, so a direct system call bypasses\n+   that cache update. glibc 2.25 and newer no longer cache `getpid` for exactly this reason.\n+\n+Internal changes\n+----------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [LLVM is compiled with PGO in published x86_64-unknown-linux-gnu artifacts.][rust#88069]\n+  This improves the performance of most Rust builds.\n+- [Unify representation of macros in internal data structures.][rust#88019]\n+  This change fixes a host of bugs with the handling of macros by the compiler,\n+  as well as rustdoc.\n+\n+[`std::os::unix::fs::chroot`]: https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chroot.html\n+[`Iterator::intersperse`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n+[`Iterator::intersperse_with`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n+[`UnsafeCell::raw_get`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.raw_get\n+[`BufWriter::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.BufWriter.html#method.into_parts\n+[`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]: https://github.com/rust-lang/rust/pull/84662\n+[`Vec::shrink_to`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.shrink_to\n+[`String::shrink_to`]: https://doc.rust-lang.org/stable/std/string/struct.String.html#method.shrink_to\n+[`OsString::shrink_to`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.shrink_to\n+[`PathBuf::shrink_to`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.shrink_to\n+[`BinaryHeap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.shrink_to\n+[`VecDeque::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.shrink_to\n+[`HashMap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_map/struct.HashMap.html#method.shrink_to\n+[`HashSet::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_set/struct.HashSet.html#method.shrink_to\n+[`task::ready!`]: https://doc.rust-lang.org/stable/std/task/macro.ready.html\n+[`std::mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n+[`slice::first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first\n+[`slice::split_first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_first\n+[`slice::last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last\n+[`slice::split_last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last\n+[`rust-version`]: https://doc.rust-lang.org/nightly/cargo/reference/manifest.html#the-rust-version-field\n+[rust#87671]: https://github.com/rust-lang/rust/pull/87671\n+[rust#86183]: https://github.com/rust-lang/rust/pull/86183\n+[rust#87385]: https://github.com/rust-lang/rust/pull/87385\n+[rust#88100]: https://github.com/rust-lang/rust/pull/88100\n+[rust#86860]: https://github.com/rust-lang/rust/pull/86860\n+[rust#84039]: https://github.com/rust-lang/rust/pull/84039\n+[rust#86492]: https://github.com/rust-lang/rust/pull/86492\n+[rust#88363]: https://github.com/rust-lang/rust/pull/88363\n+[rust#85305]: https://github.com/rust-lang/rust/pull/85305\n+[rust#87832]: https://github.com/rust-lang/rust/pull/87832\n+[rust#88069]: https://github.com/rust-lang/rust/pull/88069\n+[rust#87472]: https://github.com/rust-lang/rust/pull/87472\n+[rust#87699]: https://github.com/rust-lang/rust/pull/87699\n+[rust#87570]: https://github.com/rust-lang/rust/pull/87570\n+[rust#88023]: https://github.com/rust-lang/rust/pull/88023\n+[rust#87760]: https://github.com/rust-lang/rust/pull/87760\n+[rust#87370]: https://github.com/rust-lang/rust/pull/87370\n+[rust#87580]: https://github.com/rust-lang/rust/pull/87580\n+[rust#83342]: https://github.com/rust-lang/rust/pull/83342\n+[rust#83093]: https://github.com/rust-lang/rust/pull/83093\n+[rust#88177]: https://github.com/rust-lang/rust/pull/88177\n+[rust#88548]: https://github.com/rust-lang/rust/pull/88548\n+[rust#88551]: https://github.com/rust-lang/rust/pull/88551\n+[rust#88299]: https://github.com/rust-lang/rust/pull/88299\n+[rust#88220]: https://github.com/rust-lang/rust/pull/88220\n+[rust#85835]: https://github.com/rust-lang/rust/pull/85835\n+[rust#86879]: https://github.com/rust-lang/rust/pull/86879\n+[rust#86744]: https://github.com/rust-lang/rust/pull/86744\n+[rust#84662]: https://github.com/rust-lang/rust/pull/84662\n+[rust#86593]: https://github.com/rust-lang/rust/pull/86593\n+[rust#81050]: https://github.com/rust-lang/rust/pull/81050\n+[rust#81363]: https://github.com/rust-lang/rust/pull/81363\n+[rust#84111]: https://github.com/rust-lang/rust/pull/84111\n+[rust#85769]: https://github.com/rust-lang/rust/pull/85769#issuecomment-854363720\n+[rust#88490]: https://github.com/rust-lang/rust/pull/88490\n+[rust#88269]: https://github.com/rust-lang/rust/pull/88269\n+[rust#84176]: https://github.com/rust-lang/rust/pull/84176\n+[rust#88399]: https://github.com/rust-lang/rust/pull/88399\n+[rust#88227]: https://github.com/rust-lang/rust/pull/88227\n+[rust#88200]: https://github.com/rust-lang/rust/pull/88200\n+[rust#82776]: https://github.com/rust-lang/rust/pull/82776\n+[rust#88077]: https://github.com/rust-lang/rust/pull/88077\n+[rust#87728]: https://github.com/rust-lang/rust/pull/87728\n+[rust#87050]: https://github.com/rust-lang/rust/pull/87050\n+[rust#87619]: https://github.com/rust-lang/rust/pull/87619\n+[rust#81825]: https://github.com/rust-lang/rust/pull/81825#issuecomment-808406918\n+[rust#88019]: https://github.com/rust-lang/rust/pull/88019\n+\n Version 1.55.0 (2021-09-09)\n ============================\n "}]}