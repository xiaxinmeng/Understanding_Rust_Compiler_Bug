{"sha": "58b0d7479fb478d9c8293e78adaa86a8971442d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjBkNzQ3OWZiNDc4ZDljODI5M2U3OGFkYWE4NmE4OTcxNDQyZDU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T22:21:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:16Z"}, "message": "syntax: make the closure type `f: |uint| -> bool` syntax obsolete", "tree": {"sha": "14bee44d548bcb2380f06d9bc35b8575d1f45936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14bee44d548bcb2380f06d9bc35b8575d1f45936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b0d7479fb478d9c8293e78adaa86a8971442d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b0d7479fb478d9c8293e78adaa86a8971442d5", "html_url": "https://github.com/rust-lang/rust/commit/58b0d7479fb478d9c8293e78adaa86a8971442d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b0d7479fb478d9c8293e78adaa86a8971442d5/comments", "author": null, "committer": null, "parents": [{"sha": "865aabb6622c44ab47c616c244642a85ce0c4719", "url": "https://api.github.com/repos/rust-lang/rust/commits/865aabb6622c44ab47c616c244642a85ce0c4719", "html_url": "https://github.com/rust-lang/rust/commit/865aabb6622c44ab47c616c244642a85ce0c4719"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "75b2c17b81bd487512fc8013d7380d2c86e15f66", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58b0d7479fb478d9c8293e78adaa86a8971442d5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0d7479fb478d9c8293e78adaa86a8971442d5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=58b0d7479fb478d9c8293e78adaa86a8971442d5", "patch": "@@ -34,6 +34,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteExternCrateRenaming,\n     ObsoleteProcType,\n     ObsoleteProcExpr,\n+    ObsoleteClosureType,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -94,6 +95,10 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n             ObsoleteExternCrateRenaming => (\n                 \"`extern crate foo = bar` syntax\",\n                 \"write `extern crate bar as foo` instead\"\n+            ),\n+            ObsoleteClosureType => (\n+                \"`|uint| -> bool` closure type syntax\",\n+                \"use unboxed closures instead, no type annotation needed\"\n             )\n         };\n "}, {"sha": "678a3c574f5b8b24d5d22adeeff8d977a68142cf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/58b0d7479fb478d9c8293e78adaa86a8971442d5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0d7479fb478d9c8293e78adaa86a8971442d5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=58b0d7479fb478d9c8293e78adaa86a8971442d5", "patch": "@@ -1227,32 +1227,29 @@ impl<'a> Parser<'a> {\n \n         */\n \n-        let unsafety = self.parse_unsafety();\n+        let ty_closure_span = self.last_span;\n \n-        let lifetime_defs = self.parse_legacy_lifetime_defs(lifetime_defs);\n+        // To be helpful, parse the closure type as ever\n+        let _ = self.parse_unsafety();\n \n-        let inputs = if self.eat(&token::OrOr) {\n-            Vec::new()\n-        } else {\n+        let _ = self.parse_legacy_lifetime_defs(lifetime_defs);\n+\n+        if !self.eat(&token::OrOr) {\n             self.expect_or();\n \n-            let inputs = self.parse_seq_to_before_or(\n+            let _ = self.parse_seq_to_before_or(\n                 &token::Comma,\n                 |p| p.parse_arg_general(false));\n             self.expect_or();\n-            inputs\n-        };\n+        }\n \n-        let bounds = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n+        let _ = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n \n-        let output = self.parse_ret_ty();\n-        let decl = P(FnDecl {\n-            inputs: inputs,\n-            output: output,\n-            variadic: false\n-        });\n+        let _ = self.parse_ret_ty();\n \n-        panic!(\"stub\");\n+        self.obsolete(ty_closure_span, ObsoleteClosureType);\n+\n+        TyInfer\n     }\n \n     pub fn parse_unsafety(&mut self) -> Unsafety {"}]}