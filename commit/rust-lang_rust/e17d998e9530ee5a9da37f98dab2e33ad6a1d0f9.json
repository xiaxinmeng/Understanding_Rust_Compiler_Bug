{"sha": "e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2Q5OThlOTUzMGVlNWE5ZGEzN2Y5OGRhYjJlMzNhZDZhMWQwZjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T23:24:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T23:26:33Z"}, "message": "De-export std::{time, prettyprint{,2}, arena}. Part of #3583.", "tree": {"sha": "c98faef1fa8f53c366127e642b7a2cf82e583166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98faef1fa8f53c366127e642b7a2cf82e583166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "html_url": "https://github.com/rust-lang/rust/commit/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1948ddf583fd958a54599d7e06dc3098e563c03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1948ddf583fd958a54599d7e06dc3098e563c03f", "html_url": "https://github.com/rust-lang/rust/commit/1948ddf583fd958a54599d7e06dc3098e563c03f"}], "stats": {"total": 56, "additions": 17, "deletions": 39}, "files": [{"sha": "4d2b910fa8510502d1853eb731b5184f17c67567", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "patch": "@@ -24,21 +24,17 @@\n \n #[forbid(deprecated_mode)];\n \n-export Arena, arena_with_size;\n-\n use list::{List, Cons, Nil};\n use cast::reinterpret_cast;\n use sys::TypeDesc;\n use libc::size_t;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n     fn move_val_init<T>(&dst: T, -src: T);\n     fn needs_drop<T>() -> bool;\n }\n extern mod rustrt {\n-    #[legacy_exports];\n     #[rust_stack]\n     fn rust_call_tydesc_glue(root: *u8, tydesc: *TypeDesc, field: size_t);\n }\n@@ -51,7 +47,7 @@ const tydesc_drop_glue_index: size_t = 3 as size_t;\n // will always stay at 0.\n type Chunk = {data: @[u8], mut fill: uint, is_pod: bool};\n \n-struct Arena {\n+pub struct Arena {\n     // The head is seperated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n@@ -74,13 +70,13 @@ fn chunk(size: uint, is_pod: bool) -> Chunk {\n     { data: unsafe { cast::transmute(v) }, mut fill: 0u, is_pod: is_pod }\n }\n \n-fn arena_with_size(initial_size: uint) -> Arena {\n+pub fn arena_with_size(initial_size: uint) -> Arena {\n     return Arena {mut head: chunk(initial_size, false),\n                   mut pod_head: chunk(initial_size, true),\n                   mut chunks: @Nil};\n }\n \n-fn Arena() -> Arena {\n+pub fn Arena() -> Arena {\n     arena_with_size(32u)\n }\n "}, {"sha": "68421a217ee0078662803dd7f8609b0de6c7e2ac", "filename": "src/libstd/prettyprint2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Fprettyprint2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Fprettyprint2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint2.rs?ref=e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "patch": "@@ -4,11 +4,11 @@ use io::Writer;\n use io::WriterUtil;\n use serialization2;\n \n-struct Serializer {\n+pub struct Serializer {\n     wr: io::Writer,\n }\n \n-fn Serializer(wr: io::Writer) -> Serializer {\n+pub fn Serializer(wr: io::Writer) -> Serializer {\n     Serializer { wr: wr }\n }\n "}, {"sha": "cf2e1d6567fecc1da8aa5d72ad7a94c2550ef93e", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "patch": "@@ -111,13 +111,9 @@ mod sha1;\n mod md4;\n mod tempfile;\n mod term;\n-#[legacy_exports]\n mod time;\n-#[legacy_exports]\n mod prettyprint;\n-#[legacy_exports]\n mod prettyprint2;\n-#[legacy_exports]\n mod arena;\n mod par;\n mod cmp;"}, {"sha": "43cbc6da9bd9855f71593edd2b6ccc65a8e42866", "filename": "src/libstd/time.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=e17d998e9530ee5a9da37f98dab2e33ad6a1d0f9", "patch": "@@ -5,20 +5,6 @@ use libc::{c_char, c_int, c_long, size_t, time_t};\n use io::{Reader, ReaderUtil};\n use result::{Result, Ok, Err};\n \n-export\n-    Timespec,\n-    get_time,\n-    precise_time_ns,\n-    precise_time_s,\n-    tzset,\n-    Tm,\n-    empty_tm,\n-    now,\n-    at,\n-    now_utc,\n-    at_utc,\n-    strptime;\n-\n #[abi = \"cdecl\"]\n extern mod rustrt {\n     #[legacy_exports];\n@@ -34,7 +20,7 @@ extern mod rustrt {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-type Timespec = {sec: i64, nsec: i32};\n+pub type Timespec = {sec: i64, nsec: i32};\n \n impl Timespec : Eq {\n     pure fn eq(other: &Timespec) -> bool {\n@@ -47,7 +33,7 @@ impl Timespec : Eq {\n  * Returns the current time as a `timespec` containing the seconds and\n  * nanoseconds since 1970-01-01T00:00:00Z.\n  */\n-fn get_time() -> Timespec {\n+pub fn get_time() -> Timespec {\n     let mut sec = 0i64;\n     let mut nsec = 0i32;\n     rustrt::get_time(sec, nsec);\n@@ -58,7 +44,7 @@ fn get_time() -> Timespec {\n  * Returns the current value of a high-resolution performance counter\n  * in nanoseconds since an unspecified epoch.\n  */\n-fn precise_time_ns() -> u64 {\n+pub fn precise_time_ns() -> u64 {\n     let mut ns = 0u64;\n     rustrt::precise_time_ns(ns);\n     ns\n@@ -68,11 +54,11 @@ fn precise_time_ns() -> u64 {\n  * Returns the current value of a high-resolution performance counter\n  * in seconds since an unspecified epoch.\n  */\n-fn precise_time_s() -> float {\n+pub fn precise_time_s() -> float {\n     return (precise_time_ns() as float) / 1000000000.;\n }\n \n-fn tzset() {\n+pub fn tzset() {\n     rustrt::rust_tzset();\n }\n \n@@ -109,7 +95,7 @@ impl Tm_ : Eq {\n     pure fn ne(other: &Tm_) -> bool { !self.eq(other) }\n }\n \n-enum Tm {\n+pub enum Tm {\n     Tm_(Tm_)\n }\n \n@@ -118,7 +104,7 @@ impl Tm : Eq {\n     pure fn ne(other: &Tm) -> bool { *self != *(*other) }\n }\n \n-fn empty_tm() -> Tm {\n+pub fn empty_tm() -> Tm {\n     Tm_({\n         tm_sec: 0_i32,\n         tm_min: 0_i32,\n@@ -136,33 +122,33 @@ fn empty_tm() -> Tm {\n }\n \n /// Returns the specified time in UTC\n-fn at_utc(clock: Timespec) -> Tm {\n+pub fn at_utc(clock: Timespec) -> Tm {\n     let mut {sec, nsec} = clock;\n     let mut tm = empty_tm();\n     rustrt::rust_gmtime(sec, nsec, tm);\n     tm\n }\n \n /// Returns the current time in UTC\n-fn now_utc() -> Tm {\n+pub fn now_utc() -> Tm {\n     at_utc(get_time())\n }\n \n /// Returns the specified time in the local timezone\n-fn at(clock: Timespec) -> Tm {\n+pub fn at(clock: Timespec) -> Tm {\n     let mut {sec, nsec} = clock;\n     let mut tm = empty_tm();\n     rustrt::rust_localtime(sec, nsec, tm);\n     tm\n }\n \n /// Returns the current time in the local timezone\n-fn now() -> Tm {\n+pub fn now() -> Tm {\n     at(get_time())\n }\n \n /// Parses the time from the string according to the format string.\n-fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n+pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     type TmMut = {\n        mut tm_sec: i32,\n        mut tm_min: i32,"}]}