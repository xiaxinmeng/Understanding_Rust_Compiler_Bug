{"sha": "6ecbd75843a2187027d09649c9046189d1d4a446", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlY2JkNzU4NDNhMjE4NzAyN2QwOTY0OWM5MDQ2MTg5ZDFkNGE0NDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-30T02:01:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:20Z"}, "message": "librustc: Change the ID visitor to use traits instead of garbage-collected functions.", "tree": {"sha": "01a6b507157208617145378be4f4c1bc0d034057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a6b507157208617145378be4f4c1bc0d034057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ecbd75843a2187027d09649c9046189d1d4a446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecbd75843a2187027d09649c9046189d1d4a446", "html_url": "https://github.com/rust-lang/rust/commit/6ecbd75843a2187027d09649c9046189d1d4a446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ecbd75843a2187027d09649c9046189d1d4a446/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c32e249505f103f9bcad0bdd83f49f0efec9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c32e249505f103f9bcad0bdd83f49f0efec9ef", "html_url": "https://github.com/rust-lang/rust/commit/37c32e249505f103f9bcad0bdd83f49f0efec9ef"}], "stats": {"total": 148, "additions": 94, "deletions": 54}, "files": [{"sha": "683fbba09cc524c1a2f0b08010f339c80da0393a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6ecbd75843a2187027d09649c9046189d1d4a446", "patch": "@@ -24,6 +24,7 @@ use middle;\n use util::ppaux::ty_to_str;\n \n use std::at_vec;\n+use std::libc;\n use extra::ebml::reader;\n use extra::ebml;\n use extra::serialize;\n@@ -849,29 +850,43 @@ impl write_tag_and_id for writer::Encoder {\n     }\n }\n \n+struct SideTableEncodingIdVisitor {\n+    ecx_ptr: *libc::c_void,\n+    new_ebml_w: writer::Encoder,\n+    maps: Maps,\n+}\n+\n+impl ast_util::IdVisitingOperation for SideTableEncodingIdVisitor {\n+    fn visit_id(&self, id: ast::NodeId) {\n+        // Note: this will cause a copy of ebml_w, which is bad as\n+        // it is mutable. But I believe it's harmless since we generate\n+        // balanced EBML.\n+        let mut new_ebml_w = self.new_ebml_w.clone();\n+        // See above\n+        let ecx: &e::EncodeContext = unsafe {\n+            cast::transmute(self.ecx_ptr)\n+        };\n+        encode_side_tables_for_id(ecx, self.maps, &mut new_ebml_w, id)\n+    }\n+}\n+\n fn encode_side_tables_for_ii(ecx: &e::EncodeContext,\n                              maps: Maps,\n                              ebml_w: &mut writer::Encoder,\n                              ii: &ast::inlined_item) {\n     ebml_w.start_tag(c::tag_table as uint);\n     let new_ebml_w = (*ebml_w).clone();\n \n-    // Because the ast visitor uses @fn, I can't pass in\n-    // ecx directly, but /I/ know that it'll be fine since\n-    // the lifetime is tied to the CrateContext that\n-    // lives this entire section.\n-    let ecx_ptr : *() = unsafe { cast::transmute(ecx) };\n-    ast_util::visit_ids_for_inlined_item(\n-        ii,\n-        |id: ast::NodeId| {\n-            // Note: this will cause a copy of ebml_w, which is bad as\n-            // it is mutable. But I believe it's harmless since we generate\n-            // balanced EBML.\n-            let mut new_ebml_w = new_ebml_w.clone();\n-            // See above\n-            let ecx : &e::EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n-            encode_side_tables_for_id(ecx, maps, &mut new_ebml_w, id)\n-        });\n+    // Because the ast visitor uses @IdVisitingOperation, I can't pass in\n+    // ecx directly, but /I/ know that it'll be fine since the lifetime is\n+    // tied to the CrateContext that lives throughout this entire section.\n+    ast_util::visit_ids_for_inlined_item(ii, @SideTableEncodingIdVisitor {\n+        ecx_ptr: unsafe {\n+            cast::transmute(ecx)\n+        },\n+        new_ebml_w: new_ebml_w,\n+        maps: maps,\n+    } as @ast_util::IdVisitingOperation);\n     ebml_w.end_tag();\n }\n "}, {"sha": "c29a5159e811bb255b0e7b75789ad72e594ec81f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6ecbd75843a2187027d09649c9046189d1d4a446", "patch": "@@ -1228,17 +1228,27 @@ fn lint_unused_mut() -> @mut OuterLint {\n     @mut UnusedMutLintVisitor{ stopping_on_items: false } as @mut OuterLint\n }\n \n-fn lint_session(cx: @mut Context) -> @mut visit::Visitor<()> {\n-    ast_util::id_visitor(|id| {\n-        match cx.tcx.sess.lints.pop(&id) {\n-            None => {},\n+struct LintReportingIdVisitor {\n+    cx: @mut Context,\n+}\n+\n+impl ast_util::IdVisitingOperation for LintReportingIdVisitor {\n+    fn visit_id(&self, id: ast::NodeId) {\n+        match self.cx.tcx.sess.lints.pop(&id) {\n+            None => {}\n             Some(l) => {\n                 for (lint, span, msg) in l.move_iter() {\n-                    cx.span_lint(lint, span, msg)\n+                    self.cx.span_lint(lint, span, msg)\n                 }\n             }\n         }\n-    }, false)\n+    }\n+}\n+\n+fn lint_session(cx: @mut Context) -> @mut visit::Visitor<()> {\n+    ast_util::id_visitor(@LintReportingIdVisitor {\n+        cx: cx,\n+    } as @ast_util::IdVisitingOperation, false)\n }\n \n struct UnnecessaryAllocationLintVisitor { stopping_on_items: bool }"}, {"sha": "f1f7a7bf2d6b5d5acdcd5738ab5cd4bc27c1724d", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=6ecbd75843a2187027d09649c9046189d1d4a446", "patch": "@@ -299,7 +299,7 @@ struct RustcEmitter {\n \n impl diagnostic::Emitter for RustcEmitter {\n     fn emit(&self,\n-            cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n+            cmsp: Option<(@codemap::CodeMap, codemap::Span)>,\n             msg: &str,\n             lvl: diagnostic::level) {\n         if lvl == diagnostic::fatal {"}, {"sha": "ac88fc835d50d51bce7bad9a4a1fc1478f2851e1", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecbd75843a2187027d09649c9046189d1d4a446/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6ecbd75843a2187027d09649c9046189d1d4a446", "patch": "@@ -397,29 +397,33 @@ impl id_range {\n     }\n }\n \n-pub fn id_visitor(vfn: @fn(NodeId), pass_through_items: bool)\n+pub fn id_visitor(operation: @IdVisitingOperation, pass_through_items: bool)\n                   -> @mut Visitor<()> {\n     let visitor = @mut IdVisitor {\n-        visit_callback: vfn,\n+        operation: operation,\n         pass_through_items: pass_through_items,\n         visited_outermost: false,\n     };\n     visitor as @mut Visitor<()>\n }\n \n+pub trait IdVisitingOperation {\n+    fn visit_id(&self, node_id: NodeId);\n+}\n+\n pub struct IdVisitor {\n-    visit_callback: @fn(NodeId),\n+    operation: @IdVisitingOperation,\n     pass_through_items: bool,\n     visited_outermost: bool,\n }\n \n impl IdVisitor {\n     fn visit_generics_helper(&self, generics: &Generics) {\n         for type_parameter in generics.ty_params.iter() {\n-            (self.visit_callback)(type_parameter.id)\n+            self.operation.visit_id(type_parameter.id)\n         }\n         for lifetime in generics.lifetimes.iter() {\n-            (self.visit_callback)(lifetime.id)\n+            self.operation.visit_id(lifetime.id)\n         }\n     }\n }\n@@ -430,26 +434,26 @@ impl Visitor<()> for IdVisitor {\n                  _: Span,\n                  node_id: NodeId,\n                  env: ()) {\n-        (self.visit_callback)(node_id);\n+        self.operation.visit_id(node_id);\n         visit::walk_mod(self, module, env)\n     }\n \n     fn visit_view_item(&mut self, view_item: &view_item, env: ()) {\n         match view_item.node {\n             view_item_extern_mod(_, _, _, node_id) => {\n-                (self.visit_callback)(node_id)\n+                self.operation.visit_id(node_id)\n             }\n             view_item_use(ref view_paths) => {\n                 for view_path in view_paths.iter() {\n                     match view_path.node {\n                         view_path_simple(_, _, node_id) |\n                         view_path_glob(_, node_id) => {\n-                            (self.visit_callback)(node_id)\n+                            self.operation.visit_id(node_id)\n                         }\n                         view_path_list(_, ref paths, node_id) => {\n-                            (self.visit_callback)(node_id);\n+                            self.operation.visit_id(node_id);\n                             for path in paths.iter() {\n-                                (self.visit_callback)(path.node.id)\n+                                self.operation.visit_id(path.node.id)\n                             }\n                         }\n                     }\n@@ -460,7 +464,7 @@ impl Visitor<()> for IdVisitor {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: @foreign_item, env: ()) {\n-        (self.visit_callback)(foreign_item.id);\n+        self.operation.visit_id(foreign_item.id);\n         visit::walk_foreign_item(self, foreign_item, env)\n     }\n \n@@ -473,11 +477,11 @@ impl Visitor<()> for IdVisitor {\n             }\n         }\n \n-        (self.visit_callback)(item.id);\n+        self.operation.visit_id(item.id);\n         match item.node {\n             item_enum(ref enum_definition, _) => {\n                 for variant in enum_definition.variants.iter() {\n-                    (self.visit_callback)(variant.node.id)\n+                    self.operation.visit_id(variant.node.id)\n                 }\n             }\n             _ => {}\n@@ -489,22 +493,22 @@ impl Visitor<()> for IdVisitor {\n     }\n \n     fn visit_local(&mut self, local: @Local, env: ()) {\n-        (self.visit_callback)(local.id);\n+        self.operation.visit_id(local.id);\n         visit::walk_local(self, local, env)\n     }\n \n     fn visit_block(&mut self, block: &Block, env: ()) {\n-        (self.visit_callback)(block.id);\n+        self.operation.visit_id(block.id);\n         visit::walk_block(self, block, env)\n     }\n \n     fn visit_stmt(&mut self, statement: @Stmt, env: ()) {\n-        (self.visit_callback)(ast_util::stmt_id(statement));\n+        self.operation.visit_id(ast_util::stmt_id(statement));\n         visit::walk_stmt(self, statement, env)\n     }\n \n     fn visit_pat(&mut self, pattern: @Pat, env: ()) {\n-        (self.visit_callback)(pattern.id);\n+        self.operation.visit_id(pattern.id);\n         visit::walk_pat(self, pattern, env)\n     }\n \n@@ -513,17 +517,17 @@ impl Visitor<()> for IdVisitor {\n         {\n             let optional_callee_id = expression.get_callee_id();\n             for callee_id in optional_callee_id.iter() {\n-                (self.visit_callback)(*callee_id)\n+                self.operation.visit_id(*callee_id)\n             }\n         }\n-        (self.visit_callback)(expression.id);\n+        self.operation.visit_id(expression.id);\n         visit::walk_expr(self, expression, env)\n     }\n \n     fn visit_ty(&mut self, typ: &Ty, env: ()) {\n-        (self.visit_callback)(typ.id);\n+        self.operation.visit_id(typ.id);\n         match typ.node {\n-            ty_path(_, _, id) => (self.visit_callback)(id),\n+            ty_path(_, _, id) => self.operation.visit_id(id),\n             _ => {}\n         }\n         visit::walk_ty(self, typ, env)\n@@ -549,21 +553,21 @@ impl Visitor<()> for IdVisitor {\n             }\n         }\n \n-        (self.visit_callback)(node_id);\n+        self.operation.visit_id(node_id);\n \n         match *function_kind {\n             visit::fk_item_fn(_, generics, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n             visit::fk_method(_, generics, method) => {\n-                (self.visit_callback)(method.self_id);\n+                self.operation.visit_id(method.self_id);\n                 self.visit_generics_helper(generics)\n             }\n             visit::fk_anon(_) | visit::fk_fn_block => {}\n         }\n \n         for argument in function_declaration.inputs.iter() {\n-            (self.visit_callback)(argument.id)\n+            self.operation.visit_id(argument.id)\n         }\n \n         visit::walk_fn(self,\n@@ -583,25 +587,36 @@ impl Visitor<()> for IdVisitor {\n     }\n \n     fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n-        (self.visit_callback)(struct_field.node.id);\n+        self.operation.visit_id(struct_field.node.id);\n         visit::walk_struct_field(self, struct_field, env)\n     }\n }\n \n-pub fn visit_ids_for_inlined_item(item: &inlined_item, vfn: @fn(NodeId)) {\n+pub fn visit_ids_for_inlined_item(item: &inlined_item,\n+                                  operation: @IdVisitingOperation) {\n     let mut id_visitor = IdVisitor {\n-        visit_callback: vfn,\n+        operation: operation,\n         pass_through_items: true,\n         visited_outermost: false,\n     };\n     item.accept((), &mut id_visitor);\n }\n \n-pub fn compute_id_range(visit_ids_fn: &fn(@fn(NodeId))) -> id_range {\n-    let result = @mut id_range::max();\n-    do visit_ids_fn |id| {\n-        result.add(id);\n+struct IdRangeComputingVisitor {\n+    result: @mut id_range,\n+}\n+\n+impl IdVisitingOperation for IdRangeComputingVisitor {\n+    fn visit_id(&self, id: NodeId) {\n+        self.result.add(id)\n     }\n+}\n+\n+pub fn compute_id_range(visit_ids_fn: &fn(@IdVisitingOperation)) -> id_range {\n+    let result = @mut id_range::max();\n+    visit_ids_fn(@IdRangeComputingVisitor {\n+        result: result,\n+    } as @IdVisitingOperation);\n     *result\n }\n "}]}