{"sha": "da09f967469127576d9a87a7c143f754777a4f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDlmOTY3NDY5MTI3NTc2ZDlhODdhN2MxNDNmNzU0Nzc3YTRmNmI=", "commit": {"author": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-05-19T19:49:45Z"}, "committer": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-05-19T19:52:43Z"}, "message": "loop return value inference: add tests", "tree": {"sha": "ebf8cdccb5163bae4a038d2cc36c4c9f0539f6e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf8cdccb5163bae4a038d2cc36c4c9f0539f6e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da09f967469127576d9a87a7c143f754777a4f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da09f967469127576d9a87a7c143f754777a4f6b", "html_url": "https://github.com/rust-lang/rust/commit/da09f967469127576d9a87a7c143f754777a4f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da09f967469127576d9a87a7c143f754777a4f6b/comments", "author": null, "committer": null, "parents": [{"sha": "6e36ad3d910ebec5af5f4f208b0f98c613687c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e36ad3d910ebec5af5f4f208b0f98c613687c41", "html_url": "https://github.com/rust-lang/rust/commit/6e36ad3d910ebec5af5f4f208b0f98c613687c41"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "fd2208af280e8fca4d2891fc00f9bcdb0c4e19fa", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/da09f967469127576d9a87a7c143f754777a4f6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da09f967469127576d9a87a7c143f754777a4f6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=da09f967469127576d9a87a7c143f754777a4f6b", "patch": "@@ -1860,3 +1860,66 @@ fn test() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn infer_loop_break_with_val() {\n+    assert_snapshot!(\n+        infer(r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn test() {\n+    let x = loop {\n+        if false {\n+            break None;\n+        }\n+\n+        break Some(true);\n+    };\n+}\n+\"#),\n+        @r###\"\n+    60..169 '{     ...  }; }': ()\n+    70..71 'x': Option<bool>\n+    74..166 'loop {...     }': Option<bool>\n+    79..166 '{     ...     }': ()\n+    89..133 'if fal...     }': ()\n+    92..97 'false': bool\n+    98..133 '{     ...     }': ()\n+    112..122 'break None': !\n+    118..122 'None': Option<bool>\n+    143..159 'break ...(true)': !\n+    149..153 'Some': Some<bool>(bool) -> Option<bool>\n+    149..159 'Some(true)': Option<bool>\n+    154..158 'true': bool\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_loop_break_without_val() {\n+    assert_snapshot!(\n+        infer(r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn test() {\n+    let x = loop {\n+        if false {\n+            break;\n+        }\n+    };\n+}\n+\"#),\n+        @r###\"\n+    60..137 '{     ...  }; }': ()\n+    70..71 'x': ()\n+    74..134 'loop {...     }': ()\n+    79..134 '{     ...     }': ()\n+    89..128 'if fal...     }': ()\n+    92..97 'false': bool\n+    98..128 '{     ...     }': ()\n+    112..117 'break': !\n+    \"###\n+    );\n+}"}]}