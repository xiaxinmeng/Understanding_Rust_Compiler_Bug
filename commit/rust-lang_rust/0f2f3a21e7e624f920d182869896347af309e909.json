{"sha": "0f2f3a21e7e624f920d182869896347af309e909", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMmYzYTIxZTdlNjI0ZjkyMGQxODI4Njk4OTYzNDdhZjMwOWU5MDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T22:31:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T22:31:32Z"}, "message": "Migrate trait & type to new ids", "tree": {"sha": "8c16d0a479021c2d558a865df94eb01316a208b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c16d0a479021c2d558a865df94eb01316a208b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2f3a21e7e624f920d182869896347af309e909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2f3a21e7e624f920d182869896347af309e909", "html_url": "https://github.com/rust-lang/rust/commit/0f2f3a21e7e624f920d182869896347af309e909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2f3a21e7e624f920d182869896347af309e909/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ba70a0957b8af2813940787238a733298dfa5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ba70a0957b8af2813940787238a733298dfa5f", "html_url": "https://github.com/rust-lang/rust/commit/00ba70a0957b8af2813940787238a733298dfa5f"}], "stats": {"total": 290, "additions": 104, "deletions": 186}, "files": [{"sha": "e2979617daee1965e2ee79bd4fe2a60b3221a365", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -13,10 +13,9 @@ use crate::{\n     ty::{InferenceResult, VariantDef},\n     adt::VariantData,\n     generics::GenericParams,\n-    code_model_impl::def_id_to_ast,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n-    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef, ConstId, StaticId},\n+    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -47,8 +46,6 @@ impl Crate {\n \n #[derive(Debug)]\n pub enum Def {\n-    Trait(Trait),\n-    Type(Type),\n     Item,\n }\n \n@@ -68,6 +65,8 @@ pub enum ModuleDef {\n     EnumVariant(EnumVariant),\n     Const(Const),\n     Static(Static),\n+    Trait(Trait),\n+    Type(Type),\n     // Can't be directly declared, but can be imported.\n     Def(DefId),\n }\n@@ -78,7 +77,9 @@ impl_froms!(\n     Enum,\n     EnumVariant,\n     Const,\n-    Static\n+    Static,\n+    Trait,\n+    Type\n );\n \n impl From<DefId> for ModuleDef {\n@@ -428,22 +429,18 @@ impl Docs for Static {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Trait {\n-    pub(crate) def_id: DefId,\n+    pub(crate) id: TraitId,\n }\n \n impl Trait {\n-    pub(crate) fn new(def_id: DefId) -> Trait {\n-        Trait { def_id }\n-    }\n-\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n-        def_id_to_ast(db, self.def_id)\n+        self.id.source(db)\n     }\n \n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n-        db.generic_params(self.def_id.into())\n+        db.generic_params((*self).into())\n     }\n }\n \n@@ -453,22 +450,18 @@ impl Docs for Trait {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Type {\n-    pub(crate) def_id: DefId,\n+    pub(crate) id: TypeId,\n }\n \n impl Type {\n-    pub(crate) fn new(def_id: DefId) -> Type {\n-        Type { def_id }\n-    }\n-\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::TypeDef>) {\n-        def_id_to_ast(db, self.def_id)\n+        self.id.source(db)\n     }\n \n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n-        db.generic_params(self.def_id.into())\n+        db.generic_params((*self).into())\n     }\n }\n "}, {"sha": "1f28fab74825986055d337f546d1daa7daa78568", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -1,18 +1,3 @@\n mod krate; // `crate` is invalid ident :(\n mod module;\n pub(crate) mod function;\n-\n-use ra_syntax::{AstNode, TreeArc};\n-\n-use crate::{HirDatabase, DefId, HirFileId};\n-\n-pub(crate) fn def_id_to_ast<N: AstNode>(\n-    db: &impl HirDatabase,\n-    def_id: DefId,\n-) -> (HirFileId, TreeArc<N>) {\n-    let (file_id, syntax) = def_id.source(db);\n-    let ast = N::cast(&syntax)\n-        .unwrap_or_else(|| panic!(\"def points to wrong source {:?} {:?}\", def_id, syntax))\n-        .to_owned();\n-    (file_id, ast)\n-}"}, {"sha": "6419d3934cd2ce4ced80a908622868a1556c2e0e", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -147,17 +147,12 @@ impl Module {\n                         None => PerNs::none(),\n                     }\n                 }\n-                ModuleDef::Function(_)\n-                | ModuleDef::Struct(_)\n-                | ModuleDef::Const(_)\n-                | ModuleDef::Static(_)\n-                | ModuleDef::EnumVariant(_) => {\n+                _ => {\n                     // could be an inherent method call in UFCS form\n                     // (`Struct::method`), or some other kind of associated\n                     // item... Which we currently don't handle (TODO)\n                     PerNs::none()\n                 }\n-                ModuleDef::Def(_) => PerNs::none(),\n             };\n         }\n         curr_per_ns"}, {"sha": "64c20a462229342f7f678799cea13ad9b5b0c711", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -5,9 +5,9 @@\n \n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeParamsOwner};\n \n-use crate::{db::HirDatabase, DefId, Name, AsName, Function, Struct, Enum};\n+use crate::{db::HirDatabase, Name, AsName, Function, Struct, Enum, Trait, Type};\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -27,15 +27,10 @@ pub enum GenericDef {\n     Function(Function),\n     Struct(Struct),\n     Enum(Enum),\n-    Def(DefId),\n-}\n-impl_froms!(GenericDef: Function, Struct, Enum);\n-\n-impl From<DefId> for GenericDef {\n-    fn from(def_id: DefId) -> GenericDef {\n-        GenericDef::Def(def_id)\n-    }\n+    Trait(Trait),\n+    Type(Type),\n }\n+impl_froms!(GenericDef: Function, Struct, Enum, Trait, Type);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -47,12 +42,8 @@ impl GenericParams {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).1),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).1),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::Def(def_id) => {\n-                let (_file_id, node) = def_id.source(db);\n-                if let Some(type_param_list) = node.children().find_map(ast::TypeParamList::cast) {\n-                    generics.fill_params(type_param_list)\n-                }\n-            }\n+            GenericDef::Trait(it) => generics.fill(&*it.source(db).1),\n+            GenericDef::Type(it) => generics.fill(&*it.source(db).1),\n         }\n \n         Arc::new(generics)"}, {"sha": "311c0b98a0aa80c29f3250795b3da08c024b356c", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -9,7 +9,7 @@ use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n     HirDatabase, Def,\n-    Module, Trait, Type,\n+    Module,\n };\n \n #[derive(Debug, Default)]\n@@ -22,6 +22,8 @@ pub struct HirInterner {\n     enum_variants: LocationIntener<ItemLoc<ast::EnumVariant>, EnumVariantId>,\n     consts: LocationIntener<ItemLoc<ast::ConstDef>, ConstId>,\n     statics: LocationIntener<ItemLoc<ast::StaticDef>, StaticId>,\n+    traits: LocationIntener<ItemLoc<ast::TraitDef>, TraitId>,\n+    types: LocationIntener<ItemLoc<ast::TypeDef>, TypeId>,\n }\n \n impl HirInterner {\n@@ -279,6 +281,24 @@ impl AstItemDef<ast::StaticDef> for StaticId {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TraitId(RawId);\n+impl_arena_id!(TraitId);\n+impl AstItemDef<ast::TraitDef> for TraitId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::TraitDef>, Self> {\n+        &interner.traits\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeId(RawId);\n+impl_arena_id!(TypeId);\n+impl AstItemDef<ast::TypeDef> for TypeId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::TypeDef>, Self> {\n+        &interner.types\n+    }\n+}\n+\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -294,8 +314,6 @@ pub struct DefLoc {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum DefKind {\n-    Trait,\n-    Type,\n     Item,\n     // /// The constructor of a struct. E.g. if we have `struct Foo(usize)`, the\n     // /// name `Foo` needs to resolve to different types depending on whether we\n@@ -317,23 +335,9 @@ impl DefId {\n     pub fn resolve(self, db: &impl HirDatabase) -> Def {\n         let loc = self.loc(db);\n         match loc.kind {\n-            DefKind::Trait => {\n-                let def = Trait::new(self);\n-                Def::Trait(def)\n-            }\n-            DefKind::Type => {\n-                let def = Type::new(self);\n-                Def::Type(def)\n-            }\n             DefKind::Item => Def::Item,\n         }\n     }\n-\n-    pub(crate) fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<SyntaxNode>) {\n-        let loc = self.loc(db);\n-        let syntax = db.file_item(loc.source_item_id);\n-        (loc.source_item_id.file_id, syntax)\n-    }\n }\n \n impl DefLoc {"}, {"sha": "b4fe99ea7085340b29519ec748cd7338eee8537f", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 21, "deletions": 64, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -1,16 +1,16 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n-    SyntaxKind, AstNode, SourceFile, TreeArc, AstPtr,\n+    AstNode, SourceFile, TreeArc, AstPtr,\n     ast::{self, ModuleItemOwner, NameOwner},\n };\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    SourceItemId, Path, ModuleSource, HirDatabase, Name, SourceFileItems,\n-    HirFileId, MacroCallLoc, AsName, PerNs, DefKind, DefLoc, Function,\n-    ModuleDef, Module, Struct, Enum, Const, Static,\n+    SourceItemId, Path, ModuleSource, HirDatabase, Name,\n+    HirFileId, MacroCallLoc, AsName, PerNs, Function,\n+    ModuleDef, Module, Struct, Enum, Const, Static, Trait, Type,\n     ids::LocationCtx,\n };\n \n@@ -115,7 +115,7 @@ impl LoweredModule {\n         for item in items {\n             match item {\n                 ast::ItemOrMacro::Item(it) => {\n-                    self.add_def_id(source_map, db, module, file_id, &file_items, it);\n+                    self.add_def_id(source_map, db, module, file_id, it);\n                 }\n                 ast::ItemOrMacro::Macro(macro_call) => {\n                     let item_id = file_items.id_of_unchecked(macro_call.syntax());\n@@ -128,10 +128,9 @@ impl LoweredModule {\n                     };\n                     let id = loc.id(db);\n                     let file_id = HirFileId::from(id);\n-                    let file_items = db.file_items(file_id);\n                     //FIXME: expand recursively\n                     for item in db.hir_source_file(file_id).items() {\n-                        self.add_def_id(source_map, db, module, file_id, &file_items, item);\n+                        self.add_def_id(source_map, db, module, file_id, item);\n                     }\n                 }\n             }\n@@ -144,74 +143,72 @@ impl LoweredModule {\n         db: &impl HirDatabase,\n         module: Module,\n         file_id: HirFileId,\n-        file_items: &SourceFileItems,\n         item: &ast::ModuleItem,\n     ) {\n         let ctx = LocationCtx::new(db, module, file_id);\n-        let name = match item.kind() {\n+        match item.kind() {\n             ast::ModuleItemKind::StructDef(it) => {\n                 if let Some(name) = it.name() {\n                     let s = Struct { id: ctx.to_def(it) };\n                     let s: ModuleDef = s.into();\n                     self.declarations.insert(name.as_name(), PerNs::both(s, s));\n                 }\n-                return;\n             }\n             ast::ModuleItemKind::EnumDef(it) => {\n                 if let Some(name) = it.name() {\n                     let e = Enum { id: ctx.to_def(it) };\n                     let e: ModuleDef = e.into();\n                     self.declarations.insert(name.as_name(), PerNs::types(e));\n                 }\n-                return;\n             }\n             ast::ModuleItemKind::FnDef(it) => {\n                 if let Some(name) = it.name() {\n                     let func = Function { id: ctx.to_def(it) };\n                     self.declarations\n                         .insert(name.as_name(), PerNs::values(func.into()));\n                 }\n-                return;\n             }\n-            ast::ModuleItemKind::TraitDef(it) => it.name(),\n-            ast::ModuleItemKind::TypeDef(it) => it.name(),\n+            ast::ModuleItemKind::TraitDef(it) => {\n+                if let Some(name) = it.name() {\n+                    let t = Trait { id: ctx.to_def(it) };\n+                    self.declarations\n+                        .insert(name.as_name(), PerNs::types(t.into()));\n+                }\n+            }\n+            ast::ModuleItemKind::TypeDef(it) => {\n+                if let Some(name) = it.name() {\n+                    let t = Type { id: ctx.to_def(it) };\n+                    self.declarations\n+                        .insert(name.as_name(), PerNs::types(t.into()));\n+                }\n+            }\n             ast::ModuleItemKind::ImplBlock(_) => {\n                 // impls don't define items\n-                return;\n             }\n             ast::ModuleItemKind::UseItem(it) => {\n                 self.add_use_item(source_map, it);\n-                return;\n             }\n             ast::ModuleItemKind::ExternCrateItem(_) => {\n                 // TODO\n-                return;\n             }\n             ast::ModuleItemKind::ConstDef(it) => {\n                 if let Some(name) = it.name() {\n                     let c = Const { id: ctx.to_def(it) };\n                     self.declarations\n                         .insert(name.as_name(), PerNs::values(c.into()));\n                 }\n-                return;\n             }\n             ast::ModuleItemKind::StaticDef(it) => {\n                 if let Some(name) = it.name() {\n                     let s = Static { id: ctx.to_def(it) };\n                     self.declarations\n                         .insert(name.as_name(), PerNs::values(s.into()));\n                 }\n-                return;\n             }\n             ast::ModuleItemKind::Module(_) => {\n                 // modules are handled separately direclty by nameres\n-                return;\n             }\n         };\n-        if let Some(name) = name {\n-            let def_id = assign_def_id(db, module, file_id, file_items, item);\n-            self.declarations.insert(name.as_name(), def_id);\n-        }\n     }\n \n     fn add_use_item(&mut self, source_map: &mut ImportSourceMap, item: &ast::UseItem) {\n@@ -226,43 +223,3 @@ impl LoweredModule {\n         })\n     }\n }\n-\n-fn assign_def_id(\n-    db: &impl HirDatabase,\n-    module: Module,\n-    file_id: HirFileId,\n-    file_items: &SourceFileItems,\n-    item: &ast::ModuleItem,\n-) -> PerNs<ModuleDef> {\n-    // depending on the item kind, the location can define something in\n-    // the values namespace, the types namespace, or both\n-    let kind = DefKind::for_syntax_kind(item.syntax().kind());\n-    let def_id = kind.map(|k| {\n-        let item_id = file_items.id_of_unchecked(item.syntax());\n-        let def_loc = DefLoc {\n-            kind: k,\n-            module,\n-            source_item_id: SourceItemId {\n-                file_id,\n-                item_id: Some(item_id),\n-            },\n-        };\n-        def_loc.id(db).into()\n-    });\n-    def_id\n-}\n-\n-impl DefKind {\n-    fn for_syntax_kind(kind: SyntaxKind) -> PerNs<DefKind> {\n-        match kind {\n-            SyntaxKind::FN_DEF => unreachable!(),\n-            SyntaxKind::STRUCT_DEF => unreachable!(),\n-            SyntaxKind::ENUM_DEF => unreachable!(),\n-            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n-            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n-            SyntaxKind::CONST_DEF => unreachable!(),\n-            SyntaxKind::STATIC_DEF => unreachable!(),\n-            _ => PerNs::none(),\n-        }\n-    }\n-}"}, {"sha": "dbe040805e8cee5bb3430d58c2e9d51c53985f66", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -145,10 +145,10 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n         .iter()\n         .filter_map(|(_, it)| it.clone().take_types())\n         .filter_map(|it| match it {\n-            ModuleDef::Def(it) => Some(it),\n+            ModuleDef::Trait(it) => Some(it),\n             _ => None,\n         })\n-        .filter_map(|it| it.loc(db).source_item_id.file_id.as_macro_call_id())\n+        .filter_map(|it| it.source(db).0.as_macro_call_id())\n     {\n         if let Some(exp) = db.expand_macro_invocation(macro_call_id) {\n             let loc = macro_call_id.loc(db);"}, {"sha": "3801e498e0fe6c6d3427cdd40754a414199f43b2", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -696,7 +696,9 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::Const(_)\n             | ModuleDef::Static(_)\n             | ModuleDef::Def(_)\n-            | ModuleDef::Module(_) => return None,\n+            | ModuleDef::Module(_)\n+            | ModuleDef::Trait(_)\n+            | ModuleDef::Type(_) => return None,\n         };\n         Some(res)\n     }"}, {"sha": "e72586e2e5426821ef2e3f7a8bf2ade5221b49ce", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -40,12 +40,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                     .add_to(acc)\n                 });\n         }\n-        hir::ModuleDef::Function(_)\n-        | hir::ModuleDef::Struct(_)\n-        | hir::ModuleDef::Def(_)\n-        | hir::ModuleDef::Const(_)\n-        | hir::ModuleDef::Static(_)\n-        | hir::ModuleDef::EnumVariant(_) => return,\n+        _ => return,\n     };\n }\n "}, {"sha": "4e679281c52756c616a063f6ce8e1f3c9ea3f0a6", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -225,11 +225,9 @@ impl Builder {\n             hir::ModuleDef::EnumVariant(it) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n             hir::ModuleDef::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),\n             hir::ModuleDef::Static(it) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            hir::ModuleDef::Def(def_id) => match def_id.resolve(ctx.db) {\n-                hir::Def::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-                hir::Def::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-                _ => return self,\n-            },\n+            hir::ModuleDef::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n+            hir::ModuleDef::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            hir::ModuleDef::Def(_) => return self,\n         };\n         self.kind = Some(kind);\n         self.documentation = docs;"}, {"sha": "2e11d2de3aa958ea35805bb154ba16f025706b89", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     SyntaxNode, AstNode, SmolStr, TextRange, ast,\n     SyntaxKind::{self, NAME},\n };\n-use hir::{Def, ModuleSource};\n+use hir::{ModuleSource};\n \n use crate::{FileSymbol, db::RootDatabase};\n \n@@ -106,63 +106,60 @@ impl NavigationTarget {\n         db: &RootDatabase,\n         module_def: hir::ModuleDef,\n     ) -> Option<NavigationTarget> {\n-        let def = match module_def {\n-            hir::ModuleDef::Def(def_id) => def_id.resolve(db),\n-            hir::ModuleDef::Module(module) => {\n-                return Some(NavigationTarget::from_module(db, module));\n-            }\n-            hir::ModuleDef::Function(func) => {\n-                return Some(NavigationTarget::from_function(db, func));\n-            }\n+        match module_def {\n+            hir::ModuleDef::Def(_) => return None,\n+            hir::ModuleDef::Module(module) => Some(NavigationTarget::from_module(db, module)),\n+            hir::ModuleDef::Function(func) => Some(NavigationTarget::from_function(db, func)),\n             hir::ModuleDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                return Some(NavigationTarget::from_named(\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n                     &*node,\n-                ));\n+                ))\n             }\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n-                return Some(NavigationTarget::from_named(\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n                     &*node,\n-                ));\n+                ))\n             }\n             hir::ModuleDef::Static(s) => {\n                 let (file_id, node) = s.source(db);\n-                return Some(NavigationTarget::from_named(\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n                     &*node,\n-                ));\n+                ))\n             }\n             hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n-                return Some(NavigationTarget::from_named(\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n                     &*node,\n-                ));\n+                ))\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n                 let (file_id, node) = var.source(db);\n-                return Some(NavigationTarget::from_named(\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n                     &*node,\n-                ));\n+                ))\n             }\n-        };\n-\n-        let res = match def {\n-            Def::Trait(f) => {\n-                let (file_id, node) = f.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            hir::ModuleDef::Trait(e) => {\n+                let (file_id, node) = e.source(db);\n+                Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ))\n             }\n-            Def::Type(f) => {\n-                let (file_id, node) = f.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            hir::ModuleDef::Type(e) => {\n+                let (file_id, node) = e.source(db);\n+                Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ))\n             }\n-            Def::Item => return None,\n-        };\n-        Some(res)\n+        }\n     }\n \n     #[cfg(test)]"}, {"sha": "a207f8429f39329757cd82c2fe8426c18881c02a", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -3229,6 +3229,7 @@ impl ast::VisibilityOwner for TraitDef {}\n impl ast::NameOwner for TraitDef {}\n impl ast::AttrsOwner for TraitDef {}\n impl ast::DocCommentsOwner for TraitDef {}\n+impl ast::TypeParamsOwner for TraitDef {}\n impl TraitDef {}\n \n // TrueKw"}, {"sha": "dedefea591dd05099bdeb9cf264d4cb40037852d", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f3a21e7e624f920d182869896347af309e909/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=0f2f3a21e7e624f920d182869896347af309e909", "patch": "@@ -280,7 +280,7 @@ Grammar(\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n         \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n         \"EnumVariant\": ( traits: [\"NameOwner\", \"DocCommentsOwner\"], options: [\"Expr\"] ),\n-        \"TraitDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"] ),\n+        \"TraitDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeParamsOwner\"] ),\n         \"Module\": (\n             traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],\n             options: [ \"ItemList\" ]\n@@ -489,7 +489,7 @@ Grammar(\n         ),\n \n         \"RefPat\": ( options: [ \"Pat\" ]),\n-        \"BindPat\": ( \n+        \"BindPat\": (\n             options: [ \"Pat\" ],\n             traits: [\"NameOwner\"]\n         ),"}]}