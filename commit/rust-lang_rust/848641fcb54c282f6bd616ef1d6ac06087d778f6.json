{"sha": "848641fcb54c282f6bd616ef1d6ac06087d778f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODY0MWZjYjU0YzI4MmY2YmQ2MTZlZjFkNmFjMDYwODdkNzc4ZjY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-26T00:18:25Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-26T22:51:22Z"}, "message": "core: Move mkdir_recursive from rustpkg into core::os\n\nmkdir_recursive creates a directory as well as any of its\nparent directories that don't exist already. Seems like a useful\nthing to have in core.", "tree": {"sha": "964d82b3abb16662ffb56f8e43c995999d4ed6b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/964d82b3abb16662ffb56f8e43c995999d4ed6b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848641fcb54c282f6bd616ef1d6ac06087d778f6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848641fcb54c282f6bd616ef1d6ac06087d778f6", "html_url": "https://github.com/rust-lang/rust/commit/848641fcb54c282f6bd616ef1d6ac06087d778f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848641fcb54c282f6bd616ef1d6ac06087d778f6/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64412eca10399d64d25346d5f8220c1b1f88cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/64412eca10399d64d25346d5f8220c1b1f88cd29", "html_url": "https://github.com/rust-lang/rust/commit/64412eca10399d64d25346d5f8220c1b1f88cd29"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "b81209d35cf1d1509677048abcfc89d2520a714a", "filename": "src/libcore/os.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/848641fcb54c282f6bd616ef1d6ac06087d778f6/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848641fcb54c282f6bd616ef1d6ac06087d778f6/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=848641fcb54c282f6bd616ef1d6ac06087d778f6", "patch": "@@ -639,6 +639,27 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n     }\n }\n \n+/// Creates a directory with a given mode.\n+/// Returns true iff creation\n+/// succeeded. Also creates all intermediate subdirectories\n+/// if they don't already exist, giving all of them the same mode.\n+pub fn mkdir_recursive(p: &Path, mode: c_int) -> bool {\n+    if path_is_dir(p) {\n+        return true;\n+    }\n+    let parent = p.dir_path();\n+    debug!(\"mkdir_recursive: parent = %s\",\n+           parent.to_str());\n+    if parent.to_str() == ~\".\"\n+        || parent.to_str() == ~\"/\" { // !!!\n+        // No parent directories to create\n+        path_is_dir(&parent) && make_dir(p, mode)\n+    }\n+    else {\n+        mkdir_recursive(&parent, mode) && make_dir(p, mode)\n+    }\n+}\n+\n /// Lists the contents of a directory\n #[allow(non_implicitly_copyable_typarams)]\n pub fn list_dir(p: &Path) -> ~[~str] {\n@@ -1467,4 +1488,18 @@ mod tests {\n           assert!((remove_file(&out)));\n         }\n     }\n+\n+    #[test]\n+    fn recursive_mkdir_ok() {\n+        use libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+\n+        let root = os::tmpdir();\n+        let path = \"xy/z/zy\";\n+        let nested = root.push(path);\n+        assert!(os::mkdir_recursive(&nested,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        assert!(os::path_is_dir(&root.push(\"xy\")));\n+        assert!(os::path_is_dir(&root.push(\"xy/z\")));\n+        assert!(os::path_is_dir(&nested));\n+    }\n+\n }"}, {"sha": "0ebc33cf5bc3e8a979a44d5e3f903900539b322c", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/848641fcb54c282f6bd616ef1d6ac06087d778f6/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848641fcb54c282f6bd616ef1d6ac06087d778f6/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=848641fcb54c282f6bd616ef1d6ac06087d778f6", "patch": "@@ -14,6 +14,7 @@ use core::path::*;\n use core::{os, str};\n use core::option::*;\n use util::PkgId;\n+use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n \n #[deriving(Eq)]\n pub enum OutputType { Main, Lib, Bench, Test }\n@@ -25,34 +26,15 @@ pub fn rust_path() -> ~[Path] {\n     ~[Path(\".\")]\n }\n \n+static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n+\n /// Creates a directory that is readable, writeable,\n /// and executable by the user. Returns true iff creation\n /// succeeded.\n pub fn make_dir_rwx(p: &Path) -> bool {\n     use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n \n-    os::make_dir(p, (S_IRUSR | S_IWUSR | S_IXUSR) as i32)\n-}\n-\n-/// Creates a directory that is readable, writeable,\n-/// and executable by the user. Returns true iff creation\n-/// succeeded. Also creates all intermediate subdirectories\n-/// if they don't already exist.\n-pub fn mkdir_recursive(p: &Path) -> bool {\n-    if os::path_is_dir(p) {\n-        return true;\n-    }\n-    let parent = p.dir_path();\n-    debug!(\"mkdir_recursive: parent = %s\",\n-           parent.to_str());\n-    if parent.to_str() == ~\".\"\n-        || parent.to_str() == ~\"/\" { // !!!\n-        // No parent directories to create\n-        os::path_is_dir(&parent) && make_dir_rwx(p)\n-    }\n-    else {\n-        mkdir_recursive(&parent) && make_dir_rwx(p)\n-    }\n+    os::make_dir(p, u_rwx)\n }\n \n /// Replace all occurrences of '-' in the stem part of path with '_'\n@@ -130,7 +112,7 @@ pub fn build_pkg_id_in_workspace(pkgid: PkgId, workspace: &Path) -> Path {\n     // n.b. Should actually use a target-specific\n     // subdirectory of build/\n     result = result.push(normalize(~pkgid.path).to_str());\n-    if os::path_exists(&result) || mkdir_recursive(&result) {\n+    if os::path_exists(&result) || os::mkdir_recursive(&result, u_rwx) {\n         result\n     }\n     else {\n@@ -148,19 +130,3 @@ pub fn mk_output_path(what: OutputType, short_name: ~str, dir: Path) -> Path {\n                            os::EXE_SUFFIX))\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use core::os;\n-\n-    #[test]\n-    fn recursive_mkdir_ok() {\n-        let root = os::tmpdir();\n-        let path = \"xy/z/zy\";\n-        let nested = root.push(path);\n-        assert!(super::mkdir_recursive(&nested));\n-        assert!(os::path_is_dir(&root.push(\"xy\")));\n-        assert!(os::path_is_dir(&root.push(\"xy/z\")));\n-        assert!(os::path_is_dir(&nested));\n-    }\n-}"}]}