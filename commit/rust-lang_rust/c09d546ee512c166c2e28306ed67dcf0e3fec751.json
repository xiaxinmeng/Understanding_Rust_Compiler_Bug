{"sha": "c09d546ee512c166c2e28306ed67dcf0e3fec751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWQ1NDZlZTUxMmMxNjZjMmUyODMwNmVkNjdkY2YwZTNmZWM3NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-10T04:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-10T04:29:26Z"}, "message": "Auto merge of #34046 - Vtec234:fix-atomic-doc, r=steveklabnik\n\nFix wrong statement in compare_exchange doc\n\nThe documentation for `core::sync::atomic::AtomicSomething::compare_exchange` contains a wrong, or imprecise, statement about the return value. It goes:\n\nThe return value is a result indicating whether the new value was written and containing\nthe previous value. On success this value is guaranteed to be equal to `new`.\n\nIn the second sentence, `this value` is gramatically understood as referring to `return value` from the first sentence. Due to how CAS works, the returned value is always what was in the atomic variable _before_ the operation occurred, not what was written into it during the operation. Hence, the fixed doc should say:\n\nThe return value is a result indicating whether the new value was written and containing\nthe previous value. On success this value is guaranteed to be equal to `current`.\n\nThis version is confirmed by the runnable examples in variants of `AtomicSomething`, e.g.\n\n    assert_eq!(some_bool.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed),\n    Ok(true));\n\nwhere the returned value is `Ok(current)`. This PR fixes all occurrences of this bug I could find.\n\nAn alternative solution would be to modify the second sentence so that it refers to the value _written_ into the Atomic rather than what was there before, in which case it would be correct. Example alternative formulation:\n\nOn success the value written into the `bool`/`usize`/`whatever` is guaranteed to be equal to `new`.\n\nr? @steveklabnik", "tree": {"sha": "a91b9ea3ca88414c8123cd1cbb6cef9121d44c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91b9ea3ca88414c8123cd1cbb6cef9121d44c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09d546ee512c166c2e28306ed67dcf0e3fec751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d546ee512c166c2e28306ed67dcf0e3fec751", "html_url": "https://github.com/rust-lang/rust/commit/c09d546ee512c166c2e28306ed67dcf0e3fec751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09d546ee512c166c2e28306ed67dcf0e3fec751/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2798772b51e58ff825a226bbf30bf8bb9fe69a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/2798772b51e58ff825a226bbf30bf8bb9fe69a33", "html_url": "https://github.com/rust-lang/rust/commit/2798772b51e58ff825a226bbf30bf8bb9fe69a33"}, {"sha": "8841f26e94705490b19f15479e86b3986549f8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8841f26e94705490b19f15479e86b3986549f8bb", "html_url": "https://github.com/rust-lang/rust/commit/8841f26e94705490b19f15479e86b3986549f8bb"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "47d9deb62ff6556501c8588981dc621b4282ca1f", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09d546ee512c166c2e28306ed67dcf0e3fec751/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d546ee512c166c2e28306ed67dcf0e3fec751/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=c09d546ee512c166c2e28306ed67dcf0e3fec751", "patch": "@@ -289,7 +289,7 @@ impl AtomicBool {\n     /// Stores a value into the `bool` if the current value is the same as the `current` value.\n     ///\n     /// The return value is a result indicating whether the new value was written and containing\n-    /// the previous value. On success this value is guaranteed to be equal to `new`.\n+    /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n@@ -633,7 +633,7 @@ impl<T> AtomicPtr<T> {\n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n     ///\n     /// The return value is a result indicating whether the new value was written and containing\n-    /// the previous value. On success this value is guaranteed to be equal to `new`.\n+    /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n@@ -886,7 +886,7 @@ macro_rules! atomic_int {\n             ///\n             /// The return value is a result indicating whether the new value was written and\n             /// containing the previous value. On success this value is guaranteed to be equal to\n-            /// `new`.\n+            /// `current`.\n             ///\n             /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of\n             /// this operation. The first describes the required ordering if the operation succeeds"}]}