{"sha": "60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "node_id": "C_kwDOAAsO6NoAKDYwYjljNWQxYTk4ZmJlYjgyYjhjMjI5MjAyNzA3YTdjNTlhNDUyNmQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:43Z"}, "message": "Rollup merge of #88871 - FabianWolff:issue-88403, r=jackh726\n\nFix suggestion for nested struct patterns\n\nFixes #88403, and also a similar problem where the unused binding is in a function parameter pattern.", "tree": {"sha": "b99ffcb1bbd1083259d4005925761dab1e3588ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99ffcb1bbd1083259d4005925761dab1e3588ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0LCRBK7hj4Ov3rIwAALIwIAFtD3ps+RfIPXm59AqVyoEQM\nO0bjSXQBwaa5fJihhKo5uBOSJ9hiydfF5acTw3gcqOG8I3IfuRrS2TmcHJICaeip\nESYuT9sY3iyW2Q0ZaE38fpxsGwVwLs0HKsFuAekud0eN+hwouwV7zfE5dPk7Xjdt\nIN5JwAc+cIRI1QavHwuo+kjKfgK98qOUaNHLbnT70JmrZq5fyy1Q354KBDRkcVUM\nfqskX2rWhcQIfrNMH5BuFcHPBkHYafu5+aBCUQppojNGdtH2P3ykGtlYEgntlIt+\nAYhNKPhvBitYzLR1ZfVSKk/X3m6BxAf4v2uPPl20h6oKrfR1OQMuSpojp+HBI/k=\n=7YMd\n-----END PGP SIGNATURE-----\n", "payload": "tree b99ffcb1bbd1083259d4005925761dab1e3588ee\nparent eb860987cf0b08153a09f2b0a03e94699e85bff7\nparent 2bff77d255b9960489459157900a95a6e5a8279f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463563 -0700\ncommitter GitHub <noreply@github.com> 1633463563 -0700\n\nRollup merge of #88871 - FabianWolff:issue-88403, r=jackh726\n\nFix suggestion for nested struct patterns\n\nFixes #88403, and also a similar problem where the unused binding is in a function parameter pattern.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "html_url": "https://github.com/rust-lang/rust/commit/60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb860987cf0b08153a09f2b0a03e94699e85bff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb860987cf0b08153a09f2b0a03e94699e85bff7", "html_url": "https://github.com/rust-lang/rust/commit/eb860987cf0b08153a09f2b0a03e94699e85bff7"}, {"sha": "2bff77d255b9960489459157900a95a6e5a8279f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bff77d255b9960489459157900a95a6e5a8279f", "html_url": "https://github.com/rust-lang/rust/commit/2bff77d255b9960489459157900a95a6e5a8279f"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "3d7a215754acaf63e0aaed41c3deda44cc715744", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "patch": "@@ -265,21 +265,24 @@ impl IrMaps<'tcx> {\n         self.capture_info_map.insert(hir_id, Rc::new(cs));\n     }\n \n-    fn add_from_pat(&mut self, pat: &hir::Pat<'tcx>) {\n+    fn collect_shorthand_field_ids(&self, pat: &hir::Pat<'tcx>) -> HirIdSet {\n         // For struct patterns, take note of which fields used shorthand\n         // (`x` rather than `x: x`).\n         let mut shorthand_field_ids = HirIdSet::default();\n         let mut pats = VecDeque::new();\n         pats.push_back(pat);\n+\n         while let Some(pat) = pats.pop_front() {\n             use rustc_hir::PatKind::*;\n             match &pat.kind {\n                 Binding(.., inner_pat) => {\n                     pats.extend(inner_pat.iter());\n                 }\n                 Struct(_, fields, _) => {\n-                    let ids = fields.iter().filter(|f| f.is_shorthand).map(|f| f.pat.hir_id);\n-                    shorthand_field_ids.extend(ids);\n+                    let (short, not_short): (Vec<&_>, Vec<&_>) =\n+                        fields.iter().partition(|f| f.is_shorthand);\n+                    shorthand_field_ids.extend(short.iter().map(|f| f.pat.hir_id));\n+                    pats.extend(not_short.iter().map(|f| f.pat));\n                 }\n                 Ref(inner_pat, _) | Box(inner_pat) => {\n                     pats.push_back(inner_pat);\n@@ -296,6 +299,12 @@ impl IrMaps<'tcx> {\n             }\n         }\n \n+        return shorthand_field_ids;\n+    }\n+\n+    fn add_from_pat(&mut self, pat: &hir::Pat<'tcx>) {\n+        let shorthand_field_ids = self.collect_shorthand_field_ids(pat);\n+\n         pat.each_binding(|_, hir_id, _, ident| {\n             self.add_live_node_for_node(hir_id, VarDefNode(ident.span, hir_id));\n             self.add_variable(Local(LocalInfo {\n@@ -373,15 +382,13 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        let shorthand_field_ids = self.collect_shorthand_field_ids(param.pat);\n         param.pat.each_binding(|_bm, hir_id, _x, ident| {\n             let var = match param.pat.kind {\n-                rustc_hir::PatKind::Struct(_, fields, _) => Local(LocalInfo {\n+                rustc_hir::PatKind::Struct(..) => Local(LocalInfo {\n                     id: hir_id,\n                     name: ident.name,\n-                    is_shorthand: fields\n-                        .iter()\n-                        .find(|f| f.ident == ident)\n-                        .map_or(false, |f| f.is_shorthand),\n+                    is_shorthand: shorthand_field_ids.contains(&hir_id),\n                 }),\n                 _ => Param(hir_id, ident.name),\n             };"}, {"sha": "1dc44838e8bb0d76c2e151bc7d4fa6e2eb9dfcfb", "filename": "src/test/ui/suggestions/ignore-nested-field-binding.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.fixed?ref=60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #88403, where prefixing with an underscore was\n+// erroneously suggested for a nested shorthand struct field binding.\n+\n+// run-rustfix\n+#![allow(unused)]\n+#![forbid(unused_variables)]\n+\n+struct Inner { i: i32 }\n+struct Outer { o: Inner }\n+\n+fn foo(Outer { o: Inner { i: _ } }: Outer) {}\n+//~^ ERROR: unused variable: `i`\n+//~| HELP: try ignoring the field\n+\n+fn main() {\n+    let s = Outer { o: Inner { i: 42 } };\n+    let Outer { o: Inner { i: _ } } = s;\n+    //~^ ERROR: unused variable: `i`\n+    //~| HELP: try ignoring the field\n+}"}, {"sha": "6dc0263ec9f2bac02a308585c9c444618ebbe21b", "filename": "src/test/ui/suggestions/ignore-nested-field-binding.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.rs?ref=60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #88403, where prefixing with an underscore was\n+// erroneously suggested for a nested shorthand struct field binding.\n+\n+// run-rustfix\n+#![allow(unused)]\n+#![forbid(unused_variables)]\n+\n+struct Inner { i: i32 }\n+struct Outer { o: Inner }\n+\n+fn foo(Outer { o: Inner { i } }: Outer) {}\n+//~^ ERROR: unused variable: `i`\n+//~| HELP: try ignoring the field\n+\n+fn main() {\n+    let s = Outer { o: Inner { i: 42 } };\n+    let Outer { o: Inner { i } } = s;\n+    //~^ ERROR: unused variable: `i`\n+    //~| HELP: try ignoring the field\n+}"}, {"sha": "b2936a22a22f1a9970d329a78ed3b752aa2142c2", "filename": "src/test/ui/suggestions/ignore-nested-field-binding.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60b9c5d1a98fbeb82b8c229202707a7c59a4526d/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fignore-nested-field-binding.stderr?ref=60b9c5d1a98fbeb82b8c229202707a7c59a4526d", "patch": "@@ -0,0 +1,20 @@\n+error: unused variable: `i`\n+  --> $DIR/ignore-nested-field-binding.rs:11:27\n+   |\n+LL | fn foo(Outer { o: Inner { i } }: Outer) {}\n+   |                           ^ help: try ignoring the field: `i: _`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ignore-nested-field-binding.rs:6:11\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error: unused variable: `i`\n+  --> $DIR/ignore-nested-field-binding.rs:17:28\n+   |\n+LL |     let Outer { o: Inner { i } } = s;\n+   |                            ^ help: try ignoring the field: `i: _`\n+\n+error: aborting due to 2 previous errors\n+"}]}