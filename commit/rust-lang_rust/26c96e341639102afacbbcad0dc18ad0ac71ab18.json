{"sha": "26c96e341639102afacbbcad0dc18ad0ac71ab18", "node_id": "C_kwDOAAsO6NoAKDI2Yzk2ZTM0MTYzOTEwMmFmYWNiYmNhZDBkYzE4YWQwYWM3MWFiMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T07:49:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T07:49:33Z"}, "message": "Auto merge of #103227 - lcnr:bye-bye-unevaluated-const, r=oli-obk\n\nstop using `ty::UnevaluatedConst` directly\n\nbest reviewed commit by commit.\n\nsimplifies #99798 because we now don't have to expand `ty::UnevaluatedConst` to `ty::Const`.\nI also remember some other places where using `ty::UnevaluatedConst` directly was annoying and caused issues, though I don't quite remember what they were rn '^^\n\nr? `@oli-obk` cc `@JulianKnodt`", "tree": {"sha": "8f4c65adee8440ca46950521e5dc2f3e1542bc92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4c65adee8440ca46950521e5dc2f3e1542bc92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c96e341639102afacbbcad0dc18ad0ac71ab18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c96e341639102afacbbcad0dc18ad0ac71ab18", "html_url": "https://github.com/rust-lang/rust/commit/26c96e341639102afacbbcad0dc18ad0ac71ab18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c96e341639102afacbbcad0dc18ad0ac71ab18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3022afe3d144ca6acd34da9846ab74fa51328fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/3022afe3d144ca6acd34da9846ab74fa51328fda", "html_url": "https://github.com/rust-lang/rust/commit/3022afe3d144ca6acd34da9846ab74fa51328fda"}, {"sha": "b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56", "html_url": "https://github.com/rust-lang/rust/commit/b93713fb998a723ce2d8fdc59cfc16dcfa6ffe56"}], "stats": {"total": 322, "additions": 131, "deletions": 191}, "files": [{"sha": "a74016e220e629527eec57ff61bb4b99be0ace93", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -192,7 +192,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 (\n                     ty::PredicateKind::ConstEvaluatable(a),\n                     ty::PredicateKind::ConstEvaluatable(b),\n-                ) => tcx.try_unify_abstract_consts(self_param_env.and((a, b))),\n+                ) => relator.relate(predicate.rebind(a), predicate.rebind(b)).is_ok(),\n                 (\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, lt_a)),\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_b, lt_b)),"}, {"sha": "33ed3b96aa81fb9aef9f9bb7321d99bb94424736", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1101,8 +1101,6 @@ fn check_type_defn<'tcx, F>(\n \n             // Explicit `enum` discriminant values must const-evaluate successfully.\n             if let Some(discr_def_id) = variant.explicit_discr {\n-                let discr_substs = InternalSubsts::identity_for_item(tcx, discr_def_id.to_def_id());\n-\n                 let cause = traits::ObligationCause::new(\n                     tcx.def_span(discr_def_id),\n                     wfcx.body_id,\n@@ -1112,10 +1110,7 @@ fn check_type_defn<'tcx, F>(\n                     cause,\n                     wfcx.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n-                        ty::UnevaluatedConst::new(\n-                            ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n-                            discr_substs,\n-                        ),\n+                        ty::Const::from_anon_const(tcx, discr_def_id),\n                     ))\n                     .to_predicate(tcx),\n                 ));"}, {"sha": "2e84e1d01600708cb699b83f588dce311c135803", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -318,10 +318,10 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n+            if let ty::ConstKind::Unevaluated(_) = ct.kind() {\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}, {"sha": "a58cbc3767ed658980878daebc399a2cb7a6d672", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -55,6 +55,7 @@\n #![feature(drain_filter)]\n #![feature(intra_doc_pointers)]\n #![feature(yeet_expr)]\n+#![feature(result_option_inspect)]\n #![feature(const_option)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "473894ac1cae8279fe6a31e04e734417e7f296d8", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -4,7 +4,9 @@ use crate::mir;\n use crate::ty::subst::InternalSubsts;\n use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -83,7 +85,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted: None };\n-                self.const_eval_global_id_for_typeck(param_env, cid, span)\n+                self.const_eval_global_id_for_typeck(param_env, cid, span).inspect(|_| {\n+                    // We are emitting the lint here instead of in `is_const_evaluatable`\n+                    // as we normalize obligations before checking them, and normalization\n+                    // uses this function to evaluate this constant.\n+                    //\n+                    // @lcnr believes that successfully evaluating even though there are\n+                    // used generic parameters is a bug of evaluation, so checking for it\n+                    // here does feel somewhat sensible.\n+                    if !self.features().generic_const_exprs && ct.substs.has_non_region_param() {\n+                        assert!(matches!(self.def_kind(ct.def.did), DefKind::AnonConst));\n+                        let mir_body = self.mir_for_ctfe_opt_const_arg(ct.def);\n+                        if mir_body.is_polymorphic {\n+                            let Some(local_def_id) = ct.def.did.as_local() else { return };\n+                            self.struct_span_lint_hir(\n+                                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                                self.hir().local_def_id_to_hir_id(local_def_id),\n+                                self.def_span(ct.def.did),\n+                                \"cannot use constants which depend on generic parameters in types\",\n+                                |err| err,\n+                            )\n+                        }\n+                    }\n+                })\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n             Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),"}, {"sha": "f998e6083448f136171ac8336296f0b69ae80f4a", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -263,6 +263,10 @@ impl<'tcx> Const<'tcx> {\n         self.try_eval_usize(tcx, param_env)\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n+\n+    pub fn is_ct_infer(self) -> bool {\n+        matches!(self.kind(), ty::ConstKind::Infer(_))\n+    }\n }\n \n pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {"}, {"sha": "4ab761e0715cd590dc02a23211ffc79d62e1b595", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -15,7 +15,7 @@ use super::ScalarInt;\n \n /// An unevaluated (potentially generic) constant used in the type-system.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n-#[derive(Hash, HashStable)]\n+#[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub struct UnevaluatedConst<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "7201737be657bc100c9287f5df65e1025fdecbf5", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -34,12 +34,6 @@ impl FlagComputation {\n         result.flags\n     }\n \n-    pub fn for_unevaluated_const(uv: ty::UnevaluatedConst<'_>) -> TypeFlags {\n-        let mut result = FlagComputation::new();\n-        result.add_unevaluated_const(uv);\n-        result.flags\n-    }\n-\n     fn add_flags(&mut self, flags: TypeFlags) {\n         self.flags = self.flags | flags;\n     }\n@@ -256,7 +250,7 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                self.add_unevaluated_const(uv);\n+                self.add_const(uv);\n             }\n             ty::PredicateKind::ConstEquate(expected, found) => {\n                 self.add_const(expected);\n@@ -289,7 +283,10 @@ impl FlagComputation {\n     fn add_const(&mut self, c: ty::Const<'_>) {\n         self.add_ty(c.ty());\n         match c.kind() {\n-            ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n+            ty::ConstKind::Unevaluated(uv) => {\n+                self.add_substs(uv.substs);\n+                self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n+            }\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n@@ -313,11 +310,6 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const(&mut self, ct: ty::UnevaluatedConst<'_>) {\n-        self.add_substs(ct.substs);\n-        self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n-    }\n-\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         match projection.term.unpack() {"}, {"sha": "54f1499eb3d1815f758ef3101e62280044c63c67", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -126,13 +126,6 @@ pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ty::UnevaluatedConst<'tcx> {\n-        uv.super_fold_with(self)\n-    }\n-\n     fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n@@ -169,13 +162,6 @@ pub trait FallibleTypeFolder<'tcx>: Sized {\n         c.try_super_fold_with(self)\n     }\n \n-    fn try_fold_ty_unevaluated(\n-        &mut self,\n-        c: ty::UnevaluatedConst<'tcx>,\n-    ) -> Result<ty::UnevaluatedConst<'tcx>, Self::Error> {\n-        c.try_super_fold_with(self)\n-    }\n-\n     fn try_fold_predicate(\n         &mut self,\n         p: ty::Predicate<'tcx>,\n@@ -215,13 +201,6 @@ where\n         Ok(self.fold_const(c))\n     }\n \n-    fn try_fold_ty_unevaluated(\n-        &mut self,\n-        c: ty::UnevaluatedConst<'tcx>,\n-    ) -> Result<ty::UnevaluatedConst<'tcx>, !> {\n-        Ok(self.fold_ty_unevaluated(c))\n-    }\n-\n     fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }"}, {"sha": "984f6522359168309a19f2c161ea458402372d13", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -683,7 +683,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::UnevaluatedConst<'tcx>),\n+    ConstEvaluatable(ty::Const<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(Const<'tcx>, Const<'tcx>),"}, {"sha": "0b06ccc19ecc8fa539559bd2ef1068fb2102bc5e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -2702,8 +2702,8 @@ define_print_and_forward_display! {\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind))\n             }\n-            ty::PredicateKind::ConstEvaluatable(uv) => {\n-                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs), \"` can be evaluated\")\n+            ty::PredicateKind::ConstEvaluatable(ct) => {\n+                p!(\"the constant `\", print(ct), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")"}, {"sha": "2cad333e3f52a515bc7edbf62a1cf5a74cea773a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -166,8 +166,8 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n-            ty::PredicateKind::ConstEvaluatable(uv) => {\n-                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs)\n+            ty::PredicateKind::ConstEvaluatable(ct) => {\n+                write!(f, \"ConstEvaluatable({ct:?})\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n@@ -832,27 +832,6 @@ impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_ty_unevaluated(self)\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_ty_unevaluated(*self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(ty::UnevaluatedConst { def: self.def, substs: self.substs.try_fold_with(folder)? })\n-    }\n-}\n-\n impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)"}, {"sha": "c9930e8ad0a9d9a5d846388f383f79a4dda8dfe5", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -188,6 +188,14 @@ impl<'tcx> GenericArg<'tcx> {\n             _ => bug!(\"expected a const, but found another kind\"),\n         }\n     }\n+\n+    pub fn is_non_region_infer(self) -> bool {\n+        match self.unpack() {\n+            GenericArgKind::Lifetime(_) => false,\n+            GenericArgKind::Type(ty) => ty.is_ty_infer(),\n+            GenericArgKind::Const(ct) => ct.is_ct_infer(),\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {"}, {"sha": "c09f71f9a6d0926e204b30b5511ba6c2ceeca6df", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -197,13 +197,6 @@ pub trait TypeVisitor<'tcx>: Sized {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        uv.super_visit_with(self)\n-    }\n-\n     fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n@@ -592,21 +585,6 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n-    #[inline]\n-    #[instrument(level = \"trace\", ret)]\n-    fn visit_ty_unevaluated(\n-        &mut self,\n-        uv: ty::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        let flags = FlagComputation::for_unevaluated_const(uv);\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n     #[inline]\n     #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "91db9698c41b2ee30a4735d74f3215ca84f9c302", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -112,6 +112,22 @@ impl<'tcx> Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> ty::Const<'tcx> {\n+    /// Iterator that walks `self` and any types reachable from\n+    /// `self`, in depth-first order. Note that just walks the types\n+    /// that appear in `self`, it does not descend into the fields of\n+    /// structs or variants. For example:\n+    ///\n+    /// ```text\n+    /// isize => { isize }\n+    /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n+    /// [isize] => { [isize], isize }\n+    /// ```\n+    pub fn walk(self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self.into())\n+    }\n+}\n+\n /// We push `GenericArg`s on the stack in reverse order so as to\n /// maintain a pre-order traversal. As of the time of this\n /// writing, the fact that the traversal is pre-order is not"}, {"sha": "2636db6dbe1a77b6113089c778029a22e9c1ca81", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -159,34 +159,12 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n-            ty::PredicateKind::ConstEvaluatable(uv)\n-                if self.def_id_visitor.tcx().features().generic_const_exprs =>\n-            {\n-                let tcx = self.def_id_visitor.tcx();\n-                if let Ok(Some(ct)) = AbstractConst::new(tcx, uv) {\n-                    self.visit_abstract_const_expr(tcx, ct)?;\n-                }\n-                ControlFlow::CONTINUE\n-            }\n+            ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n             ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }\n \n-    fn visit_abstract_const_expr(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        ct: AbstractConst<'tcx>,\n-    ) -> ControlFlow<V::BreakTy> {\n-        walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n-            ACNode::Leaf(leaf) => self.visit_const(leaf),\n-            ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n-            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n-                ControlFlow::CONTINUE\n-            }\n-        })\n-    }\n-\n     fn visit_predicates(\n         &mut self,\n         predicates: ty::GenericPredicates<'tcx>,\n@@ -309,9 +287,16 @@ where\n         self.visit_ty(c.ty())?;\n         let tcx = self.def_id_visitor.tcx();\n         if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {\n-            self.visit_abstract_const_expr(tcx, ct)?;\n+            walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n+                ACNode::Leaf(leaf) => self.visit_const(leaf),\n+                ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n+                ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n+                    ControlFlow::CONTINUE\n+                }\n+            })\n+        } else {\n+            ControlFlow::CONTINUE\n         }\n-        ControlFlow::CONTINUE\n     }\n }\n "}, {"sha": "84038625fb2792038f5243d02584f737d34645b2", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -9,14 +9,12 @@\n //! `thir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n use rustc_errors::ErrorGuaranteed;\n-use rustc_hir::def::DefKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::{\n     walk_abstract_const, AbstractConst, FailureKind, Node, NotConstEvaluatable,\n };\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_session::lint;\n use rustc_span::Span;\n \n use std::iter;\n@@ -161,11 +159,20 @@ pub fn try_unify_abstract_consts<'tcx>(\n #[instrument(skip(infcx), level = \"debug\")]\n pub fn is_const_evaluatable<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n-    uv: ty::UnevaluatedConst<'tcx>,\n+    ct: ty::Const<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n     let tcx = infcx.tcx;\n+    let uv = match ct.kind() {\n+        ty::ConstKind::Unevaluated(uv) => uv,\n+        ty::ConstKind::Param(_)\n+        | ty::ConstKind::Bound(_, _)\n+        | ty::ConstKind::Placeholder(_)\n+        | ty::ConstKind::Value(_)\n+        | ty::ConstKind::Error(_) => return Ok(()),\n+        ty::ConstKind::Infer(_) => return Err(NotConstEvaluatable::MentionsInfer),\n+    };\n \n     if tcx.features().generic_const_exprs {\n         if let Some(ct) = AbstractConst::new(tcx, uv)? {\n@@ -253,25 +260,7 @@ pub fn is_const_evaluatable<'tcx>(\n                 Err(NotConstEvaluatable::Error(reported))\n             }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n-            Ok(_) => {\n-                if uv.substs.has_non_region_param() {\n-                    assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n-                    let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n-\n-                    if mir_body.is_polymorphic {\n-                        let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n-                        tcx.struct_span_lint_hir(\n-                            lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n-                            tcx.hir().local_def_id_to_hir_id(local_def_id),\n-                            span,\n-                            \"cannot use constants which depend on generic parameters in types\",\n-                            |err| err\n-                        )\n-                    }\n-                }\n-\n-                Ok(())\n-            },\n+            Ok(_) => Ok(()),\n         }\n     }\n }\n@@ -285,7 +274,7 @@ fn satisfied_from_param_env<'tcx>(\n     for pred in param_env.caller_bounds() {\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n+                if let Some(b_ct) = AbstractConst::from_const(tcx, uv)? {\n                     let const_unify_ctxt = ConstUnifyCtxt { tcx, param_env };\n \n                     // Try to unify with each subtree in the AbstractConst to allow for"}, {"sha": "fc0040de6b3763da7a31ffb66447180895e6a6ec", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1304,7 +1304,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n \n                 match obligation.predicate.kind().skip_binder() {\n-                    ty::PredicateKind::ConstEvaluatable(uv) => {\n+                    ty::PredicateKind::ConstEvaluatable(ct) => {\n+                        let ty::ConstKind::Unevaluated(uv) = ct.kind() else {\n+                            bug!(\"const evaluatable failed for non-unevaluated const `{ct:?}`\");\n+                        };\n                         let mut err =\n                             self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n                         let const_span = self.tcx.def_span(uv.def.did);\n@@ -2368,7 +2371,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                let subst = data.substs.iter().find(|g| g.has_non_region_infer());\n+                let subst = data.walk().find(|g| g.is_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n                         body_id,"}, {"sha": "a417e1440b9ee1f35c2281a40e25f52ccd4ca228", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -476,9 +476,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n-                                uv.substs\n-                                    .iter()\n-                                    .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n+                                uv.walk().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }"}, {"sha": "0bb25a74dc8b043846126445fc170919b1a3e2c6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -837,24 +837,14 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             }\n         }\n \n-        fn visit_ty_unevaluated(\n-            &mut self,\n-            uv: ty::UnevaluatedConst<'tcx>,\n-        ) -> ControlFlow<Self::BreakTy> {\n+        fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n-            // If `AbstractConst::new` returned an error we already failed compilation\n+            // If `AbstractConst::from_const` returned an error we already failed compilation\n             // so we don't have to emit an additional error here.\n-            //\n-            // We currently recurse into abstract consts here but do not recurse in\n-            // `is_const_evaluatable`. This means that the object safety check is more\n-            // liberal than the const eval check.\n-            //\n-            // This shouldn't really matter though as we can't really use any\n-            // constants which are not considered const evaluatable.\n             use rustc_middle::ty::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv) {\n+            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n                 walk_abstract_const(self.tcx, ct, |node| match node.root(self.tcx) {\n                     Node::Leaf(leaf) => self.visit_const(leaf),\n                     Node::Cast(_, _, ty) => self.visit_ty(ty),\n@@ -863,7 +853,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                     }\n                 })\n             } else {\n-                ControlFlow::CONTINUE\n+                ct.super_visit_with(self)\n             }\n         }\n     }"}, {"sha": "0870833cc35ae205579fb2229ce3e100eaec33b3", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -148,13 +148,8 @@ pub fn predicate_obligations<'tcx>(\n             wf.compute(a.into());\n             wf.compute(b.into());\n         }\n-        ty::PredicateKind::ConstEvaluatable(uv) => {\n-            let obligations = wf.nominal_obligations(uv.def.did, uv.substs);\n-            wf.out.extend(obligations);\n-\n-            for arg in uv.substs.iter() {\n-                wf.compute(arg);\n-            }\n+        ty::PredicateKind::ConstEvaluatable(ct) => {\n+            wf.compute(ct.into());\n         }\n         ty::PredicateKind::ConstEquate(c1, c2) => {\n             wf.compute(c1.into());\n@@ -476,14 +471,14 @@ impl<'tcx> WfPredicates<'tcx> {\n                 // obligations are handled by the parent (e.g. `ty::Ref`).\n                 GenericArgKind::Lifetime(_) => continue,\n \n-                GenericArgKind::Const(constant) => {\n-                    match constant.kind() {\n+                GenericArgKind::Const(ct) => {\n+                    match ct.kind() {\n                         ty::ConstKind::Unevaluated(uv) => {\n                             let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                                     .to_predicate(self.tcx());\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n@@ -500,7 +495,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::WellFormed(constant.into()))\n+                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into()))\n                                     .to_predicate(self.tcx()),\n                             ));\n                         }"}, {"sha": "d674e3acdffde4bfd4a7463648e3f27908098ee3", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/dependence_lint.rs:13:32\n+  --> $DIR/dependence_lint.rs:14:32\n    |\n LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    |                                ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/dependence_lint.rs:20:37\n+  --> $DIR/dependence_lint.rs:21:37\n    |\n LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n    |                                     ^ cannot perform const operation using `T`\n@@ -17,7 +17,7 @@ LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/dependence_lint.rs:9:9\n+  --> $DIR/dependence_lint.rs:10:9\n    |\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_\n    = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/dependence_lint.rs:16:9\n+  --> $DIR/dependence_lint.rs:17:9\n    |\n LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "74111ef1d38cd28f321fc5211fd804be504bbdbf", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.gce.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,29 +1,29 @@\n error: overly complex generic constant\n-  --> $DIR/dependence_lint.rs:16:9\n+  --> $DIR/dependence_lint.rs:17:9\n    |\n LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: overly complex generic constant\n-  --> $DIR/dependence_lint.rs:20:17\n+  --> $DIR/dependence_lint.rs:21:17\n    |\n LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: unconstrained generic constant\n-  --> $DIR/dependence_lint.rs:13:12\n+  --> $DIR/dependence_lint.rs:14:12\n    |\n LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n \n error: unconstrained generic constant\n-  --> $DIR/dependence_lint.rs:9:9\n+  --> $DIR/dependence_lint.rs:10:9\n    |\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b715e07f8fa006158d572beef23ca776d66ced39", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,4 +1,5 @@\n // revisions: full gce\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n \n #![cfg_attr(gce, feature(generic_const_exprs))]\n #![allow(incomplete_features)]"}, {"sha": "3c866333d60968ca84eea059b458447d9047c8e7", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n \n const fn foo<T>() -> usize {\n     // We might instead branch on `std::mem::size_of::<*mut T>() < 8` here,"}, {"sha": "84abfe57876cd12b105eb93146e1ec8a4a0f8263", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/function-call.rs:14:17\n+  --> $DIR/function-call.rs:15:17\n    |\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^"}, {"sha": "8e667aebaadc2bcdca048661bfda021fb9916a72", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n use std::mem::size_of;\n \n fn test<const N: usize>() {}"}, {"sha": "deabd05a6d5b0807af86d048978dfdccdf37dbbc", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:9:38\n+  --> $DIR/complex-expression.rs:10:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:12:40\n+  --> $DIR/complex-expression.rs:13:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n@@ -17,7 +17,7 @@ LL | struct Break1<const N: usize>([u8; { { N } }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:16:17\n+  --> $DIR/complex-expression.rs:17:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n@@ -26,7 +26,7 @@ LL |     let _: [u8; N + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:21:17\n+  --> $DIR/complex-expression.rs:22:17\n    |\n LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n@@ -35,7 +35,7 @@ LL |     let _ = [0; N + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:25:45\n+  --> $DIR/complex-expression.rs:26:45\n    |\n LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    |                                             ^ cannot perform const operation using `T`\n@@ -44,7 +44,7 @@ LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:28:47\n+  --> $DIR/complex-expression.rs:29:47\n    |\n LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    |                                               ^ cannot perform const operation using `T`\n@@ -53,7 +53,7 @@ LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:32:32\n+  --> $DIR/complex-expression.rs:33:32\n    |\n LL |     let _: [u8; size_of::<*mut T>() + 1];\n    |                                ^ cannot perform const operation using `T`\n@@ -62,7 +62,7 @@ LL |     let _: [u8; size_of::<*mut T>() + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/complex-expression.rs:37:17\n+  --> $DIR/complex-expression.rs:38:17\n    |\n LL |     let _ = [0; size_of::<*mut T>() + 1];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e9d868093e7698b2b0e492eacd3c0147bb8cc33e", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n #![allow(dead_code)]\n \n fn foo<T>() {"}, {"sha": "8003dfa4071721eea15438a768b3385aa753e22f", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c96e341639102afacbbcad0dc18ad0ac71ab18/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=26c96e341639102afacbbcad0dc18ad0ac71ab18", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:5:9\n+  --> $DIR/const-evaluatable-unchecked.rs:6:9\n    |\n LL |     [0; std::mem::size_of::<*mut T>()];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     [0; std::mem::size_of::<*mut T>()];\n    = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:16:21\n+  --> $DIR/const-evaluatable-unchecked.rs:17:21\n    |\n LL |         let _ = [0; Self::ASSOC];\n    |                     ^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         let _ = [0; Self::ASSOC];\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:28:21\n+  --> $DIR/const-evaluatable-unchecked.rs:29:21\n    |\n LL |         let _ = [0; Self::ASSOC];\n    |                     ^^^^^^^^^^^"}]}