{"sha": "ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTE1MWZhNTVlNGU4MWMwY2JhYTcxODFlYjY3MmIyZGY2YjUzZjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-26T17:50:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-26T17:50:06Z"}, "message": "rustc: Use memset when zeroing allocas out (issue #3025).\n\nPreviously, LLVM was generating a ton of byte-by-byte copies,\nleading to huge numbers of vregs and bloating the code. Now, using\nmemset, the code becomes a nice series of SSE moves instead.", "tree": {"sha": "d783b788c62c86cc7f326413950c5ce5fba45c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d783b788c62c86cc7f326413950c5ce5fba45c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6", "html_url": "https://github.com/rust-lang/rust/commit/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db71ff3eb61bbce3123f62b274100dadf5ca99a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/db71ff3eb61bbce3123f62b274100dadf5ca99a6", "html_url": "https://github.com/rust-lang/rust/commit/db71ff3eb61bbce3123f62b274100dadf5ca99a6"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "24aa8f1dec04547526297421ac70b22d110ad64c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ff9151fa55e4e81c0cbaa7181eb672b2df6b53f6", "patch": "@@ -278,7 +278,7 @@ fn alloca_maybe_zeroed(cx: block, t: TypeRef, zero: bool) -> ValueRef {\n     if cx.unreachable { return llvm::LLVMGetUndef(t); }\n     let initcx = raw_block(cx.fcx, false, cx.fcx.llstaticallocas);\n     let p = Alloca(initcx, t);\n-    if zero { Store(initcx, C_null(t), p); }\n+    if zero { memzero(initcx, p, t); }\n     return p;\n }\n \n@@ -287,10 +287,38 @@ fn zero_mem(cx: block, llptr: ValueRef, t: ty::t) -> block {\n     let bcx = cx;\n     let ccx = cx.ccx();\n     let llty = type_of(ccx, t);\n-    Store(bcx, C_null(llty), llptr);\n+    memzero(bcx, llptr, llty);\n     return bcx;\n }\n \n+// Always use this function instead of storing a zero constant to the memory\n+// in question. If you store a zero constant, LLVM will drown in vreg\n+// allocation for large data structures, and the generated code will be\n+// awful. (A telltale sign of this is large quantities of\n+// `mov [byte ptr foo],0` in the generated code.)\n+fn memzero(cx: block, llptr: ValueRef, llty: TypeRef) {\n+    let _icx = cx.insn_ctxt(\"memzero\");\n+    let ccx = cx.ccx();\n+\n+    let intrinsic_key;\n+    match ccx.sess.targ_cfg.arch {\n+        session::arch_x86 | session::arch_arm => {\n+            intrinsic_key = ~\"llvm.memset.p0i8.i32\";\n+        }\n+        session::arch_x86_64 => {\n+            intrinsic_key = ~\"llvm.memset.p0i8.i64\";\n+        }\n+    }\n+\n+    let llintrinsicfn = ccx.intrinsics.get(intrinsic_key);\n+    let llptr = PointerCast(cx, llptr, T_ptr(T_i8()));\n+    let llzeroval = C_u8(0);\n+    let size = IntCast(cx, llsize_of(ccx, llty), ccx.int_type);\n+    let align = C_i32(1i32);\n+    let volatile = C_bool(false);\n+    Call(cx, llintrinsicfn, ~[llptr, llzeroval, size, align, volatile]);\n+}\n+\n fn arrayalloca(cx: block, t: TypeRef, v: ValueRef) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"arrayalloca\");\n     if cx.unreachable { return llvm::LLVMGetUndef(t); }"}]}