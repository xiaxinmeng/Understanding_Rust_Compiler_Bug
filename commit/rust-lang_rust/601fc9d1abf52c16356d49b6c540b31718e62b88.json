{"sha": "601fc9d1abf52c16356d49b6c540b31718e62b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWZjOWQxYWJmNTJjMTYzNTZkNDliNmM1NDBiMzE3MThlNjJiODg=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-09T17:57:34Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-14T00:01:46Z"}, "message": "vscode: add nightly extension installation logic", "tree": {"sha": "d4bf0d4e3d24578eb3204e7cf57d8db486479e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4bf0d4e3d24578eb3204e7cf57d8db486479e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601fc9d1abf52c16356d49b6c540b31718e62b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601fc9d1abf52c16356d49b6c540b31718e62b88", "html_url": "https://github.com/rust-lang/rust/commit/601fc9d1abf52c16356d49b6c540b31718e62b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601fc9d1abf52c16356d49b6c540b31718e62b88/comments", "author": null, "committer": null, "parents": [{"sha": "6d2d75367763686286779dd4b595a575c6ea689e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2d75367763686286779dd4b595a575c6ea689e", "html_url": "https://github.com/rust-lang/rust/commit/6d2d75367763686286779dd4b595a575c6ea689e"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "7709cd3cd3ec382453ccef7cb7119fc7fe07cfb1", "filename": "editors/code/src/installation/extension.ts", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/601fc9d1abf52c16356d49b6c540b31718e62b88/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/601fc9d1abf52c16356d49b6c540b31718e62b88/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts?ref=601fc9d1abf52c16356d49b6c540b31718e62b88", "patch": "@@ -0,0 +1,131 @@\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import { promises as fs } from 'fs';\n+\n+import { vscodeReinstallExtension, vscodeReloadWindow, log, vscodeInstallExtensionFromVsix, assert, notReentrant } from \"../util\";\n+import { Config, UpdatesChannel } from \"../config\";\n+import { ArtifactReleaseInfo } from \"./interfaces\";\n+import { downloadArtifactWithProgressUi } from \"./downloads\";\n+import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n+\n+const HEURISTIC_NIGHTLY_RELEASE_PERIOD_IN_HOURS = 25;\n+\n+/**\n+ * Installs `stable` or latest `nightly` version or does nothing if the current\n+ * extension version is what's needed according to `desiredUpdateChannel`.\n+ */\n+export async function ensureProperExtensionVersion(config: Config): Promise<never | void> {\n+    const currentUpdChannel = config.installedExtensionUpdateChannel;\n+    const desiredUpdChannel = config.updatesChannel;\n+\n+    if (currentUpdChannel === UpdatesChannel.Stable) {\n+        // Release date is present only when we are on nightly\n+        config.installedNightlyExtensionReleaseDate.set(null);\n+    }\n+\n+    // User has built lsp server from sources, she should manage updates manually\n+    if (currentUpdChannel === null) return;\n+\n+    if (desiredUpdChannel === UpdatesChannel.Stable) {\n+        // VSCode should handle updates for stable channel\n+        if (currentUpdChannel === UpdatesChannel.Stable) return;\n+\n+        if (!await askToDownloadProperExtensionVersion(config)) return;\n+\n+        await vscodeReinstallExtension(config.extensionId);\n+        await vscodeReloadWindow(); // never returns\n+    }\n+\n+    if (currentUpdChannel === UpdatesChannel.Stable) {\n+        if (!await askToDownloadProperExtensionVersion(config)) return;\n+\n+        return await tryDownloadNightlyExtension(config);\n+    }\n+\n+    const currentExtReleaseDate = config.installedNightlyExtensionReleaseDate.get();\n+\n+    assert(currentExtReleaseDate !== null, \"nightly release date must've been set during installation\");\n+\n+    const hoursSinceLastUpdate = diffInHours(currentExtReleaseDate, new Date());\n+    log.debug(`Current rust-analyzer nightly was downloaded ${hoursSinceLastUpdate} hours ago`);\n+\n+    if (hoursSinceLastUpdate < HEURISTIC_NIGHTLY_RELEASE_PERIOD_IN_HOURS) {\n+        return;\n+    }\n+    if (!await askToDownloadProperExtensionVersion(config, \"The installed nightly version is most likely outdated. \")) {\n+        return;\n+    }\n+\n+    await tryDownloadNightlyExtension(config, releaseInfo => {\n+        assert(\n+            currentExtReleaseDate === config.installedNightlyExtensionReleaseDate.get(),\n+            \"Other active VSCode instance has reinstalled the extension\"\n+        );\n+\n+        if (releaseInfo.releaseDate === currentExtReleaseDate) {\n+            vscode.window.showInformationMessage(\n+                \"Whoops, it appears that your nightly version is up-to-date. \" +\n+                \"There might be some problems with the upcomming nightly release \" +\n+                \"or you traveled too far into the future. Sorry for that \ud83d\ude05! \"\n+            );\n+            return false;\n+        }\n+        return true;\n+    });\n+}\n+\n+async function askToDownloadProperExtensionVersion(config: Config, reason = \"\") {\n+    if (!config.askBeforeDownload) return true;\n+\n+    const stableOrNightly = config.updatesChannel === UpdatesChannel.Stable ? \"stable\" : \"latest nightly\";\n+\n+    // In case of reentering this function and showing the same info message\n+    // (e.g. after we had shown this message, the user changed the config)\n+    // vscode will dismiss the already shown one (i.e. return undefined).\n+    // This behaviour is what we want, but likely it is not documented\n+\n+    const userResponse = await vscode.window.showInformationMessage(\n+        reason + `Do you want to download the ${stableOrNightly} rust-analyzer extension ` +\n+        `version and reload the window now?`,\n+        \"Download now\", \"Cancel\"\n+    );\n+    log.debug(\"Response: \", userResponse);\n+    return userResponse === \"Download now\";\n+}\n+\n+/**\n+ * Shutdowns the process in case of success (i.e. reloads the window) or throws an error.\n+ */\n+const tryDownloadNightlyExtension = notReentrant(async function tryDownloadNightlyExtension(\n+    config: Config,\n+    shouldDownload: (releaseInfo: ArtifactReleaseInfo) => boolean = () => true\n+): Promise<never | void> {\n+    const vsixSource = config.nightlyVsixSource;\n+    try {\n+        const releaseInfo = await fetchArtifactReleaseInfo(vsixSource.repo, vsixSource.file, vsixSource.tag);\n+\n+        if (!shouldDownload(releaseInfo)) return;\n+\n+        await downloadArtifactWithProgressUi(releaseInfo, vsixSource.file, vsixSource.dir, \"nightly extension\");\n+\n+        const vsixPath = path.join(vsixSource.dir, vsixSource.file);\n+\n+        await vscodeInstallExtensionFromVsix(vsixPath)\n+        await config.installedNightlyExtensionReleaseDate.set(releaseInfo.releaseDate);\n+        await fs.unlink(vsixPath);\n+\n+        await vscodeReloadWindow(); // never returns\n+    } catch (err) {\n+        log.downloadError(err, \"nightly extension\", vsixSource.repo.name);\n+    }\n+});\n+\n+function diffInHours(a: Date, b: Date): number {\n+    // Discard the time and time-zone information (to abstract from daylight saving time bugs)\n+    // https://stackoverflow.com/a/15289883/9259330\n+\n+    const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n+    const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n+\n+    return (utcA - utcB) / (1000 * 60 * 60);\n+}"}]}