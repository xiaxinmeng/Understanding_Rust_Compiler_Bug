{"sha": "cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "node_id": "C_kwDOAAsO6NoAKGNjN2Q4MDE0ZDcyMGFjODAwZjg2OGEwYjdlYzg1NGY0YTUwMzZlM2Y", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-10T05:43:20Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-10T05:43:20Z"}, "message": "Specialize array cloning for Copy types\n\nBecause after PR 86041, the optimizer no longer load-merges at the LLVM IR level, which might be part of the perf loss.  (I'll run perf and see if this makes a difference.)\n\nAlso I added a codegen test so this hopefully won't regress in future -- it passes on stable and with my change here, but not on the 2021-11-09 nightly.", "tree": {"sha": "8b08bdfe9c86dd3520b882d2616d9da9db3d4f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b08bdfe9c86dd3520b882d2616d9da9db3d4f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "html_url": "https://github.com/rust-lang/rust/commit/cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc7d8014d720ac800f868a0b7ec854f4a5036e3f/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b09ba6a5d5c644fe0f1c27c7f9c80b334241707", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b09ba6a5d5c644fe0f1c27c7f9c80b334241707", "html_url": "https://github.com/rust-lang/rust/commit/8b09ba6a5d5c644fe0f1c27c7f9c80b334241707"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "e8e0cbf84b37d51b0500cd7ebb263c7157ef9bdc", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc7d8014d720ac800f868a0b7ec854f4a5036e3f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc7d8014d720ac800f868a0b7ec854f4a5036e3f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "patch": "@@ -339,9 +339,7 @@ impl<T: Copy, const N: usize> Copy for [T; N] {}\n impl<T: Clone, const N: usize> Clone for [T; N] {\n     #[inline]\n     fn clone(&self) -> Self {\n-        // SAFETY: we know for certain that this iterator will yield exactly `N`\n-        // items.\n-        unsafe { collect_into_array_unchecked(&mut self.iter().cloned()) }\n+        SpecArrayClone::clone(self)\n     }\n \n     #[inline]\n@@ -350,6 +348,27 @@ impl<T: Clone, const N: usize> Clone for [T; N] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+trait SpecArrayClone: Clone {\n+    fn clone<const N: usize>(array: &[Self; N]) -> [Self; N];\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<T: Clone> SpecArrayClone for T {\n+    default fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n+        // SAFETY: we know for certain that this iterator will yield exactly `N`\n+        // items.\n+        unsafe { collect_into_array_unchecked(&mut array.iter().cloned()) }\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<T: Copy> SpecArrayClone for T {\n+    fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n+        *array\n+    }\n+}\n+\n // The Default impls cannot be done with const generics because `[T; 0]` doesn't\n // require Default to be implemented, and having different impl blocks for\n // different numbers isn't supported yet."}, {"sha": "0d42963bcd2ceaba9b2d6dd426716cde6ff987e6", "filename": "src/test/codegen/array-clone.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc7d8014d720ac800f868a0b7ec854f4a5036e3f/src%2Ftest%2Fcodegen%2Farray-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc7d8014d720ac800f868a0b7ec854f4a5036e3f/src%2Ftest%2Fcodegen%2Farray-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-clone.rs?ref=cc7d8014d720ac800f868a0b7ec854f4a5036e3f", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @array_clone\n+#[no_mangle]\n+pub fn array_clone(a: &[u8; 2]) -> [u8; 2] {\n+    // CHECK-NOT: getelementptr\n+    // CHECK-NOT: load i8\n+    // CHECK-NOT: zext\n+    // CHECK-NOT: shl\n+    // CHECK: load i16\n+    // CHECK-NEXT: ret i16\n+    a.clone()\n+}"}]}