{"sha": "d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "node_id": "C_kwDOAAsO6NoAKGQ3OTI4YTkyZTU4OGUxMWE2YzcxNDVjZGU5Y2NmZDc1YzRjN2NjMDE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-21T06:38:28Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:21:26Z"}, "message": "Clarify spacing computation.\n\nThe spacing computation is done in two parts. In the first part\n`next_token` and `bump` use `Spacing::Alone` to mean \"preceded by\nwhitespace\" and `Spacing::Joint` to mean the opposite. In the second\npart `parse_token_tree_other` then adjusts the `spacing` value to mean\nthe usual thing (i.e. \"is the following token joinable punctuation?\").\nThis shift in meaning is very confusing and it took me some time to\nunderstand what was going on.\n\nThis commit changes the first part to use a bool, and adds some\ncomments, which makes things much clearer.", "tree": {"sha": "c89337945640fe2c616ec882f6e26a4f031c75f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89337945640fe2c616ec882f6e26a4f031c75f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "html_url": "https://github.com/rust-lang/rust/commit/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9640d1c02354dc3167f775e56629aaf8974e78f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9640d1c02354dc3167f775e56629aaf8974e78f7", "html_url": "https://github.com/rust-lang/rust/commit/9640d1c02354dc3167f775e56629aaf8974e78f7"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "7d5f736a6f4c515c5f9f691733b3599b1446c59e", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "patch": "@@ -1,7 +1,7 @@\n use crate::lexer::unicode_chars::UNICODE_ARRAY;\n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{Spacing, TokenStream};\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_lexer::unescape::{self, Mode};\n@@ -67,9 +67,10 @@ impl<'a> StringReader<'a> {\n         self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))\n     }\n \n-    /// Returns the next token, and info about preceding whitespace, if any.\n-    fn next_token(&mut self) -> (Spacing, Token) {\n-        let mut spacing = Spacing::Joint;\n+    /// Returns the next token, paired with a bool indicating if the token was\n+    /// preceded by whitespace.\n+    fn next_token(&mut self) -> (Token, bool) {\n+        let mut preceded_by_whitespace = false;\n \n         // Skip trivial (whitespace & comments) tokens\n         loop {\n@@ -78,7 +79,7 @@ impl<'a> StringReader<'a> {\n \n             if text.is_empty() {\n                 let span = self.mk_sp(self.pos, self.pos);\n-                return (spacing, Token::new(token::Eof, span));\n+                return (Token::new(token::Eof, span), preceded_by_whitespace);\n             }\n \n             let token = rustc_lexer::first_token(text);\n@@ -91,9 +92,9 @@ impl<'a> StringReader<'a> {\n             match self.cook_lexer_token(token.kind, start) {\n                 Some(kind) => {\n                     let span = self.mk_sp(start, self.pos);\n-                    return (spacing, Token::new(kind, span));\n+                    return (Token::new(kind, span), preceded_by_whitespace);\n                 }\n-                None => spacing = Spacing::Alone,\n+                None => preceded_by_whitespace = true,\n             }\n         }\n     }"}, {"sha": "fe95742972f58aea5dd14ae089a9bc6cac61e5ca", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "patch": "@@ -246,16 +246,22 @@ impl<'a> TokenTreesReader<'a> {\n \n     #[inline]\n     fn parse_token_tree_other(&mut self) -> TokenTree {\n+        // `spacing` for the returned token is determined by the next token:\n+        // its kind and its `preceded_by_whitespace` status.\n         let tok = self.token.take();\n-        let mut spacing = self.bump();\n-        if !self.token.is_op() {\n-            spacing = Spacing::Alone;\n-        }\n+        let is_next_tok_preceded_by_whitespace = self.bump();\n+        let spacing = if is_next_tok_preceded_by_whitespace || !self.token.is_op() {\n+            Spacing::Alone\n+        } else {\n+            Spacing::Joint\n+        };\n         TokenTree::Token(tok, spacing)\n     }\n \n-    fn bump(&mut self) -> Spacing {\n-        let (spacing, token) = self.string_reader.next_token();\n+    // Set `self.token` to the next token. Returns a bool indicating if that\n+    // token was preceded by whitespace.\n+    fn bump(&mut self) -> bool {\n+        let (token, spacing) = self.string_reader.next_token();\n         self.token = token;\n         spacing\n     }"}]}