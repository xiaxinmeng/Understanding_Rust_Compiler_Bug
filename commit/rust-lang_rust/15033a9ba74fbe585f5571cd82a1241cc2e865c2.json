{"sha": "15033a9ba74fbe585f5571cd82a1241cc2e865c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MDMzYTliYTc0ZmJlNTg1ZjU1NzFjZDgyYTEyNDFjYzJlODY1YzI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-17T23:30:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-17T23:30:50Z"}, "message": "Const parameters should impose no variance constraints", "tree": {"sha": "bde97b881569b71268a5656b45527ce2ca23cf2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde97b881569b71268a5656b45527ce2ca23cf2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15033a9ba74fbe585f5571cd82a1241cc2e865c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15033a9ba74fbe585f5571cd82a1241cc2e865c2", "html_url": "https://github.com/rust-lang/rust/commit/15033a9ba74fbe585f5571cd82a1241cc2e865c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15033a9ba74fbe585f5571cd82a1241cc2e865c2/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7dd97e263ded4f965af87ded9db3831c1c50ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7dd97e263ded4f965af87ded9db3831c1c50ac", "html_url": "https://github.com/rust-lang/rust/commit/3b7dd97e263ded4f965af87ded9db3831c1c50ac"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "644ba5981a63d692a94af924351b8d89b43a28c0", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=15033a9ba74fbe585f5571cd82a1241cc2e865c2", "patch": "@@ -4,7 +4,6 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use hir::def_id::DefId;\n-use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir;\n@@ -239,8 +238,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 UnpackedKind::Type(ty) => {\n                     self.add_constraints_from_ty(current, ty, variance_i)\n                 }\n-                UnpackedKind::Const(ct) => {\n-                    self.add_constraints_from_const(current, ct, variance_i)\n+                UnpackedKind::Const(_) => {\n+                    // Consts impose no constraints.\n                 }\n             }\n         }\n@@ -275,9 +274,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, len) => {\n+            ty::Array(typ, _) => {\n                 self.add_constraints_from_ty(current, typ, variance);\n-                self.add_constraints_from_const(current, len, variance);\n             }\n \n             ty::Slice(typ) => {\n@@ -395,8 +393,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 UnpackedKind::Type(ty) => {\n                     self.add_constraints_from_ty(current, ty, variance_i)\n                 }\n-                UnpackedKind::Const(ct) => {\n-                    self.add_constraints_from_const(current, ct, variance_i)\n+                UnpackedKind::Const(_) => {\n+                    // Consts impose no constraints.\n                 }\n             }\n         }\n@@ -449,24 +447,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    fn add_constraints_from_const(\n-        &mut self,\n-        current: &CurrentItem,\n-        ct: &ty::Const<'tcx>,\n-        variance: VarianceTermPtr<'a>\n-    ) {\n-        debug!(\n-            \"add_constraints_from_const(ct={:?}, variance={:?})\",\n-            ct,\n-            variance\n-        );\n-\n-        self.add_constraints_from_ty(current, ct.ty, variance);\n-        if let ConstValue::Param(ref data) = ct.val {\n-            self.add_constraint(current, data.index, variance);\n-        }\n-    }\n-\n     /// Adds constraints appropriate for a mutability-type pair\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,"}, {"sha": "b783bbfad16e9e5a5e2dda74f26a2a645edde87c", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=15033a9ba74fbe585f5571cd82a1241cc2e865c2", "patch": "@@ -85,12 +85,19 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         self.terms_cx.inferred_starts.iter().map(|(&id, &InferredIndex(start))| {\n             let def_id = tcx.hir().local_def_id_from_hir_id(id);\n             let generics = tcx.generics_of(def_id);\n+            let count = generics.count();\n \n-            let mut variances = solutions[start..start+generics.count()].to_vec();\n-\n+            let mut variances = solutions[start..(start + count)].to_vec();\n             debug!(\"id={} variances={:?}\", id, variances);\n \n-            // Functions can have unused type parameters: make those invariant.\n+            // Const parameters are always invariant.\n+            for (idx, param) in generics.params.iter().enumerate() {\n+                if let ty::GenericParamDefKind::Const = param.kind {\n+                    variances[idx] = ty::Invariant;\n+                }\n+            }\n+\n+            // Functions are permitted to have unused generic parameters: make those invariant.\n             if let ty::FnDef(..) = tcx.type_of(def_id).sty {\n                 for variance in &mut variances {\n                     if *variance == ty::Bivariant {"}, {"sha": "efb221b92324e475f5a815216eebcec08f2346f8", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15033a9ba74fbe585f5571cd82a1241cc2e865c2/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=15033a9ba74fbe585f5571cd82a1241cc2e865c2", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n         // for a particular item are assigned continuous indices.\n \n         let arena = self.arena;\n-        self.inferred_terms.extend((start..start+count).map(|i| {\n+        self.inferred_terms.extend((start..(start + count)).map(|i| {\n             &*arena.alloc(InferredTerm(InferredIndex(i)))\n         }));\n     }"}]}