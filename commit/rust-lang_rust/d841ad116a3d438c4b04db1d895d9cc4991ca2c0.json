{"sha": "d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "node_id": "C_kwDOAAsO6NoAKGQ4NDFhZDExNmEzZDQzOGM0YjA0ZGIxZDg5NWQ5Y2M0OTkxY2EyYzA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T21:59:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T21:59:07Z"}, "message": "Fix up adjustment hints configurations", "tree": {"sha": "47d6743efbd946e0b62cf2c1711f019684021bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d6743efbd946e0b62cf2c1711f019684021bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "html_url": "https://github.com/rust-lang/rust/commit/d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "html_url": "https://github.com/rust-lang/rust/commit/95d20fccd77869a98ed8db1e8b0d45d4d909f26b"}], "stats": {"total": 97, "additions": 79, "deletions": 18}, "files": [{"sha": "50934a27f89e3738fa6a667c176f9db4a5575320", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "patch": "@@ -53,7 +53,7 @@ pub enum LifetimeElisionHints {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum AdjustmentHints {\n     Always,\n-    MutableOnly,\n+    ReborrowOnly,\n     Never,\n }\n \n@@ -675,7 +675,9 @@ fn adjustment_hints(\n     for adjustment in adjustments.into_iter().rev() {\n         // FIXME: Add some nicer tooltips to each of these\n         let text = match adjustment {\n-            Adjust::NeverToAny => \"<never-to-any>\",\n+            Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n+                \"<never-to-any>\"\n+            }\n             Adjust::Deref(None) => \"*\",\n             Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n             Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n@@ -685,15 +687,20 @@ fn adjustment_hints(\n             Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n             // some of these could be represented via `as` casts, but that's not too nice and\n             // handling everything as a prefix expr makes the `(` and `)` insertion easier\n-            Adjust::Pointer(cast) => match cast {\n-                PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n-                PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n-                PointerCast::ClosureFnPointer(Safety::Unsafe) => \"<closure-to-unsafe-fn-pointer>\",\n-                PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n-                PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n-                PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n-                PointerCast::Unsize => \"<unsize>\",\n-            },\n+            Adjust::Pointer(cast) if config.adjustment_hints == AdjustmentHints::Always => {\n+                match cast {\n+                    PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n+                    PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                    PointerCast::ClosureFnPointer(Safety::Unsafe) => {\n+                        \"<closure-to-unsafe-fn-pointer>\"\n+                    }\n+                    PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n+                    PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n+                    PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n+                    PointerCast::Unsize => \"<unsize>\",\n+                }\n+            }\n+            _ => continue,\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),"}, {"sha": "766937d444b78778a76ad11da6c343beb02c12ea", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "patch": "@@ -321,6 +321,8 @@ config_data! {\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n         /// Whether to show inlay type hints for return types of closures.\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n+        /// Whether to show inlay hints for type adjustments.\n+        inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -330,7 +332,8 @@ config_data! {\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n         inlayHints_parameterHints_enable: bool                     = \"true\",\n-        /// Whether to show inlay type hints for compiler inserted reborrows.\n+        /// Whether to show inlay hints for compiler inserted reborrows.\n+        /// This setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\n         inlayHints_reborrowHints_enable: ReborrowHintsDef          = \"\\\"never\\\"\",\n         /// Whether to render leading colons for type hints, and trailing colons for parameter hints.\n         inlayHints_renderColons: bool                              = \"true\",\n@@ -1201,10 +1204,15 @@ impl Config {\n             hide_closure_initialization_hints: self\n                 .data\n                 .inlayHints_typeHints_hideClosureInitialization,\n-            adjustment_hints: match self.data.inlayHints_reborrowHints_enable {\n-                ReborrowHintsDef::Always => ide::AdjustmentHints::Always,\n-                ReborrowHintsDef::Never => ide::AdjustmentHints::Never,\n-                ReborrowHintsDef::Mutable => ide::AdjustmentHints::MutableOnly,\n+            adjustment_hints: match self.data.inlayHints_expressionAdjustmentHints_enable {\n+                AdjustmentHintsDef::Always => ide::AdjustmentHints::Always,\n+                AdjustmentHintsDef::Never => match self.data.inlayHints_reborrowHints_enable {\n+                    ReborrowHintsDef::Always | ReborrowHintsDef::Mutable => {\n+                        ide::AdjustmentHints::ReborrowOnly\n+                    }\n+                    ReborrowHintsDef::Never => ide::AdjustmentHints::Never,\n+                },\n+                AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n             binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self\n@@ -1539,6 +1547,7 @@ mod de_unit_v {\n     named_unit_variant!(all);\n     named_unit_variant!(skip_trivial);\n     named_unit_variant!(mutable);\n+    named_unit_variant!(reborrow);\n     named_unit_variant!(with_block);\n }\n \n@@ -1688,6 +1697,17 @@ enum ReborrowHintsDef {\n     Mutable,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n+enum AdjustmentHintsDef {\n+    #[serde(deserialize_with = \"true_or_always\")]\n+    Always,\n+    #[serde(deserialize_with = \"false_or_never\")]\n+    Never,\n+    #[serde(deserialize_with = \"de_unit_v::reborrow\")]\n+    Reborrow,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum FilesWatcherDef {\n@@ -1997,6 +2017,19 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show mutable reborrow hints.\"\n             ]\n         },\n+        \"AdjustmentHintsDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"reborrow\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show all adjustment hints.\",\n+                \"Never show adjustment hints.\",\n+                \"Only show auto borrow and dereference adjustment hints.\"\n+            ]\n+        },\n         \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {"}, {"sha": "4f40ab25a17f9d513135dfcb6574154e807b54b0", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "patch": "@@ -450,6 +450,11 @@ to always show them).\n --\n Whether to show inlay type hints for return types of closures.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.enable]]rust-analyzer.inlayHints.expressionAdjustmentHints.enable (default: `\"never\"`)::\n++\n+--\n+Whether to show inlay hints for type adjustments.\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --\n@@ -474,7 +479,8 @@ site.\n [[rust-analyzer.inlayHints.reborrowHints.enable]]rust-analyzer.inlayHints.reborrowHints.enable (default: `\"never\"`)::\n +\n --\n-Whether to show inlay type hints for compiler inserted reborrows.\n+Whether to show inlay hints for compiler inserted reborrows.\n+This setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\n --\n [[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n +"}, {"sha": "f14123469b3cb317e3fdbe1daf633ad506055cab", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d841ad116a3d438c4b04db1d895d9cc4991ca2c0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d841ad116a3d438c4b04db1d895d9cc4991ca2c0", "patch": "@@ -935,6 +935,21 @@\n                         \"Only show type hints for return types of closures with blocks.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints for type adjustments.\",\n+                    \"default\": \"never\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"reborrow\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show all adjustment hints.\",\n+                        \"Never show adjustment hints.\",\n+                        \"Only show auto borrow and dereference adjustment hints.\"\n+                    ]\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\",\n@@ -970,7 +985,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.inlayHints.reborrowHints.enable\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n+                    \"markdownDescription\": \"Whether to show inlay hints for compiler inserted reborrows.\\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\",\n                     \"default\": \"never\",\n                     \"type\": \"string\",\n                     \"enum\": ["}]}