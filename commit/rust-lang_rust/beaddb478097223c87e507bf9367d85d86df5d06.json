{"sha": "beaddb478097223c87e507bf9367d85d86df5d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYWRkYjQ3ODA5NzIyM2M4N2U1MDdiZjkzNjdkODVkODZkZjVkMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T15:11:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T15:11:33Z"}, "message": "Intern static tokens", "tree": {"sha": "7490bad360bc226403183d8900c16f170f712626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7490bad360bc226403183d8900c16f170f712626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beaddb478097223c87e507bf9367d85d86df5d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beaddb478097223c87e507bf9367d85d86df5d06", "html_url": "https://github.com/rust-lang/rust/commit/beaddb478097223c87e507bf9367d85d86df5d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beaddb478097223c87e507bf9367d85d86df5d06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e8a845cafb9630caa034b886368160a12dcd64", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e8a845cafb9630caa034b886368160a12dcd64", "html_url": "https://github.com/rust-lang/rust/commit/60e8a845cafb9630caa034b886368160a12dcd64"}], "stats": {"total": 107, "additions": 101, "deletions": 6}, "files": [{"sha": "571b64af4793579fcd9bc8bbaa4cc0571e025127", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=beaddb478097223c87e507bf9367d85d86df5d06", "patch": "@@ -353,5 +353,80 @@ impl SyntaxKind {\n         };\n         Some(tok)\n     }\n+\n+    pub(crate) fn static_text(self) -> Option<&'static str> {\n+        let tok = match self {\n+            SEMI => \";\",\n+            COMMA => \",\",\n+            L_PAREN => \"(\",\n+            R_PAREN => \")\",\n+            L_CURLY => \"{\",\n+            R_CURLY => \"}\",\n+            L_BRACK => \"[\",\n+            R_BRACK => \"]\",\n+            L_ANGLE => \"<\",\n+            R_ANGLE => \">\",\n+            AT => \"@\",\n+            POUND => \"#\",\n+            TILDE => \"~\",\n+            QUESTION => \"?\",\n+            DOLLAR => \"$\",\n+            AMPERSAND => \"&\",\n+            PIPE => \"|\",\n+            PLUS => \"+\",\n+            STAR => \"*\",\n+            SLASH => \"/\",\n+            CARET => \"^\",\n+            PERCENT => \"%\",\n+            DOT => \".\",\n+            DOTDOT => \"..\",\n+            DOTDOTDOT => \"...\",\n+            DOTDOTEQ => \"..=\",\n+            COLON => \":\",\n+            COLONCOLON => \"::\",\n+            EQ => \"=\",\n+            EQEQ => \"==\",\n+            FAT_ARROW => \"=>\",\n+            EXCL => \"!\",\n+            NEQ => \"!=\",\n+            MINUS => \"-\",\n+            THIN_ARROW => \"->\",\n+\n+            USE_KW => \"use\",\n+            FN_KW => \"fn\",\n+            STRUCT_KW => \"struct\",\n+            ENUM_KW => \"enum\",\n+            TRAIT_KW => \"trait\",\n+            IMPL_KW => \"impl\",\n+            TRUE_KW => \"true\",\n+            FALSE_KW => \"false\",\n+            AS_KW => \"as\",\n+            EXTERN_KW => \"extern\",\n+            CRATE_KW => \"crate\",\n+            MOD_KW => \"mod\",\n+            PUB_KW => \"pub\",\n+            SELF_KW => \"self\",\n+            SUPER_KW => \"super\",\n+            IN_KW => \"in\",\n+            WHERE_KW => \"where\",\n+            FOR_KW => \"for\",\n+            LOOP_KW => \"loop\",\n+            WHILE_KW => \"while\",\n+            IF_KW => \"if\",\n+            MATCH_KW => \"match\",\n+            CONST_KW => \"const\",\n+            STATIC_KW => \"static\",\n+            MUT_KW => \"mut\",\n+            UNSAFE_KW => \"unsafe\",\n+            TYPE_KW => \"type\",\n+            REF_KW => \"ref\",\n+            LET_KW => \"let\",\n+            AUTO_KW => \"auto\",\n+            DEFAULT_KW => \"default\",\n+            UNION_KW => \"union\",\n+            _ => return None,\n+        };\n+        Some(tok)\n+    }\n }\n "}, {"sha": "d719c8312f9dd3b95f1b8a2c4a49f3ecf0471274", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=beaddb478097223c87e507bf9367d85d86df5d06", "patch": "@@ -53,6 +53,19 @@ impl SyntaxKind {\n         let tok = match c {\n {%- for t in single_byte_tokens %}\n             '{{t.0}}' => {{t.1}},\n+{%- endfor %}\n+            _ => return None,\n+        };\n+        Some(tok)\n+    }\n+\n+    pub(crate) fn static_text(self) -> Option<&'static str> {\n+        let tok = match self {\n+{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n+            {{t.1}} => \"{{t.0}}\",\n+{%- endfor %}\n+{% for kw in concat(a=keywords, b=contextual_keywords) %}\n+            {{kw | upper}}_KW => \"{{kw}}\",\n {%- endfor %}\n             _ => return None,\n         };"}, {"sha": "cda4e21671b775788a59f8d07963dc62f5a9e329", "filename": "src/yellow/green.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beaddb478097223c87e507bf9367d85d86df5d06/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=beaddb478097223c87e507bf9367d85d86df5d06", "patch": "@@ -81,7 +81,7 @@ fn assert_send_sync() {\n #[derive(Clone, Debug)]\n pub(crate) enum GreenLeaf {\n     Whitespace { newlines: u8, spaces: u8 },\n-    Token { kind: SyntaxKind, text: Arc<str> },\n+    Token { kind: SyntaxKind, text: Option<Arc<str>> },\n }\n \n impl GreenLeaf {\n@@ -96,10 +96,14 @@ impl GreenLeaf {\n                 };\n             }\n         }\n-        GreenLeaf::Token {\n-            kind,\n-            text: text.to_owned().into_boxed_str().into(),\n-        }\n+        let text = match SyntaxKind::static_text(kind) {\n+            Some(t) => {\n+                debug_assert_eq!(t, text);\n+                None\n+            }\n+            None => Some(text.to_owned().into_boxed_str().into()),\n+        };\n+        GreenLeaf::Token { kind, text }\n     }\n \n     pub(crate) fn kind(&self) -> SyntaxKind {\n@@ -117,7 +121,10 @@ impl GreenLeaf {\n                 assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n                 &WS[N_NEWLINES - newlines..N_NEWLINES + spaces]\n             }\n-            GreenLeaf::Token { text, .. } => text,\n+            GreenLeaf::Token { kind, text, } => match text {\n+                None => kind.static_text().unwrap(),\n+                Some(t) => t,\n+            },\n         }\n     }\n "}]}