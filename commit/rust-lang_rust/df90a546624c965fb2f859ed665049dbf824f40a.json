{"sha": "df90a546624c965fb2f859ed665049dbf824f40a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTBhNTQ2NjI0Yzk2NWZiMmY4NTllZDY2NTA0OWRiZjgyNGY0MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T03:52:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T03:52:14Z"}, "message": "Auto merge of #43533 - nrc:macro-save, r=jseyfried,\n\nThree small fixes for save-analysis\n\nFirst commit does some naive deduplication of macro uses. We end up with lots of duplication here because of the weird way we get this data (we extract a use for every span generated by a macro use).\n\nSecond commit is basically a typo fix.\n\nThird commit is a bit interesting, it partially reverts a change from #40939 where temporary variables in format! (and thus println!) got a span with the primary pointing at the value stored into the temporary (e.g., `x` in `println!(\"...\", x)`). If `format!` had a definition it should point at the temporary in the macro def, but since it is built-in, that is not possible (for now), so `DUMMY_SP` is the best we can do (using the span in the callee really breaks save-analysis because it thinks `x` is a definition as well as a reference).\n\nThere aren't a test for this stuff because: the deduplication is filtered by any of the users of save-analysis, so it is purely an efficiency change. I couldn't actually find an example for the second commit that we have any machinery to test, and the third commit is tested by the RLS, so there will be a test once I update the RLS version and and uncomment the previously failing tests).\n\nr? @jseyfried", "tree": {"sha": "ad03779a87d7a44db1dadb6bcba7b4fdf700b015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad03779a87d7a44db1dadb6bcba7b4fdf700b015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df90a546624c965fb2f859ed665049dbf824f40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df90a546624c965fb2f859ed665049dbf824f40a", "html_url": "https://github.com/rust-lang/rust/commit/df90a546624c965fb2f859ed665049dbf824f40a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df90a546624c965fb2f859ed665049dbf824f40a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf74d99b0bc25b5a4e35b0a2865580224ed0ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf74d99b0bc25b5a4e35b0a2865580224ed0ef8", "html_url": "https://github.com/rust-lang/rust/commit/ebf74d99b0bc25b5a4e35b0a2865580224ed0ef8"}, {"sha": "27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69", "html_url": "https://github.com/rust-lang/rust/commit/27b9182d5bc07d87a34c3a1ffda99d54ca2fec69"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "ca4e84526152411abab43a6fdabe132af7b07ab0", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -1508,6 +1508,7 @@ dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "00b01994eb8b56ceceefb7c3a17cc48cbeda30eb", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f74e8cb216083172a2ddd3cb52bc1e4956b5aaf4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -29,6 +29,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::Node;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n+use rustc_data_structures::fx::FxHashSet;\n \n use std::path::Path;\n \n@@ -74,6 +75,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n     // mac_defs: HashSet<Span>,\n+    macro_calls: FxHashSet<Span>,\n }\n \n impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n@@ -89,6 +91,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: HashSet::new(),\n+            macro_calls: FxHashSet(),\n         }\n     }\n \n@@ -972,11 +975,19 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     /// callsite spans to record macro definition and use data, using the\n     /// mac_uses and mac_defs sets to prevent multiples.\n     fn process_macro_use(&mut self, span: Span) {\n+        let source_span = span.source_callsite();\n+        if self.macro_calls.contains(&source_span) {\n+            return;\n+        }\n+        self.macro_calls.insert(source_span);\n+\n         let data = match self.save_ctxt.get_macro_use_data(span) {\n             None => return,\n             Some(data) => data,\n         };\n \n+        self.dumper.macro_use(data);\n+\n         // FIXME write the macro def\n         // let mut hasher = DefaultHasher::new();\n         // data.callee_span.hash(&mut hasher);\n@@ -996,7 +1007,6 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         //         }.lower(self.tcx));\n         //     }\n         // }\n-        self.dumper.macro_use(data);\n     }\n \n     fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {"}, {"sha": "1dd0df4108fc6dc5708c0079c1ec19d033c7934e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -23,6 +23,7 @@\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate rustc_data_structures;\n extern crate rustc_serialize;\n extern crate rustc_typeck;\n extern crate syntax_pos;"}, {"sha": "e771da2ed4cebfa9a7d9b014cd4fc7b4bfd9a95a", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -398,9 +398,10 @@ impl<'a> SpanUtils<'a> {\n             return false;\n         }\n         // If sub_span is none, filter out generated code.\n-        if sub_span.is_none() {\n-            return true;\n-        }\n+        let sub_span = match sub_span {\n+            Some(ss) => ss,\n+            None => return true,\n+        };\n \n         //If the span comes from a fake filemap, filter it.\n         if !self.sess.codemap().lookup_char_pos(parent.lo).file.is_real_file() {\n@@ -409,7 +410,7 @@ impl<'a> SpanUtils<'a> {\n \n         // Otherwise, a generated span is deemed invalid if it is not a sub-span of the root\n         // callsite. This filters out macro internal variables and most malformed spans.\n-        !parent.source_callsite().contains(parent)\n+        !parent.source_callsite().contains(sub_span)\n     }\n }\n "}, {"sha": "9734bb867f1d80e0af7a8cdc6b1112d3ba2943f8", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df90a546624c965fb2f859ed665049dbf824f40a/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=df90a546624c965fb2f859ed665049dbf824f40a", "patch": "@@ -20,7 +20,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n use syntax::tokenstream;\n \n use std::collections::{HashMap, HashSet};\n@@ -558,8 +558,10 @@ impl<'a, 'b> Context<'a, 'b> {\n         // passed to this function.\n         for (i, e) in self.args.into_iter().enumerate() {\n             let name = self.ecx.ident_of(&format!(\"__arg{}\", i));\n-            let span =\n-                Span { ctxt: e.span.ctxt.apply_mark(self.ecx.current_expansion.mark), ..e.span };\n+            let span = Span {\n+                ctxt: e.span.ctxt.apply_mark(self.ecx.current_expansion.mark),\n+                ..DUMMY_SP\n+            };\n             pats.push(self.ecx.pat_ident(span, name));\n             for ref arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));"}]}