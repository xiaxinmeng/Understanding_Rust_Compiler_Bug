{"sha": "140c1650e81649c8bf94a27b7b02aa327bd7def1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MGMxNjUwZTgxNjQ5YzhiZjk0YTI3YjdiMDJhYTMyN2JkN2RlZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T18:30:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T18:30:53Z"}, "message": "Auto merge of #3600 - xfix:cast-ref-to-mut, r=flip1995\n\ncast_ref_to_mut lint\n\nI see this pattern way too often, and it's completely wrong. In fact, due to how common this incorrect pattern is, [the Rustonomicon specifically points this out](https://doc.rust-lang.org/nomicon/transmutes.html).\n\n> - Transmuting an & to &mut is UB\n>   - Transmuting an & to &mut is always UB\n>   - No you can't do it\n>   - No you're not special\n\nThis is my first lint.", "tree": {"sha": "5aeb24faf963bae5e2ec258b869b1e335c4a36a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aeb24faf963bae5e2ec258b869b1e335c4a36a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140c1650e81649c8bf94a27b7b02aa327bd7def1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140c1650e81649c8bf94a27b7b02aa327bd7def1", "html_url": "https://github.com/rust-lang/rust/commit/140c1650e81649c8bf94a27b7b02aa327bd7def1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140c1650e81649c8bf94a27b7b02aa327bd7def1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd94d3b93ca27453a92f61cd8972b363b4f7c9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd94d3b93ca27453a92f61cd8972b363b4f7c9d2", "html_url": "https://github.com/rust-lang/rust/commit/dd94d3b93ca27453a92f61cd8972b363b4f7c9d2"}, {"sha": "27ea638a15b5d71e06a2dcc3cc996f35b4ab3bd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ea638a15b5d71e06a2dcc3cc996f35b4ab3bd1", "html_url": "https://github.com/rust-lang/rust/commit/27ea638a15b5d71e06a2dcc3cc996f35b4ab3bd1"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "7acf9bc1eaa8c7991fc0c5b9285d900f6d1b9f3a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -634,6 +634,7 @@ All notable changes to this project will be documented in this file.\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n [`cast_precision_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\n [`cast_ptr_alignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment\n+[`cast_ref_to_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ref_to_mut\n [`cast_sign_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\n [`char_lit_as_u8`]: https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8\n [`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp"}, {"sha": "8ca10da416ddba62696cc2cba4d5e31d621807d4", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "35c00fb63284b13938147172607fcec5a2d81e8b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -486,6 +486,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n     reg.register_late_lint_pass(box redundant_clone::RedundantClone);\n     reg.register_late_lint_pass(box slow_vector_initialization::Pass);\n+    reg.register_late_lint_pass(box types::RefToMut);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -758,6 +759,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::BOX_VEC,\n         types::CAST_LOSSLESS,\n         types::CAST_PTR_ALIGNMENT,\n+        types::CAST_REF_TO_MUT,\n         types::CHAR_LIT_AS_U8,\n         types::FN_TO_NUMERIC_CAST,\n         types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n@@ -989,6 +991,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::CAST_PTR_ALIGNMENT,\n+        types::CAST_REF_TO_MUT,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "f9ed38e52a02235f34cfd4522ad4c0cbd758ebd1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -2240,3 +2240,64 @@ impl<'a, 'b, 'tcx: 'a + 'b> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }\n+\n+/// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n+///\n+/// **Why is this bad?** It\u2019s basically guaranteed to be undefined behaviour.\n+/// `UnsafeCell` is the only way to obtain aliasable data that is considered\n+/// mutable.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn x(r: &i32) {\n+///     unsafe {\n+///         *(r as *const _ as *mut _) += 1;\n+///     }\n+/// }\n+/// ```\n+///\n+/// Instead consider using interior mutability types.\n+///\n+/// ```rust\n+/// fn x(r: &UnsafeCell<i32>) {\n+///     unsafe {\n+///         *r.get() += 1;\n+///     }\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub CAST_REF_TO_MUT,\n+    correctness,\n+    \"a cast of reference to a mutable pointer\"\n+}\n+\n+pub struct RefToMut;\n+\n+impl LintPass for RefToMut {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CAST_REF_TO_MUT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.node;\n+            if let ExprKind::Cast(e, t) = &e.node;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutMutable, .. }) = t.node;\n+            if let ExprKind::Cast(e, t) = &e.node;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutImmutable, .. }) = t.node;\n+            if let ty::Ref(..) = cx.tables.node_id_to_type(e.hir_id).sty;\n+            then {\n+                span_lint(\n+                    cx,\n+                    CAST_REF_TO_MUT,\n+                    expr.span,\n+                    \"casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "967e8e4673963a6abed18c5a907972e1a49dd479", "filename": "tests/ui/cast_ref_to_mut.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/tests%2Fui%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/tests%2Fui%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.rs?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::cast_ref_to_mut)]\n+#![allow(clippy::no_effect)]\n+\n+extern \"C\" {\n+    // NB. Mutability can be easily incorrect in FFI calls, as\n+    // in C, the default are mutable pointers.\n+    fn ffi(c: *mut u8);\n+    fn int_ffi(c: *mut i32);\n+}\n+\n+fn main() {\n+    let s = String::from(\"Hello\");\n+    let a = &s;\n+    unsafe {\n+        let num = &3i32;\n+        let mut_num = &mut 3i32;\n+        // Should be warned against\n+        (*(a as *const _ as *mut String)).push_str(\" world\");\n+        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+        *(a as *const _ as *mut String) += \" world\";\n+        // Shouldn't be warned against\n+        println!(\"{}\", *(num as *const _ as *const i16));\n+        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n+        ffi(a.as_ptr() as *mut _);\n+        int_ffi(num as *const _ as *mut _);\n+        int_ffi(&3 as *const _ as *mut _);\n+        let mut value = 3;\n+        let value: *const i32 = &mut value;\n+        *(value as *const i16 as *mut i16) = 42;\n+    }\n+}"}, {"sha": "448a66cfcce051702313210d4baab22cef90f6ab", "filename": "tests/ui/cast_ref_to_mut.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/140c1650e81649c8bf94a27b7b02aa327bd7def1/tests%2Fui%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/140c1650e81649c8bf94a27b7b02aa327bd7def1/tests%2Fui%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.stderr?ref=140c1650e81649c8bf94a27b7b02aa327bd7def1", "patch": "@@ -0,0 +1,22 @@\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:18:9\n+   |\n+LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`\n+\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:19:9\n+   |\n+LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:20:9\n+   |\n+LL |         *(a as *const _ as *mut String) += \" world\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}