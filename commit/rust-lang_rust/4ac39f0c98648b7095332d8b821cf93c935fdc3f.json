{"sha": "4ac39f0c98648b7095332d8b821cf93c935fdc3f", "node_id": "C_kwDOAAsO6NoAKDRhYzM5ZjBjOTg2NDhiNzA5NTMzMmQ4YjgyMWNmOTNjOTM1ZmRjM2Y", "commit": {"author": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-04-27T16:05:04Z"}, "committer": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-05-02T15:08:56Z"}, "message": "Propagating `sysroot` down + Refactoring", "tree": {"sha": "a1539e727ceb8f75169811e2399630fdb171430c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1539e727ceb8f75169811e2399630fdb171430c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac39f0c98648b7095332d8b821cf93c935fdc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE83x4qCmEA5TzaAMiEJh17BFTUhIFAmRRJ4gACgkQEJh17BFT\nUhKPRxAAqNhWnNaYdQsXFMC+Sp09PG+jYqQsJseT78fe6mPl6frxB1gFDHuhc0kr\n9uq5a/3JRO5l8sY6R0nFqu4pvc9bR9Z7vpQy1zFHwwAXalgkxZxdfQ+A0nEfN8LR\nsDp0yzp4OgSvKOgrRYhTofws7wZzuLqsFnQOGRDuOo7fitf7pbPn6t0X6/avttyw\nmZLnMLdcojanncltMrsFxc8fSxlMB5H83JaIul748BN9SaPADA0Oym+nDZ19k8WE\niCUE8CV2oF5TP4OLsXrp6Rvyp4zVnq2bQwttlFxetjQPsUvA2xMfOw9moy5KexMG\noWjtzz4XAN4qy8NnBch97Vqj8D4hDmWMFWXCLFxgPKGYI1BmRZsx9C6qQwhwCs+o\nRAuGq0pm03UjxsoXw1WsKdW12w8ZPUg/dB5ztITqU8kN7b0di4DL37EECF5IEp/i\ndiH45v4dAJ0TwZbak8FcuQhOhxodK4pb0MbaBT6Dutt9BwhMzP0d9h7yceXMGB/F\n/1dQEDR0DXs9WpxzTtkCX6cxMzpth0W86mzvkcZT688McMstJw1qEdYtEKDKBtm0\n2TTmwCdKn2P1vk//zUk3LYJRfrugPUQBvt/7Tq1mXeUpP9zO2rCXx2xTMrUg9q6o\nt37oXuJbKQEdF2UvDDhHcjWkPboGUq9jS93EnyXtYOlSYkhz2Ko=\n=oC5p\n-----END PGP SIGNATURE-----", "payload": "tree a1539e727ceb8f75169811e2399630fdb171430c\nparent 67e58c5ba611c421e9b55061a7620af05c7702f0\nauthor Ddystopia <alexanderbabak@proton.me> 1682611504 +0200\ncommitter Ddystopia <alexanderbabak@proton.me> 1683040136 +0200\n\nPropagating `sysroot` down + Refactoring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac39f0c98648b7095332d8b821cf93c935fdc3f", "html_url": "https://github.com/rust-lang/rust/commit/4ac39f0c98648b7095332d8b821cf93c935fdc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac39f0c98648b7095332d8b821cf93c935fdc3f/comments", "author": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e58c5ba611c421e9b55061a7620af05c7702f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e58c5ba611c421e9b55061a7620af05c7702f0", "html_url": "https://github.com/rust-lang/rust/commit/67e58c5ba611c421e9b55061a7620af05c7702f0"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "92021da4c09457990e50d2cdae45cd63531abeab", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=4ac39f0c98648b7095332d8b821cf93c935fdc3f", "patch": "@@ -133,6 +133,7 @@ pub(crate) fn external_docs(\n     db: &RootDatabase,\n     position: &FilePosition,\n     target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n ) -> Option<DocumentationLinks> {\n     let sema = &Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n@@ -163,7 +164,7 @@ pub(crate) fn external_docs(\n         }\n     };\n \n-    Some(get_doc_links(db, definition, target_dir))\n+    Some(get_doc_links(db, definition, target_dir, sysroot))\n }\n \n /// Extracts all links from a given markdown text returning the definition text range, link-text\n@@ -325,14 +326,15 @@ fn get_doc_links(\n     db: &RootDatabase,\n     def: Definition,\n     target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n ) -> DocumentationLinks {\n     let join_url = |base_url: Option<Url>, path: &str| -> Option<Url> {\n         base_url.and_then(|url| url.join(path).ok())\n     };\n \n     let Some((target, file, frag)) = filename_and_frag_for_def(db, def) else { return Default::default(); };\n \n-    let (mut web_url, mut local_url) = get_doc_base_urls(db, target, target_dir);\n+    let (mut web_url, mut local_url) = get_doc_base_urls(db, target, target_dir, sysroot);\n \n     if let Some(path) = mod_path_of_def(db, target) {\n         web_url = join_url(web_url, &path);\n@@ -360,7 +362,7 @@ fn rewrite_intra_doc_link(\n     let (link, ns) = parse_intra_doc_link(target);\n \n     let resolved = resolve_doc_path_for_def(db, def, link, ns)?;\n-    let mut url = get_doc_base_urls(db, resolved, None).0?;\n+    let mut url = get_doc_base_urls(db, resolved, None, None).0?;\n \n     let (_, file, frag) = filename_and_frag_for_def(db, resolved)?;\n     if let Some(path) = mod_path_of_def(db, resolved) {\n@@ -379,7 +381,7 @@ fn rewrite_url_link(db: &RootDatabase, def: Definition, target: &str) -> Option<\n         return None;\n     }\n \n-    let mut url = get_doc_base_urls(db, def, None).0?;\n+    let mut url = get_doc_base_urls(db, def, None, None).0?;\n     let (def, file, frag) = filename_and_frag_for_def(db, def)?;\n \n     if let Some(path) = mod_path_of_def(db, def) {\n@@ -461,27 +463,29 @@ fn get_doc_base_urls(\n     db: &RootDatabase,\n     def: Definition,\n     target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n ) -> (Option<Url>, Option<Url>) {\n-    let local_doc_path = target_dir\n-        .and_then(|path: &OsStr| -> Option<Url> {\n-            let mut with_prefix = OsStr::new(\"file:///\").to_os_string();\n-            with_prefix.push(path);\n-            with_prefix.push(\"/\");\n-            with_prefix.to_str().and_then(|s| Url::parse(s).ok())\n-        })\n+    let local_doc = target_dir\n+        .and_then(|path| path.to_str())\n+        .and_then(|path| Url::parse(&format!(\"file:///{path}/\")).ok())\n         .and_then(|it| it.join(\"doc/\").ok());\n+    let system_doc = sysroot\n+        .and_then(|it| it.to_str())\n+        .map(|sysroot| format!(\"file:///{sysroot}/share/doc/rust/html/\"))\n+        .and_then(|it| Url::parse(&it).ok());\n+\n     // special case base url of `BuiltinType` to core\n     // https://github.com/rust-lang/rust-analyzer/issues/12250\n     if let Definition::BuiltinType(..) = def {\n-        let weblink = Url::parse(\"https://doc.rust-lang.org/nightly/core/\").ok();\n-        return (weblink, None);\n+        let web_link = Url::parse(\"https://doc.rust-lang.org/nightly/core/\").ok();\n+        let system_link = system_doc.and_then(|it| it.join(\"core/\").ok());\n+        return (web_link, system_link);\n     };\n \n     let Some(krate) = def.krate(db) else { return Default::default() };\n     let Some(display_name) = krate.display_name(db) else { return Default::default() };\n     let crate_data = &db.crate_graph()[krate.into()];\n     let channel = crate_data.channel.map_or(\"nightly\", ReleaseChannel::as_str);\n-    let sysroot = \"/home/ddystopia/.rustup/toolchains/stable-x86_64-unknown-linux-gnu\";\n \n     let (web_base, local_base) = match &crate_data.origin {\n         // std and co do not specify `html_root_url` any longer so we gotta handwrite this ourself.\n@@ -493,13 +497,10 @@ fn get_doc_base_urls(\n             | LangCrateOrigin::Std\n             | LangCrateOrigin::Test),\n         ) => {\n-            let local_url = format!(\"file:///{sysroot}/share/doc/rust/html/{origin}/index.html\");\n-            let local_url = Url::parse(&local_url).ok();\n+            let system_url = system_doc.and_then(|it| it.join(&format!(\"{origin}\")).ok());\n             let web_url = format!(\"https://doc.rust-lang.org/{channel}/{origin}\");\n-            println!(\"local_url: {:?}\", local_url.unwrap().to_string());\n-            panic!();\n-            (Some(web_url), local_url)\n-        },\n+            (Some(web_url), system_url)\n+        }\n         CrateOrigin::Lang(_) => return (None, None),\n         CrateOrigin::Rustc { name: _ } => {\n             (Some(format!(\"https://doc.rust-lang.org/{channel}/nightly-rustc/\")), None)\n@@ -519,7 +520,7 @@ fn get_doc_base_urls(\n                     version = version.as_deref().unwrap_or(\"*\")\n                 ))\n             });\n-            (weblink, local_doc_path)\n+            (weblink, local_doc)\n         }\n         CrateOrigin::Library { repo: _, name } => {\n             let weblink = krate.get_html_root_url(db).or_else(|| {\n@@ -535,7 +536,7 @@ fn get_doc_base_urls(\n                     version = version.as_deref().unwrap_or(\"*\")\n                 ))\n             });\n-            (weblink, local_doc_path)\n+            (weblink, local_doc)\n         }\n     };\n     let web_base = web_base"}, {"sha": "05a64b33bfdc9b4c6caf71f19ff71a7bd8b838c7", "filename": "crates/ide/src/doc_links/tests.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs?ref=4ac39f0c98648b7095332d8b821cf93c935fdc3f", "patch": "@@ -20,9 +20,10 @@ fn check_external_docs(\n     target_dir: Option<&OsStr>,\n     expect_web_url: Option<Expect>,\n     expect_local_url: Option<Expect>,\n+    sysroot: Option<&OsStr>,\n ) {\n     let (analysis, position) = fixture::position(ra_fixture);\n-    let links = analysis.external_docs(position, target_dir).unwrap();\n+    let links = analysis.external_docs(position, target_dir, sysroot).unwrap();\n \n     let web_url = links.web_url;\n     let local_url = links.local_url;\n@@ -128,7 +129,8 @@ let x: u3$02 = 0;\n \"#,\n         Some(&OsStr::new(\"/home/user/project\")),\n         Some(expect![[r#\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\"#]]),\n-        None,\n+        Some(expect![[r#\"file:///sysroot/share/doc/rust/html/core/primitive.u32.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -144,6 +146,7 @@ pub struct Foo;\n         Some(&OsStr::new(\"/home/user/project\")),\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]]),\n         Some(expect![[r#\"file:///home/user/project/doc/foo/index.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -156,7 +159,8 @@ use self$0;\n \"#,\n         Some(&OsStr::new(\"/home/user/project\")),\n         Some(expect![\"https://doc.rust-lang.org/stable/std/index.html\"]),\n-        None,\n+        Some(expect![\"file:///sysroot/share/doc/rust/html/std/index.html\"]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -170,6 +174,7 @@ pub struct Fo$0o;\n         Some(&OsStr::new(\"/home/user/project\")),\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n         Some(expect![[r#\"file:///home/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -183,6 +188,7 @@ pub struct Fo$0o;\n         Some(&OsStr::new(r\"C:\\Users\\user\\project\")),\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n         Some(expect![[r#\"file:///C:/Users/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -196,6 +202,7 @@ pub struct Fo$0o;\n         Some(&OsStr::new(r\"C:/Users/user/project\")),\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n         Some(expect![[r#\"file:///C:/Users/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -211,6 +218,7 @@ pub struct Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]]),\n         None,\n+        None,\n     );\n }\n \n@@ -224,6 +232,7 @@ pub fn fo$0o() {}\n         None,\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]]),\n         None,\n+        None,\n     );\n }\n \n@@ -240,6 +249,7 @@ impl Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]]),\n         None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -252,6 +262,7 @@ impl Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]]),\n         None,\n+        None,\n     );\n }\n \n@@ -271,6 +282,7 @@ impl Trait for Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]]),\n         None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -286,6 +298,7 @@ impl Trait for Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]]),\n         None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -301,6 +314,7 @@ impl Trait for Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]]),\n         None,\n+        None,\n     );\n }\n \n@@ -316,6 +330,7 @@ pub trait Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]]),\n         None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -327,6 +342,7 @@ pub trait Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]]),\n         None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -338,6 +354,7 @@ pub trait Foo {\n         None,\n         Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]]),\n         None,\n+        None,\n     );\n }\n \n@@ -351,6 +368,7 @@ trait Trait$0 {}\n         None,\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]]),\n         None,\n+        None,\n     )\n }\n \n@@ -366,6 +384,7 @@ pub mod foo {\n         None,\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]]),\n         None,\n+        None,\n     )\n }\n \n@@ -389,6 +408,7 @@ fn foo() {\n         None,\n         Some(expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]]),\n         None,\n+        None,\n     )\n }\n "}, {"sha": "1af4d39265f43d9b5cddbdfb601abc824b2249cb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=4ac39f0c98648b7095332d8b821cf93c935fdc3f", "patch": "@@ -475,8 +475,11 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         target_dir: Option<&OsStr>,\n+        sysroot: Option<&OsStr>,\n     ) -> Cancellable<doc_links::DocumentationLinks> {\n-        self.with_db(|db| doc_links::external_docs(db, &position, target_dir).unwrap_or_default())\n+        self.with_db(|db| {\n+            doc_links::external_docs(db, &position, target_dir, sysroot).unwrap_or_default()\n+        })\n     }\n \n     /// Computes parameter information at the given position."}, {"sha": "65541bfe14147d55070f298552226df4f62d5a77", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac39f0c98648b7095332d8b821cf93c935fdc3f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=4ac39f0c98648b7095332d8b821cf93c935fdc3f", "patch": "@@ -1534,27 +1534,34 @@ pub(crate) fn handle_semantic_tokens_range(\n \n pub(crate) fn handle_open_docs(\n     snap: GlobalStateSnapshot,\n-    params: lsp_types::TextDocumentPositionParams,\n-) -> Result<(Option<lsp_types::Url>, Option<lsp_types::Url>)> {\n+        params: lsp_types::TextDocumentPositionParams,\n+    ) -> Result<(Option<lsp_types::Url>, Option<lsp_types::Url>)> {\n     let _p = profile::span(\"handle_open_docs\");\n-    let file_uri = &params.text_document.uri;\n-    let file_id = from_proto::file_id(&snap, file_uri)?;\n     let position = from_proto::file_position(&snap, params)?;\n \n-    let cargo = match &*snap.analysis.crates_for(file_id)? {\n-        &[crate_id, ..] => snap.cargo_target_for_crate_root(crate_id).map(|(it, _)| it),\n-        _ => None,\n-    };\n+    let ws_and_sysroot = snap.workspaces.iter().find_map(|ws| match ws {\n+                ProjectWorkspace::Cargo { cargo, sysroot, .. } => Some((cargo, sysroot.as_ref().ok())),\n+                    ProjectWorkspace::Json { .. } => None,\n+                    ProjectWorkspace::DetachedFiles { .. } => None,\n+                });\n \n+    let (cargo, sysroot) = match ws_and_sysroot {\n+                Some((ws, Some(sysroot))) => (Some(ws), Some(sysroot)),\n+                    _ => (None, None),\n+                };\n+\n+    let sysroot = sysroot.map(|p| p.root().as_os_str());\n     let target_dir = cargo.map(|cargo| cargo.target_directory()).map(|p| p.as_os_str());\n-    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir) else { return Ok((None, None)); };\n+\n+    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir, sysroot) else { return Ok((None, None)); };\n \n     let web_url = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());\n     let local_url = remote_urls.local_url.and_then(|it| Url::parse(&it).ok());\n \n     Ok((web_url, local_url))\n }\n \n+\n pub(crate) fn handle_open_cargo_toml(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::OpenCargoTomlParams,"}]}