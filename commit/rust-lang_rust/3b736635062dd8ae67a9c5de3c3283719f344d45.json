{"sha": "3b736635062dd8ae67a9c5de3c3283719f344d45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzM2NjM1MDYyZGQ4YWU2N2E5YzVkZTNjMzI4MzcxOWYzNDRkNDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-27T12:00:35Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-27T12:00:35Z"}, "message": "Update to latest rustc version", "tree": {"sha": "4eb41ef866e90298365dc34739f9c1442c279db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb41ef866e90298365dc34739f9c1442c279db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b736635062dd8ae67a9c5de3c3283719f344d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b736635062dd8ae67a9c5de3c3283719f344d45", "html_url": "https://github.com/rust-lang/rust/commit/3b736635062dd8ae67a9c5de3c3283719f344d45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b736635062dd8ae67a9c5de3c3283719f344d45/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ecb7f33cbae3c79af122248e9232c6e52c923e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ecb7f33cbae3c79af122248e9232c6e52c923e", "html_url": "https://github.com/rust-lang/rust/commit/f2ecb7f33cbae3c79af122248e9232c6e52c923e"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "66343b70afde1fbfed35bf705d980c8073739997", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -1,10 +1,9 @@\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::lint::*;\n-use rustc::ty;\n use rustc_const_eval::lookup_const_by_id;\n use syntax::ast::LitKind;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::codemap::Span;\n use utils::span_lint;\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n@@ -252,7 +251,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n             if let Def::Const(def_id) = def {\n                 lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| {\n                     let body = if let Some(id) = cx.tcx.hir.as_local_node_id(l) {\n-                        ty::queries::mir_const_qualif::get(cx.tcx, DUMMY_SP, def_id);\n+                        cx.tcx.mir_const_qualif(def_id);\n                         cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))\n                     } else {\n                         cx.tcx.sess.cstore.item_body(cx.tcx, def_id)"}, {"sha": "f6a68f267fee760ad5bf631e6a0fb9ba4ca77813", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -13,7 +13,6 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind, StrStyle, NodeId};\n use syntax::ptr::P;\n-use syntax::codemap::DUMMY_SP;\n \n #[derive(Debug, Copy, Clone)]\n pub enum FloatWidth {\n@@ -290,11 +289,11 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 if let Some((const_expr, _)) = lookup_const_by_id(self.tcx, def_id, substs) {\n                     let mut cx = ConstEvalLateContext {\n                         tcx: self.tcx,\n-                        tables: self.tcx.item_tables(const_expr),\n+                        tables: self.tcx.typeck_tables_of(const_expr),\n                         needed_resolution: false,\n                     };\n                     let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                        ty::queries::mir_const_qualif::get(self.tcx, DUMMY_SP, def_id);\n+                        self.tcx.mir_const_qualif(def_id);\n                         self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                     } else {\n                         self.tcx.sess.cstore.item_body(self.tcx, def_id)"}, {"sha": "efbc7c65ff0ceea1e556d367d55e300ac82d8a9d", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -73,7 +73,7 @@ impl LintPass for Derive {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n-            let ty = cx.tcx.item_type(cx.tcx.hir.local_def_id(item.id));\n+            let ty = cx.tcx.type_of(cx.tcx.hir.local_def_id(item.id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -97,7 +97,7 @@ fn check_hash_peq<'a, 'tcx>(\n         match_path_old(&trait_ref.path, &paths::HASH),\n         let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()\n     ], {\n-        let peq_trait_def = cx.tcx.lookup_trait_def(peq_trait_def_id);\n+        let peq_trait_def = cx.tcx.trait_def(peq_trait_def_id);\n \n         // Look for the PartialEq implementations for `ty`\n         peq_trait_def.for_each_relevant_impl(cx.tcx, ty, |impl_id| {"}, {"sha": "431e8779842f0ae0519868debbf6a136dc4d5ff3", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -34,7 +34,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         let did = cx.tcx.hir.local_def_id(item.id);\n         if let ItemEnum(..) = item.node {\n-            let ty = cx.tcx.item_type(did);\n+            let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n                 span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |db| {"}, {"sha": "4e9c792c42af6d6be029564d0f327dcf56a969b4", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         let did = cx.tcx.hir.local_def_id(item.id);\n         if let ItemEnum(ref def, _) = item.node {\n-            let ty = cx.tcx.item_type(did);\n+            let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n \n             let mut smallest_variant: Option<(_, _)> = None;\n@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                 let size: u64 = variant.fields\n                     .iter()\n                     .map(|f| {\n-                        let ty = cx.tcx.item_type(f.did);\n+                        let ty = cx.tcx.type_of(f.did);\n                         if ty.needs_subst() {\n                             0 // we can't reason about generics, so we treat them as zero sized\n                         } else {"}, {"sha": "49051da12bbacf72d95e787ec9008e61c17aad06", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -94,7 +94,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n             has_self &&\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n-                let impl_ty = cx.tcx.item_type(did);\n+                let impl_ty = cx.tcx.type_of(did);\n                 impl_ty.fn_args().skip_binder().len() == 1\n             }\n         } else {\n@@ -121,7 +121,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n             has_self &&\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n-                let impl_ty = cx.tcx.item_type(did);\n+                let impl_ty = cx.tcx.type_of(did);\n                 impl_ty.fn_args().skip_binder().len() == 1\n             }\n         } else {\n@@ -142,7 +142,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n         if cx.access_levels.is_exported(i.id.node_id) {\n             let def_id = cx.tcx.hir.local_def_id(item.id);\n-            let ty = cx.tcx.item_type(def_id);\n+            let ty = cx.tcx.type_of(def_id);\n \n             span_lint(cx,\n                       LEN_WITHOUT_IS_EMPTY,\n@@ -186,7 +186,7 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n     fn is_is_empty(cx: &LateContext, item: &ty::AssociatedItem) -> bool {\n         if let ty::AssociatedKind::Method = item.kind {\n             if item.name == \"is_empty\" {\n-                let sig = cx.tcx.item_type(item.def_id).fn_sig();\n+                let sig = cx.tcx.type_of(item.def_id).fn_sig();\n                 let ty = sig.skip_binder();\n                 ty.inputs().len() == 1\n             } else {"}, {"sha": "57d7b1e843e40a8de7b2333bc7ff22db3b47fe62", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -281,14 +281,14 @@ impl<'v, 't> RefVisitor<'v, 't> {\n                 match self.cx.tables.qpath_def(qpath, ty.id) {\n                     Def::TyAlias(def_id) |\n                     Def::Struct(def_id) => {\n-                        let generics = self.cx.tcx.item_generics(def_id);\n+                        let generics = self.cx.tcx.generics_of(def_id);\n                         for _ in generics.regions.as_slice() {\n                             self.record(&None);\n                         }\n                     },\n                     Def::Trait(def_id) => {\n                         let trait_def = self.cx.tcx.maps.trait_def.borrow()[&def_id];\n-                        for _ in &self.cx.tcx.item_generics(trait_def.def_id).regions {\n+                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n                             self.record(&None);\n                         }\n                     },"}, {"sha": "ced769e606af000f1a12fcac35931e8131df5e1c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -657,7 +657,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n \n             // check conventions w.r.t. conversion method names and predicates\n-            let ty = cx.tcx.item_type(cx.tcx.hir.local_def_id(item.id));\n+            let ty = cx.tcx.type_of(cx.tcx.hir.local_def_id(item.id));\n             let is_copy = is_copy(cx, ty, item.id);\n             for &(ref conv, self_kinds) in &CONVENTIONS {\n                 if_let_chain! {["}, {"sha": "8cf5bfd07700771e1e0f13f35304625138e380cd", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n-        let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+        let fn_sig = cx.tcx.type_of(fn_def_id).fn_sig();\n         let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, &fn_sig);\n \n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {"}, {"sha": "7087ec698f42685a500026873ae84ec64b71dd78", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n             }\n             if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx\n-                    .item_type(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n+                    .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     same_tys(cx, self_ty, return_ty(cx, id), id),"}, {"sha": "c3c35c17bdb96e476eb7bc5f80f183102158d21f", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n \n fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_id);\n-    let sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+    let sig = cx.tcx.type_of(fn_def_id).fn_sig();\n     let fn_ty = sig.skip_binder();\n \n     for (arg, ty) in decl.inputs.iter().zip(fn_ty.inputs()) {"}, {"sha": "bd5cdbc47db7c6929df4fafed1412a9593d8d44c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -364,26 +364,26 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n             }\n         },\n         hir::ItemUse(ref path, ref kind) => println!(\"{:?}, {:?}\", path, kind),\n-        hir::ItemStatic(..) => println!(\"static item of type {:#?}\", cx.tcx.item_type(did)),\n-        hir::ItemConst(..) => println!(\"const item of type {:#?}\", cx.tcx.item_type(did)),\n+        hir::ItemStatic(..) => println!(\"static item of type {:#?}\", cx.tcx.type_of(did)),\n+        hir::ItemConst(..) => println!(\"const item of type {:#?}\", cx.tcx.type_of(did)),\n         hir::ItemFn(..) => {\n-            let item_ty = cx.tcx.item_type(did);\n+            let item_ty = cx.tcx.type_of(did);\n             println!(\"function of type {:#?}\", item_ty);\n         },\n         hir::ItemMod(..) => println!(\"module\"),\n         hir::ItemForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n         hir::ItemGlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n         hir::ItemTy(..) => {\n-            println!(\"type alias for {:?}\", cx.tcx.item_type(did));\n+            println!(\"type alias for {:?}\", cx.tcx.type_of(did));\n         },\n         hir::ItemEnum(..) => {\n-            println!(\"enum definition of type {:?}\", cx.tcx.item_type(did));\n+            println!(\"enum definition of type {:?}\", cx.tcx.type_of(did));\n         },\n         hir::ItemStruct(..) => {\n-            println!(\"struct definition of type {:?}\", cx.tcx.item_type(did));\n+            println!(\"struct definition of type {:?}\", cx.tcx.type_of(did));\n         },\n         hir::ItemUnion(..) => {\n-            println!(\"union definition of type {:?}\", cx.tcx.item_type(did));\n+            println!(\"union definition of type {:?}\", cx.tcx.type_of(did));\n         },\n         hir::ItemTrait(..) => {\n             println!(\"trait decl\");"}, {"sha": "cb00d1cae011c094cf8bc6a989d0ab237cee009f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b736635062dd8ae67a9c5de3c3283719f344d45/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3b736635062dd8ae67a9c5de3c3283719f344d45", "patch": "@@ -784,7 +784,7 @@ pub fn camel_case_from(s: &str) -> usize {\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::Ty<'tcx> {\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n-    let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+    let fn_sig = cx.tcx.type_of(fn_def_id).fn_sig();\n     let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, &fn_sig);\n     fn_sig.output()\n }"}]}