{"sha": "6630678428ee7857da4880dfbab519286e436adc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MzA2Nzg0MjhlZTc4NTdkYTQ4ODBkZmJhYjUxOTI4NmU0MzZhZGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-14T16:54:24Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-19T12:24:24Z"}, "message": "Go through an allocation when accessing fields of constants", "tree": {"sha": "4bbc3bf24b18658b2bd63056feda0c0b86856ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbc3bf24b18658b2bd63056feda0c0b86856ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6630678428ee7857da4880dfbab519286e436adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6630678428ee7857da4880dfbab519286e436adc", "html_url": "https://github.com/rust-lang/rust/commit/6630678428ee7857da4880dfbab519286e436adc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6630678428ee7857da4880dfbab519286e436adc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ddede5c2d2abc4c3b97dd383fcd6809384c323", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ddede5c2d2abc4c3b97dd383fcd6809384c323", "html_url": "https://github.com/rust-lang/rust/commit/76ddede5c2d2abc4c3b97dd383fcd6809384c323"}], "stats": {"total": 125, "additions": 87, "deletions": 38}, "files": [{"sha": "74b8b816848ac2a1c562504064d8aa1f20ce6a51", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -401,8 +401,9 @@ for ::mir::interpret::ConstValue<'gcx> {\n                 a.hash_stable(hcx, hasher);\n                 b.hash_stable(hcx, hasher);\n             }\n-            ByRef(alloc) => {\n+            ByRef(alloc, offset) => {\n                 alloc.hash_stable(hcx, hasher);\n+                offset.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "ad076fe681bee3ce93be156424d3ed638faac5f1", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -9,12 +9,12 @@ use super::{EvalResult, MemoryPointer, PointerArithmetic, Allocation};\n /// matches Value's optimizations for easy conversions between these two types\n #[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n-    // Used only for types with layout::abi::Scalar ABI and ZSTs which use PrimVal::Undef\n+    /// Used only for types with layout::abi::Scalar ABI and ZSTs which use PrimVal::Undef\n     ByVal(PrimVal),\n-    // Used only for types with layout::abi::ScalarPair\n+    /// Used only for types with layout::abi::ScalarPair\n     ByValPair(PrimVal, PrimVal),\n-    // Used only for the remaining cases\n-    ByRef(&'tcx Allocation),\n+    /// Used only for the remaining cases. An allocation + offset into the allocation\n+    ByRef(&'tcx Allocation, u64),\n }\n \n impl<'tcx> ConstValue<'tcx> {"}, {"sha": "0b8f10d311d54af777e8bb62bdae854d7dc74157", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -19,7 +19,7 @@ use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use ty::{Slice, TyS};\n use util::captures::Captures;\n-use mir::interpret::{Allocation, PrimVal, MemoryPointer, Value, ConstValue};\n+use mir::interpret::{PrimVal, MemoryPointer, Value, ConstValue};\n \n use std::iter;\n use std::cmp::Ordering;\n@@ -1767,15 +1767,6 @@ impl<'tcx> Const<'tcx> {\n         Self::from_const_val(tcx, ConstVal::Value(val), ty)\n     }\n \n-    #[inline]\n-    pub fn from_alloc(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        alloc: &'tcx Allocation,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        Self::from_const_value(tcx, ConstValue::ByRef(alloc), ty)\n-    }\n-\n     #[inline]\n     pub fn from_byval_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,"}, {"sha": "9fd2f1bdd7a33bcade7946ad216fc82481c6e287", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -129,7 +129,7 @@ pub fn codegen_static_initializer<'a, 'tcx>(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstVal::Value(ConstValue::ByRef(alloc)) => alloc,\n+        ConstVal::Value(ConstValue::ByRef(alloc, 0)) => alloc,\n         _ => bug!(\"static const eval returned {:#?}\", static_),\n     };\n     Ok(const_alloc_to_llvm(cx, alloc))"}, {"sha": "f6dc81a4706c0351a453861923f50cd531e4c1ef", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::ValueRef;\n+use llvm::{ValueRef, LLVMConstInBoundsGEP};\n use rustc::middle::const_val::ConstEvalErr;\n use rustc::mir;\n use rustc::mir::interpret::ConstValue;\n@@ -137,9 +137,15 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n                 );\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n-            ConstValue::ByRef(alloc) => {\n+            ConstValue::ByRef(alloc, offset) => {\n                 let init = const_alloc_to_llvm(bx.cx, alloc);\n-                let llval = consts::addr_of(bx.cx, init, layout.align, \"byte_str\");\n+                let base_addr = consts::addr_of(bx.cx, init, layout.align, \"byte_str\");\n+\n+                let llval = unsafe { LLVMConstInBoundsGEP(\n+                    consts::bitcast(base_addr, Type::i8p(bx.cx)),\n+                    &C_usize(bx.cx, offset),\n+                    1,\n+                )};\n                 let llval = consts::bitcast(llval, layout.llvm_type(bx.cx).ptr_to());\n                 return Ok(PlaceRef::new_sized(llval, layout, alloc.align).load(bx));\n             },"}, {"sha": "48ab9c8e5dbcdbb285e7c2286a3a79c1283dde54", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -422,22 +422,23 @@ pub fn const_val_field<'a, 'tcx>(\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n         let value = ecx.const_value_to_value(value, ty)?;\n-        let (field, ty) = match value {\n-            Value::ByValPair(..) | Value::ByVal(_) => \n-                ecx.read_field(value, variant, field, ty)?.expect(\"const_val_field on non-field\"),\n-            Value::ByRef(ptr, align) => {\n-                let place = Place::Ptr {\n-                    ptr,\n-                    align,\n-                    extra: variant.map_or(PlaceExtra::None, PlaceExtra::DowncastVariant),\n-                };\n-                let layout = ecx.layout_of(ty)?;\n-                let (place, layout) = ecx.place_field(place, field, layout)?;\n-                let (ptr, align) = place.to_ptr_align();\n-                (Value::ByRef(ptr, align), layout.ty)\n-            }\n+        let layout = ecx.layout_of(ty)?;\n+        let (ptr, align) = match value {\n+            Value::ByRef(ptr, align) => (ptr, align),\n+            Value::ByValPair(..) | Value::ByVal(_) => {\n+                let ptr = ecx.alloc_ptr(ty)?.into();\n+                ecx.write_value_to_ptr(value, ptr, ty)?;\n+                (ptr, layout.align)\n+            },\n         };\n-        Ok(value_to_const_value(&ecx, field, ty))\n+        let place = Place::Ptr {\n+            ptr,\n+            align,\n+            extra: variant.map_or(PlaceExtra::None, PlaceExtra::DowncastVariant),\n+        };\n+        let (place, layout) = ecx.place_field(place, field, layout)?;\n+        let (ptr, align) = place.to_ptr_align();\n+        Ok((Value::ByRef(ptr, align), layout.ty))\n     })();\n     result.map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n@@ -478,7 +479,10 @@ pub fn const_value_to_allocation_provider<'a, 'tcx>(\n     (val, ty): (ConstValue<'tcx>, Ty<'tcx>),\n ) -> &'tcx Allocation {\n     match val {\n-        ConstValue::ByRef(alloc) => return alloc,\n+        ConstValue::ByRef(alloc, offset) => {\n+            assert_eq!(offset, 0);\n+            return alloc;\n+        },\n         _ => ()\n     }\n     let result = || -> EvalResult<'tcx, &'tcx Allocation> {"}, {"sha": "1c32c1a9404317428d8bcee33eb1486019d93a3a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -243,10 +243,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         _ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Value> {\n         match val {\n-            ConstValue::ByRef(alloc) => {\n+            ConstValue::ByRef(alloc, offset) => {\n                 // FIXME: Allocate new AllocId for all constants inside\n                 let id = self.memory.allocate_value(alloc.clone(), Some(MemoryKind::Stack))?;\n-                Ok(Value::ByRef(MemoryPointer::new(id, 0).into(), alloc.align))\n+                Ok(Value::ByRef(MemoryPointer::new(id, offset).into(), alloc.align))\n             },\n             ConstValue::ByValPair(a, b) => Ok(Value::ByValPair(a, b)),\n             ConstValue::ByVal(val) => Ok(Value::ByVal(val)),"}, {"sha": "100edd6b4ffe5c4b54d763c5d515ce74697dc5c2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -1249,7 +1249,7 @@ fn collect_const<'a, 'tcx>(\n         ConstVal::Value(ConstValue::ByValPair(PrimVal::Ptr(ptr), _)) |\n         ConstVal::Value(ConstValue::ByVal(PrimVal::Ptr(ptr))) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n-        ConstVal::Value(ConstValue::ByRef(alloc)) => {\n+        ConstVal::Value(ConstValue::ByRef(alloc, _offset)) => {\n             for &id in alloc.relocations.values() {\n                 collect_miri(tcx, id, output);\n             }"}, {"sha": "2b0082d95b30601b708b3aba668706d5275cddab", "filename": "src/test/ui/const-eval/issue-50706.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6630678428ee7857da4880dfbab519286e436adc/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6630678428ee7857da4880dfbab519286e436adc/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50706.rs?ref=6630678428ee7857da4880dfbab519286e436adc", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+pub struct Stats;\n+\n+#[derive(PartialEq, Eq)]\n+pub struct StatVariant {\n+    pub id: u8,\n+    _priv: (),\n+}\n+\n+#[derive(PartialEq, Eq)]\n+pub struct Stat {\n+    pub variant: StatVariant,\n+    pub index: usize,\n+    _priv: (),\n+}\n+\n+impl Stats {\n+    pub const TEST: StatVariant = StatVariant{id: 0, _priv: (),};\n+    #[allow(non_upper_case_globals)]\n+    pub const A: Stat = Stat{\n+         variant: Self::TEST,\n+         index: 0,\n+         _priv: (),};\n+}\n+\n+impl Stat {\n+    pub fn from_index(variant: StatVariant, index: usize) -> Option<Stat> {\n+        let stat = Stat{variant, index, _priv: (),};\n+        match stat {\n+            Stats::A => Some(Stats::A),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}