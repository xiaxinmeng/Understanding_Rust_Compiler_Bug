{"sha": "f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "node_id": "C_kwDOAAsO6NoAKGY5YjJlM2M4N2I3NmMwM2NjMzk4YmU4YjhmNjVkMDk2YzA1ODNlYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T13:31:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T13:31:04Z"}, "message": "Auto merge of #96816 - GuillaumeGomez:rollup-oumn95i, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96581 (make Size and Align debug-printing a bit more compact)\n - #96636 (Fix jump to def regression)\n - #96760 (diagnostics: port more diagnostics to derive + add support for `Vec` fields)\n - #96788 (Improve validator around field projections and checked bin ops)\n - #96805 (Change eslint rules from configuration comments to configuration file)\n - #96807 (update Miri)\n - #96811 (Fix a minor typo in the description of Formatter)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "86549541059310d8c7c837be0b5003d007a85978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86549541059310d8c7c837be0b5003d007a85978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "html_url": "https://github.com/rust-lang/rust/commit/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613920562215286a84dae65e63b7aff7061f7cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/613920562215286a84dae65e63b7aff7061f7cdd", "html_url": "https://github.com/rust-lang/rust/commit/613920562215286a84dae65e63b7aff7061f7cdd"}, {"sha": "c6007d6b5778c4ba2d31b7b8e201e4ee23c6561d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6007d6b5778c4ba2d31b7b8e201e4ee23c6561d", "html_url": "https://github.com/rust-lang/rust/commit/c6007d6b5778c4ba2d31b7b8e201e4ee23c6561d"}], "stats": {"total": 1203, "additions": 538, "deletions": 665}, "files": [{"sha": "25209e20e99397b1b42ce05a6881789593ceb95a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 96, "deletions": 4, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Size, VariantIdx};\n \n #[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n@@ -244,6 +244,60 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 self.fail(location, format!(\"bad index ({:?} != usize)\", index_ty))\n             }\n         }\n+        if let ProjectionElem::Field(f, ty) = elem {\n+            let parent = Place { local, projection: self.tcx.intern_place_elems(proj_base) };\n+            let parent_ty = parent.ty(&self.body.local_decls, self.tcx);\n+            let fail_out_of_bounds = |this: &Self, location| {\n+                this.fail(location, format!(\"Out of bounds field {:?} for {:?}\", f, parent_ty));\n+            };\n+            let check_equal = |this: &Self, location, f_ty| {\n+                if !this.mir_assign_valid_types(ty, f_ty) {\n+                    this.fail(\n+                        location,\n+                        format!(\n+                            \"Field projection `{:?}.{:?}` specified type `{:?}`, but actual type is {:?}\",\n+                            parent, f, ty, f_ty\n+                        )\n+                    )\n+                }\n+            };\n+            match parent_ty.ty.kind() {\n+                ty::Tuple(fields) => {\n+                    let Some(f_ty) = fields.get(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, *f_ty);\n+                }\n+                ty::Adt(adt_def, substs) => {\n+                    let var = parent_ty.variant_index.unwrap_or(VariantIdx::from_u32(0));\n+                    let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, field.ty(self.tcx, substs));\n+                }\n+                ty::Closure(_, substs) => {\n+                    let substs = substs.as_closure();\n+                    let Some(f_ty) = substs.upvar_tys().nth(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, f_ty);\n+                }\n+                ty::Generator(_, substs, _) => {\n+                    let substs = substs.as_generator();\n+                    let Some(f_ty) = substs.upvar_tys().nth(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, f_ty);\n+                }\n+                _ => {\n+                    self.fail(location, format!(\"{:?} does not have fields\", parent_ty.ty));\n+                }\n+            }\n+        }\n         self.super_projection_elem(local, proj_base, elem, context, location);\n     }\n \n@@ -291,7 +345,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ty::Array(..) | ty::Slice(..)\n                 );\n             }\n-            Rvalue::BinaryOp(op, vals) | Rvalue::CheckedBinaryOp(op, vals) => {\n+            Rvalue::BinaryOp(op, vals) => {\n                 use BinOp::*;\n                 let a = vals.0.ty(&self.body.local_decls, self.tcx);\n                 let b = vals.1.ty(&self.body.local_decls, self.tcx);\n@@ -355,17 +409,55 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         for x in [a, b] {\n                             check_kinds!(\n                                 x,\n-                                \"Cannot perform op on type {:?}\",\n+                                \"Cannot perform arithmetic on type {:?}\",\n                                 ty::Uint(..) | ty::Int(..) | ty::Float(..)\n                             )\n                         }\n                         if a != b {\n                             self.fail(\n                                 location,\n-                                format!(\"Cannot perform op on unequal types {:?} and {:?}\", a, b),\n+                                format!(\n+                                    \"Cannot perform arithmetic on unequal types {:?} and {:?}\",\n+                                    a, b\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+            Rvalue::CheckedBinaryOp(op, vals) => {\n+                use BinOp::*;\n+                let a = vals.0.ty(&self.body.local_decls, self.tcx);\n+                let b = vals.1.ty(&self.body.local_decls, self.tcx);\n+                match op {\n+                    Add | Sub | Mul => {\n+                        for x in [a, b] {\n+                            check_kinds!(\n+                                x,\n+                                \"Cannot perform checked arithmetic on type {:?}\",\n+                                ty::Uint(..) | ty::Int(..)\n+                            )\n+                        }\n+                        if a != b {\n+                            self.fail(\n+                                location,\n+                                format!(\n+                                    \"Cannot perform checked arithmetic on unequal types {:?} and {:?}\",\n+                                    a, b\n+                                ),\n                             );\n                         }\n                     }\n+                    Shl | Shr => {\n+                        for x in [a, b] {\n+                            check_kinds!(\n+                                x,\n+                                \"Cannot perform checked shift on non-integer type {:?}\",\n+                                ty::Uint(..) | ty::Int(..)\n+                            )\n+                        }\n+                    }\n+                    _ => self.fail(location, format!(\"There is no checked version of {:?}\", op)),\n                 }\n             }\n             Rvalue::UnaryOp(op, operand) => {"}, {"sha": "aef18fcafaa05e5cb8267d432ffd27015abaaf14", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -90,3 +90,14 @@ typeck-add-return-type-missing-here = a return type might be missing here\n typeck-expected-default-return-type = expected `()` because of default return type\n \n typeck-expected-return-type = expected `{$expected}` because of return type\n+\n+typeck-unconstrained-opaque-type = unconstrained opaque type\n+    .note = `{$name}` must be used in combination with a concrete type within the same module\n+\n+typeck-explicit-generic-args-with-impl-trait =\n+    cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+    .label = explicit generic argument not allowed\n+    .note = see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+\n+typeck-explicit-generic-args-with-impl-trait-feature =\n+    add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable"}, {"sha": "83fc7bcde8ab47d385da4f3325726252aae1a5c2", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -5,8 +5,8 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, Applicability,\n-    FieldInfo, HasFieldMap, SetOnce,\n+    report_error_if_not_applied_to_span, type_matches_path, Applicability, FieldInfo, FieldInnerTy,\n+    HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -353,35 +353,40 @@ impl SessionDiagnosticDeriveBuilder {\n         info: FieldInfo<'_>,\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let field_binding = &info.binding.binding;\n-        let option_ty = option_inner_ty(&info.ty);\n-        let generated_code = self.generate_non_option_field_code(\n+\n+        let inner_ty = FieldInnerTy::from_type(&info.ty);\n+        let name = attr.path.segments.last().unwrap().ident.to_string();\n+        let (binding, needs_destructure) = match (name.as_str(), &inner_ty) {\n+            // `primary_span` can accept a `Vec<Span>` so don't destructure that.\n+            (\"primary_span\", FieldInnerTy::Vec(_)) => (quote! { #field_binding.clone() }, false),\n+            _ => (quote! { *#field_binding }, true),\n+        };\n+\n+        let generated_code = self.generate_inner_field_code(\n             attr,\n             FieldInfo {\n                 vis: info.vis,\n                 binding: info.binding,\n-                ty: option_ty.unwrap_or(&info.ty),\n+                ty: inner_ty.inner_type().unwrap_or(&info.ty),\n                 span: info.span,\n             },\n+            binding,\n         )?;\n \n-        if option_ty.is_none() {\n-            Ok(quote! { #generated_code })\n+        if needs_destructure {\n+            Ok(inner_ty.with(field_binding, generated_code))\n         } else {\n-            Ok(quote! {\n-                if let Some(#field_binding) = #field_binding {\n-                    #generated_code\n-                }\n-            })\n+            Ok(generated_code)\n         }\n     }\n \n-    fn generate_non_option_field_code(\n+    fn generate_inner_field_code(\n         &mut self,\n         attr: &Attribute,\n         info: FieldInfo<'_>,\n+        binding: TokenStream,\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let diag = &self.diag;\n-        let field_binding = &info.binding.binding;\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n@@ -397,14 +402,14 @@ impl SessionDiagnosticDeriveBuilder {\n                 \"primary_span\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n                     Ok(quote! {\n-                        #diag.set_span(*#field_binding);\n+                        #diag.set_span(#binding);\n                     })\n                 }\n                 \"label\" | \"note\" | \"help\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_subdiagnostic(field_binding, name, name))\n+                    Ok(self.add_subdiagnostic(binding, name, name))\n                 }\n-                \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(*#field_binding); }),\n+                \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(#binding); }),\n                 _ => throw_invalid_attr!(attr, &meta, |diag| {\n                     diag\n                         .help(\"only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\")\n@@ -413,7 +418,7 @@ impl SessionDiagnosticDeriveBuilder {\n             Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(ref s), .. }) => match name {\n                 \"label\" | \"note\" | \"help\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_subdiagnostic(field_binding, name, &s.value()))\n+                    Ok(self.add_subdiagnostic(binding, name, &s.value()))\n                 }\n                 _ => throw_invalid_attr!(attr, &meta, |diag| {\n                     diag.help(\"only `label`, `note` and `help` are valid field attributes\")\n@@ -509,7 +514,7 @@ impl SessionDiagnosticDeriveBuilder {\n     /// `fluent_attr_identifier`.\n     fn add_subdiagnostic(\n         &self,\n-        field_binding: &proc_macro2::Ident,\n+        field_binding: TokenStream,\n         kind: &str,\n         fluent_attr_identifier: &str,\n     ) -> TokenStream {\n@@ -520,7 +525,7 @@ impl SessionDiagnosticDeriveBuilder {\n         let fn_name = format_ident!(\"span_{}\", kind);\n         quote! {\n             #diag.#fn_name(\n-                *#field_binding,\n+                #field_binding,\n                 rustc_errors::DiagnosticMessage::fluent_attr(#slug, #fluent_attr_identifier)\n             );\n         }"}, {"sha": "65b1328682f823243b4aefed836e2d5c969f11f8", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -5,8 +5,8 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    option_inner_ty, report_error_if_not_applied_to_applicability,\n-    report_error_if_not_applied_to_span, Applicability, FieldInfo, HasFieldMap, SetOnce,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span,\n+    Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -301,11 +301,11 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let ast = binding.ast();\n \n-        let option_ty = option_inner_ty(&ast.ty);\n+        let inner_ty = FieldInnerTy::from_type(&ast.ty);\n         let info = FieldInfo {\n             vis: &ast.vis,\n             binding: binding,\n-            ty: option_ty.unwrap_or(&ast.ty),\n+            ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n             span: &ast.span(),\n         };\n \n@@ -353,15 +353,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n             );\n         };\n \n-        if option_ty.is_none() {\n-            Ok(quote! { #generated })\n-        } else {\n-            Ok(quote! {\n-                if let Some(#binding) = #binding {\n-                    #generated\n-                }\n-            })\n-        }\n+        Ok(inner_ty.with(binding, generated))\n     }\n \n     fn into_tokens(&mut self) -> Result<TokenStream, SessionDiagnosticDeriveError> {"}, {"sha": "aba861fc6aafa4a0954216f969e07e9da7812a39", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,7 +1,7 @@\n use crate::diagnostics::error::{span_err, throw_span_err, SessionDiagnosticDeriveError};\n use proc_macro::Span;\n use proc_macro2::TokenStream;\n-use quote::{format_ident, quote};\n+use quote::{format_ident, quote, ToTokens};\n use std::collections::BTreeSet;\n use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, Type, Visibility};\n@@ -76,22 +76,71 @@ pub(crate) fn report_error_if_not_applied_to_span(\n     report_error_if_not_applied_to_ty(attr, info, &[\"rustc_span\", \"Span\"], \"Span\")\n }\n \n-/// If `ty` is an Option, returns `Some(inner type)`, otherwise returns `None`.\n-pub(crate) fn option_inner_ty(ty: &Type) -> Option<&Type> {\n-    if type_matches_path(ty, &[\"std\", \"option\", \"Option\"]) {\n+/// Inner type of a field and type of wrapper.\n+pub(crate) enum FieldInnerTy<'ty> {\n+    /// Field is wrapped in a `Option<$inner>`.\n+    Option(&'ty Type),\n+    /// Field is wrapped in a `Vec<$inner>`.\n+    Vec(&'ty Type),\n+    /// Field isn't wrapped in an outer type.\n+    None,\n+}\n+\n+impl<'ty> FieldInnerTy<'ty> {\n+    /// Returns inner type for a field, if there is one.\n+    ///\n+    /// - If `ty` is an `Option`, returns `FieldInnerTy::Option { inner: (inner type) }`.\n+    /// - If `ty` is a `Vec`, returns `FieldInnerTy::Vec { inner: (inner type) }`.\n+    /// - Otherwise returns `None`.\n+    pub(crate) fn from_type(ty: &'ty Type) -> Self {\n+        let variant: &dyn Fn(&'ty Type) -> FieldInnerTy<'ty> =\n+            if type_matches_path(ty, &[\"std\", \"option\", \"Option\"]) {\n+                &FieldInnerTy::Option\n+            } else if type_matches_path(ty, &[\"std\", \"vec\", \"Vec\"]) {\n+                &FieldInnerTy::Vec\n+            } else {\n+                return FieldInnerTy::None;\n+            };\n+\n         if let Type::Path(ty_path) = ty {\n             let path = &ty_path.path;\n             let ty = path.segments.iter().last().unwrap();\n             if let syn::PathArguments::AngleBracketed(bracketed) = &ty.arguments {\n                 if bracketed.args.len() == 1 {\n                     if let syn::GenericArgument::Type(ty) = &bracketed.args[0] {\n-                        return Some(ty);\n+                        return variant(ty);\n                     }\n                 }\n             }\n         }\n+\n+        unreachable!();\n+    }\n+\n+    /// Returns `Option` containing inner type if there is one.\n+    pub(crate) fn inner_type(&self) -> Option<&'ty Type> {\n+        match self {\n+            FieldInnerTy::Option(inner) | FieldInnerTy::Vec(inner) => Some(inner),\n+            FieldInnerTy::None => None,\n+        }\n+    }\n+\n+    /// Surrounds `inner` with destructured wrapper type, exposing inner type as `binding`.\n+    pub(crate) fn with(&self, binding: impl ToTokens, inner: impl ToTokens) -> TokenStream {\n+        match self {\n+            FieldInnerTy::Option(..) => quote! {\n+                if let Some(#binding) = #binding {\n+                    #inner\n+                }\n+            },\n+            FieldInnerTy::Vec(..) => quote! {\n+                for #binding in #binding {\n+                    #inner\n+                }\n+            },\n+            FieldInnerTy::None => quote! { #inner },\n+        }\n     }\n-    None\n }\n \n /// Field information passed to the builder. Deliberately omits attrs to discourage the"}, {"sha": "8111409b8bc0eef45854b76ae6eaa07cfa498bfb", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -448,6 +448,12 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n             }\n \n+            let fmt_val = |val: &ConstValue<'tcx>| match val {\n+                ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n+                ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n+                ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n+            };\n+\n             let val = match literal {\n                 ConstantKind::Ty(ct) => match ct.val() {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n@@ -457,7 +463,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                         uv.substs,\n                         uv.promoted,\n                     ),\n-                    ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n+                    ty::ConstKind::Value(val) => format!(\"Value({})\", fmt_val(&val)),\n                     ty::ConstKind::Error(_) => \"Error\".to_string(),\n                     // These variants shouldn't exist in the MIR.\n                     ty::ConstKind::Placeholder(_)\n@@ -467,7 +473,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 // To keep the diffs small, we render this like we render `ty::Const::Value`.\n                 //\n                 // This changes once `ty::Const::Value` is represented using valtrees.\n-                ConstantKind::Val(val, _) => format!(\"Value({:?})\", val),\n+                ConstantKind::Val(val, _) => format!(\"Value({})\", fmt_val(&val)),\n             };\n \n             self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), val));"}, {"sha": "6fb87e15a3303a6ce105be77189b2953f5fe6dc4", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -289,12 +289,26 @@ impl ParseSess {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n \n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        err.into_diagnostic(self)\n+    }\n+\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n-        err.into_diagnostic(self).emit()\n+        self.create_err(err).emit()\n+    }\n+\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        warning: impl SessionDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        warning.into_diagnostic(self)\n     }\n \n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n-        warning.into_diagnostic(self).emit()\n+        self.create_warning(warning).emit()\n     }\n \n     pub fn struct_err("}, {"sha": "b2c23cda6aae545b1bcf2f893eb63dd671d90fa7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -413,9 +413,21 @@ impl Session {\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.parse_sess.create_err(err)\n+    }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        self.parse_sess.create_warning(err)\n+    }\n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }"}, {"sha": "a2cd3c4c46816e44ef715038e9f94994e678551e", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -276,12 +276,19 @@ impl ToJson for Endian {\n }\n \n /// Size of a type in bytes.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n     raw: u64,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Size {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Size({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n@@ -485,12 +492,19 @@ impl Step for Size {\n }\n \n /// Alignment of a type in bytes (always a power of two).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Align {\n     pow2: u8,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Align {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Align({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Align {\n     pub const ONE: Align = Align { pow2: 0 };\n "}, {"sha": "38c29d3874c9e169fbe4828fe6eb712574ec4459", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -3,7 +3,10 @@ use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n     GenericArgCountResult, GenericArgPosition,\n };\n-use crate::errors::AssocTypeBindingNotAllowed;\n+use crate::errors::{\n+    AssocTypeBindingNotAllowed, ExplicitGenericArgsWithImplTrait,\n+    ExplicitGenericArgsWithImplTraitFeature,\n+};\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n@@ -636,29 +639,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 })\n                 .collect::<Vec<_>>();\n \n-            let mut err = struct_span_err! {\n-                tcx.sess,\n-                spans.clone(),\n-                E0632,\n-                \"cannot provide explicit generic arguments when `impl Trait` is \\\n-                used in argument position\"\n-            };\n-\n-            for span in spans {\n-                err.span_label(span, \"explicit generic argument not allowed\");\n-            }\n-\n-            err.note(\n-                \"see issue #83701 <https://github.com/rust-lang/rust/issues/83701> \\\n-                 for more information\",\n-            );\n+            let mut err = tcx.sess.create_err(ExplicitGenericArgsWithImplTrait { spans });\n             if tcx.sess.is_nightly_build() {\n-                err.help(\n-                    \"add `#![feature(explicit_generic_args_with_impl_trait)]` \\\n-                     to the crate attributes to enable\",\n-                );\n+                err.subdiagnostic(ExplicitGenericArgsWithImplTraitFeature);\n             }\n-\n             err.emit();\n         }\n "}, {"sha": "4b6f80ce57a83eced8d248eeef0fe4cee04d1968", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -14,6 +14,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n use super::ItemCtxt;\n use super::{bad_placeholder, is_suggestable_infer_ty};\n+use crate::errors::UnconstrainedOpaqueType;\n \n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n@@ -682,13 +683,10 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     match locator.found {\n         Some(hidden) => hidden.ty,\n         None => {\n-            let span = tcx.def_span(def_id);\n-            let name = tcx.item_name(tcx.local_parent(def_id).to_def_id());\n-            let label = format!(\n-                \"`{}` must be used in combination with a concrete type within the same module\",\n-                name\n-            );\n-            tcx.sess.struct_span_err(span, \"unconstrained opaque type\").note(&label).emit();\n+            tcx.sess.emit_err(UnconstrainedOpaqueType {\n+                span: tcx.def_span(def_id),\n+                name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n+            });\n             tcx.ty_error()\n         }\n     }"}, {"sha": "a3e7108caae00778eaae5f6b00ea552af5e62d11", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -228,3 +228,25 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n         expected: Ty<'tcx>,\n     },\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"typeck-unconstrained-opaque-type\")]\n+#[note]\n+pub struct UnconstrainedOpaqueType {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0632\", slug = \"typeck-explicit-generic-args-with-impl-trait\")]\n+#[note]\n+pub struct ExplicitGenericArgsWithImplTrait {\n+    #[primary_span]\n+    #[label]\n+    pub spans: Vec<Span>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[help(slug = \"typeck-explicit-generic-args-with-impl-trait-feature\")]\n+pub struct ExplicitGenericArgsWithImplTraitFeature;"}, {"sha": "feedc6456b8b62ec446cbb26b258ecc8f53998f8", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -600,7 +600,7 @@ impl Display for Arguments<'_> {\n ///\n /// Types that do not wish to use the standard suite of debug representations\n /// provided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\n-/// `debut_list`, `debug_set`, `debug_map`) can do something totally custom by\n+/// `debug_list`, `debug_set`, `debug_map`) can do something totally custom by\n /// manually writing an arbitrary representation to the `Formatter`.\n ///\n /// ```"}, {"sha": "7a34a7daaec5bea7e6e4b459f27db0adcc1c1058", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -41,4 +41,4 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            /scripts/validate-error-codes.sh && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es6 ../src/librustdoc/html/static/js/*.js && \\\n-           eslint ../src/librustdoc/html/static/js/*.js\n+           eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js"}, {"sha": "30b3d6defb4b86e0636957e41159eacb38d9acef", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -567,3 +567,10 @@ $ rustdoc src/lib.rs -Z unstable-options \\\n \n The example above check every well known names (`target_os`, `doc`, `test`, ... via `names()`)\n and check the values of `feature`: `foo` and `bar`.\n+\n+### `--generate-link-to-definition`: Generate links on types in source code\n+\n+ * Tracking issue: [#89095](https://github.com/rust-lang/rust/issues/89095)\n+\n+This flag enables the generation of links in the source code pages which allow the reader\n+to jump to a type definition."}, {"sha": "1ae888d059dc6402e6e00103c15413adccdd2635", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{ExprKind, GenericParam, HirId, Mod, Node};\n+use rustc_hir::{ExprKind, HirId, Mod, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n@@ -100,8 +100,6 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_generic_param(&mut self, _: &'tcx GenericParam<'tcx>) {}\n-\n     fn visit_path(&mut self, path: &'tcx rustc_hir::Path<'tcx>, _id: HirId) {\n         self.handle_path(path, None);\n         intravisit::walk_path(self, path);"}, {"sha": "e118ee5d5edc5648c9d5323b216681343d533618", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -16,6 +16,9 @@ module.exports = {\n         \"semi\": [\n             \"error\",\n             \"always\"\n-        ]\n+        ],\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n     }\n };"}, {"sha": "defdc20132e67eb02bfe98eaaf2da9818fd2ba51", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,9 +1,6 @@\n // This file contains type definitions that are processed by the Closure Compiler but are\n // not put into the JavaScript we include as part of the documentation. It is used for\n // type checking. See README.md in this directory for more info.\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n \n /* eslint-disable */\n let searchState;"}, {"sha": "ea20f6e28ecd624856c1085f9cb59d609b34757b", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,7 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass, searchState */\n /* global onEach, onEachLazy, removeClass */"}, {"sha": "544bced4c5afdd11120605c7fc92f4c29ee1f662", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,7 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n /* global addClass, hasClass, removeClass, onEachLazy */\n \n \"use strict\";"}, {"sha": "3d8cfeecbed6d27a70f9cb0a9243abbe1512ba3f", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,7 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n /* global onEachLazy, removeClass, searchState, browserSupportsHistoryApi */\n "}, {"sha": "a7b60a496890c4cdd8bba790dde466cb04fb1848", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,7 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n // Local js definitions:\n /* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n /* global addClass, removeClass, onEach, onEachLazy, NOT_DISPLAYED_ID */"}, {"sha": "92ecd200081b990900bd76980be24e402edf98ce", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,8 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n-\n // From rust:\n /* global search, sourcesIndex */\n "}, {"sha": "69940bb89df2110b7a0431b0604975611abcee62", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,8 +1,3 @@\n-/* eslint-env es6 */\n-/* eslint no-var: \"error\" */\n-/* eslint prefer-const: \"error\" */\n-/* eslint prefer-arrow-callback: \"error\" */\n-\n \"use strict\";\n \n const darkThemes = [\"dark\", \"ayu\"];"}, {"sha": "bbde6ad4b637d433097c4548b551e4fde3f2db88", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -77,7 +77,7 @@\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n           Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34"}, {"sha": "cb4273ba6bd6e1e3660c52ae8f3751b18a08df9f", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -22,7 +22,7 @@\n                                            // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   \n       bb2: {"}, {"sha": "31719b435d694533512cecb8c10084bc4876d901", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -43,7 +43,7 @@\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-+                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n++                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   }\n   "}, {"sha": "c19cbe3e5b0dfe75b126c0cbcbab316f9833fef9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -46,7 +46,7 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef(..)) }\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL"}, {"sha": "c19cbe3e5b0dfe75b126c0cbcbab316f9833fef9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -46,7 +46,7 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef(..)) }\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL"}, {"sha": "f9e11439dd9d2870d82aaf7bb34a06aae5cfd037", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -73,7 +73,7 @@\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   \n       bb2: {"}, {"sha": "a6174174849784283abac47bb0097b5aab987846", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -92,7 +92,7 @@ fn num_to_digit(_1: char) -> u32 {\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n     bb7: {"}, {"sha": "2044d34a3db7bcc3ab8b31a8f9478077c23223f3", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -26,7 +26,7 @@ fn unwrap(_1: Option<T>) -> T {\n                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n     bb2: {"}, {"sha": "bdab2d9322210db104bacb941d25d6ead927f924", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -15,7 +15,7 @@ fn main() -> () {\n         _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant"}, {"sha": "e0875ab0069e761263807a3c30e460ee9567bc5d", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -192,7 +192,7 @@ static XXX: &Foo = {\n         _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         StorageDead(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2"}, {"sha": "16fd328b6f966926de046b3e527fb97b5bdd7768", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -22,7 +22,7 @@ fn main() -> () {\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n@@ -40,7 +40,7 @@ fn main() -> () {\n         _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n@@ -50,7 +50,7 @@ fn main() -> () {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n     }\n "}, {"sha": "c499e5c59dbeb3ec4c55e36120911e175808be18", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -28,7 +28,7 @@\n           _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n           StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n@@ -38,7 +38,7 @@\n           _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n       }\n   \n@@ -47,7 +47,7 @@\n           _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n           StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n@@ -69,7 +69,7 @@\n           _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n@@ -79,7 +79,7 @@\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n       }\n   "}, {"sha": "77951bc8d7b6779ac446249dd946b0e287852264", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -40,7 +40,7 @@ fn main() -> () {\n         _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n         StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n         goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n@@ -51,7 +51,7 @@ fn main() -> () {\n         _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n         goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n@@ -70,7 +70,7 @@ fn main() -> () {\n         _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n         goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n@@ -81,7 +81,7 @@ fn main() -> () {\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n         goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24"}, {"sha": "1b06c730cdab6139636ee29e7607129f8c822390", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -42,7 +42,7 @@\n           _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n           StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n@@ -52,7 +52,7 @@\n           _3 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n       }\n   \n@@ -61,7 +61,7 @@\n           _6 = const \"B(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_6);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n           StorageDead(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n@@ -72,7 +72,7 @@\n           _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n           StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n@@ -92,7 +92,7 @@\n           _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n@@ -102,7 +102,7 @@\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n       }\n   \n@@ -111,7 +111,7 @@\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n@@ -122,7 +122,7 @@\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24"}, {"sha": "12c5df2871cf5cc0f49f8dd2a5499328f713f082", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -46,6 +46,24 @@ pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::Sour\n // @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'Trait'\n pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V, b: bool) {}\n \n+pub trait AnotherTrait {}\n+pub trait WhyNot {}\n+\n+// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#49\"]' 'AnotherTrait'\n+// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#50\"]' 'WhyNot'\n+pub fn foo3<T, V>(t: &T, v: &V)\n+where\n+    T: AnotherTrait,\n+    V: WhyNot\n+{}\n+\n+pub trait AnotherTrait2 {}\n+\n+// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#60\"]' 'AnotherTrait2'\n+pub fn foo4() {\n+    let x: Vec<AnotherTrait2> = Vec::new();\n+}\n+\n // @has - '//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n #[doc(primitive = \"bool\")]\n mod whatever {}"}, {"sha": "c63410fa35bde6d91233d06a0b8c1ef003cf57f1", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -474,3 +474,11 @@ struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct VecField {\n+    #[primary_span]\n+    #[label]\n+    spans: Vec<Span>,\n+}"}, {"sha": "a282e71235c31f73cb0c1db7a21c02920ebe6069", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n "}, {"sha": "56a1337e6a5ea55eb001159862fdedd99012ca30", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(E) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,27 +31,17 @@ error: layout_of(E) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 4,\n-                       },\n+                       size: Size(4 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 8,\n-                               },\n+                               Size(4 bytes),\n+                               Size(4 bytes),\n+                               Size(8 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -67,14 +55,10 @@ error: layout_of(E) = Layout {\n                        abi: Uninhabited,\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 12,\n-                       },\n+                       size: Size(12 bytes),\n                    },\n                ],\n            },\n@@ -83,9 +67,7 @@ error: layout_of(E) = Layout {\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -94,14 +76,10 @@ error: layout_of(E) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 12,\n-           },\n+           size: Size(12 bytes),\n        }\n   --> $DIR/debug.rs:6:1\n    |\n@@ -111,15 +89,9 @@ LL | enum E { Foo, Bar(!, i32, i32) }\n error: layout_of(S) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 4,\n-                   },\n+                   Size(0 bytes),\n+                   Size(0 bytes),\n+                   Size(4 bytes),\n                ],\n                memory_index: [\n                    1,\n@@ -148,14 +120,10 @@ error: layout_of(S) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:9:1\n    |\n@@ -174,14 +142,10 @@ error: layout_of(U) = Layout {\n            },\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:12:1\n    |\n@@ -191,9 +155,7 @@ LL | union U { f1: (i32, i32), f3: i32 }\n error: layout_of(std::result::Result<i32, i32>) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -213,9 +175,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -229,21 +189,15 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -257,14 +211,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                ],\n            },\n@@ -286,9 +236,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -297,14 +245,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:15:1\n    |\n@@ -327,14 +271,10 @@ error: layout_of(i32) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 4,\n-           },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/debug.rs:18:1\n    |"}, {"sha": "ba919df771fca096b73467a13a44f08b7f2fc5ca", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 1,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(2 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 1,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(2 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:34:1\n    |"}, {"sha": "6c97a09b0c666bf9f0a37b4cc5365d3c5c686182", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,10 +1,10 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:22:1\n    |\n LL | pub type TestMiddle = Middle;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:33:1\n    |\n LL | pub type TestFinal = Final;"}, {"sha": "a473c5c97c0b26d4ba53355c96183f250a479d77", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -17,8 +17,7 @@ pub struct WithPhantomData {\n     pub _unit: std::marker::PhantomData<()>,\n }\n \n-pub struct EmptyRustStruct {\n-}\n+pub struct EmptyRustStruct {}\n \n #[repr(C)]\n pub struct WithEmptyRustStruct {\n@@ -52,22 +51,22 @@ pub struct WithEmptyRustEnum {\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test1 = BaseCase;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test2 = WithPhantomData;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test3 = WithEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test4 = WithTransitivelyEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test5 = WithEmptyRustEnum;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n-fn main() { }\n+fn main() {}"}, {"sha": "322948ff7839978e7f59d5427e72cd36fed9d288", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,29 +1,29 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:54:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:53:1\n    |\n LL | pub type Test1 = BaseCase;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:58:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:57:1\n    |\n LL | pub type Test2 = WithPhantomData;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:62:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:61:1\n    |\n LL | pub type Test3 = WithEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:66:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:65:1\n    |\n LL | pub type Test4 = WithTransitivelyEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:70:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:69:1\n    |\n LL | pub type Test5 = WithEmptyRustEnum;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "af5f5885d67c5d3d8ed134b3472f32e4f1b06d41", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]\n "}, {"sha": "1a724e6f59be1ed2ec5690cc6dd3e7f5fdc9d0b7", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 55, "deletions": 165, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(MissingPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -23,9 +21,7 @@ error: layout_of(MissingPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -39,14 +35,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -61,14 +53,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 1,\n-                       },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -89,9 +77,7 @@ error: layout_of(MissingPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -100,14 +86,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n    |\n@@ -120,9 +102,7 @@ LL | | }\n error: layout_of(CommonPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -142,9 +122,7 @@ error: layout_of(CommonPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -158,21 +136,15 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -186,14 +158,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -215,9 +183,7 @@ error: layout_of(CommonPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -226,14 +192,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n    |\n@@ -246,9 +208,7 @@ LL | | }\n error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -268,9 +228,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -284,21 +242,15 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -312,14 +264,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -340,9 +288,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -351,14 +297,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n    |\n@@ -371,9 +313,7 @@ LL | | }\n error: layout_of(NicheFirst) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -397,12 +337,8 @@ error: layout_of(NicheFirst) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -430,9 +366,7 @@ error: layout_of(NicheFirst) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 0,\n-                               },\n+                               offset: Size(0 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -441,14 +375,10 @@ error: layout_of(NicheFirst) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -463,14 +393,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -485,14 +411,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -513,9 +435,7 @@ error: layout_of(NicheFirst) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -524,14 +444,10 @@ error: layout_of(NicheFirst) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n    |\n@@ -545,9 +461,7 @@ LL | | }\n error: layout_of(NicheSecond) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 1,\n-                   },\n+                   Size(1 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -571,12 +485,8 @@ error: layout_of(NicheSecond) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -604,9 +514,7 @@ error: layout_of(NicheSecond) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 1,\n-                               },\n+                               offset: Size(1 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -615,14 +523,10 @@ error: layout_of(NicheSecond) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -637,14 +541,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -659,14 +559,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -687,9 +583,7 @@ error: layout_of(NicheSecond) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 1,\n-                   },\n+                   offset: Size(1 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -698,14 +592,10 @@ error: layout_of(NicheSecond) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:50:1\n    |"}, {"sha": "9db9ad5a784862023e646a018da233d100e18c7c", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:34:1\n    |"}, {"sha": "8faf8593294cc78724faccf3fc19493b2168a2db", "filename": "src/test/ui/layout/zero-sized-array-union.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1,22 +1,22 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:59:1\n    |\n LL | type TestBaz1 = Baz1;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:70:1\n    |\n LL | type TestBaz2 = Baz2;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:81:1\n    |\n LL | type TestBaz3 = Baz3;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:92:1\n    |\n LL | type TestBaz4 = Baz4;"}, {"sha": "3b8b6aa8b689971d3b8776cefe3d809501e1b8ff", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "patch": "@@ -1 +1 @@\n-Subproject commit a71a0083937671d79e16bfac4c7b8cab9c8ab9bb\n+Subproject commit 3b8b6aa8b689971d3b8776cefe3d809501e1b8ff"}]}