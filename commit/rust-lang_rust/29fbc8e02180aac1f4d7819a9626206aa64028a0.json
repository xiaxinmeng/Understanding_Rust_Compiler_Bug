{"sha": "29fbc8e02180aac1f4d7819a9626206aa64028a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZmJjOGUwMjE4MGFhYzFmNGQ3ODE5YTk2MjYyMDZhYTY0MDI4YTA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-10T21:37:23Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Move the DiagnosticsWithFix trait on the ide level", "tree": {"sha": "ed97a21451cdb34a33ac984c7df035a5c29ca25e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed97a21451cdb34a33ac984c7df035a5c29ca25e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29fbc8e02180aac1f4d7819a9626206aa64028a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29fbc8e02180aac1f4d7819a9626206aa64028a0", "html_url": "https://github.com/rust-lang/rust/commit/29fbc8e02180aac1f4d7819a9626206aa64028a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29fbc8e02180aac1f4d7819a9626206aa64028a0/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936861993935d5b2c78b953e2f4b719e1992bd73", "url": "https://api.github.com/repos/rust-lang/rust/commits/936861993935d5b2c78b953e2f4b719e1992bd73", "html_url": "https://github.com/rust-lang/rust/commit/936861993935d5b2c78b953e2f4b719e1992bd73"}], "stats": {"total": 138, "additions": 75, "deletions": 63}, "files": [{"sha": "363164b9b4a68bc98c5afb5e1b465a6b1ac64785", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -1,8 +1,6 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n-pub use hir_expand::diagnostics::{\n-    Diagnostic, DiagnosticSink, DiagnosticSinkBuilder, DiagnosticWithFix,\n-};\n+pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n pub use hir_ty::diagnostics::{\n     MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n };"}, {"sha": "e9f7a033c5c4fec49122c2c181035738e46bea2d", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{diagnostics::DiagnosticWithFix, hygiene::Hygiene, name::AsName, ExpansionInfo};\n+use hir_expand::{hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -109,14 +109,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.parse(file_id)\n     }\n \n-    pub fn diagnostic_fix_source<T: DiagnosticWithFix + Diagnostic>(\n-        &self,\n-        d: &T,\n-    ) -> Option<<T as DiagnosticWithFix>::AST> {\n-        let file_id = d.presentation().file_id;\n-        let root = self.db.parse_or_expand(file_id)?;\n-        self.imp.cache(root, file_id);\n-        d.fix_source(self.db.upcast())\n+    pub fn cache(&self, root_node: SyntaxNode, file_id: HirFileId) {\n+        self.imp.cache(root_node, file_id)\n     }\n \n     pub fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {"}, {"sha": "9435c72544b6b3920ce1e67c4d6859982497ca4d", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -2,7 +2,7 @@\n \n use std::any::Any;\n \n-use hir_expand::diagnostics::{Diagnostic, DiagnosticWithFix};\n+use hir_expand::diagnostics::Diagnostic;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n@@ -25,11 +25,3 @@ impl Diagnostic for UnresolvedModule {\n         self\n     }\n }\n-\n-impl DiagnosticWithFix for UnresolvedModule {\n-    type AST = ast::Module;\n-    fn fix_source(&self, db: &dyn hir_expand::db::AstDatabase) -> Option<Self::AST> {\n-        let root = db.parse_or_expand(self.file)?;\n-        Some(self.decl.to_node(&root))\n-    }\n-}"}, {"sha": "8358c488b8a30841ff16a8847db31692e2ba0cb5", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -18,7 +18,7 @@ use std::{any::Any, fmt};\n \n use ra_syntax::SyntaxNodePtr;\n \n-use crate::{db::AstDatabase, InFile};\n+use crate::InFile;\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n@@ -29,11 +29,6 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     }\n }\n \n-pub trait DiagnosticWithFix {\n-    type AST;\n-    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST>;\n-}\n-\n pub struct DiagnosticSink<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,"}, {"sha": "24435e8a71f8fdd2234b2e641e95ec64166be51e", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -6,8 +6,8 @@ mod unsafe_check;\n use std::any::Any;\n \n use hir_def::DefWithBodyId;\n-use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticWithFix};\n-use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n+use hir_expand::{name::Name, HirFileId, InFile};\n use ra_prof::profile;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n@@ -46,15 +46,6 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n-impl DiagnosticWithFix for NoSuchField {\n-    type AST = ast::RecordExprField;\n-\n-    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n-        let root = db.parse_or_expand(self.file)?;\n-        Some(self.field.to_node(&root))\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n@@ -88,15 +79,6 @@ impl Diagnostic for MissingFields {\n     }\n }\n \n-impl DiagnosticWithFix for MissingFields {\n-    type AST = ast::RecordExpr;\n-\n-    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n-        let root = db.parse_or_expand(self.file)?;\n-        Some(self.field_list_parent.to_node(&root))\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n@@ -163,15 +145,6 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n-impl DiagnosticWithFix for MissingOkInTailExpr {\n-    type AST = ast::Expr;\n-\n-    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n-        let root = db.parse_or_expand(self.file)?;\n-        Some(self.expr.to_node(&root))\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct BreakOutsideOfLoop {\n     pub file: HirFileId,"}, {"sha": "ca1a7c1aae6eee438a924e63315aa1b182442896", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -7,11 +7,12 @@\n use std::cell::RefCell;\n \n use hir::{\n+    db::AstDatabase,\n     diagnostics::{Diagnostic as _, DiagnosticSinkBuilder},\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n use itertools::Itertools;\n-use ra_db::SourceDatabase;\n+use ra_db::{SourceDatabase, Upcast};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n@@ -23,6 +24,9 @@ use ra_text_edit::{TextEdit, TextEditBuilder};\n \n use crate::{Diagnostic, FileId, FileSystemEdit, Fix, SourceFileEdit};\n \n+mod diagnostics_with_fix;\n+use diagnostics_with_fix::DiagnosticWithFix;\n+\n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n     Error,\n@@ -62,8 +66,7 @@ pub(crate) fn diagnostics(\n                 }\n                 .into(),\n             );\n-            let fix = sema\n-                .diagnostic_fix_source(d)\n+            let fix = diagnostic_fix_source(&sema, d)\n                 .map(|unresolved_module| unresolved_module.syntax().text_range())\n                 .map(|fix_range| (fix, fix_range));\n \n@@ -84,7 +87,7 @@ pub(crate) fn diagnostics(\n             let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n                 None\n             } else {\n-                sema.diagnostic_fix_source(d)\n+                diagnostic_fix_source(&sema, d)\n                     .and_then(|record_expr| record_expr.record_expr_field_list())\n                     .map(|old_field_list| {\n                         let mut new_field_list = old_field_list.clone();\n@@ -105,6 +108,7 @@ pub(crate) fn diagnostics(\n                         (\n                             Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n                             sema.original_range(&old_field_list.syntax()).range,\n+                            // old_field_list.syntax().text_range(),\n                         )\n                     })\n             };\n@@ -118,7 +122,7 @@ pub(crate) fn diagnostics(\n             Some(())\n         })\n         .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n-            let fix = sema.diagnostic_fix_source(d).map(|tail_expr| {\n+            let fix = diagnostic_fix_source(&sema, d).map(|tail_expr| {\n                 let tail_expr_range = tail_expr.syntax().text_range();\n                 let edit =\n                     TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n@@ -140,7 +144,7 @@ pub(crate) fn diagnostics(\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix: missing_struct_field_fix(&sema, file_id, d).and_then(|fix| {\n-                    Some((fix, sema.diagnostic_fix_source(d)?.syntax().text_range()))\n+                    Some((fix, diagnostic_fix_source(&sema, d)?.syntax().text_range()))\n                 }),\n             });\n             Some(())\n@@ -164,12 +168,22 @@ pub(crate) fn diagnostics(\n     res.into_inner()\n }\n \n+fn diagnostic_fix_source<T: DiagnosticWithFix + hir::diagnostics::Diagnostic>(\n+    sema: &Semantics<RootDatabase>,\n+    d: &T,\n+) -> Option<<T as DiagnosticWithFix>::AST> {\n+    let file_id = d.presentation().file_id;\n+    let root = sema.db.parse_or_expand(file_id)?;\n+    sema.cache(root, file_id);\n+    d.fix_source(sema.db.upcast())\n+}\n+\n fn missing_struct_field_fix(\n     sema: &Semantics<RootDatabase>,\n     usage_file_id: FileId,\n     d: &hir::diagnostics::NoSuchField,\n ) -> Option<Fix> {\n-    let record_expr_field = sema.diagnostic_fix_source(d)?;\n+    let record_expr_field = diagnostic_fix_source(&sema, d)?;\n \n     let record_lit = ast::RecordExpr::cast(record_expr_field.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;"}, {"sha": "8578a90ec06e853fa46a53fbb81b606a37fe439c", "filename": "crates/ra_ide/src/diagnostics/diagnostics_with_fix.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fbc8e02180aac1f4d7819a9626206aa64028a0/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs?ref=29fbc8e02180aac1f4d7819a9626206aa64028a0", "patch": "@@ -0,0 +1,46 @@\n+use hir::{\n+    db::AstDatabase,\n+    diagnostics::{MissingFields, MissingOkInTailExpr, NoSuchField, UnresolvedModule},\n+};\n+use ra_syntax::ast;\n+\n+// TODO kb\n+pub trait DiagnosticWithFix {\n+    type AST;\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST>;\n+}\n+\n+impl DiagnosticWithFix for UnresolvedModule {\n+    type AST = ast::Module;\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.decl.to_node(&root))\n+    }\n+}\n+\n+impl DiagnosticWithFix for NoSuchField {\n+    type AST = ast::RecordExprField;\n+\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.field.to_node(&root))\n+    }\n+}\n+\n+impl DiagnosticWithFix for MissingFields {\n+    type AST = ast::RecordExpr;\n+\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.field_list_parent.to_node(&root))\n+    }\n+}\n+\n+impl DiagnosticWithFix for MissingOkInTailExpr {\n+    type AST = ast::Expr;\n+\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.expr.to_node(&root))\n+    }\n+}"}]}