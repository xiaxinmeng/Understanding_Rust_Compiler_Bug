{"sha": "b0eaaca31457672a8022312cc0f89b18ebc9d754", "node_id": "C_kwDOAAsO6NoAKGIwZWFhY2EzMTQ1NzY3MmE4MDIyMzEyY2MwZjg5YjE4ZWJjOWQ3NTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-05T20:05:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-05T20:05:08Z"}, "message": "Remove redundant InferCtxtExt::fresh_item_substs", "tree": {"sha": "f4652d281bf89b2098893457d2e9183ed667fb0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4652d281bf89b2098893457d2e9183ed667fb0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0eaaca31457672a8022312cc0f89b18ebc9d754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0eaaca31457672a8022312cc0f89b18ebc9d754", "html_url": "https://github.com/rust-lang/rust/commit/b0eaaca31457672a8022312cc0f89b18ebc9d754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0eaaca31457672a8022312cc0f89b18ebc9d754/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc536d3ac83ad0e3600af2d04701faed63ecd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc536d3ac83ad0e3600af2d04701faed63ecd79", "html_url": "https://github.com/rust-lang/rust/commit/bbc536d3ac83ad0e3600af2d04701faed63ecd79"}], "stats": {"total": 44, "additions": 3, "deletions": 41}, "files": [{"sha": "8d3c0a4fb9e2b48a3af6844ce9a51c86c546c242", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=b0eaaca31457672a8022312cc0f89b18ebc9d754", "patch": "@@ -26,10 +26,8 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n-use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -2488,7 +2486,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n \n-                        let impl_substs = infcx.fresh_item_substs(impl_);\n+                        let impl_substs = infcx.fresh_substs_for_item(span, impl_);\n                         let impl_ty = tcx.type_of(impl_).subst(tcx, impl_substs);\n                         let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n@@ -3775,36 +3773,3 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n-\n-pub trait InferCtxtExt<'tcx> {\n-    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx>;\n-}\n-\n-impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n-    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n-        InternalSubsts::for_item(self.tcx, def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => self\n-                .next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n-                    span: self.tcx.def_span(def_id),\n-                })\n-                .into(),\n-            GenericParamDefKind::Const { .. } => {\n-                let span = self.tcx.def_span(def_id);\n-                let origin = ConstVariableOrigin {\n-                    kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n-                    span,\n-                };\n-                self.next_const_var(\n-                    self.tcx\n-                        .type_of(param.def_id)\n-                        .no_bound_vars()\n-                        .expect(\"const parameter types cannot be generic\"),\n-                    origin,\n-                )\n-                .into()\n-            }\n-        })\n-    }\n-}"}, {"sha": "b7b11ff8942f98e1a5607bf0e92d5841119b86c3", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=b0eaaca31457672a8022312cc0f89b18ebc9d754", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir_analysis::astconv::InferCtxtExt as _;\n use rustc_hir_analysis::autoderef::{self, Autoderef};\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n@@ -954,7 +953,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_def_id: DefId,\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n-        let trait_substs = self.fresh_item_substs(trait_def_id);\n+        let trait_substs = self.fresh_substs_for_item(self.span, trait_def_id);\n         let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n@@ -1899,7 +1898,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         impl_def_id: DefId,\n     ) -> (ty::EarlyBinder<Ty<'tcx>>, SubstsRef<'tcx>) {\n-        (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n+        (self.tcx.type_of(impl_def_id), self.fresh_substs_for_item(self.span, impl_def_id))\n     }\n \n     /// Replaces late-bound-regions bound by `value` with `'static` using"}, {"sha": "9f85f9207e8f28119692ad4f0ac1e0d6f57d7f85", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=b0eaaca31457672a8022312cc0f89b18ebc9d754", "patch": "@@ -129,7 +129,6 @@ pub enum TypeVariableOriginKind {\n     /// (before it has been determined).\n     // FIXME(eddyb) distinguish upvar inference variables from the rest.\n     ClosureSynthetic,\n-    SubstitutionPlaceholder,\n     AutoDeref,\n     AdjustmentType,\n "}, {"sha": "991b9f01985ca4656d43d1a2104b9059874530f3", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0eaaca31457672a8022312cc0f89b18ebc9d754/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=b0eaaca31457672a8022312cc0f89b18ebc9d754", "patch": "@@ -116,7 +116,6 @@ pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n     ConstParameterDefinition(Symbol, DefId),\n-    SubstitutionPlaceholder,\n }\n \n #[derive(Copy, Clone, Debug)]"}]}