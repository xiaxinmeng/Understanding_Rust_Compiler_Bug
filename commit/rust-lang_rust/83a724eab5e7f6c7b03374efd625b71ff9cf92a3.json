{"sha": "83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "node_id": "C_kwDOAAsO6NoAKDgzYTcyNGVhYjVlN2Y2YzdiMDMzNzRlZmQ2MjViNzFmZjljZjkyYTM", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T06:48:14Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:19Z"}, "message": "Refactor more diagnostics in `rustc_attr`", "tree": {"sha": "4b1e93db63d66ed6e75f59ff3f8e9a41d33960d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1e93db63d66ed6e75f59ff3f8e9a41d33960d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "html_url": "https://github.com/rust-lang/rust/commit/83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a724eab5e7f6c7b03374efd625b71ff9cf92a3/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0005f628f068a766647bb0b159dac2c6cefcefa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0005f628f068a766647bb0b159dac2c6cefcefa1", "html_url": "https://github.com/rust-lang/rust/commit/0005f628f068a766647bb0b159dac2c6cefcefa1"}], "stats": {"total": 97, "additions": 49, "deletions": 48}, "files": [{"sha": "98a171488caba34fcc27a6075f086ebc08e4bb73", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/83a724eab5e7f6c7b03374efd625b71ff9cf92a3/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a724eab5e7f6c7b03374efd625b71ff9cf92a3/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "patch": "@@ -237,8 +237,6 @@ where\n     let mut promotable = false;\n     let mut allowed_through_unstable_modules = false;\n \n-    let diagnostic = &sess.parse_sess.span_diagnostic;\n-\n     'outer: for attr in attrs_iter {\n         if ![\n             sym::rustc_const_unstable,\n@@ -278,7 +276,7 @@ where\n                     *item = Some(v);\n                     true\n                 } else {\n-                    struct_span_err!(diagnostic, meta.span, E0539, \"incorrect meta item\").emit();\n+                    sess.emit_err(session_diagnostics::InvalidMetaItem { span: meta.span });\n                     false\n                 }\n             };\n@@ -344,39 +342,28 @@ where\n                                 // is a name/value pair string literal.\n                                 issue_num = match issue.unwrap().as_str() {\n                                     \"none\" => None,\n-                                    issue => {\n-                                        let emit_diag = |msg: &str| {\n-                                            struct_span_err!(\n-                                                diagnostic,\n-                                                mi.span,\n-                                                E0545,\n-                                                \"`issue` must be a non-zero numeric string \\\n-                                                or \\\"none\\\"\",\n-                                            )\n-                                            .span_label(mi.name_value_literal_span().unwrap(), msg)\n-                                            .emit();\n-                                        };\n-                                        match issue.parse() {\n-                                            Ok(0) => {\n-                                                emit_diag(\n-                                                    \"`issue` must not be \\\"0\\\", \\\n-                                                    use \\\"none\\\" instead\",\n-                                                );\n-                                                continue 'outer;\n-                                            }\n-                                            Ok(num) => NonZeroU32::new(num),\n-                                            Err(err) => {\n-                                                emit_diag(&err.to_string());\n-                                                continue 'outer;\n-                                            }\n+                                    issue => match issue.parse::<NonZeroU32>() {\n+                                        Ok(num) => Some(num),\n+                                        Err(err) => {\n+                                            sess.emit_err(\n+                                                session_diagnostics::InvalidIssueString {\n+                                                    span: mi.span,\n+                                                    cause: session_diagnostics::InvalidIssueStringCause::from_int_error_kind(\n+                                                        mi.name_value_literal_span().unwrap(),\n+                                                        err.kind(),\n+                                                    ),\n+                                                },\n+                                            );\n+                                            continue 'outer;\n                                         }\n-                                    }\n+                                    },\n                                 };\n                             }\n                             sym::soft => {\n                                 if !mi.is_word() {\n-                                    let msg = \"`soft` should not have any arguments\";\n-                                    sess.parse_sess.span_diagnostic.span_err(mi.span, msg);\n+                                    sess.emit_err(session_diagnostics::SoftNoArgs {\n+                                        span: mi.span,\n+                                    });\n                                 }\n                                 is_soft = true;\n                             }\n@@ -434,8 +421,7 @@ where\n                             continue;\n                         }\n                         _ => {\n-                            struct_span_err!(diagnostic, attr.span, E0547, \"missing 'issue'\")\n-                                .emit();\n+                            sess.emit_err(session_diagnostics::MissingIssue { span: attr.span });\n                             continue;\n                         }\n                     }\n@@ -530,14 +516,7 @@ where\n         if let Some((ref mut stab, _)) = const_stab {\n             stab.promotable = promotable;\n         } else {\n-            struct_span_err!(\n-                diagnostic,\n-                item_sp,\n-                E0717,\n-                \"`rustc_promotable` attribute must be paired with either a `rustc_const_unstable` \\\n-                or a `rustc_const_stable` attribute\"\n-            )\n-            .emit();\n+            sess.emit_err(session_diagnostics::RustcPromotablePairing { span: item_sp });\n         }\n     }\n \n@@ -552,13 +531,7 @@ where\n         {\n             *allowed_through_unstable_modules = true;\n         } else {\n-            struct_span_err!(\n-                diagnostic,\n-                item_sp,\n-                E0789,\n-                \"`rustc_allowed_through_unstable_modules` attribute must be paired with a `stable` attribute\"\n-            )\n-            .emit();\n+            sess.emit_err(session_diagnostics::RustcAllowedUnstablePairing { span: item_sp });\n         }\n     }\n "}, {"sha": "45dda0ea7c45843489c23f67378630c8e7fb3d8b", "filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83a724eab5e7f6c7b03374efd625b71ff9cf92a3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/83a724eab5e7f6c7b03374efd625b71ff9cf92a3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl?ref=83a724eab5e7f6c7b03374efd625b71ff9cf92a3", "patch": "@@ -27,3 +27,31 @@ attr_unsupported_literal_deprecated_kv_pair =\n     item in `deprecated` must be a key/value pair\n attr_unsupported_literal_suggestion =\n     consider removing the prefix\n+\n+attr_invalid_meta_item =\n+    incorrect meta item\n+\n+attr_invalid_issue_string =\n+    `issue` must be a non-zero numeric string or \"none\"\n+attr_must_not_be_zero =\n+    `issue` must not be \"0\", use \"none\" instead\n+attr_empty =\n+    cannot parse integer from empty string\n+attr_invalid_digit =\n+    invalid digit found in string\n+attr_pos_overflow =\n+    number too large to fit in target type\n+attr_neg_overflow =\n+    number too small to fit in target type\n+\n+attr_missing_issue =\n+    missing 'issue'\n+\n+attr_rustc_promotable_pairing =\n+    `rustc_promotable` attribute must be paired with either a `rustc_const_unstable` or a `rustc_const_stable` attribute\n+\n+attr_rustc_allowed_unstable_pairing =\n+    `rustc_allowed_through_unstable_modules` attribute must be paired with a `stable` attribute\n+\n+attr_soft_no_args =\n+    `soft` should not have any arguments"}]}