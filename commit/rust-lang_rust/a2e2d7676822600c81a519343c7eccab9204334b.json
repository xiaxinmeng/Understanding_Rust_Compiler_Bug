{"sha": "a2e2d7676822600c81a519343c7eccab9204334b", "node_id": "C_kwDOAAsO6NoAKGEyZTJkNzY3NjgyMjYwMGM4MWE1MTkzNDNjN2VjY2FiOTIwNDMzNGI", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-08-23T16:45:29Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-08-27T15:39:11Z"}, "message": "tidy: move directory traversal utility functions into dedicated module", "tree": {"sha": "cf8c4bb26e78b263bd03876e582d74949413b0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf8c4bb26e78b263bd03876e582d74949413b0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e2d7676822600c81a519343c7eccab9204334b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e2d7676822600c81a519343c7eccab9204334b", "html_url": "https://github.com/rust-lang/rust/commit/a2e2d7676822600c81a519343c7eccab9204334b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e2d7676822600c81a519343c7eccab9204334b/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4caedbae869855a19ca49455e2cd338ae3b8c1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4caedbae869855a19ca49455e2cd338ae3b8c1ef", "html_url": "https://github.com/rust-lang/rust/commit/4caedbae869855a19ca49455e2cd338ae3b8c1ef"}], "stats": {"total": 136, "additions": 74, "deletions": 62}, "files": [{"sha": "12d3bdcd76f8257f922951187a3903029f215773", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 9, "deletions": 62, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2d7676822600c81a519343c7eccab9204334b/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2d7676822600c81a519343c7eccab9204334b/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=a2e2d7676822600c81a519343c7eccab9204334b", "patch": "@@ -3,12 +3,14 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-use std::fs::File;\n-use std::io::Read;\n-use walkdir::{DirEntry, WalkDir};\n-\n-use std::path::Path;\n-\n+use walk::{filter_dirs, walk, walk_many, walk_no_read};\n+\n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The expression that failed\n+/// * The error itself\n+/// * (optionally) a path connected to the error (e.g. failure to open a file)\n+#[macro_export]\n macro_rules! t {\n     ($e:expr, $p:expr) => {\n         match $e {\n@@ -53,59 +55,4 @@ pub mod target_specific_tests;\n pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n-\n-fn filter_dirs(path: &Path) -> bool {\n-    let skip = [\n-        \"tidy-test-file\",\n-        \"compiler/rustc_codegen_cranelift\",\n-        \"compiler/rustc_codegen_gcc\",\n-        \"src/llvm-project\",\n-        \"library/backtrace\",\n-        \"library/portable-simd\",\n-        \"library/stdarch\",\n-        \"src/tools/cargo\",\n-        \"src/tools/clippy\",\n-        \"src/tools/miri\",\n-        \"src/tools/rls\",\n-        \"src/tools/rust-analyzer\",\n-        \"src/tools/rust-installer\",\n-        \"src/tools/rustfmt\",\n-        \"src/doc/book\",\n-        // Filter RLS output directories\n-        \"target/rls\",\n-    ];\n-    skip.iter().any(|p| path.ends_with(p))\n-}\n-\n-fn walk_many(\n-    paths: &[&Path],\n-    skip: &mut dyn FnMut(&Path) -> bool,\n-    f: &mut dyn FnMut(&DirEntry, &str),\n-) {\n-    for path in paths {\n-        walk(path, skip, f);\n-    }\n-}\n-\n-fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n-    let mut contents = String::new();\n-    walk_no_read(path, skip, &mut |entry| {\n-        contents.clear();\n-        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n-            contents.clear();\n-        }\n-        f(&entry, &contents);\n-    });\n-}\n-\n-fn walk_no_read(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry)) {\n-    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n-    for entry in walker {\n-        if let Ok(entry) = entry {\n-            if entry.file_type().is_dir() {\n-                continue;\n-            }\n-            f(&entry);\n-        }\n-    }\n-}\n+pub mod walk;"}, {"sha": "6dca55dfa9fa9097abac561265935f508d1107f3", "filename": "src/tools/tidy/src/walk.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2d7676822600c81a519343c7eccab9204334b/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2d7676822600c81a519343c7eccab9204334b/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=a2e2d7676822600c81a519343c7eccab9204334b", "patch": "@@ -0,0 +1,65 @@\n+use std::fs::File;\n+use std::io::Read;\n+use walkdir::{DirEntry, WalkDir};\n+\n+use std::path::Path;\n+\n+pub fn filter_dirs(path: &Path) -> bool {\n+    let skip = [\n+        \"tidy-test-file\",\n+        \"compiler/rustc_codegen_cranelift\",\n+        \"compiler/rustc_codegen_gcc\",\n+        \"src/llvm-project\",\n+        \"library/backtrace\",\n+        \"library/portable-simd\",\n+        \"library/stdarch\",\n+        \"src/tools/cargo\",\n+        \"src/tools/clippy\",\n+        \"src/tools/miri\",\n+        \"src/tools/rls\",\n+        \"src/tools/rust-analyzer\",\n+        \"src/tools/rust-installer\",\n+        \"src/tools/rustfmt\",\n+        \"src/doc/book\",\n+        // Filter RLS output directories\n+        \"target/rls\",\n+    ];\n+    skip.iter().any(|p| path.ends_with(p))\n+}\n+\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: &mut dyn FnMut(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry, &str),\n+) {\n+    for path in paths {\n+        walk(path, skip, f);\n+    }\n+}\n+\n+pub fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n+    let mut contents = String::new();\n+    walk_no_read(path, skip, &mut |entry| {\n+        contents.clear();\n+        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n+            contents.clear();\n+        }\n+        f(&entry, &contents);\n+    });\n+}\n+\n+pub(crate) fn walk_no_read(\n+    path: &Path,\n+    skip: &mut dyn FnMut(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry),\n+) {\n+    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n+    for entry in walker {\n+        if let Ok(entry) = entry {\n+            if entry.file_type().is_dir() {\n+                continue;\n+            }\n+            f(&entry);\n+        }\n+    }\n+}"}]}