{"sha": "138c50f0af57e2631aa09092b826e2c3efd224d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOGM1MGYwYWY1N2UyNjMxYWEwOTA5MmI4MjZlMmMzZWZkMjI0ZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T00:03:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T00:03:55Z"}, "message": "Auto merge of #67878 - Others:opt-3, r=Mark-Simulacrum\n\nChange opt-level from 2 back to 3\n\nIn Cargo.toml, the opt-level for `release` and `bench` was overridden to be 2. This was to work around a problem with LLVM 7. However, rust no longer uses LLVM 7, so this is hopefully no longer needed?\n\nI tried a little bit to replicate the original problem, and could not. I think running this through CI is the best way to smoke test this :) Even if things break dramatically, the comment should be updated to reflect that things are still broken with LLVM 9.\n\nI'm just getting started playing with the compiler, so apologies if I've missed an obvious problem here.\n\nfixes #52378\n\n(possibly relevant is the [current update to LLVM 10](https://github.com/rust-lang/rust/pull/67759))", "tree": {"sha": "c9ef3ad521415df72625bb6ec2edbd349abb8955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ef3ad521415df72625bb6ec2edbd349abb8955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/138c50f0af57e2631aa09092b826e2c3efd224d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/138c50f0af57e2631aa09092b826e2c3efd224d2", "html_url": "https://github.com/rust-lang/rust/commit/138c50f0af57e2631aa09092b826e2c3efd224d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/138c50f0af57e2631aa09092b826e2c3efd224d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34700c15c7a49d400951da385b2eacab6fb6fe86", "url": "https://api.github.com/repos/rust-lang/rust/commits/34700c15c7a49d400951da385b2eacab6fb6fe86", "html_url": "https://github.com/rust-lang/rust/commit/34700c15c7a49d400951da385b2eacab6fb6fe86"}, {"sha": "0d52c562db18e85cf53078c9ddb40abe469a4aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d52c562db18e85cf53078c9ddb40abe469a4aab", "html_url": "https://github.com/rust-lang/rust/commit/0d52c562db18e85cf53078c9ddb40abe469a4aab"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "2f5a708e8dc6cff1f353a558f2940de30607e6ae", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/138c50f0af57e2631aa09092b826e2c3efd224d2/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/138c50f0af57e2631aa09092b826e2c3efd224d2/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=138c50f0af57e2631aa09092b826e2c3efd224d2", "patch": "@@ -31,13 +31,6 @@ exclude = [\n   \"obj\",\n ]\n \n-# Curiously, LLVM 7.0 will segfault if compiled with opt-level=3\n-# See issue https://github.com/rust-lang/rust/issues/52378\n-[profile.release]\n-opt-level = 2\n-[profile.bench]\n-opt-level = 2\n-\n # These options are controlled from our rustc wrapper script, so turn them off\n # here and have them controlled elsewhere.\n [profile.dev]"}, {"sha": "7d59c0181a8f3645ef84163382892ec8d043c7fb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/138c50f0af57e2631aa09092b826e2c3efd224d2/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138c50f0af57e2631aa09092b826e2c3efd224d2/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=138c50f0af57e2631aa09092b826e2c3efd224d2", "patch": "@@ -38,6 +38,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` as long as there are more things to do.\n     ///\n     /// This is used by [priroda](https://github.com/oli-obk/priroda)\n+    ///\n+    /// This is marked `#inline(always)` to work around adverserial codegen when `opt-level = 3`\n+    #[inline(always)]\n     pub fn step(&mut self) -> InterpResult<'tcx, bool> {\n         if self.stack.is_empty() {\n             return Ok(false);"}, {"sha": "01e1c6b0ce8d84e43a09376afcda032c98857797", "filename": "src/test/run-make/wasm-stringify-ints-small/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/138c50f0af57e2631aa09092b826e2c3efd224d2/src%2Ftest%2Frun-make%2Fwasm-stringify-ints-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/138c50f0af57e2631aa09092b826e2c3efd224d2/src%2Ftest%2Frun-make%2Fwasm-stringify-ints-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-stringify-ints-small%2FMakefile?ref=138c50f0af57e2631aa09092b826e2c3efd224d2", "patch": "@@ -4,7 +4,7 @@ ifeq ($(TARGET),wasm32-unknown-unknown)\n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown\n \twc -c < $(TMPDIR)/foo.wasm\n-\t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"20500\" ]\n+\t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"25000\" ]\n else\n all:\n endif"}]}