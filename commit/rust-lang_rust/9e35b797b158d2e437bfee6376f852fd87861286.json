{"sha": "9e35b797b158d2e437bfee6376f852fd87861286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMzViNzk3YjE1OGQyZTQzN2JmZWU2Mzc2Zjg1MmZkODc4NjEyODY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-25T19:26:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-26T15:18:03Z"}, "message": "rustc: Default 32 codegen units at O0\n\nThis commit changes the default of rustc to use 32 codegen units when compiling\nin debug mode, typically an opt-level=0 compilation. Since their inception\ncodegen units have matured quite a bit, gaining features such as:\n\n* Parallel translation and codegen enabling codegen units to get worked on even\n  more quickly.\n* Deterministic and reliable partitioning through the same infrastructure as\n  incremental compilation.\n* Global rate limiting through the `jobserver` crate to avoid overloading the\n  system.\n\nThe largest benefit of codegen units has forever been faster compilation through\nparallel processing of modules on the LLVM side of things, using all the cores\navailable on build machines that typically have many available. Some downsides\nhave been fixed through the features above, but the major downside remaining is\nthat using codegen units reduces opportunities for inlining and optimization.\nThis, however, doesn't matter much during debug builds!\n\nIn this commit the default number of codegen units for debug builds has been\nraised from 1 to 32. This should enable most `cargo build` compiles that are\nbottlenecked on translation and/or code generation to immediately see speedups\nthrough parallelization on available cores.\n\nWork is being done to *always* enable multiple codegen units (and therefore\nparallel codegen) but it requires #44841 at least to be landed and stabilized,\nbut stay tuned if you're interested in that aspect!", "tree": {"sha": "991f5c67e13dffe9fa45e6491c27a84c1dbbb724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991f5c67e13dffe9fa45e6491c27a84c1dbbb724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e35b797b158d2e437bfee6376f852fd87861286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e35b797b158d2e437bfee6376f852fd87861286", "html_url": "https://github.com/rust-lang/rust/commit/9e35b797b158d2e437bfee6376f852fd87861286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e35b797b158d2e437bfee6376f852fd87861286/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8bf391fd595ac0c1ff6e6b7f1ef57cec4eb6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8bf391fd595ac0c1ff6e6b7f1ef57cec4eb6da", "html_url": "https://github.com/rust-lang/rust/commit/4b8bf391fd595ac0c1ff6e6b7f1ef57cec4eb6da"}], "stats": {"total": 145, "additions": 97, "deletions": 48}, "files": [{"sha": "0390e222348655af83c3fa673423bea08c5306e2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 69, "deletions": 28, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -350,6 +350,9 @@ top_level_options!(\n         // is currently just a hack and will be removed eventually, so please\n         // try to not rely on this too much.\n         actually_rustdoc: bool [TRACKED],\n+\n+        // Number of object files/codegen units to produce on the backend\n+        codegen_units: usize [UNTRACKED],\n     }\n );\n \n@@ -512,6 +515,7 @@ pub fn basic_options() -> Options {\n         unstable_features: UnstableFeatures::Disallow,\n         debug_assertions: true,\n         actually_rustdoc: false,\n+        codegen_units: 1,\n     }\n }\n \n@@ -529,11 +533,6 @@ impl Options {\n             (self.debugging_opts.query_dep_graph || self.debugging_opts.incremental_info)\n     }\n \n-    pub fn single_codegen_unit(&self) -> bool {\n-        self.incremental.is_none() ||\n-        self.cg.codegen_units == 1\n-    }\n-\n     pub fn file_path_mapping(&self) -> FilePathMapping {\n         FilePathMapping::new(\n             self.debugging_opts.remap_path_prefix_from.iter().zip(\n@@ -791,7 +790,7 @@ macro_rules! options {\n         fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n-                None => { *slot = None; true }\n+                None => { *slot = None; false }\n             }\n         }\n \n@@ -924,7 +923,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"metadata to mangle symbol names with\"),\n     extra_filename: String = (\"\".to_string(), parse_string, [UNTRACKED],\n          \"extra data to put in each output filename\"),\n-    codegen_units: usize = (1, parse_uint, [UNTRACKED],\n+    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (SomePasses(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n@@ -1521,27 +1520,35 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     }\n \n     let mut cg = build_codegen_options(matches, error_format);\n+    let mut codegen_units = cg.codegen_units;\n \n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n-    if matches.opt_present(\"o\") && cg.codegen_units != 1 {\n-        let incompatible: Vec<_> = output_types.iter()\n-            .map(|ot_path| ot_path.0)\n-            .filter(|ot| {\n-                !ot.is_compatible_with_codegen_units_and_single_output_file()\n-            }).collect();\n-        if !incompatible.is_empty() {\n-            for ot in &incompatible {\n-                early_warn(error_format, &format!(\"--emit={} with -o incompatible with \\\n-                                                 -C codegen-units=N for N > 1\",\n-                                                ot.shorthand()));\n+    let incompatible: Vec<_> = output_types.iter()\n+        .map(|ot_path| ot_path.0)\n+        .filter(|ot| {\n+            !ot.is_compatible_with_codegen_units_and_single_output_file()\n+        })\n+        .map(|ot| ot.shorthand())\n+        .collect();\n+    if !incompatible.is_empty() {\n+        match codegen_units {\n+            Some(n) if n > 1 => {\n+                if matches.opt_present(\"o\") {\n+                    for ot in &incompatible {\n+                        early_warn(error_format, &format!(\"--emit={} with -o incompatible with \\\n+                                                         -C codegen-units=N for N > 1\",\n+                                                        ot));\n+                    }\n+                    early_warn(error_format, \"resetting to default -C codegen-units=1\");\n+                    codegen_units = Some(1);\n+                }\n             }\n-            early_warn(error_format, \"resetting to default -C codegen-units=1\");\n-            cg.codegen_units = 1;\n+            _ => codegen_units = Some(1),\n         }\n     }\n \n-    if cg.codegen_units < 1 {\n+    if codegen_units == Some(0) {\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }\n \n@@ -1550,12 +1557,17 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     // case, but it would be confusing to have the validity of\n     // `-Z lto -C codegen-units=2` depend on details of the crate being\n     // compiled, so we complain regardless.\n-    if cg.lto && cg.codegen_units > 1 {\n-        // This case is impossible to handle because LTO expects to be able\n-        // to combine the entire crate and all its dependencies into a\n-        // single compilation unit, but each codegen unit is in a separate\n-        // LLVM context, so they can't easily be combined.\n-        early_error(error_format, \"can't perform LTO when using multiple codegen units\");\n+    if cg.lto {\n+        if let Some(n) = codegen_units {\n+            if n > 1 {\n+                // This case is impossible to handle because LTO expects to be able\n+                // to combine the entire crate and all its dependencies into a\n+                // single compilation unit, but each codegen unit is in a separate\n+                // LLVM context, so they can't easily be combined.\n+                early_error(error_format, \"can't perform LTO when using multiple codegen units\");\n+            }\n+        }\n+        codegen_units = Some(1);\n     }\n \n     if cg.lto && debugging_opts.incremental.is_some() {\n@@ -1720,6 +1732,34 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let incremental = debugging_opts.incremental.as_ref().map(|m| PathBuf::from(m));\n \n+    let codegen_units = codegen_units.unwrap_or_else(|| {\n+        match opt_level {\n+            // If we're compiling at `-O0` then default to 32 codegen units.\n+            // The number here shouldn't matter too too much as debug mode\n+            // builds don't rely on performance at all, meaning that lost\n+            // opportunities for inlining through multiple codegen units is\n+            // a non-issue.\n+            //\n+            // Note that the high number here doesn't mean that we'll be\n+            // spawning a large number of threads in parallel. The backend\n+            // of rustc contains global rate limiting through the\n+            // `jobserver` crate so we'll never overload the system with too\n+            // much work, but rather we'll only be optimizing when we're\n+            // otherwise cooperating with other instances of rustc.\n+            //\n+            // Rather the high number here means that we should be able to\n+            // keep a lot of idle cpus busy. By ensuring that no codegen\n+            // unit takes *too* long to build we'll be guaranteed that all\n+            // cpus will finish pretty closely to one another and we should\n+            // make relatively optimal use of system resources\n+            OptLevel::No => 32,\n+\n+            // All other optimization levels default use one codegen unit,\n+            // the historical default in Rust for a Long Time.\n+            _ => 1,\n+        }\n+    });\n+\n     (Options {\n         crate_types,\n         optimize: opt_level,\n@@ -1744,6 +1784,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions,\n         actually_rustdoc: false,\n+        codegen_units,\n     },\n     cfg)\n }\n@@ -2447,7 +2488,7 @@ mod tests {\n         opts.cg.extra_filename = String::from(\"extra-filename\");\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-        opts.cg.codegen_units = 42;\n+        opts.cg.codegen_units = Some(42);\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts.cg.remark = super::SomePasses(vec![String::from(\"pass1\"),"}, {"sha": "2cf0a32d5afdfecf9579c553288278a54d53e838", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -509,7 +509,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                 // of when we do and don't keep .#module-name#.bc files around.\n                 let user_wants_numbered_bitcode =\n                         sess.opts.output_types.contains_key(&OutputType::Bitcode) &&\n-                        sess.opts.cg.codegen_units > 1;\n+                        sess.opts.codegen_units > 1;\n                 if !sess.opts.cg.save_temps && !user_wants_numbered_bitcode {\n                     remove(sess, &bc_filename);\n                 }"}, {"sha": "6b980a37ac77837c8b3604e72f7103643314391e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -939,10 +939,10 @@ fn produce_final_output_artifacts(sess: &Session,\n         let needs_crate_object = crate_output.outputs.contains_key(&OutputType::Exe);\n \n         let keep_numbered_bitcode = needs_crate_bitcode ||\n-                (user_wants_bitcode && sess.opts.cg.codegen_units > 1);\n+                (user_wants_bitcode && sess.opts.codegen_units > 1);\n \n         let keep_numbered_objects = needs_crate_object ||\n-                (user_wants_objects && sess.opts.cg.codegen_units > 1);\n+                (user_wants_objects && sess.opts.codegen_units > 1);\n \n         for module in compiled_modules.modules.iter() {\n             let module_name = Some(&module.name[..]);\n@@ -1520,6 +1520,11 @@ fn start_executing_work(tcx: TyCtxt,\n                                     total_llvm_time);\n         }\n \n+        // Regardless of what order these modules completed in, report them to\n+        // the backend in the same order every time to ensure that we're handing\n+        // out deterministic results.\n+        compiled_modules.sort_by(|a, b| a.name.cmp(&b.name));\n+\n         let compiled_metadata_module = compiled_metadata_module\n             .expect(\"Metadata module not compiled?\");\n \n@@ -1853,7 +1858,7 @@ impl OngoingCrateTranslation {\n \n         // FIXME: time_llvm_passes support - does this use a global context or\n         // something?\n-        if sess.opts.cg.codegen_units == 1 && sess.time_llvm_passes() {\n+        if sess.opts.codegen_units == 1 && sess.time_llvm_passes() {\n             unsafe { llvm::LLVMRustPrintPassTimings(); }\n         }\n "}, {"sha": "774acc813438fca05c5d15ca94ce093a58489b69", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -1162,7 +1162,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n     let strategy = if tcx.sess.opts.debugging_opts.incremental.is_some() {\n         PartitioningStrategy::PerModule\n     } else {\n-        PartitioningStrategy::FixedUnitCount(tcx.sess.opts.cg.codegen_units)\n+        PartitioningStrategy::FixedUnitCount(tcx.sess.opts.codegen_units)\n     };\n \n     let codegen_units = time(time_passes, \"codegen unit partitioning\", || {\n@@ -1175,7 +1175,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n             .collect::<Vec<_>>()\n     });\n \n-    assert!(tcx.sess.opts.cg.codegen_units == codegen_units.len() ||\n+    assert!(tcx.sess.opts.codegen_units == codegen_units.len() ||\n             tcx.sess.opts.debugging_opts.incremental.is_some());\n \n     let translation_items: DefIdSet = items.iter().filter_map(|trans_item| {"}, {"sha": "755e211a349966c568f63389840d1bceab6bf62b", "filename": "src/test/run-make/codegen-options-parsing/Makefile", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -1,26 +1,28 @@\n -include ../tools.mk\n \n+LOG = $(TMPDIR)/log.txt\n+\n all:\n \t#Option taking a number\n-\t$(RUSTC) -C codegen-units dummy.rs 2>&1 | \\\n-\t\tgrep 'codegen option `codegen-units` requires a number'\n-\t$(RUSTC) -C codegen-units= dummy.rs 2>&1 | \\\n-\t\tgrep 'incorrect value `` for codegen option `codegen-units` - a number was expected'\n-\t$(RUSTC) -C codegen-units=foo dummy.rs 2>&1 | \\\n-\t\tgrep 'incorrect value `foo` for codegen option `codegen-units` - a number was expected'\n+\t$(RUSTC) -C codegen-units dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'codegen option `codegen-units` requires a number' $(LOG)\n+\t$(RUSTC) -C codegen-units= dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'incorrect value `` for codegen option `codegen-units` - a number was expected' $(LOG)\n+\t$(RUSTC) -C codegen-units=foo dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'incorrect value `foo` for codegen option `codegen-units` - a number was expected' $(LOG)\n \t$(RUSTC) -C codegen-units=1 dummy.rs\n \t#Option taking a string\n-\t$(RUSTC) -C extra-filename dummy.rs 2>&1 | \\\n-\t\tgrep 'codegen option `extra-filename` requires a string'\n+\t$(RUSTC) -C extra-filename dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'codegen option `extra-filename` requires a string' $(LOG)\n \t$(RUSTC) -C extra-filename= dummy.rs 2>&1\n \t$(RUSTC) -C extra-filename=foo dummy.rs 2>&1\n \t#Option taking no argument\n-\t$(RUSTC) -C lto= dummy.rs 2>&1 | \\\n-\t\tgrep 'codegen option `lto` takes no value'\n-\t$(RUSTC) -C lto=1 dummy.rs 2>&1 | \\\n-\t\tgrep 'codegen option `lto` takes no value'\n-\t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n-\t\tgrep 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto= dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'codegen option `lto` takes no value' $(LOG)\n+\t$(RUSTC) -C lto=1 dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'codegen option `lto` takes no value' $(LOG)\n+\t$(RUSTC) -C lto=foo dummy.rs 2>&1 | tee $(LOG)\n+\tgrep 'codegen option `lto` takes no value' $(LOG)\n \t$(RUSTC) -C lto dummy.rs\n \n \t# Should not link dead code..."}, {"sha": "2ff4593a801fe74601708e30d9ea0d79a87edf32", "filename": "src/test/run-make/llvm-phase/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e35b797b158d2e437bfee6376f852fd87861286/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e35b797b158d2e437bfee6376f852fd87861286/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs?ref=9e35b797b158d2e437bfee6376f852fd87861286", "patch": "@@ -77,6 +77,7 @@ fn main() {\n         .split(' ').map(|s| s.to_string()).collect();\n     args.push(\"--out-dir\".to_string());\n     args.push(env::var(\"TMPDIR\").unwrap());\n+    args.push(\"-Ccodegen-units=1\".to_string());\n \n     let (result, _) = rustc_driver::run_compiler(\n         &args, &mut JitCalls, Some(box JitLoader), None);"}]}