{"sha": "cb7e527692bd01c68f01fd373db0c49dbc8670ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiN2U1Mjc2OTJiZDAxYzY4ZjAxZmQzNzNkYjBjNDlkYmM4NjcwY2U=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-11T02:25:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-09-12T02:30:24Z"}, "message": "Fix broken handling of primitive items\n\n- Fix broken handling of primitive associated items\n- Remove fragment hack\n\n  Fixes 83083\n\n- more logging\n- Update CrateNum hacks\n\n  The CrateNum has no relation to where in the dependency tree the crate\n  is, only when it's loaded. Explicitly special-case core instead of\n  assuming it will be the first DefId.\n\n- Update and add tests\n- Cache calculation of primitive locations\n\n  This could possibly be avoided by passing a Cache into\n  collect_intra_doc_links; but that's a much larger change, and doesn't\n  seem valuable other than for this.", "tree": {"sha": "8f2158f843250bb3fdd44346a6d73d83849a8c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2158f843250bb3fdd44346a6d73d83849a8c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb7e527692bd01c68f01fd373db0c49dbc8670ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7e527692bd01c68f01fd373db0c49dbc8670ce", "html_url": "https://github.com/rust-lang/rust/commit/cb7e527692bd01c68f01fd373db0c49dbc8670ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb7e527692bd01c68f01fd373db0c49dbc8670ce/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78acaee0372aa18ca37ebab8d919acbe997bd1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78acaee0372aa18ca37ebab8d919acbe997bd1c", "html_url": "https://github.com/rust-lang/rust/commit/f78acaee0372aa18ca37ebab8d919acbe997bd1c"}], "stats": {"total": 309, "additions": 144, "deletions": 165}, "files": [{"sha": "be1532d45015029fd9112f872a2eaaad3c2fb3b1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 52, "deletions": 67, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -461,60 +461,20 @@ impl Item {\n             .map_or(&[][..], |v| v.as_slice())\n             .iter()\n             .filter_map(|ItemLink { link: s, link_text, did, ref fragment }| {\n-                match did {\n-                    Some(did) => {\n-                        if let Ok((mut href, ..)) = href(*did, cx) {\n-                            if let Some(ref fragment) = *fragment {\n-                                href.push('#');\n-                                href.push_str(fragment);\n-                            }\n-                            Some(RenderedLink {\n-                                original_text: s.clone(),\n-                                new_text: link_text.clone(),\n-                                href,\n-                            })\n-                        } else {\n-                            None\n-                        }\n-                    }\n-                    // FIXME(83083): using fragments as a side-channel for\n-                    // primitive names is very unfortunate\n-                    None => {\n-                        let relative_to = &cx.current;\n-                        if let Some(ref fragment) = *fragment {\n-                            let url = match cx.cache().extern_locations.get(&self.def_id.krate()) {\n-                                Some(&ExternalLocation::Local) => {\n-                                    if relative_to[0] == \"std\" {\n-                                        let depth = relative_to.len() - 1;\n-                                        \"../\".repeat(depth)\n-                                    } else {\n-                                        let depth = relative_to.len();\n-                                        format!(\"{}std/\", \"../\".repeat(depth))\n-                                    }\n-                                }\n-                                Some(ExternalLocation::Remote(ref s)) => {\n-                                    format!(\"{}/std/\", s.trim_end_matches('/'))\n-                                }\n-                                Some(ExternalLocation::Unknown) | None => {\n-                                    format!(\"{}/std/\", crate::DOC_RUST_LANG_ORG_CHANNEL)\n-                                }\n-                            };\n-                            // This is a primitive so the url is done \"by hand\".\n-                            let tail = fragment.find('#').unwrap_or_else(|| fragment.len());\n-                            Some(RenderedLink {\n-                                original_text: s.clone(),\n-                                new_text: link_text.clone(),\n-                                href: format!(\n-                                    \"{}primitive.{}.html{}\",\n-                                    url,\n-                                    &fragment[..tail],\n-                                    &fragment[tail..]\n-                                ),\n-                            })\n-                        } else {\n-                            panic!(\"This isn't a primitive?!\");\n-                        }\n+                debug!(?did);\n+                if let Ok((mut href, ..)) = href(*did, cx) {\n+                    debug!(?href);\n+                    if let Some(ref fragment) = *fragment {\n+                        href.push('#');\n+                        href.push_str(fragment);\n                     }\n+                    Some(RenderedLink {\n+                        original_text: s.clone(),\n+                        new_text: link_text.clone(),\n+                        href,\n+                    })\n+                } else {\n+                    None\n                 }\n             })\n             .collect()\n@@ -531,18 +491,10 @@ impl Item {\n             .get(&self.def_id)\n             .map_or(&[][..], |v| v.as_slice())\n             .iter()\n-            .filter_map(|ItemLink { link: s, link_text, did, fragment }| {\n-                // FIXME(83083): using fragments as a side-channel for\n-                // primitive names is very unfortunate\n-                if did.is_some() || fragment.is_some() {\n-                    Some(RenderedLink {\n-                        original_text: s.clone(),\n-                        new_text: link_text.clone(),\n-                        href: String::new(),\n-                    })\n-                } else {\n-                    None\n-                }\n+            .map(|ItemLink { link: s, link_text, .. }| RenderedLink {\n+                original_text: s.clone(),\n+                new_text: link_text.clone(),\n+                href: String::new(),\n             })\n             .collect()\n     }\n@@ -963,7 +915,7 @@ crate struct Attributes {\n     crate other_attrs: Vec<ast::Attribute>,\n }\n \n-#[derive(Clone, Debug, Default, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n@@ -975,7 +927,7 @@ crate struct ItemLink {\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n     pub(crate) link_text: String,\n-    pub(crate) did: Option<DefId>,\n+    pub(crate) did: DefId,\n     /// The url fragment to append to the link\n     pub(crate) fragment: Option<String>,\n }\n@@ -1802,6 +1754,39 @@ impl PrimitiveType {\n             Never => sym::never,\n         }\n     }\n+\n+    /// Returns the DefId of the module with `doc(primitive)` for this primitive type.\n+    /// Panics if there is no such module.\n+    ///\n+    /// This gives precedence to primitives defined in the current crate, and deprioritizes primitives defined in `core`,\n+    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which will be picked.\n+    /// In particular, if a crate depends on both `std` and another crate that also defines `doc(primitive)`, then\n+    /// it's entirely random whether `std` or the other crate is picked. (no_std crates are usually fine unless multiple dependencies define a primitive.)\n+    crate fn primitive_locations(tcx: TyCtxt<'_>) -> &FxHashMap<PrimitiveType, DefId> {\n+        static PRIMITIVE_LOCATIONS: OnceCell<FxHashMap<PrimitiveType, DefId>> = OnceCell::new();\n+        PRIMITIVE_LOCATIONS.get_or_init(|| {\n+            let mut primitive_locations = FxHashMap::default();\n+            // NOTE: technically this misses crates that are only passed with `--extern` and not loaded when checking the crate.\n+            // This is a degenerate case that I don't plan to support.\n+            for &crate_num in tcx.crates(()) {\n+                let e = ExternalCrate { crate_num };\n+                let crate_name = e.name(tcx);\n+                debug!(?crate_num, ?crate_name);\n+                for &(def_id, prim) in &e.primitives(tcx) {\n+                    // HACK: try to link to std instead where possible\n+                    if crate_name == sym::core && primitive_locations.get(&prim).is_some() {\n+                        continue;\n+                    }\n+                    primitive_locations.insert(prim, def_id);\n+                }\n+            }\n+            let local_primitives = ExternalCrate { crate_num: LOCAL_CRATE }.primitives(tcx);\n+            for (def_id, prim) in local_primitives {\n+                primitive_locations.insert(prim, def_id);\n+            }\n+            primitive_locations\n+        })\n+    }\n }\n \n impl From<ast::IntTy> for PrimitiveType {"}, {"sha": "66fd0d9262d6be75b1fd9904d29225ff3ba1507e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n-use crate::clean::{self, GetDefId, ItemId};\n+use crate::clean::{self, GetDefId, ItemId, PrimitiveType};\n use crate::config::RenderOptions;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n@@ -159,17 +159,16 @@ impl Cache {\n             self.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }\n \n-        // Cache where all known primitives have their documentation located.\n-        //\n-        // Favor linking to as local extern as possible, so iterate all crates in\n-        // reverse topological order.\n-        for &e in krate.externs.iter().rev() {\n-            for &(def_id, prim) in &e.primitives(tcx) {\n-                self.primitive_locations.insert(prim, def_id);\n-            }\n-        }\n-        for &(def_id, prim) in &krate.primitives {\n-            self.primitive_locations.insert(prim, def_id);\n+        // FIXME: avoid this clone (requires implementing Default manually)\n+        self.primitive_locations = PrimitiveType::primitive_locations(tcx).clone();\n+        for (prim, &def_id) in &self.primitive_locations {\n+            let crate_name = tcx.crate_name(def_id.krate);\n+            // Recall that we only allow primitive modules to be at the root-level of the crate.\n+            // If that restriction is ever lifted, this will have to include the relative paths instead.\n+            self.external_paths.insert(\n+                def_id,\n+                (vec![crate_name.to_string(), prim.as_sym().to_string()], ItemType::Primitive),\n+            );\n         }\n \n         krate = CacheBuilder { tcx, cache: self }.fold_crate(krate);"}, {"sha": "2fde0017dc80c63be5cb8a1ffc6728620da667f9", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -509,14 +509,19 @@ crate fn href_with_root_path(\n         if shortty == ItemType::Module { fqp } else { &fqp[..fqp.len() - 1] }\n     }\n \n-    if !did.is_local() && !cache.access_levels.is_public(did) && !cache.document_private {\n+    if !did.is_local()\n+        && !cache.access_levels.is_public(did)\n+        && !cache.document_private\n+        && !cache.primitive_locations.values().any(|&id| id == did)\n+    {\n         return Err(HrefError::Private);\n     }\n \n     let mut is_remote = false;\n     let (fqp, shortty, mut url_parts) = match cache.paths.get(&did) {\n         Some(&(ref fqp, shortty)) => (fqp, shortty, {\n             let module_fqp = to_module_fqp(shortty, fqp);\n+            debug!(?fqp, ?shortty, ?module_fqp);\n             href_relative_parts(module_fqp, relative_to)\n         }),\n         None => {\n@@ -548,6 +553,7 @@ crate fn href_with_root_path(\n             url_parts.insert(0, root);\n         }\n     }\n+    debug!(?url_parts);\n     let last = &fqp.last().unwrap()[..];\n     let filename;\n     match shortty {"}, {"sha": "f8ea7a499b2340a4dcbd14e991d3f6131a1ba409", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -30,9 +30,7 @@ impl JsonRenderer<'_> {\n             .get(&item.def_id)\n             .into_iter()\n             .flatten()\n-            .filter_map(|clean::ItemLink { link, did, .. }| {\n-                did.map(|did| (link.clone(), from_item_id(did.into())))\n-            })\n+            .map(|clean::ItemLink { link, did, .. }| (link.clone(), from_item_id((*did).into())))\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n         let attrs = item"}, {"sha": "c0c37ee061198573e3cacc768966215563edaba5", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def::{\n };\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::ty::TyCtxt;\n-use rustc_middle::{bug, ty};\n+use rustc_middle::{bug, span_bug, ty};\n use rustc_resolve::ParentScope;\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::{MacroKind, SyntaxContext};\n@@ -98,14 +98,10 @@ impl Res {\n         }\n     }\n \n-    fn def_id(self) -> DefId {\n-        self.opt_def_id().expect(\"called def_id() on a primitive\")\n-    }\n-\n-    fn opt_def_id(self) -> Option<DefId> {\n+    fn def_id(self, tcx: TyCtxt<'_>) -> DefId {\n         match self {\n-            Res::Def(_, id) => Some(id),\n-            Res::Primitive(_) => None,\n+            Res::Def(_, id) => id,\n+            Res::Primitive(prim) => *PrimitiveType::primitive_locations(tcx).get(&prim).unwrap(),\n         }\n     }\n \n@@ -237,10 +233,7 @@ enum AnchorFailure {\n     /// link, Rustdoc disallows having a user-specified anchor.\n     ///\n     /// Most of the time this is fine, because you can just link to the page of\n-    /// the item if you want to provide your own anchor. For primitives, though,\n-    /// rustdoc uses the anchor as a side channel to know which page to link to;\n-    /// it doesn't show up in the generated link. Ideally, rustdoc would remove\n-    /// this limitation, allowing you to link to subheaders on primitives.\n+    /// the item if you want to provide your own anchor.\n     RustdocAnchorConflict(Res),\n }\n \n@@ -388,7 +381,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::AssocKind::Const => \"associatedconstant\",\n                         ty::AssocKind::Type => \"associatedtype\",\n                     };\n-                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_sym(), out, item_name);\n+                    let fragment = format!(\"{}.{}\", out, item_name);\n                     (Res::Primitive(prim_ty), fragment, Some((kind.as_def_kind(), item.def_id)))\n                 })\n         })\n@@ -475,14 +468,6 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     return handle_variant(self.cx, res, extra_fragment);\n                 }\n                 // Not a trait item; just return what we found.\n-                Res::Primitive(ty) => {\n-                    if extra_fragment.is_some() {\n-                        return Err(ErrorKind::AnchorFailure(\n-                            AnchorFailure::RustdocAnchorConflict(res),\n-                        ));\n-                    }\n-                    return Ok((res, Some(ty.as_sym().to_string())));\n-                }\n                 _ => return Ok((res, extra_fragment.clone())),\n             }\n         }\n@@ -517,6 +502,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 let (res, fragment, side_channel) =\n                     self.resolve_associated_item(ty_res, item_name, ns, module_id)?;\n                 let result = if extra_fragment.is_some() {\n+                    // NOTE: can never be a primitive since `side_channel.is_none()` only when `res`\n+                    // is a trait (and the side channel DefId is always an associated item).\n                     let diag_res = side_channel.map_or(res, |(k, r)| Res::Def(k, r));\n                     Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(diag_res)))\n                 } else {\n@@ -1152,7 +1139,7 @@ impl LinkCollector<'_, '_> {\n             module_id = DefId { krate, index: CRATE_DEF_INDEX };\n         }\n \n-        let (mut res, mut fragment) = self.resolve_with_disambiguator_cached(\n+        let (mut res, fragment) = self.resolve_with_disambiguator_cached(\n             ResolutionInfo {\n                 module_id,\n                 dis: disambiguator,\n@@ -1174,16 +1161,7 @@ impl LinkCollector<'_, '_> {\n             if let Some(prim) = resolve_primitive(path_str, TypeNS) {\n                 // `prim@char`\n                 if matches!(disambiguator, Some(Disambiguator::Primitive)) {\n-                    if fragment.is_some() {\n-                        anchor_failure(\n-                            self.cx,\n-                            diag_info,\n-                            AnchorFailure::RustdocAnchorConflict(prim),\n-                        );\n-                        return None;\n-                    }\n                     res = prim;\n-                    fragment = Some(prim.name(self.cx.tcx).to_string());\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![res, prim];\n@@ -1303,12 +1281,17 @@ impl LinkCollector<'_, '_> {\n                     }\n                 }\n \n-                Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n+                Some(ItemLink {\n+                    link: ori_link.link,\n+                    link_text,\n+                    did: res.def_id(self.cx.tcx),\n+                    fragment,\n+                })\n             }\n             Res::Def(kind, id) => {\n                 verify(kind, id)?;\n                 let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n-                Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n+                Some(ItemLink { link: ori_link.link, link_text, did: id, fragment })\n             }\n         }\n     }\n@@ -2069,8 +2052,11 @@ fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: A\n             diag.span_label(sp, \"invalid anchor\");\n         }\n         if let AnchorFailure::RustdocAnchorConflict(Res::Primitive(_)) = failure {\n-            diag.note(\"this restriction may be lifted in a future release\");\n-            diag.note(\"see https://github.com/rust-lang/rust/issues/83083 for more information\");\n+            if let Some(sp) = sp {\n+                span_bug!(sp, \"anchors should be allowed now\");\n+            } else {\n+                bug!(\"anchors should be allowed now\");\n+            }\n         }\n     });\n }\n@@ -2198,10 +2184,11 @@ fn handle_variant(\n     use rustc_middle::ty::DefIdTree;\n \n     if extra_fragment.is_some() {\n+        // NOTE: `res` can never be a primitive since this function is only called when `tcx.def_kind(res) == DefKind::Variant`.\n         return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res)));\n     }\n     cx.tcx\n-        .parent(res.def_id())\n+        .parent(res.def_id(cx.tcx))\n         .map(|parent| {\n             let parent_def = Res::Def(DefKind::Enum, parent);\n             let variant = cx.tcx.expect_variant_res(res.as_hir_res().unwrap());"}, {"sha": "34e11c7c7b7cf6ca06f7dc47bafb2f7ffcbb5c28", "filename": "src/test/rustdoc-ui/intra-doc/anchors.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -37,13 +37,3 @@ pub fn bar() {}\n /// Damn enum's variants: [Enum::A#whatever].\n //~^ ERROR `Enum::A#whatever` contains an anchor\n pub fn enum_link() {}\n-\n-/// Primitives?\n-///\n-/// [u32#hello]\n-//~^ ERROR `u32#hello` contains an anchor\n-pub fn x() {}\n-\n-/// [prim@usize#x]\n-//~^ ERROR `prim@usize#x` contains an anchor\n-pub mod usize {}"}, {"sha": "0d226b277535ce047702b5690a8e3645d099fb59", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -1,26 +1,16 @@\n-error: `prim@usize#x` contains an anchor, but links to builtin types are already anchored\n-  --> $DIR/anchors.rs:47:6\n-   |\n-LL | /// [prim@usize#x]\n-   |      ^^^^^^^^^^--\n-   |                |\n-   |                invalid anchor\n-   |\n-note: the lint level is defined here\n-  --> $DIR/anchors.rs:1:9\n-   |\n-LL | #![deny(rustdoc::broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this restriction may be lifted in a future release\n-   = note: see https://github.com/rust-lang/rust/issues/83083 for more information\n-\n error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n   --> $DIR/anchors.rs:25:15\n    |\n LL | /// Or maybe [Foo::f#hola].\n    |               ^^^^^^-----\n    |                     |\n    |                     invalid anchor\n+   |\n+note: the lint level is defined here\n+  --> $DIR/anchors.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `hello#people#!` contains multiple anchors\n   --> $DIR/anchors.rs:31:28\n@@ -38,16 +28,5 @@ LL | /// Damn enum's variants: [Enum::A#whatever].\n    |                                   |\n    |                                   invalid anchor\n \n-error: `u32#hello` contains an anchor, but links to builtin types are already anchored\n-  --> $DIR/anchors.rs:43:6\n-   |\n-LL | /// [u32#hello]\n-   |      ^^^------\n-   |         |\n-   |         invalid anchor\n-   |\n-   = note: this restriction may be lifted in a future release\n-   = note: see https://github.com/rust-lang/rust/issues/83083 for more information\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "0e1977182ceace3c2a0d6bc277fbed23a081d7f3", "filename": "src/test/rustdoc/auxiliary/issue-15318.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-15318.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -1,6 +1,14 @@\n // compile-flags: -Cmetadata=aux\n \n #![doc(html_root_url = \"http://example.com/\")]\n+#![feature(lang_items)]\n+#![no_std]\n+\n+#[lang = \"eh_personality\"]\n+fn foo() {}\n+\n+#[panic_handler]\n+fn bar(_: &core::panic::PanicInfo) -> ! { loop {} }\n \n /// dox\n #[doc(primitive = \"pointer\")]"}, {"sha": "3d4c464960bbce203dfe03debacbb40a5317802e", "filename": "src/test/rustdoc/intra-doc/anchors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -10,3 +10,15 @@ pub struct Something;\n ///\n /// To link to [Something#Anchor!]\n pub struct SomeOtherType;\n+\n+/// Primitives?\n+///\n+/// [u32#hello]\n+// @has anchors/fn.x.html\n+// @has - '//a/@href' '{{channel}}/std/primitive.u32.html#hello'\n+pub fn x() {}\n+\n+/// [prim@usize#x]\n+// @has anchors/usize/index.html\n+// @has - '//a/@href' '{{channel}}/std/primitive.usize.html#x'\n+pub mod usize {}"}, {"sha": "92cfd46188b015eba5d86c5d2420b0f976abc562", "filename": "src/test/rustdoc/intra-doc/auxiliary/my-core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -2,6 +2,10 @@\n #![no_core]\n #![crate_type=\"rlib\"]\n \n+#[doc(primitive = \"char\")]\n+/// Some char docs\n+mod char {}\n+\n #[lang = \"char\"]\n impl char {\n     pub fn len_utf8(self) -> usize {"}, {"sha": "5a92a28556eded64fb62281464527a128d3027af", "filename": "src/test/rustdoc/intra-doc/prim-methods-external-core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -9,8 +9,8 @@\n #![crate_type = \"rlib\"]\n \n // @has prim_methods_external_core/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n-// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+// @has - '//*[@id=\"main\"]//a[@href=\"../my_core/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"../my_core/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n \n //! A [`char`] and its [`char::len_utf8`].\n "}, {"sha": "cfb3c3842ab161694f954813ddfa9823269ce9bf", "filename": "src/test/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -5,10 +5,13 @@\n \n \n // @has prim_methods_local/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n-// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+// @has - '//*[@id=\"main\"]//a[@href=\"primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n \n-//! A [`char`] and its [`char::len_utf8`].\n+//! A [prim@`char`] and its [`char::len_utf8`].\n+\n+#[doc(primitive = \"char\")]\n+mod char {}\n \n #[lang = \"char\"]\n impl char {"}, {"sha": "8c47f7ef77e5181e2d88e9d1d58aba86f9682ccf", "filename": "src/test/rustdoc/intra-link-prim-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -7,8 +7,8 @@\n /// [Self::f]\n /// [Self::MAX]\n // @has intra_link_prim_self/primitive.usize.html\n-// @has - '//a[@href=\"{{channel}}/std/primitive.usize.html#method.f\"]' 'Self::f'\n-// @has - '//a[@href=\"{{channel}}/std/primitive.usize.html#associatedconstant.MAX\"]' 'Self::MAX'\n+// @has - '//a[@href=\"primitive.usize.html#method.f\"]' 'Self::f'\n+// @has - '//a[@href=\"primitive.usize.html#associatedconstant.MAX\"]' 'Self::MAX'\n impl usize {\n     /// Some docs\n     pub fn f() {}"}, {"sha": "f7f5052a36dd34329d3c218c0ad7a2c4fe183e7d", "filename": "src/test/rustdoc/issue-15318-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15318-2.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -1,5 +1,6 @@\n // aux-build:issue-15318.rs\n // ignore-cross-compile\n+#![no_std]\n \n extern crate issue_15318;\n "}, {"sha": "22fd392dd36c349fc062f7363423c6dc40ce4ec7", "filename": "src/test/rustdoc/no_std-primitive.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fno_std-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fno_std-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno_std-primitive.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -0,0 +1,6 @@\n+#![no_std]\n+\n+/// Link to [intra-doc link][u8]\n+// @has 'no_std_primitive/fn.foo.html' '//a[@href=\"{{channel}}/core/primitive.u8.html\"]' 'intra-doc link'\n+// @has - '//a[@href=\"{{channel}}/core/primitive.u8.html\"]' 'u8'\n+pub fn foo() -> u8 {}"}, {"sha": "52806bd94f9a037b87bb65ce98881da2f43ebe95", "filename": "src/test/rustdoc/primitive/no_std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7e527692bd01c68f01fd373db0c49dbc8670ce/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs?ref=cb7e527692bd01c68f01fd373db0c49dbc8670ce", "patch": "@@ -1,5 +1,6 @@\n #![no_std]\n \n // @has no_std/fn.foo.html '//a/[@href=\"{{channel}}/core/primitive.u8.html\"]' 'u8'\n-// Link to [u8]\n+// @has no_std/fn.foo.html '//a/[@href=\"{{channel}}/core/primitive.u8.html\"]' 'primitive link'\n+/// Link to [primitive link][u8]\n pub fn foo() -> u8 {}"}]}