{"sha": "e1649c442f47a8b9d071b5bcca20684b70b393d4", "node_id": "C_kwDOAAsO6NoAKGUxNjQ5YzQ0MmY0N2E4YjlkMDcxYjViY2NhMjA2ODRiNzBiMzkzZDQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-05T22:24:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-05T22:59:30Z"}, "message": "Tweak \"the following other types implement trait\"\n\nWhen *any* of the suggested impls is an exact match, *only* show the\nexact matches. This is particularly relevant for integer types.\n\nfix fmt", "tree": {"sha": "2494a1b4f76196e55ef4bc13d436cf4967134146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2494a1b4f76196e55ef4bc13d436cf4967134146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1649c442f47a8b9d071b5bcca20684b70b393d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1649c442f47a8b9d071b5bcca20684b70b393d4", "html_url": "https://github.com/rust-lang/rust/commit/e1649c442f47a8b9d071b5bcca20684b70b393d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1649c442f47a8b9d071b5bcca20684b70b393d4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203c8765ea33c65d888febe0e8219c4bb11b0d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/203c8765ea33c65d888febe0e8219c4bb11b0d89", "html_url": "https://github.com/rust-lang/rust/commit/203c8765ea33c65d888febe0e8219c4bb11b0d89"}], "stats": {"total": 533, "additions": 138, "deletions": 395}, "files": [{"sha": "12cc72d30c87e09860f7a5a1454b4be6574b9b22", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -1810,7 +1810,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>> {\n-        self.tcx\n+        let mut candidates: Vec<_> = self\n+            .tcx\n             .all_impls(trait_pred.def_id())\n             .filter_map(|def_id| {\n                 if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative\n@@ -1826,7 +1827,14 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n             })\n-            .collect()\n+            .collect();\n+        if candidates.iter().any(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. })) {\n+            // If any of the candidates is a perfect match, we don't want to show all of them.\n+            // This is particularly relevant for the case of numeric types (as they all have the\n+            // same cathegory).\n+            candidates.retain(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. }));\n+        }\n+        candidates\n     }\n \n     fn report_similar_impl_candidates("}, {"sha": "c986bc3fd1e3e15003216d93ffe183e8eb38f271", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -6,15 +6,10 @@ LL |     x * y\n    |\n    = help: the trait `Mul<f32>` is not implemented for `i32`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&i32 as Mul<&i32>>\n+             <i32 as Mul<&i32>>\n+             <i32 as Mul>\n \n error: aborting due to previous error\n "}, {"sha": "a46bd53520b539ff8dfb6558d770d58045533b81", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -18,9 +18,7 @@ LL |\n LL |     1_u32\n    |     ----- return type was inferred to be `u32` here\n    |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2>>\n-             <u64 as Traitor<1, 2>>\n+   = help: the trait `Traitor<N, 2>` is implemented for `u32`\n \n error[E0277]: the trait bound `u64: Traitor` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:21:13\n@@ -31,9 +29,7 @@ LL |\n LL |     1_u64\n    |     ----- return type was inferred to be `u64` here\n    |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2>>\n-             <u64 as Traitor<1, 2>>\n+   = help: the trait `Traitor<1, 2>` is implemented for `u64`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f199170018f20b322a6971a8b21205052e6c5425", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -12,15 +12,10 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |\n    = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n              <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f8e402317aa8d5bcb095bdbac13f453336137d5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -12,15 +12,10 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |\n    = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n              <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i8 as Add<&i8>>\n+             <i8 as Add<&i8>>\n+             <i8 as Add>\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`\n   --> $DIR/const-eval-overflow-4b.rs:22:13"}, {"sha": "7229b9ac986ac73df2909af829ff3fb6d0d5730e", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -12,10 +12,6 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n-             <u8 as Foo<bool>>\n-             <u8 as Foo<u16>>\n-             <u8 as Foo<u32>>\n-             <u8 as Foo<u64>>\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -26,11 +22,6 @@ LL |     Foo::<i32>::bar(&1u8);\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<B>`:\n-             <i8 as Foo<bool>>\n-             <i8 as Foo<u16>>\n-             <i8 as Foo<u32>>\n-             <i8 as Foo<u64>>\n-             <i8 as Foo<u8>>\n              <u8 as Foo<bool>>\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>"}, {"sha": "69f4cbbbf429496a67df930d0bdd32a1a27e07f5", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -30,15 +30,10 @@ LL |         n + sum_to(n - 1)\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "1f51b6e29050cef2fa19e3c9659ae5442cd49bcd", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -6,15 +6,10 @@ LL |     1.0f64 - 1\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     1.0f64 - 1.0"}, {"sha": "9af89159a8cfcec0f98cf91bcbbff4f358b7e34d", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -4,16 +4,7 @@ error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n-   = help: the following other types implement trait `Copy`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -26,16 +17,7 @@ error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n-   = help: the following other types implement trait `Copy`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "ce41942467cea1a9fb34bcfe201485e2cbd3bd34", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -42,12 +42,11 @@ LL |     if x == y {}\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<&'a str>>\n-             <String as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<str>>\n-             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-           and 4 others\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n \n error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n@@ -68,12 +67,11 @@ LL |     if x == z {}\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<&'a str>>\n-             <String as PartialEq<Cow<'a, str>>>\n-             <String as PartialEq<str>>\n-             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-           and 4 others\n+             <str as PartialEq<OsStr>>\n+             <str as PartialEq<OsString>>\n+             <str as PartialEq<String>>\n+             <str as PartialEq>\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3585587ed4c02d6df35458b1aca982bf62b51970", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -24,15 +24,10 @@ LL |     2 as usize - Some(1);\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&'a usize as Sub<usize>>\n+             <&usize as Sub<&usize>>\n+             <usize as Sub<&usize>>\n+             <usize as Sub>\n \n error[E0277]: cannot multiply `{integer}` by `()`\n   --> $DIR/binops.rs:4:7"}, {"sha": "2d22da0b420e0b171ebf5af60d1dd56660cf2d47", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -6,15 +6,10 @@ LL |     2_usize + (loop {});\n    |\n    = help: the trait `Add<()>` is not implemented for `usize`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n \n error: aborting due to previous error\n "}, {"sha": "8f0eef237cfe216601efbfadc2be0f0c770e32b7", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 41, "deletions": 100, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -6,15 +6,10 @@ LL |     x + 100.0\n    |\n    = help: the trait `Add<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u8 as Add<u8>>\n+             <&u8 as Add<&u8>>\n+             <u8 as Add<&u8>>\n+             <u8 as Add>\n \n error[E0277]: cannot add `&str` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:6:7\n@@ -24,15 +19,10 @@ LL |     x + \"foo\"\n    |\n    = help: the trait `Add<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n \n error[E0277]: cannot add `{integer}` to `f64`\n   --> $DIR/not-suggest-float-literal.rs:11:7\n@@ -42,15 +32,10 @@ LL |     x + y\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n \n error[E0277]: cannot subtract `{float}` from `u8`\n   --> $DIR/not-suggest-float-literal.rs:15:7\n@@ -60,15 +45,10 @@ LL |     x - 100.0\n    |\n    = help: the trait `Sub<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&'a u8 as Sub<u8>>\n+             <&u8 as Sub<&u8>>\n+             <u8 as Sub<&u8>>\n+             <u8 as Sub>\n \n error[E0277]: cannot subtract `&str` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:19:7\n@@ -78,15 +58,10 @@ LL |     x - \"foo\"\n    |\n    = help: the trait `Sub<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n \n error[E0277]: cannot subtract `{integer}` from `f64`\n   --> $DIR/not-suggest-float-literal.rs:24:7\n@@ -96,15 +71,10 @@ LL |     x - y\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n \n error[E0277]: cannot multiply `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:28:7\n@@ -114,15 +84,10 @@ LL |     x * 100.0\n    |\n    = help: the trait `Mul<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&'a u8 as Mul<u8>>\n+             <&u8 as Mul<&u8>>\n+             <u8 as Mul<&u8>>\n+             <u8 as Mul>\n \n error[E0277]: cannot multiply `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:32:7\n@@ -132,15 +97,10 @@ LL |     x * \"foo\"\n    |\n    = help: the trait `Mul<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n \n error[E0277]: cannot multiply `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:37:7\n@@ -150,15 +110,10 @@ LL |     x * y\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n \n error[E0277]: cannot divide `u8` by `{float}`\n   --> $DIR/not-suggest-float-literal.rs:41:7\n@@ -168,15 +123,11 @@ LL |     x / 100.0\n    |\n    = help: the trait `Div<{float}>` is not implemented for `u8`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n-             <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&'a u8 as Div<u8>>\n+             <&u8 as Div<&u8>>\n+             <u8 as Div<&u8>>\n+             <u8 as Div<NonZeroU8>>\n+             <u8 as Div>\n \n error[E0277]: cannot divide `f64` by `&str`\n   --> $DIR/not-suggest-float-literal.rs:45:7\n@@ -186,15 +137,10 @@ LL |     x / \"foo\"\n    |\n    = help: the trait `Div<&str>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n \n error[E0277]: cannot divide `f64` by `{integer}`\n   --> $DIR/not-suggest-float-literal.rs:50:7\n@@ -204,15 +150,10 @@ LL |     x / y\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n \n error: aborting due to 12 previous errors\n "}, {"sha": "03779d356371aacb52800360d926570ee4b8ea51", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 24, "deletions": 64, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -7,14 +7,9 @@ LL |     x + 100\n    = help: the trait `Add<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f32 as Add<&f32>>\n+             <f32 as Add<&f32>>\n+             <f32 as Add>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -28,15 +23,10 @@ LL |     x + 100\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&f64 as Add<&f64>>\n+             <f64 as Add<&f64>>\n+             <f64 as Add>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x + 100.0\n@@ -51,14 +41,9 @@ LL |     x - 100\n    = help: the trait `Sub<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n-             <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f32 as Sub<&f32>>\n+             <f32 as Sub<&f32>>\n+             <f32 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -72,15 +57,10 @@ LL |     x - 100\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Sub<Rhs>`:\n-             <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n-             <&'a i128 as Sub<i128>>\n-             <&'a i16 as Sub<i16>>\n-             <&'a i32 as Sub<i32>>\n-             <&'a i64 as Sub<i64>>\n-             <&'a i8 as Sub<i8>>\n-             <&'a isize as Sub<isize>>\n-           and 48 others\n+             <&f64 as Sub<&f64>>\n+             <f64 as Sub<&f64>>\n+             <f64 as Sub>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x - 100.0\n@@ -95,14 +75,9 @@ LL |     x * 100\n    = help: the trait `Mul<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n-             <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f32 as Mul<&f32>>\n+             <f32 as Mul<&f32>>\n+             <f32 as Mul>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -116,15 +91,10 @@ LL |     x * 100\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Mul<Rhs>`:\n-             <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n-             <&'a i128 as Mul<i128>>\n-             <&'a i16 as Mul<i16>>\n-             <&'a i32 as Mul<i32>>\n-             <&'a i64 as Mul<i64>>\n-             <&'a i8 as Mul<i8>>\n-             <&'a isize as Mul<isize>>\n-           and 49 others\n+             <&f64 as Mul<&f64>>\n+             <f64 as Mul<&f64>>\n+             <f64 as Mul>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x * 100.0\n@@ -139,14 +109,9 @@ LL |     x / 100\n    = help: the trait `Div<{integer}>` is not implemented for `f32`\n    = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n-             <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f32 as Div<&f32>>\n+             <f32 as Div<&f32>>\n+             <f32 as Div>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0\n@@ -160,15 +125,10 @@ LL |     x / 100\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n    = help: the following other types implement trait `Div<Rhs>`:\n-             <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n-             <&'a i128 as Div<i128>>\n-             <&'a i16 as Div<i16>>\n-             <&'a i32 as Div<i32>>\n-             <&'a i64 as Div<i64>>\n-             <&'a i8 as Div<i8>>\n-             <&'a isize as Div<isize>>\n-           and 54 others\n+             <&f64 as Div<&f64>>\n+             <f64 as Div<&f64>>\n+             <f64 as Div>\n help: consider using a floating-point literal by writing it with `.0`\n    |\n LL |     x / 100.0"}, {"sha": "b44df962a9ba76400fcbb5445d00d00e59197341", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -6,15 +6,10 @@ LL |     foo(1 as u32 +\n    |\n    = help: the trait `Add<()>` is not implemented for `u32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a u32 as Add<u32>>\n+             <&u32 as Add<&u32>>\n+             <u32 as Add<&u32>>\n+             <u32 as Add>\n \n error: aborting due to previous error\n "}, {"sha": "08f7bbbf0eafe7fb4309cc0f4ba7c4e24dab3321", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -7,10 +7,7 @@ LL | struct Foo<'a, T> {\n LL |     bar: &'a mut T\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&mut T`\n    |\n-   = help: the following other types implement trait `Clone`:\n-             &T\n-             *const T\n-             *mut T\n+   = help: the trait `Clone` is implemented for `&T`\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a49630adb9538b83d0ad7755fe577768b6cb674f", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -8,15 +8,8 @@ LL |     Ok(Err(123_i32)?)\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n-             <f32 as From<i16>>\n-             <f32 as From<i8>>\n-             <f32 as From<u16>>\n-             <f32 as From<u8>>\n-             <f64 as From<f32>>\n-             <f64 as From<i16>>\n-             <f64 as From<i32>>\n-             <f64 as From<i8>>\n-           and 68 others\n+             <u8 as From<NonZeroU8>>\n+             <u8 as From<bool>>\n    = note: required for `Result<u64, u8>` to implement `FromResidual<Result<Infallible, i32>>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`"}, {"sha": "c2cf70687fd20bfca203f12e14e50fef82f11d56", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -7,16 +7,7 @@ LL |     42_i32\n    |     ------ return type was inferred to be `i32` here\n    |\n    = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to previous error\n "}, {"sha": "98c762e3d38207e29ed442005cff266dfe9a09c9", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -7,16 +7,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n   --> $DIR/self-referential-4.rs:11:31\n@@ -27,16 +18,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n   --> $DIR/self-referential-4.rs:17:31\n@@ -47,16 +29,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "aff489d70e389f60e85f6e03583c92e3cd9d80f4", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -8,16 +8,7 @@ LL |     i\n    |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `(i32, &i32)`\n   --> $DIR/self-referential.rs:12:31\n@@ -29,16 +20,7 @@ LL |     (42, i)\n    |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n   --> $DIR/self-referential.rs:19:31\n@@ -50,16 +32,7 @@ LL |     (42, i)\n    |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n+   = help: the trait `PartialEq` is implemented for `i32`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9ba63ffe9c93f4de1b45f28f6dde3d0937926d27", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -66,15 +66,10 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "6976be71135c2dfe92f08724249dfc56c9493f11", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -21,15 +21,10 @@ LL |     a = c + b * 5;\n    |\n    = help: the trait `Add<u16>` is not implemented for `usize`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&'a usize as Add<usize>>\n+             <&usize as Add<&usize>>\n+             <usize as Add<&usize>>\n+             <usize as Add>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ed56e1cf957f5c719c0b3ea01f37448ae2b2a354", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1649c442f47a8b9d071b5bcca20684b70b393d4/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=e1649c442f47a8b9d071b5bcca20684b70b393d4", "patch": "@@ -8,15 +8,10 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:7:28\n@@ -62,15 +57,10 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n+             <&i32 as Add<&i32>>\n+             <i32 as Add<&i32>>\n+             <i32 as Add>\n \n error: aborting due to 4 previous errors\n "}]}