{"sha": "61995926d2bc39e048e3f259cb9363126edbe757", "node_id": "C_kwDOAAsO6NoAKDYxOTk1OTI2ZDJiYzM5ZTA0OGUzZjI1OWNiOTM2MzEyNmVkYmU3NTc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-12-06T17:38:29Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-12-06T18:16:02Z"}, "message": "Add better comments for FnParseMode", "tree": {"sha": "5be8b65f367706ca07d0169938c62327d790e158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be8b65f367706ca07d0169938c62327d790e158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61995926d2bc39e048e3f259cb9363126edbe757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61995926d2bc39e048e3f259cb9363126edbe757", "html_url": "https://github.com/rust-lang/rust/commit/61995926d2bc39e048e3f259cb9363126edbe757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61995926d2bc39e048e3f259cb9363126edbe757/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74437e477ece022604f755881fd01193147368c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/74437e477ece022604f755881fd01193147368c9", "html_url": "https://github.com/rust-lang/rust/commit/74437e477ece022604f755881fd01193147368c9"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "0506a6eba3e06d75ff974b9eb55898a53d2a7b00", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/61995926d2bc39e048e3f259cb9363126edbe757/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61995926d2bc39e048e3f259cb9363126edbe757/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=61995926d2bc39e048e3f259cb9363126edbe757", "patch": "@@ -1706,14 +1706,61 @@ impl<'a> Parser<'a> {\n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n ///\n /// The function decides if, per-parameter `p`, `p` must have a pattern or just a type.\n+///\n+/// This function pointer accepts an edition, because in edition 2015, trait declarations\n+/// were allowed to omit parameter names. In 2018, they became required.\n type ReqName = fn(Edition) -> bool;\n \n /// Parsing configuration for functions.\n-/// This include the edition-specific name requirements, plus information on whether the\n-/// function is allowed to go without a body.\n+///\n+/// The syntax of function items is slightly different within trait definitions,\n+/// impl blocks, and modules. It is still parsed using the same code, just with\n+/// different flags set, so that even when the input is wrong and produces a parse\n+/// error, it still gets into the AST and the rest of the parser and\n+/// type checker can run.\n #[derive(Clone, Copy)]\n pub(crate) struct FnParseMode {\n+    /// A function pointer that decides if, per-parameter `p`, `p` must have a\n+    /// pattern or just a type. This field affects parsing of the parameters list.\n+    ///\n+    /// ```text\n+    /// fn foo(alef: A) -> X { X::new() }\n+    ///        -----^^ affects parsing this part of the function signature\n+    ///        |\n+    ///        if req_name returns false, then this name is optional\n+    ///\n+    /// fn bar(A) -> X;\n+    ///        ^\n+    ///        |\n+    ///        if req_name returns true, this is an error\n+    /// ```\n+    ///\n+    /// Calling this function pointer should only return false if:\n+    ///\n+    ///   * The item is being parsed inside of a trait definition.\n+    ///     Within an impl block or a module, it should always evaluate\n+    ///     to true.\n+    ///   * The span is from Edition 2015. In particular, you can get a\n+    ///     2015 span inside a 2021 crate using macros.\n     pub req_name: ReqName,\n+    /// If this flag is set to `true`, then plain, semicolon-terminated function\n+    /// prototypes are not allowed here.\n+    ///\n+    /// ```text\n+    /// fn foo(alef: A) -> X { X::new() }\n+    ///                      ^^^^^^^^^^^^\n+    ///                      |\n+    ///                      this is always allowed\n+    ///\n+    /// fn bar(alef: A, bet: B) -> X;\n+    ///                             ^\n+    ///                             |\n+    ///                             if req_body is set to true, this is an error\n+    /// ```\n+    ///\n+    /// This field should only be set to false if the item is inside of a trait\n+    /// definition or extern block. Within an impl block or a module, it should\n+    /// always be set to true.\n     pub req_body: bool,\n }\n "}]}