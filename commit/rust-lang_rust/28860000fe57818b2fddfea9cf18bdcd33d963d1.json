{"sha": "28860000fe57818b2fddfea9cf18bdcd33d963d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODYwMDAwZmU1NzgxOGIyZmRkZmVhOWNmMThiZGNkMzNkOTYzZDE=", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-09-27T20:19:10Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-09-27T20:36:56Z"}, "message": "Support `..=` syntax", "tree": {"sha": "9097df3d01fad6c4930714cb891587dc438d7eef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9097df3d01fad6c4930714cb891587dc438d7eef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28860000fe57818b2fddfea9cf18bdcd33d963d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28860000fe57818b2fddfea9cf18bdcd33d963d1", "html_url": "https://github.com/rust-lang/rust/commit/28860000fe57818b2fddfea9cf18bdcd33d963d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28860000fe57818b2fddfea9cf18bdcd33d963d1/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f819332727e2acbfcec0c170c8e57efef37fa8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f819332727e2acbfcec0c170c8e57efef37fa8d", "html_url": "https://github.com/rust-lang/rust/commit/2f819332727e2acbfcec0c170c8e57efef37fa8d"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "9b59e0cbd787b20f63f4d1d585a020479e87003d", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28860000fe57818b2fddfea9cf18bdcd33d963d1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28860000fe57818b2fddfea9cf18bdcd33d963d1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=28860000fe57818b2fddfea9cf18bdcd33d963d1", "patch": "@@ -232,7 +232,7 @@ pub fn format_expr(\n         ast::ExprKind::Range(ref lhs, ref rhs, limits) => {\n             let delim = match limits {\n                 ast::RangeLimits::HalfOpen => \"..\",\n-                ast::RangeLimits::Closed => \"...\",\n+                ast::RangeLimits::Closed => \"..=\",\n             };\n \n             fn needs_space_before_range(context: &RewriteContext, lhs: &ast::Expr) -> bool {"}, {"sha": "b05889c29e9a5a60a6907279c958c40286270f2e", "filename": "src/patterns.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28860000fe57818b2fddfea9cf18bdcd33d963d1/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28860000fe57818b2fddfea9cf18bdcd33d963d1/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=28860000fe57818b2fddfea9cf18bdcd33d963d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd};\n+use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n \n@@ -58,31 +58,23 @@ impl Rewrite for Pat {\n             } else {\n                 None\n             },\n-            PatKind::Range(ref lhs, ref rhs, ref end_kind) => match *end_kind {\n-                RangeEnd::Excluded => rewrite_pair(\n-                    &**lhs,\n-                    &**rhs,\n-                    \"\",\n-                    \"..\",\n-                    \"\",\n-                    context,\n-                    shape,\n-                    SeparatorPlace::Front,\n-                ),\n-                // FIXME: Change _ to RangeEnd::Included(RangeSyntax::DotDotDot)\n-                // and add RangeEnd::Included(RangeSyntax::DotDotEq)\n-                // once rust PR #44709 gets merged\n-                _ => rewrite_pair(\n+            PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n+                let infix = match *end_kind {\n+                    RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n+                    RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n+                    RangeEnd::Excluded => \"..\",\n+                };\n+                rewrite_pair(\n                     &**lhs,\n                     &**rhs,\n                     \"\",\n-                    \"...\",\n+                    infix,\n                     \"\",\n                     context,\n                     shape,\n                     SeparatorPlace::Front,\n-                ),\n-            },\n+                )\n+            }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, shape)"}]}