{"sha": "5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTE5ZDJmYmQyZGFhMDViMmNkM2IxZWJiNmZhOTI2ZTlkODZjMzY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-07-21T11:11:45Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-07-21T11:41:33Z"}, "message": "provide completion in struct patterns", "tree": {"sha": "8d0e74c6c5a734fc64edf2504aabfd11c09354c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0e74c6c5a734fc64edf2504aabfd11c09354c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "html_url": "https://github.com/rust-lang/rust/commit/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bde8012cb28c44de7ffc779003781d385323808", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bde8012cb28c44de7ffc779003781d385323808", "html_url": "https://github.com/rust-lang/rust/commit/7bde8012cb28c44de7ffc779003781d385323808"}], "stats": {"total": 155, "additions": 134, "deletions": 21}, "files": [{"sha": "fc9bc33d2ed83ac396927cf0e54f79a74d264699", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -266,9 +266,14 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n-    pub fn resolve_variant(&self, struct_lit: &ast::StructLit) -> Option<crate::VariantDef> {\n+    pub fn resolve_struct_literal(&self, struct_lit: &ast::StructLit) -> Option<crate::VariantDef> {\n         let expr_id = self.body_source_map.as_ref()?.node_expr(&struct_lit.clone().into())?;\n-        self.infer.as_ref()?.variant_resolution(expr_id)\n+        self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+    }\n+\n+    pub fn resolve_struct_pattern(&self, struct_pat: &ast::StructPat) -> Option<crate::VariantDef> {\n+        let pat_id = self.body_source_map.as_ref()?.node_pat(&struct_pat.clone().into())?;\n+        self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n     }\n \n     pub fn resolve_macro_call("}, {"sha": "82589e504fc5f93794504b96d4d8190a72ae5be2", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -472,7 +472,7 @@ impl Ty {\n \n     /// Returns the type parameters of this type if it has some (i.e. is an ADT\n     /// or function); so if `self` is `Option<u32>`, this returns the `u32`.\n-    fn substs(&self) -> Option<Substs> {\n+    pub fn substs(&self) -> Option<Substs> {\n         match self {\n             Ty::Apply(ApplicationTy { parameters, .. }) => Some(parameters.clone()),\n             _ => None,"}, {"sha": "594c5bc795ecfe1e76d33543997ae5560566a4e0", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -113,7 +113,8 @@ pub struct InferenceResult {\n     method_resolutions: FxHashMap<ExprId, Function>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, StructField>,\n-    variant_resolutions: FxHashMap<ExprId, VariantDef>,\n+    /// For each struct literal, records the variant it resolves to.\n+    variant_resolutions: FxHashMap<ExprOrPatId, VariantDef>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n     diagnostics: Vec<InferenceDiagnostic>,\n@@ -128,8 +129,11 @@ impl InferenceResult {\n     pub fn field_resolution(&self, expr: ExprId) -> Option<StructField> {\n         self.field_resolutions.get(&expr).copied()\n     }\n-    pub fn variant_resolution(&self, expr: ExprId) -> Option<VariantDef> {\n-        self.variant_resolutions.get(&expr).copied()\n+    pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantDef> {\n+        self.variant_resolutions.get(&id.into()).copied()\n+    }\n+    pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantDef> {\n+        self.variant_resolutions.get(&id.into()).copied()\n     }\n     pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<ImplItem> {\n         self.assoc_resolutions.get(&id.into()).copied()\n@@ -218,8 +222,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.result.field_resolutions.insert(expr, field);\n     }\n \n-    fn write_variant_resolution(&mut self, expr: ExprId, variant: VariantDef) {\n-        self.result.variant_resolutions.insert(expr, variant);\n+    fn write_variant_resolution(&mut self, id: ExprOrPatId, variant: VariantDef) {\n+        self.result.variant_resolutions.insert(id, variant);\n     }\n \n     fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: ImplItem) {\n@@ -678,8 +682,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         subpats: &[FieldPat],\n         expected: &Ty,\n         default_bm: BindingMode,\n+        id: PatId,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n+        if let Some(variant) = def {\n+            self.write_variant_resolution(id.into(), variant);\n+        }\n \n         self.unify(&ty, expected);\n \n@@ -762,7 +770,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm)\n             }\n             Pat::Struct { path: ref p, args: ref fields } => {\n-                self.infer_struct_pat(p.as_ref(), fields, expected, default_bm)\n+                self.infer_struct_pat(p.as_ref(), fields, expected, default_bm, pat)\n             }\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression\n@@ -1064,7 +1072,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::StructLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n                 if let Some(variant) = def_id {\n-                    self.write_variant_resolution(tgt_expr, variant);\n+                    self.write_variant_resolution(tgt_expr.into(), variant);\n                 }\n \n                 let substs = ty.substs().unwrap_or_else(Substs::empty);"}, {"sha": "85160358aee633d78d3fa50ab091d11b051e0a6a", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -4,6 +4,7 @@ mod presentation;\n \n mod complete_dot;\n mod complete_struct_literal;\n+mod complete_struct_pattern;\n mod complete_pattern;\n mod complete_fn_param;\n mod complete_keyword;\n@@ -65,6 +66,7 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_scope::complete_scope(&mut acc, &ctx);\n     complete_dot::complete_dot(&mut acc, &ctx);\n     complete_struct_literal::complete_struct_literal(&mut acc, &ctx);\n+    complete_struct_pattern::complete_struct_pattern(&mut acc, &ctx);\n     complete_pattern::complete_pattern(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)"}, {"sha": "6aa41f498516733ca9e2dd5c660681a261feb4b0", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -1,23 +1,22 @@\n-use hir::{Substs, Ty};\n+use hir::Substs;\n \n use crate::completion::{CompletionContext, Completions};\n \n /// Complete fields in fields literals.\n pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionContext) {\n     let (ty, variant) = match ctx.struct_lit_syntax.as_ref().and_then(|it| {\n-        Some((ctx.analyzer.type_of(ctx.db, &it.clone().into())?, ctx.analyzer.resolve_variant(it)?))\n+        Some((\n+            ctx.analyzer.type_of(ctx.db, &it.clone().into())?,\n+            ctx.analyzer.resolve_struct_literal(it)?,\n+        ))\n     }) {\n         Some(it) => it,\n         _ => return,\n     };\n-\n-    let ty_substs = match ty {\n-        Ty::Apply(it) => it.parameters,\n-        _ => Substs::empty(),\n-    };\n+    let substs = &ty.substs().unwrap_or_else(Substs::empty);\n \n     for field in variant.fields(ctx.db) {\n-        acc.add_field(ctx, field, &ty_substs);\n+        acc.add_field(ctx, field, substs);\n     }\n }\n "}, {"sha": "d0dde593055985924f907c8222e229d056767c07", "filename": "crates/ra_ide_api/src/completion/complete_struct_pattern.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_pattern.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -0,0 +1,94 @@\n+use hir::Substs;\n+\n+use crate::completion::{CompletionContext, Completions};\n+\n+pub(super) fn complete_struct_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n+    let (ty, variant) = match ctx.struct_lit_pat.as_ref().and_then(|it| {\n+        Some((\n+            ctx.analyzer.type_of_pat(ctx.db, &it.clone().into())?,\n+            ctx.analyzer.resolve_struct_pattern(it)?,\n+        ))\n+    }) {\n+        Some(it) => it,\n+        _ => return,\n+    };\n+    let substs = &ty.substs().unwrap_or_else(Substs::empty);\n+\n+    for field in variant.fields(ctx.db) {\n+        acc.add_field(ctx, field, substs);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+    use insta::assert_debug_snapshot_matches;\n+\n+    fn complete(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Reference)\n+    }\n+\n+    #[test]\n+    fn test_struct_pattern_field() {\n+        let completions = complete(\n+            r\"\n+            struct S { foo: u32 }\n+\n+            fn process(f: S) {\n+                match f {\n+                    S { f<|>: 92 } => (),\n+                }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"foo\",\n+       \u22ee        source_range: [117; 118),\n+       \u22ee        delete: [117; 118),\n+       \u22ee        insert: \"foo\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn test_struct_pattern_enum_variant() {\n+        let completions = complete(\n+            r\"\n+            enum E {\n+                S { foo: u32, bar: () }\n+            }\n+\n+            fn process(e: E) {\n+                match e {\n+                    E::S { <|> } => (),\n+                }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"bar\",\n+       \u22ee        source_range: [161; 161),\n+       \u22ee        delete: [161; 161),\n+       \u22ee        insert: \"bar\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"()\",\n+       \u22ee    },\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"foo\",\n+       \u22ee        source_range: [161; 161),\n+       \u22ee        delete: [161; 161),\n+       \u22ee        insert: \"foo\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n+}"}, {"sha": "6fee7b5bede6560d1c1f43ae261452e0a19de8c6", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5fe19d2fbd2daa05b2cd3b1ebb6fa926e9d86c36", "patch": "@@ -21,6 +21,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n     pub(super) struct_lit_syntax: Option<ast::StructLit>,\n+    pub(super) struct_lit_pat: Option<ast::StructPat>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n@@ -60,6 +61,7 @@ impl<'a> CompletionContext<'a> {\n             function_syntax: None,\n             use_item_syntax: None,\n             struct_lit_syntax: None,\n+            struct_lit_pat: None,\n             is_param: false,\n             is_pat_binding: false,\n             is_trivial_path: false,\n@@ -106,8 +108,7 @@ impl<'a> CompletionContext<'a> {\n         // Otherwise, see if this is a declaration. We can use heuristics to\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), offset) {\n-            if is_node::<ast::BindPat>(name.syntax()) {\n-                let bind_pat = name.syntax().ancestors().find_map(ast::BindPat::cast).unwrap();\n+            if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n                 let parent = bind_pat.syntax().parent();\n                 if parent.clone().and_then(ast::MatchArm::cast).is_some()\n                     || parent.and_then(ast::Condition::cast).is_some()\n@@ -119,6 +120,10 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n+            if name.syntax().ancestors().find_map(ast::FieldPatList::cast).is_some() {\n+                self.struct_lit_pat =\n+                    find_node_at_offset(original_parse.tree().syntax(), self.offset);\n+            }\n         }\n     }\n \n@@ -235,7 +240,7 @@ fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Op\n }\n \n fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n-    match node.ancestors().filter_map(N::cast).next() {\n+    match node.ancestors().find_map(N::cast) {\n         None => false,\n         Some(n) => n.syntax().text_range() == node.text_range(),\n     }"}]}