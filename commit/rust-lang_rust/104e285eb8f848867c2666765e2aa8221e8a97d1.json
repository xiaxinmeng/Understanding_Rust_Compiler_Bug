{"sha": "104e285eb8f848867c2666765e2aa8221e8a97d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNGUyODVlYjhmODQ4ODY3YzI2NjY3NjVlMmFhODIyMWU4YTk3ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-02T01:06:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:16:42Z"}, "message": "core: Get coretest working\n\nThis mostly involved frobbing imports between realstd, realcore, and the core\nbeing test. Some of the imports are a little counterintuitive, but it mainly\nfocuses around libcore's types not implementing Show while libstd's types\nimplement Show.", "tree": {"sha": "d261196dbf9c8006ce647799fcc743a3a350910c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d261196dbf9c8006ce647799fcc743a3a350910c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104e285eb8f848867c2666765e2aa8221e8a97d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104e285eb8f848867c2666765e2aa8221e8a97d1", "html_url": "https://github.com/rust-lang/rust/commit/104e285eb8f848867c2666765e2aa8221e8a97d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104e285eb8f848867c2666765e2aa8221e8a97d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62c121eb0de35ac03a7860e6039202f2522e527", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c121eb0de35ac03a7860e6039202f2522e527", "html_url": "https://github.com/rust-lang/rust/commit/f62c121eb0de35ac03a7860e6039202f2522e527"}], "stats": {"total": 315, "additions": 238, "deletions": 77}, "files": [{"sha": "0c07bf91bd2eb1ca834c688e12839774d98c9e50", "filename": "src/libcore/any.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -150,6 +150,7 @@ mod tests {\n     use super::*;\n     use owned::Box;\n     use str::StrSlice;\n+    use realstd::str::StrAllocating;\n \n     #[deriving(Eq, Show)]\n     struct Test;\n@@ -274,13 +275,20 @@ mod tests {\n \n     #[test]\n     fn test_show() {\n+<<<<<<< HEAD\n         let a = box 8u as Box<Any>;\n         let b = box Test as Box<Any>;\n         assert_eq!(format!(\"{}\", a), \"Box<Any>\".to_owned());\n         assert_eq!(format!(\"{}\", b), \"Box<Any>\".to_owned());\n-\n-        let a = &8u as &Any;\n-        let b = &Test as &Any;\n+=======\n+        let a = ~8u as ~::realcore::any::Any;\n+        let b = ~Test as ~::realcore::any::Any;\n+        assert_eq!(format!(\"{}\", a), \"~Any\".to_owned());\n+        assert_eq!(format!(\"{}\", b), \"~Any\".to_owned());\n+>>>>>>> core: Get coretest working\n+\n+        let a = &8u as &::realcore::any::Any;\n+        let b = &Test as &::realcore::any::Any;\n         assert_eq!(format!(\"{}\", a), \"&Any\".to_owned());\n         assert_eq!(format!(\"{}\", b), \"&Any\".to_owned());\n     }"}, {"sha": "0f632f4d4d095c366820356c694d7789227c8da2", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -175,9 +175,8 @@ impl Default for bool {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use realstd::prelude::*;\n     use super::to_bit;\n-    use str::StrSlice;\n \n     #[test]\n     fn test_to_bit() {"}, {"sha": "8cea197fbfa4a2f187b1fd9f061df68354ceddd6", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -108,7 +108,7 @@ pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n mod tests {\n     use cast::{bump_box_refcount, transmute};\n     use raw;\n-    use str::StrSlice;\n+    use realstd::str::StrAllocating;\n \n     #[test]\n     fn test_transmute_copy() {"}, {"sha": "8951c7d806ab2ca1ec064c3de1a009f454145b76", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -221,22 +221,22 @@ mod test {\n     #[test]\n     fn smoketest_cell() {\n         let x = Cell::new(10);\n-        assert_eq!(x, Cell::new(10));\n-        assert_eq!(x.get(), 10);\n+        assert!(x == Cell::new(10));\n+        assert!(x.get() == 10);\n         x.set(20);\n-        assert_eq!(x, Cell::new(20));\n-        assert_eq!(x.get(), 20);\n+        assert!(x == Cell::new(20));\n+        assert!(x.get() == 20);\n \n         let y = Cell::new((30, 40));\n-        assert_eq!(y, Cell::new((30, 40)));\n-        assert_eq!(y.get(), (30, 40));\n+        assert!(y == Cell::new((30, 40)));\n+        assert!(y.get() == (30, 40));\n     }\n \n     #[test]\n     fn cell_has_sensible_show() {\n         use str::StrSlice;\n \n-        let x = Cell::new(\"foo bar\");\n+        let x = ::realcore::cell::Cell::new(\"foo bar\");\n         assert!(format!(\"{}\", x).contains(x.get()));\n \n         x.set(\"baz qux\");"}, {"sha": "1e31486c63f1c0670c0f8df291fe2487d9fb6cd1", "filename": "src/libcore/char.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -29,10 +29,6 @@ use option::{None, Option, Some};\n use iter::{Iterator, range_step};\n use unicode::{derived_property, property, general_category, decompose, conversions};\n \n-#[cfg(test)] use str::Str;\n-#[cfg(test)] use strbuf::StrBuf;\n-#[cfg(test)] use slice::ImmutableVector;\n-\n #[cfg(not(test))] use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n #[cfg(not(test))] use default::Default;\n \n@@ -682,6 +678,14 @@ impl Default for char {\n \n #[cfg(test)]\n mod test {\n+    use super::{escape_unicode, escape_default};\n+\n+    use realcore::char::Char;\n+    use slice::ImmutableVector;\n+    use realstd::option::{Some, None};\n+    use realstd::strbuf::StrBuf;\n+    use realstd::str::StrAllocating;\n+\n     #[test]\n     fn test_is_lowercase() {\n         assert!('a'.is_lowercase());\n@@ -822,7 +826,7 @@ mod test {\n \n     #[test]\n     fn test_to_str() {\n-        use to_str::ToStr;\n+        use realstd::to_str::ToStr;\n         let s = 't'.to_str();\n         assert_eq!(s, \"t\".to_owned());\n     }"}, {"sha": "659d797bc6749f717a7c086ecd652f38a5024b2b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -128,6 +128,8 @@ extern_fn_clone!(A, B, C, D, E, F, G, H)\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n+\n     #[test]\n     fn test_owned_clone() {\n         let a = box 5i;"}, {"sha": "2296e663033cb0d754dc9a3d9b31e7083aa71319", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(dead_code)]\n \n+#[cfg(not(test))]\n use str::raw::c_str_to_static_slice;\n \n // FIXME: Once std::fmt is in libcore, all of these functions should delegate"}, {"sha": "a4d261f539a5005a8761a049a22b628a059ed5b0", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -34,8 +34,6 @@ use std::unstable::finally::Finally;\n \n use ops::Drop;\n \n-#[cfg(test)] use task::failing;\n-\n /// A trait for executing a destructor unconditionally after a block of code,\n /// regardless of whether the blocked fails.\n pub trait Finally<T> {\n@@ -119,6 +117,9 @@ impl<'a,A> Drop for Finallyalizer<'a,A> {\n \n #[cfg(test)]\n mod test {\n+    use super::{try_finally, Finally};\n+    use realstd::task::failing;\n+\n     #[test]\n     fn test_success() {\n         let mut i = 0;"}, {"sha": "d7a277d3b6b9f3cf17961deb45a3b40839df999c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -46,7 +46,7 @@ A quick refresher on memory ordering:\n \n // This is needed to prevent duplicate lang item definitions.\n #[cfg(test)]\n-pub use realstd::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n+pub use realcore::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n \n pub type GlueFn = extern \"Rust\" fn(*i8);\n "}, {"sha": "5ee642cd8100d1a3f080ab7f0744e4e48c50545b", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -1090,7 +1090,7 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n pub struct Chain<T, U> {\n     a: T,\n     b: U,\n-    flag: bool\n+    flag: bool,\n }\n \n impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n@@ -2329,13 +2329,13 @@ pub mod order {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use prelude::*;\n+    use realstd::prelude::*;\n+    use realstd::iter::*;\n+    use realstd::num;\n \n     use cmp;\n     use owned::Box;\n     use uint;\n-    use num;\n \n     #[test]\n     fn test_counter_from_iter() {"}, {"sha": "5aef169cd57322df1eadb9ea1688d2e155d0e0ae", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -18,9 +18,21 @@\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n #![no_std]\n-#![feature(globs, macro_rules, managed_boxes)]\n+#![feature(globs, macro_rules, managed_boxes, phase)]\n #![deny(missing_doc)]\n \n+#[cfg(test)] extern crate realcore = \"core\";\n+#[cfg(test)] extern crate libc;\n+#[cfg(test)] extern crate native;\n+#[phase(syntax, link)] #[cfg(test)] extern crate realstd = \"std\";\n+#[phase(syntax, link)] #[cfg(test)] extern crate log;\n+\n+#[cfg(test)] pub use kinds = realcore::kinds;\n+#[cfg(test)] pub use cmp = realcore::cmp;\n+#[cfg(test)] pub use ops = realcore::ops;\n+#[cfg(test)] pub use ty = realcore::ty;\n+\n+#[cfg(not(test))]\n mod macros;\n \n #[path = \"num/float_macros.rs\"] mod float_macros;\n@@ -44,6 +56,10 @@ mod macros;\n \n pub mod num;\n \n+/* The libcore prelude, not as all-encompassing as the libstd prelude */\n+\n+pub mod prelude;\n+\n /* Core modules for ownership management */\n \n pub mod cast;\n@@ -53,10 +69,10 @@ pub mod ptr;\n \n /* Core language traits */\n \n-pub mod cmp;\n-pub mod kinds;\n-pub mod ops;\n-pub mod ty;\n+#[cfg(not(test))] pub mod kinds;\n+#[cfg(not(test))] pub mod ops;\n+#[cfg(not(test))] pub mod ty;\n+#[cfg(not(test))] pub mod cmp;\n pub mod clone;\n pub mod default;\n pub mod container;\n@@ -88,4 +104,9 @@ mod should_not_exist;\n mod std {\n     pub use clone;\n     pub use cmp;\n+\n+    #[cfg(test)] pub use realstd::fmt;    // needed for fail!()\n+    #[cfg(test)] pub use realstd::rt;     // needed for fail!()\n+    #[cfg(test)] pub use realstd::option; // needed for assert!()\n+    #[cfg(test)] pub use realstd::os;     // needed for tests\n }"}, {"sha": "0bac90064d6f43bf3fe8760952e8f7dbbffeb05a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -293,7 +293,7 @@ pub fn drop<T>(_x: T) { }\n mod tests {\n     use mem::*;\n     use option::{Some,None};\n-    use str::StrSlice;\n+    use realstd::str::StrAllocating;\n \n     #[test]\n     fn size_of_basic() {"}, {"sha": "c4cdc5a0a4017e90d3ce7af9d2c18b99b11cdbbe", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,11 +10,12 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-use cmp::{Eq, Ord};\n use default::Default;\n use intrinsics;\n use num::{Zero, One, Bounded, Signed, Num, Primitive};\n-use ops::{Add, Sub, Mul, Div, Rem, Neg};\n+\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use ops::{Add, Sub, Mul, Div, Rem, Neg};\n \n pub static RADIX: uint = 2u;\n \n@@ -100,6 +101,7 @@ pub mod consts {\n     pub static LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n+#[cfg(not(test))]\n impl Ord for f32 {\n     #[inline]\n     fn lt(&self, other: &f32) -> bool { (*self) < (*other) }\n@@ -110,6 +112,7 @@ impl Ord for f32 {\n     #[inline]\n     fn gt(&self, other: &f32) -> bool { (*self) > (*other) }\n }\n+#[cfg(not(test))]\n impl Eq for f32 {\n     #[inline]\n     fn eq(&self, other: &f32) -> bool { (*self) == (*other) }"}, {"sha": "b15b4566cdd689e9f1648fa0d96d7550d22d0137", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,11 +10,12 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n-use cmp::{Eq, Ord};\n use default::Default;\n use intrinsics;\n use num::{Zero, One, Bounded, Signed, Num, Primitive};\n-use ops::{Add, Sub, Mul, Div, Rem, Neg};\n+\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use ops::{Add, Sub, Mul, Div, Rem, Neg};\n \n // FIXME(#5527): These constants should be deprecated once associated\n // constants are implemented in favour of referencing the respective\n@@ -106,6 +107,7 @@ pub mod consts {\n     pub static LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n+#[cfg(not(test))]\n impl Ord for f64 {\n     #[inline]\n     fn lt(&self, other: &f64) -> bool { (*self) < (*other) }\n@@ -116,6 +118,7 @@ impl Ord for f64 {\n     #[inline]\n     fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n+#[cfg(not(test))]\n impl Eq for f64 {\n     #[inline]\n     fn eq(&self, other: &f64) -> bool { (*self) == (*other) }"}, {"sha": "361f75b9e8831d79890c4672d482d76e26f12d51", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Signed, Num, Primitive, Int};\n use num::{CheckedDiv, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitOr, BitAnd, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Option, Some, None};\n \n int_module!(i16, 16)\n "}, {"sha": "9071f150292d29468d06e374bc18d91aa25825ca", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Signed, Num, Primitive, Int};\n use num::{CheckedDiv, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitOr, BitAnd, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Option, Some, None};\n \n int_module!(i32, 32)\n "}, {"sha": "ba7b715f13d6a49e01cef3d06b7af480f0dd6faf", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Signed, Num, Primitive, Int};\n use num::{CheckedDiv, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitOr, BitAnd, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Option, Some, None};\n \n int_module!(i64, 64)\n "}, {"sha": "6ec05eb50ee614e8c8959010144fcf533d1554ea", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Signed, Num, Primitive, Int};\n use num::{CheckedDiv, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitOr, BitAnd, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Option, Some, None};\n \n int_module!(i8, 8)\n "}, {"sha": "8273fa2b39f2757a63582055da35d2c7a3f30667", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Signed, Num, Primitive, Int};\n use num::{CheckedDiv, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitOr, BitAnd, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Option, Some, None};\n \n #[cfg(target_word_size = \"32\")] int_module!(int, 32)\n #[cfg(target_word_size = \"64\")] int_module!(int, 64)"}, {"sha": "7d21764eb70d39908a7b28d3e4b83fa5dabc8c67", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -28,15 +28,19 @@ pub static MIN: $T = (-1 as $T) << (BITS - 1);\n // calling the `Bounded::max_value` function.\n pub static MAX: $T = !MIN;\n \n+#[cfg(not(test))]\n impl Ord for $T {\n     #[inline]\n     fn lt(&self, other: &$T) -> bool { *self < *other }\n }\n+#[cfg(not(test))]\n impl TotalEq for $T {}\n+#[cfg(not(test))]\n impl Eq for $T {\n     #[inline]\n     fn eq(&self, other: &$T) -> bool { *self == *other }\n }\n+#[cfg(not(test))]\n impl TotalOrd for $T {\n     #[inline]\n     fn cmp(&self, other: &$T) -> Ordering {\n@@ -221,7 +225,7 @@ impl Bounded for $T {\n impl CheckedDiv for $T {\n     #[inline]\n     fn checked_div(&self, v: &$T) -> Option<$T> {\n-        if *v == 0 {\n+        if *v == 0 || (*self == MIN && *v == -1) {\n             None\n         } else {\n             Some(self / *v)\n@@ -244,12 +248,9 @@ mod tests {\n     use super::*;\n \n     use int;\n-    use i32;\n     use num;\n     use num::Bitwise;\n     use num::CheckedDiv;\n-    use num::ToStrRadix;\n-    use str::StrSlice;\n \n     #[test]\n     fn test_overflows() {"}, {"sha": "22411fef3b26801884c5a5d94ae81274c08c9dac", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -858,3 +858,19 @@ pub trait CheckedDiv: Div<Self, Self> {\n     /// `None` is returned.\n     fn checked_div(&self, v: &Self) -> Option<Self>;\n }\n+\n+/// Helper function for testing numeric operations\n+#[cfg(test)]\n+pub fn test_num<T:Num + NumCast + ::std::fmt::Show>(ten: T, two: T) {\n+    assert_eq!(ten.add(&two),  cast(12).unwrap());\n+    assert_eq!(ten.sub(&two),  cast(8).unwrap());\n+    assert_eq!(ten.mul(&two),  cast(20).unwrap());\n+    assert_eq!(ten.div(&two),  cast(5).unwrap());\n+    assert_eq!(ten.rem(&two),  cast(0).unwrap());\n+\n+    assert_eq!(ten.add(&two),  ten + two);\n+    assert_eq!(ten.sub(&two),  ten - two);\n+    assert_eq!(ten.mul(&two),  ten * two);\n+    assert_eq!(ten.div(&two),  ten / two);\n+    assert_eq!(ten.rem(&two),  ten % two);\n+}"}, {"sha": "96db898e3b0692836e82d1bdb76988c8621978c8", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Unsigned, Num, Int, Primitive};\n use num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n+use option::{Some, None, Option};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitAnd, BitOr, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Some, None, Option};\n \n uint_module!(u16, i16, 16)\n "}, {"sha": "2748b001bb8ed28b6e54ce4d5b2ad7f8c8621d29", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Unsigned, Num, Int, Primitive};\n use num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n+use option::{Some, None, Option};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitAnd, BitOr, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Some, None, Option};\n \n uint_module!(u32, i32, 32)\n "}, {"sha": "c047df095327f88c434297ff54d85f2f84eb5b58", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Unsigned, Num, Int, Primitive};\n use num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n+use option::{Some, None, Option};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitAnd, BitOr, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Some, None, Option};\n \n uint_module!(u64, i64, 64)\n "}, {"sha": "a6df17956a143416b7532fd405052c304c4ab45e", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Unsigned, Num, Int, Primitive};\n use num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n+use option::{Some, None, Option};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitAnd, BitOr, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Some, None, Option};\n \n uint_module!(u8, i8, 8)\n "}, {"sha": "f988650cc01d496ecdee651dc6aeadf34ab4a906", "filename": "src/libcore/num/uint.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -10,14 +10,18 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n use default::Default;\n use intrinsics;\n use num::{Bitwise, Bounded, Zero, One, Unsigned, Num, Int, Primitive};\n use num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n+use option::{Some, None, Option};\n+\n+#[cfg(not(test))]\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Less, Greater, Equal, Ordering};\n+#[cfg(not(test))]\n use ops::{Add, Sub, Mul, Div, Rem, Neg, BitAnd, BitOr, BitXor};\n+#[cfg(not(test))]\n use ops::{Shl, Shr, Not};\n-use option::{Some, None, Option};\n \n uint_module!(uint, int, ::int::BITS)\n "}, {"sha": "a53388bd0e353418c3b96d19ecf7baf64d53cb61", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -19,15 +19,19 @@ pub static BYTES : uint = ($bits / 8);\n pub static MIN: $T = 0 as $T;\n pub static MAX: $T = 0 as $T - 1 as $T;\n \n+#[cfg(not(test))]\n impl Ord for $T {\n     #[inline]\n     fn lt(&self, other: &$T) -> bool { *self < *other }\n }\n+#[cfg(not(test))]\n impl TotalEq for $T {}\n+#[cfg(not(test))]\n impl Eq for $T {\n     #[inline]\n     fn eq(&self, other: &$T) -> bool { *self == *other }\n }\n+#[cfg(not(test))]\n impl TotalOrd for $T {\n     #[inline]\n     fn cmp(&self, other: &$T) -> Ordering {\n@@ -184,9 +188,6 @@ mod tests {\n     use num;\n     use num::CheckedDiv;\n     use num::Bitwise;\n-    use num::ToStrRadix;\n-    use str::StrSlice;\n-    use u16;\n \n     #[test]\n     fn test_overflows() {"}, {"sha": "143e8bf2622545896f504d6b46885ee0a4959599", "filename": "src/libcore/option.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -236,13 +236,24 @@ impl<T> Option<T> {\n     ///\n     /// Fails if the value is a `None` with a custom failure message provided by `msg`.\n     #[inline]\n+    #[cfg(not(test))]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Some(val) => val,\n             None => fail!(msg),\n         }\n     }\n \n+    // FIXME: once std::fmt is in libcore, this extra variant should not be\n+    //        necessary.\n+    #[cfg(test)]\n+    pub fn expect(self, msg: &str) -> T {\n+        match self {\n+            Some(val) => val,\n+            None => fail!(\"{}\", msg),\n+        }\n+    }\n+\n     /// Moves a value out of an option type and returns it, consuming the `Option`.\n     ///\n     /// # Failure\n@@ -605,10 +616,10 @@ pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) ->\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use prelude::*;\n+    use realstd::option::collect;\n+    use realstd::prelude::*;\n+    use realstd::iter::range;\n \n-    use iter::range;\n     use str::StrSlice;\n     use kinds::marker;\n     use slice::ImmutableVector;\n@@ -637,7 +648,7 @@ mod tests {\n \n     #[test]\n     fn test_get_resource() {\n-        use rc::Rc;\n+        use realstd::rc::Rc;\n         use cell::RefCell;\n \n         struct R {"}, {"sha": "efd6732f6530a80360419c2a434bad6aa0eb29e4", "filename": "src/libcore/prelude.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The core prelude\n+//!\n+//! For more information, see std::prelude.\n+\n+// Reexported core operators\n+pub use kinds::{Copy, Send, Sized, Share};\n+pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n+pub use ops::{BitAnd, BitOr, BitXor};\n+pub use ops::{Drop, Deref, DerefMut};\n+pub use ops::{Shl, Shr, Index};\n+pub use option::{Option, Some, None};\n+pub use result::{Result, Ok, Err};\n+\n+// Reexported functions\n+pub use iter::range;\n+pub use mem::drop;\n+\n+// Reexported types and traits\n+\n+pub use char::Char;\n+pub use clone::Clone;\n+pub use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n+pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n+pub use iter::{FromIterator, Extendable};\n+pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n+pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n+pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n+pub use num::{Signed, Unsigned};\n+pub use num::{Primitive, Int, ToPrimitive, FromPrimitive};\n+pub use ptr::RawPtr;\n+pub use str::{Str, StrSlice};\n+pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n+pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n+pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n+pub use slice::{ImmutableEqVector, ImmutableTotalOrdVector};\n+pub use slice::{MutableVector};\n+pub use slice::{Vector, ImmutableVector};"}, {"sha": "e3a3f78dcb9257518bce768d43e465adebc5f122", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -480,12 +480,12 @@ impl<T> Ord for *mut T {\n #[cfg(test)]\n pub mod ptr_tests {\n     use super::*;\n-    use prelude::*;\n+    use realstd::prelude::*;\n \n-    use c_str::ToCStr;\n+    use realstd::c_str::ToCStr;\n     use cast;\n     use libc;\n-    use str;\n+    use realstd::str;\n     use slice::{ImmutableVector, MutableVector};\n \n     #[test]"}, {"sha": "337b2ac89dd7aacc61ac982df1358d959d8e6932", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -592,11 +592,9 @@ pub fn fold_<T,E,Iter:Iterator<Result<T,E>>>(iterator: Iter) -> Result<(),E> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use prelude::*;\n-    use str::StrSlice;\n-\n-    use iter::range;\n+    use realstd::result::{collect, fold, fold_};\n+    use realstd::prelude::*;\n+    use realstd::iter::range;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n     pub fn op2() -> Result<int, ~str> { Err(\"sadface\".to_owned()) }"}, {"sha": "587723563ebcffd00102dc4396918b43fcf4f51c", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -17,14 +17,16 @@ use intrinsics;\n use iter::{Iterator, FromIterator};\n use mem;\n use num::{CheckedMul, CheckedAdd};\n-use ops::Add;\n use option::{Some, None};\n use ptr::RawPtr;\n use ptr;\n use raw::Vec;\n-use slice::{ImmutableVector, Vector};\n+use slice::ImmutableVector;\n use str::StrSlice;\n \n+#[cfg(not(test))] use ops::Add;\n+#[cfg(not(test))] use slice::Vector;\n+\n #[allow(ctypes)]\n extern {\n     fn malloc(size: uint) -> *u8;\n@@ -118,6 +120,7 @@ impl FromIterator<char> for ~str {\n     }\n }\n \n+#[cfg(not(test))]\n impl<'a> Add<&'a str,~str> for &'a str {\n     #[inline]\n     fn add(&self, rhs: & &'a str) -> ~str {\n@@ -181,6 +184,7 @@ impl<A> FromIterator<A> for ~[A] {\n     }\n }\n \n+#[cfg(not(test))]\n impl<'a,T:Clone, V: Vector<T>> Add<V, ~[T]> for &'a [T] {\n     #[inline]\n     fn add(&self, rhs: &V) -> ~[T] {\n@@ -189,6 +193,7 @@ impl<'a,T:Clone, V: Vector<T>> Add<V, ~[T]> for &'a [T] {\n     }\n }\n \n+#[cfg(not(test))]\n impl<T:Clone, V: Vector<T>> Add<V, ~[T]> for ~[T] {\n     #[inline]\n     fn add(&self, rhs: &V) -> ~[T] {"}, {"sha": "b73d85489a390bc030e64880455fdd9e25ad56ea", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e285eb8f848867c2666765e2aa8221e8a97d1/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=104e285eb8f848867c2666765e2aa8221e8a97d1", "patch": "@@ -246,7 +246,7 @@ mod tests {\n     use super::*;\n     use clone::Clone;\n     use cmp::*;\n-    use str::StrSlice;\n+    use realstd::str::StrAllocating;\n \n     #[test]\n     fn test_clone() {"}]}