{"sha": "1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96", "node_id": "C_kwDOAAsO6NoAKDFkMjRjMmVlYjFlYTVjNzIzNzIyYjJjODU0M2VjYjUwYTUzYjJjOTY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-27T14:11:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-27T14:21:50Z"}, "message": "Fix `x test src/librustdoc` with download-rustc enabled\n\nThe problem was two-fold:\n- Bootstrap was hard-coding that unit tests should always run with stage1, not stage2, and\n- It hard-coded the sysroot layout in stage1, which puts libLLVM.so in `lib/rustlib/` instead of just `lib/`.", "tree": {"sha": "8bda602146bc5f28c6444066075411f7810e0a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bda602146bc5f28c6444066075411f7810e0a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96", "html_url": "https://github.com/rust-lang/rust/commit/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b55c8a0cafdb60b9168da34f904acc70157df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b55c8a0cafdb60b9168da34f904acc70157df8", "html_url": "https://github.com/rust-lang/rust/commit/37b55c8a0cafdb60b9168da34f904acc70157df8"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "8ed1ad3678ea398350bf4c14f16b5f8a6f2ae96e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1d24c2eeb1ea5c723722b2c8543ecb50a53b2c96", "patch": "@@ -2066,6 +2066,7 @@ impl Step for Crate {\n     }\n }\n \n+/// Rustdoc is special in various ways, which is why this step is different from `Crate`.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdoc {\n     host: TargetSelection,\n@@ -2093,11 +2094,15 @@ impl Step for CrateRustdoc {\n         let test_kind = self.test_kind;\n         let target = self.host;\n \n-        // Use the previous stage compiler to reuse the artifacts that are\n-        // created when running compiletest for src/test/rustdoc. If this used\n-        // `compiler`, then it would cause rustdoc to be built *again*, which\n-        // isn't really necessary.\n-        let compiler = builder.compiler_for(builder.top_stage, target, target);\n+        let compiler = if builder.config.download_rustc {\n+            builder.compiler(builder.top_stage, target)\n+        } else {\n+            // Use the previous stage compiler to reuse the artifacts that are\n+            // created when running compiletest for src/test/rustdoc. If this used\n+            // `compiler`, then it would cause rustdoc to be built *again*, which\n+            // isn't really necessary.\n+            builder.compiler_for(builder.top_stage, target, target)\n+        };\n         builder.ensure(compile::Rustc { compiler, target });\n \n         let mut cargo = tool::prepare_tool_cargo(\n@@ -2137,6 +2142,8 @@ impl Step for CrateRustdoc {\n         // sets up the dylib path for the *host* (stage1/lib), which is the\n         // wrong directory.\n         //\n+        // Recall that we special-cased `compiler_for(top_stage)` above, so we always use stage1.\n+        //\n         // It should be considered to just stop running doctests on\n         // librustdoc. There is only one test, and it doesn't look too\n         // important. There might be other ways to avoid this, but it seems\n@@ -2145,8 +2152,15 @@ impl Step for CrateRustdoc {\n         // See also https://github.com/rust-lang/rust/issues/13983 where the\n         // host vs target dylibs for rustdoc are consistently tricky to deal\n         // with.\n+        //\n+        // Note that this set the host libdir for `download_rustc`, which uses a normal rust distribution.\n+        let libdir = if builder.config.download_rustc {\n+            builder.rustc_libdir(compiler)\n+        } else {\n+            builder.sysroot_libdir(compiler, target).to_path_buf()\n+        };\n         let mut dylib_path = dylib_path();\n-        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+        dylib_path.insert(0, PathBuf::from(&*libdir));\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n         if !builder.config.verbose_tests {"}]}