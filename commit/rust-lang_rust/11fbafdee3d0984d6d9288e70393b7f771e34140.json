{"sha": "11fbafdee3d0984d6d9288e70393b7f771e34140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZmJhZmRlZTNkMDk4NGQ2ZDkyODhlNzAzOTNiN2Y3NzFlMzQxNDA=", "commit": {"author": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-09-17T20:27:24Z"}, "committer": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-09-17T20:28:52Z"}, "message": "Narrow \"if-let to match\" assist available range", "tree": {"sha": "2983f8c8f30a465cb2e4d9484bcae811bc4ea04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2983f8c8f30a465cb2e4d9484bcae811bc4ea04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11fbafdee3d0984d6d9288e70393b7f771e34140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11fbafdee3d0984d6d9288e70393b7f771e34140", "html_url": "https://github.com/rust-lang/rust/commit/11fbafdee3d0984d6d9288e70393b7f771e34140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11fbafdee3d0984d6d9288e70393b7f771e34140/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4badd2faf8092870a0ecc920856b169eefc5f15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4badd2faf8092870a0ecc920856b169eefc5f15c", "html_url": "https://github.com/rust-lang/rust/commit/4badd2faf8092870a0ecc920856b169eefc5f15c"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "18736533068124e2f6f47cea887f436fb4857455", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/11fbafdee3d0984d6d9288e70393b7f771e34140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fbafdee3d0984d6d9288e70393b7f771e34140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=11fbafdee3d0984d6d9288e70393b7f771e34140", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, NameOwner,\n     },\n-    AstNode,\n+    AstNode, TextRange,\n };\n \n use crate::{\n@@ -44,6 +44,14 @@ use crate::{\n // ```\n pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n+    let available_range = TextRange::new(\n+        if_expr.syntax().text_range().start(),\n+        if_expr.then_branch()?.syntax().text_range().start(),\n+    );\n+    let cursor_in_range = available_range.contains_range(ctx.frange.range);\n+    if !cursor_in_range {\n+        return None;\n+    }\n     let mut else_block = None;\n     let if_exprs = successors(Some(if_expr.clone()), |expr| match expr.else_branch()? {\n         ast::ElseBranch::IfExpr(expr) => Some(expr),\n@@ -79,11 +87,10 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n         return None;\n     }\n \n-    let target = if_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_if_let_with_match\", AssistKind::RefactorRewrite),\n         \"Replace if let with match\",\n-        target,\n+        available_range,\n         move |edit| {\n             let match_expr = {\n                 let else_arm = make_else_arm(ctx, else_block, &cond_bodies);\n@@ -330,6 +337,38 @@ impl VariantData {\n         )\n     }\n \n+    #[test]\n+    fn test_if_let_with_match_available_range_left() {\n+        check_assist_not_applicable(\n+            replace_if_let_with_match,\n+            r#\"\n+impl VariantData {\n+    pub fn foo(&self) {\n+        $0 if let VariantData::Struct(..) = *self {\n+            self.foo();\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_if_let_with_match_available_range_right() {\n+        check_assist_not_applicable(\n+            replace_if_let_with_match,\n+            r#\"\n+impl VariantData {\n+    pub fn foo(&self) {\n+        if let VariantData::Struct(..) = *self {$0\n+            self.foo();\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_if_let_with_match_basic() {\n         check_assist("}]}