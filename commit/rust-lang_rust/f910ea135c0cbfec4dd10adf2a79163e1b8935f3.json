{"sha": "f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTBlYTEzNWMwY2JmZWM0ZGQxMGFkZjJhNzkxNjNlMWI4OTM1ZjM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-05T21:47:24Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-05T21:47:24Z"}, "message": "Avoid using `as` cast", "tree": {"sha": "07cccf06294f750c25d7c2e9701425a92d124d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07cccf06294f750c25d7c2e9701425a92d124d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "html_url": "https://github.com/rust-lang/rust/commit/f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f910ea135c0cbfec4dd10adf2a79163e1b8935f3/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c5e53553859d153009f76d2da15bf2d0e3d037", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c5e53553859d153009f76d2da15bf2d0e3d037", "html_url": "https://github.com/rust-lang/rust/commit/56c5e53553859d153009f76d2da15bf2d0e3d037"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "3fccbaa33f052845ef437dec7fb55fb869cea985", "filename": "src/shims/fs.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f910ea135c0cbfec4dd10adf2a79163e1b8935f3/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f910ea135c0cbfec4dd10adf2a79163e1b8935f3/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=f910ea135c0cbfec4dd10adf2a79163e1b8935f3", "patch": "@@ -174,19 +174,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.read_scalar(buf_op)?.not_undef()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n+            let count = helpers::try_into_host_usize(count)\n+                .ok_or_else(|| err_unsup_format!(\"Program tries to read into buffer too big for this host platform\"))?;\n             // We want to read at most `count` bytes\n-            let mut bytes = vec![0; count as usize];\n+            let mut bytes = vec![0; count];\n             let result = handle.file.read(&mut bytes);\n \n             match result {\n                 Ok(c) => {\n-                    if let Some(read_bytes) = helpers::try_from_host_usize::<i64>(c) {\n-                        // If reading to `bytes` did not fail, we write those bytes to the buffer.\n-                        this.memory.write_bytes(buf, bytes)?;\n-                        Ok(read_bytes)\n-                    } else {\n-                        throw_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c);\n-                    }\n+                    let read_bytes = helpers::try_from_host_usize::<i64>(c)\n+                        .ok_or_else(|| err_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c))?;\n+                    // If reading to `bytes` did not fail, we write those bytes to the buffer.\n+                    this.memory.write_bytes(buf, bytes)?;\n+                    Ok(read_bytes)\n                 },\n                 Err(e) => {\n                     this.set_last_error_from_io_error(e)?;\n@@ -221,13 +221,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let result = handle.file.write(&bytes);\n \n             match result {\n-                Ok(c) => {\n-                    if let Some(written_bytes) = helpers::try_from_host_usize::<i64>(c) {\n-                        Ok(written_bytes)\n-                    } else {\n-                        throw_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c);\n-                    }\n-                },\n+                Ok(c) => helpers::try_from_host_usize::<i64>(c)\n+                    .ok_or_else(|| err_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c).into()),\n                 Err(e) => {\n                     this.set_last_error_from_io_error(e)?;\n                     Ok(-1)"}]}