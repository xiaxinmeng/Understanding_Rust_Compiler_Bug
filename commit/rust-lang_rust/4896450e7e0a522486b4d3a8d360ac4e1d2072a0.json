{"sha": "4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTY0NTBlN2UwYTUyMjQ4NmI0ZDNhOGQzNjBhYzRlMWQyMDcyYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-01T00:42:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-01T00:42:50Z"}, "message": "Auto merge of #83731 - Dylan-DPC:rollup-v2z3gkt, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #83015 (Add regression tests for #79825 and #81555)\n - #83699 (Add a regression test for issue-68830)\n - #83700 (Fix documentation of conversion from String to OsString)\n - #83711 (Clarify `--print target-list` is a rustc's option)\n - #83712 (Update LLVM with another wasm simd fix)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "54628802ca578a763a6c0a7007fc664dfb9518c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54628802ca578a763a6c0a7007fc664dfb9518c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "html_url": "https://github.com/rust-lang/rust/commit/4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdac23f3171e2f8864d359a21da600dd3faafc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdac23f3171e2f8864d359a21da600dd3faafc9", "html_url": "https://github.com/rust-lang/rust/commit/4fdac23f3171e2f8864d359a21da600dd3faafc9"}, {"sha": "578cfa35353cf9f1af189ea933905612a58c9083", "url": "https://api.github.com/repos/rust-lang/rust/commits/578cfa35353cf9f1af189ea933905612a58c9083", "html_url": "https://github.com/rust-lang/rust/commit/578cfa35353cf9f1af189ea933905612a58c9083"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "3692219cb6d446ab40b5a07ed07ce8c1a01841b0", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -953,7 +953,7 @@ pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> T\n             opts.error_format,\n             &format!(\n                 \"Error loading target specification: {}. \\\n-            Use `--print target-list` for a list of built-in targets\",\n+                 Run `rustc --print target-list` for a list of built-in targets\",\n                 e\n             ),\n         )"}, {"sha": "ecaab6703490803a7ad84d666e0bb7c53ef498b8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -361,7 +361,7 @@ impl OsString {\n impl From<String> for OsString {\n     /// Converts a [`String`] into a [`OsString`].\n     ///\n-    /// The conversion copies the data, and includes an allocation on the heap.\n+    /// This conversion does not allocate or copy memory.\n     #[inline]\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n@@ -858,7 +858,7 @@ impl From<Cow<'_, OsStr>> for Box<OsStr> {\n \n #[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n impl From<Box<OsStr>> for OsString {\n-    /// Converts a [`Box`]`<`[`OsStr`]`>` into a `OsString` without copying or\n+    /// Converts a [`Box`]`<`[`OsStr`]`>` into an [`OsString`] without copying or\n     /// allocating.\n     #[inline]\n     fn from(boxed: Box<OsStr>) -> OsString {"}, {"sha": "f4020a428791efa93d16473e0273ee18abe89ed2", "filename": "library/std/src/path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -1467,7 +1467,7 @@ impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<OsString> for PathBuf {\n-    /// Converts a `OsString` into a `PathBuf`\n+    /// Converts an [`OsString`] into a [`PathBuf`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1478,7 +1478,7 @@ impl From<OsString> for PathBuf {\n \n #[stable(feature = \"from_path_buf_for_os_string\", since = \"1.14.0\")]\n impl From<PathBuf> for OsString {\n-    /// Converts a `PathBuf` into a `OsString`\n+    /// Converts a [`PathBuf`] into an [`OsString`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1489,7 +1489,7 @@ impl From<PathBuf> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for PathBuf {\n-    /// Converts a `String` into a `PathBuf`\n+    /// Converts a [`String`] into a [`PathBuf`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1595,7 +1595,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a `PathBuf` into an `Arc` by moving the `PathBuf` data into a new `Arc` buffer.\n+    /// Converts a [`PathBuf`] into an [`Arc`] by moving the [`PathBuf`] data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1605,7 +1605,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Arc<Path> {\n-    /// Converts a `Path` into an `Arc` by copying the `Path` data into a new `Arc` buffer.\n+    /// Converts a [`Path`] into an [`Arc`] by copying the [`Path`] data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1615,7 +1615,7 @@ impl From<&Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a `PathBuf` into an `Rc` by moving the `PathBuf` data into a new `Rc` buffer.\n+    /// Converts a [`PathBuf`] into an [`Rc`] by moving the [`PathBuf`] data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1625,7 +1625,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Rc<Path> {\n-    /// Converts a `Path` into an `Rc` by copying the `Path` data into a new `Rc` buffer.\n+    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}, {"sha": "0abbcc04d8375661a0637896b9ae5dc37a99dc70", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -1 +1 @@\n-Subproject commit c3a26cbf6e73f2c5f8d03cee1f151d90a266ef3c\n+Subproject commit 0abbcc04d8375661a0637896b9ae5dc37a99dc70"}, {"sha": "930891b1d43f9a4b3459d73ebf06a9a5fa643592", "filename": "src/test/ui/proc-macro/auxiliary/issue-79825.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-79825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-79825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-79825.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn assert_input(args: TokenStream, input: TokenStream) -> TokenStream {\n+    assert_eq!(input.to_string(), \"trait Alias = Sized ;\");\n+    assert!(args.is_empty());\n+    TokenStream::new()\n+}"}, {"sha": "f628469ce3a62ff88becb4de73fafdd42d380a75", "filename": "src/test/ui/proc-macro/issue-79825.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fissue-79825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fissue-79825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-79825.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// aux-build:issue-79825.rs\n+#![feature(trait_alias)]\n+\n+extern crate issue_79825;\n+\n+#[issue_79825::assert_input]\n+trait Alias = Sized;\n+\n+fn main() {}"}, {"sha": "693f1f7dc39ff23c6e5ac8a7825ed7eda75fba28", "filename": "src/test/ui/proc-macro/issue-81555.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81555.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81555.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81555.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// aux-build:test-macros.rs\n+#![feature(stmt_expr_attributes, proc_macro_hygiene)]\n+\n+extern crate test_macros;\n+\n+use test_macros::identity_attr;\n+\n+#[identity_attr]\n+fn main() {\n+    let _x;\n+    let y = ();\n+    #[identity_attr]\n+    _x = y;\n+}"}, {"sha": "d11ec79833217060bcdee1b827b613456618041b", "filename": "src/test/ui/specialization/issue-68830-spurious-diagnostics.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.rs?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -0,0 +1,23 @@\n+// A regression test for #68830. This checks we don't emit\n+// a verbose `conflicting implementations` error.\n+\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+struct BadStruct {\n+    err: MissingType //~ ERROR: cannot find type `MissingType` in this scope\n+}\n+\n+trait MyTrait<T> {\n+    fn foo();\n+}\n+\n+impl<T, D> MyTrait<T> for D {\n+    default fn foo() {}\n+}\n+\n+impl<T> MyTrait<T> for BadStruct {\n+    fn foo() {}\n+}\n+\n+fn main() {}"}, {"sha": "833f61dca8cac6ce03062d9a04798e0567510756", "filename": "src/test/ui/specialization/issue-68830-spurious-diagnostics.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4896450e7e0a522486b4d3a8d360ac4e1d2072a0/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-68830-spurious-diagnostics.stderr?ref=4896450e7e0a522486b4d3a8d360ac4e1d2072a0", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `MissingType` in this scope\n+  --> $DIR/issue-68830-spurious-diagnostics.rs:8:10\n+   |\n+LL |     err: MissingType\n+   |          ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}