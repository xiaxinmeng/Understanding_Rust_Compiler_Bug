{"sha": "50ecb1e19bc555aa627224d41a5ca243e44296f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZWNiMWUxOWJjNTU1YWE2MjcyMjRkNDFhNWNhMjQzZTQ0Mjk2ZjQ=", "commit": {"author": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T10:33:14Z"}, "committer": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T10:39:31Z"}, "message": "introduce named constants for highlighting tag names.", "tree": {"sha": "1e93f0960bcaad49ea1325bd1d42e851380ca613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e93f0960bcaad49ea1325bd1d42e851380ca613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ecb1e19bc555aa627224d41a5ca243e44296f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ecb1e19bc555aa627224d41a5ca243e44296f4", "html_url": "https://github.com/rust-lang/rust/commit/50ecb1e19bc555aa627224d41a5ca243e44296f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ecb1e19bc555aa627224d41a5ca243e44296f4/comments", "author": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "html_url": "https://github.com/rust-lang/rust/commit/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0"}], "stats": {"total": 104, "additions": 67, "deletions": 37}, "files": [{"sha": "d0cefea0f92690332c45efa14d73a17e00e98127", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 67, "deletions": 37, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/50ecb1e19bc555aa627224d41a5ca243e44296f4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ecb1e19bc555aa627224d41a5ca243e44296f4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=50ecb1e19bc555aa627224d41a5ca243e44296f4", "patch": "@@ -16,6 +16,32 @@ use crate::{\n     FileId,\n };\n \n+const HIGHLIGHT_TAG_FIELD: &'static str = \"field\";\n+const HIGHLIGHT_TAG_FUNCTION: &'static str = \"function\";\n+const HIGHLIGHT_TAG_MODULE: &'static str = \"module\";\n+const HIGHLIGHT_TAG_TYPE: &'static str = \"type\";\n+const HIGHLIGHT_TAG_CONSTANT: &'static str = \"constant\";\n+const HIGHLIGHT_TAG_MACRO: &'static str = \"macro\";\n+const HIGHLIGHT_TAG_VARIABLE: &'static str = \"variable\";\n+const HIGHLIGHT_TAG_VARIABLE_MUT: &'static str = \"variable.mut\";\n+const HIGHLIGHT_TAG_TEXT: &'static str = \"text\";\n+\n+const HIGHLIGHT_TAG_TYPE_BUILTIN: &'static str = \"type.builtin\";\n+const HIGHLIGHT_TAG_TYPE_SELF: &'static str = \"type.self\";\n+const HIGHLIGHT_TAG_TYPE_PARAM: &'static str = \"type.param\";\n+const HIGHLIGHT_TAG_TYPE_LIFETIME: &'static str = \"type.lifetime\";\n+\n+const HIGHLIGHT_TAG_LITERAL_BYTE: &'static str = \"literal.byte\";\n+const HIGHLIGHT_TAG_LITERAL_NUMERIC: &'static str = \"literal.numeric\";\n+const HIGHLIGHT_TAG_LITERAL_CHAR: &'static str = \"literal.char\";\n+const HIGHLIGHT_TAG_LITERAL_COMMENT: &'static str = \"comment\";\n+const HIGHLIGHT_TAG_LITERAL_STRING: &'static str = \"string\";\n+const HIGHLIGHT_TAG_LITERAL_ATTRIBUTE: &'static str = \"attribute\";\n+\n+const HIGHLIGHT_TAG_KEYWORD_UNSAFE: &'static str = \"keyword.unsafe\";\n+const HIGHLIGHT_TAG_KEYWORD_CONTROL: &'static str = \"keyword.control\";\n+const HIGHLIGHT_TAG_KEYWORD: &'static str = \"keyword\";\n+\n #[derive(Debug)]\n pub struct HighlightedRange {\n     pub range: TextRange,\n@@ -71,9 +97,9 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 bindings_shadow_count.clear();\n                 continue;\n             }\n-            COMMENT => \"comment\",\n-            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n-            ATTR => \"attribute\",\n+            COMMENT => HIGHLIGHT_TAG_LITERAL_COMMENT,\n+            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HIGHLIGHT_TAG_LITERAL_STRING,\n+            ATTR => HIGHLIGHT_TAG_LITERAL_ATTRIBUTE,\n             NAME_REF => {\n                 if node.ancestors().any(|it| it.kind() == ATTR) {\n                     continue;\n@@ -90,7 +116,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     }\n                 };\n \n-                name_kind.map_or(\"text\", |it| highlight_name(db, it))\n+                name_kind.map_or(HIGHLIGHT_TAG_TEXT, |it| highlight_name(db, it))\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n@@ -107,21 +133,25 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n                 match name_kind {\n                     Some(name_kind) => highlight_name(db, name_kind),\n-                    None => name.syntax().parent().map_or(\"function\", |x| match x.kind() {\n-                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n-                        TYPE_PARAM => \"type.param\",\n-                        RECORD_FIELD_DEF => \"field\",\n-                        _ => \"function\",\n-                    }),\n+                    None => {\n+                        name.syntax().parent().map_or(HIGHLIGHT_TAG_FUNCTION, |x| match x.kind() {\n+                            STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => {\n+                                HIGHLIGHT_TAG_TYPE\n+                            }\n+                            TYPE_PARAM => HIGHLIGHT_TAG_TYPE_PARAM,\n+                            RECORD_FIELD_DEF => HIGHLIGHT_TAG_FIELD,\n+                            _ => HIGHLIGHT_TAG_FUNCTION,\n+                        })\n+                    }\n                 }\n             }\n-            INT_NUMBER | FLOAT_NUMBER => \"literal.numeric\",\n-            BYTE => \"literal.byte\",\n-            CHAR => \"literal.char\",\n-            LIFETIME => \"type.lifetime\",\n-            T![unsafe] => \"keyword.unsafe\",\n-            k if is_control_keyword(k) => \"keyword.control\",\n-            k if k.is_keyword() => \"keyword\",\n+            INT_NUMBER | FLOAT_NUMBER => HIGHLIGHT_TAG_LITERAL_NUMERIC,\n+            BYTE => HIGHLIGHT_TAG_LITERAL_BYTE,\n+            CHAR => HIGHLIGHT_TAG_LITERAL_CHAR,\n+            LIFETIME => HIGHLIGHT_TAG_TYPE_LIFETIME,\n+            T![unsafe] => HIGHLIGHT_TAG_KEYWORD_UNSAFE,\n+            k if is_control_keyword(k) => HIGHLIGHT_TAG_KEYWORD_CONTROL,\n+            k if k.is_keyword() => HIGHLIGHT_TAG_KEYWORD,\n             _ => {\n                 if let Some(macro_call) = node.as_node().cloned().and_then(ast::MacroCall::cast) {\n                     if let Some(path) = macro_call.path() {\n@@ -138,7 +168,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 }\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n-                                    tag: \"macro\",\n+                                    tag: HIGHLIGHT_TAG_MACRO,\n                                     binding_hash: None,\n                                 })\n                             }\n@@ -214,29 +244,29 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n-        Macro(_) => \"macro\",\n-        Field(_) => \"field\",\n-        AssocItem(hir::AssocItem::Function(_)) => \"function\",\n-        AssocItem(hir::AssocItem::Const(_)) => \"constant\",\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::Module(_)) => \"module\",\n-        Def(hir::ModuleDef::Function(_)) => \"function\",\n-        Def(hir::ModuleDef::Adt(_)) => \"type\",\n-        Def(hir::ModuleDef::EnumVariant(_)) => \"constant\",\n-        Def(hir::ModuleDef::Const(_)) => \"constant\",\n-        Def(hir::ModuleDef::Static(_)) => \"constant\",\n-        Def(hir::ModuleDef::Trait(_)) => \"type\",\n-        Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::BuiltinType(_)) => \"type.builtin\",\n-        SelfType(_) => \"type.self\",\n-        TypeParam(_) => \"type.param\",\n+        Macro(_) => HIGHLIGHT_TAG_MACRO,\n+        Field(_) => HIGHLIGHT_TAG_FIELD,\n+        AssocItem(hir::AssocItem::Function(_)) => HIGHLIGHT_TAG_FUNCTION,\n+        AssocItem(hir::AssocItem::Const(_)) => HIGHLIGHT_TAG_CONSTANT,\n+        AssocItem(hir::AssocItem::TypeAlias(_)) => HIGHLIGHT_TAG_TYPE,\n+        Def(hir::ModuleDef::Module(_)) => HIGHLIGHT_TAG_MODULE,\n+        Def(hir::ModuleDef::Function(_)) => HIGHLIGHT_TAG_FUNCTION,\n+        Def(hir::ModuleDef::Adt(_)) => HIGHLIGHT_TAG_TYPE,\n+        Def(hir::ModuleDef::EnumVariant(_)) => HIGHLIGHT_TAG_CONSTANT,\n+        Def(hir::ModuleDef::Const(_)) => HIGHLIGHT_TAG_CONSTANT,\n+        Def(hir::ModuleDef::Static(_)) => HIGHLIGHT_TAG_CONSTANT,\n+        Def(hir::ModuleDef::Trait(_)) => HIGHLIGHT_TAG_TYPE,\n+        Def(hir::ModuleDef::TypeAlias(_)) => HIGHLIGHT_TAG_TYPE,\n+        Def(hir::ModuleDef::BuiltinType(_)) => HIGHLIGHT_TAG_TYPE_BUILTIN,\n+        SelfType(_) => HIGHLIGHT_TAG_TYPE_SELF,\n+        TypeParam(_) => HIGHLIGHT_TAG_TYPE_PARAM,\n         Local(local) => {\n             if local.is_mut(db) {\n-                \"variable.mut\"\n+                HIGHLIGHT_TAG_VARIABLE_MUT\n             } else if local.ty(db).is_mutable_reference() {\n-                \"variable.mut\"\n+                HIGHLIGHT_TAG_VARIABLE_MUT\n             } else {\n-                \"variable\"\n+                HIGHLIGHT_TAG_VARIABLE\n             }\n         }\n     }"}]}