{"sha": "4c62c76ef99aab3a752c4ebd74b63819cabee98f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjJjNzZlZjk5YWFiM2E3NTJjNGViZDc0YjYzODE5Y2FiZWU5OGY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T03:36:39Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:43:24Z"}, "message": "libfmt_macros: use `#[deriving(Copy)]`", "tree": {"sha": "0e161aecd803912b4dcdc58f15bc0aee894a63e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e161aecd803912b4dcdc58f15bc0aee894a63e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c62c76ef99aab3a752c4ebd74b63819cabee98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c62c76ef99aab3a752c4ebd74b63819cabee98f", "html_url": "https://github.com/rust-lang/rust/commit/4c62c76ef99aab3a752c4ebd74b63819cabee98f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c62c76ef99aab3a752c4ebd74b63819cabee98f/comments", "author": null, "committer": null, "parents": [{"sha": "30cefcbdfde6ff12c550914fede8180344d54857", "url": "https://api.github.com/repos/rust-lang/rust/commits/30cefcbdfde6ff12c550914fede8180344d54857", "html_url": "https://github.com/rust-lang/rust/commit/30cefcbdfde6ff12c550914fede8180344d54857"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "3099bf559e4bfa2384a2bc36536106137d99a79c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c62c76ef99aab3a752c4ebd74b63819cabee98f/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c62c76ef99aab3a752c4ebd74b63819cabee98f/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=4c62c76ef99aab3a752c4ebd74b63819cabee98f", "patch": "@@ -35,7 +35,7 @@ use std::string;\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -44,21 +44,17 @@ pub enum Piece<'a> {\n     NextArgument(Argument<'a>),\n }\n \n-impl<'a> Copy for Piece<'a> {}\n-\n /// Representation of an argument specification.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n     /// How to format the argument\n     pub format: FormatSpec<'a>,\n }\n \n-impl<'a> Copy for Argument<'a> {}\n-\n /// Specification for the formatting of an argument in the format string.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n     pub fill: Option<char>,\n@@ -76,10 +72,8 @@ pub struct FormatSpec<'a> {\n     pub ty: &'a str\n }\n \n-impl<'a> Copy for FormatSpec<'a> {}\n-\n /// Enum describing where an argument for a format can be located.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Position<'a> {\n     /// The argument will be in the next position. This is the default.\n     ArgumentNext,\n@@ -89,10 +83,8 @@ pub enum Position<'a> {\n     ArgumentNamed(&'a str),\n }\n \n-impl<'a> Copy for Position<'a> {}\n-\n /// Enum of alignments which are supported.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -104,11 +96,9 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n-impl Copy for Alignment {}\n-\n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -122,11 +112,9 @@ pub enum Flag {\n     FlagSignAwareZeroPad,\n }\n \n-impl Copy for Flag {}\n-\n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Count<'a> {\n     /// The count is specified explicitly.\n     CountIs(uint),\n@@ -140,8 +128,6 @@ pub enum Count<'a> {\n     CountImplied,\n }\n \n-impl<'a> Copy for Count<'a> {}\n-\n /// The parser structure for interpreting the input format string. This is\n /// modelled as an iterator over `Piece` structures to form a stream of tokens\n /// being output."}]}