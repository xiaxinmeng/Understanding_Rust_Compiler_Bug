{"sha": "abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmE4MTY0Y2Q5ZDY0ZTk1MDM5MDE5ZWI5YjRjM2ZkZWMyNjg1YzU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-21T20:25:25Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-21T23:19:04Z"}, "message": "Change the level of forcing in structurally_resolved_type().\n\nA cleaner way to handle suffix inference for unary minus exprs.", "tree": {"sha": "fa581e4cc055b00bed791c70f2a074a6a3ba9709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa581e4cc055b00bed791c70f2a074a6a3ba9709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "html_url": "https://github.com/rust-lang/rust/commit/abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfa8164cd9d64e95039019eb9b4c3fdec2685c5/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317864672df72a0cb33209f78506bedb99d16223", "url": "https://api.github.com/repos/rust-lang/rust/commits/317864672df72a0cb33209f78506bedb99d16223", "html_url": "https://github.com/rust-lang/rust/commit/317864672df72a0cb33209f78506bedb99d16223"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "e3f6ba40aefda3fabec4088d0c87f680d5c95ff8", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abfa8164cd9d64e95039019eb9b4c3fdec2685c5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfa8164cd9d64e95039019eb9b4c3fdec2685c5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "patch": "@@ -74,7 +74,7 @@ import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n import rscope::{in_binding_rscope, region_scope, type_rscope};\n import syntax::ast::ty_i;\n import typeck::infer::{unify_methods}; // infcx.set()\n-import typeck::infer::{force_level, force_none, force_non_region_vars_only,\n+import typeck::infer::{force_level, force_none, force_ty_vars_only,\n                        force_all};\n \n type fn_ctxt =\n@@ -1174,14 +1174,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             }\n           }\n           ast::neg {\n-            // If the operand's type is an integral type variable, we\n-            // don't want to resolve it yet, because the rest of the\n-            // typing context might not have had the opportunity to\n-            // constrain it yet.\n-            if !(ty::type_is_var_integral(oprnd_t)) {\n-                oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n-                                                     oprnd_t);\n-            }\n+            oprnd_t = structurally_resolved_type(fcx, oprnd.span, oprnd_t);\n             if !(ty::type_is_integral(oprnd_t) ||\n                  ty::type_is_fp(oprnd_t)) {\n                 oprnd_t = check_user_unop(fcx, \"-\", \"unary-\", expr,\n@@ -2116,7 +2109,7 @@ fn instantiate_path(fcx: @fn_ctxt,\n // resolution is possible, then an error is reported.\n fn structurally_resolved_type(fcx: @fn_ctxt, sp: span, tp: ty::t) -> ty::t {\n     alt infer::resolve_shallow(fcx.infcx, tp,\n-                               force_non_region_vars_only) {\n+                               force_ty_vars_only) {\n       result::ok(t_s) if !ty::type_is_var(t_s) { ret t_s; }\n       _ {\n         fcx.ccx.tcx.sess.span_fatal"}, {"sha": "d545702048fd10989c16ee2a500fec54bbfad3a5", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abfa8164cd9d64e95039019eb9b4c3fdec2685c5/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfa8164cd9d64e95039019eb9b4c3fdec2685c5/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=abfa8164cd9d64e95039019eb9b4c3fdec2685c5", "patch": "@@ -197,7 +197,7 @@ export fixup_err, fixup_err_to_str;\n export assignment;\n export root, to_str;\n export int_ty_set_all;\n-export force_level, force_none, force_non_region_vars_only, force_all;\n+export force_level, force_none, force_ty_vars_only, force_all;\n \n // Bitvector to represent sets of integral types\n enum int_ty_set = uint;\n@@ -1093,9 +1093,9 @@ enum force_level {\n     // Any unconstrained variables are OK.\n     force_none,\n \n-    // Unconstrained region vars are OK; unconstrained ty vars and\n-    // integral ty vars result in an error.\n-    force_non_region_vars_only,\n+    // Unconstrained region vars and integral ty vars are OK;\n+    // unconstrained general-purpose ty vars result in an error.\n+    force_ty_vars_only,\n \n     // Any unconstrained variables result in an error.\n     force_all,\n@@ -1237,7 +1237,7 @@ impl methods for resolve_state {\n               { ub:_, lb:some(t) } { self.resolve1(t) }\n               { ub:none, lb:none } {\n                 alt self.force_vars {\n-                  force_non_region_vars_only | force_all {\n+                  force_ty_vars_only | force_all {\n                     self.err = some(unresolved_ty(vid));\n                   }\n                   force_none { /* ok */ }\n@@ -1260,7 +1260,7 @@ impl methods for resolve_state {\n           some(t) { t }\n           none {\n             alt self.force_vars {\n-              force_non_region_vars_only | force_all {\n+              force_all {\n                 // As a last resort, default to int.\n                 let ty = ty::mk_int(self.infcx.tcx);\n                 self.infcx.set(\n@@ -1270,7 +1270,7 @@ impl methods for resolve_state {\n                         nde.rank));\n                 ty\n               }\n-              force_none {\n+              force_none | force_ty_vars_only {\n                 ty::mk_var_integral(self.infcx.tcx, vid)\n               }\n             }"}]}