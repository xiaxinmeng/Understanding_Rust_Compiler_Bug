{"sha": "f1d0829e20e3ff3ff78a09136968612887544af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDA4MjllMjBlM2ZmM2ZmNzhhMDkxMzY5Njg2MTI4ODc1NDRhZjI=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-05-04T10:04:52Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-05-25T00:53:08Z"}, "message": "Add Step::sub_usize", "tree": {"sha": "c64d009d967eb8f6ab530d07d4836f5e3382bd7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c64d009d967eb8f6ab530d07d4836f5e3382bd7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d0829e20e3ff3ff78a09136968612887544af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d0829e20e3ff3ff78a09136968612887544af2", "html_url": "https://github.com/rust-lang/rust/commit/f1d0829e20e3ff3ff78a09136968612887544af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d0829e20e3ff3ff78a09136968612887544af2/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "html_url": "https://github.com/rust-lang/rust/commit/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "6bbf776fb8f17bb7d6f14266e398ad3fc9e029bc", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=f1d0829e20e3ff3ff78a09136968612887544af2", "patch": "@@ -34,6 +34,13 @@ pub trait Step: Clone + PartialOrd + Sized {\n \n     /// Adds a `usize`, returning `None` on overflow.\n     fn add_usize(&self, n: usize) -> Option<Self>;\n+\n+    /// Subtracts a `usize`, returning `None` on underflow.\n+    fn sub_usize(&self, n: usize) -> Option<Self> {\n+        // this default implementation makes the addition of `sub_usize` a non-breaking change\n+        let _ = n;\n+        unimplemented!()\n+    }\n }\n \n // These are still macro-generated because the integer literals resolve to different types.\n@@ -85,6 +92,15 @@ macro_rules! step_impl_unsigned {\n                 }\n             }\n \n+            #[inline]\n+            #[allow(unreachable_patterns)]\n+            fn sub_usize(&self, n: usize) -> Option<Self> {\n+                match <$t>::try_from(n) {\n+                    Ok(n_as_t) => self.checked_sub(n_as_t),\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)\n@@ -125,6 +141,25 @@ macro_rules! step_impl_signed {\n                 }\n             }\n \n+            #[inline]\n+            #[allow(unreachable_patterns)]\n+            fn sub_usize(&self, n: usize) -> Option<Self> {\n+                match <$unsigned>::try_from(n) {\n+                    Ok(n_as_unsigned) => {\n+                        // Wrapping in unsigned space handles cases like\n+                        // `80_i8.sub_usize(200) == Some(-120_i8)`,\n+                        // even though 200_usize is out of range for i8.\n+                        let wrapped = (*self as $unsigned).wrapping_sub(n_as_unsigned) as $t;\n+                        if wrapped <= *self {\n+                            Some(wrapped)\n+                        } else {\n+                            None  // Subtraction underflowed\n+                        }\n+                    }\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)"}, {"sha": "c7f6e54c3d56b1dd713af054614859256a7721bb", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=f1d0829e20e3ff3ff78a09136968612887544af2", "patch": "@@ -212,6 +212,11 @@ macro_rules! newtype_index {\n             fn add_usize(&self, u: usize) -> Option<Self> {\n                 Idx::index(*self).checked_add(u).map(Self::new)\n             }\n+\n+            #[inline]\n+            fn sub_usize(&self, u: usize) -> Option<Self> {\n+                Idx::index(*self).checked_sub(u).map(Self::new)\n+            }\n         }\n \n         impl From<$type> for u32 {"}, {"sha": "f1b1656745e7c487b8ba1c75c69a3487e34a16db", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d0829e20e3ff3ff78a09136968612887544af2/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=f1d0829e20e3ff3ff78a09136968612887544af2", "patch": "@@ -180,6 +180,10 @@ impl std::iter::Step for NaiveDate {\n     fn add_usize(&self, _: usize) -> Option<Self> {\n         unimplemented!()\n     }\n+\n+    fn sub_usize(&self, _: usize) -> Option<Self> {\n+        unimplemented!()\n+    }\n }\n \n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]"}]}